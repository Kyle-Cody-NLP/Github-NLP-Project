[
 {
  "repo": "pyca/cryptography",
  "language": "Python",
  "readme_contents": "pyca/cryptography\n=================\n\n.. image:: https://img.shields.io/pypi/v/cryptography.svg\n    :target: https://pypi.org/project/cryptography/\n    :alt: Latest Version\n\n.. image:: https://readthedocs.org/projects/cryptography/badge/?version=latest\n    :target: https://cryptography.io\n    :alt: Latest Docs\n\n.. image:: https://github.com/pyca/cryptography/workflows/CI/badge.svg?branch=main\n    :target: https://github.com/pyca/cryptography/actions?query=workflow%3ACI+branch%3Amain\n\n\n``cryptography`` is a package which provides cryptographic recipes and\nprimitives to Python developers.  Our goal is for it to be your \"cryptographic\nstandard library\". It supports Python 3.6+ and PyPy3 7.2+.\n\n``cryptography`` includes both high level recipes and low level interfaces to\ncommon cryptographic algorithms such as symmetric ciphers, message digests, and\nkey derivation functions. For example, to encrypt something with\n``cryptography``'s high level symmetric encryption recipe:\n\n.. code-block:: pycon\n\n    >>> from cryptography.fernet import Fernet\n    >>> # Put this somewhere safe!\n    >>> key = Fernet.generate_key()\n    >>> f = Fernet(key)\n    >>> token = f.encrypt(b\"A really secret message. Not for prying eyes.\")\n    >>> token\n    '...'\n    >>> f.decrypt(token)\n    'A really secret message. Not for prying eyes.'\n\nYou can find more information in the `documentation`_.\n\nYou can install ``cryptography`` with:\n\n.. code-block:: console\n\n    $ pip install cryptography\n\nFor full details see `the installation documentation`_.\n\nDiscussion\n~~~~~~~~~~\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nWe maintain a `cryptography-dev`_ mailing list for development discussion.\n\nYou can also join ``#pyca`` on ``irc.libera.chat`` to ask questions or get\ninvolved.\n\nSecurity\n~~~~~~~~\n\nNeed to report a security issue? Please consult our `security reporting`_\ndocumentation.\n\n\n.. _`documentation`: https://cryptography.io/\n.. _`the installation documentation`: https://cryptography.io/en/latest/installation/\n.. _`issue tracker`: https://github.com/pyca/cryptography/issues\n.. _`cryptography-dev`: https://mail.python.org/mailman/listinfo/cryptography-dev\n.. _`security reporting`: https://cryptography.io/en/latest/security/\n"
 },
 {
  "repo": "sobolevn/awesome-cryptography",
  "language": null,
  "readme_contents": "# Awesome Cryptography [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\n<p align=\"center\">\n  <img src=\"https://github.com/sobolevn/awesome-cryptography/blob/master/awesome-crypto.png?raw=true\" alt=\"Awesome Cryptography\">\n</p>\n\n[![Follow us on twitter](https://img.shields.io/twitter/follow/awe_crypto_bot.svg?style=social&maxAge=0)](https://twitter.com/awe_crypto_bot)\n\nA curated list of cryptography resources and links.\n\n## Contents\n\n<!--lint disable no-missing-blank-lines alphabetize-lists list-item-punctuation-->\n\n- [Theory](#theory)\n  - [Algorithms](#algorithms)\n    - [Symmetric encryption](#symmetric-encryption)\n    - [Asymmetric encryption](#asymmetric-encryption)\n    - [Hash functions](#hash-functions)\n  - [Articles](#articles)\n  - [Books](#books)\n  - [Courses](#courses)\n  - [Other lists](#other-lists)\n- [Tools](#tools)\n  - [Standalone](#standalone)\n  - [Plugins](#plugins)\n    - [Git](#git)\n  - [Playgrounds](#playgrounds)\n- [Frameworks and Libs](#frameworks-and-libs)\n  - [C](#c)\n  - [C#](#c-sharp)\n  - [C++](#c-1)\n  - [Clojure](#clojure)\n  - [Common Lisp](#common-lisp)\n  - [Delphi](#delphi)\n  - [Elixir](#elixir)\n  - [Erlang](#erlang)\n  - [Golang](#go)\n  - [Haskell](#haskell)\n  - [Haxe](#haxe)\n  - [Java](#java)\n  - [JavaScript](#javascript)\n  - [Julia](#julia)\n  - [Lua](#lua)\n  - [OCaml](#ocaml)\n  - [Objective-C](#objective-c)\n  - [PHP](#php)\n  - [Python](#python)\n  - [R](#r)\n  - [Ruby](#ruby)\n  - [Rust](#rust)\n  - [Scala](#scala)\n  - [Swift](#swift)\n- [Resources](#resources)\n  - [Blogs](#blogs)\n  - [Mailing lists](#mailing-lists)\n  - [Web-tools](#web-tools)\n  - [Web-sites](#web-sites)\n- [Contributing](#contributing)\n- [License](#license)\n\n<!--lint enable no-missing-blank-lines alphabetize-lists list-item-punctuation-->\n\n- - -\n\n## Theory\n\n### Algorithms\n\n#### Symmetric encryption\n\n- [3DES](https://en.wikipedia.org/wiki/Triple_DES) - Symmetric-key block cipher (or Triple Data Encryption Algorithm (TDEA or Triple DEA), which applies the Data Encryption Standard (DES) cipher algorithm three times to each data block.\n- [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) - Symmetric-key block cipher algorithm and U.S. government standard for secure and classified data encryption and decryption (also known as Rijndael).\n- [Blowfish](https://en.wikipedia.org/wiki/Blowfish_(cipher)) - Symmetric-key block cipher, designed in 1993 by Bruce Schneier. Notable features of the design include key-dependent S-boxes and a highly complex key schedule.\n\n#### Asymmetric encryption\n\n- [DH](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) - A method of exchanging cryptographic keys securely over a public channel. Unlike RSA, the Diffie-Hellman Key Exchange is not encryption, and is only a way for two parties to agree on a shared secret value. Since the keys generated are completely pseudo-random, DH key exchanges can provide forward secrecy (https://en.wikipedia.org/wiki/Forward_secrecy).\n- [ECC](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) - Public-key cryptosystems based on the algebraic structure of elliptic curves over finite fields.\n- [RSA](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) - One of the first practical public-key cryptosystems and is widely used for secure data transmission. In RSA, this asymmetry is based on the practical difficulty of factoring the product of two large prime numbers, the factoring problem.\n\n#### Transform Encryption\n\n- [Transform Encryption (aka Proxy Re-Encryption)](https://docs.ironcorelabs.com/concepts/transform-encryption) - Transform encryption uses three  mathematically related keys: one to encrypt plaintext to a recipient, a second to decrypt the ciphertext, and a third to transform ciphertext encrypted to one recipient so it can be decrypted by a different recipient.\n\n#### Hash functions\n\n- [MD5](https://en.wikipedia.org/wiki/MD5) - Widely used hash function producing a 128-bit hash value. MD5 was initially designed to be used as a cryptographic hash function, but it has been found to suffer from extensive vulnerabilities. It can still be used as a checksum to verify data integrity, but only against unintentional corruption.\n- [SHA1](https://en.wikipedia.org/wiki/SHA-1) -  Cryptographic hash function designed by the NSA. SHA-1 produces a 160-bit hash value known as a message digest. SHA-1 is no longer considered secure against well-funded opponents.\n- [SHA2](https://en.wikipedia.org/wiki/SHA-2) - Set of hash functions designed by the NSA. SHA-256 and SHA-512 are novel hash functions computed with 32-bit and 64-bit words, respectively. They use different shift amounts and additive constants, but their structures are otherwise virtually identical, differing only in the number of rounds.\n\n### Articles\n\n- [How to Generate Secure Random Numbers in Various Programming Languages](https://paragonie.com/blog/2016/05/how-generate-secure-random-numbers-in-various-programming-languages).\n- [Password Insecurity](https://www.netlogix.at/news/artikel/password-insecurity-part-1/) - This article is written for everybody who is interested in password security.\n- [Secure Account Recovery Made Simple](https://paragonie.com/blog/2016/09/untangling-forget-me-knot-secure-account-recovery-made-simple).\n\n### Books\n\n- [A Graduate Course in Applied Cryptography](https://crypto.stanford.edu/~dabo/cryptobook/) - The book covers many constructions for different tasks in cryptography.\n- [An Introduction to Mathematical Cryptography](http://www.math.brown.edu/~jhs/MathCryptoHome.html) - Introduction to modern cryptography.\n- [Applied Cryptography: Protocols, Algorithms and Source Code in C](https://www.wiley.com/en-ie/Applied+Cryptography%3A+Protocols%2C+Algorithms+and+Source+Code+in+C%2C+20th+Anniversary+Edition-p-9781119439028) - This cryptography classic provides you with a comprehensive survey of modern cryptography. \n- [Crypto101](https://www.crypto101.io/) - Crypto 101 is an introductory course on cryptography.\n- [Cryptography Engineering](https://www.schneier.com/books/cryptography_engineering/) - Learn to build cryptographic protocols that work in the real world.\n- [Handbook of Applied Cryptography](https://cacr.uwaterloo.ca/hac/) - This book is intended as a reference for professional cryptographers.\n- [Introduction to Modern Cryptography](http://www.cs.umd.edu/~jkatz/imc.html) - Introductory-level treatment of cryptography written from a modern, computer science perspective.\n- [OpenSSL Cookbook](https://www.feistyduck.com/library/openssl-cookbook/) - The book about OpenSSL.\n- [Practical Cryptography for Developers](https://cryptobook.nakov.com) - Developer-friendly book on modern cryptography (hashes, MAC codes, symmetric and asymmetric ciphers, key exchange, elliptic curves, digital signatures) with lots of code examples.\n- [Real World Cryptography](https://www.manning.com/books/real-world-cryptography/) - This book teaches you applied cryptographic techniques to understand and apply security at every level of your systems and applications.\n- [Security Engineering](http://www.cl.cam.ac.uk/~rja14/book.html) - There is an extraordinary textbook written by Ross Anderson, professor of computer security at University of Cambridge.\n- [Serious Cryptography](https://nostarch.com/seriouscrypto) - A Practical Introduction to Modern Encryption by Jean-Philippe Aumasson.\n- [The Code Book](https://simonsingh.net/books/the-code-book/) - This book is a digest of the history of cryptography, covering both ancient times, and newer cryptography methods. There are exercises at the end and the solution of those was rewarded with $10.000.\n- [The Cryptoparty Handbook](https://unglue.it/work/141611/) - This book provides a comprehensive guide to the various topics of the computer and internet security.\n- [Understanding Cryptography](http://www.crypto-textbook.com/) - Often overlooked, this book is a boon for beginners to the field. It contains plenty of exercises at the end of each chapter, aimed at reinforcing concepts and cementing ideas.\n\n### Courses\n\n- [A Self-Study Course In Block-Cipher Cryptanalysis](https://www.schneier.com/wp-content/uploads/2016/02/paper-self-study.pdf) - This paper attempts to organize the existing literature of block-cipher cryptanalysis in a way that students can use to learn cryptanalytic techniques and ways to break algorithms, by Bruce Schneier.\n- [Applied Cryptography](https://www.udacity.com/course/applied-cryptography--cs387) - Cryptography is present in everyday life, from paying with a credit card to using the telephone. Learn all about making and breaking puzzles in computing.\n- [Crypto Strikes Back!](https://www.youtube.com/watch?v=ySQl0NhW1J0) - This talk will cover crypto vulnerabilities in widely-deployed systems and how the smallest oversight resulted in catastrophe.\n- [Cryptography](https://www.coursera.org/learn/cryptography) - A practical oriented course in Cryptography by University of Maryland College Park.\n- [Cryptography - Stanford University](http://online.stanford.edu/course/cryptography) - This course explains the inner workings of cryptographic primitives and how to correctly use them. Students will learn how to reason about the security of cryptographic constructions and how to apply this knowledge to real-world applications.\n- [Cryptography I](https://www.coursera.org/learn/crypto) - The course begins with a detailed discussion of how two parties who have a shared secret key can communicate securely when a powerful adversary eavesdrops and tampers with traffic. We will examine many deployed protocols and analyze mistakes in existing systems.\n- [Cybrary Cryptography](https://www.cybrary.it/course/cryptography/) - This online course we will cover how cryptography is the cornerstone of security, and how through its use of different encryption methods, such as ciphers, and public or private keys, you can protect private or sensitive information from unauthorized access.\n- [Harvard's Cryptography Lecture notes](https://intensecrypto.org/) - An introductory but fast-paced undergraduate/beginning graduate course on cryptography, Used for Harvard CS 127.\n- [Journey into cryptography](https://www.khanacademy.org/computing/computer-science/cryptography) - The course of cryptography by Khan Academy.\n- [Practical Aspects of Modern Cryptography](http://courses.cs.washington.edu/courses/csep590/06wi/) - Practical Aspects of Modern Cryptography, Winter 2006 University of Washington CSE.\n- [Theory and Practice of Cryptography](https://www.youtube.com/watch?v=ZDnShu5V99s) - Introduction to Modern Cryptography, Using Cryptography in Practice and at Google, Proofs of Security and Security Definitions and A Special Topic in Cryptography.\n\n### Other lists\n\n- [Awesome crypto-papers](https://github.com/pFarb/awesome-crypto-papers) \u2013 A curated list of cryptography papers, articles, tutorials and howtos.\n- [Awesome HE](https://github.com/jonaschn/awesome-he) \u2013 A curated list of homomorphic encryption libraries, software and resources.\n\n## Tools\n\n### Standalone\n\n- [Bcrypt](http://bcrypt.sourceforge.net/) - Cross-platform file encryption utility.\n- [blackbox](https://github.com/StackExchange/blackbox) - safely store secrets in Git/Mercurial/Subversion.\n- [certbot](https://github.com/certbot/certbot) - Previously the Let's Encrypt Client, is EFF's tool to obtain certs from Let's Encrypt, and (optionally) auto-enable HTTPS on your server. It can also act as a client for any other CA that uses the ACME protocol.\n- [Coherence](https://github.com/liesware/coherence/) - Cryptographic server for modern web apps.\n- [cryptomator](https://github.com/cryptomator/cryptomator) - Multi-platform transparent client-side encryption of your files in the cloud.\n- [Databunker](https://databunker.org/) - API based personal data or PII storage service built to comply with GDPR and CCPA.\n- [gpg](https://www.gnupg.org/) - Complete and free implementation of the OpenPGP standard. It allows to encrypt and sign your data and communication, features a versatile key management system. GnuPG is a command line tool with features for easy integration with other applications.\n- [ironssh](https://github.com/IronCoreLabs/ironssh) - End-to-end encrypt transferred files using sftp/scp and selectively share with others. Automatic key management works with any SSH server. Encrypted files are gpg compatible.\n- [Nipe](https://github.com/GouveaHeitor/nipe) - Nipe is a script to make Tor Network your default gateway.\n- [sops](https://github.com/mozilla/sops) - sops is an editor of encrypted files that supports YAML, JSON and BINARY formats and encrypts with AWS KMS, GCP KMS, Azure Key Vault and PGP.\n- [ves](https://ves.host/docs/ves-util) - End-to-end encrypted sharing via cloud repository, secure recovery through a viral network of friends in case of key loss.\n\n### Plugins\n\n#### Git\n\n- [git-crypt](https://github.com/AGWA/git-crypt) - Transparent file encryption in git.\n- [git-secret](https://sobolevn.github.io/git-secret/) - Bash-tool to store your private data inside a git repository.\n\n### Playgrounds\n\n- [Cryptography Playground](https://vishwas1.github.io/crypto/index.html#/crypto) - A simple web tool to play and learn basic concepts of cryptography like, hashing, symmetric, asymmetric, zkp etc.\n\n## Frameworks and Libs\n\n### C\n\n- [crypto-algorithms](https://github.com/B-Con/crypto-algorithms) - Basic implementations of standard cryptography algorithms, like AES and SHA-1.\n- [libgcrypt](http://directory.fsf.org/wiki/Libgcrypt) - Cryptographic library developed as a separated module of GnuPG.\n- [libkcapi](https://github.com/smuellerDD/libkcapi) - Linux Kernel Crypto API User Space Interface Library.\n- [libsodium](https://github.com/jedisct1/libsodium) - Modern and easy-to-use crypto library.\n- [libtomcrypt](https://github.com/libtom/libtomcrypt) - Fairly comprehensive, modular and portable cryptographic toolkit.\n- [libVES.c](https://github.com/vesvault/libVES.c) - End-to-end encrypted sharing via cloud repository, secure recovery through a viral network of friends in case of key loss.\n- [milagro-crypto-c](https://github.com/apache/incubator-milagro-crypto-c) - Small, self-contained and fast open source crypto library. It supports RSA, ECDH, ECIES, ECDSA, AES-GCM, SHA2, SHA3 and Pairing-Based Cryptography.\n- [monocypher](https://monocypher.org) - small, portable, easy to use crypto library inspired by libsodium and TweetNaCl.\n- [NaCl](https://nacl.cr.yp.to/) - High-speed library for network communication, encryption, decryption, signatures, etc.\n- [nettle](https://github.com/gnutls/nettle) - is a cryptographic library that is designed to fit easily in more or less any context: In crypto toolkits for object-oriented languages (C++, Python, Pike, ...), in applications like LSH or GNUPG, or even in kernel space.\n- [OpenSSL](https://github.com/openssl/openssl) - TLS/SSL and crypto library.\n- [PolarSSL](https://tls.mbed.org/) - PolarSSL makes it trivially easy for developers to include cryptographic and SSL/TLS capabilities in their (embedded) products, facilitating this functionality with a minimal coding footprint.\n- [RHash](https://github.com/rhash/RHash) - Great utility for computing hash sums.\n- [themis](https://github.com/cossacklabs/themis) - High level crypto library for storing data (AES), secure messaging (ECC + ECDSA / RSA + PSS + PKCS#7) and session-oriented, forward secrecy data exchange (ECDH key agreement, ECC & AES encryption). Ported on many languages and platforms, suitable for client-server infastructures.\n- [tiny-AES128-C](https://github.com/kokke/tiny-AES128-C) - Small portable AES128 in C.\n- [wolfSSL](https://github.com/wolfSSL/wolfssl) - Small, fast, portable implementation of TLS/SSL for embedded devices to the cloud.\n- [XKCP](https://github.com/XKCP/XKCP) \u2014 is a repository that gathers different free and open-source implementations of the cryptographic schemes defined by the Keccak team.\n- [xxHash](https://github.com/Cyan4973/xxHash) - Extremely fast hash algorithm.\n\n### C++\n\n- [=nil; Crypto3](https://github.com/NilFoundation/crypto3) - Modern Cryptography Suite in C++17 (complete applied cryptography suite starting with block ciphers and ending with threshold cryptography, zk proof systems, etc).\n- [Botan](https://botan.randombit.net/) - Cryptography library written in `C++11`.\n- [cryptopp](https://github.com/weidai11/cryptopp) - Crypto++ Library is a free C++ class library of cryptographic schemes.\n- [HElib](https://github.com/shaih/HElib) - Software library that implements homomorphic encryption (HE).\n- [Nettle](http://www.lysator.liu.se/~nisse/nettle/) - Low-level cryptographic library.\n- [s2n](https://github.com/awslabs/s2n) - Implementation of the TLS/SSL protocols.\n\n### C-sharp\n\n- [Bouncy Castle](https://bouncycastle.org/csharp/index.html) - All-purpose cryptographic library.\n- [libsodium-net](https://github.com/adamcaudill/libsodium-net) - Secure cryptographic library, port of libsodium for .NET.\n- [Microsoft .NET Framework Cryptography Model](https://docs.microsoft.com/en-us/dotnet/standard/security/cryptography-model) - The .NET Framework implementations of many standard cryptographic algorithms.\n- [PCLCrypto](https://github.com/AArnott/PCLCrypto) - Provides cryptographic APIs over algorithms implemented by the platform, including exposing them to portable libraries.\n- [SecurityDriven.Inferno](https://github.com/sdrapkin/SecurityDriven.Inferno) - .NET crypto done right.\n- [StreamCryptor](https://github.com/bitbeans/StreamCryptor) - Stream encryption & decryption with libsodium and protobuf.\n\n### Clojure\n\n- [buddy-core](https://funcool.github.io/buddy-core/latest/) - Cryptographic Api.\n- [clj-crypto](https://github.com/macourtney/clj-crypto/) - Wrapper for Bouncy Castle.\n- [pandect](https://github.com/xsc/pandect) - Fast and easy-to-use Message Digest, Checksum and HMAC library for Clojure.\n- [secrets.clj](https://github.com/lk-geimfari/secrets.clj) - A Clojure library designed to generate cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.\n\n### Common Lisp\n\n- [crypto-shortcuts](https://github.com/Shinmera/crypto-shortcuts) - Collection of common cryptography functions.\n- [ironclad](http://method-combination.net/lisp/ironclad/) - Collection of common crypto shortcuts.\n- [trivial-ssh](https://github.com/eudoxia0/trivial-ssh) - SSH client library for Common Lisp (Built on libssh2).\n\n### Delphi\n\n- [DelphiEncryptionCompendium](https://github.com/winkelsdorf/DelphiEncryptionCompendium/releases) - Cryptographic library for Delphi.\n- [LockBox](https://sourceforge.net/projects/tplockbox/) - LockBox 3 is a Delphi library for cryptography.\n- [SynCrypto](https://github.com/synopse/mORMot/blob/master/SynCrypto.pas) - Fast cryptographic routines (hashing and cypher), implementing AES, XOR, RC4, ADLER32, MD5, SHA1, SHA256 algorithms, optimized for speed.\n- [TForge](https://bitbucket.org/sergworks/tforge) - TForge is open-source crypto library written in Delphi, compatible with FPC.\n\n### Elixir\n\n- [cipher](https://github.com/rubencaro/cipher) - Elixir crypto library to encrypt/decrypt arbitrary binaries.\n- [cloak](https://github.com/danielberkompas/cloak) - Cloak makes it easy to use encryption with Ecto.\n- [comeonin](https://github.com/elixircnx/comeonin) - Password authorization (bcrypt) library for Elixir.\n- [elixir-rsa](https://github.com/trapped/elixir-rsa) - `:public_key` cryptography wrapper for Elixir.\n- [elixir_tea](https://github.com/keichan34/elixir_tea) - TEA implementation in Elixir.\n- [ex_crypto](https://github.com/ntrepid8/ex_crypto) - Elixir wrapper for Erlang `:crypto` and `:public_key` modules. Provides sensible defaults for many crypto functions to make them easier to use.\n- [exgpg](https://github.com/rozap/exgpg) - Use gpg from Elixir.\n- [pot](https://github.com/yuce/pot) - Erlang library for generating one time passwords compatible with Google Authenticator.\n- [siphash-elixir](https://github.com/zackehh/siphash-elixir) - Elixir implementation of the SipHash hash family.\n\n### Erlang\n\n- [crypto](http://erlang.org/doc/apps/crypto/) - Functions for computation of message digests, and functions for encryption and decryption.\n- [public_key](http://erlang.org/doc/man/public_key.html) - Provides functions to handle public-key infrastructure.\n\n### Go\n\n- [crypto](https://golang.org/pkg/crypto/) - Official Website Resources.\n- [cryptoballot](https://github.com/cryptoballot/cryptoballot) - Cryptographically secure online voting.\n- [dkeyczar](https://github.com/dgryski/dkeyczar) - Port of Google's Keyczar cryptography library to Go.\n- [gocrypto](https://github.com/kisom/gocrypto) - Example source code for the Practical Crypto with Go book.\n- [goThemis](https://github.com/cossacklabs/themis/wiki/Go-Howto) - Go wrapper on Themis. High level crypto library for storing data (AES), secure messaging (ECC + ECDSA / RSA + PSS + PKCS#7) and session-oriented, forward secrecy data exchange (ECDH key agreement, ECC & AES encryption).\n- [kyber](https://github.com/dedis/kyber) - Advanced crypto library for the Go language.\n\n\n### Haskell\n\n- [Cryptography](http://hackage.haskell.org/packages/#cat:Cryptography) - Collaborative Hackage list.\n- [Cryptography & Hashing](https://wiki.haskell.org/Applications_and_libraries/Cryptography) - Official Website of Haskell.\n- [cryptol](https://github.com/GaloisInc/cryptol) - The Language of Cryptography.\n- [Cryptonite](https://hackage.haskell.org/package/cryptonite) - Haskell repository of cryptographic primitives.\n- [HsOpenSSL](https://github.com/phonohawk/HsOpenSSL) - OpenSSL binding for Haskel.\n- [scrypt](https://github.com/informatikr/scrypt) - Haskell bindings to Colin Percival's scrypt implementation.\n\n### Haxe\n\n- [haxe-crypto](http://lib.haxe.org/p/haxe-crypto/) - Haxe Cryptography Library.\n\n### JavaScript\n\n- [asmCrypto](https://github.com/vibornoff/asmcrypto.js/) - JavaScript implementation of popular cryptographic utilities with performance in mind.\n- [bcrypt-Node.js](https://github.com/shaneGirish/bcrypt-Node.js) - Native implementation of bcrypt for Node.js.\n- [cifre](https://github.com/openpeer/cifre) - Fast crypto toolkit for modern client-side JavaScript.\n- [closure-library](https://github.com/google/closure-library/tree/master/closure/goog/crypt) - Google's common JavaScript library.\n- [cryptico](https://github.com/wwwtyro/cryptico) - Easy-to-use encryption system utilizing RSA and AES for JavaScript.\n- [crypto-js](https://github.com/brix/crypto-js) - JavaScript library of crypto standards.\n- [cryptojs](https://github.com/gwjjeff/cryptojs) - Provide standard and secure cryptographic algorithms for Node.js.\n- [forge](https://github.com/digitalbazaar/forge) - Native implementation of TLS in JavaScript and tools to write crypto-based and network-heavy webapps.\n- [IronNode](https://docs.ironcorelabs.com/ironnode-sdk/overview) - Transform encryption library, a variant of proxy re-encryption, for encrypting to users or groups, and easily adding strong data controls to Node.js apps.\n- [IronWeb](https://docs.ironcorelabs.com/ironweb-sdk/overview) - Transform encryption library, a variant of proxy re-encryption, for easily managing end-to-end encryption securely in the browser.\n- [javascript-crypto-library](https://github.com/clipperz/javascript-crypto-library) - JavaScript Crypto Library provides web developers with an extensive and efficient set of cryptographic functions.\n- [js-nacl](https://github.com/tonyg/js-nacl) - Pure-JavaScript High-level API to Emscripten-compiled libsodium routines.\n- [jsencrypt](https://github.com/travist/jsencrypt) - JavaScript library to perform OpenSSL RSA Encryption, Decryption, and Key Generation.\n- [JShashes](https://github.com/h2non/jshashes) - Fast and dependency-free cryptographic hashing library for Node.js and browsers (supports MD5, SHA1, SHA256, SHA512, RIPEMD, HMAC).\n- [jsrsasign](https://github.com/kjur/jsrsasign) - The 'jsrsasign' (RSA-Sign JavaScript Library) is an opensource free cryptography library supporting RSA/RSAPSS/ECDSA/DSA signing/validation.\n- [jsThemis](https://github.com/cossacklabs/themis/wiki/Nodejs-Howto) - JavaScript wrapper on Themis. High level crypto library for storing data (AES), secure messaging (ECC + ECDSA / RSA + PSS + PKCS#7) and session-oriented, forward secrecy data exchange (ECDH key agreement, ECC & AES encryption).\n- [libsodium.js](https://github.com/jedisct1/libsodium.js) - libsodium compiled to pure JavaScript, with convenient wrappers.\n- [libVES.js](https://github.com/vesvault/libVES) - End-to-end encrypted sharing via cloud repository, secure recovery through a viral network of friends in case of key loss.\n- [milagro-crypto-js](https://github.com/apache/incubator-milagro-crypto-js) - MCJS is a standards compliant JavaScript cryptographic library with no external dependencies except for the random seed source. Compatible for Node.js and browser. It supports RSA, ECDH, ECIES, ECDSA, AES-GCM, SHA2, SHA3, Pairing-Based Cryptography and New Hope.\n- noble - high-security, easily auditable set of contained cryptographic libraries and tools. Zero dependencies each.\n  - [noble-bls12-381](https://github.com/paulmillr/noble-bls12-381) \u2014 BLS12-381 pairing-friendly curve (threshold sigs).\n  - [noble-ed25519](https://github.com/paulmillr/noble-ed25519) \u2014 ed25519 curve + ristretto255 (encryption, sigs).\n  - [noble-ripemd160](https://github.com/paulmillr/noble-ripemd160) \u2014 RIPEMD160 hash.\n  - [noble-secp256k1](https://github.com/paulmillr/noble-secp256k1) \u2014 secp256k1 Koblitz curve (encryption, ECDH, sigs).\n- [node.bcrypt.js](https://github.com/ncb000gt/node.bcrypt.js) - bcrypt for Node.js.\n- [OpenPGP.js](https://github.com/openpgpjs/openpgpjs) - OpenPGP implementation for JavaScript.\n- [PolyCrypt](https://github.com/polycrypt/polycrypt) - Pure JS implementation of the WebCrypto API.\n- [rusha](https://github.com/srijs/rusha) - High-performance pure-javascript SHA1 implementation suitable for large binary data, reaching up to half the native speed.\n- [sjcl](https://github.com/bitwiseshiftleft/sjcl) - Stanford JavaScript Crypto Library.\n- [TweetNaCl.js](https://github.com/dchest/tweetnacl-js) - A port of TweetNaCl / NaCl for JavaScript for modern browsers and Node.js.\n- [URSA](https://github.com/quartzjer/ursa) - RSA public/private key OpenSSL bindings for Node.\n\n\n### Java\n\n- [Apache Shiro](http://shiro.apache.org/) - Performs authentication, authorization, cryptography and session management.\n- [Bouncy Castle](https://www.bouncycastle.org/java.html) - All-purpose cryptographic library. JCA provider, wide range of functions from basic helpers to PGP/SMIME operations.\n- [Flexiprovider](http://www.flexiprovider.de/) - Powerful toolkit for the Java Cryptography Architecture.\n- [GDH](https://github.com/maxamel/GDH) - Generalized Diffie-Hellman key exchange Java library for multiple parties built on top of the Vert.x framework.\n- [Google Keyczar](https://github.com/google/keyczar) - Easy to use, yet safe encryption framework with key versioning.\n- [Google Tink](https://github.com/google/tink) - A small crypto library that provides a safe, simple, agile and fast way to accomplish some common crypto tasks.\n- [Java Themis](https://github.com/cossacklabs/themis/wiki/Java-and-Android-Howto) - Java/Android wrapper on Themis. High level crypto library for storing data (AES), secure messaging (ECC + ECDSA / RSA + PSS + PKCS#7) and session-oriented, forward secrecy data exchange (ECDH key agreement, ECC & AES encryption).\n- [jbcrypt](http://www.mindrot.org/projects/jBCrypt/) - jBCrypt is an implementation the OpenBSD Blowfish password hashing\nalgorithm.\n- [Keycloak](https://github.com/keycloak/keycloak) - Open Source Identity and Access Management For Modern Applications and Services.\n- [keywhiz](https://github.com/square/keywhiz) - A system for distributing and managing secrets.\n- [pac4j](https://github.com/pac4j/pac4j) - Security engine.\n- [Password4j](https://github.com/Password4j/password4j) - A Java user-friendly cryptographic library for hashing and checking passwords with different Key derivation functions (KDFs) and Cryptographic hash functions (CHFs).\n- [Project Kalium](http://abstractj.github.io/kalium/) - Java binding to the Networking and Cryptography (NaCl) library with the awesomeness of libsodium.\n- [scrypt](https://github.com/wg/scrypt) - Pure Java implementation of the scrypt key derivation function and a JNI interface to the C implementations, including the SSE2 optimized version.\n- [securitybuilder](https://github.com/tersesystems/securitybuilder) - Fluent Builder API for JCA/JSSE objects.\n\n\n\n### Julia\n\n- [Crypto.jl](https://github.com/danielsuo/Crypto.jl) - Library that wraps OpenSSL, but also has pure Julia implementations for reference.\n- [MbedTLS.jl](https://github.com/JuliaWeb/MbedTLS.jl) - Wrapper around the mbed TLS and cryptography C libary.\n- [Nettle.jl](https://github.com/staticfloat/Nettle.jl) - Julia wrapper around nettle cryptographic hashing/\nencryption library providing MD5, SHA1, SHA2 hashing and HMAC functionality, as well as AES encryption/decryption.\n- [SHA.jl](https://github.com/staticfloat/SHA.jl) - Performant, 100% native-julia SHA1, SHA2-{224,256,384,512} implementation.\n\n### Lua\n\n- [lua-lockbox](https://github.com/somesocks/lua-lockbox) - Collection of cryptographic primitives written in pure Lua.\n- [LuaCrypto](https://github.com/mkottman/luacrypto) - Lua bindings to OpenSSL.\n\n### OCaml\n\n- [Digestif](https://github.com/mirage/digestif) - is a toolbox that implements various cryptographic primitives in C and OCaml.\n- [ocaml-tls](https://github.com/mirleft/ocaml-tls) - TLS in pure OCaml.\n\n### Objective-C\n\n- [CocoaSecurity](https://github.com/kelp404/CocoaSecurity) - AES, MD5, SHA1, SHA224, SHA256, SHA384, SHA512, Base64, Hex.\n- [ObjC Themis](https://github.com/cossacklabs/themis/wiki/Objective-C-Howto) - ObjC wrapper on Themis for iOS and macOS. High level crypto library for storing data (AES), secure messaging (ECC + ECDSA / RSA + PSS + PKCS#7) and session-oriented, forward secrecy data exchange (ECDH key agreement, ECC & AES encryption).\n- [ObjectivePGP](https://github.com/krzyzanowskim/ObjectivePGP) - ObjectivePGP is an implementation of OpenPGP protocol for iOS and macOS. OpenPGP is the most widely used email encryption standard.\n- [RNCryptor](https://github.com/RNCryptor/RNCryptor) - CCCryptor (AES encryption) wrappers for iOS and Mac.\n\n\n### PHP\n\n- [halite](https://paragonie.com/project/halite) - Simple library for encryption using `libsodium`.\n- [libsodium-laravel](https://github.com/scrothers/libsodium-laravel) - Laravel Package Abstraction using `libsodium`.\n- [PHP Encryption](https://github.com/defuse/php-encryption) - Library for encrypting data with a key or password in PHP.\n- [PHP Themis](https://github.com/cossacklabs/themis/wiki/PHP-Howto) - PHP wrapper on Themis. High level crypto library for storing data (AES), secure messaging (ECC + ECDSA / RSA + PSS + PKCS#7) and session-oriented, forward secrecy data exchange (ECDH key agreement, ECC & AES encryption).\n- [TCrypto](https://github.com/timoh6/TCrypto) - TCrypto is a simple and flexible PHP 5.3+ in-memory key-value storage library.\n\n### Python\n\n- [bcrypt](https://github.com/pyca/bcrypt) - Modern password hashing for your software and your servers.\n- [charm](https://github.com/JHUISI/charm) - Framework for rapidly prototyping cryptosystems.\n- [Crypto-Vinaigrette](https://github.com/aditisrinivas97/Crypto-Vinaigrette) - Quantum resistant asymmetric key generation tool for digital signatures.\n- [cryptography](https://cryptography.io/en/latest/) - Python library which exposes cryptographic recipes and primitives.\n- [cryptopy](https://sourceforge.net/projects/cryptopy/) - Pure python implmentation of cryptographic algorithms and applications.\n- [django-cryptography](https://github.com/georgemarshall/django-cryptography) - Easily encrypt data in Django.\n- [ecdsa](https://github.com/tlsfuzzer/python-ecdsa) - An easy-to-use implementation of ECC with support for ECDSA and ECDH.\n- [hashids](https://github.com/davidaurelio/hashids-python) - Implementation of [hashids](http://hashids.org) in Python.\n- [paramiko](http://www.paramiko.org/) - Python implementation of the SSHv2 protocol, providing both client and server functionality.\n- [Privy](https://github.com/ofek/privy) - An easy, fast lib to correctly password-protect your data.\n- [pycryptodome](https://github.com/Legrandin/pycryptodome) - Self-contained Python package of low-level cryptographic primitives.\n- [PyElliptic](https://github.com/yann2192/pyelliptic) - Python OpenSSL wrapper. For modern cryptography with ECC, AES, HMAC, Blowfish.\n- [pynacl](https://github.com/pyca/pynacl) - Python binding to the Networking and Cryptography (NaCl) library.\n- [pythemis](https://github.com/cossacklabs/themis/wiki/Python-Howto) - Python wrapper on Themis. High level crypto library for storing data (AES), secure messaging (ECC + ECDSA / RSA + PSS + PKCS#7) and session-oriented, forward secrecy data exchange (ECDH key agreement, ECC & AES encryption).\n\n### R\n\n- [rscrypt](https://github.com/rstudio/rscrypt) - Package for a collection of scrypt cryptographic functions.\n\n### Ruby\n\n- [bcrypt-ruby](https://github.com/codahale/bcrypt-ruby) - Ruby binding for the OpenBSD bcrypt() password hashing algorithm, allowing you to easily store a secure hash of your users' passwords.\n- [RbNaCl](https://github.com/cryptosphere/rbnacl) - Ruby binding to the Networking and Cryptography (NaCl) library.\n- [Ruby Themis](https://github.com/cossacklabs/themis/wiki/Ruby-Howto) - Ruby wrapper on Themis. High level crypto library for storing data (AES), secure messaging (ECC + ECDSA / RSA + PSS + PKCS#7) and session-oriented, forward secrecy data exchange (ECDH key agreement, ECC & AES encryption).\n\n### Rust\n\n- [BLAKE3](https://github.com/BLAKE3-team/BLAKE3) - is official Rust and C implementations of the BLAKE3 cryptographic hash function.\n- [dalek cryptography](https://github.com/dalek-cryptography/) - Fast yet safe mid-level API for ECC, Bulletproofs, and more.\n- [mundane](https://github.com/google/mundane) - is a Rust cryptography library backed by BoringSSL that is difficult to misuse, ergonomic, and performant.\n- [ockam](https://github.com/ockam-network/ockam) - is a Rust library for end-to-end encryption and mutual authentication.\n- [octavo](https://github.com/libOctavo/octavo) - Highly modular & configurable hash & crypto library.\n- [orion](https://github.com/orion-rs/orion) - is a cryptography library written in pure Rust. It aims to provide easy and usable crypto while trying to minimize the use of unsafe code.\n- [proteus](https://github.com/wireapp/proteus) - Axolotl protocol implementation, without header keys, in Rust.\n- [rage](https://github.com/str4d/rage) - is a simple, modern, and secure file encryption tool, using the age format. \n- [recrypt](https://github.com/IronCoreLabs/recrypt-rs) - A pure-Rust library that implements cryptographic primitives for building a multi-hop Proxy Re-encryption scheme, known as Transform Encryption.\n- [ring](https://github.com/briansmith/ring) - Safe, fast, small crypto using Rust & BoringSSL's cryptography primitives.\n- [rust-crypto](https://github.com/DaGenix/rust-crypto) - Mostly pure-Rust implementation of various cryptographic algorithms.\n- [rust-openssl](https://github.com/sfackler/rust-openssl) - OpenSSL bindings for Rust.\n- [rustls](https://github.com/ctz/rustls) - Rustls is a new, modern TLS library written in Rust.\n- [sodiumoxide](https://github.com/dnaq/sodiumoxide) - Sodium Oxide: Fast cryptographic library for Rust (bindings to libsodium).\n- [suruga](https://github.com/klutzy/suruga) - TLS 1.2 implementation in Rust.\n- [webpki](https://github.com/briansmith/webpki) - Web PKI TLS X.509 certificate validation in Rust.\n\n### Scala\n\n- [recrypt](https://github.com/IronCoreLabs/recrypt) - Transform encryption library for Scala.\n- [scrypto](https://github.com/input-output-hk/scrypto) - Cryptographic primitives for Scala.\n- [tsec](https://github.com/jmcardon/tsec) - A type-safe, functional, general purpose security and cryptography library.\n\n### Swift\n\n- [CryptoSwift](https://github.com/krzyzanowskim/CryptoSwift) - Crypto related functions and helpers for Swift implemented in Swift programming language.\n- [IDZSwiftCommonCrypto](https://github.com/iosdevzone/IDZSwiftCommonCrypto) - Wrapper for Apple's [CommonCrypto](https://opensource.apple.com/source/CommonCrypto/) library written in Swift.\n- [OpenSSL](https://github.com/Zewo/OpenSSL) - Swift OpenSSL for macOS and Linux.\n- [SweetHMAC](https://github.com/jancassio/SweetHMAC) - Tiny and easy to use Swift class to encrypt strings using HMAC algorithms.\n- [Swift-Sodium](https://github.com/jedisct1/swift-sodium) - Swift interface to the Sodium library for common crypto operations for iOS and macOS.\n- [SwiftSSL](https://github.com/SwiftP2P/SwiftSSL) - Elegant crypto toolkit in Swift.\n- [SwiftThemis](https://github.com/cossacklabs/themis/wiki/Swift-Howto) - Swift wrapper on Themis for iOS and macOS. High level crypto library for storing data (AES), secure messaging (ECC + ECDSA / RSA + PSS + PKCS#7) and session-oriented, forward secrecy data exchange (ECDH key agreement, ECC & AES encryption).\n\n## Resources\n\n### Blogs\n\n- [A Few Thoughts on Cryptographic Engineering](http://blog.cryptographyengineering.com/) - Some random thoughts about crypto.\n- [Bristol Cryptography Blog](http://bristolcrypto.blogspot.co.uk/) - Official blog for the University of Bristol cryptography research group. It's a group blog, primarily targeted towards cryptographers and crypto students.\n- [Charles Engelke's Blog](https://blog.engelke.com/tag/webcrypto/) - WebCrypto Blog Posts.\n- [Root Labs rdist](https://rdist.root.org/) - Nate Lawson and his co-authors write on a variety of topics including hardware implementation, cryptographic timing attacks, DRM, and the Commodore 64.\n- [Salty Hash](https://blog.ironcorelabs.com) - Covers topics on encryption, data control, privacy, and security.\n- [Schneier on security](https://www.schneier.com/) - One of the oldest and most famous security blogs. Bruce covers topics from block cipher cryptanalysis to airport security.\n\n### Mailing lists\n\n- [metzdowd.com](http://www.metzdowd.com/mailman/listinfo/cryptography) - \"Cryptography\" is a low-noise moderated mailing list devoted to cryptographic technology and its political impact.\n- [Modern Crypto](https://moderncrypto.org/) - Forums for discussing modern cryptographic practice.\n- [randombit.net](https://lists.randombit.net/mailman/listinfo/cryptography) - List for general discussion of cryptography, particularly the technical aspects.\n\n### Web-tools\n\n- [Boxentriq](https://www.boxentriq.com/code-breaking) - Easy to use tools for analysis and code-breaking of the most frequent ciphers, including Vigen\u00e8re, Beaufort, Keyed Caesar, Transposition Ciphers, etc.\n- [Cryptolab](http://manansingh.github.io/Cryptolab-Offline/cryptolab.html) - is a set of cryptography related tools.\n- [CrypTool](http://www.cryptool-online.org/) - Great variety of ciphers, encryption methods and analysis tools are introduced, often together with illustrated examples.\n- [CyberChef](https://gchq.github.io/CyberChef/) - a web app for encryption, encoding, compression, and data analysis.\n- [factordb.com](http://factordb.com/) - Factordb.com is tool used to store known factorizations of any number.\n- [keybase.io](https://keybase.io/) - Keybase maps your identity to your public keys, and vice versa.\n\n### Web-sites\n\n- [Applied Crypto Hardening](https://bettercrypto.org/) - A lot ready to use best practice examples for securing web servers and more.\n- [Cryptocurrencies Dashboard](https://dashboard.nbshare.io/apps/reddit/top-crypto-subreddits/) - A dashboard of most active cryptocurrencies discussed on Reddit.\n- [Cryptography Stackexchange](http://crypto.stackexchange.com/) - Cryptography Stack Exchange is a question and answer site for software developers, mathematicians and others interested in cryptography.\n- [Cryptohack](https://cryptohack.org/) - A platform with lots of interactive cryptography challenges, similar to Cryptopals.\n- [Cryptopals Crypto Challenges](http://cryptopals.com/) - A series of applied cryptography challenges, starting from very basic challenges, such as hex to base 64 challanges, and gradually increasing the difficulty up to abstract algebra.\n- [Garykessler Crypto](http://www.garykessler.net/library/crypto.html) - An Overview of Cryptography.\n- [IACR](https://www.iacr.org/) - The International Association for Cryptologic Research is a non-profit scientific organization whose purpose is to further research in cryptology and related fields.\n- [Learn Cryptography](https://learncryptography.com/) - Dedicated to helping people understand how and why the cryptographic systems they use everyday without realizing work to secure and protect their privacy.\n- [Subreddit of Cryptography](https://www.reddit.com/r/cryptography/) - This subreddit is intended for links and discussions surrounding the theory and practice of strong cryptography.\n- [TikZ for Cryptographers](https://www.iacr.org/authors/tikz/) - A collection of block diagrams of common cryptographic functions drawn in TikZ to be used in research papers and presentations written in LaTeX.\n- [WebCryptoAPI](https://www.w3.org/TR/WebCryptoAPI/) - This specification describes a JavaScript API for performing basic cryptographic operations in web applications, such as hashing, signature generation and verification, and encryption and decryption.\n\n## Contributing\n\nYour contributions are always welcome! Please take a look at the [contribution guidelines](https://github.com/sobolevn/awesome-cryptography/blob/master/CONTRIBUTING.md) first.\n\n## License\n\n`awesome-cryptography` by [@sobolevn](https://github.com/sobolevn)\n\nTo the extent possible under law, the person who associated CC0 with\n`awesome-cryptography` has waived all copyright and related or neighboring\nrights to `awesome-cryptography`.\n\nYou should have received a copy of the CC0 legalcode along with this\nwork.  If not, see [https://creativecommons.org/publicdomain/zero/1.0/](https://creativecommons.org/publicdomain/zero/1.0/).\n"
 },
 {
  "repo": "randombit/botan",
  "language": "C++",
  "readme_contents": "Botan: Crypto and TLS for Modern C++\n========================================\n\nBotan (Japanese for peony flower) is a C++ cryptography library released under the\npermissive `Simplified BSD <https://botan.randombit.net/license.txt>`_ license.\n\nBotan's goal is to be the best option for cryptography in C++ by offering the\ntools necessary to implement a range of practical systems, such as TLS protocol,\nX.509 certificates, modern AEAD ciphers, PKCS#11 and TPM hardware support,\npassword hashing, and post quantum crypto schemes. A Python binding is included,\nand several other `language bindings\n<https://github.com/randombit/botan/wiki/Language-Bindings>`_ are available.\nIt is used in many `open source and commercial products <https://github.com/randombit/botan/wiki/Users>`_.\nThe library is accompanied by a featureful\n`command line interface <https://botan.randombit.net/handbook/cli.html>`_.\n\nSee the `documentation <https://botan.randombit.net/handbook>`_ for more\ninformation about included features.\n\nDevelopment is coordinated on `GitHub <https://github.com/randombit/botan>`_\nand contributions are welcome. If you need help, please open an issue on\n`GitHub <https://github.com/randombit/botan/issues>`_ or email the\n`botan-devel mailing list <https://lists.randombit.net/mailman/listinfo/botan-devel/>`_.\nNew releases are announced on the `botan-announce mailing list\n<https://lists.randombit.net/mailman/listinfo/botan-announce/>`_.\nIf you think you have found a security issue, see the `security page\n<https://botan.randombit.net/security.html>`_ for contact information.\n\nThe latest release is\n`2.19.2 <https://botan.randombit.net/releases/Botan-2.19.2.tar.xz>`_\n`(sig) <https://botan.randombit.net/releases/Botan-2.19.2.tar.xz.asc>`_,\nreleased on 2022-06-03.\nAll releases are signed with a `PGP key <https://botan.randombit.net/pgpkey.txt>`_.\nSee the `release notes <https://botan.randombit.net/news.html>`_ for\nwhat is new. Botan is also available through most\n`distributions <https://github.com/randombit/botan/wiki/Distros>`_\nsuch as Fedora, Debian, Arch and Homebrew.\n\n.. image:: https://api.travis-ci.com/randombit/botan.svg?branch=master\n    :target: https://travis-ci.com/github/randombit/botan\n    :alt: Travis CI status\n\n.. image:: https://ci.appveyor.com/api/projects/status/n9f94dljd03j2lce/branch/master?svg=true\n    :target: https://ci.appveyor.com/project/randombit/botan/branch/master\n    :alt: AppVeyor CI status\n\n.. image:: https://codecov.io/github/randombit/botan/coverage.svg?branch=master\n    :target: https://codecov.io/github/randombit/botan\n    :alt: Code coverage report\n\n.. image:: https://img.shields.io/lgtm/alerts/g/randombit/botan.svg\n    :target: https://lgtm.com/projects/g/randombit/botan/alerts/\n    :alt: LGTM alerts\n\n.. image:: https://oss-fuzz-build-logs.storage.googleapis.com/badges/botan.svg\n    :target: https://oss-fuzz.com/coverage-report/job/libfuzzer_asan_botan/latest\n    :alt: OSS-Fuzz status\n\n.. image:: https://scan.coverity.com/projects/624/badge.svg\n    :target: https://scan.coverity.com/projects/624\n    :alt: Coverity results\n\n.. image:: https://repology.org/badge/tiny-repos/botan.svg\n    :target: https://repology.org/project/botan/versions\n    :alt: Packaging status\n\n.. image:: https://bestpractices.coreinfrastructure.org/projects/531/badge\n    :target: https://bestpractices.coreinfrastructure.org/projects/531\n    :alt: CII Best Practices statement\n\nFind Enclosed\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTransport Layer Security (TLS) Protocol\n----------------------------------------\n\n* TLS v1.2 and DTLS v1.2\n* Supported extensions include session tickets, SNI, ALPN, OCSP stapling,\n  encrypt-then-mac CBC, and extended master secret.\n* Supports authentication using certificates or preshared keys (PSK)\n* Supports record encryption with ChaCha20Poly1305, AES/OCB, AES/GCM, AES/CCM,\n  Camellia/GCM as well as legacy CBC ciphersuites.\n* Key exchange using CECPQ1, ECDH, FFDHE, or RSA\n\nPublic Key Infrastructure\n----------------------------------------\n\n* X.509v3 certificates and CRL creation and handling\n* PKIX certificate path validation, including name constraints.\n* OCSP request creation and response handling\n* PKCS #10 certificate request generation and processing\n* Access to Windows, macOS and Unix system certificate stores\n* SQL database backed certificate store\n\nPublic Key Cryptography\n----------------------------------------\n\n* RSA signatures and encryption\n* DH and ECDH key agreement\n* Signature schemes ECDSA, DSA, Ed25519, ECGDSA, ECKCDSA, SM2, GOST 34.10\n* Post-quantum signature scheme XMSS\n* Post-quantum key agreement schemes McEliece and NewHope\n* ElGamal encryption\n* Padding schemes OAEP, PSS, PKCS #1 v1.5, X9.31\n\nCiphers, hashes, MACs, and checksums\n----------------------------------------\n\n* Authenticated cipher modes EAX, OCB, GCM, SIV, CCM, (X)ChaCha20Poly1305\n* Cipher modes CTR, CBC, XTS, CFB, OFB\n* Block ciphers AES, ARIA, Blowfish, Camellia, CAST-128, DES/3DES, IDEA,\n  Lion, SEED, Serpent, SHACAL2, SM4, Threefish-512, Twofish\n* Stream ciphers (X)ChaCha20, (X)Salsa20, SHAKE-128, RC4\n* Hash functions SHA-1, SHA-2, SHA-3, MD5, RIPEMD-160, BLAKE2b,\n  Skein-512, SM3, Streebog, Whirlpool\n* Authentication codes HMAC, CMAC, Poly1305, SipHash, GMAC, X9.19 DES-MAC\n* Non-cryptographic checksums Adler32, CRC24, CRC32\n\nOther Useful Things\n----------------------------------------\n\n* Full C++ PKCS #11 API wrapper\n* Interfaces for TPM v1.2 device access\n* Simple compression API wrapping zlib, bzip2, and lzma libraries\n* RNG wrappers for system RNG and hardware RNGs\n* HMAC_DRBG and entropy collection system for userspace RNGs\n* Password hashing schemes PBKDF2, Argon2, Scrypt, bcrypt\n* SRP-6a password authenticated key exchange\n* Key derivation functions including HKDF, KDF2, SP 800-108, SP 800-56A, SP 800-56C\n* HOTP and TOTP algorithms\n* Format preserving encryption scheme FE1\n* Threshold secret sharing\n* NIST key wrapping\n* Boost.Asio compatible TLS client stream\n"
 },
 {
  "repo": "golang/crypto",
  "language": "Go",
  "readme_contents": "# Go Cryptography\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/crypto.svg)](https://pkg.go.dev/golang.org/x/crypto)\n\nThis repository holds supplementary Go cryptography libraries.\n\n## Download/Install\n\nThe easiest way to install is to run `go get -u golang.org/x/crypto/...`. You\ncan also manually git clone the repository to `$GOPATH/src/golang.org/x/crypto`.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the crypto repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/crypto:\" in the\nsubject line, so it is easy to find.\n\nNote that contributions to the cryptography package receive additional scrutiny\ndue to their sensitive nature. Patches may take longer than normal to receive\nfeedback.\n"
 },
 {
  "repo": "pycrypto/pycrypto",
  "language": "Python",
  "readme_contents": "| \u26a0\ufe0f WARNING                                                                    |\n|:-----------------------------------------------------------------------------|\n| **PyCrypto 2.x is unmaintained, obsolete, and contains security vulnerabilities.** <br> See <https://www.pycrypto.org/> for details. The following is provided for historical/reference purposes only. |\n\n<!--\nIf that site is no longer available, you can also look at `index.md` in the\n`www.pycrypto.org` branch of this repository.  The old generated docs and\nmailing list archive can also be found there.\n-->\n\nPython Cryptography Toolkit (pycrypto)\n======================================\n\nThis is a collection of both secure hash functions (such as SHA256 and\nRIPEMD160), and various encryption algorithms (AES, DES, RSA, ElGamal,\netc.).  The package is structured to make adding new modules easy.\nThis section is essentially complete, and the software interface will\nalmost certainly not change in an incompatible way in the future; all\nthat remains to be done is to fix any bugs that show up.  ~~If you\nencounter a bug, please report it in the GitHub issue tracker at\n<https://github.com/dlitz/pycrypto/issues>~~\n\nAn example usage of the SHA256 module is:\n\n```python\n>>> from Crypto.Hash import SHA256\n>>> hash = SHA256.new()\n>>> hash.update('message')\n>>> hash.digest()\n'\\xabS\\n\\x13\\xe4Y\\x14\\x98+y\\xf9\\xb7\\xe3\\xfb\\xa9\\x94\\xcf\\xd1\\xf3\\xfb\"\\xf7\\x1c\\xea\\x1a\\xfb\\xf0+F\\x0cm\\x1d'\n```\n\nAn example usage of an encryption algorithm (AES, in this case) is:\n\n```python\n>>> from Crypto.Cipher import AES\n>>> obj = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')\n>>> message = \"The answer is no\"\n>>> ciphertext = obj.encrypt(message)\n>>> ciphertext\n'\\xd6\\x83\\x8dd!VT\\x92\\xaa`A\\x05\\xe0\\x9b\\x8b\\xf1'\n>>> obj2 = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')\n>>> obj2.decrypt(ciphertext)\n'The answer is no'\n```\n\nOne possible application of the modules is writing secure\nadministration tools.  Another application is in writing daemons and\nservers.  Clients and servers can encrypt the data being exchanged and\nmutually authenticate themselves; daemons can encrypt private data for\nadded security.  Python also provides a pleasant framework for\nprototyping and experimentation with cryptographic algorithms; thanks\nto its arbitrary-length integers, public key algorithms are easily\nimplemented.\n\nAs of PyCrypto 2.1.0, PyCrypto provides an easy-to-use random number\ngenerator:\n\n```python\n>>> from Crypto import Random\n>>> rndfile = Random.new()\n>>> rndfile.read(16)\n'\\xf7.\\x838{\\x85\\xa0\\xd3>#}\\xc6\\xc2jJU'\n```\n\nA stronger version of Python's standard \"random\" module is also\nprovided:\n\n```python\n>>> from Crypto.Random import random\n>>> random.choice(['dogs', 'cats', 'bears'])\n'bears'\n```\n\nCaveat: For the random number generator to work correctly, you must\ncall Random.atfork() in both the parent and child processes after\nusing os.fork()\n\n\nInstallation\n============\n\nPyCrypto is written and tested using Python version 2.1 through 3.3.  Python\n1.5.2 is not supported.\n\nThe modules are packaged using the Distutils, so you can simply run\n`python setup.py build` to build the package, and \"python setup.py\ninstall\" to install it.\n\nLinux installation requires the Python developer tools to be installed. These\ncan be found in the `python-dev` package on Debian/Ubuntu and the\n`python2-devel` package on Red Hat/Fedora. If you are using a non-standard\nPython version for your distribution, you may require a different package.\nConsult your package manager's documentation for instructions on how to\ninstall these packages. Other distributions may have different package names.\n\nTo verify that everything is in order, run `python setup.py test`.  It\nwill test all the cryptographic modules, skipping ones that aren't\navailable.  ~~If the test script reports an error on your machine,\nplease report the bug using the bug tracker (URL given above).  If\npossible, track down the bug and include a patch that fixes it,\nprovided that you are able to meet the eligibility requirements at\n[https://www.pycrypto.org/submission-requirements/].~~\n\nIt is possible to test a single sub-package or a single module only, for instance\nwhen you investigate why certain tests fail and don't want to run the whole\nsuite each time. Use `python setup.py test --module=name`, where 'name'\nis either a sub-package (Cipher, PublicKey, etc) or a module (Cipher.DES,\nPublicKey.RSA, etc).\nTo further cut test coverage, pass also the option `--skip-slow-tests`.\n\nTo install the package under the site-packages directory of\nyour Python installation, run `python setup.py install`.\n\nIf you have any comments, corrections, or improvements for this\npackage, please report them to our mailing list, accessible via the\nPyCrypto website:\n\n<https://www.pycrypto.org/><br>\n<https://www.dlitz.net/software/pycrypto/>\n\n[https://www.pycrypto.org/submission-requirements/]: ./LEGAL/CodeSubmissionRequirements.txt\n"
 },
 {
  "repo": "weidai11/cryptopp",
  "language": "C++",
  "readme_contents": "Crypto++: free C++ Class Library of Cryptographic Schemes\r\nVersion 8.7 - TBD\r\n\r\nCrypto++ Library is a free C++ class library of cryptographic schemes.\r\nCurrently the library contains the following algorithms:\r\n\r\n                   algorithm type  name\r\n\r\n authenticated encryption schemes  GCM, CCM, EAX, ChaCha20Poly1305 and\r\n                                   XChaCha20Poly1305\r\n\r\n        high speed stream ciphers  ChaCha (8/12/20), ChaCha (IETF), Panama, Salsa20,\r\n                                   Sosemanuk, XSalsa20, XChaCha20\r\n\r\n           AES and AES candidates  AES (Rijndael), RC6, MARS, Twofish, Serpent,\r\n                                   CAST-256\r\n\r\n                                   ARIA, Blowfish, Camellia, CHAM, HIGHT, IDEA,\r\n                                   Kalyna (128/256/512), LEA, SEED, RC5, SHACAL-2,\r\n              other block ciphers  SIMON (64/128), Skipjack, SPECK (64/128),\r\n                                   Simeck, SM4, Threefish (256/512/1024),\r\n                                   Triple-DES (DES-EDE2 and DES-EDE3), TEA, XTEA\r\n\r\n  block cipher modes of operation  ECB, CBC, CBC ciphertext stealing (CTS),\r\n                                   CFB, OFB, counter mode (CTR), XTS\r\n\r\n     message authentication codes  BLAKE2s, BLAKE2b, CMAC, CBC-MAC, DMAC, GMAC, HMAC,\r\n                                   Poly1305, Poly1305 (IETF), SipHash, Two-Track-MAC,\r\n                                   VMAC\r\n\r\n                                   BLAKE2s, BLAKE2b, Keccack (F1600), LSH (256/512),\r\n                   hash functions  SHA-1, SHA-2 (224/256/384/512), SHA-3 (224/256),\r\n                                   SHA-3 (384/512), SHAKE (128/256), SipHash, SM3, Tiger,\r\n                                   RIPEMD (128/160/256/320), WHIRLPOOL\r\n\r\n                                   RSA, DSA, Deterministic DSA, ElGamal,\r\n          public-key cryptography  Nyberg-Rueppel (NR), Rabin-Williams (RW), LUC,\r\n                                   LUCELG, EC-based German Digital Signature (ECGDSA),\r\n                                   DLIES (variants of DHAES), ESIGN\r\n\r\n   padding schemes for public-key  PKCS#1 v2.0, OAEP, PSS, PSSR, IEEE P1363\r\n                          systems  EMSA2 and EMSA5\r\n\r\n                                   Diffie-Hellman (DH), Unified Diffie-Hellman (DH2),\r\n            key agreement schemes  Menezes-Qu-Vanstone (MQV), Hashed MQV (HMQV),\r\n                                   Fully Hashed MQV (FHMQV), LUCDIF, XTR-DH\r\n\r\n      elliptic curve cryptography  ECDSA, Deterministic ECDSA, ed25519, ECNR, ECIES,\r\n                                   ECDH, ECMQV, x25519\r\n\r\n          insecure or obsolescent  MD2, MD4, MD5, Panama Hash, DES, ARC4, SEAL\r\nalgorithms retained for backwards  3.0, WAKE-OFB, DESX (DES-XEX3), RC2,\r\n     compatibility and historical  SAFER, 3-WAY, GOST, SHARK, CAST-128, Square\r\n                            value\r\n\r\nOther features include:\r\n\r\n  * pseudo random number generators (PRNG): ANSI X9.17 appendix C, RandomPool,\r\n    DARN, VIA Padlock, RDRAND, RDSEED, NIST Hash and HMAC DRBGs\r\n  * password based key derivation functions: PBKDF1 and PBKDF2 from PKCS #5,\r\n    PBKDF from PKCS #12 appendix B, HKDF from RFC 5869, Scrypt from RFC 7914\r\n  * Shamir's secret sharing scheme and Rabin's information dispersal algorithm\r\n    (IDA)\r\n  * fast multi-precision integer (bignum) and polynomial operations\r\n  * finite field arithmetics, including GF(p) and GF(2^n)\r\n  * prime number generation and verification\r\n  * useful non-cryptographic algorithms\r\n      + DEFLATE (RFC 1951) compression/decompression with gzip (RFC 1952) and\r\n        zlib (RFC 1950) format support\r\n      + Hex, base-32, base-64, URL safe base-64 encoding and decoding\r\n      + 32-bit CRC, CRC-C and Adler32 checksum\r\n  * class wrappers for these platform and operating system features (optional):\r\n      + high resolution timers on Windows, Unix, and Mac OS\r\n      + /dev/random, /dev/urandom, /dev/srandom\r\n      + Microsoft's CryptGenRandom or BCryptGenRandom on Windows\r\n  * A high level interface for most of the above, using a filter/pipeline\r\n    metaphor\r\n  * benchmarks and validation testing\r\n  * x86, x64 (x86-64), x32 (ILP32), ARM-32, Aarch32, Aarch64 and Power8\r\n    in-core code for the commonly used algorithms\r\n      + run-time CPU feature detection and code selection\r\n      + supports GCC-style and MSVC-style inline assembly, and MASM for x64\r\n      + x86, x64 (x86-64), x32 provides MMX, SSE2, and SSE4 implementations\r\n      + ARM-32, Aarch32 and Aarch64 provides NEON, ASIMD and ARMv8 implementations\r\n      + Power8 provides in-core AES using NX Crypto Acceleration\r\n\r\nThe Crypto++ library was originally written by Wei Dai. The library is now\r\nmaintained by several team members and the community. You are welcome to use it\r\nfor any purpose without paying anyone, but see License.txt for the fine print.\r\n\r\nThe following compilers are supported for this release. Please visit\r\nhttp://www.cryptopp.com the most up to date build instructions and porting notes.\r\n\r\n  * Visual Studio 2003 - 2019\r\n  * GCC 3.3 - 10.1\r\n  * Apple Clang 4.3 - 12.0\r\n  * LLVM Clang 2.9 - 11.0\r\n  * C++ Builder 2015\r\n  * Intel C++ Compiler 9 - 16.0\r\n  * Sun Studio 12u1 - 12.6\r\n  * IBM XL C/C++ 10.0 - 14.0\r\n\r\n*** Important Usage Notes ***\r\n\r\n1. If a constructor for A takes a pointer to an object B (except primitive\r\ntypes such as int and char), then A owns B and will delete B at A's\r\ndestruction.  If a constructor for A takes a reference to an object B,\r\nthen the caller retains ownership of B and should not destroy it until\r\nA no longer needs it.\r\n\r\n2. Crypto++ is thread safe at the class level. This means you can use\r\nCrypto++ safely in a multithreaded application, but you must provide\r\nsynchronization when multiple threads access a common Crypto++ object.\r\n\r\n*** MSVC-Specific Information ***\r\n\r\nTo compile Crypto++ with MSVC, open \"cryptest.sln\" (for MSVC 2003 - 2015)\r\nand build one or more of the following projects:\r\n\r\ncryptest Non-DLL-Import Configuration - This builds the full static library\r\n  along with a full test driver.\r\ncryptest DLL-Import Configuration - This builds a static library containing\r\n  only algorithms not in the DLL, along with a full test driver that uses\r\n  both the DLL and the static library.\r\ncryptdll - This builds the DLL. Please note that if you wish to use Crypto++\r\n  as a FIPS validated module, you must use a pre-built DLL that has undergone\r\n  the FIPS validation process instead of building your own.\r\ndlltest - This builds a sample application that only uses the DLL.\r\n\r\nThe DLL used to provide FIPS validated cryptography. The library was moved\r\nto the CMVP's [Historical Validation List](http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-historical.htm).\r\nThe library and the DLL are no longer considered\r\nvalidated. You should no longer use the DLL.\r\n\r\nTo use the Crypto++ DLL in your application, #include \"dll.h\" before including\r\nany other Crypto++ header files, and place the DLL in the same directory as\r\nyour .exe file. dll.h includes the line #pragma comment(lib, \"cryptopp\")\r\nso you don't have to explicitly list the import library in your project\r\nsettings. To use a static library form of Crypto++, make the \"cryptlib\"\r\nproject a dependency of your application project, or specify it as\r\nan additional library to link with in your project settings.\r\nIn either case you should check the compiler options to\r\nmake sure that the library and your application are using the same C++\r\nrun-time libraries and calling conventions.\r\n\r\n*** DLL Memory Management ***\r\n\r\nBecause it's possible for the Crypto++ DLL to delete objects allocated\r\nby the calling application, they must use the same C++ memory heap. Three\r\nmethods are provided to achieve this.\r\n1.  The calling application can tell Crypto++ what heap to use. This method\r\n    is required when the calling application uses a non-standard heap.\r\n2.  Crypto++ can tell the calling application what heap to use. This method\r\n    is required when the calling application uses a statically linked C++ Run\r\n    Time Library. (Method 1 does not work in this case because the Crypto++ DLL\r\n    is initialized before the calling application's heap is initialized.)\r\n3.  Crypto++ can automatically use the heap provided by the calling application's\r\n    dynamically linked C++ Run Time Library. The calling application must\r\n    make sure that the dynamically linked C++ Run Time Library is initialized\r\n    before Crypto++ is loaded. (At this time it is not clear if it is possible\r\n    to control the order in which DLLs are initialized on Windows 9x machines,\r\n    so it might be best to avoid using this method.)\r\n\r\nWhen Crypto++ attaches to a new process, it searches all modules loaded\r\ninto the process space for exported functions \"GetNewAndDeleteForCryptoPP\"\r\nand \"SetNewAndDeleteFromCryptoPP\". If one of these functions is found,\r\nCrypto++ uses methods 1 or 2, respectively, by calling the function.\r\nOtherwise, method 3 is used.\r\n\r\n*** Linux and Unix-like Specific Information ***\r\n\r\nA makefile is included for you to compile Crypto++ with GCC and compatibles.\r\nMake sure you are using GNU Make and GNU ld. The make process will produce\r\ntwo files, libcryptopp.a and cryptest.exe. Run \"cryptest.exe v\" for the\r\nvalidation suite and \"cryptest.exe tv all\" for additional test vectors.\r\n\r\nThe makefile uses '-DNDEBUG -g2 -O2' CXXFLAGS by default. If you use an\r\nalternate build system, like Autotools or CMake, then ensure the build system\r\nincludes '-DNDEBUG' for production or release builds. The Crypto++ library uses\r\nasserts for debugging and diagnostics during development; it does not\r\nrely on them to crash a program at runtime.\r\n\r\nIf an assert triggers in production software, then unprotected sensitive\r\ninformation could be egressed from the program to the filesystem or the\r\nplatform's error reporting program, like Apport on Ubuntu or CrashReporter\r\non Apple.\r\n\r\nThe makefile orders object files to help remediate problems associated with\r\nC++ static initialization order. The library does not use custom linker scripts.\r\nIf you use an alternate build system, like Autotools or CMake, and collect source\r\nfiles into a list, then ensure these three are at the head of the list: 'cryptlib.cpp\r\ncpu.cpp integer.cpp <other sources>'. They should be linked in the same order:\r\n'cryptlib.o cpu.o integer.o <other objects>'.\r\n\r\nIf your linker supports initialization attributes, like init_priority, then you can\r\ndefine CRYPTOPP_INIT_PRIORITY to control object initialization order. Set it to a\r\nvalue like 250. User programs can use CRYPTOPP_USER_PRIORITY to avoid conflicts with\r\nlibrary values. Initialization attributes are more reliable than object file ordering,\r\nbut its not ubiquitously supported by linkers.\r\n\r\nThe makefile links to the static version of the Crypto++ library to avoid binary\r\nplanting and other LD_PRELOAD tricks. You should use the static version of the\r\nlibrary in your programs to help avoid unwanted redirections.\r\n\r\n*** Side Channel Attacks ***\r\n\r\nCrypto++ attempts to resist side channel attacks using various remediations.\r\nThe remdiations are applied as a best effort but are probably incomplete. They\r\nare incomplete due to cpu speculation bugs like Spectre, Meltdown, Foreshadow.\r\nThe attacks target both cpu caches and internal buffers. Intel generally refers\r\nto internal buffer attacks as \"Microarchitectural Data Sampling\" (MDS).\r\n\r\nThe library uses hardware instructions when possible for block ciphers, hashes\r\nand other operations. The hardware acceleration remediates some timing\r\nattacks. The library also uses cache-aware algorithms and access patterns\r\nto minimize leakage cache evictions.\r\n\r\nElliptic curves over binary fields are believed to leak information. The task is a\r\nwork in progress. We don't believe binary fields are used in production, so we feel it\r\nis a low risk at the moment.\r\n\r\nCrypto++ does not engage Specter remediations at this time. The GCC options\r\nfor Specter are -mfunction-return=thunk and -mindirect-branch=thunk, and the\r\nlibrary uses them during testing. If you want the Specter workarounds then add\r\nthe GCC options to your CXXFLAGS when building the library.\r\n\r\nTo help resist attacks you should disable hyperthreading on cpus. If you\r\nsuspect or find an information leak then please report it.\r\n\r\n*** Documentation and Support ***\r\n\r\nCrypto++ is documented through inline comments in header files, which are\r\nprocessed through Doxygen to produce an HTML reference manual. You can find\r\na link to the manual from http://www.cryptopp.com. Also at that site is\r\nthe Crypto++ FAQ, which you should browse through before attempting to\r\nuse this library, because it will likely answer many of questions that\r\nmay come up. Finally, the site provide the wiki which has many topics\r\nand code examples.\r\n\r\nIf you run into any problems, please try the Crypto++ mailing list.\r\nThe subscription information and the list archive are available on\r\nhttp://www.cryptopp.com.\r\n\r\n*** Source Code and Contributing ***\r\n\r\nThe source code and its planned changes are available at the following locations.\r\n\r\n  * The Crypto++ GitHub repository allows you to view the latest (unreleased)\r\n    Crypto++ source code via the Linux kernel's git beginning around June 2015.\r\n    Its also serves as an incubator to nurture and grow the library.\r\n  * The former Crypto++ SourceForge repository allows you to view the Crypto++\r\n    source code via Apache's subversion until about July 2015. At that time,\r\n    SourceForge had infrastructure problems and a cutover to GutHub was performed.\r\n  * The Roadmap on the wiki provides the general direction the library is heading.\r\n    It includes planned features and releases, and even some wishlist items.\r\n\r\nContributions of all types are welcomed. Contributions include the following.\r\n\r\n  * Bug finding and fixes\r\n  * Features and enhancements\r\n  * Test scripts and test cases\r\n  * Branch and release testing\r\n  * Documentation and updates\r\n\r\nIf you think you have found a bug in the library, then you should discuss it on the\r\nUsers mailing list. Discussing it will help bring the issue to the attention of folks\r\nwho can help resolve the issue. If you want to contribute a bug fix to the library,\r\nthen make a Pull Request or make a Diff available somewhere. Also see Bug Reports on\r\nthe wiki.\r\n\r\nFeatures and enhancements are welcomend additions to the library. This category tends\r\nto be time consuming because algorithms and their test cases need to be reviewed and\r\nmerged. Please be mindful of the test cases, and attempt to procure them from an\r\nindependent source.\r\n\r\nThe library cherishes test scripts and test cases. They ensure the library is fit and\r\nthey help uncover issues with the library before users experience them. If you have\r\nsome time, then write some test cases, especially the ones that are intended to break\r\nthings.\r\n\r\nBranch and release testing is your chance to ensure Master (and planned merges) meets\r\nyour expectations and perform as expected. If you have a few spare cycles, then please\r\ntest Master on your favorite platform. We need more testing on MinGW, Windows Phone,\r\nWindows Store, Solaris 10 (and below), and modern iOS and OS X (including TV and\r\nWatch builds).\r\n\r\nDocumentation and updates includes both the inline source code annotations using\r\nDoxygen, and the online information provided in the wiki. The wiki is more verbose and\r\nusually provides more contextual information than the API reference. Besides testing,\r\ndocumentation is one of the highest returns on investment.\r\n\r\n*** History ***\r\n\r\nThe items in this section comprise the most recent history. Please see History.txt\r\nfor the record back to Crypto++ 1.0.\r\n\r\n8.6.0 - September 21, 2021\r\n      - minor release, recompile of programs required\r\n      - expanded community input and support\r\n        * 74 unique contributors as of this release\r\n      - fix ElGamal encryption\r\n      - fix ChaCha20 AVX2 implementation\r\n      - add octal and decimal literal prefix parsing to Integer\r\n      - add missing overload in ed25519Signer and ed25519Verifier\r\n      - make SHA-NI independent of AVX and AVX2\r\n      - fix OldRandomPool GenerateWord32\r\n      - use CPPFLAGS during feature testing\r\n      - fix compile on CentOS 5\r\n      - fix compile on FreeBSD\r\n      - fix feature testing on ARM A-32 and Aarch64\r\n      - enable inline ASM for CRC and PMULL on Apple M1\r\n      - fix Intel oneAPI compile\r\n      - rename test files with *.cpp extension\r\n      - fix GCC compile error due to missing _mm256_set_m128i\r\n      - add LSH-256 and LSH-512 hash functions\r\n      - add ECIES_P1363 for backwards compatibility\r\n      - fix AdditiveCipherTemplate<T> ProcessData\r\n      - remove CRYPTOPP_NO_CXX11 define\r\n      - add -fno-common for Darwin builds\r\n      - update documentation\r\n\r\n8.5.0 - March 7, 2021\r\n      - minor release, no recompile of programs required\r\n      - expanded community input and support\r\n        * 70 unique contributors as of this release\r\n      - port to Apple M1 hardware\r\n\r\n8.4.0 - January 2, 2021\r\n      - minor release, recompile of programs required\r\n      - expanded community input and support\r\n        * 67 unique contributors as of this release\r\n      - fix SIGILL on POWER8 when compiling with GCC 10\r\n      - fix potential out-of-bounds write in FixedSizeAllocatorWithCleanup\r\n      - fix compile on AIX POWER7 with IBM XLC 12.01\r\n      - fix compile on Solaris with SunCC 12.6\r\n      - revert changes for constant-time elliptic curve algorithms\r\n      - fix makefile clean and distclean recipes\r\n\r\n8.3.0 - December 20, 2020\r\n      - minor release, recompile of programs required\r\n      - expanded community input and support\r\n        * 66 unique contributors as of this release\r\n      - fix use of macro CRYPTOPP_ALIGN_DATA\r\n      - fix potential out-of-bounds read in ECDSA\r\n      - fix std::bad_alloc when using ByteQueue in pipeline\r\n      - fix missing CRYPTOPP_CXX17_EXCEPTIONS with Clang\r\n      - fix potential out-of-bounds read in GCM mode\r\n      - add configure.sh when preprocessor macros fail\r\n      - fix potential out-of-bounds read in SipHash\r\n      - fix compile error on POWER9 due to vec_xl_be\r\n      - fix K233 curve on POWER8\r\n      - add Cirrus CI testing\r\n      - fix broken encryption for some 64-bit ciphers\r\n      - fix Android cpu-features.c using C++ compiler\r\n      - disable RDRAND and RDSEED for some AMD processors\r\n      - fix BLAKE2 hash calculation using Salt and Personalization\r\n      - refresh Android and iOS build scripts\r\n      - add XTS mode\r\n      - fix circular dependency between misc.h and secblock.h\r\n      - add Certificate interface\r\n      - fix recursion in AES::Encryption without AESNI\r\n      - add missing OID for ElGamal encryption\r\n      - fix missing override in KeyDerivationFunction-derived classes\r\n      - fix RDSEED assemble under MSVC\r\n      - fix elliptic curve timing leaks (CVE-2019-14318)\r\n      - add link-library variable to Makefiles\r\n      - fix SIZE_MAX definition in misc.h\r\n      - add GetWord64 and PutWord64 to BufferedTransformation\r\n      - use HKDF in AutoSeededX917RNG::Reseed\r\n      - fix Asan finding in VMAC on i686 in inline asm\r\n      - fix undeclared identifier _mm_roti_epi64 on Gentoo\r\n      - fix ECIES and GetSymmetricKeyLength\r\n      - fix possible divide by zero in PKCS5_PBKDF2_HMAC\r\n      - refine ASN.1 encoders and decoders\r\n      - disable BMI2 code paths in Integer class\r\n      - fix use of CRYPTOPP_CLANG_VERSION\r\n      - add NEON SHA1, SHA256 and SHA512 from Cryptogams\r\n      - add ARM SHA1, SHA256 and SHA512 from Cryptogams\r\n      - make config.h more autoconf friendly\r\n      - handle Clang triplet armv8l-unknown-linux-gnueabihf\r\n      - fix reference binding to misaligned address in xed25519\r\n      - clear asserts in TestDataNameValuePairs\r\n\r\n8.2.0 - April 28, 2019\r\n      - minor release, no recompile of programs required\r\n      - expanded community input and support\r\n        * 56 unique contributors as of this release\r\n      - use PowerPC unaligned loads and stores with Power8\r\n      - add SKIPJACK test vectors\r\n      - fix SHAKE-128 and SHAKE-256 compile\r\n      - removed IS_NEON from Makefile\r\n      - fix Aarch64 build on Fedora 29\r\n      - fix missing GF2NT_233_Multiply_Reduce_CLMUL in FIPS DLL\r\n      - add missing BLAKE2 constructors\r\n      - fix missing BlockSize() in BLAKE2 classes\r\n\r\n8.1.0 - February 22, 2019\r\n      - minor release, no recompile of programs required\r\n      - expanded community input and support\r\n        * 56 unique contributors as of this release\r\n      - fix OS X PowerPC builds with Clang\r\n      - add Microsoft ARM64 support\r\n      - fix iPhone Simulator build due to missing symbols\r\n      - add CRYPTOPP_BUGGY_SIMD_LOAD_AND_STORE\r\n      - add carryless multiplies for NIST b233 and k233 curves\r\n      - fix OpenMP build due to use of OpenMP 4 with down-level compilers\r\n      - add SignStream and VerifyStream for ed25519 and large files\r\n      - fix missing AlgorithmProvider in PanamaHash\r\n      - add SHAKE-128 and SHAKE-256\r\n      - fix AVX2 build due to _mm256_broadcastsi128_si256\r\n      - add IETF ChaCha, XChaCha, ChaChaPoly1305 and XChaChaPoly1305\r\n\r\n8.0.0 - December 28, 2018\r\n      - major release, recompile of programs required\r\n      - expanded community input and support\r\n         * 54 unique contributors as of this release\r\n      - add x25519 key exchange and ed25519 signature scheme\r\n      - add limited Asymmetric Key Package support from RFC 5958\r\n      - add Power9 DARN random number generator support\r\n      - add CHAM, HC-128, HC-256, Hight, LEA, Rabbit, Simeck\r\n      - fix FixedSizeAllocatorWithCleanup may be unaligned on some platforms\r\n      - cutover to GNU Make-based cpu feature tests\r\n      - rename files with dashes to underscores\r\n      - fix LegacyDecryptor and LegacyDecryptorWithMAC use wrong MAC\r\n      - fix incorrect AES/CBC decryption on Windows\r\n      - avoid Singleton<T> when possible, avoid std::call_once completely\r\n      - fix SPARC alignment problems due to GetAlignmentOf<T>() on word64\r\n      - add ARM AES asm implementation from Cryptogams\r\n      - remove CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS support\r\n\r\nJune 2015 - Changing of the guard. Wei Dai turned the library over to the\r\n        community. The first community release was Crypto++ 5.6.3. Wei is\r\n        no longer involved with the daily operations of the project. Wei\r\n        still provides guidance when we have questions.\r\n\r\nOriginally written by Wei Dai, maintained by the Crypto++ Project\r\n"
 },
 {
  "repo": "nakov/Practical-Cryptography-for-Developers-Book",
  "language": "CSS",
  "readme_contents": "# Welcome\n\n> **Warning**: this book is **not finished**! I am still working on some of the chapters. Once it is completed, I will publish it as PDF and EPUB. Be patient.\n\n[![Practical Cryptography for Developers - Free Book by Svetlin Nakov - front cover](.gitbook/assets/practical-cryptography-for-developers-book-nakov-front-cover.png)](https://cryptobook.nakov.com)\n\nA modern **practical book** about **cryptography for developers** with code examples, covering core concepts like: **hashes** (like SHA-3 and BLAKE2), **MAC codes** (like HMAC and GMAC), **key derivation functions** (like Scrypt, Argon2), **key agreement protocols** (like DHKE, ECDH), **symmetric ciphers** (like AES and ChaCha20, cipher block modes, authenticated encryption, AEAD, AES-GCM, ChaCha20-Poly1305), **asymmetric ciphers** and **public-key cryptosystems** (RSA, ECC, ECIES), **elliptic curve cryptography** (ECC, secp256k1, curve25519), **digital signatures** (ECDSA and EdDSA), **secure random numbers** (PRNG, CSRNG) and **quantum-safe cryptography**, along with crypto **libraries** and developer tools, with a lots of **code examples** in Python and other languages.\n\nAuthor: **Svetlin Nakov**, PhD - [https://nakov.com](https://nakov.com)\n\nContributors: Milen Stefanov, Marina Shideroff\n\nSponsor: **SoftUni** (Software University) - [https://softuni.org](https://softuni.org)\n\nISBN: **978-619-00-0870-5** (9786190008705)\n\nThis book is free and open-source, published under the [**MIT license**](https://opensource.org/licenses/MIT).\n\nOfficial Web site: [https://cryptobook.nakov.com](https://cryptobook.nakov.com)\n\nOfficial **GitHub** repo: [https://github.com/nakov/practical-cryptography-for-developers-book](https://github.com/nakov/practical-cryptography-for-developers-book).\n\nSofia, November 2018\n\nTags: cryptography, free, book, Nakov, Svetlin Nakov, hashes, hash function, SHA-256, SHA3, BLAKE2, RIPEMD, MAC, message authentication code, HMAC, KDF, key derivation, key derivation function, PBKDF2, Scrypt, Bcrypt, Argon2, password hashing, random generator, pseudo-random numbers, CSPRNG, secure random generator, key exchange, key agreement, Diffie-Hellman, DHKE, ECDH, symmetric ciphers, asymmetric ciphers, public key cryptosystems, symmetric cryptography, AES, Rijndael, cipher block mode, AES-CTR, AES-GCM, ChaCha20-Poly1305, authenticated encryption, encryption scheme, public key cryptography, RSA, ECC, elliptic curves, secp256k1, curve25519, EC points, EC domain parameters, ECDH key agreement, asymmetric encryption scheme, hybrid encryption, ECIES, digital signature, RSA signature, DSA, ECDSA, EdDSA, ElGammal signature, Schnorr signature, quantum-safe cryptography, digital certificates, TLS, OAuth, multi-factor authentication, crypto libraries, Python cryptography, JavaScript cryptography, C# cryptography, Java cryptography, C++ cryptography, PHP cryptography.\n"
 },
 {
  "repo": "Cyan4973/xxHash",
  "language": "C",
  "readme_contents": "\nxxHash - Extremely fast hash algorithm\n======================================\n\nxxHash is an Extremely fast Hash algorithm, running at RAM speed limits.\nIt successfully completes the [SMHasher](https://code.google.com/p/smhasher/wiki/SMHasher) test suite\nwhich evaluates collision, dispersion and randomness qualities of hash functions.\nCode is highly portable, and hashes are identical across all platforms (little / big endian).\n\n|Branch      |Status   |\n|------------|---------|\n|release     | [![Build Status](https://github.com/Cyan4973/xxHash/actions/workflows/ci.yml/badge.svg?branch=release)](https://github.com/Cyan4973/xxHash/actions?query=branch%3Arelease+) |\n|dev         | [![Build Status](https://github.com/Cyan4973/xxHash/actions/workflows/ci.yml/badge.svg?branch=dev)](https://github.com/Cyan4973/xxHash/actions?query=branch%3Adev+) |\n\n\nBenchmarks\n-------------------------\n\nThe reference system uses an Intel i7-9700K cpu, and runs Ubuntu x64 20.04.\nThe [open source benchmark program] is compiled with `clang` v10.0 using `-O3` flag.\n\n| Hash Name     | Width | Bandwidth (GB/s) | Small Data Velocity | Quality | Comment |\n| ---------     | ----- | ---------------- | ----- | --- | --- |\n| __XXH3__ (SSE2) |  64 | 31.5 GB/s        | 133.1 | 10\n| __XXH128__ (SSE2) | 128 | 29.6 GB/s      | 118.1 | 10\n| _RAM sequential read_ | N/A | 28.0 GB/s  |   N/A | N/A | _for reference_\n| City64        |    64 | 22.0 GB/s        |  76.6 | 10\n| T1ha2         |    64 | 22.0 GB/s        |  99.0 |  9 | Slightly worse [collisions]\n| City128       |   128 | 21.7 GB/s        |  57.7 | 10\n| __XXH64__     |    64 | 19.4 GB/s        |  71.0 | 10\n| SpookyHash    |    64 | 19.3 GB/s        |  53.2 | 10\n| Mum           |    64 | 18.0 GB/s        |  67.0 |  9 | Slightly worse [collisions]\n| __XXH32__     |    32 |  9.7 GB/s        |  71.9 | 10\n| City32        |    32 |  9.1 GB/s        |  66.0 | 10\n| Murmur3       |    32 |  3.9 GB/s        |  56.1 | 10\n| SipHash       |    64 |  3.0 GB/s        |  43.2 | 10\n| FNV64         |    64 |  1.2 GB/s        |  62.7 |  5 | Poor avalanche properties\n| Blake2        |   256 |  1.1 GB/s        |   5.1 | 10 | Cryptographic\n| SHA1          |   160 |  0.8 GB/s        |   5.6 | 10 | Cryptographic but broken\n| MD5           |   128 |  0.6 GB/s        |   7.8 | 10 | Cryptographic but broken\n\n[open source benchmark program]: https://github.com/Cyan4973/xxHash/tree/release/tests/bench\n[collisions]: https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison#collision-study\n\nnote 1: Small data velocity is a _rough_ evaluation of algorithm's efficiency on small data. For more detailed analysis, please refer to next paragraph.\n\nnote 2: some algorithms feature _faster than RAM_ speed. In which case, they can only reach their full speed when input data is already in CPU cache (L3 or better). Otherwise, they max out on RAM speed limit.\n\n### Small data\n\nPerformance on large data is only one part of the picture.\nHashing is also very useful in constructions like hash tables and bloom filters.\nIn these use cases, it's frequent to hash a lot of small data (starting at a few bytes).\nAlgorithm's performance can be very different for such scenarios, since parts of the algorithm,\nsuch as initialization or finalization, become fixed cost.\nThe impact of branch mis-prediction also becomes much more present.\n\nXXH3 has been designed for excellent performance on both long and small inputs,\nwhich can be observed in the following graph:\n\n![XXH3, latency, random size](https://user-images.githubusercontent.com/750081/61976089-aedeab00-af9f-11e9-9239-e5375d6c080f.png)\n\nFor a more detailed analysis, visit the wiki :\nhttps://github.com/Cyan4973/xxHash/wiki/Performance-comparison#benchmarks-concentrating-on-small-data-\n\nQuality\n-------------------------\n\nSpeed is not the only property that matters.\nProduced hash values must respect excellent dispersion and randomness properties,\nso that any sub-section of it can be used to maximally spread out a table or index,\nas well as reduce the amount of collisions to the minimal theoretical level, following the [birthday paradox].\n\n`xxHash` has been tested with Austin Appleby's excellent SMHasher test suite,\nand passes all tests, ensuring reasonable quality levels.\nIt also passes extended tests from [newer forks of SMHasher], featuring additional scenarios and conditions.\n\nFinally, xxHash provides its own [massive collision tester](https://github.com/Cyan4973/xxHash/tree/dev/tests/collisions),\nable to generate and compare billions of hashes to test the limits of 64-bit hash algorithms.\nOn this front too, xxHash features good results, in line with the [birthday paradox].\nA more detailed analysis is documented [in the wiki](https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison).\n\n[birthday paradox]: https://en.wikipedia.org/wiki/Birthday_problem\n[newer forks of SMHasher]: https://github.com/rurban/smhasher\n\n\n### Build modifiers\n\nThe following macros can be set at compilation time to modify libxxhash's behavior. They are generally disabled by default.\n\n- `XXH_INLINE_ALL`: Make all functions `inline`, with implementations being directly included within `xxhash.h`.\n                    Inlining functions is beneficial for speed on small keys.\n                    It's _extremely effective_ when key length is expressed as _a compile time constant_,\n                    with performance improvements observed in the +200% range .\n                    See [this article](https://fastcompression.blogspot.com/2018/03/xxhash-for-small-keys-impressive-power.html) for details.\n- `XXH_PRIVATE_API`: same outcome as `XXH_INLINE_ALL`. Still available for legacy support.\n                     The name underlines that `XXH_*` symbols will not be exported.\n- `XXH_NAMESPACE`: Prefixes all symbols with the value of `XXH_NAMESPACE`.\n                   This macro can only use compilable character set.\n                   Useful to evade symbol naming collisions,\n                   in case of multiple inclusions of xxHash's source code.\n                   Client applications still use the regular function names,\n                   as symbols are automatically translated through `xxhash.h`.\n- `XXH_FORCE_MEMORY_ACCESS`: The default method `0` uses a portable `memcpy()` notation.\n                             Method `1` uses a gcc-specific `packed` attribute, which can provide better performance for some targets.\n                             Method `2` forces unaligned reads, which is not standards compliant, but might sometimes be the only way to extract better read performance.\n                             Method `3` uses a byteshift operation, which is best for old compilers which don't inline `memcpy()` or big-endian systems without a byteswap instruction\n- `XXH_FORCE_ALIGN_CHECK`: Use a faster direct read path when input is aligned.\n                           This option can result in dramatic performance improvement when input to hash is aligned on 32 or 64-bit boundaries,\n                           when running on architectures unable to load memory from unaligned addresses, or suffering a performance penalty from it.\n                           It is (slightly) detrimental on platform with good unaligned memory access performance (same instruction for both aligned and unaligned accesses).\n                           This option is automatically disabled on `x86`, `x64` and `aarch64`, and enabled on all other platforms.\n- `XXH_VECTOR` : manually select a vector instruction set (default: auto-selected at compilation time). Available instruction sets are `XXH_SCALAR`, `XXH_SSE2`, `XXH_AVX2`, `XXH_AVX512`, `XXH_NEON` and `XXH_VSX`. Compiler may require additional flags to ensure proper support (for example, `gcc` on linux will require `-mavx2` for AVX2, and `-mavx512f` for AVX512).\n- `XXH_NO_PREFETCH` : disable prefetching. Some platforms or situations may perform better without prefetching. XXH3 only.\n- `XXH_PREFETCH_DIST` : select prefetching distance. For close-to-metal adaptation to specific hardware platforms. XXH3 only.\n- `XXH_NO_STREAM`: Disables the streaming API, limiting it to single shot variants only.\n- `XXH_SIZE_OPT`: `0`: default, optimize for speed\n                  `1`: default for `-Os` and `-Oz`: disables some speed hacks for size optimization\n                  `2`: makes code as small as possible, performance may cry\n- `XXH_NO_INLINE_HINTS`: By default, xxHash uses `__attribute__((always_inline))` and `__forceinline` to improve performance at the cost of code size.\n                         Defining this macro to 1 will mark all internal functions as `static`, allowing the compiler to decide whether to inline a function or not.\n                         This is very useful when optimizing for smallest binary size,\n                         and is automatically defined when compiling with `-O0`, `-Os`, `-Oz`, or `-fno-inline` on GCC and Clang.\n                         This may also increase performance depending on compiler and architecture.\n- `XXH32_ENDJMP`: Switch multi-branch finalization stage of XXH32 by a single jump.\n                  This is generally undesirable for performance, especially when hashing inputs of random sizes.\n                  But depending on exact architecture and compiler, a jump might provide slightly better performance on small inputs. Disabled by default.\n- `XXH_NO_STDLIB`: Disable invocation of `<stdlib.h>` functions, notably `malloc()` and `free()`.\n                   `libxxhash`'s `XXH*_createState()` will always fail and return `NULL`.\n                   But one-shot hashing (like `XXH32()`) or streaming using statically allocated states\n                   still work as expected.\n                   This build flag is useful for embedded environments without dynamic allocation.\n- `XXH_STATIC_LINKING_ONLY`: gives access to internal state declaration, required for static allocation.\n                             Incompatible with dynamic linking, due to risks of ABI changes.\n- `XXH_NO_XXH3` : removes symbols related to `XXH3` (both 64 & 128 bits) from generated binary.\n                  Useful to reduce binary size, notably for applications which do not use `XXH3`.\n- `XXH_NO_LONG_LONG`: removes compilation of algorithms relying on 64-bit types (XXH3 and XXH64). Only XXH32 will be compiled.\n                      Useful for targets (architectures and compilers) without 64-bit support.\n- `XXH_IMPORT`: MSVC specific: should only be defined for dynamic linking, as it prevents linkage errors.\n- `XXH_CPU_LITTLE_ENDIAN`: By default, endianness is determined by a runtime test resolved at compile time.\n                           If, for some reason, the compiler cannot simplify the runtime test, it can cost performance.\n                           It's possible to skip auto-detection and simply state that the architecture is little-endian by setting this macro to 1.\n                           Setting it to 0 states big-endian.\n- `XXH_DEBUGLEVEL` : When set to any value >= 1, enables `assert()` statements.\n                     This (slightly) slows down execution, but may help finding bugs during debugging sessions.\n\nWhen compiling the Command Line Interface `xxhsum` with `make`, the following environment variables can also be set :\n- `DISPATCH=1` : use `xxh_x86dispatch.c`, to automatically select between `scalar`, `sse2`, `avx2` or `avx512` instruction set at runtime, depending on local host. This option is only valid for `x86`/`x64` systems.\n\n### Building xxHash - Using vcpkg\n\nYou can download and install xxHash using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install xxhash\n\nThe xxHash port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n### Building and Using xxHash - tipi.build\n\nYou can work on xxHash and depend on it in your [tipi.build](https://tipi.build) projects by adding the following entry to your `.tipi/deps`:\n\n```json\n{\n    \"Cyan4973/xxHash\": { \"@\": \"v0.8.1\" }\n}\n```\n\nAn example of such usage can be found in the `/cli` folder of this project which, if built as root project will depend on the release `v0.8.1` of xxHash\n\n\nTo contribute to xxHash itself use tipi.build on this repository (change the target name appropriately to `linux` or `macos` or `windows`):\n\n```bash\ntipi . -t <target> --test all\n```\n\n### Example\n\nThe simplest example calls xxhash 64-bit variant as a one-shot function\ngenerating a hash value from a single buffer, and invoked from a C/C++ program:\n\n```C\n#include \"xxhash.h\"\n\n    (...)\n    XXH64_hash_t hash = XXH64(buffer, size, seed);\n}\n```\n\nStreaming variant is more involved, but makes it possible to provide data incrementally:\n\n```C\n#include \"stdlib.h\"   /* abort() */\n#include \"xxhash.h\"\n\n\nXXH64_hash_t calcul_hash_streaming(FileHandler fh)\n{\n    /* create a hash state */\n    XXH64_state_t* const state = XXH64_createState();\n    if (state==NULL) abort();\n\n    size_t const bufferSize = SOME_SIZE;\n    void* const buffer = malloc(bufferSize);\n    if (buffer==NULL) abort();\n\n    /* Initialize state with selected seed */\n    XXH64_hash_t const seed = 0;   /* or any other value */\n    if (XXH64_reset(state, seed) == XXH_ERROR) abort();\n\n    /* Feed the state with input data, any size, any number of times */\n    (...)\n    while ( /* some data left */ ) {\n        size_t const length = get_more_data(buffer, bufferSize, fh);\n        if (XXH64_update(state, buffer, length) == XXH_ERROR) abort();\n        (...)\n    }\n    (...)\n\n    /* Produce the final hash value */\n    XXH64_hash_t const hash = XXH64_digest(state);\n\n    /* State could be re-used; but in this example, it is simply freed  */\n    free(buffer);\n    XXH64_freeState(state);\n\n    return hash;\n}\n```\n\n\n### License\n\nThe library files `xxhash.c` and `xxhash.h` are BSD licensed.\nThe utility `xxhsum` is GPL licensed.\n\n\n### Other programming languages\n\nBeyond the C reference version,\nxxHash is also available from many different programming languages,\nthanks to great contributors.\nThey are [listed here](http://www.xxhash.com/#other-languages).\n\n\n### Packaging status\n\nMany distributions bundle a package manager\nwhich allows easy xxhash installation as both a `libxxhash` library\nand `xxhsum` command line interface.\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/xxhash.svg)](https://repology.org/project/xxhash/versions)\n\n\n### Special Thanks\n\n- Takayuki Matsuoka, aka @t-mat, for creating `xxhsum -c` and great support during early xxh releases\n- Mathias Westerdahl, aka @JCash, for introducing the first version of `XXH64`\n- Devin Hussey, aka @easyaspi314, for incredible low-level optimizations on `XXH3` and `XXH128`\n"
 },
 {
  "repo": "input-output-hk/cardano-sl",
  "language": "Haskell",
  "readme_contents": "# Cardano SL\n\n[![Build status](https://badge.buildkite.com/9c3141d21214ff3ea95d0a38a0e1dab59b206159d2841dee44.svg?branch=master)](https://buildkite.com/input-output-hk/cardano-sl)\n[![Windows build status](https://ci.appveyor.com/api/projects/status/github/input-output-hk/cardano-sl?branch=master&svg=true)](https://ci.appveyor.com/project/input-output/cardano-sl)\n[![Release](https://img.shields.io/github/release/input-output-hk/cardano-sl.svg)](https://github.com/input-output-hk/cardano-sl/releases)\n\n## What is Cardano SL?\n\n**This codebase is now deprecated in favour of the new Shelley-capable Cardano implementation.**\n\nThe new Cardano implementation consists of more granular components:\n\nLooking for a node?\n  - [cardano-node](https://github.com/input-output-hk/cardano-node)\n\nLooking for an explorer?\n  - [cardano-db-sync](https://github.com/input-output-hk/cardano-db-sync)\n  - [cardano-graphql](https://github.com/input-output-hk/cardano-graphql)\n  - [cardano-rest](https://github.com/input-output-hk/cardano-rest)\n\nLooking for a wallet?\n  - [cardano-wallet](https://github.com/input-output-hk/cardano-wallet)\n  \nDon't know where to start?\n  - [Adrestia user-guide](https://input-output-hk.github.io/adrestia/)\n"
 },
 {
  "repo": "Legrandin/pycryptodome",
  "language": "C",
  "readme_contents": ".. image:: https://github.com/Legrandin/pycryptodome/workflows/Integration%20test/badge.svg?branch=master\n   :target: https://github.com/Legrandin/pycryptodome/actions\n\nPyCryptodome\n============\n\nPyCryptodome is a self-contained Python package of low-level\ncryptographic primitives.\n\nIt supports Python 2.7, Python 3.5 and newer, and PyPy.\n\nThe installation procedure depends on the package you want the library to be in.\nPyCryptodome can be used as:\n\n#. **an almost drop-in replacement for the old PyCrypto library**.\n   You install it with::\n\n       pip install pycryptodome\n\n   In this case, all modules are installed under the ``Crypto`` package.\n\n   One must avoid having both PyCrypto and PyCryptodome installed\n   at the same time, as they will interfere with each other.\n\n   This option is therefore recommended only when you are sure that\n   the whole application is deployed in a ``virtualenv``.\n\n#. **a library independent of the old PyCrypto**.\n   You install it with::\n\n       pip install pycryptodomex\n\n   In this case, all modules are installed under the ``Cryptodome`` package.\n   PyCrypto and PyCryptodome can coexist.\n\nFor faster public key operations in Unix, you should install `GMP`_ in your system.\n\nPyCryptodome is a fork of PyCrypto. It brings the following enhancements\nwith respect to the last official version of PyCrypto (2.6.1):\n\n* Authenticated encryption modes (GCM, CCM, EAX, SIV, OCB)\n* Accelerated AES on Intel platforms via AES-NI\n* First class support for PyPy\n* Elliptic curves cryptography (NIST P-curves; Ed25519, Ed448)\n* Better and more compact API (`nonce` and `iv` attributes for ciphers,\n  automatic generation of random nonces and IVs, simplified CTR cipher mode,\n  and more)\n* SHA-3 hash algorithms (FIPS 202) and derived functions (NIST SP-800 185):\n\n  - SHAKE128 and SHA256 XOFs\n  - cSHAKE128 and cSHAKE256 XOFs\n  - KMAC128 and KMAC256\n  - TupleHash128 and TupleHash256\n\n* KangarooTwelve XOF (derived from Keccak)\n* Truncated hash algorithms SHA-512/224 and SHA-512/256 (FIPS 180-4)\n* BLAKE2b and BLAKE2s hash algorithms\n* Salsa20 and ChaCha20/XChaCha20 stream ciphers\n* Poly1305 MAC\n* ChaCha20-Poly1305 and XChaCha20-Poly1305 authenticated ciphers\n* scrypt, bcrypt and HKDF derivation functions\n* Deterministic (EC)DSA and EdDSA\n* Password-protected PKCS#8 key containers\n* Shamir's Secret Sharing scheme\n* Random numbers get sourced directly from the OS (and not from a CSPRNG in userspace)\n* Simplified install process, including better support for Windows\n* Cleaner RSA and DSA key generation (largely based on FIPS 186-4)\n* Major clean ups and simplification of the code base\n\nPyCryptodome is not a wrapper to a separate C library like *OpenSSL*.\nTo the largest possible extent, algorithms are implemented in pure Python.\nOnly the pieces that are extremely critical to performance (e.g. block ciphers)\nare implemented as C extensions.\n\nFor more information, see the `homepage`_.\n\nFor security issues, please send an email to security@pycryptodome.org.\n\nAll the code can be downloaded from `GitHub`_.\n\n.. _`homepage`: https://www.pycryptodome.org\n.. _`GMP`: https://gmplib.org\n.. _GitHub: https://github.com/Legrandin/pycryptodome\n"
 },
 {
  "repo": "guoshijiang/cryptography",
  "language": null,
  "readme_contents": "# \u4eba\u4eba\u90fd\u80fd\u770b\u61c2\u7684\u5bc6\u7801\u5b66\n\n\u672c\u4e66\u7684\u76ee\u6807\u662f\u5c06\u82e6\u6da9\u96be\u61c2\u7684\u5bc6\u7801\u5b66\u7b80\u5355\u5316\uff0c\u8ba9\u66f4\u591a\u4eba\u80fd\u591f\u8bfb\u61c2\u5bc6\u7801\u5b66\uff0c\u5bf9\u5bc6\u7801\u5b66\u4ea7\u751f\u5174\u8da3\u3002\u9605\u8bfb\u672c\u4e66\uff0c\u9700\u6709\u4e00\u5b9a\u7684\u6570\u5b66\u7406\u8bba\u57fa\u7840\u3002\u4e66\u4e2d\u7684\u5bc6\u7801\u5c06\u4ee5\u56fe\u89e3\u548c\u7b80\u5355\u6613\u61c2\u7684\u8bed\u8a00\u53d9\u8ff0\u5bc6\u7801\u5b66\u7684\u903b\u8f91\u3002\n\n### [\u7b2c\u4e00\u7ae0\uff1a\u5e8f\u8a00](https://github.com/guoshijiang/Cryptography_anyone_can_understand/blob/master/preface/README.md)\n\n### [\u7b2c\u4e8c\u7ae0\uff1a\u5bc6\u7801\u5b66\u53d1\u5c55\u7b80\u53f2](https://github.com/guoshijiang/Cryptography_anyone_can_understand/blob/master/history/README.md)\n\n### [\u7b2c\u4e09\u7ae0\uff1a\u5bf9\u79f0\u52a0\u5bc6\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6](https://github.com/guoshijiang/Cryptography_anyone_can_understand/blob/master/encryptType/README.md)\n\n### [\u7b2c\u56db\u7ae0\uff1a\u5355\u5411\u6563\u5217\u51fd\u6570 ](https://github.com/guoshijiang/Cryptography_anyone_can_understand/blob/master/Hash/README.md)\n\n### [\u7b2c\u4e94\u7ae0\uff1a\u5206\u7ec4\u52a0\u5bc6 ](https://github.com/guoshijiang/cryptography/blob/master/blockCipher/README.md)\n\n### [\u7b2c\u516d\u7ae0\uff1a\u6d88\u606f\u8ba4\u8bc1\u7801 ](https://github.com/guoshijiang/cryptography/blob/master/MAC/README.md)\n\n### [\u7b2c\u4e03\u7ae0\uff1aPKI\u516c\u94a5\u57fa\u7840\u8bbe\u65bd ](https://github.com/guoshijiang/Cryptography_anyone_can_understand/blob/master/PKI/README.md)\n\n### [\u7b2c\u516b\u7ae0\uff1a\u6570\u5b57\u7b7e\u540d ](https://github.com/guoshijiang/cryptography/blob/master/DigitalSignature/README.md)\n\n### [\u7b2c\u4e5d\u7ae0\uff1a\u79d8\u5bc6\u5171\u4eab ](https://github.com/guoshijiang/Cryptography_anyone_can_understand/blob/master/share/README.md)\n\n### [\u7b2c\u5341\u7ae0\uff1aMPC \u591a\u65b9\u8ba1\u7b97\u6982\u8ff0 ](https://github.com/guoshijiang/cryptography/blob/master/MPC/README.md)\n\n### [\u7b2c\u5341\u4e00\u7ae0\uff1a\u4e0d\u7ecf\u610f\u4f20\u8f93 ](https://github.com/guoshijiang/cryptography/blob/master/ot/README.md)\n\n### [\u7b2c\u5341\u4e8c\u7ae0\uff1a\u6df7\u6dc6\u7535\u8def ](https://github.com/guoshijiang/cryptography/blob/master/GC/README.md)\n\n### [\u7b2c\u5341\u4e09\u7ae0\uff1a \u5177\u4f53\u7684 MPC \u7b97\u6cd5\u548c\u4ee3\u7801\u5b9e\u73b0 ](https://github.com/guoshijiang/cryptography/blob/master/MPC/mpc-implementation.md)\n\n### [\u7b2c\u5341\u56db\u7ae0\uff1a\u96f6\u77e5\u8bc6\u8bc1\u660e\u7b80\u4ecb](https://github.com/guoshijiang/cryptography/blob/master/zkp/zkp_introduce.md)\n\n### [\u7b2c\u5341\u4e94\u7ae0\uff1a\u96f6\u77e5\u8bc6\u8bc1\u660e\u5e94\u7528](https://github.com/guoshijiang/cryptography/blob/master/zkp/app.md)\n\n### [\u7b2c\u5341\u516d\u7ae0\uff1aGroth16 \u7b97\u6cd5\u4ecb\u7ecd\u548c\u4ee3\u7801\u5b9e\u73b0](https://github.com/guoshijiang/cryptography/blob/master/zkp/groth16.md)\n\n### [\u7b2c\u5341\u4e03\u7ae0\uff1aSonic \u7b97\u6cd5\u4ecb\u7ecd\u548c\u4ee3\u7801\u5b9e\u73b0]()\n\n### [\u7b2c\u5341\u516b\u7ae0\uff1aFractal \u7b97\u6cd5\u4ecb\u7ecd\u548c\u4ee3\u7801\u5b9e\u73b0]()\n\n### [\u7b2c\u5341\u4e5d\u7ae0\uff1aHalo \u7b97\u6cd5\u4ecb\u7ecd\u548c\u4ee3\u7801\u5b9e\u73b0]()\n\n### [\u7b2c\u4e8c\u5341\u7ae0\uff1aSuperSonic \u7b97\u6cd5\u4ecb\u7ecd\u548c\u4ee3\u7801\u5b9e\u73b0]()\n\n### [\u7b2c\u4e8c\u5341\u4e00\u7ae0\uff1aMarlin \u7b97\u6cd5\u4ecb\u7ecd\u548c\u4ee3\u7801\u5b9e\u73b0]()\n\n### [\u7b2c\u4e8c\u5341\u4e8c\u7ae0\uff1aPlonk \u7b97\u6cd5\u4ecb\u7ecd\u548c\u4ee3\u7801\u5b9e\u73b0]()\n\n### [\u7b2c\u4e8c\u5341\u4e09\u7ae0\uff1aZk-Stark \u7b97\u6cd5\u4ecb\u7ecd\u548c\u4ee3\u7801\u5b9e\u73b0]()\n\n### [\u7b2c\u4e8c\u5341\u4e09\u7ae0\uff1a\u56fd\u5bc6 ](https://github.com/guoshijiang/Cryptography_anyone_can_understand/blob/master/china/README.md)\n\n### [\u5173\u4e8e\u672c\u4e66](https://github.com/guoshijiang/Cryptography_anyone_can_understand/blob/master/preface/README.md)\n\n\n### \u5173\u4e8e\u672c\u4e66\n\n\u76ee\u524d\u672c\u4e66\u5728\u5199\u4f5c\u9636\u6bb5\uff0c\u4e66\u7c4d\u7684\u7248\u672c\u6682\u8bbe\u4e3a V1.0.1 \u7248\uff0c\u672c\u4e66\u5c06\u4e00\u76f4\u8ddf\u968f\u5bc6\u7801\u5b66\u6280\u672f\u7684\u53d1\u5c55\uff0c\u968f\u65f6\u4f1a\u66f4\u65b0, \u672c\u4e66\u7684\u5185\u5bb9\u5c06\u4f1a\u5728\u7b14\u8005\u7684\u535a\u5ba2\u548c\u516c\u4f17\u53f7\u4e0a\u540c\u6b65\u66f4\u65b0\uff0c\u53ef\u80fd\u5185\u5bb9\u4e0a\u4e0d\u592a\u4e00\u81f4\uff0c\u5e0c\u671b\u8bfb\u8005\u591a\u591a\u5305\u6db5\u3002\u7531\u4e8e\u7f16\u5199\u672c\u4e66\u7684\u4f5c\u8005\u6c34\u5e73\u6709\u9650\uff0c\u4e66\u4e2d\u6709\u4ec0\u4e48\u8d28\u7591\u7684\u5730\u65b9\uff0c\u5927\u5bb6\u53ef\u4ee5\u63d0\u51fa\u6765\u4e00\u8d77\u8ba8\u8bba\u3002\n"
 },
 {
  "repo": "rweather/arduinolibs",
  "language": "C++",
  "readme_contents": "\nArduino Cryptography Library\n============================\n\nThis distribution contains a libraries and example applications to perform\ncryptography operations on Arduino devices.  They are distributed under the\nterms of the MIT license.\n\nThe [documentation](http://rweather.github.io/arduinolibs/crypto.html)\ncontains more information on the libraries and examples.\n\nThis repository used to contain a number of other examples and libraries\nfor other areas of Arduino functionality but most users are only interested\nin the cryptography code.  The other projects have been moved to a\nseparate [repository](https://github.com/rweather/arduino-projects) and\nonly the cryptography code remains in this repository.\n\nFor more information on these libraries, to report bugs, or to suggest\nimprovements, please contact the author Rhys Weatherley via\n[email](mailto:rhys.weatherley@gmail.com).\n\nRecent significant changes to the library\n-----------------------------------------\n\nMar 2022:\n\n* HMAC-BLAKE2b and HMAC-BLAKE2s were giving incorrect results when the\nmessage being authenticated was zero-length.\n\nJan 2022:\n\n* All-in-one hmac() function in Hash.h for simplified HMAC computations.\n* New API for the HKDF hash-based key derivation function.\n* Make the ESP32 version of AES less dependent on include file locations.\n\nApr 2018:\n\n* Acorn128 and Ascon128 authenticated ciphers (finalists in the CAESAR AEAD\n  competition in the light-weight category).\n* Split the library into Crypto (core), CryptoLW (light-weight), and\n  CryptoLegacy (deprecated algorithms).\n* Tiny and small versions of AES for reducing memory requirements.\n* Port the library to ESP8266 and ESP32.\n* Make the RNG class more robust if the app doesn't call begin() or loop().\n\nNov 2017:\n\n* Fix the AVR assembly version of Speck and speed it up a little.\n* API improvements to the RNG class.\n"
 },
 {
  "repo": "TomLous/coursera-cryptography1",
  "language": "Python",
  "readme_contents": "coursera-cryptography1\n======================\n\nAssignments for Coursera's Cryptography I course by Dan Boneh\n"
 },
 {
  "repo": "indutny/elliptic",
  "language": "JavaScript",
  "readme_contents": "# Elliptic [![Build Status](https://secure.travis-ci.org/indutny/elliptic.png)](http://travis-ci.org/indutny/elliptic) [![Coverage Status](https://coveralls.io/repos/indutny/elliptic/badge.svg?branch=master&service=github)](https://coveralls.io/github/indutny/elliptic?branch=master) [![Code Climate](https://codeclimate.com/github/indutny/elliptic/badges/gpa.svg)](https://codeclimate.com/github/indutny/elliptic)\n\n[![Saucelabs Test Status](https://saucelabs.com/browser-matrix/gh-indutny-elliptic.svg)](https://saucelabs.com/u/gh-indutny-elliptic)\n\nFast elliptic-curve cryptography in a plain javascript implementation.\n\nNOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve\nfor your cryptography operations.\n\n## Incentive\n\nECC is much slower than regular RSA cryptography, the JS implementations are\neven more slower.\n\n## Benchmarks\n\n```bash\n$ node benchmarks/index.js\nBenchmarking: sign\nelliptic#sign x 262 ops/sec \u00b10.51% (177 runs sampled)\neccjs#sign x 55.91 ops/sec \u00b10.90% (144 runs sampled)\n------------------------\nFastest is elliptic#sign\n========================\nBenchmarking: verify\nelliptic#verify x 113 ops/sec \u00b10.50% (166 runs sampled)\neccjs#verify x 48.56 ops/sec \u00b10.36% (125 runs sampled)\n------------------------\nFastest is elliptic#verify\n========================\nBenchmarking: gen\nelliptic#gen x 294 ops/sec \u00b10.43% (176 runs sampled)\neccjs#gen x 62.25 ops/sec \u00b10.63% (129 runs sampled)\n------------------------\nFastest is elliptic#gen\n========================\nBenchmarking: ecdh\nelliptic#ecdh x 136 ops/sec \u00b10.85% (156 runs sampled)\n------------------------\nFastest is elliptic#ecdh\n========================\n```\n\n## API\n\n### ECDSA\n\n```javascript\nvar EC = require('elliptic').ec;\n\n// Create and initialize EC context\n// (better do it once and reuse it)\nvar ec = new EC('secp256k1');\n\n// Generate keys\nvar key = ec.genKeyPair();\n\n// Sign the message's hash (input must be an array, or a hex-string)\nvar msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nvar signature = key.sign(msgHash);\n\n// Export DER encoded signature in Array\nvar derSign = signature.toDER();\n\n// Verify signature\nconsole.log(key.verify(msgHash, derSign));\n\n// CHECK WITH NO PRIVATE KEY\n\nvar pubPoint = key.getPublic();\nvar x = pubPoint.getX();\nvar y = pubPoint.getY();\n\n// Public Key MUST be either:\n// 1) '04' + hex string of x + hex string of y; or\n// 2) object with two hex string properties (x and y); or\n// 3) object with two buffer properties (x and y)\nvar pub = pubPoint.encode('hex');                                 // case 1\nvar pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2\nvar pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3\nvar pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3\n\n// Import public key\nvar key = ec.keyFromPublic(pub, 'hex');\n\n// Signature MUST be either:\n// 1) DER-encoded signature as hex-string; or\n// 2) DER-encoded signature as buffer; or\n// 3) object with two hex-string properties (r and s); or\n// 4) object with two buffer properties (r and s)\n\nvar signature = '3046022100...'; // case 1\nvar signature = new Buffer('...'); // case 2\nvar signature = { r: 'b1fc...', s: '9c42...' }; // case 3\n\n// Verify signature\nconsole.log(key.verify(msgHash, signature));\n```\n\n### EdDSA\n\n```javascript\nvar EdDSA = require('elliptic').eddsa;\n\n// Create and initialize EdDSA context\n// (better do it once and reuse it)\nvar ec = new EdDSA('ed25519');\n\n// Create key pair from secret\nvar key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer\n\n// Sign the message's hash (input must be an array, or a hex-string)\nvar msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nvar signature = key.sign(msgHash).toHex();\n\n// Verify signature\nconsole.log(key.verify(msgHash, signature));\n\n// CHECK WITH NO PRIVATE KEY\n\n// Import public key\nvar pub = '0a1af638...';\nvar key = ec.keyFromPublic(pub, 'hex');\n\n// Verify signature\nvar signature = '70bed1...';\nconsole.log(key.verify(msgHash, signature));\n```\n\n### ECDH\n\n```javascript\nvar EC = require('elliptic').ec;\nvar ec = new EC('curve25519');\n\n// Generate keys\nvar key1 = ec.genKeyPair();\nvar key2 = ec.genKeyPair();\n\nvar shared1 = key1.derive(key2.getPublic());\nvar shared2 = key2.derive(key1.getPublic());\n\nconsole.log('Both shared secrets are BN instances');\nconsole.log(shared1.toString(16));\nconsole.log(shared2.toString(16));\n```\n\nthree and more members:\n```javascript\nvar EC = require('elliptic').ec;\nvar ec = new EC('curve25519');\n\nvar A = ec.genKeyPair();\nvar B = ec.genKeyPair();\nvar C = ec.genKeyPair();\n\nvar AB = A.getPublic().mul(B.getPrivate())\nvar BC = B.getPublic().mul(C.getPrivate())\nvar CA = C.getPublic().mul(A.getPrivate())\n\nvar ABC = AB.mul(C.getPrivate())\nvar BCA = BC.mul(A.getPrivate())\nvar CAB = CA.mul(B.getPrivate())\n\nconsole.log(ABC.getX().toString(16))\nconsole.log(BCA.getX().toString(16))\nconsole.log(CAB.getX().toString(16))\n```\n\nNOTE: `.derive()` returns a [BN][1] instance.\n\n## Supported curves\n\nElliptic.js support following curve types:\n\n* Short Weierstrass\n* Montgomery\n* Edwards\n* Twisted Edwards\n\nFollowing curve 'presets' are embedded into the library:\n\n* `secp256k1`\n* `p192`\n* `p224`\n* `p256`\n* `p384`\n* `p521`\n* `curve25519`\n* `ed25519`\n\nNOTE: That `curve25519` could not be used for ECDSA, use `ed25519` instead.\n\n### Implementation details\n\nECDSA is using deterministic `k` value generation as per [RFC6979][0]. Most of\nthe curve operations are performed on non-affine coordinates (either projective\nor extended), various windowing techniques are used for different cases.\n\nAll operations are performed in reduction context using [bn.js][1], hashing is\nprovided by [hash.js][2]\n\n### Related projects\n\n* [eccrypto][3]: isomorphic implementation of ECDSA, ECDH and ECIES for both\n  browserify and node (uses `elliptic` for browser and [secp256k1-node][4] for\n  node)\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2014.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: http://tools.ietf.org/html/rfc6979\n[1]: https://github.com/indutny/bn.js\n[2]: https://github.com/indutny/hash.js\n[3]: https://github.com/bitchan/eccrypto\n[4]: https://github.com/wanderer/secp256k1-node\n"
 },
 {
  "repo": "cryfs/cryfs",
  "language": "C++",
  "readme_contents": "# CryFS\n\nCryFS encrypts your files, so you can safely store them anywhere. It works well together with cloud services like Dropbox, iCloud, OneDrive and others.\nSee [https://www.cryfs.org](https://www.cryfs.org).\n\nInstall latest release\n======================\n\nLinux\n------\n\nCryFS is available through apt, but depending on which version of Ubuntu or Debian you're using, you may get an old version.\n\n    sudo apt install cryfs\n\nThe following should work on Arch and Arch-based distros:\n\n    sudo pacman -S cryfs\n\nIf you use homebrew-core, using the following instruction you should be able to install CrysFS:\n\n    brew install cryfs/tap/cryfs\n\nAdditionally, the following would work for any Linux distro with the Nix package manager:\n\n    nix-env -iA nixpkgs.cryfs\n\nOSX\n----\n\nCryFS is distributed via Homebrew, MacPorts, and Nix.\n\nIf you use Homebrew:\n\n    brew install --cask macfuse\n    brew install cryfs/tap/cryfs\n\nIf you use MacPorts:\n\n    port install cryfs\n\nFor Nix, the macOS build for cryfs is available in the Nixpkgs channel 21.05\nand later:\n\n    brew install --cask macfuse # or download from https://osxfuse.github.io/\n    nix-env -iA nixpkgs.cryfs\n\nWindows (experimental)\n----------------------\n\nCryFS has experimental Windows support since the 0.10 release series. To install it, do:\n\n1. Install [DokanY](https://github.com/dokan-dev/dokany/releases)\n2. Install [Microsoft Visual C++ Redistributable for Visual Studio 2019](https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads)\n3. Install [CryFS](https://www.cryfs.org/#download)\n\nGUI\n===\nThere are some GUI applications with CryFS support. You usually have to install the GUI **and** also CryFS itself for it to work.\n- [SiriKali](https://mhogomchungu.github.io/sirikali/)\n- [Plasma Vault](https://www.kde.org/announcements/plasma-5.11.0.php) in KDE Plasma >= 5.11\n\nStability / Production readiness\n====================\nCryFS 0.10 or later is stable for most use cases, but has a couple of known issues that can corrupt your file system.\nThey don't happen in normal day to day use, but can happen if you don't pay attention or aren't aware of them.\nThis is why the version number hasn't reached 1.0 yet.\n\n- If you kill the CryFS process while it was in the middle of writing data (either intentionally or unintentionally by losing power to your PC), your file system could get corrupted.\n  CryFS does not do journaling. Note that in 0.10.x, read accesses into a CryFS file system can cause writes because file timestamps get updated. So if you're unlucky, your file system\n  could get corrupted if you lose power while you were reading files as well. Read accesses aren't an issue in CryFS 0.11.x anymore, because it mounts the filesystem with `noatime` by default.\n- The same corruption mentioned above can happen when CryFS is trying to write data but your disk ran out of space, causing the write to fail.\n- CryFS does not currently support concurrent access, i.e. accessing a file system from multiple devices at the same time.\n  CryFS works very well for storing data in a cloud and using it from multiple devices, but you need to make sure that only one CryFS process is active at any point in time, and you also need\n  to make sure that the cloud synchronization client (e.g. Dropbox) finishes its synchronization before you switch devices. There are some ideas on how concurrent access could be supported in\n  future versions, but it's a hard problem to solve. If you do happen to access the file system from multiple devices at the same time, it will likely go well most of the time, but it can corrupt your file system.\n- In addition to the scenarios above that can corrupt your file system, note that there is currently no fsck-like tool for CryFS that could recover your data. Although such a tool is in theory, possible,\n  it hasn't been implemented yet and a corrupted file system will most likely cause a loss of your data.\n\nIf the scenarios mentioned above don't apply to you, then you can consider CryFS 0.10.x as stable. The 0.9.x versions are not recommended anymore.\n\nBuilding from source\n====================\n\nRequirements\n------------\n  - Git (for getting the source code)\n  - GCC version >= 7 or Clang >= 7\n  - CMake version >= 3.10\n  - pkg-config (on Unix)\n  - Conan package manager\n  - libcurl4 (including development headers)\n  - SSL development libraries (including development headers, e.g. libssl-dev)\n  - libFUSE version >= 2.8.6 (including development headers), on Mac OS X instead install macFUSE from https://osxfuse.github.io/\n  - Python >= 3.5\n  - OpenMP\n\nYou can use the following commands to install these requirements\n\n        # Ubuntu\n        $ sudo apt install git g++ cmake make pkg-config libcurl4-openssl-dev libssl-dev libfuse-dev python python3-pip\n        $ sudo pip3 install conan\n\n        # Fedora\n        $ sudo dnf install git gcc-c++ cmake make pkgconf libcurl-devel openssl-devel fuse-devel python python3-pip\n        $ sudo pip3 install conan\n\n        # Macintosh\n        $ brew install cmake pkg-config openssl libomp macfuse\n        $ sudo pip3 install conan\n\nBuild & Install\n---------------\n\n 1. Clone repository\n\n        $ git clone https://github.com/cryfs/cryfs.git cryfs\n        $ cd cryfs\n\n 2. Build\n\n        $ mkdir build && cd build\n        $ cmake ..\n        $ make\n\n 3. Install\n\n        $ sudo make install\n\nYou can pass the following variables to the *cmake* command (using *-Dvariablename=value*):\n - **-DCMAKE_BUILD_TYPE**=[Release|Debug]: Whether to run code optimization or add debug symbols. Default: Release\n - **-DBUILD_TESTING**=[on|off]: Whether to build the test cases (can take a long time). Default: off\n - **-DCRYFS_UPDATE_CHECKS**=off: Build a CryFS that doesn't check online for updates and security vulnerabilities.\n\nBuilding on Windows (experimental)\n----------------------------------\n\n1. Install conan. If you want to use \"pip install conan\", you may have to install Python first.\n2. Install DokanY 1.3.0.1000. Other versions may not work.\n3. Run CMake to generate Visual Studio 2019 project files (this may not be necessary, but it makes sure everything works as expected and you can see potential errors happening during this step)\n\n$ mkdir build && cd build\n$ cmake .. -G \"Visual Studio 16 2019\" -DDOKAN_PATH=[dokan library location, e.g. \"C:\\Program Files\\Dokan\\DokanLibrary-1.3.0\"]\n\n4. Potentially modify CMakeSettings.json file to fit your needs\n5. Open the cryfs source folder with Visual Studio 2019, or alternatively build on command line using\n\n$ cd build && cmake --build . --config RelWithDebInfo\n\nTroubleshooting\n---------------\n\nOn most systems, CMake should find the libraries automatically. However, that doesn't always work.\n\n1. **Fuse library not found**\n\n    Pass in the library path with\n\n        PKG_CONFIG_PATH=/path-to-fuse-or-macFUSE/lib/pkgconfig cmake ..\n\n2. **Fuse headers not found**\n\n    Pass in the include path with\n\n        PKG_CONFIG_PATH=/path-to-fuse-or-macFUSE/lib/pkgconfig cmake ..\n\n3. **Openssl headers not found**\n\n    Pass in the include path with\n\n        cmake .. -DCMAKE_C_FLAGS=\"-I/path/to/openssl/include\"\n\n4. **OpenMP not found (osx)**\n\n    Either build it without OpenMP\n\n        cmake .. -DDISABLE_OPENMP=on\n\n    but this will cause slower file system mount times (performance after mounting will be unaffected).\n    If you installed OpenMP with homebrew or macports, it will be autodetected.\n    If that doesn't work for some reason (or you want to use a different installation than the autodetected one),\n    pass in these flags:\n\n        cmake .. -DOpenMP_CXX_FLAGS='-Xpreprocessor -fopenmp -I/path/to/openmp/include' -DOpenMP_CXX_LIB_NAMES=omp -DOpenMP_omp_LIBRARY=/path/to/libomp.dylib\n\n\nUsing local dependencies\n-------------------------------\nStarting with CryFS 0.11, Conan is used for dependency management.\nWhen you build CryFS, Conan downloads the exact version of each dependency library that was also used for development.\nAll dependencies are linked statically, so there should be no incompatibility with locally installed libraries.\nThis is the recommended way because it has the highest probability of working correctly.\n\nHowever, some distributions prefer software packages to be built against dependencies dynamically and against locally installed versions of libraries.\nSo if you're building a package for such a distribution, you have the option of doing that, at the cost of potential incompatibilities.\nIf you follow this workflow, please make sure to extensively test your build of CryFS.\nYou're using a setup that wasn't tested by the CryFS developers.\n\nTo use local dependencies, you need to tell the CryFS build how to get these dependencies.\nYou can do this by writing a small CMake configuration file and passing it to the CryFS build using `-DDEPENDENCY_CONFIG=filename`.\nThis configuration file needs to define a cmake target for each of the dependencies.\n\nHere's an [example config file](cmake-utils/DependenciesFromConan.cmake) that gets the dependencies from conan.\nAnd here's another [example config file](cmake-utils/DependenciesFromLocalSystem.cmake) that works for getting dependencies that are locally installed in Ubuntu.\nYou can create your own configuration file to tell the build how to get its dependencies and, for example, mix and match. Get some dependencies from Conan and others from the local system.\n\n\nCreating .deb and .rpm packages\n-------------------------------\n\nIt is recommended to install CryFS using packages, because that allows for an easy way to uninstall it again once you don't need it anymore.\n\nIf you want to create a .rpm package, you need to install rpmbuild.\n\n 1. Clone repository\n\n        $ git clone https://github.com/cryfs/cryfs.git cryfs\n        $ cd cryfs\n\n 2. Build\n\n        $ mkdir cmake && cd cmake\n        $ cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING=off\n        $ make package\n\n\nDisclaimer\n----------------------\n\nIn the event of a password leak, you are strongly advised to create a new filesystem and copy all the data over from the previous one. Then, remove all copies of the compromised filesystem and config file(e.g, from the \"previous versions\" feature of your cloud system) to prevent access to the key (and, as a result, your data) using the leaked password.\n"
 },
 {
  "repo": "YuZhang/cryptography",
  "language": "TeX",
  "readme_contents": "## Cryptography Course Slides\n\n[![made-with-latex](https://img.shields.io/badge/Made%20with-LaTeX-1f425f.svg)](https://www.latex-project.org/)  [![CC BY-SA 4.0][cc-by-sa-shield]][cc-by-sa]\n\nYu Zhang, Harbin Insitute of Technology, 2011, 2012, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021\n\n- New ! 2020.12 Alice, Bob, Evil and Charlie have new avatars\n- New ! 2020.09 \u589e\u52a0\u4e86\u4e2d\u6587\u8bfe\u7a0b\u8bb2\u4e49\uff0c\u5728[notes-Chinese](notes-Chinese/)\u76ee\u5f55\u4e0b\n\n## Requirement for compiling slides\n\n* Developed with [MacTeX](https://www.tug.org/mactex/)\n* run `make` to compile slides, which will be in [/pdf](/pdf)\n* run `make gallery.pdf` to generate [the gallery of tikz diagrams](/misc/gallery/gallery.pdf)\n\n## References\n* Textbook: [Introduction to Modern Cryptography](http://www.cs.umd.edu/~jkatz/imc.html) by Jonathan Katz and Yehuda Lindell\n* MOOC: [Cryptography @Coursera (Stanford)](https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/) by Prof. Dan Boneh\n\n## License\n\nThis work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License][cc-by-sa].\n\n[![CC BY-SA 4.0][cc-by-sa-image]][cc-by-sa]\n\n[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/\n[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png\n[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg\n\n"
 },
 {
  "repo": "dchest/tweetnacl-js",
  "language": "JavaScript",
  "readme_contents": "TweetNaCl.js\n============\n\nPort of [TweetNaCl](http://tweetnacl.cr.yp.to) / [NaCl](http://nacl.cr.yp.to/)\nto JavaScript for modern browsers and Node.js. Public domain.\n\n[![Build Status](https://travis-ci.org/dchest/tweetnacl-js.svg?branch=master)\n](https://travis-ci.org/dchest/tweetnacl-js)\n\nDemo: <https://dchest.github.io/tweetnacl-js/>\n\nDocumentation\n=============\n\n* [Overview](#overview)\n* [Audits](#audits)\n* [Installation](#installation)\n* [Examples](#examples)\n* [Usage](#usage)\n  * [Public-key authenticated encryption (box)](#public-key-authenticated-encryption-box)\n  * [Secret-key authenticated encryption (secretbox)](#secret-key-authenticated-encryption-secretbox)\n  * [Scalar multiplication](#scalar-multiplication)\n  * [Signatures](#signatures)\n  * [Hashing](#hashing)\n  * [Random bytes generation](#random-bytes-generation)\n  * [Constant-time comparison](#constant-time-comparison)\n* [System requirements](#system-requirements)\n* [Development and testing](#development-and-testing)\n* [Benchmarks](#benchmarks)\n* [Contributors](#contributors)\n* [Who uses it](#who-uses-it)\n\n\nOverview\n--------\n\nThe primary goal of this project is to produce a translation of TweetNaCl to\nJavaScript which is as close as possible to the original C implementation, plus\na thin layer of idiomatic high-level API on top of it.\n\nThere are two versions, you can use either of them:\n\n* `nacl.js` is the port of TweetNaCl with minimum differences from the\n  original + high-level API.\n\n* `nacl-fast.js` is like `nacl.js`, but with some functions replaced with\n  faster versions. (Used by default when importing NPM package.)\n\n\nAudits\n------\n\nTweetNaCl.js has been audited by [Cure53](https://cure53.de/) in January-February\n2017 (audit was sponsored by [Deletype](https://deletype.com)):\n\n> The overall outcome of this audit signals a particularly positive assessment\n> for TweetNaCl-js, as the testing team was unable to find any security\n> problems in the library.\n\n[Read full audit report](https://cure53.de/tweetnacl.pdf)\n\nWhile the audit didn't find any bugs, there has been [1 bug](https://github.com/dchest/tweetnacl-js/issues/187) discovered and fixed after the audit.\n\n\nInstallation\n------------\n\nYou can install TweetNaCl.js via a package manager:\n\n[Yarn](https://yarnpkg.com/):\n\n    $ yarn add tweetnacl\n\n[NPM](https://www.npmjs.org/):\n\n    $ npm install tweetnacl\n\nor [download source code](https://github.com/dchest/tweetnacl-js/releases).\n\n\nExamples\n--------\nYou can find usage examples in our [wiki](https://github.com/dchest/tweetnacl-js/wiki/Examples).\n\n\nUsage\n-----\n\nAll API functions accept and return bytes as `Uint8Array`s.  If you need to\nencode or decode strings, use functions from\n<https://github.com/dchest/tweetnacl-util-js> or one of the more robust codec\npackages.\n\nIn Node.js v4 and later `Buffer` objects are backed by `Uint8Array`s, so you\ncan freely pass them to TweetNaCl.js functions as arguments. The returned\nobjects are still `Uint8Array`s, so if you need `Buffer`s, you'll have to\nconvert them manually; make sure to convert using copying: `Buffer.from(array)`\n(or `new Buffer(array)` in Node.js v4 or earlier), instead of sharing:\n`Buffer.from(array.buffer)` (or `new Buffer(array.buffer)` Node 4 or earlier),\nbecause some functions return subarrays of their buffers.\n\n\n### Public-key authenticated encryption (box)\n\nImplements *x25519-xsalsa20-poly1305*.\n\n#### nacl.box.keyPair()\n\nGenerates a new random key pair for box and returns it as an object with\n`publicKey` and `secretKey` members:\n\n    {\n       publicKey: ...,  // Uint8Array with 32-byte public key\n       secretKey: ...   // Uint8Array with 32-byte secret key\n    }\n\n\n#### nacl.box.keyPair.fromSecretKey(secretKey)\n\nReturns a key pair for box with public key corresponding to the given secret\nkey.\n\n#### nacl.box(message, nonce, theirPublicKey, mySecretKey)\n\nEncrypts and authenticates message using peer's public key, our secret key, and\nthe given nonce, which must be unique for each distinct message for a key pair.\n\nReturns an encrypted and authenticated message, which is\n`nacl.box.overheadLength` longer than the original message.\n\n#### nacl.box.open(box, nonce, theirPublicKey, mySecretKey)\n\nAuthenticates and decrypts the given box with peer's public key, our secret\nkey, and the given nonce.\n\nReturns the original message, or `null` if authentication fails.\n\n#### nacl.box.before(theirPublicKey, mySecretKey)\n\nReturns a precomputed shared key which can be used in `nacl.box.after` and\n`nacl.box.open.after`.\n\n#### nacl.box.after(message, nonce, sharedKey)\n\nSame as `nacl.box`, but uses a shared key precomputed with `nacl.box.before`.\n\n#### nacl.box.open.after(box, nonce, sharedKey)\n\nSame as `nacl.box.open`, but uses a shared key precomputed with `nacl.box.before`.\n\n#### Constants\n\n##### nacl.box.publicKeyLength = 32\n\nLength of public key in bytes.\n\n##### nacl.box.secretKeyLength = 32\n\nLength of secret key in bytes.\n\n##### nacl.box.sharedKeyLength = 32\n\nLength of precomputed shared key in bytes.\n\n##### nacl.box.nonceLength = 24\n\nLength of nonce in bytes.\n\n##### nacl.box.overheadLength = 16\n\nLength of overhead added to box compared to original message.\n\n\n### Secret-key authenticated encryption (secretbox)\n\nImplements *xsalsa20-poly1305*.\n\n#### nacl.secretbox(message, nonce, key)\n\nEncrypts and authenticates message using the key and the nonce. The nonce must\nbe unique for each distinct message for this key.\n\nReturns an encrypted and authenticated message, which is\n`nacl.secretbox.overheadLength` longer than the original message.\n\n#### nacl.secretbox.open(box, nonce, key)\n\nAuthenticates and decrypts the given secret box using the key and the nonce.\n\nReturns the original message, or `null` if authentication fails.\n\n#### Constants\n\n##### nacl.secretbox.keyLength = 32\n\nLength of key in bytes.\n\n##### nacl.secretbox.nonceLength = 24\n\nLength of nonce in bytes.\n\n##### nacl.secretbox.overheadLength = 16\n\nLength of overhead added to secret box compared to original message.\n\n\n### Scalar multiplication\n\nImplements *x25519*.\n\n#### nacl.scalarMult(n, p)\n\nMultiplies an integer `n` by a group element `p` and returns the resulting\ngroup element.\n\n#### nacl.scalarMult.base(n)\n\nMultiplies an integer `n` by a standard group element and returns the resulting\ngroup element.\n\n#### Constants\n\n##### nacl.scalarMult.scalarLength = 32\n\nLength of scalar in bytes.\n\n##### nacl.scalarMult.groupElementLength = 32\n\nLength of group element in bytes.\n\n\n### Signatures\n\nImplements [ed25519](http://ed25519.cr.yp.to).\n\n#### nacl.sign.keyPair()\n\nGenerates new random key pair for signing and returns it as an object with\n`publicKey` and `secretKey` members:\n\n    {\n       publicKey: ...,  // Uint8Array with 32-byte public key\n       secretKey: ...   // Uint8Array with 64-byte secret key\n    }\n\n#### nacl.sign.keyPair.fromSecretKey(secretKey)\n\nReturns a signing key pair with public key corresponding to the given\n64-byte secret key. The secret key must have been generated by\n`nacl.sign.keyPair` or `nacl.sign.keyPair.fromSeed`.\n\n#### nacl.sign.keyPair.fromSeed(seed)\n\nReturns a new signing key pair generated deterministically from a 32-byte seed.\nThe seed must contain enough entropy to be secure. This method is not\nrecommended for general use: instead, use `nacl.sign.keyPair` to generate a new\nkey pair from a random seed.\n\n#### nacl.sign(message, secretKey)\n\nSigns the message using the secret key and returns a signed message.\n\n#### nacl.sign.open(signedMessage, publicKey)\n\nVerifies the signed message and returns the message without signature.\n\nReturns `null` if verification failed.\n\n#### nacl.sign.detached(message, secretKey)\n\nSigns the message using the secret key and returns a signature.\n\n#### nacl.sign.detached.verify(message, signature, publicKey)\n\nVerifies the signature for the message and returns `true` if verification\nsucceeded or `false` if it failed.\n\n#### Constants\n\n##### nacl.sign.publicKeyLength = 32\n\nLength of signing public key in bytes.\n\n##### nacl.sign.secretKeyLength = 64\n\nLength of signing secret key in bytes.\n\n##### nacl.sign.seedLength = 32\n\nLength of seed for `nacl.sign.keyPair.fromSeed` in bytes.\n\n##### nacl.sign.signatureLength = 64\n\nLength of signature in bytes.\n\n\n### Hashing\n\nImplements *SHA-512*.\n\n#### nacl.hash(message)\n\nReturns SHA-512 hash of the message.\n\n#### Constants\n\n##### nacl.hash.hashLength = 64\n\nLength of hash in bytes.\n\n\n### Random bytes generation\n\n#### nacl.randomBytes(length)\n\nReturns a `Uint8Array` of the given length containing random bytes of\ncryptographic quality.\n\n**Implementation note**\n\nTweetNaCl.js uses the following methods to generate random bytes,\ndepending on the platform it runs on:\n\n* `window.crypto.getRandomValues` (WebCrypto standard)\n* `window.msCrypto.getRandomValues` (Internet Explorer 11)\n* `crypto.randomBytes` (Node.js)\n\nIf the platform doesn't provide a suitable PRNG, the following functions,\nwhich require random numbers, will throw exception:\n\n* `nacl.randomBytes`\n* `nacl.box.keyPair`\n* `nacl.sign.keyPair`\n\nOther functions are deterministic and will continue working.\n\nIf a platform you are targeting doesn't implement secure random number\ngenerator, but you somehow have a cryptographically-strong source of entropy\n(not `Math.random`!), and you know what you are doing, you can plug it into\nTweetNaCl.js like this:\n\n    nacl.setPRNG(function(x, n) {\n      // ... copy n random bytes into x ...\n    });\n\nNote that `nacl.setPRNG` *completely replaces* internal random byte generator\nwith the one provided.\n\n\n### Constant-time comparison\n\n#### nacl.verify(x, y)\n\nCompares `x` and `y` in constant time and returns `true` if their lengths are\nnon-zero and equal, and their contents are equal.\n\nReturns `false` if either of the arguments has zero length, or arguments have\ndifferent lengths, or their contents differ.\n\n\nSystem requirements\n-------------------\n\nTweetNaCl.js supports modern browsers that have a cryptographically secure\npseudorandom number generator and typed arrays, including the latest versions\nof:\n\n* Chrome\n* Firefox\n* Safari (Mac, iOS)\n* Internet Explorer 11\n\nOther systems:\n\n* Node.js\n\n\nDevelopment and testing\n------------------------\n\nInstall NPM modules needed for development:\n\n    $ npm install\n\nTo build minified versions:\n\n    $ npm run build\n\nTests use minified version, so make sure to rebuild it every time you change\n`nacl.js` or `nacl-fast.js`.\n\n### Testing\n\nTo run tests in Node.js:\n\n    $ npm run test-node\n\nBy default all tests described here work on `nacl.min.js`. To test other\nversions, set environment variable `NACL_SRC` to the file name you want to test.\nFor example, the following command will test fast minified version:\n\n    $ NACL_SRC=nacl-fast.min.js npm run test-node\n\nTo run full suite of tests in Node.js, including comparing outputs of\nJavaScript port to outputs of the original C version:\n\n    $ npm run test-node-all\n\nTo prepare tests for browsers:\n\n    $ npm run build-test-browser\n\nand then open `test/browser/test.html` (or `test/browser/test-fast.html`) to\nrun them.\n\nTo run tests in both Node and Electron:\n\n    $ npm test\n\n### Benchmarking\n\nTo run benchmarks in Node.js:\n\n    $ npm run bench\n    $ NACL_SRC=nacl-fast.min.js npm run bench\n\nTo run benchmarks in a browser, open `test/benchmark/bench.html` (or\n`test/benchmark/bench-fast.html`).\n\n\nBenchmarks\n----------\n\nFor reference, here are benchmarks from MacBook Pro (Retina, 13-inch, Mid 2014)\nlaptop with 2.6 GHz Intel Core i5 CPU (Intel) in Chrome 53/OS X, Xiaomi Redmi\nNote 3 smartphone with 1.8 GHz Qualcomm Snapdragon 650 64-bit CPU (ARM) in\nChrome 52/Android, and MacBook Air 2020 with Apple M1 SOC (M1) in Chromium 102/macOS.\n\n|               | nacl.js Intel | nacl-fast.js Intel  |   nacl.js ARM | nacl-fast.js ARM  | nacl-fast.js M1   |\n| ------------- |:-------------:|:-------------------:|:-------------:|:-----------------:|:-----------------:|\n| salsa20       | 1.3 MB/s      | 128 MB/s            |  0.4 MB/s     |  43 MB/s          |  268 MB/s         |\n| poly1305      | 13 MB/s       | 171 MB/s            |  4 MB/s       |  52 MB/s          |  248 MB/s         |\n| hash          | 4 MB/s        | 34 MB/s             |  0.9 MB/s     |  12 MB/s          |  76 MB/s          |\n| secretbox 1K  | 1113 op/s     | 57583 op/s          |  334 op/s     |  14227 op/s       |  54546 op/s       |\n| box 1K        | 145 op/s      | 718 op/s            |  37 op/s      |  368 op/s         |  1836 op/s        |\n| scalarMult    | 171 op/s      | 733 op/s            |  56 op/s      |  380 op/s         |  1882 op/s        |\n| sign          | 77  op/s      | 200 op/s            |  20 op/s      |  61 op/s          |  592 op/s         |\n| sign.open     | 39  op/s      | 102  op/s           |  11 op/s      |  31 op/s          |  300 op/s         |\n\n(You can run benchmarks on your devices by clicking on the links at the bottom\nof the [home page](https://tweetnacl.js.org)).\n\nIn short, with *nacl-fast.js* and 1024-byte messages you can expect to encrypt and\nauthenticate more than 57000 messages per second on a typical laptop or more than\n14000 messages per second on a $170 smartphone, sign about 500 and verify 300\nmessages per second on a laptop or 60 and 30 messages per second on a smartphone,\nper CPU core (with Web Workers you can do these operations in parallel),\nwhich is good enough for most applications.\n\n\nContributors\n------------\n\nSee AUTHORS.md file.\n\n\nThird-party libraries based on TweetNaCl.js\n-------------------------------------------\n\n* [chloride](https://github.com/dominictarr/chloride) - unified API for various NaCl modules\n* [forward-secrecy](https://github.com/alax/forward-secrecy) \u2014 Axolotl ratchet implementation\n* [nacl-stream](https://github.com/dchest/nacl-stream-js) - streaming encryption\n* [ristretto255-js](https://github.com/calibra/ristretto255-js) \u2014 implementation of the [ristretto255 group](https://ristretto.group/)\n* [tweetnacl-auth-js](https://github.com/dchest/tweetnacl-auth-js) \u2014 implementation of [`crypto_auth`](http://nacl.cr.yp.to/auth.html)\n* [tweetnacl-js-sealed-box](https://github.com/TogaTech/tweetnacl-js-sealed-box) \u2014 fork that adds [`sealed boxes`](https://download.libsodium.org/doc/public-key_cryptography/sealed_boxes.html)\n* [ed2curve](https://github.com/dchest/ed2curve-js) \u2014 convert Ed25519 signing key pair to X25519 boxes key pair\n\n\nWho uses it\n-----------\n\nSome notable users of TweetNaCl.js are listed on the [associated wiki page](https://github.com/dchest/tweetnacl-js/wiki/Who-uses-TweetNaCl.js).\n"
 },
 {
  "repo": "crypto101/book",
  "language": "Python",
  "readme_contents": "======================\n Crypto 101: the book\n======================\n\n.. image:: https://github.com/crypto101/book/actions/workflows/ci.yml/badge.svg?branch=master\n   :target: https://github.com/crypto101/book/actions/workflows/ci.yml?branch=master\n\nThis is the source repository for `Crypto 101`_, the introductory book\nabout cryptography by lvh_.\n\n.. _`Crypto 101`: https://www.crypto101.io/\n.. _lvh: https://twitter.com/lvh\n\nLicense\n=======\n\nSee the `LICENSE <LICENSE>`_ file.\n\nTranslations\n============\n\nFor now, crypto101 is only available in english, but `you can help translate it\ninto your own language <https://github.com/crypto101/book/issues/372>`_.\n\nBuilding\n========\n\nRun ``make book`` in the root directory of the repository to convert the\nsource files into rendered versions of all supported formats.\n\nDependencies\n------------\n\nDue to the high number of dependencies, using docker is highly recommended:\n\n.. code-block:: sh\n\n   docker build -t crypto101 docker/\n   docker run --rm -it -v \"$(realpath .)\":/repo -u \"$(id -u)\" crypto101 ./make-lang YOUR_LANGUAGE_CODE html latexpdf epub\n\n``YOUR_LANGUAGE_CODE`` must a valid `sphinx language code\n<https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-language>`_,\nlike ``en``, ``fr``, ``ko`` or ``zh_CN``.\n\nYou can find the install procedure for the dependencies for `ubuntu <docker/Dockerfile.ubuntu>`_ and `fedora <docker/Dockerfile.fedora>`_ in\ntheir dedicated dockerfiles.\n"
 },
 {
  "repo": "bitcoin/bitcoin",
  "language": "C++",
  "readme_contents": "Bitcoin Core integration/staging tree\n=====================================\n\nhttps://bitcoincore.org\n\nFor an immediately usable, binary version of the Bitcoin Core software, see\nhttps://bitcoincore.org/en/download/.\n\nWhat is Bitcoin Core?\n---------------------\n\nBitcoin Core connects to the Bitcoin peer-to-peer network to download and fully\nvalidate blocks and transactions. It also includes a wallet and graphical user\ninterface, which can be optionally built.\n\nFurther information about Bitcoin Core is available in the [doc folder](/doc).\n\nLicense\n-------\n\nBitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n\nDevelopment Process\n-------------------\n\nThe `master` branch is regularly built (see `doc/build-*.md` for instructions) and tested, but it is not guaranteed to be\ncompletely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\nregularly from release branches to indicate new official, stable release versions of Bitcoin Core.\n\nThe https://github.com/bitcoin-core/gui repository is used exclusively for the\ndevelopment of the GUI. Its master branch is identical in all monotree\nrepositories. Release branches and tags do not exist, so please do not fork\nthat repository unless it is for development reasons.\n\nThe contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md)\nand useful hints for developers can be found in [doc/developer-notes.md](doc/developer-notes.md).\n\nTesting\n-------\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money.\n\n### Automated Testing\n\nDevelopers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\nsubmit new unit tests for old code. Unit tests can be compiled and run\n(assuming they weren't disabled in configure) with: `make check`. Further details on running\nand extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n\nThere are also [regression and integration tests](/test), written\nin Python.\nThese tests can be run (if the [test dependencies](/test) are installed) with: `test/functional/test_runner.py`\n\nThe CI (Continuous Integration) systems make sure that every pull request is built for Windows, Linux, and macOS,\nand that unit/sanity tests are run automatically.\n\n### Manual Quality Assurance (QA) Testing\n\nChanges should be tested by somebody other than the developer who wrote the\ncode. This is especially important for large or high-risk changes. It is useful\nto add a test plan to the pull request description if testing the changes is\nnot straightforward.\n\nTranslations\n------------\n\nChanges to translations as well as new translations can be submitted to\n[Bitcoin Core's Transifex page](https://www.transifex.com/bitcoin/bitcoin/).\n\nTranslations are periodically pulled from Transifex and merged into the git repository. See the\n[translation process](doc/translation_process.md) for details on how this works.\n\n**Important**: We do not accept translation changes as GitHub pull requests because the next\npull from Transifex would automatically overwrite them again.\n"
 },
 {
  "repo": "microsoft/SymCrypt",
  "language": "C",
  "readme_contents": "# Introduction\nSymCrypt is the core cryptographic function library currently used by Windows.\n\n## History\nThe library was started in late 2006 with the first sources committed in Feb 2007.\nInitially the goal was limited to implement symmetric cryptographic operations, hence the name.\nStarting with Windows 8, it has been the primary crypto library for symmetric algorithms.\n\nIn 2015 we started the work of adding asymmetric algorithms to SymCrypt. Since the 1703 release of Windows 10,\nSymCrypt has been the primary crypto library for all algorithms in Windows.\n\n## Goals\nLike any engineering project, SymCrypt is a compromise between conflicting requirements:\n- Provide safe implementations of the cryptographic algorithms needed by Microsoft products.\n- Run on all CPU architectures supported by Windows.\n- Good performance.\n- Minimize maintenance cost.\n- Support FIPS 140-2 certification of products using SymCrypt.\n- Provide high assurance in the proper functionality of the library.\n\n# Clone the Repo\nIn some of our Linux modules, SymCrypt uses [Jitterentropy](https://github.com/smuellerDD/jitterentropy-library)\nas a source of FIPS-certifiable entropy. To build these modules, you will need to ensure that the\njitterentropy-library submodule is also cloned. You can do this by running\n`git submodule update --init -- jitterentropy-library` after cloning.\n\nThe SymCryptDependencies submodule provides the RSA32 and msbignum implementations which are used as benchmarks\nin the unit tests when compiled on Windows. Due to licensing restrictions, we cannot release these libraries\npublicly, so this submodule will only be cloneable by Microsoft employees with access to our private\nAzure DevOps repository. If you are external to Microsoft, you can ignore this submodule. It is only used in\nthe unit tests and does not change the behavior of the SymCrypt product code.\n\n# Build and Test\nSymCrypt can be compiled with CMake >= 3.13.0 and Visual Studio 2019 (with Windows 10 SDK version 18362) on Windows\nor gcc 7.4.0 or clang 10.0.0 on Linux. Note that CMake ships with Visual Studio 2019.\n\nPython3 is also required for translation of SymCryptAsm, and for building the SymCrypt module with integrity check.\nThe integrity check additionally requires pip and pyelftools: `pip3 install -r ./scripts/requirements.txt`\n\n1. Optionally use CMake from Visual Studio `$env:PATH=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\\;${env:PATH}\"`\n2. For Microsoft employees building the library internally, to include msbignum and RSA32 implementation benchmarks in the unit tests:\n    1. Make sure the SymCryptDependencies submodule is initialized by following the steps above (`git submodule update --init`)\n    2. In step 4 below, add the additional cmake argument `-DSYMCRYPT_INTERNAL_BUILD=1`\n3. `mkdir bin; cd bin`\n4. Configure CMake compilation:\n    * For x86 Windows targets: `cmake .. -DCMAKE_TOOLCHAIN_FILE=\"../cmake-toolchain/WindowsUserMode-X86.cmake\" -A Win32`\n    * For x86-64 Windows targets: `cmake .. -DCMAKE_TOOLCHAIN_FILE=\"../cmake-toolchain/WindowsUserMode-AMD64.cmake\"`\n    * For x86-64 Linux targets: `cmake .. -DCMAKE_TOOLCHAIN_FILE=\"../cmake-toolchain/LinuxUserMode-AMD64.cmake\"`\n    * For ARM64 Linux targets: `cmake .. -DCMAKE_TOOLCHAIN_FILE=\"../cmake-toolchain/LinuxUserMode-ARM64.cmake\"`\n    * For no CPU optimizations: `cmake ..`\n    * Optionally, for a release build, specify `-DCMAKE_BUILD_TYPE=Release`\n5. `cmake --build .`\n    * Optionally, for a release build on Windows, specify `--config Release`\n    * Optionally specify `-jN` where N is the number of processes you wish to spawn for the build\n\nIf compilation succeeds, the output will be put in the `exe` subdirectory relative to where compilation occurred\n(i.e. `bin/exe` if you followed the instructions above).\n\nThe SymCrypt unit test is in the `unittest` directory. It runs extensive functional tests on the SymCrypt\nlibrary. On Windows it also compares results against on other implementations such as the Windows APIs CNG\nand CAPI, and the older crypto libraries rsa32 and msbignum, if they are available. It also provides\ndetailed performance information.\n\n# Versioning and Servicing\nAs of version 101.0.0, SymCrypt uses the version scheme defined by the\n[Semantic Versioning 2.0.0](https://semver.org/spec/v2.0.0.html) specification. This means:\n\n- Major version changes introduce ABI and/or API breaking changes\n- Minor version changes introduce backwards compatible additional functionality or improvements, and/or bug fixes\n- Patch version changes introduce backwards compatible bug fixes\n\nThe initial open source release started at version 100 for compatibility with our previous\ninternal versioning scheme.\n\nRegarding servicing, our strong recommendation is that distro vendors and application developers regularly\nupdate to the latest version of SymCrypt and SymCrypt engine for both security fixes and \nfunctionality/performance improvements. We take care to maintain a stable API and ABI for SymCrypt and have\na suite of strong regression tests, and staying on the current version prevents the need for complex\nand potential riskier backports.\n\nWe will support long-term servicing of specific releases for security fixes. Details of this plan will be\nreleased publicly in the future.\n\n# Security Bugs\nIf you believe you have found a problem that affects the security of this code, please do **NOT** create an issue\nor pull request, but instead email your comments to secure@microsoft.com. See [SECURITY.md](SECURITY.md) for more info.\n\n# Contribute\nWe love to receive comments and suggestions. Unfortunately we cannot accept external code contributions at this time.\nCryptographic code is considered highly sensitive by many of our large customers.\nWe have some very big customers who put great value in the assurance of the crypto code used in their organization.\nBy restricting the coding to a handful of employees we can greatly reduce the (perceived) risk of malicious contributions.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n\n"
 },
 {
  "repo": "GaloisInc/cryptol",
  "language": "Haskell",
  "readme_contents": "[![Cryptol](https://github.com/GaloisInc/cryptol/workflows/Cryptol/badge.svg)](https://github.com/GaloisInc/cryptol/actions?query=workflow%3ACryptol)\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/GaloisInc/cryptol)\n\n\n# Cryptol, version 2\n\n    This version of Cryptol is (C) 2013-2020 Galois, Inc., and\n    distributed under a standard, three-clause BSD license. Please see\n    the file LICENSE, distributed with this software, for specific\n    terms and conditions.\n\n# What is Cryptol?\n\nThe Cryptol specification language was designed by Galois for the NSA\nLaboratory for Advanced Cybersecurity Research as a public standard for\nspecifying cryptographic algorithms. A Cryptol reference specification\ncan serve as the formal documentation for a cryptographic module.\nUnlike current specification mechanisms, Cryptol is fully executable,\nallowing designers to experiment with their programs incrementally as\ntheir designs evolve.\n\nThis release is an interpreter for version 2 of the Cryptol\nlanguage. The interpreter includes a `:check` command, which tests\npredicates written in Cryptol against randomly-generated test vectors\n(in the style of\n[QuickCheck](http://hackage.haskell.org/package/QuickCheck)). There is\nalso a `:prove` command, which calls out to SMT solvers, such as\nYices, Z3, or CVC4, to prove predicates for all possible inputs.\n\n# Getting Cryptol Binaries\n\nCryptol binaries for Mac OS X, Linux, and Windows are available from the\nGitHub [releases page](https://github.com/GaloisInc/cryptol/releases).\nMac OS X and Linux binaries are distributed as a tarball which you can\nextract to a location of your choice. Windows binaries are distributed\nboth as tarballs and as `.msi` installer packages which place a shortcut\nto the Cryptol interpreter in the Start menu.\n\nOn Mac OS X, Cryptol is also available via\n[Homebrew](http://brew.sh/). Simply run `brew update && brew install cryptol`\nto get the latest stable version.\n\n## Getting Z3\n\nCryptol currently uses Microsoft Research's [Z3 SMT\nsolver](https://github.com/Z3Prover/z3) by default to solve constraints\nduring type checking, and as the default solver for the `:sat` and\n`:prove` commands.  Cryptol generally requires the most recent version\nof Z3, but you can see the specific version tested in CI by looking [here](https://github.com/GaloisInc/what4-solvers/releases/tag/snapshot-20220114).\n\nYou can download Z3 binaries for a variety of platforms from their\n[releases page](https://github.com/Z3Prover/z3/releases). If you\ninstall Cryptol using Homebrew, the appropriate version of Z3 will be\ninstalled automatically. If you're using Linux, the package manager for\nyour distribution may include Z3, as well, though sometimes the\navailable versions are somewhat old.\n\nAfter installation, make sure that `z3` (or `z3.exe` on Windows)\nis on your PATH.\n\n### Note for 64-bit Linux Users\n\nOn some 64-bit Linux configurations, 32-bit binaries do not work. This\ncan lead to unhelpful error messages like `z3: no such file or\ndirectory`, even when `z3` is clearly present. To fix this, either\ninstall 32-bit compatibility packages for your distribution, or download\nthe `x64` version of Z3.\n\n# Building Cryptol From Source\n\nIn addition to the binaries, the Cryptol source is available publicly\non [GitHub](https://github.com/GaloisInc/cryptol).\n\nCryptol builds and runs on various flavors of Linux, Mac OS X, and\nWindows. We regularly build and test it in the following environments:\n\n- macOS 10.15, 64-bit\n- Ubuntu 18.04, 64-bit\n- Ubuntu 20.04, 64-bit\n- Windows Server 2019, 64-bit\n\n## Prerequisites\n\nCryptol is regularly built and tested with the three most recent\nversions of GHC, which at the time of this writing are 8.10.7, 9.0.2, and\n9.2.2. The easiest way to install an approporiate version of GHC is\nwith [ghcup](https://www.haskell.org/ghcup/).\n\nSome supporting non-Haskell libraries are required to build\nCryptol. Most should already be present for your operating system, but\nyou may need to install the following:\n\n- [The GNU Multiple Precision Arithmetic Library (GMP)](https://gmplib.org/)\n- [ncurses](https://www.gnu.org/software/ncurses/)\n\nYou'll also need [Z3](#getting-z3) installed when running Cryptol.\n\n## Building Cryptol\n\nAfter a fresh checkout of cryptol, be sure to initialize its git submodules:\n\n    git submodule update --init\n\nThen, from the Cryptol source directory, run:\n\n    ./cry build\n\nThis will build Cryptol in place. From there, there are additional targets:\n\n- `./cry run`: run Cryptol in the current directory\n- `./cry test`: run the regression test suite\n\n## Installing Cryptol\n\nIf you run `cabal v2-install --installdir=DIR` in your source directory\nafter running one of the above `./cry` command, you will end up with a\nbinary in `DIR`.\n\n## Configuring Cryptol\n\nCryptol can use several external files to control its operation.\nNormally, the build process embeds these files into the executable.\nHowever, these embedded files can be overwritten with local copies in\ntwo ways:\n\n- Copy the contents of the `lib` directory into `$HOME/.cryptol`.\n\n- Set the `CRYPTOLPATH` environment variable to name some other\n  directory that contains the files from the `lib` directory.\n\n# Contributing\n\nWe believe that anyone who uses Cryptol is making an important\ncontribution toward making Cryptol a better tool. There are many ways\nto get involved.\n\n## Users\n\nIf you write Cryptol programs that you think would benefit the\ncommunity, fork the GitHub repository, and add them to the\n`examples/contrib` directory and submit a pull request.\n\nWe host a Cryptol mailing list, which you can [join\nhere](https://groups.google.com/a/galois.com/forum/#!forum/cryptol-users).\n\nIf you run into a bug in Cryptol, if something doesn't make sense in the\ndocumentation, if you think something could be better, or if you just\nhave a cool use of Cryptol that you'd like to share with us, use the\nissues page on [GitHub](https://github.com/GaloisInc/cryptol), or send\nemail to <cryptol@galois.com>.\n\n## Developers\n\nIf you'd like to get involved with Cryptol development, see the list of\n[low-hanging\nfruit](https://github.com/GaloisInc/cryptol/labels/low-hanging%20fruit).\nThese are tasks which should be straightforward to implement. Make a\nfork of this GitHub repository, send along pull requests and we'll be\nhappy to incorporate your changes.\n\n### Repository Structure\n\n- `/cryptol`: Haskell sources for the front-end `cryptol` executable\n  and read-eval-print loop\n- `/docs`: LaTeX and Markdown sources for the Cryptol documentation\n- `/examples`: Cryptol sources implementing several interesting\n  algorithms\n- `/lib`: Cryptol standard library sources\n- `/src`: Haskell sources for the `cryptol` library (the bulk of the\n  implementation)\n- `/tests`: Haskell sources for the Cryptol regression test suite, as\n  well as the Cryptol sources and expected outputs that comprise that\n  suite\n\n# Where to Look Next\n\nThe `docs` directory of the installation package contains an\nintroductory book, the `examples` directory contains a number of\nalgorithms specified in Cryptol.\n\nIf you are familiar with version 1 of Cryptol, you should read the\n`Version2Changes` document in the `docs` directory.\n\nFor a large collection of Cryptol examples, see the [cryptol-specs\nrepository](https://github.com/galoisinc/cryptol-specs).\n\nCryptol is still under active development at Galois. We are also\nbuilding tools that consume both Cryptol specifications and\nimplementations in (for example) C or Java, and can (with some amount of\nwork) allow you to verify that an implementation meets its\nspecification. See more information on the [SAW\nwebsite](https://saw.galois.com).\n\n# Thanks!\n\nWe hope that Cryptol is useful as a tool for educators and students,\ncommercial and open source authors of cryptographic implementations,\nand by cryptographers to\n\n- specify cryptographic algorithms\n- check or prove properties of algorithms\n- generate test vectors for testing implementations\n- experiment with new algorithms\n\n## Acknowledgements\n\nCryptol has been under development for over a decade with many people\ncontributing to its design and implementation. Those people include (but\nare not limited to) Aaron Tomb, Adam Foltzer, Adam Wick, Alexander\nBakst, Andrew Kent, Andrei Stefanescu, Andrey Chudnov, Andy Gill,\nBenjamin Barenblat, Ben Jones, Ben Selfridge, Brett Boston, Brian\nHuffman, Brian Ledger, Chris Phifer, Daniel Wagner, David Thrane\nChristiansen, David Lazar, Dylan McNamee, Eddy Westbrook, Edward Yang,\nEric Mertens, Eric Mullen, Fergus Henderson, Iavor Diatchki, Jared\nWeakly, Jeff Lewis, Jim Teisher, Joe Hendrix, Joe Hurd, Joe Kiniry, Joel\nStanley, Joey Dodds, John Launchbury, John Matthews, Jonathan Daugherty,\nKenneth Foner, Kevin Quick, Kyle Carter, Ledah Casburn, Lee Pike, Levent\nErko\u0308k, Lisanna Dettwyler, Magnus Carlsson, Mark Shields, Mark Tullsen,\nMatt Sottile, Nathan Collins, Philip Weaver, Robert Dockins, Ryan Scott,\nSally Browning, Sam Anklesaria, Sigbj\u00f8rn Finne, Stephen Magill, Thomas\nNordin, Trevor Elliott, and Tristan Ravitch.\n\nMuch of the work on Cryptol has been funded by, and lots of design input\nwas provided by, the team at the [NSA's Laboratory for Advanced Cybersecurity\nResearch](https://www.nsa.gov/Research/NSA-Mission-Oriented-Research/LAC/),\nincluding Brad Martin, Frank Taylor, and Sean Weaver.\n\nPortions of Cryptol are also based upon work supported by the Office\nof Naval Research under Contract No. N68335-17-C-0452. Any opinions,\nfindings and conclusions or recommendations expressed in this\nmaterial are those of the author(s) and do not necessarily reflect\nthe views of the Office of Naval Research.\n"
 },
 {
  "repo": "georgemarshall/django-cryptography",
  "language": "Python",
  "readme_contents": "Django Cryptography\n===================\n\nA set of primitives for easily encrypting data in Django, wrapping\nthe Python Cryptography_ library. Also provided is a drop in\nreplacement for Django's own cryptographic primitives, using\nCryptography_ as the backend provider.\n\nDo not forget to read the documentation_.\n\n.. START HIDDEN\n.. image:: https://img.shields.io/github/workflow/status/georgemarshall/django-cryptography/CI/master\n   :target: https://github.com/georgemarshall/django-cryptography/actions/workflows/main.yml\n   :alt: GitHub Workflow Status (branch)\n.. image:: https://img.shields.io/codecov/c/github/georgemarshall/django-cryptography/master\n   :target: https://app.codecov.io/gh/georgemarshall/django-cryptography/branch/master\n   :alt: Codecov branch\n.. END HIDDEN\n\nCryptography by example\n-----------------------\n\nUsing symmetrical encryption to store sensitive data in the database.\nWrap the desired model field with ``encrypt`` to easily\nprotect its contents.\n\n.. code-block:: python\n\n   from django.db import models\n\n   from django_cryptography.fields import encrypt\n\n\n   class MyModel(models.Model):\n       name = models.CharField(max_length=50)\n       sensitive_data = encrypt(models.CharField(max_length=50))\n\nThe data will now be automatically encrypted when saved to the\ndatabase.  ``encrypt`` uses an encryption that allows for\nbi-directional data retrieval.\n\nRequirements\n------------\n\n* Python_ (3.7, 3.8, 3.9, 3.10)\n* Cryptography_ (2.0+)\n* Django_ (2.2, 3.2, 4.0)\n\nInstallation\n------------\n\n.. code-block:: console\n\n   pip install django-cryptography\n\n.. _Cryptography: https://cryptography.io/\n.. _Django: https://www.djangoproject.com/\n.. _Python: https://www.python.org/\n.. _documentation: https://django-cryptography.readthedocs.io/en/latest/\n"
 },
 {
  "repo": "google/trillian",
  "language": "Go",
  "readme_contents": "# Trillian: General Transparency\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/google/trillian)](https://goreportcard.com/report/github.com/google/trillian)\n[![codecov](https://codecov.io/gh/google/trillian/branch/master/graph/badge.svg?token=QwofUwmvAs)](https://codecov.io/gh/google/trillian)\n[![GoDoc](https://godoc.org/github.com/google/trillian?status.svg)](https://godoc.org/github.com/google/trillian)\n[![Slack Status](https://img.shields.io/badge/Slack-Chat-blue.svg)](https://gtrillian.slack.com/)\n\n - [Overview](#overview)\n - [Support](#support)\n - [Using the Code](#using-the-code)\n     - [MySQL Setup](#mysql-setup)\n     - [Integration Tests](#integration-tests)\n - [Working on the Code](#working-on-the-code)\n     - [Rebuilding Generated Code](#rebuilding-generated-code)\n     - [Updating Dependencies](#updating-dependencies)\n     - [Running Codebase Checks](#running-codebase-checks)\n - [Design](#design)\n     - [Design Overview](#design-overview)\n     - [Personalities](#personalities)\n     - [Log Mode](#log-mode)\n - [Use Cases](#use-cases)\n     - [Certificate Transparency Log](#certificate-transparency-log)\n\n\n## Overview\n\nTrillian is an implementation of the concepts described in the\n[Verifiable Data Structures](docs/papers/VerifiableDataStructures.pdf) white paper,\nwhich in turn is an extension and generalisation of the ideas which underpin\n[Certificate Transparency](https://certificate-transparency.org).\n\nTrillian implements a [Merkle tree](https://en.wikipedia.org/wiki/Merkle_tree)\nwhose contents are served from a data storage layer, to allow scalability to\nextremely large trees.  On top of this Merkle tree, Trillian provides the\nfollowing:\n\n - An append-only **Log** mode, analogous to the original\n   [Certificate Transparency](https://certificate-transparency.org) logs.  In\n   this mode, the Merkle tree is effectively filled up from the left, giving a\n   *dense* Merkle tree.\n\nNote that Trillian requires particular applications to provide their own\n[personalities](#personalities) on top of the core transparent data store\nfunctionality.\n\n[Certificate Transparency (CT)](https://tools.ietf.org/html/rfc6962)\nis the most well-known and widely deployed transparency application, and an implementation of CT as a Trillian personality is available in the\n[certificate-transparency-go repo](https://github.com/google/certificate-transparency-go/blob/master/trillian).\n\nOther examples of Trillian personalities are available in the\n[trillian-examples](https://github.com/google/trillian-examples) repo.\n\n\n## Support\n\n- Mailing list: https://groups.google.com/forum/#!forum/trillian-transparency\n- Slack: https://gtrillian.slack.com/ ([invitation](https://join.slack.com/t/gtrillian/shared_invite/enQtNDM3NTE3NjA4NDcwLTMwYzVlMDUxMDQ2MGU5MjcyZGIxMmVmZGNlNzdhMzRlOGFjMWJkNzc0MGY1Y2QyNWQyMWM4NzJlOGMxNTZkZGU))\n\n\n## Using the Code\n\n**WARNING**: The Trillian codebase is still under development, but the Log mode\nis now being used in production by several organizations. We will try to avoid\nany further incompatible code and schema changes but cannot guarantee that they\nwill never be necessary.\n\nThe current state of feature implementation is recorded in the\n[Feature implementation matrix](docs/Feature_Implementation_Matrix.md).\n\nTo build and test Trillian you need:\n\n - Go 1.17 or later (go 1.17 matches cloudbuild, and is preferred for developers\n   that will be submitting PRs to this project).\n\nTo run many of the tests (and production deployment) you need:\n\n - [MySQL](https://www.mysql.com/) or [MariaDB](https://mariadb.org/) to provide\n   the data storage layer; see the [MySQL Setup](#mysql-setup) section.\n\nNote that this repository uses Go modules to manage dependencies; Go will fetch\nand install them automatically upon build/test.\n\nTo fetch the code, dependencies, and build Trillian, run the following:\n\n```bash\ngit clone https://github.com/google/trillian.git\ncd trillian\n\ngo build ./...\n```\n\nTo build and run tests, use:\n\n```bash\ngo test ./...\n```\n\n\nThe repository also includes multi-process integration tests, described in the\n[Integration Tests](#integration-tests) section below.\n\n\n### MySQL Setup\n\nTo run Trillian's integration tests you need to have an instance of MySQL\nrunning and configured to:\n\n - listen on the standard MySQL port 3306 (so `mysql --host=127.0.0.1\n   --port=3306` connects OK)\n - not require a password for the `root` user\n\nYou can then set up the [expected tables](storage/mysql/schema/storage.sql) in a\n`test` database like so:\n\n```bash\n./scripts/resetdb.sh\nWarning: about to destroy and reset database 'test'\nAre you sure? y\n> Resetting DB...\n> Reset Complete\n```\n\n### Integration Tests\n\nTrillian includes an integration test suite to confirm basic end-to-end\nfunctionality, which can be run with:\n\n```bash\n./integration/integration_test.sh\n```\n\nThis runs a multi-process test:\n\n - A [test](integration/log_integration_test.go) that starts a Trillian server\n   in Log mode, together with a signer, logs many leaves, and checks they are\n   integrated correctly.\n \n### Deployment\n\nYou can find instructions on how to deploy Trillian in [deployment](/deployment)\nand [examples/deployment](/examples/deployment) directories.\n\n## Working on the Code\n\nDevelopers who want to make changes to the Trillian codebase need some\nadditional dependencies and tools, described in the following sections. The\n[Cloud Build configuration](cloudbuild.yaml) and the scripts it depends on are\nalso a useful reference for the required tools and scripts, as it may be more\nup-to-date than this document.\n\n### Rebuilding Generated Code\n\nSome of the Trillian Go code is autogenerated from other files:\n\n - [gRPC](http://www.grpc.io/) message structures are originally provided as\n   [protocol buffer](https://developers.google.com/protocol-buffers/) message\n   definitions. See also, https://grpc.io/docs/protoc-installation/.\n - Some unit tests use mock implementations of interfaces; these are created\n   from the real implementations by [GoMock](https://github.com/golang/mock).\n - Some enums have string-conversion methods (satisfying the `fmt.Stringer`\n   interface) created using the\n   [stringer](https://godoc.org/golang.org/x/tools/cmd/stringer) tool (`go get\n   golang.org/x/tools/cmd/stringer`).\n\nRe-generating mock or protobuffer files is only needed if you're changing\nthe original files; if you do, you'll need to install the prerequisites:\n\n  - a series of tools, using `go install` to ensure that the versions are\n    compatible and tested:\n\n    ```\n    cd $(go list -f '{{ .Dir }}' github.com/google/trillian); \\\n    go install github.com/golang/mock/mockgen; \\\n    go install google.golang.org/protobuf/proto; \\\n    go install google.golang.org/protobuf/cmd/protoc-gen-go; \\\n    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc; \\\n    go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc; \\\n    go install golang.org/x/tools/cmd/stringer\n    ```\n\nand run the following:\n\n```bash\ngo generate -x ./...  # hunts for //go:generate comments and runs them\n```\n\n### Updating Dependencies\n\nThe Trillian codebase uses go.mod to declare fixed versions of its dependencies. \nWith Go modules, updating a dependency simply involves running `go get`:\n```\nexport GO111MODULE=on\ngo get package/path       # Fetch the latest published version\ngo get package/path@X.Y.Z # Fetch a specific published version\ngo get package/path@HEAD  # Fetch the latest commit \n```\n\nTo update ALL dependencies to the latest version run `go get -u`. \nBe warned however, that this may undo any selected versions that resolve issues in other non-module repos. \n\nWhile running `go build` and `go test`, go will add any ambiguous transitive dependencies to `go.mod`\nTo clean these up run:\n```\ngo mod tidy\n```\n\n### Running Codebase Checks\n\nThe [`scripts/presubmit.sh`](scripts/presubmit.sh) script runs various tools\nand tests over the codebase.\n\n#### Install [golangci-lint](https://github.com/golangci/golangci-lint#local-installation).\n```bash\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.1\n```\n\n#### Run code generation, build, test and linters\n```bash\n./scripts/presubmit.sh\n```\n\n#### Or just run the linters alone\n```bash\ngolangci-lint run\n```\n\n\n## Design\n\n### Design Overview\n\nTrillian is primarily implemented as a\n[gRPC service](http://www.grpc.io/docs/guides/concepts.html#service-definition);\nthis service receives get/set requests over gRPC and retrieves the corresponding\nMerkle tree data from a separate storage layer (currently using MySQL), ensuring\nthat the cryptographic properties of the tree are preserved along the way.\n\nThe Trillian service is multi-tenanted \u2013 a single Trillian installation can\nsupport multiple Merkle trees in parallel, distinguished by their `TreeId` \u2013 and\neach tree operates in one of two modes:\n\n - **Log** mode: an append-only collection of items; this has two sub-modes:\n   - normal Log mode, where the Trillian service assigns sequence numbers to\n     new tree entries as they arrive\n   - 'preordered' Log mode, where the unique sequence number for entries in\n     the Merkle tree is externally specified\n\nIn either case, Trillian's key transparency property is that cryptographic\nproofs of inclusion/consistency are available for data items added to the\nservice.\n\n\n### Personalities\n\nTo build a complete transparent application, the Trillian core service needs\nto be paired with additional code, known as a *personality*, that provides\nfunctionality that is specific to the particular application.\n\nIn particular, the personality is responsible for:\n\n * **Admission Criteria** \u2013 ensuring that submissions comply with the\n   overall purpose of the application.\n * **Canonicalization** \u2013 ensuring that equivalent versions of the same\n   data get the same canonical identifier, so they can be de-duplicated by\n   the Trillian core service.\n * **External Interface** \u2013 providing an API for external users,\n   including any practical constraints (ACLs, load-balancing, DoS protection,\n   etc.)\n\nThis is\n[described in more detail in a separate document](docs/Personalities.md).\nGeneral\n[design considerations for transparent Log applications](docs/TransparentLogging.md)\nare also discussed separately.\n\n### Log Mode\n\nWhen running in Log mode, Trillian provides a gRPC API whose operations are\nsimilar to those available for Certificate Transparency logs\n(cf. [RFC 6962](https://tools.ietf.org/html/6962)). These include:\n\n - `GetLatestSignedLogRoot` returns information about the current root of the\n   Merkle tree for the log, including the tree size, hash value, timestamp and\n   signature.\n - `GetLeavesByRange` returns leaf information for particular leaves,\n   specified by their index in the log.\n - `QueueLeaf` requests inclusion of the specified item into the log.\n     - For a pre-ordered log, `AddSequencedLeaves` requests the inclusion of\n       specified items into the log at specified places in the tree.\n - `GetInclusionProof`, `GetInclusionProofByHash` and `GetConsistencyProof`\n    return inclusion and consistency proof data.\n\nIn Log mode (whether normal or pre-ordered), Trillian includes an additional\nSigner component; this component periodically processes pending items and\nadds them to the Merkle tree, creating a new signed tree head as a result.\n\n![Log components](docs/images/LogDesign.png)\n\n(Note that each of the components in this diagram can be\n[distributed](https://github.com/google/certificate-transparency-go/blob/master/trillian/docs/ManualDeployment.md#distribution),\nfor scalability and resilience.)\n\n\nUse Cases\n---------\n\n### Certificate Transparency Log\n\nThe most obvious application for Trillian in Log mode is to provide a\nCertificate Transparency (RFC 6962) Log.  To do this, the CT Log personality\nneeds to include all of the certificate-specific processing \u2013 in particular,\nchecking that an item that has been suggested for inclusion is indeed a valid\ncertificate that chains to an accepted root.\n\n"
 },
 {
  "repo": "asmcrypto/asmcrypto.js",
  "language": "JavaScript",
  "readme_contents": "asmCrypto [![Build Status](https://travis-ci.org/asmcrypto/asmcrypto.js.svg?branch=master)](https://travis-ci.org/asmcrypto/asmcrypto.js) [![Join the chat at https://gitter.im/asmcrypto/asmcrypto.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/asmcrypto/asmcrypto.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n=========\n\nJavaScript implementation of popular cryptographic utilities with performance in mind.\n\nBuild & Test\n------------\n\nThen download and build the stuff:\n\n    git clone https://github.com/asmcrypto/asmcrypto.js.git\n    cd asmcrypto.js/\n    npm install\n\nRunning tests is always a good idea:\n\n    npm test\n\nCongratulations! Now you have your `asmcrypto.js` ready to use \u263a\n\nSupport\n-----------\n\n* NodeJS 10\n* IE11\n* last two Chrome versions\n* last two Firefox versions and the latest Firefox ESR\n* last two Edge versions\n* last two Safari versions\n\nAsmCrypto 2.0\n-----------\n\n* Moved to TypeScript\n* I have no confident knowledge on random generation, so I don't feel right maintaining it. As of 2.0 all custom random generation and seeding code is removed, the underlying browsers and environments have to provide secure random.  \n"
 },
 {
  "repo": "microsoft/PQCrypto-VPN",
  "language": "Perl",
  "readme_contents": "# Welcome to the PQCrypto-VPN project!\n\nPlease start with our [project page at Microsoft Research](https://www.microsoft.com/en-us/research/project/post-quantum-crypto-vpn/) for an overview of this project.\n\nThis project takes a fork of the OpenVPN software and combines it with post-quantum cryptography. In this way, we can test these algorithms with VPNs, evaluating functionality and performance of the quantum resistant cryptography. Because this project is experimental, it should not be used to protect sensitive data or communications at this time. Further cryptanalysis and research must first be done over the next few years to determine which algorithms are truly post-quantum safe. \n\nThis work is sponsored by [Microsoft Research Security and Cryptography](https://www.microsoft.com/en-us/research/group/security-and-cryptography/), as part of our [post-quantum cryptography project](https://www.microsoft.com/en-us/research/project/post-quantum-cryptography/). Along with academic and industry collaborators, we have designed the following algorithms and contributed them to the [Open Quantum Safe](https://openquantumsafe.org/) project and are usable in this fork of OpenVPN:\n\n* [Frodo](https://github.com/Microsoft/PQCrypto-LWEKE): a key exchange protocol based on the learning with errors problem\n* [SIDH](https://github.com/Microsoft/PQCrypto-SIDH): a key exchange protocol based on Supersingular Isogeny Diffie-Hellman\n* [Picnic](https://github.com/Microsoft/Picnic): a signature algorithm using symmetric-key primitives and non-interactive zero-knowledge proofs\n* [qTESLA](https://github.com/qtesla/qTesla): a signature algorithm based on the ring learning with errors problem\n\nWe will also enable other ciphersuites as much as we are able to make them work. Our OpenVPN fork depends on the [Open Quantum Safe project fork of OpenSSL](https://github.com/open-quantum-safe/openssl), so contributors looking to add support for a new algorithm should ensure it is supported by Open Quantum Safe. \n\nWe also provide software and instructions for building a post-quantum secure VPN appliance with a Raspberry Pi 3.  The device acts as a WiFi access point, and tunnels all of its traffic over the post-quantum VPN.  This has two main advantages when compared to using a VPN client on the device.  First, installing VPN client software is not required.  Second, using VPN software can be error prone, and not all traffic will be protected if there are configuration errors.  With a hardware device, all devices connecting to it get post-quantum security transparently.  See the `pqap` directory, and the README file there for more information.\n\n---\n\n## Releases\n\nPlease see [our releases page](https://github.com/Microsoft/PQCrypto-VPN/releases) for pre-built binaries for both Windows and Ubuntu Linux.\n\n---\n\n## Tell us what you think\n\nFor bug reports, feature requests, and other issues with the code itself, please raise them in [our issues tracker](https://github.com/Microsoft/PQCrypto-VPN/issues). For pull requests, please see the next section on Contributing. For other feedback, questions, comments, or anything else you'd like to tell us, you can talk to us at [msrsc@microsoft.com](mailto:msrsc@microsoft.com).\n\n---\n\n## Prerequisites\n\n* To run the binaries: either Ubuntu Linux 18.04 or newer, or Windows 10. Only 64-bit operating systems are supported.\n* To build the source: Ubuntu Linux 18.04. Newer versions of Ubuntu are likely to also be fine, but we have not tested them.\n\nOpenVPN for Windows does not build natively on Windows; it is only cross-compiled on Linux. Therefore all building from source must be done on Linux.\n\n---\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA, so if you have\nalready signed a CLA with Microsoft for another project, that covers contributions to us as well.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n---\n\n## Cloning\n\nOur build relies on Git submodules for the sources to OQS-OpenSSL and OpenVPN. When cloning, be sure to use the `--recurse-submodules` option to `git clone`. If you forget, you should be able to run `git submodule init` followed by `git submodule update` to retrieve the submodules after a clone. For your convenience, here is a full clone command:\n\n\tgit clone --recurse-submodules https://github.com/microsoft/PQCrypto-VPN.git\n\n## Build Process Overview\n\nFollowing OpenVPN's build process, binaries for both Linux and Windows are produced by a Linux-based build system that cross-compiles for Windows. Our build process first builds liboqs and the Open Quantum Safe fork of OpenSSL, and then our version of OpenVPN which uses them.\n\nThere is one Python script for running the build:\n\n* _build.py_: This does a full build of everything on Linux: both Linux and Windows versions of liboqs, OpenSSL, OpenVPN, and on Windows only, OpenVPN-GUI. The outputs of the build process are a gzipped tarball that can be unpacked onto an Ubuntu Linux system, and a Windows installer executable for installing on 64-bit Windows.\n\nSee the comments at the top of `build.py` for a list of prerequisite packages that must be installed before building. There is also a Dockerfile in `openvpn/build/docker` to build the installers in a container.\n\nPrevious versions of PQCrypto-VPN required OpenSSL ot be built on Windows, but now cross-compilation on Linux is supported there as well. As a result, our entire build process runs only on Linux, and we no longer require doing part of the build process on Windows nor are dependent on the Visual C++ Runtime Redistributable DLLs.\n\n---\n\n## Subprojects\n\nTo enable our build of OpenVPN, we have forks of three OpenVPN GitHub repos that we have modified to enable this functionality. Pull requests are welcomed in these subprojects as well. The same requirements to sign a CLA apply to these repos.\n\nPlease open all issues here on the PQCrypto-VPN project.\n\n* https://github.com/microsoft/openvpn\n* https://github.com/microsoft/openvpn-build\n* https://github.com/microsoft/openvpn-gui\n\nOpen Quantum Safe's implementations of the algorithms are in their liboqs library, which is consumed by the OpenSSL fork below.\n\n* https://github.com/open-quantum-safe/liboqs\n\nWe also use the OpenSSL fork maintained by the Open Quantum Safe Project for the implementations of the algorithms themselves. As we work closely with OQS, we do not maintain our own fork of their code. They also welcome opening issues and pull requests directly at their project.\n\n* https://github.com/open-quantum-safe/openssl\n\n---\n\n## Setup instructions\n\nThe setup instructions are the same whether you download our pre-made binaries, or if you build them yourself.\n\n### Windows client\n\nAfter running the installer executable, you will need to create a configuration file. This can be located anywhere, though OpenVPN-GUI uses `%USERPROFILE%\\OpenVPN\\config`. Samples have beeen provided in the `openvpn\\config` directory:\n\n* _client-win.ovpn_: Client authenticating with a certificate\n* _client-passdb.ovpn_: Client authenticating with a username/password. This sample configuration file is based on Linux, so you will need to adjust the pathnames for a Windows host.\n\nThe tunnel can then be established by running OpenVPN-GUI, right-clicking on its system tray icon, selecting the configuration file, and choosing Connect. OpenVPN can be run from an elevated command prompt, just like on Linux; see the Linux instructions below if you prefer this method.\n\n### Linux client or server\n\nUnpack `pq-openvpn-linux-staged.tgz` from the root directory as root. This will drop the installation in `/usr/local/openvpn` as well as an automatic startup script suitable for Ubuntu hosts running `systemd`.\n\nOptional: If you are configuring a server and want OpenVPN to start automatically at boot, run the `initialsetup.sh` script installed in the `/usr/local/openvpn/sbin` directory. We recommend you only do this when you have thoroughly tested your configuration.\n\nYou then need to create a configuration file. If running a server, the automatic start scripts expect this to be called `server.ovpn` and located in `/usr/local/openvpn/etc`. If you are running a client or a server from the command line, it can be called whatever you want as you will provide the configuration filename when starting OpenVPN. The following samples have been provided in the `openvpn/config` directory:\n\n* _client.ovpn_: Client authenticating with a certificate\n* _client-passdb.ovpn_: Client authenticating with a username/password\n* _server.ovpn_: Server only accepting client certificate authentication\n* _server-passdb.ovpn_: Server only accepting username/password authentication\n\nThe `ecdh-curve` configuration directive is used to select the key exchange algorithm and must be present to guarantee a post-quantum algorithm is selected. You can see the list of valid choices from the list of supported algorithms at OQS's OpenSSL fork here: https://github.com/open-quantum-safe/openssl#supported-algorithms\n\nIf no `ecdh-curve` directive is present, `p256_sikep434` is chosen by default. If present, the `ecdh-curve` directive must agree on both client and server, or a session will fail to negotiate. It is possible to pick a non-post quantum algorithm from the list of all algorithms supported by OpenSSL; make sure only to select choices from the list linked above to ensure use of a post-quantum key exchange.\n\nThe authentication algorithm depends on the types of certificates provided as part of the configuration. You can use classical signature algorithms (like RSA or ECDSA), but these are not post-quantum. See the instructions in `openvpn/config/picnic-pki.md` for creating certificates using Picnic-L1FS as the signature algorithm as one post-quantum option. See the above list of supported algorithms for post-quantum signature algorithms.\n\nOpenVPN is then started by running from a root command prompt:\n\n``\n    /usr/local/openvpn/sbin/openvpn --config <config file name>\n``\n\nThis will keep OpenVPN running in the foreground and keep control of your terminal. You can safely terminate OpenVPN by typing Control-C; OpenVPN will clean up its network setup before exiting. You can add the `--daemon` to the command line or `daemon` to the configuration file to make it go into the background, and you can then use `kill` to send its process a signal to terminate when desired.\n\n### Setting up username/password authentication on a Linux server \n\nThis setup uses the host's built-in username and password database for authentication as an expedient method of authentication. Any valid user presenting a correct password will be able to authenticate and connect.\n\n Suggested procedure for creating a user that can't log into the host but can authenticate to OpenVPN with these settings:\n\n``\nuseradd -c \"<User Full Name Here>\" -d /usr/local/openvpn -s /bin/false <username>  \n``\n\n``\npasswd <username>\n``\n\n`<username>` and `<User Full Name Here>` are user-specific inputs. The above example assumes `${INSTALL_ROOT}` is  `/usr/local/openvpn`; modify as needed if the path is different. It is critical that whatever follows the `-s` parameter does NOT appear in the `/etc/shells` file on the host; `/bin/false` should never be in there.\n\n For additional security, in `/etc/ssh/sshd_config` should be the line `PasswordAuthentication no` to prevent any password authentication. This appears to be the default for Azure VMs but not for regular Linux hosts. This will, of course, require using public key authentication for administrators to log into the host directly. If password authentication to the host is required, create a group for OpenVPN users and then instruct the SSH server to deny logins to that group as follows as root:\n\n1. `groupadd openvpn`\n2. Add a `-g openvpn` argument to the `useradd` command above\n3. Add a `DenyGroups openvpn` directive to `/etc/ssh/sshd_config`\n\nAlready-created users can be retroactively added to this group with `usermod -a -G openvpn <username>`.\n\nAlthough having `/bin/false` as the shell should prevent users from doing anything, denying the group will make the SSH  return an authentication failure; not having this will cause the authentication to succeed, but when the host executes `/bin/false` as the shell, it will return immediately and the connection should then close. But since SSH allows authenticated users to do a number of things like open network tunnels without starting a shell, SSH access should be explicitly denied to prevent any functionality being invoked by a successful authentication.\n\n### Setting up certificate authentication\n\nThe process of setting up RSA-signed certificates for client and server authentication is the same for regular OpenVPN, and so we refer you to their [excellent instructions](https://openvpn.net/index.php/open-source/documentation/howto.html#pki) for setting up a Certificate Authority (CA) and issuing certificates. Even if you use username/password authentication for clients, servers must still have a certificate, and the certificate of the CA must be provided to clients.\n\nThe analogous process for Picnic-signed certificates is described in in `openvpn/config/picnic-pki.md`.\nThis uses the OpenSSL command line tool from the Open Quantum Safe fork of OpenSSL. \n\n---\n\n# Known Issues\n\nOnly the server currently lists the key exchange algorithm used in its log output as \"group_id\", and it is only listed by the OpenSSL numerical identifier, which we realize is not very user-friendly. After the group_id value will be a message that says either `(post-quantum key exchange)` or `(NOT post-quantum key exchange)` to address this. OpenSSL does not expose the necessary API surface to obtain this information on the client.\n\nAlthough the p256_sikep434 hybrid key exchange is chosen by default, it is possible to choose a non-post quantum key exchange with the `ecdh-curve` configuration directive. We have chosen this default and provided ample documentation to ensure as much as possible that a non-post quantum key exchange is not selected accidentally.\n\nThe Open Quantum Safe fork of OpenSSL only provides post-quantum algorithms for TLS 1.3 connections. Use of TLS 1.2 or earlier has no post-quantum algorithms. Therefore, it is vital the `tls-version-min 1.3` directive is always present in configuration files to ensure clients and servers never fall back to older versions of TLS.\n"
 },
 {
  "repo": "RustCrypto/traits",
  "language": "Rust",
  "readme_contents": "# RustCrypto: Traits\n\n[![Project Chat][chat-image]][chat-link] ![Apache2/MIT licensed][license-image] [![dependency status][deps-image]][deps-link]\n\nCollection of traits which describe functionality of cryptographic primitives.\n\n## Crates\n\n| Name                | Algorithm | Crates.io | Docs  | MSRV |\n|---------------------|-----------|:---------:|:-----:|:----:|\n| [`aead`]            | [Authenticated encryption]    | [![crates.io](https://img.shields.io/crates/v/aead.svg)](https://crates.io/crates/aead) | [![Documentation](https://docs.rs/aead/badge.svg)](https://docs.rs/aead) | ![MSRV 1.41][msrv-1.41] |\n| [`async\u2011signature`] | [Digital signature]           | [![crates.io](https://img.shields.io/crates/v/async-signature.svg)](https://crates.io/crates/async-signature) | [![Documentation](https://docs.rs/async-signature/badge.svg)](https://docs.rs/async-signature) | ![MSRV 1.41][msrv-1.41] |\n| [`cipher`]          | [Block] and [stream cipher]   | [![crates.io](https://img.shields.io/crates/v/cipher.svg)](https://crates.io/crates/cipher) | [![Documentation](https://docs.rs/cipher/badge.svg)](https://docs.rs/cipher) | ![MSRV 1.56][msrv-1.56] |\n| [`crypto\u2011common`]      | Common cryptographic traits | [![crates.io](https://img.shields.io/crates/v/crypto-common.svg)](https://crates.io/crates/crypto-common) | [![Documentation](https://docs.rs/crypto-common/badge.svg)](https://docs.rs/crypto-common) | ![MSRV 1.41][msrv-1.41] |\n| [`digest`]          | [Cryptographic hash function] | [![crates.io](https://img.shields.io/crates/v/digest.svg)](https://crates.io/crates/digest) | [![Documentation](https://docs.rs/digest/badge.svg)](https://docs.rs/digest) | ![MSRV 1.41][msrv-1.41] |\n| [`elliptic\u2011curve`]  | [Elliptic curve cryptography] | [![crates.io](https://img.shields.io/crates/v/elliptic-curve.svg)](https://crates.io/crates/elliptic-curve) | [![Documentation](https://docs.rs/elliptic-curve/badge.svg)](https://docs.rs/elliptic-curve) | ![MSRV 1.56][msrv-1.56] |\n| [`kem`]             | [Key encapsulation mechanism] | [![crates.io](https://img.shields.io/crates/v/kem.svg)](https://crates.io/crates/kem) | [![Documentation](https://docs.rs/kem/badge.svg)](https://docs.rs/kem) | ![MSRV 1.56][msrv-1.56] |\n| [`password-hash`]   | [Password hashing]            | [![crates.io](https://img.shields.io/crates/v/password-hash.svg)](https://crates.io/crates/password-hash) | [![Documentation](https://docs.rs/password-hash/badge.svg)](https://docs.rs/password-hash) | ![MSRV 1.57][msrv-1.57] |\n| [`signature`]       | [Digital signature]           | [![crates.io](https://img.shields.io/crates/v/signature.svg)](https://crates.io/crates/signature) | [![Documentation](https://docs.rs/signature/badge.svg)](https://docs.rs/signature) | ![MSRV 1.41][msrv-1.41] |\n| [`universal\u2011hash`]  | [Universal hash function]     | [![crates.io](https://img.shields.io/crates/v/universal-hash.svg)](https://crates.io/crates/universal-hash) | [![Documentation](https://docs.rs/universal-hash/badge.svg)](https://docs.rs/universal-hash) | ![MSRV 1.56][msrv-1.56] |\n\n### Additional Crates\n\n| Crate name | Description             | Crates.io | Docs  | MSRV |\n|------------|-------------------------|:---------:|:-----:|:----:|\n| [`crypto`] | Facade for trait crates | [![crates.io](https://img.shields.io/crates/v/crypto.svg)](https://crates.io/crates/crypto) | [![Documentation](https://docs.rs/crypto/badge.svg)](https://docs.rs/crypto) | ![MSRV 1.57][msrv-1.57] |\n\n### Minimum Supported Rust Version (MSRV) Policy\n\nMSRV bumps are considered breaking changes and will be performed only with minor version bump.\n\n## License\n\nAll crates licensed under either of\n\n * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n * [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260050-traits\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[deps-image]: https://deps.rs/repo/github/RustCrypto/traits/status.svg\n[deps-link]: https://deps.rs/repo/github/RustCrypto/traits\n[msrv-1.41]: https://img.shields.io/badge/rustc-1.41.0+-blue.svg\n[msrv-1.56]: https://img.shields.io/badge/rustc-1.56.0+-blue.svg\n[msrv-1.57]: https://img.shields.io/badge/rustc-1.57.0+-blue.svg\n\n[//]: # (crates)\n\n[`aead`]: ./aead\n[`async\u2011signature`]: ./signature/async\n[`cipher`]: ./cipher\n[`crypto\u2011common`]: ./crypto-common\n[`crypto`]: ./crypto\n[`digest`]: ./digest\n[`elliptic\u2011curve`]: ./elliptic-curve\n[`kem`]: ./kem\n[`password-hash`]: ./password-hash\n[`signature`]: ./signature\n[`universal\u2011hash`]: ./universal-hash\n\n[//]: # (algorithms)\n\n[Authenticated encryption]: https://en.wikipedia.org/wiki/Authenticated_encryption\n[Block]: https://en.wikipedia.org/wiki/Block_cipher\n[Message authentication code]: https://en.wikipedia.org/wiki/Message_authentication_code\n[Cryptographic hash function]: https://en.wikipedia.org/wiki/Cryptographic_hash_function\n[Digital signature]: https://en.wikipedia.org/wiki/Digital_signature\n[Elliptic curve cryptography]: https://en.wikipedia.org/wiki/Elliptic-curve_cryptography\n[Key encapsulation mechanism]: https://en.wikipedia.org/wiki/Key_encapsulation\n[Password hashing]: https://en.wikipedia.org/wiki/Cryptographic_hash_function#Password_verification\n[Stream cipher]: https://en.wikipedia.org/wiki/Stream_cipher\n[Universal hash function]: https://en.wikipedia.org/wiki/Universal_hashing\n"
 },
 {
  "repo": "ethereum/js-ethereum-cryptography",
  "language": "TypeScript",
  "readme_contents": "# ethereum-cryptography\n\n[![npm version][1]][2] [![Travis CI][3]][4] [![license][5]][6] [![Types][7]][8]\n\nAll pure-js cryptographic primitives normally used when\ndeveloping Javascript / TypeScript applications and tools for Ethereum.\n\n**January 2022 update:** We've released v1.0 of the package, a complete rewrite:\n\n- **6x smaller:** ~5,000 lines of code instead of ~24,000 (with all deps); 650KB instead of 10.2MB\n- 5 dependencies by 1 author instead of 38 by 5 authors\n- [Audited](#security) by an independent security firm\n- Check out the article about it: [A safer, smaller, and faster Ethereum cryptography stack](https://medium.com/nomic-labs-blog/a-safer-smaller-and-faster-ethereum-cryptography-stack-5eeb47f62d79)\n- Take a glance at the [Upgrading](#upgrading) section for breaking changes: there are almost none\n\nThe cryptographic primitives included are:\n\n* [Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b](#hashes-sha256-keccak-256-ripemd160-blake2b)\n* [KDFs: PBKDF2, Scrypt](#kdfs-pbkdf2-scrypt)\n* [CSPRNG (Cryptographically strong pseudorandom number generator)](#csprng-cryptographically-strong-pseudorandom-number-generator)\n* [secp256k1 curve](#secp256k1-curve)\n* [BIP32 HD Keygen](#bip32-hd-keygen)\n* [BIP39 Mnemonic phrases](#bip39-mnemonic-seed-phrase)\n* [AES Encryption](#aes-encryption)\n\n## Usage\n\nUse NPM / Yarn in node.js / browser:\n\n```bash\n# NPM\nnpm install ethereum-cryptography\n\n# Yarn\nyarn add ethereum-cryptography\n```\n\nSee [browser usage](#browser-usage) for information on using the package with major Javascript bundlers. It is\ntested with **Webpack, Rollup, Parcel and Browserify**.\n\nThis package has no single entry-point, but submodule for each cryptographic\nprimitive. Read each primitive's section of this document to learn how to use\nthem.\n\nThe reason for this is that importing everything from a single file will lead to\nhuge bundles when using this package for the web. This could be avoided through\ntree-shaking, but the possibility of it not working properly on one of\n[the supported bundlers](#browser-usage) is too high.\n\n```js\n// Hashes\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { keccak256 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\n// KDFs\nconst { pbkdf2Sync } = require(\"ethereum-cryptography/pbkdf2\");\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\n\n// Random\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\n\n// AES encryption\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\n\n// secp256k1 elliptic curve operations\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1\");\n\n// BIP32 HD Keygen, BIP39 Mnemonic Phrases\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\n\n// utilities\nconst { hexToBytes, toHex, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n```\n\n## Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b\n```typescript\nfunction sha256(msg: Uint8Array): Uint8Array;\nfunction sha512(msg: Uint8Array): Uint8Array;\nfunction keccak256(msg: Uint8Array): Uint8Array;\nfunction ripemd160(msg: Uint8Array): Uint8Array;\nfunction blake2b(msg: Uint8Array, outputLength = 64): Uint8Array;\n```\n\nExposes following cryptographic hash functions:\n\n- SHA2 (SHA256, SHA512)\n- keccak-256 variant of SHA3 (also `keccak224`, `keccak384`,\nand `keccak512`)\n- RIPEMD160\n- BLAKE2b\n\n```js\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { sha512 } = require(\"ethereum-cryptography/sha512\");\nconst { keccak256, keccak224, keccak384, keccak512 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\nsha256(Uint8Array.from([1, 2, 3]))\n\n// Can be used with strings\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nsha256(utf8ToBytes(\"abc\"))\n\n// If you need hex\nconst { bytesToHex as toHex } = require(\"ethereum-cryptography/utils\");\ntoHex(sha256(utf8ToBytes(\"abc\")))\n```\n\n## KDFs: PBKDF2, Scrypt\n\n```ts\nfunction pbkdf2(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Promise<Uint8Array>;\nfunction pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Uint8Array;\nfunction scrypt(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Promise<Uint8Array>;\nfunction scryptSync(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Uint8Array;\n```\n\nThe `pbkdf2` submodule has two functions implementing the PBKDF2 key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI. The KDF supports `sha256` and `sha512` digests.\n\nThe `scrypt` submodule has two functions implementing the Scrypt key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using these submodules.\n\n```js\nconst { pbkdf2 } = require(\"ethereum-cryptography/pbkdf2\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n// Pass Uint8Array, or convert strings to Uint8Array\nconsole.log(await pbkdf2(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 131072, 32, \"sha256\"));\n```\n\n```js\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nconsole.log(await scrypt(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 262144, 8, 1, 32));\n```\n\n## CSPRNG (Cryptographically strong pseudorandom number generator)\n\n```ts\nfunction getRandomBytes(bytes: number): Promise<Uint8Array>;\nfunction getRandomBytesSync(bytes: number): Uint8Array;\n```\n\nThe `random` submodule has functions to generate cryptographically strong\npseudo-random data in synchronous and asynchronous ways.\n\nBacked by [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) in browser and by [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback) in node.js. If backends are somehow not available, the module would throw an error and won't work, as keeping them working would be insecure.\n\n```js\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\nconsole.log(getRandomBytesSync(32));\n```\n\n## secp256k1 curve\n\n```ts\nfunction getPublicKey(privateKey: Uint8Array, isCompressed?: false): Uint8Array;\nfunction getSharedSecret(privateKeyA: Uint8Array, publicKeyB: Uint8Array): Uint8Array;\nfunction sign(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Promise<Uint8Array>;\nfunction signSync(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Uint8Array;\nfunction verify(signature: Uint8Array, msgHash: Uint8Array, publicKey: Uint8Array): boolean\nfunction recoverPublicKey(msgHash: Uint8Array, signature: Uint8Array, recovery: number): Uint8Array | undefined;\nfunction utils.randomPrivateKey(): Uint8Array;\n```\n\nThe `secp256k1` submodule provides a library for elliptic curve operations on\nthe curve secp256k1. For detailed documentation, follow [README of `noble-secp256k1`](https://github.com/paulmillr/noble-secp256k1), which the module uses as a backend.\n\nsecp256k1 private keys need to be cryptographically secure random numbers with\ncertain caracteristics. If this is not the case, the security of secp256k1 is\ncompromised. We strongly recommend using `utils.randomPrivateKey()` to generate them.\n\n```js\nconst secp = require(\"ethereum-cryptography/secp256k1\");\n(async () => {\n  // You pass either a hex string, or Uint8Array\n  const privateKey = \"6b911fd37cdf5c81d4c0adb1ab7fa822ed253ab0ad9aa18d77257c88b29b718e\";\n  const messageHash = \"a33321f98e4ff1c283c76998f14f57447545d339b3db534c6d886decb4209f28\";\n  const publicKey = secp.getPublicKey(privateKey);\n  const signature = await secp.sign(messageHash, privateKey);\n  const isSigned = secp.verify(signature, messageHash, publicKey);\n})();\n```\n\nNote: if you've been using ethereum-cryptography v0.1, it had different API. We're providing a compatibility layer for users who want to upgrade without hassle. Check out [the legacy documentation](#legacy-secp256k1-compatibility-layer).\n\n## BIP32 HD Keygen\n\nHierarchical deterministic (HD) wallets that conform to BIP32 standard.\nAlso available as standalone package [scure-bip32](https://github.com/paulmillr/scure-bip32).\n\nThis module exports a single class `HDKey`, which should be used like this:\n\n```ts\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst hdkey1 = HDKey.fromMasterSeed(seed);\nconst hdkey2 = HDKey.fromExtendedKey(base58key);\nconst hdkey3 = HDKey.fromJSON({ xpriv: string });\n\n// props\n[hdkey1.depth, hdkey1.index, hdkey1.chainCode];\nconsole.log(hdkey2.privateKey, hdkey2.publicKey);\nconsole.log(hdkey3.derive(\"m/0/2147483647'/1\"));\nconst sig = hdkey3.sign(hash);\nhdkey3.verify(hash, sig);\n```\n\nNote: `chainCode` property is essentially a private part\nof a secret \"master\" key, it should be guarded from unauthorized access.\n\nThe full API is:\n\n```ts\nclass HDKey {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions): HDKey;\n  public static fromExtendedKey(base58key: string, versions: Versions): HDKey;\n  public static fromJSON(json: { xpriv: string }): HDKey;\n\n  readonly versions: Versions;\n  readonly depth: number = 0;\n  readonly index: number = 0;\n  readonly chainCode: Uint8Array | null = null;\n  readonly parentFingerprint: number = 0;\n\n  get fingerprint(): number;\n  get identifier(): Uint8Array | undefined;\n  get pubKeyHash(): Uint8Array | undefined;\n  get privateKey(): Uint8Array | null;\n  get publicKey(): Uint8Array | null;\n  get privateExtendedKey(): string;\n  get publicExtendedKey(): string;\n\n  derive(path: string): HDKey;\n  deriveChild(index: number): HDKey;\n  sign(hash: Uint8Array): Uint8Array;\n  verify(hash: Uint8Array, signature: Uint8Array): boolean;\n  wipePrivateData(): this;\n}\n\ninterface Versions {\n  private: number;\n  public: number;\n}\n```\n\nThe `hdkey` submodule provides a library for keys derivation according to\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\nIt has almost the exact same API than the version `1.x` of\n[`hdkey` from cryptocoinjs](https://github.com/cryptocoinjs/hdkey),\nbut it's backed by this package's primitives, and has built-in TypeScript types.\nIts only difference is that it has to be be used with a named import.\nThe implementation is [loosely based on hdkey, which has MIT License](#LICENSE).\n\n## BIP39 Mnemonic Seed Phrase\n\n```ts\nfunction generateMnemonic(wordlist: string[], strength: number = 128): string;\nfunction mnemonicToEntropy(mnemonic: string, wordlist: string[]): Uint8Array;\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist: string[]): string;\nfunction validateMnemonic(mnemonic: string, wordlist: string[]): boolean;\nasync function mnemonicToSeed(mnemonic: string, passphrase: string = \"\"): Promise<Uint8Array>;\nfunction mnemonicToSeedSync(mnemonic: string, passphrase: string = \"\"): Uint8Array;\n```\n\nThe `bip39` submodule provides functions to generate, validate and use seed\nrecovery phrases according to [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n\nAlso available as standalone package [scure-bip39](https://github.com/paulmillr/scure-bip39).\n\n```js\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\nconsole.log(generateMnemonic(wordlist));\n```\n\nThis submodule also contains the word lists defined by BIP39 for Czech, English,\nFrench, Italian, Japanese, Korean, Simplified and Traditional Chinese, and\nSpanish. These are not imported by default, as that would increase bundle sizes\ntoo much. Instead, you should import and use them explicitly.\n\nThe word lists are exported as a `wordlist` variable in each of these submodules:\n\n* `ethereum-cryptography/bip39/wordlists/czech.js`\n* `ethereum-cryptography/bip39/wordlists/english.js`\n* `ethereum-cryptography/bip39/wordlists/french.js`\n* `ethereum-cryptography/bip39/wordlists/italian.js`\n* `ethereum-cryptography/bip39/wordlists/japanese.js`\n* `ethereum-cryptography/bip39/wordlists/korean.js`\n* `ethereum-cryptography/bip39/wordlists/simplified-chinese.js`\n* `ethereum-cryptography/bip39/wordlists/spanish.js`\n* `ethereum-cryptography/bip39/wordlists/traditional-chinese.js`\n\n## AES Encryption\n\n```ts\nfunction encrypt(msg: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\nfunction decrypt(cypherText: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\n```\n\nThe `aes` submodule contains encryption and decryption functions implementing\nthe [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nalgorithm.\n\n### Encrypting with passwords\n\nAES is not supposed to be used directly with a password. Doing that will\ncompromise your users' security.\n\nThe `key` parameters in this submodule are meant to be strong cryptographic\nkeys. If you want to obtain such a key from a password, please use a\n[key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function)\nlike [pbkdf2](#pbkdf2-submodule) or [scrypt](#scrypt-submodule).\n\n### Operation modes\n\nThis submodule works with different [block cipher modes of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation). If you are using this module in a new\napplication, we recommend using the default.\n\nWhile this module may work with any mode supported by OpenSSL, we only test it\nwith `aes-128-ctr`, `aes-128-cbc`, and `aes-256-cbc`. If you use another module\na warning will be printed in the console.\n\nWe only recommend using `aes-128-cbc` and `aes-256-cbc` to decrypt already\nencrypted data.\n\n### Padding plaintext messages\n\nSome operation modes require the plaintext message to be a multiple of `16`. If\nthat isn't the case, your message has to be padded.\n\nBy default, this module automatically pads your messages according to [PKCS#7](https://tools.ietf.org/html/rfc2315).\nNote that this padding scheme always adds at least 1 byte of padding. If you\nare unsure what anything of this means, we **strongly** recommend you to use\nthe defaults.\n\nIf you need to encrypt without padding or want to use another padding scheme,\nyou can disable PKCS#7 padding by passing `false` as the last argument and\nhandling padding yourself. Note that if you do this and your operation mode\nrequires padding, `encrypt` will throw if your plaintext message isn't a\nmultiple of `16`.\n\nThis option is only present to enable the decryption of already encrypted data.\nTo encrypt new data, we recommend using the default.\n\n### How to use the IV parameter\n\nThe `iv` parameter of the `encrypt` function must be unique, or the security\nof the encryption algorithm can be compromissed.\n\nYou can generate a new `iv` using the `random` module.\n\nNote that to decrypt a value, you have to provide the same `iv` used to encrypt\nit.\n\n### How to handle errors with this module\n\nSensitive information can be leaked via error messages when using this module.\nTo avoid this, you should make sure that the errors you return don't\ncontain the exact reason for the error. Instead, errors must report general\nencryption/decryption failures.\n\nNote that implementing this can mean catching all errors that can be thrown\nwhen calling on of this module's functions, and just throwing a new generic\nexception.\n\n### Example usage\n\n```js\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\nconst { hexToBytes, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n\nconsole.log(\n  encrypt(\n    utf8ToBytes(\"message\"),\n    hexToBytes(\"2b7e151628aed2a6abf7158809cf4f3c\"),\n    hexToBytes(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\n  )\n);\n```\n\n## Browser usage\n\n### Rollup setup\n\nUsing this library with Rollup requires the following plugins:\n\n* [`@rollup/plugin-commonjs`](https://www.npmjs.com/package/@rollup/plugin-commonjs)\n* [`@rollup/plugin-node-resolve`](https://www.npmjs.com/package/@rollup/plugin-node-resolve)\n\nThese can be used by setting your `plugins` array like this:\n\n```js\n  plugins: [\n    commonjs(),\n    resolve({\n      browser: true,\n      preferBuiltins: false,\n    }),\n  ]\n```\n\n## Legacy secp256k1 compatibility layer\n\n**Note:** consider using `secp256k1` instead;\nThis module is only for users who upgraded\nfrom ethereum-cryptography v0.1. It could be removed in the future,\nbut we're keeping it around for now, for backwards-compatibility.\n\nThe API of `secp256k1-compat` is the same as [secp256k1-node](https://github.com/cryptocoinjs/secp256k1-node):\n\n```js\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1-compat\");\nconst msgHash = Uint8Array.from(\n  \"82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28\",\n  \"hex\"\n);\nconst privateKey = createPrivateKeySync();\nconsole.log(Uint8Array.from(ecdsaSign(msgHash, privateKey).signature));\n```\n\n## Missing cryptographic primitives\n\nThis package intentionally excludes the the cryptographic primitives necessary\nto implement the following EIPs:\n\n* [EIP 196: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-196)\n* [EIP 197: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-197)\n* [EIP 198: Big integer modular exponentiation](https://eips.ethereum.org/EIPS/eip-198)\n* [EIP 152: Add Blake2 compression function `F` precompile](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)\n\nFeel free to open an issue if you want this decision to be reconsidered, or if\nyou found another primitive that is missing.\n\n## Upgrading\n\nVersion 1.0 changes from 0.1:\n\n**Same functionality**, all old APIs remain the same except for the breaking changes:\n\n1. We return `Uint8Array` from all methods that worked with `Buffer` before.\n`Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\nbrowsers and node.js.\n2. We target runtimes with [bigint](https://caniuse.com/bigint) support,\nwhich is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support older runtimes, use `ethereum-cryptography@0.1`\n3. If you've used `secp256k1`, [rename it to `secp256k1-compat`](#legacy-secp256k1-compatibility-layer)\n\n```\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\n\n// Old usage\nconst hasho = sha256(Buffer.from(\"string\", \"utf8\")).toString(\"hex\");\n\n// New usage\nconst { toHex } = require(\"ethereum-cryptography/utils\");\nconst hashn = toHex(sha256(\"string\"));\n\n// If you have `Buffer` module and want to preserve it:\nconst hashb = Buffer.from(sha256(\"string\"));\nconst hashbo = hashb.toString(\"hex\");\n```\n\n## Security\n\nAudited by Cure53 on Jan 5, 2022. Check out the audit [PDF](./audit/2022-01-05-cure53-audit-nbl2.pdf) & [URL](https://cure53.de/pentest-report_hashing-libs.pdf).\n\n## License\n\n`ethereum-cryptography` is released under The MIT License (MIT)\n\nCopyright (c) 2021 Patricio Palladino, Paul Miller, ethereum-cryptography contributors\n\nSee [LICENSE](./LICENSE) file.\n\n`hdkey` is loosely based on [hdkey](https://github.com/cryptocoinjs/hdkey),\nwhich had [MIT License](https://github.com/cryptocoinjs/hdkey/blob/3f3c0b5cedb98f971835b5116ebea05b3c09422a/LICENSE)\n\nCopyright (c) 2018 cryptocoinjs\n\n[1]: https://img.shields.io/npm/v/ethereum-cryptography.svg\n[2]: https://www.npmjs.com/package/ethereum-cryptography\n[3]: https://img.shields.io/travis/ethereum/js-ethereum-cryptography/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/ethereum/js-ethereum-cryptography\n[5]: https://img.shields.io/npm/l/ethereum-cryptography\n[6]: https://github.com/ethereum/js-ethereum-cryptography/blob/master/packages/ethereum-cryptography/LICENSE\n[7]: https://img.shields.io/npm/types/ethereum-cryptography.svg\n[8]: https://www.npmjs.com/package/ethereum-cryptography\n"
 },
 {
  "repo": "socram8888/amiitool",
  "language": "C",
  "readme_contents": "amiitool\n========\namiibo\u2122 encryption/decryption/copy tool\n\nUsage\n=====\n**amiitool expects a binary dump. It will not work with XMLs or hexadecimal text files**. Aside from this, amiitool is very easy to use and has a very simple syntax.\n\nFirst, you have to specify an operation, either ```-e``` (encrypt and sign), ```-d``` (decrypt and check), ```-c``` (2 decrypt and check, copy appdata, encrypt)\n\nYou need also to specify a file using ```-k [keys]``` switch, indicating which file contains the cryptographic master keys. The key is the concatenation of unfixed infos and locked secret keys.\n\nOptionally, you may also specify input and output files using ```-i [input]``` and ```-o [output]```. If input or output are unspecified, amiitool will default to stdin and stdout, respectively. This lets you pipe amiitool inputs and outputs with standard shell tools such as xxd.\n\nWhen decrypting, by default amiitool will be in strict mode, and will abort and raise an error if the cryptographic signature embedded in the encrypted dump is not valid. If you want to disable checking, use ```-l``` switch to put amiitool in lenient mode.\n\nThe copy function permit to copy saved data from one amiibo\u2122 to another one.\n\nExamples\n--------\n\n- Decryption \"mario.bin\" and displaying hex to terminal:\n   > amiitool -d -k retail.bin -i \"mario.bin\" | xxd\n\n- Encryption \"modified.bin\" to \"signed.bin\":\n   > amiitool -e -k retail.bin -i \"modified.bin\" -o \"signed.bin\"\n\n- Copy \"mario2.bin\" Saves (AppData) into \"mario1.bin\" and save to \"mario3.bin\"\n  > amiitool -c -k retail.bin -i \"mario1.bin\" -s \"mario2.bin\" -o \"mario3.bin\"\n"
 },
 {
  "repo": "norkator/cryptography",
  "language": "Java",
  "readme_contents": "![Cryptography Image 1](./img/cryptography_repository_image.png) \n\n\n# Cryptography\n\nThis repository will slowly get more and more cryptography code samples written in Java. \nMethods are related to Cryptography android application cipher method collection. \nPoint of this repository is that users can find everything in one place, modify code, play with these methods \nin any way they want and this way learn how ciphers worked in the past and how they work these days.\nIn short words this repository is meant to be educational.\n\nThis repository is part of this Android application: [Google Play - Cryptography](https://play.google.com/store/apps/details?id=com.nitramite.cryptography)\n\n<b>Feel free to contribute or open issues!</b>\n\n\nTable of contents\n=================\n* [Ciphers](#ciphers)\n* [Converters](#converters)\n* [Encoding](#encoding)\n* [Hashes](#hashes)\n* [Random](#random)\n* [Certificates](#certificates)\n* [Signatures](#signatures)\n* [Installation](#installation)\n* [Running tests](#running-tests)\n    * [Automatically](#automatically)\n    * [Manually](#manually)\n* [External libraries](#external-libraries)\n* [Adding external library](#adding-external-library)\n* [Notes](#notes)\n* [Troubleshooting](#troubleshooting)\n* [Contributions](#contributions)\n* [Authors](#authors)\n* [Contributors](#contributors)\n* [License](#license)\n\n\n------------------------------------------------------------------------------------------------------------------------\n\n\nCiphers\n============\nCipher (or cypher) is an algorithm for performing encryption or decryption\u2014a series of well-defined steps that can be \nfollowed as a procedure. Encryption is the process of encoding information. This process converts the original \nrepresentation of the information, known as plaintext, into an alternative form known as ciphertext. \n\n##### [Adfgvx](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/adfgvx/Adfgvx.java)\n##### [AES - 128 / 192 / 256](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/aes/AES.java)\n##### [Anubis - 320](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/anubis/AnubisMethod.java)\n##### [ARIA](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/aria/ARIA.java)\n##### [Atbash](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/atbash/Atbash.java)\n##### [Autokey](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/autokey/Autokey.java)\n##### [Bacon](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/bacon/Bacon.java)\n##### [Beaufort](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/beaufort/Beaufort.java)\n##### [Blowfish](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/blowfish/Blowfish.java)\n##### [Caesar](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/caesar/Caesar.java)\n##### [CAST - 5 / 6](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/cast/CAST.java)\n##### [Chaocipher](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/chaocipher/Chaocipher.java)\n##### [Elgamal](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/elgamal/Elgamal.java)\n##### [Gronsfeld](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/gronsfeld/Gronsfeld.java)\n##### [IDEA](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/idea/IDEA.java)\n##### [Keyword](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/keyword/Keyword.java)\n##### [Khazad - 128](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/khazad/KhazadMethod.java)\n##### [LC4 / LS47](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/lc4/LC4.java)\n##### [Navajo](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/navajo/Navajo.java)\n##### [OneTimePad | Vernam](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/onetimepad/OneTimePad.java)\n##### [Playfair](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/playfair/Playfair.java)\n##### [Porta](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/porta/Porta.java)\n##### [Rail fence](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/railfence/RailFence.java)\n##### [RC - 2 / 4 / 6](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/rc/RC.java)\n##### [Scytale](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/scytale/Scytale.java)\n##### [Vigenere](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/vigenere/Vigenere.java)\n##### [Elliptic Curve](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/ellipticCurve/EllipticCurve.java)\n##### [VIC](https://github.com/norkator/Cryptography/blob/master/src/cryptography/ciphers/vic/VIC.java)\n\n\nConverters\n============\nConverters converts input from representation system A to representation system B and vice versa.\n\n##### [BinaryDecimal](https://github.com/norkator/Cryptography/blob/master/src/cryptography/converters/binaryDecimal/BinaryDecimal.java)\n##### [BinaryHex](https://github.com/norkator/Cryptography/blob/master/src/cryptography/converters/binaryHex/BinaryHex.java)\n##### [BinaryInteger](https://github.com/norkator/Cryptography/blob/master/src/cryptography/converters/binaryInteger/BinaryInteger.java)\n##### [BinaryText](https://github.com/norkator/Cryptography/blob/master/src/cryptography/converters/binaryText/BinaryText.java)\n##### [Compliment](https://github.com/norkator/Cryptography/blob/master/src/cryptography/converters/compliment/Compliment.java)\n\n\nEncoding\n============\nEncoding is used to represent data in ASCII string format by translating the data into selected encoding representation.\n\n##### [A1z26](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/a1z26/A1z26.java)\n##### [Adaptive Huffman](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/adaptiveHuffman/AdaptiveHuffman.java)\n##### [Base16](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/base16/Base16.java)\n##### [Base32](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/base32/Base32.java)\n##### [Base58](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/base58/Base58.java)\n##### [Base64](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/base64/Base64.java)\n##### [Base85](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/base85/Base85.java)\n##### [Base91](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/base91/Base91.java)\n##### [Huffman](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/huffman/Huffman.java)\n##### [Morse](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/morse/Morse.java)\n##### [RLE](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/rle/Rle.java)\n##### [Koblitz](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/koblitz/Koblitz.java)\n##### [VIC Sequencing](https://github.com/norkator/Cryptography/blob/master/src/cryptography/encoding/vicSequencing/VICSequencing.java)\n\n\nHashes\n============\nA hash function is any function that can be used to map data of arbitrary size to fixed-size values. \nThe values returned by a hash function are called hash values, hash codes, digests, or simply hashes. \n\n##### [ADLER - 32](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/adler/Adler.java)\n##### [Blake2b - 160 / 256 / 384 / 512](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/blake2b/Blake2b.java)\n##### [CRC - 8 / 16 / 24 / 32 / 64](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/crc/CRC.java)\n##### [ELF - 32](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/elf/ELF.java)\n##### [FCS - 16](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/fcs/FCS.java)\n##### [HAS - 160](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/has/HAS.java)\n##### [KECCAK - 256 / 384 / 512](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/keccak/Keccak.java)\n##### [Kupyna - 256 / 384 / 512](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/kupyna/Kupyna.java)\n##### [MD - 2 / 4 / 5](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/md/MD.java)\n##### [PBKDF2](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/pbkdf2/PBKDF2.java)\n##### [RIPEMD - 128 / 160 / 256 / 320](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/ripemd/RIPEMD.java)\n##### [SHA - 0 / 1 / 224 / 256 / 384 / 512](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/sha/SHA.java)\n##### [SHA2 - 224 / 256 / 384 / 512](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/sha2/SHA2.java)\n##### [SHA3 - 224 / 256 / 384 / 512](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/sha3/SHA3.java)\n##### [Skein - 256 / 512 / 1024](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/skein/Skein.java)\n##### [SM3](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/sm3/SM3.java)\n##### [SUM - 8 / 16 / 24 / 32](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/sum/SUM.java)\n##### [TIGER - T / 2 / 128 / 160](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/tiger/Tiger.java)\n##### [WHIRLPOOL - 0 / 1 / W](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/whirlpool/Whirlpool.java)\n##### [XOR - 8](https://github.com/norkator/Cryptography/blob/master/src/cryptography/hashes/xor/Xor.java)\n\n\nRandom\n============\nRandom generation is a process which, often by means of a random number generator (RNG), generates a sequence \nof numbers or symbols that cannot be reasonably predicted better than by a random chance. \n\n##### [Dummy - Bytes](https://github.com/norkator/Cryptography/blob/master/src/cryptography/random/dummy/Dummy.java)\n##### [Secure Random - Strong / SHA1PRNG](https://github.com/norkator/Cryptography/blob/master/src/cryptography/random/secureRandom/SecureRandom.java)\n\n\nCertificates\n============\nIn computer security, an attribute certificate, or authorization certificate (AC) is a digital document containing \nattributes associated to the holder by the issuer. When the associated attributes are mainly used for the purpose of \nauthorization, AC is called authorization certificate. AC is standardized in X.509. RFC 5755 further specifies the \nusage for authorization purpose in the Internet.\n\n##### [X509](https://github.com/norkator/Cryptography/blob/master/src/cryptography/certificates/X509.java)\n\n\nSignatures\n============\nmathematical scheme for verifying the authenticity of digital messages or documents. A valid digital signature, \nwhere the prerequisites are satisfied, gives a recipient very strong reason to believe that the message was created \nby a known sender (authentication), and that the message was not altered in transit (integrity).\n\n##### [JWT - Json Web Token](https://github.com/norkator/Cryptography/blob/master/src/cryptography/signatures/jwt/JWT.java)\n\n<br>\n\nInstallation\n============\n1. Download and install eclipse: https://www.eclipse.org/downloads/ or any other IDE.\n2. Download project source code by either cloning it with Git or by `Clone or download` menu `Download ZIP` option.\n2. Open project in Eclipse `File` - `Open projects from File System...`\n3. Navigate to `/src` - `cryptography` - `Ciphers.java` and start play with it. Rest of the folder structure\nhas method specific code and tests files for running automated tests.\n\nI warmly recommend watching basic Eclipse tutorials if you are new to the topic.\n\n\nRunning tests\n============\n\nAutomatically\n--------------\n1. Make new branch.\n2. Push changes. (tests will be run with each push)\n3. Open pull request.\n4. Later tests are run by Github Actions workflow (`./.github/workflows/Tests.yml`).\n\nManually\n--------------\n1. Right click on `TestRunner.java`\n2. Click `Coverage As`\n3. Select `1 Java Application`\n4. If everything is fine result is `Tests success: true`\n\n\nExternal libraries\n============\n\n#### commons-codec-1.10.jar\n* Included for Base32 and Base64 encoding methods.\n\n#### jacksum-1.7.0 (jacksum.jar)\n* Included for many hashing algorithms.\n* You can find all source code and details here: https://jacksum.loefflmann.net/en/download.html\n\n#### core-1.58.0.0.jar | prov-1.58.0.0.jar | bcpg-jdk15on-1.58.0.0.jar | bcpkix-jdk15on-1.58.0.0.jar (Spongy Castle)\n* Providing tons of newer strong Cryptographic methods. See https://rtyley.github.io/spongycastle/ and http://www.bouncycastle.org/java.html\n\n### bcprov-jdk15on-170\n* BouncyCastle signed cryptography provider\n\n### bcpkix-jdk15on-170\n* BouncyCastle signed cryptography provider\n\n#### org.junit_4.13.0.v20200204-1500.jar | core-1.3.0.jar\n* JUnit 4 jar and hamcrest core for Github Actions based test runs.\n\n\nAdding external library\n============\n\nEvery time new external jar library is added, it must be also added to `build.xml` in a block seen below as example\n\n```xml\n<path id=\"Cryptography.classpath\">\n    <pathelement location=\"bin\"/>\n    <path refid=\"JUnit 4.libraryclasspath\"/>\n    <pathelement location=\"jar/commons-codec-1.10.jar\"/>\n    <pathelement location=\"jar/jacksum.jar\"/>\n    <pathelement location=\"jar/core-1.58.0.0.jar\"/>\n    <pathelement location=\"jar/prov-1.58.0.0.jar\"/>\n    <pathelement location=\"jar/bcpkix-jdk15on-1.58.0.0.jar\"/>\n    <pathelement location=\"jar/bcpg-jdk15on-1.58.0.0.jar\"/>\n    <pathelement location=\"jar/org.junit_4.13.0.v20200204-1500.jar\"/>\n    <pathelement location=\"jar/core-1.3.0.jar\"/>\n    <pathelement location=\"jar/bcprov-jdk15on-170\"/>\n    <pathelement location=\"jar/bcpkix-jdk15on-170\"/>\n</path>\n```\n\nNotes\n============\nSome ciphers or parts of ciphers originate from web sites, tutorials, repositories or other sources. \nThere's unfortunately no links to original references.\n\n\nTroubleshooting\n============\nNoticed at Mac with jdk1.8.0...  \n```shell script\n[java.security.InvalidKeyException: Illegal key size or default parameters]>\n```\nthis could be due to crypto policy being limited at java config. To change this, go to:\n```shell script\ncd /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/jre/lib/security/\nsudo nano java.security\n```\nand uncomment out `crypto.policy=unlimited`:\n![Cryptography Image 1](./img/crypto_policy_note.png) \n\nFollowing did same trick but from code, so used this one:\n```java\nimport java.security.Security;\npublic class SomeClass {\n\tpublic static void main(String[] args) {\n        Security.setProperty(\"crypto.policy\", \"unlimited\");\n    }\n}\n```\n\nContributions\n============\n\n#### Rules?\n* Please, write tests if you make something new.\n\n#### Found problem?\n* Open issue or make new branch and create pull request when problem is fixed.\n\n#### Want to optimize code?\n* You are free to optimize code, make new branch and create pull request when ready.\n\n\nAuthors\n============\n* **Norkator** - *Initial work* - [norkator](https://github.com/norkator)\n\n\nContributors\n============\n* **Saurav Kumar** - *Added Morse, Huffman, Compliment, Koblitz, EllipticCurve, VICsequencing, VIC * - [SKR301](https://github.com/SKR301)\n\n\nLicense\n============\nSee repo license section or license file.\n"
 },
 {
  "repo": "krzyzanowskim/CryptoSwift",
  "language": "Swift",
  "readme_contents": "[![Platform](https://img.shields.io/badge/Platforms-iOS%20%7C%20Android%20%7CmacOS%20%7C%20watchOS%20%7C%20tvOS%20%7C%20Linux-4E4E4E.svg?colorA=28a745)](#installation)\n\n[![Swift support](https://img.shields.io/badge/Swift-3.1%20%7C%203.2%20%7C%204.0%20%7C%204.1%20%7C%204.2%20%7C%205.0-lightgrey.svg?colorA=28a745&colorB=4E4E4E)](#swift-versions-support)\n[![Swift Package Manager compatible](https://img.shields.io/badge/SPM-compatible-brightgreen.svg?style=flat&colorA=28a745&&colorB=4E4E4E)](https://github.com/apple/swift-package-manager)\n[![CocoaPods Compatible](https://img.shields.io/cocoapods/v/CryptoSwift.svg?style=flat&label=CocoaPods&colorA=28a745&&colorB=4E4E4E)](https://cocoapods.org/pods/CryptoSwift)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&colorA=28a745&&colorB=4E4E4E)](https://github.com/Carthage/Carthage)\n\n# CryptoSwift\n\nCrypto related functions and helpers for [Swift](https://swift.org) implemented in Swift. ([#PureSwift](https://twitter.com/hashtag/pureswift))\n\n**Note**: The `main` branch follows the latest currently released **version of Swift**. If you need an earlier version for an older version of Swift, you can specify its version in your `Podfile` or use the code on the branch for that version. Older branches are unsupported. Check [versions](#swift-versions-support) for details.\n\n---\n\n[Requirements](#requirements) | [Features](#features) | [Contribution](#contribution) | [Installation](#installation) | [Swift versions](#swift-versions-support) | [How-to](#how-to) | [Author](#author) | [License](#license) | [Changelog](#changelog)\n\n## Sponsorship\n\nIt takes some time to keep it all for your convenience, so maybe spare $1, so I can keep working on that. There are more than 8000 clones daily. If I'd get $1/month from each company that uses my work here, I'd say we're even. Hurry up, find the [Sponsorship](https://github.com/users/krzyzanowskim/sponsorship) button, and fulfill your duty.\n\nCryptoSwift isn't backed by any big company and is developer in my spare time that I also use to as a freelancer.\n\n[![Twitter](https://img.shields.io/badge/Twitter-@krzyzanowskim-blue.svg?style=flat)](http://twitter.com/krzyzanowskim)\n\n## Requirements\nGood mood\n\n## Features\n\n- Easy to use\n- Convenient extensions for String and Data\n- Support for incremental updates (stream, ...)\n- iOS, Android, macOS, AppleTV, watchOS, Linux support\n\n#### Hash (Digest)\n  [MD5](http://tools.ietf.org/html/rfc1321)\n| [SHA1](http://tools.ietf.org/html/rfc3174)\n| [SHA2-224](http://tools.ietf.org/html/rfc6234)\n| [SHA2-256](http://tools.ietf.org/html/rfc6234)\n| [SHA2-384](http://tools.ietf.org/html/rfc6234)\n| [SHA2-512](http://tools.ietf.org/html/rfc6234)\n| [SHA3](http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf)\n\n#### Cyclic Redundancy Check (CRC)\n  [CRC32](http://en.wikipedia.org/wiki/Cyclic_redundancy_check)\n| [CRC32C](http://en.wikipedia.org/wiki/Cyclic_redundancy_check)\n| [CRC16](http://en.wikipedia.org/wiki/Cyclic_redundancy_check)\n\n#### Cipher\n  [AES-128, AES-192, AES-256](http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf)\n| [ChaCha20](http://cr.yp.to/chacha/chacha-20080128.pdf)\n| [Rabbit](https://tools.ietf.org/html/rfc4503)\n| [Blowfish](https://www.schneier.com/academic/blowfish/)\n\n#### Message authenticators\n  [Poly1305](http://cr.yp.to/mac/poly1305-20050329.pdf)\n| [HMAC (MD5, SHA1, SHA256)](https://www.ietf.org/rfc/rfc2104.txt)\n| [CMAC](https://tools.ietf.org/html/rfc4493)\n| [CBC-MAC](https://en.wikipedia.org/wiki/CBC-MAC)\n\n#### Cipher mode of operation\n- Electronic codebook ([ECB](http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29))\n- Cipher-block chaining ([CBC](http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher-block_chaining_.28CBC.29))\n- Propagating Cipher Block Chaining ([PCBC](http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Propagating_Cipher_Block_Chaining_.28PCBC.29))\n- Cipher feedback ([CFB](http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_feedback_.28CFB.29))\n- Output Feedback ([OFB](http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Output_Feedback_.28OFB.29))\n- Counter Mode ([CTR](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_.28CTR.29))\n- Galois/Counter Mode ([GCM](https://csrc.nist.gov/publications/detail/sp/800-38d/final))\n- Counter with Cipher Block Chaining-Message Authentication Code ([CCM](https://csrc.nist.gov/publications/detail/sp/800-38c/final))\n- OCB Authenticated-Encryption Algorithm ([OCB](https://tools.ietf.org/html/rfc7253))\n\n#### Password-Based Key Derivation Function\n- [PBKDF1](http://tools.ietf.org/html/rfc2898#section-5.1) (Password-Based Key Derivation Function 1)\n- [PBKDF2](http://tools.ietf.org/html/rfc2898#section-5.2) (Password-Based Key Derivation Function 2)\n- [HKDF](https://tools.ietf.org/html/rfc5869) (HMAC-based Extract-and-Expand Key Derivation Function)\n- [Scrypt](https://tools.ietf.org/html/rfc7914) (The scrypt Password-Based Key Derivation Function)\n\n#### Data padding\n  PKCS#5\n| [PKCS#7](http://tools.ietf.org/html/rfc5652#section-6.3)\n| [Zero padding](https://en.wikipedia.org/wiki/Padding_(cryptography)#Zero_padding)\n| [ISO78164](http://www.embedx.com/pdfs/ISO_STD_7816/info_isoiec7816-4%7Bed21.0%7Den.pdf)\n| [ISO10126](https://en.wikipedia.org/wiki/Padding_(cryptography)#ISO_10126)\n| No padding\n\n#### Authenticated Encryption with Associated Data (AEAD)\n- [AEAD\\_CHACHA20\\_POLY1305](https://tools.ietf.org/html/rfc7539#section-2.8)\n\n## Why\n[Why?](https://github.com/krzyzanowskim/CryptoSwift/issues/5) [Because I can](https://github.com/krzyzanowskim/CryptoSwift/issues/5#issuecomment-53379391).\n\n## How do I get involved?\n\nYou want to help, great! Go ahead and fork our repo, make your changes and send us a pull request.\n\n## Contribution\n\nCheck out [CONTRIBUTING.md](CONTRIBUTING.md) for more information on how to help with CryptoSwift.\n\n- If you found a bug, [open an issue](https://github.com/krzyzanowskim/CryptoSwift/issues).\n- If you have a feature request, [open an issue](https://github.com/krzyzanowskim/CryptoSwift/issues).\n\n## Installation\n\n### Hardened Runtime (macOS) and Xcode\n\nBinary CryptoSwift.xcframework (Used by Swift Package Manager package integration) won't load properly in your app if the app uses **Sign to Run Locally**  Signing Certificate with Hardened Runtime enabled. It is possible to setup Xcode like this. To solve the problem you have two options:\n- Use proper Signing Certificate, eg. *Development* <- this is the proper action\n- Use `Disable Library Validation` aka `com.apple.security.cs.disable-library-validation` entitlement\n\n#### Xcode Project\n\nTo install CryptoSwift, add it as a submodule to your project (on the top level project directory):\n\n    git submodule add https://github.com/krzyzanowskim/CryptoSwift.git\n\nIt is recommended to enable [Whole-Module Optimization](https://swift.org/blog/whole-module-optimizations/) to gain better performance. Non-optimized build results in significantly worse performance.\n\n#### Swift Package Manager\n\nYou can use [Swift Package Manager](https://swift.org/package-manager/) and specify dependency in `Package.swift` by adding this:\n\n```swift\n.package(url: \"https://github.com/krzyzanowskim/CryptoSwift.git\", .upToNextMajor(from: \"1.5.1\"))\n```\n\nSee: [Package.swift - manual](http://blog.krzyzanowskim.com/2016/08/09/package-swift-manual/)\n\nNotice: Swift Package Manager uses debug configuration for debug Xcode build, that may result in significant (up to x10000) worse performance. Performance characteristic is different in Release build. To overcome this prolem, consider embed `CryptoSwift.xcframework` described below.\n\n#### CocoaPods\n\nYou can use [CocoaPods](https://cocoapods.org/pods/CryptoSwift).\n\n```ruby\npod 'CryptoSwift', '~> 1.4.1'\n```\n\nBear in mind that CocoaPods will build CryptoSwift without [Whole-Module Optimization](https://swift.org/blog/whole-module-optimizations/) that may impact performance. You can change it manually after installation, or use [cocoapods-wholemodule](https://github.com/jedlewison/cocoapods-wholemodule) plugin.\n\n#### Carthage\n\nYou can use [Carthage](https://github.com/Carthage/Carthage).\nSpecify in Cartfile:\n\n```ruby\ngithub \"krzyzanowskim/CryptoSwift\"\n```\n\nRun `carthage` to build the framework and drag the built CryptoSwift.framework into your Xcode project. Follow [build instructions](https://github.com/Carthage/Carthage#getting-started). [Common issues](https://github.com/krzyzanowskim/CryptoSwift/issues/492#issuecomment-330822874).\n\n#### XCFramework\n\nXCFrameworks require Xcode 11 or later and they can be integrated similarly to how we\u2019re used to integrating the `.framework` format.\nPlease use script [scripts/build-framework.sh](scripts/build-framework.sh) to generate binary `CryptoSwift.xcframework` archive that you can use as a dependency in Xcode.\n\nCryptoSwift.xcframework is a Release (Optimized) binary that offer best available Swift code performance.\n\n<img width=\"320\" alt=\"Screen Shot 2020-10-27 at 00 06 32\" src=\"https://user-images.githubusercontent.com/758033/97240586-f0878280-17ee-11eb-9119-e5a960417d04.png\">\n\n#### Embedded Framework\n\nEmbedded frameworks require a minimum deployment target of iOS 9 or macOS Sierra (10.12). Drag the `CryptoSwift.xcodeproj` file into your Xcode project, and add appropriate framework as a dependency to your target. Now select your App and choose the General tab for the app target. Find *Embedded Binaries* and press \"+\", then select `CryptoSwift.framework` (iOS, macOS, watchOS or tvOS)\n\n![](https://cloud.githubusercontent.com/assets/758033/10834511/25a26852-7e9a-11e5-8c01-6cc8f1838459.png)\n\nSometimes \"embedded framework\" option is not available. In that case, you have to add new build phase for the target.\n\n![](https://cloud.githubusercontent.com/assets/758033/18415615/d5edabb0-77f8-11e6-8c94-f41d9fc2b8cb.png)\n\n##### iOS, macOS, watchOS, tvOS\n\nIn the project, you'll find [single scheme](https://mxcl.dev/PromiseKit/news/2016/08/Multiplatform-Single-Scheme-Xcode-Projects/) for all platforms:\n- CryptoSwift\n\n#### Swift versions support\n\n- Swift 1.2: branch [swift12](https://github.com/krzyzanowskim/CryptoSwift/tree/swift12) version <= 0.0.13\n- Swift 2.1: branch [swift21](https://github.com/krzyzanowskim/CryptoSwift/tree/swift21) version <= 0.2.3\n- Swift 2.2, 2.3: branch [swift2](https://github.com/krzyzanowskim/CryptoSwift/tree/swift2) version <= 0.5.2\n- Swift 3.1, branch [swift3](https://github.com/krzyzanowskim/CryptoSwift/tree/swift3) version <= 0.6.9\n- Swift 3.2, branch [swift32](https://github.com/krzyzanowskim/CryptoSwift/tree/swift32) version = 0.7.0\n- Swift 4.0, branch [swift4](https://github.com/krzyzanowskim/CryptoSwift/tree/swift4) version <= 0.12.0\n- Swift 4.2, branch [swift42](https://github.com/krzyzanowskim/CryptoSwift/tree/swift42) version <= 0.15.0\n- Swift 5.0, branch [swift5](https://github.com/krzyzanowskim/CryptoSwift/tree/swift5) version <= 1.2.0\n- Swift 5.1, branch [swift5](https://github.com/krzyzanowskim/CryptoSwift/tree/swift51) version <= 1.3.3\n- Swift 5.3 and newer, branch [main](https://github.com/krzyzanowskim/CryptoSwift/tree/main)\n\n## How-to\n\n* [Basics (data types, conversion, ...)](#basics)\n* [Digest (MD5, SHA...)](#calculate-digest)\n* [Message authenticators (HMAC, CMAC...)](#message-authenticators-1)\n* [Password-Based Key Derivation Function (PBKDF2, ...)](#password-based-key-derivation-functions)\n* [HMAC-based Key Derivation Function (HKDF)](#hmac-based-key-derivation-function)\n* [Data Padding](#data-padding)\n* [ChaCha20](#chacha20)\n* [Rabbit](#rabbit)\n* [Blowfish](#blowfish)\n* [AES - Advanced Encryption Standard](#aes)\n* [AES-GCM](#aes-gcm)\n* [Authenticated Encryption with Associated Data (AEAD)](#aead)\n\n##### Basics\n\n```swift\nimport CryptoSwift\n```\n\nCryptoSwift uses array of bytes aka `Array<UInt8>` as a base type for all operations. Every data may be converted to a stream of bytes. You will find convenience functions that accept `String` or `Data`, and it will be internally converted to the array of bytes.\n\n##### Data types conversion\n\nFor your convenience, **CryptoSwift** provides two functions to easily convert an array of bytes to `Data` or `Data` to an array of bytes:\n\nData from bytes:\n\n```swift\nlet data = Data( [0x01, 0x02, 0x03])\n```\n\n`Data` to `Array<UInt8>`\n\n```swift\nlet bytes = data.bytes                     // [1,2,3]\n```\n\n[Hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) encoding:\n\n```swift\nlet bytes = Array<UInt8>(hex: \"0x010203\")  // [1,2,3]\nlet hex   = bytes.toHexString()            // \"010203\"\n```\n\nBuild bytes out of `String`\n```swift\nlet bytes: Array<UInt8> = \"cipherkey\".bytes  // Array(\"cipherkey\".utf8)\n```\n\nAlso... check out helpers that work with **Base64** encoded data:\n```swift\n\"aPf/i9th9iX+vf49eR7PYk2q7S5xmm3jkRLejgzHNJs=\".decryptBase64ToString(cipher)\n\"aPf/i9th9iX+vf49eR7PYk2q7S5xmm3jkRLejgzHNJs=\".decryptBase64(cipher)\nbytes.toBase64()\n```\n\n##### Calculate Digest\n\nHashing a data or array of bytes (aka `Array<UInt8>`)\n```swift\n/* Hash struct usage */\nlet bytes: Array<UInt8> = [0x01, 0x02, 0x03]\nlet digest = input.md5()\nlet digest = Digest.md5(bytes)\n```\n\n```swift\nlet data = Data([0x01, 0x02, 0x03])\n\nlet hash = data.md5()\nlet hash = data.sha1()\nlet hash = data.sha224()\nlet hash = data.sha256()\nlet hash = data.sha384()\nlet hash = data.sha512()\n```\n```swift\ndo {\n    var digest = MD5()\n    let partial1 = try digest.update(withBytes: [0x31, 0x32])\n    let partial2 = try digest.update(withBytes: [0x33])\n    let result = try digest.finish()\n} catch { }\n```\n\nHashing a String and printing result\n\n```swift\nlet hash = \"123\".md5() // \"123\".bytes.md5()\n```\n\n##### Calculate CRC\n\n```swift\nbytes.crc16()\ndata.crc16()\n\nbytes.crc32()\ndata.crc32()\n```\n\n##### Message authenticators\n\n```swift\n// Calculate Message Authentication Code (MAC) for message\nlet key: Array<UInt8> = [1,2,3,4,5,6,7,8,9,10,...]\n\ntry Poly1305(key: key).authenticate(bytes)\ntry HMAC(key: key, variant: .sha256).authenticate(bytes)\ntry CMAC(key: key).authenticate(bytes)\n```\n\n##### Password-Based Key Derivation Functions\n\n```swift\nlet password: Array<UInt8> = Array(\"s33krit\".utf8)\nlet salt: Array<UInt8> = Array(\"nacllcan\".utf8)\n\nlet key = try PKCS5.PBKDF2(password: password, salt: salt, iterations: 4096, keyLength: 32, variant: .sha256).calculate()\n```\n\n```swift\nlet password: Array<UInt8> = Array(\"s33krit\".utf8)\nlet salt: Array<UInt8> = Array(\"nacllcan\".utf8)\n// Scrypt implementation does not implement work parallelization, so `p` parameter will\n// increase the work time even in multicore systems\nlet key = try Scrypt(password: password, salt: salt, dkLen: 64, N: 16384, r: 8, p: 1).calculate()\n```\n\n##### HMAC-based Key Derivation Function\n\n```swift\nlet password: Array<UInt8> = Array(\"s33krit\".utf8)\nlet salt: Array<UInt8> = Array(\"nacllcan\".utf8)\n\nlet key = try HKDF(password: password, salt: salt, variant: .sha256).calculate()\n```\n\n\n##### Data Padding\n\nSome content-encryption algorithms assume the input length is a multiple of `k` octets, where `k` is greater than one. For such algorithms, the input shall be padded.\n\n```swift\nPadding.pkcs7.add(to: bytes, blockSize: AES.blockSize)\n```\n\n#### Working with Ciphers\n##### ChaCha20\n\n```swift\nlet encrypted = try ChaCha20(key: key, iv: iv).encrypt(message)\nlet decrypted = try ChaCha20(key: key, iv: iv).decrypt(encrypted)\n```\n\n##### Rabbit\n\n```swift\nlet encrypted = try Rabbit(key: key, iv: iv).encrypt(message)\nlet decrypted = try Rabbit(key: key, iv: iv).decrypt(encrypted)\n```\n##### Blowfish\n\n```swift\nlet encrypted = try Blowfish(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).encrypt(message)\nlet decrypted = try Blowfish(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).decrypt(encrypted)\n```\n\n##### AES\n\nNotice regarding padding: *Manual padding of data is optional, and CryptoSwift is using PKCS7 padding by default. If you need to manually disable/enable padding, you can do this by setting parameter for __AES__ class*\n\nVariant of AES encryption (AES-128, AES-192, AES-256) depends on given key length:\n\n- AES-128 = 16 bytes\n- AES-192 = 24 bytes\n- AES-256 = 32 bytes\n\nAES-256 example\n\n```swift\nlet encryptedBytes = try AES(key: [1,2,3,...,32], blockMode: CBC(iv: [1,2,3,...,16]), padding: .pkcs7)\n```\n\nFull example:\n\n```swift\nlet password: [UInt8] = Array(\"s33krit\".utf8)\nlet salt: [UInt8] = Array(\"nacllcan\".utf8)\n\n/* Generate a key from a `password`. Optional if you already have a key */\nlet key = try PKCS5.PBKDF2(\n    password: password,\n    salt: salt,\n    iterations: 4096,\n    keyLength: 32, /* AES-256 */\n    variant: .sha256\n).calculate()\n\n/* Generate random IV value. IV is public value. Either need to generate, or get it from elsewhere */\nlet iv = AES.randomIV(AES.blockSize)\n\n/* AES cryptor instance */\nlet aes = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7)\n\n/* Encrypt Data */\nlet inputData = Data()\nlet encryptedBytes = try aes.encrypt(inputData.bytes)\nlet encryptedData = Data(encryptedBytes)\n\n/* Decrypt Data */\nlet decryptedBytes = try aes.decrypt(encryptedData.bytes)\nlet decryptedData = Data(decryptedBytes)\n```\n\n###### All at once\n```swift\ndo {\n    let aes = try AES(key: \"keykeykeykeykeyk\", iv: \"drowssapdrowssap\") // aes128\n    let ciphertext = try aes.encrypt(Array(\"Nullam quis risus eget urna mollis ornare vel eu leo.\".utf8))\n} catch { }\n```\n\n###### Incremental updates\n\nIncremental operations use instance of Cryptor and encrypt/decrypt one part at a time, this way you can save on memory for large files.\n\n```swift\ndo {\n    var encryptor = try AES(key: \"keykeykeykeykeyk\", iv: \"drowssapdrowssap\").makeEncryptor()\n\n    var ciphertext = Array<UInt8>()\n    // aggregate partial results\n    ciphertext += try encryptor.update(withBytes: Array(\"Nullam quis risus \".utf8))\n    ciphertext += try encryptor.update(withBytes: Array(\"eget urna mollis \".utf8))\n    ciphertext += try encryptor.update(withBytes: Array(\"ornare vel eu leo.\".utf8))\n    // finish at the end\n    ciphertext += try encryptor.finish()\n\n    print(ciphertext.toHexString())\n} catch {\n    print(error)\n}\n```\n\n###### AES Advanced usage\n```swift\nlet input: Array<UInt8> = [0,1,2,3,4,5,6,7,8,9]\n\nlet key: Array<UInt8> = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]\nlet iv: Array<UInt8> = // Random bytes of `AES.blockSize` length\n\ndo {\n    let encrypted = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).encrypt(input)\n    let decrypted = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).decrypt(encrypted)\n} catch {\n    print(error)\n}\n```\n\nAES without data padding\n\n```swift\nlet input: Array<UInt8> = [0,1,2,3,4,5,6,7,8,9]\nlet encrypted: Array<UInt8> = try! AES(key: Array(\"secret0key000000\".utf8), blockMode: CBC(iv: Array(\"0123456789012345\".utf8)), padding: .noPadding).encrypt(input)\n```\n\nUsing convenience extensions\n\n```swift\nlet plain = Data([0x01, 0x02, 0x03])\nlet encrypted = try! plain.encrypt(ChaCha20(key: key, iv: iv))\nlet decrypted = try! encrypted.decrypt(ChaCha20(key: key, iv: iv))\n```\n\n##### AES-GCM\n\nThe result of Galois/Counter Mode (GCM) encryption is ciphertext and **authentication tag**, that is later used to decryption.\n\nencryption\n\n```swift\ndo {\n    // In combined mode, the authentication tag is directly appended to the encrypted message. This is usually what you want.\n    let gcm = GCM(iv: iv, mode: .combined)\n    let aes = try AES(key: key, blockMode: gcm, padding: .noPadding)\n    let encrypted = try aes.encrypt(plaintext)\n    let tag = gcm.authenticationTag\n} catch {\n    // failed\n}\n```\n\ndecryption\n\n```swift\ndo {\n    // In combined mode, the authentication tag is appended to the encrypted message. This is usually what you want.\n    let gcm = GCM(iv: iv, mode: .combined)\n    let aes = try AES(key: key, blockMode: gcm, padding: .noPadding)\n    return try aes.decrypt(encrypted)\n} catch {\n    // failed\n}\n```\n\n**Note**: GCM instance is not intended to be reused. So you can't use the same `GCM` instance from encoding to also perform decoding.\n\n##### AES-CCM\n\nThe result of Counter with Cipher Block Chaining-Message Authentication Code encryption is ciphertext and **authentication tag**, that is later used to decryption.\n\n```swift\ndo {\n    // The authentication tag is appended to the encrypted message.\n\tlet tagLength = 8\n\tlet ccm = CCM(iv: iv, tagLength: tagLength, messageLength: ciphertext.count - tagLength, additionalAuthenticatedData: data)\n    let aes = try AES(key: key, blockMode: ccm, padding: .noPadding)\n    return try aes.decrypt(encrypted)\n} catch {\n    // failed\n}\n```\n\nCheck documentation or CCM specification for valid parameters for CCM.\n\n##### AEAD\n\n```swift\nlet encrypt = try AEADChaCha20Poly1305.encrypt(plaintext, key: key, iv: nonce, authenticationHeader: header)\nlet decrypt = try AEADChaCha20Poly1305.decrypt(ciphertext, key: key, iv: nonce, authenticationHeader: header, authenticationTag: tagArr: tag)\n```\n\n##### RSA\n\nRSA initialization from parameters\n\n```swift\nlet input: Array<UInt8> = [0,1,2,3,4,5,6,7,8,9]\n\nlet n: Array<UInt8> = // RSA modulus\nlet e: Array<UInt8> = // RSA public exponent\nlet d: Array<UInt8> = // RSA private exponent\n\nlet rsa = RSA(n: n, e: e, d: d)\n\ndo {\n    let encrypted = try rsa.encrypt(input)\n    let decrypted = try rsa.decrypt(encrypted)\n} catch {\n    print(error)\n}\n```\n\nRSA key generation\n\n```swift\nlet rsa = try RSA(keySize: 2048) // This generates a modulus, public exponent and private exponent with the given size\n```\n\n## Author\n\nCryptoSwift is owned and maintained by [Marcin Krzy\u017canowski](http://www.krzyzanowskim.com)\n\nYou can follow me on Twitter at [@krzyzanowskim](http://twitter.com/krzyzanowskim) for project updates and releases.\n\n# Cryptography Notice\n\nThis distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See http://www.wassenaar.org/ for more information.\n\n## License\n\nCopyright (C) 2014-2021 Marcin Krzy\u017canowski <marcin@krzyzanowskim.com>\nThis software is provided 'as-is', without any express or implied warranty.\n\nIn no event will the authors be held liable for any damages arising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:\n\n- The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, **an acknowledgment in the product documentation is required**.\n- Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\n- This notice may not be removed or altered from any source or binary distribution.\n- Redistributions of any form whatsoever must retain the following acknowledgment: 'This product includes software developed by the \"Marcin Krzyzanowski\" (http://krzyzanowskim.com/).'\n\n## Changelog\n\nSee [CHANGELOG](./CHANGELOG) file.\n"
 },
 {
  "repo": "dint-dev/cryptography",
  "language": "Dart",
  "readme_contents": "[![Pub Package](https://img.shields.io/pub/v/cryptography.svg)](https://pub.dev/packages/cryptography)\n[![Github Actions CI](https://github.com/dint-dev/cryptography/workflows/Dart%20CI/badge.svg)](https://github.com/dint-dev/cryptography/actions?query=workflow%3A%22Dart+CI%22)\n\n# Overview\n\nCryptographic packages for [Dart](https://dart.dev) / [Flutter](https://flutter.dev) developers.\nOpen-sourced under the [Apache License 2.0](LICENSE).\n\nMaintained by Gohilla Ltd. Licensed under the [Apache License 2.0](LICENSE).\n\n## Packages\n  * [cryptography](cryptography)\n    * Cryptography API for Dart / Flutter.\n    * Contains cryptography implementations written in pure Dart.\n    * Contains cryptography implementations that use Web Cryptography API in browsers.\n  * [cryptography_flutter](cryptography_flutter)\n    * Contains cryptography implementations that use Android / iOS APIs.\n  * [jwk](jwk)\n    * JWK (JSON Web Key) encoding / decoding.\n\n## Contributing\nPlease share feedback / issue reports in the\n[issue tracker](https://github.com/dint-dev/cryptography/issues).\n\nPull requests are welcome."
 },
 {
  "repo": "mit-plv/fiat-crypto",
  "language": "Coq",
  "readme_contents": "Fiat-Crypto: Synthesizing Correct-by-Construction Code for Cryptographic Primitives\n===================================================================================\n\nBuilding\n--------\n[![CI (Coq)](https://github.com/mit-plv/fiat-crypto/actions/workflows/coq.yml/badge.svg?branch=master)](https://github.com/mit-plv/fiat-crypto/actions/workflows/coq.yml?query=branch%3Amaster)\n[![CI (Coq, Windows)](https://github.com/mit-plv/fiat-crypto/actions/workflows/coq-windows.yml/badge.svg?branch=master)](https://github.com/mit-plv/fiat-crypto/actions/workflows/coq-windows.yml?query=branch%3Amaster)\n[![CI (Coq, MacOS)](https://github.com/mit-plv/fiat-crypto/actions/workflows/coq-macos.yml/badge.svg?branch=master)](https://github.com/mit-plv/fiat-crypto/actions/workflows/coq-macos.yml?query=branch%3Amaster)\n\n[![Zulip][zulip-shield]][zulip-link]\n[![Rust Crate][crate-shield]][crate-link]\n[![Go Reference][pkg.go-shield]][pkg.go-link]\n\n[zulip-shield]: https://img.shields.io/badge/chat-on%20zulip-informational.svg\n[zulip-link]: https://coq.zulipchat.com/#narrow/stream/247791-fiat-crypto\n\n[crate-shield]: https://img.shields.io/crates/v/fiat-crypto.svg\n[crate-link]: https://crates.io/crates/fiat-crypto\n\n[pkg.go-shield]: https://pkg.go.dev/badge/github.com/mit-plv/fiat-crypto/fiat-go.svg\n[pkg.go-link]: https://pkg.go.dev/github.com/mit-plv/fiat-crypto/fiat-go\n\nThis repository requires [Coq](https://coq.inria.fr/) [8.11](https://github.com/coq/coq/releases/tag/V8.11.0) or later.\nNote that if you install Coq from Ubuntu aptitude packages, you need `libcoq-ocaml-dev` in addition to `coq`.\nNote that in some cases (such as installing Coq via homebrew on Mac), you may also need to install `ocaml-findlib` (for `ocamlfind`).\nIf you want to build the bedrock2 code, you need [Coq 8.14](https://github.com/coq/coq/releases/tag/V8.14.0) or later (otherwise this code will be skipped automatically; you can skip this code on newer versions of Coq by passing `SKIP_BEDROCK2=1` to `make`).\nWe suggest downloading [the latest version of Coq](https://github.com/coq/coq/wiki#coq-installation).\nGeneration of JSON code via the Makefile also requires `jq`.\n\nAlternatively, choose your package-manager to install dependencies:\n\nPackage Manager | Command Line Invocation |\n--|--|\nAptitude (Ubuntu / Debian) | `apt install coq ocaml-findlib libcoq-ocaml-dev jq` |\nHomebrew (OS X) | `brew install coq ocaml-findlib coreutils jq` |\nPacman (Archlinux) | `pacman -S coq ocaml-findlib ocaml-zarith jq` |\n\nYou can clone this repository with\n\n    git clone --recursive https://github.com/mit-plv/fiat-crypto.git\n\nGit submodules are used for some dependencies. If you did not clone with `--recursive`, run\n\n    git submodule update --init --recursive\n\nfrom inside the repository.\nThen run:\n\n    make\n\nYou can check out [our CI](https://github.com/mit-plv/fiat-crypto/actions?query=branch%3Amaster+workflow%3A%22CI+%28Coq%29%22) to see how long the build should take; as of the last update to this line in the README, it takes about 1h10m to run `make -j2` on Coq 8.11.1.\n\nIf you want to build only the command-line binaries used for generating code, you can save a bit of time by making only the `standalone-ocaml` target with\n\n    make standalone-ocaml\n\nUsage (Generating C Files)\n--------------------------\n\nThe Coq development builds binary compilers that generate code using some implementation strategy.\nThe parameters (modulus, hardware multiplication input bitwidth, etc.) are specified on the command line of the compiler.\nThe generated C code is written to standard output.\n\nA collection of C files for popular curves can be made with\n\n    make c-files\n\nThe C files will appear in [`fiat-c/src/`](./fiat-c/src/).\n\nJust the compilers generating these C files can be made with\n\n    make standalone-ocaml\n\nor `make standalone-haskell` for compiler binaries generated with Haskell, or `make standalone` for both the Haskell and OCaml compiler binaries.\nThe binaries are located in `src/ExtractionOcaml/` and `src/ExtractionHaskell/` respectively.\n\nThere is a separate compiler binary for each implementation strategy:\n\n - `saturated_solinas`\n - `unsaturated_solinas`\n - `word_by_word_montgomery`\n\nPassing no arguments, or passing `-h` or `--help` (or any other invalid arguments) will result in a usage message being printed.  These binaries output C code on stdout.\n\nHere are some examples of ways to invoke the binaries (from the directories that they live in):\n\n    # Generate code for 2^255-19\n    ./unsaturated_solinas '25519' '64' '5' '2^255 - 19' carry_mul carry_square carry_scmul121666 carry add sub opp selectznz to_bytes from_bytes > curve25519_64.c\n    ./unsaturated_solinas '25519' '32' '10' '2^255 - 19' carry_mul carry_square carry_scmul121666 carry add sub opp selectznz to_bytes from_bytes > curve25519_32.c\n\n    # Generate code for NIST-P256 (2^256 - 2^224 + 2^192 + 2^96 - 1)\n    ./word_by_word_montgomery 'p256' '32' '2^256 - 2^224 + 2^192 + 2^96 - 1' > p256_32.c\n    ./word_by_word_montgomery 'p256' '64' '2^256 - 2^224 + 2^192 + 2^96 - 1' > p256_64.c\n\nYou can find more examples in the [`Makefile`](./Makefile).\n\nNote that for large primes, you may need to increase the stack size to avoid stack overflows.  For example:\n\n    ulimit -S -s 1048576; ./word_by_word_montgomery --static gost_512_paramSetB 32 '2^511 + 111'\n\nThis sets the stack size to 1 GB (= 1024 MB = 1024 * 1024 KB = 1048576 KB) before running the command.\nAs of the last edit of this line, this command takes about an hour to run, but does in fact complete successfully.\nWithout a sufficiently large stack-size, it instead stack overflows.\n\nUsage (Generating Bedrock2 Files)\n---------------------------------\nOutput is supported to the research language [bedrock2](https://github.com/mit-plv/bedrock2).\nThe Coq development builds binary compilers that generate code using some implementation strategy.\nThe parameters (modulus, hardware multiplication input bitwidth, etc.) are specified on the command line of the compiler.\nThe generated bedrock2 code is then written to standard output using the bedrock2 C backend.\n\nA collection of bedrock2/C files for popular curves can be made with\n\n    make bedrock2-files\n\nThe bedrock2/C files will appear in [`fiat-bedrock2/src/`](./fiat-bedrock2/src/).\n\nJust the compilers generating these bedrock2/C files can be made with\n\n    make standalone-ocaml\n\nor `make standalone-haskell` for binaries generated with Haskell, or `make standalone` for both the Haskell and OCaml binaries.\nThe binaries are located in `src/ExtractionOcaml/` and `src/ExtractionHaskell` respectively.\n\nThere is a separate compiler binary for each implementation strategy:\n\n - `bedrock2_saturated_solinas`\n - `bedrock2_unsaturated_solinas`\n - `bedrock2_word_by_word_montgomery`\n\nPassing no arguments, or passing `-h` or `--help` (or any other invalid arguments) will result in a usage message being printed.  These binaries output bedrock2/C code on stdout.\n\nHere are some examples of ways to invoke the binaries (from the directories that they live in):\n\n    # Generate code for 2^255-19\n    ./bedrock2_unsaturated_solinas --no-wide-int --widen-carry --widen-bytes --split-multiret --no-select '25519' '64' '5' '2^255 - 19' carry_mul carry_square carry_scmul121666 carry add sub opp selectznz to_bytes from_bytes > curve25519_64.c\n    ./bedrock2_unsaturated_solinas --no-wide-int --widen-carry --widen-bytes --split-multiret --no-select '25519' '32' '10' '2^255 - 19' carry_mul carry_square carry_scmul121666 carry add sub opp selectznz to_bytes from_bytes > curve25519_32.c\n\n    # Generate code for NIST-P256 (2^256 - 2^224 + 2^192 + 2^96 - 1)\n    ./bedrock2_word_by_word_montgomery --no-wide-int --widen-carry --widen-bytes --split-multiret --no-select 'p256' '32' '2^256 - 2^224 + 2^192 + 2^96 - 1' > p256_32.c\n    ./bedrock2_word_by_word_montgomery --no-wide-int --widen-carry --widen-bytes --split-multiret --no-select 'p256' '64' '2^256 - 2^224 + 2^192 + 2^96 - 1' > p256_64.c\n\n    # Generate code for 2^130 - 5\n    ./bedrock2_unsaturated_solinas --no-wide-int --widen-carry --widen-bytes --split-multiret --no-select 'poly1305' '64' '3' '2^130 - 5' > poly1305_64.c\n    ./bedrock2_unsaturated_solinas --no-wide-int --widen-carry --widen-bytes --split-multiret --no-select 'poly1305' '32' '5' '2^130 - 5' > poly1305_32.c\n\nYou can find more examples in the [`Makefile`](./Makefile).\n\nLicense\n-------\n\nFiat-Crypto is distributed under the terms of the MIT License, the Apache License (Version 2.0), and the BSD 1-Clause License; users may pick which license to apply.\n\nSee [`COPYRIGHT`](./COPYRIGHT), [`LICENSE-MIT`](./LICENSE-MIT), [`LICENSE-APACHE`](./LICENSE-APACHE), and [`LICENSE-BSD-1`](./LICENSE-BSD-1) for details.\n\n\nExtended Build Instructions\n---------------------------\n\nIf your `COQPATH` variable is not empty, you can build with:\n\n    export COQPATH=\"$(pwd)/rewriter/src:$(pwd)/coqprime/src:$(pwd)/bedrock2/bedrock2/src:$(pwd)/bedrock2/deps/coqutil/src${COQPATH:+:}$COQPATH\"\n    make\n\nReading About The Code\n----------------------\n\n- [Andres Erbsen, Jade Philipoom, Jason Gross, Robert Sloan, Adam Chlipala. Simple High-Level Code For Cryptographic Arithmetic -- With Proofs, Without Compromises. To Appear in Proceedings of the IEEE Symposium on Security & Privacy 2019 (S&P'19). May 2019.](http://adam.chlipala.net/papers/FiatCryptoSP19/FiatCryptoSP19.pdf). This paper describes multiple field arithmetic implementations, and an older version of the compilation pipeline (preserved [here](https://github.com/mit-plv/fiat-crypto/tree/sp2019latest)). It is somewhat space-constrained, so some details are best read about in theses below.\n- [Jade Philipoom. Correct-by-Construction Finite Field Arithmetic in Coq. MIT Master's Thesis. February 2018.](http://adam.chlipala.net/theses/jadep_meng.pdf) Chapters 3 and 4 contain a detailed walkthrough of the field arithmetic implementations (again, targeting the previous compilation pipeline).\n- [Andres Erbsen. Crafting Certified Elliptic Curve Cryptography Implementations in Coq. MIT Master's Thesis. June 2017.](\nhttp://adam.chlipala.net/theses/andreser_meng.pdf) Section 3 contains a whirlwind introduction to synthesizing field arithmetic code using coq, without assuming Coq skills, but covering a tiny fraction of the overall library. Sections 5 and 6 contain the only write-up on the elliptic-curve library in this repository.\n- [Jason Gross. Performance Engineering of Proof-Based Software Systems at Scale. MIT Doctoral Thesis. February 2021.](http://adam.chlipala.net/theses/jgross.pdf) Chapters 4 and 5 describe the reflective program transformation framework at the center of the newest compilation pipeline.\n- The newest compilation pipeline as a whole does not have a separate document yet, but this README does go over it in some detail.\n\n\nStatus of Backends\n------------------\n\nFiat Cryptography contains a number of backends; the final step of the pipeline is transforming from straight-line C-like code to expressions in whatever language is being targeted.\nThe Bedrock2 backend comes with proofs that the Bedrock2 AST matches the semantics of our internal AST, but none of the other backends have any proofs about them.\nWhile the transformations are not particularly involved, and our proofs ensure that we have picked integer sizes large enough to store values at each operation, there is no verification that the particular integer size casts that we emit are sufficient to ensure that gcc, clang, or whatever compiler is used on the code correctly selects integer sizes for expressions correctly.\nNote that even the C code printed by the Bedrock2 backend does not have proofs that the conversion to strings is correct.\n\nHence we provide here a table of the extent to which the various backends are maintained, tested, and proven.\nA :heavy_check_mark: in \"maintainer\" means that the Fiat Cryptography maintainers are fully maintaining and testing the backend; :white_check_mark: means maintenance by external contributors.\nWe do not provide any quality guarantees for code generated by the backends.\n\nBackend | Maintainer / Person of Contact | Build Checked by CI | Generated Code Tested | Internal AST Proven Correct\n:-- | :-- | :-- | :-- | :--\nC | :heavy_check_mark: @JasonGross / entire team | :heavy_check_mark: | :heavy_check_mark: (BoringSSL test-suite) |\nBedrock2/C | :heavy_check_mark: @andres-erbsen / entire team | :heavy_check_mark: | :heavy_check_mark: (BoringSSL test-suite) | :heavy_check_mark:\nGo | :white_check_mark: @mdempsky | :heavy_check_mark: | |\nJava | :x: Unmaintained | :heavy_check_mark: | :x: Known Buggy [#707](https://github.com/mit-plv/fiat-crypto/issues/707#issuecomment-763098543) |\nJSON | Experimental | :white_check_mark: (only syntax) | |\nRust | :white_check_mark: | :heavy_check_mark: | :heavy_check_mark: ([Dalek Cryptography test-suite](https://github.com/dalek-cryptography/curve25519-dalek)) |\nZig | :white_check_mark: @jedisct1 | :heavy_check_mark: | :white_check_mark: ([Zig standard library](https://github.com/ziglang/zig/tree/master/lib/std/crypto/pcurves) (generated file [here](https://github.com/ziglang/zig/blob/master/lib/std/crypto/pcurves/p256/p256_64.zig)) (main CI [here](https://dev.azure.com/ziglang/zig/_build?definitionId=1&_a=summary&repositoryFilter=1&branchFilter=5%2C5%2C5%2C5%2C5%2C5%2C5%2C5))) |\n\n### Contributing a new backend\n\nWe weclome new backends (as long as you're willing to maintain them).\nWe hope that the process of contributing a new backend is not too painful, and welcome feedback on how the process could be streamlined.\nTo contribute a new backend, follow the following steps (perhaps using, for example, [#936](https://github.com/mit-plv/fiat-crypto/pull/936), [#660](https://github.com/mit-plv/fiat-crypto/pull/660), [#638](https://github.com/mit-plv/fiat-crypto/pull/638), or [#570](https://github.com/mit-plv/fiat-crypto/pull/570) as examples):\n- Add a new file to [`src/Stringification/`](./src/Stringification/) for your language, modeled after the existing file of your choice\n- Run `git add` on your new file and then `make update-_CoqProject` to have the build system track your file\n- Update [`src/CLI.v`](./src/CLI.v) to `Require Import` your file and add your language to [the list `default_supported_languages`](https://github.com/mit-plv/fiat-crypto/blob/8944697db11055abeeba252782d2bfd1e2b844cd/src/CLI.v#L212-L219) so that it can be passed to the binaries as an argument to `--lang`\n- Update the `Makefile` in the following ways:\n  - Consider adding a variable near `CARGO_BUILD` for the build invocation\n  - Add targets to `.PHONY` analogous to `c-files`, `lite-c-files`, `test-c-files`, `only-test-c-files`\n  - Add a variables analogous to `C_DIR`, `ALL_C_FILES`, and `LITE_C_FILES` for your language's generated files\n  - Add targets analogous to `c-files` and `lite-c-files` and make `generated-files` and `lite-generated-files` depend on those targets respectively\n  - Add build rules for `ALL_<YOUR-LANGUAGE>_FILES`\n  - Add targets for `test-<your-language>-files` and `only-test-<your-language>-files`; both targets should have the same build rule, but `test-<your-language>-files` should depend on all the generated files of your language, while `only-test-<your-language>-files` should not have any build rule dependencies.\n  - If you are developing a package, you can look for uses of `COPY_TO_FIAT_RUST` or `COPY_TO_FIAT_GO` to see how license files are copied\n- Run `make` to generate all the relevant files of your language, and add the generated files to git\n- Update `.gitignore` to ignore any compiled files generated by the compiler of your language (analogous to `.o` and `.a` for C)\n- Create a file in [`.github/workflows/`](./.github/workflows/) like [`c.yml`](./.github/workflows/c.yml), [`go.yml`](./.github/workflows/go.yml), [`rust.yml`](./.github/workflows/rust.yml), etc, to test at least that the generated code compiles.\n  - Optionally, also test the built code against some external project's crypto unit tests\n- Update [`.gitattributes`](./.gitattributes) to mark your language's generated files as `text` and to mark the paths of the generated files as `linguist-generated` so that diffs don't clog up PR displays.\n- Add your language to the table in preceeding section of the README indicating the status of your backend and marking your GitHub username as the maintainer.\n\n\nReading The Code\n----------------\n\n### Demo of Synthesis\n\nThe idea of the synthesis process is demoed in [`src/Demo.v`](./src/Demo.v).\nWe strongly recommend reading this before studying the full-scale system.\n\n### Proofs About Elliptic Curves\n\nWe have some about elliptic curves, for example:\n\n- [`src/Curves/Edwards/AffineProofs.v`](./src/Curves/Edwards/AffineProofs.v),\n- [`src/Curves/Edwards/XYZT/Basic.v`](./src/Curves/Edwards/XYZT/Basic.v),\n- [`src/Curves/Montgomery/AffineProofs.v`](./src/Curves/Montgomery/AffineProofs.v),\n- [`src/Curves/Montgomery/XZProofs.v`](src/Curves/Montgomery/XZProofs.v).\n\n### Actual Synthesis Pipeline\n\nThe entry point for clients of the PHOAS expressions we use is\n`Language/API.v`.  Refer to comments in that file for an explanation\nof the interface; the following text describes how the expressions are\ngenerated, not how to interact with them.\n\nThe ordering of files (eliding `*Proofs.v` files) is:\n\n```\nLanguage/*.v\n    \u2191\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\nAbstractInterpretation/*.v     MiscCompilerPasses.v    Rewriter/*.v     PushButtonSynthesis/ReificationCache.v      Arithmetic.v\n    \u2191                                \u2191                       \u2191                       \u2191                                   \u2191\nStringification/*.v                  \u2502                       \u2502                       \u2502                        COperationSpecifications.v\n    \u2191                                \u2502                       \u2502                       \u2502                                   \u2191\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                   \u2502\n           BoundsPipeline.v                                  CompilersTestCases.v                                        \u2502\n                 \u2191                                                                                                       \u2502\n                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     PushButtonSynthesis/*.v\n                              \u2191\n                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                  CLI.v                SlowPrimeSynthesisExamples.v\n                   \u2191\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\nStandaloneHaskellMain.v   StandaloneOCamlMain.v\n        \u2191                           \u2191\nExtractionHaskell.v          ExtractionOCaml.v\n```\n\nWithin each directory, the dependency graphs (again eliding `*Proofs.v` and related files) are:\n\nWithin `Language/`:\n```\n  Pre.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 IdentifierParameters.v\n    \u2191                                                                                        \u2191\nLanguage.v \u2190\u2500\u2500 IdentifiersBasicLibrary.v \u2190\u2500\u2500\u2500\u2500 IdentifiersBasicGenerate.v \u2190\u2500\u2500 IdentifiersBasicGENERATED.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 API.v\n    \u2191                        \u2191                                                               \u2191\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                  \u2502\nUnderLets.v    IdentifiersLibrary.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 IdentifiersGenerate.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500 IdentifiersGENERATED.v\n                     \u2191                                       \u2191                               \u2191\n              IdentifiersLibraryProofs.v \u2190\u2500\u2500\u2500 IdentifiersGenerateProofs.v \u2190\u2500 IdentifersGENERATEDProofs.v\n```\n\nWithin `Stringification/`:\n```\nLanguage.v\n    \u2191\n   IR.v\n    \u2191\n \u250c\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\nC.v       Rust.v\n```\n\nWe will come back to the `Rewriter/*` files shortly.\n\nThe files contain:\n\n- `Arithmetic.v`: All of the high-level field arithmetic stuff\n\n- `COperationSpecifications.v`: The specifications for the various\n  operations to be synthesized.\n  TODO: This file should probably be renamed.\n\n- `AbstractInterpretation/*.v`: type-code-based ZRange definitions, abstract\n  interpretation of identifiers (which does let-lifting, for historical reasons,\n  and the dependency on UnderLets should probably be removed), defines the\n  passes:\n  + PartialEvaluateWithBounds\n  + PartialEvaluateWithListInfoFromBounds\n  + CheckPartialEvaluateWithBounds\n\n- `MiscCompilerPasses.v`: Defines the passes:\n  + EliminateDead (dead code elimination)\n  + Subst01 (substitute let-binders used 0 or 1 times)\n\n- `Rewriter/*.v`: rewrite rules, rewriting.  See below for actual structure\n  of files.  Defines the passes:\n  + RewriteNBE\n  + RewriteArith\n  + RewriteArithWithCasts\n  + RewriteStripLiteralCasts\n  + RewriteToFancy\n  + RewriteToFancyWithCasts\n  + PartialEvaluate (which is just a synonym for RewriteNBE)\n\n- Inside `Language/`:\n\n  + `Pre.v`: A few definitions which are used in writing out rewrite\n    rules and the interpretations of PHOAS identifiers, e.g.,\n    `ident.cast`, `ident.eagerly`, `Thunked.list_rect`, etc\n\n  + `Language.v`: Defines parts of the PHOAS basic infrastructure\n        parameterized over base types and identifiers including:\n    . PHOAS\n    . reification\n    . denotation/intepretation\n    . utilities for inverting PHOAS exprs\n    . default/dummy values of PHOAS exprs\n    . default instantiation of generic PHOAS types\n    . Gallina reification of ground terms\n    . Flat/indexed syntax trees, and conversions to and from PHOAS\n\n    Defines the passes:\n    . ToFlat\n    . FromFlat\n    . GeneralizeVar\n\n  + `API.v`: Specializes the type of PHOAS expressions to the\n    particular identifiers we're using, and defines convenience\n    notations, tactics, and definitions for some of the specialized\n    versions.\n\n  + `IdentifierParameters.v`: Defines a couple of definitions\n    determining the identifiers and types used by the language.  These\n    are used as input for the generation of identifier definitions.\n\n  + `IdentifiersBasicLibrary.v`: Defines the package type holding basic\n    identifier definitions.\n\n  + `IdentifiersBasicGenerate.v`: Defines the tactics that generate\n    all of the identifier-list-specific definitions used by the PHOAS\n    machinery, in addition to defining the tactics that do reification\n    based on the generated package.\n\n  + `IdentifiersBasicGENERATED.v`: Basically autogenerated file that\n    defines the inductives of base type codes and identifier codes\n    (the first hand-written because it's short; the latter copy-pasted\n    from a tactic that prints out the inductive), and calls the\n    package-generation-tactic from `IdentifiersBasicGenerate.v`.\n\n  + `UnderLets.v`: the UnderLets monad, a pass that does substitution\n    of var-like things, a pass that inserts let-binders in the\n    next-to-last line of code, substituting away var-like things (this\n    is used to ensure that when we output C code, aliasing the input\n    and the output arrays doesn't cause issues).\n    Defines the passes:\n    . SubstVar\n    . SubstVarLike\n    . SubstVarOrIdent\n\n  The following files in `Language/` are used only by the rewriter:\n\n  + `IdentifiersLibrary.v`: Some definitions about identifiers and\n    pattern identifiers and raw identifiers.  Some of these\n    definitions take generated definitions as arguments. Also defines\n    a package record to hold all of the generated definitions.\n\n  + `IdentifiersGenerate.v`: Tactics to generate definitions about\n    untyped and pattern versions of identifiers for the rewriter.\n    Culminates in a tactic which inhabits the package type defined in\n    `IdentifiersLibrary.v`\n\n  + `IdentifiersLibraryProofs.v`: proofs about definitions in\n    IdentifiersLibrary.  Also defines a package to hold generated\n    proofs that require destructing inductives not yet defined in this\n    file.\n\n  + `IdentifiersGenerateProofs.v`: tactics to prove lemmas to inhabit\n    the package defined in `IdentifiersLibraryProofs.v`\n\n  + `IdentifiersGENERATE.v`: identifiers / inductives and definitions\n    generated by IdentifiersGenerate.\n\n  + `IdentifiersGENERATEProofs.v`: proofs generated by\n    IdentifiersGenerateProofs, about definitions in\n    IdentifiersGENERATE\n\n- Inside `Stringification/`:\n\n  + `Language.v`: defines a printer (Show instance) for the PHOAS\n    language, defines some common language-independent utilities for\n    conversion to output code, and defines the spec/API of conversion\n    from PHOAS to code in a language as strings.  (Depends on\n    `AbstractInterpretation.v` for ZRange utilities.)  Defines the\n    passes:\n    . ToString.LinesToString\n    . ToString.ToFunctionLines\n\n  + `IR.v`: Defines a common IR for C and Rust (and maybe eventually\n    other languages), and builds most of the infrastructure necessary\n    for instantiating the LanguageSpecification API for a language\n    with pointers and function calls\n\n  + `C.v`: conversion to C code as strings.  Instantiates the API\n    defined in `Stringification.Language`.\n\n  + `Rust.v`: conversion to Rust code as strings.  Instantiates the\n    API defined in `Stringification.Language`.\n\n- `CompilersTestCases.v`: Various test cases to ensure everything is working\n\n- `BoundsPipeline.v`: Assemble the various compiler passes together into\n  a composed pipeline.  It is the final interface for the compiler.\n  Also contains some tactics for applying the BoundsPipeline\n  correctness lemma.\n\n- `PushButtonSynthesis/ReificationCache.v`: Defines the cache that\n  holds reified versions of operations, as well as the tactics that\n  reify and apply things from the cache.\n\n- `PushButtonSynthesis/*`: Reifies the various operations from\n  `Arithmetic.v`, defines the compositions of the BoundsPipeline with\n  these operations, proves that their interpretations satisfies the\n  specs from `COperationSpecifications.v`, assembles the reified\n  post-bounds operations into synthesis targets.  These are the files\n  that `CLI.v` depends on:\n  + `ReificationCache.v`:\n      Defines the cache of pre-reified terms.  Splitting up\n      reification from uses of the pipeline allows us to not have to\n      re-reify big terms every time we change the pipeline or\n      intermediate stages thereof.\n  + `InvertHighLow.v`:\n      Defines some common definitions, around splitting apart high and\n      low bits of things, for Barrett and FancyMontgomeryReduction.\n  + `Primitives.v`:\n      Specializes the pipeline to basic \"primitive\" operations such as\n      cmovznz, addcarryx, subborrowx, etc.\n  + `SmallExamples.v`:\n      Some small examples of using the pipeline.  Nothing depends on\n      this file; it is for demonstration purposes only.\n  + `*ReificationCache.v`:\n      Holds the reified versions of the definitions used in the\n      corresponding file.\n  + `BarrettReduction.v`, `FancyMontgomeryReduction.v`,\n    `SaturatedSolinas.v`, `UnsaturatedSolinas.v`, `WordByWordMontgomery.v`:\n      Holds the instantiation of the pipeline to the corresponding\n      implementation choice, as well as any relevant correctness\n      proofs (such as that things assemble into a ring).\n\n- `SlowPrimeSynthesisExamples.v`: Additional uses of the pipeline for\n  primes that are kind-of slow, which I don't want extraction blocking\n  on.  Also contains some debugging examples.\n\n- `CLI.v`: Setting up all of the language-independent parts of extraction; relies\n  on having a list of strings-or-error-messages for each pipeline, and on the\n  arguments to that pipeline, and builds a parser for command line arguments for\n  that.\n\n- `StandaloneHaskellMain.v`, `StandaloneOCamlMain.v`, `ExtractionHaskell.v`,\n  `ExtractionOCaml.v`: Extraction of pipeline to various languages\n\n\nThe files defined in `Rewriter/` are split up into the following\ndependency graph (including some files from `Language/` at the top):\n```\nIdentifiersLibrary.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 IdentifiersGenerate.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 IdentifiersGENERATED.v\n    \u2191 \u2191                                                   \u2191                                        \u2191\n    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 IdentifiersLibraryProofs.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500 IdentifiersGenerateProofs.v \u2190\u2500 IdentifersGENERATEDProofs.v\n    \u2502                                     \u2191                                                        \u2191\n    \u2502                                     \u2502                                                        \u2502\n    \u2502                                     \u2502                                                        \u2502\n    \u2502                                     \u2502                                                        \u2502\n    \u2502                                     \u2502                                                        \u2502\nRewriter.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ProofsCommon.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ProofsCommonTactics.v      \u2502\n    \u2191                                 \u2197        \u2196                                \u2191                  \u2502\nReify.v \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           Wf.v   InterpProofs.v                        \u2502                  \u2502\n                       \u2502              \u2196        \u2197                                \u2502                  \u2502\nRules.v                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 AllTactics.v \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n    \u2191                                      \u2191       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nRulesProofs.v                         AllTacticsExtra.v\n    \u2191                                      \u2191\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   Passes/NBE.v    Passes/Arith.v    Passes/ArithWithCasts.v    Passes/StripLiteralCasts.v\n    \u2502        \u2191             \u2191                        \u2191                             \u2191\n    \u2502        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502                                                                                           \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                                       \u2502\n      Passes/ToFancy.v      Passes/ToFancyWithCasts.v                                           \u2502\n             \u2191                          \u2191                                                       \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n                   All.v\n```\n\n- `Rules.v`: Defines the list of types of the rewrite rules that\n  will be reified.  Largely independent of the expression language.\n\n- `RulesProofs.v`: Proves all of the Gallina versions of the\n  rewrite rules correct.\n\n- `Rewriter.v`: Defines the rewriter machinery.  In particular, all of\n  the rewriter definitions that have non-rewrite-rule-specific proofs\n  about them are found in this file.\n\n- `RewrierReify.v`: Defines reification of rewrite rules, continuing on\n  from `Rewriter.v`, and culminates in the tactic\n  `RewriteRules.Tactic.Build_RewriterT` and the tactic notation\n  `make_Rewriter` which define a package of type\n  `RewriteRules.GoalType.RewriterT`.  The `Build_*` tactic returns a\n  `constr`, while the `make_*` tactic notation refines that `constr`\n  in the goal.  Both tactics take two arguments: first a boolean\n  `include_interp` which specifies whether (`true`) or not (`false`)\n  to prefix the list of rewrite rules with the reduction-to-literal\n  rewrite rules; and second a list of `bool * Prop` which is the list\n  of rewrite rule types to reify, each paired with a boolean saying\n  whether or not to try rewriting again in the output of the\n  replacement for that rule.\n\n- `ProofsCommon.v`: Defines the notion of interp-goodness and wf-goodness\n  for rewrite rules, defines tactics to prove these notions, and\n  contains a semi-arbitrary collection of proofs and definitions that\n  are mostly shared between the wf proofs and the interp proofs.\n  Importantly, this file defines everything needed to state and prove\n  that specific rewrite rules are correct.  Additionally defines a\n  package `RewriteRules.GoalType.VerifiedRewriter` which describes the\n  type of the overall specialized rewriter together with its `Wf` and\n  `Interp` proofs. (This package should perhaps move to another file?)\n\n- `ProofsCommonTactics.v`: Defines the actual tactics used to prove that\n  specific rewrite rules are correct, and to inhabit the packages\n  defined in `ProofsCommon.v`.\n\n- `Wf.v`: Proves wf-preservation of the generic rewriter,\n  taking in wf-goodness of rewrite rules as a hypothesis.\n\n- `InterpProofs.v`: Proves interp-correctness of the generic\n  rewriter, taking in interp-goodness of rewrite rules as a\n  hypothesis.\n\n- `AllTactics.v`: Defines the tactic\n  `RewriteRules.Tactic.make_rewriter` (and a similar tactic notation)\n  which build the entire `VerifiedRewriter`.  They take in the\n  `include_interp` as in `Rewriter.v` tactics, as well as an hlist of\n  proofs of rewrite rules indexed over a `list (bool * Prop)` of\n  rewrite rule types.  This is the primary interface for defining a\n  rewriter from a list of rewrite rules.\n\n- `AllTacticsExtra.v`: Specializes `AllTactics.v` to\n  what's defined in `Identifier.v`\n\n- `{NBE, Arith, ArithWithCasts, StripLiteralCasts, ToFancy,\n  ToFancyWithCasts}.v`: Use the tactic from `AllTactics.v`\n  together with the proven list of rewrite rules from\n  `RulesProofs.v` to reify and reduce the corresponding pass\n  and generate a rewriter.\n\n- `All.v`: `Definition`less file that `Export`s the rewriters\n  defined in `Rewriter/*.v`\n\n\nProofs files:\nFor `Language.v`, there is a semi-arbitrary split between two files\n`Language.Inversion` and `Language.Wf`.\n- `Inversion.v`:\n  + classifies equality of type codes and exprs\n  + type codes have decidable equality\n  + correctness of the various type-transport definitions\n  + correctness lemmas for the various `expr.invert_*` definitions\n  + correctness lemmas for the various `reify_*` definitions in `Language.v`\n  + `inversion_type`, which inverts equality of type codes\n  + `type_beq_to_eq`, which converts boolean equality of types to\n    Leibniz equality\n  + `rewrite_type_transport_correct`, which rewrites with the\n    correctness lemmas of the various type-transport definitions\n  + `type.invert_one e` which does case analysis on any inductive type\n     indexed over type codes, in a way that preserves information\n     about the type of `e`, and generally works even when the goal is\n     dependently typed over `e` and/or its type\n  + `ident.invert`, which does case-analysis on idents whose type has\n    structure (i.e., is not a var)\n  + `ident.invert_match`, which does case-analysis on idents appearing as\n    the discriminee of a `match` in the goal or in any hypothesis\n  + `expr.invert`, which does case-analysis on exprs whose type has\n    structure (i.e., is not a var)\n  + `expr.invert_match`, which does case-analysis on exprs appearing as\n    the discriminee of a `match` in the goal or in any hypothesis\n  + `expr.invert_subst`, which does case-analysis on exprs which show up\n    in hypotheses of the form `expr.invert_* _ = Some _`\n  + `expr.inversion_expr`, which inverts equalities of exprs\n\n- `Wf.v`: Depends on `Inversion.v`\n  Defines:\n  + expr.wf, expr.Wf, expr.wf3, expr.Wf3\n  + GeneralizeVar.Flat.wf\n  + `expr.inversion_wf` (and variants), which invert `wf` hypotheses\n  + `expr.wf_t` (and variants wf_unsafe_t and wf_safe_t) which make\n     progress on `wf` goals; `wf_safe_t` should never turn a provable\n     goal into an unprovable one, while `wf_unsafe_t` might.\n  + `expr.interp_t` (and variants), which should make progress on\n    equivalence-of-interp hypotheses and goals, but is not used much\n    (mainly because I forgot I had defined it)\n  + `prove_Wf`, which proves wf goals on concrete syntax trees in a more\n    optimized way than `repeat constructor`\n  Proves:\n  + funext \u2192 (type.eqv \u2194 Logic.eq) (`eqv_iff_eq_of_funext`)\n  + type.related and type.eqv are PERs\n  + Proper instances for `type.app_curried`, `type.and_for_each_lhs_of_arrow`\n  + `type.is_not_higher_order` \u2192 Reflexive (type.and_for_each_lhs_of_arrow type.eqv)\n  + iff between `type.related{,_hetero}` and related of `type.app_curried`\n  + various properties of `type.and{,b_bool}for_each_lhs_of_arrow`\n  + various properties of `type.eqv` and `ident.{gen_,}interp`\n  + various properties of `ident.cast`\n  + various properties of `expr.wf` (particularly of things defined in `Language.v`)\n  + interp and wf proofs for the passes to/from Flat\n\n- `UnderLetsProofs.v`: wf and interp lemmas for the various passes defined in `UnderLets.v`\n- `MiscCompilerPassesProofs.v`: wf and interp lemmas for the various passes defined in `MiscCompilerPasses.v`\n- `AbstractInterpretation/ZRangeProofs.v`: Proves correctness lemmas of the per-operation zrange-bounds-analysis functions\n- `AbstractInterpretation/Wf.v`: wf lemmas for the AbstractInterpretation pass\n- `AbstractInterpretation/Proofs.v`: interp lemmas for the\n  AbstractInterpretation pass, and also correctness lemmas that\n  combine Wf and interp\n"
 },
 {
  "repo": "paragonie/halite",
  "language": "PHP",
  "readme_contents": "# Halite\n\n[![Build Status](https://github.com/paragonie/halite/actions/workflows/ci.yml/badge.svg)](https://github.com/paragonie/halite/actions)\n[![Static Analysis](https://github.com/paragonie/halite/actions/workflows/psalm.yml/badge.svg)](https://github.com/paragonie/halite/actions)\n[![Latest Stable Version](https://poser.pugx.org/paragonie/halite/v/stable)](https://packagist.org/packages/paragonie/halite)\n[![Latest Unstable Version](https://poser.pugx.org/paragonie/halite/v/unstable)](https://packagist.org/packages/paragonie/halite)\n[![License](https://poser.pugx.org/paragonie/halite/license)](https://packagist.org/packages/paragonie/halite)\n[![Downloads](https://img.shields.io/packagist/dt/paragonie/halite.svg)](https://packagist.org/packages/paragonie/halite)\n[![Coverage Status](https://coveralls.io/repos/github/paragonie/halite/badge.svg?branch=master)](https://coveralls.io/github/paragonie/halite?branch=master)\n\n**Halite** is a high-level cryptography interface that relies on [libsodium](https://pecl.php.net/package/libsodium)\nfor all of its underlying cryptography operations.\n\nHalite was created by [Paragon Initiative Enterprises](https://paragonie.com) as\na result of our continued efforts to improve the ecosystem and make [cryptography in PHP](https://paragonie.com/blog/2015/09/state-cryptography-in-php)\nsafer and easier to implement.\n\n> You can read the [**Halite Documentation**](https://github.com/paragonie/halite/tree/master/doc) online.\n\nHalite is released under Mozilla Public License 2.0. [Commercial licenses are available](https://paragonie.com/contact)\nfrom Paragon Initiative Enterprises if you wish to extend Halite without making your\nderivative works available under the terms of the MPL.\n\nIf you are satisfied with the terms of MPL software for backend web applications\nbut would like to purchase a support contract for your application that uses Halite,\nthose are also offered by Paragon Initiative Enterprises.\n\n**Important:** Earlier versions of Halite were available under the GNU Public License\nversion 3 (GPLv3). Only Halite 4.0.1 and newer are available under the Mozilla Public\nLicense terms.\n\n## Installing Halite\n\nBefore you can use Halite, you must choose a version that fits the requirements \nof your project. The differences between the requirements for the available \nversions of Halite are briefly highlighted below.\n\n|                                                              | PHP   | libsodium | PECL libsodium | Support                   |\n|--------------------------------------------------------------|-------|-----------|----------------|---------------------------|\n| Halite 5.1 and newer                                         | 8.1.0 | 1.0.18    | N/A (standard) | :heavy_check_mark: Active |\n| Halite 5.0.x                                                 | 8.0.0 | 1.0.18    | N/A (standard) | :heavy_check_mark: Active |\n| [Halite 4.1+](https://github.com/paragonie/halite/tree/v4.x) | 7.2.0 | 1.0.15    | N/A (standard) | :x: Not Supported         |\n| [Halite 4.0](https://github.com/paragonie/halite/tree/v4.0)  | 7.2.0 | 1.0.13    | N/A (standard) | :x: Not Supported         |\n| [Halite 3](https://github.com/paragonie/halite/tree/v3.x)    | 7.0.0 | 1.0.9     | 1.0.6 / 2.0.4  | :x: Not Supported         |\n| [Halite 2](https://github.com/paragonie/halite/tree/v2.2)    | 7.0.0 | 1.0.9     | 1.0.6          | :x: Not Supported         |\n| [Halite 1](https://github.com/paragonie/halite/tree/v1.x)    | 5.6.0 | 1.0.6     | 1.0.2          | :x: Not Supported         |\n\nNote: Halite 5.0.x works on PHP 8.0, but performance is worse than on PHP 8.1.\n\nIf you need a version of Halite before 5.1, see the documentation relevant to that\nparticular branch.\n\n**To install Halite, you first need to [install libsodium](https://paragonie.com/book/pecl-libsodium/read/00-intro.md#installing-libsodium).**\nYou may or may not need the PHP extension. For most people, this means running...\n\n    sudo apt-get install php7.2-sodium\n\n...or an equivalent command for your operating system and PHP version.\n\nIf you're stuck, [this step-by-step guide contributed by @aolko](doc/Install-Guides/Ubuntu.md) may be helpful.\n\nOnce you have the prerequisites installed, install Halite through [Composer](https://getcomposer.org/doc/00-intro.md):\n\n    composer require paragonie/halite:^5\n\n### Commercial Support for Older Halite Versions\n\nFree (gratis) support for Halite only extends to the most recent major version (currently 5).\n\nIf your company requires support for an older version of Halite,\n[contact Paragon Initiative Enterprises](https://paragonie.com/contact) to inquire about\ncommercial support options.\n\nIf you need an easy way to migrate from older versions of Halite, check out [halite-legacy](https://github.com/paragonie/halite-legacy).\n\n## Using Halite in Your Project\n\nCheck out the [documentation](doc). The basic Halite API is designed for simplicity:\n\n  * Encryption\n    * Symmetric\n       * `Symmetric\\Crypto::encrypt`([`HiddenString`](doc/Classes/HiddenString.md), [`EncryptionKey`](doc/Classes/Symmetric/EncryptionKey.md)): `string`\n       * `Symmetric\\Crypto::encryptWithAD`([`HiddenString`](doc/Classes/HiddenString.md), [`EncryptionKey`](doc/Classes/Symmetric/EncryptionKey.md), `string`): `string`\n       * `Symmetric\\Crypto::decrypt`(`string`, [`EncryptionKey`](doc/Classes/Symmetric/EncryptionKey.md)): [`HiddenString`](doc/Classes/HiddenString.md)\n       * `Symmetric\\Crypto::decryptWithAD`(`string`, [`EncryptionKey`](doc/Classes/Symmetric/EncryptionKey.md), `string`): [`HiddenString`](doc/Classes/HiddenString.md)\n    * Asymmetric\n       * Anonymous\n         * `Asymmetric\\Crypto::seal`([`HiddenString`](doc/Classes/HiddenString.md), [`EncryptionPublicKey`](doc/Classes/Asymmetric/EncryptionPublicKey.md)): `string`\n         * `Asymmetric\\Crypto::unseal`(`string`, [`EncryptionSecretKey`](doc/Classes/Asymmetric/EncryptionSecretKey.md)): [`HiddenString`](doc/Classes/HiddenString.md)\n       * Authenticated\n         * `Asymmetric\\Crypto::encrypt`([`HiddenString`](doc/Classes/HiddenString.md), [`EncryptionSecretKey`](doc/Classes/Asymmetric/EncryptionSecretKey.md), [`EncryptionPublicKey`](doc/Classes/Asymmetric/EncryptionPublicKey.md)): `string`\n         * `Asymmetric\\Crypto::encryptWithAD`([`HiddenString`](doc/Classes/HiddenString.md), [`EncryptionSecretKey`](doc/Classes/Asymmetric/EncryptionSecretKey.md), [`EncryptionPublicKey`](doc/Classes/Asymmetric/EncryptionPublicKey.md), `string`): `string`\n         * `Asymmetric\\Crypto::decrypt`(`string`, [`EncryptionSecretKey`](doc/Classes/Asymmetric/EncryptionSecretKey.md), [`EncryptionPublicKey`](doc/Classes/Asymmetric/EncryptionPublicKey.md)): [`HiddenString`](doc/Classes/HiddenString.md)\n         * `Asymmetric\\Crypto::decryptWithAD`(`string`, [`EncryptionSecretKey`](doc/Classes/Asymmetric/EncryptionSecretKey.md), [`EncryptionPublicKey`](doc/Classes/Asymmetric/EncryptionPublicKey.md), `string`): [`HiddenString`](doc/Classes/HiddenString.md)\n  * Authentication\n    * Symmetric\n       * `Symmetric\\Crypto::authenticate`(`string`, [`AuthenticationKey`](doc/Classes/Symmetric/AuthenticationKey.md)): `string`\n       * `Symmetric\\Crypto::verify`(`string`, [`AuthenticationKey`](doc/Classes/Symmetric/AuthenticationKey.md), `string`): `bool`\n    * Asymmetric\n       * `Asymmetric\\Crypto::sign`(`string`, [`SignatureSecretKey`](doc/Classes/Asymmetric/SignatureSecretKey.md)): `string`\n       * `Asymmetric\\Crypto::verify`(`string`, [`SignaturePublicKey`](doc/Classes/Asymmetric/SignaturePublicKey.md), `string`): `bool`\n\n### Example: Encrypting and Decrypting a message\n\nFirst, generate and persist a key exactly once:\n\n```php\n<?php\nuse ParagonIE\\Halite\\KeyFactory;\n\n$encKey = KeyFactory::generateEncryptionKey();\nKeyFactory::save($encKey, '/path/outside/webroot/encryption.key');\n```\n\nAnd then you can encrypt/decrypt messages like so:\n\n```php\n<?php\nuse ParagonIE\\Halite\\KeyFactory;\nuse ParagonIE\\Halite\\Symmetric\\Crypto as Symmetric;\nuse ParagonIE\\HiddenString\\HiddenString;\n\n$encryptionKey = KeyFactory::loadEncryptionKey('/path/outside/webroot/encryption.key');\n\n$message = new HiddenString('This is a confidential message for your eyes only.');\n$ciphertext = Symmetric::encrypt($message, $encryptionKey);\n\n$decrypted = Symmetric::decrypt($ciphertext, $encryptionKey);\n\nvar_dump($decrypted->getString() === $message->getString()); // bool(true)\n```\n\nThis should produce something similar to:\n\n    MUIDAEpQznohvNlQ-ZRk-ZZ59Mmox75D_FgAIrXY2cUfStoeL-GIeAe0m-uaeURQdPsVmc5XxRw3-2x5ZAsZH_es37qqFuLFjUI-XK9uG0s30YTsorWfpHdbnqzhRuUOI09c-cKrfMQkNBNm0dDDwZazjTC48zWikRHSHXg8NXerVDebzng1aufc_S-osI_zQuLbZDODujEnpbPZhMMcm4-SWuyVXcBPdGZolJyT\n\n#### Cryptographic Keys in Halite\n\n> **Important**: Halite works with `Key` objects, not strings.\n\nIf you attempt to `echo` a key object, you will get an empty string\nrather than its contents. If you attempt to `var_dump()` a key object,\nyou will just get some facts about the type of key it is.\n \nYou must invoke `$obj->getRawKeyMaterial()` explicitly if you want\nto inspect a key's raw binary contents. This is not recommended for\nmost use cases.\n\n### Example: Generating a key from a password\n\n```php\n<?php\nuse ParagonIE\\Halite\\KeyFactory;\nuse ParagonIE\\HiddenString\\HiddenString;\n\n$passwd = new HiddenString('correct horse battery staple');\n// Use random_bytes(16); to generate the salt:\n$salt = \"\\xdd\\x7b\\x1e\\x38\\x75\\x9f\\x72\\x86\\x0a\\xe9\\xc8\\x58\\xf6\\x16\\x0d\\x3b\";\n\n$encryptionKey = KeyFactory::deriveEncryptionKey($passwd, $salt);\n```\n\nA key derived from a password can be used in place of one randomly generated.\n\n### Example: Encrypting a large file on a system with low memory\n\nHalite includes a file cryptography class that utilizes a streaming API to\nallow large files (e.g. gigabytes) be encrypted on a system with very little\navailable memory (i.e. less than 8 MB).\n\n```php\n<?php\nuse ParagonIE\\Halite\\File;\nuse ParagonIE\\Halite\\KeyFactory;\n\n$encryptionKey = KeyFactory::loadEncryptionKey('/path/outside/webroot/encryption.key');\n\nFile::encrypt('input.txt', 'output.txt', $encryptionKey);\n```\n\n## Common Support Issues\n\n### Uncaught SodiumException: Cannot Wipe Memory\n\n> PHP Fatal error: Uncaught SodiumException: This is not implemented, as it is not possible to securely wipe memory from PHP\n\nThe solution to this is to make sure libsodium is installed/enabled. See above in this\nREADME for more information. \n\n## Support Contracts\n\nIf your company uses this library in their products or services, you may be\ninterested in [purchasing a support contract from Paragon Initiative Enterprises](https://paragonie.com/enterprise).\n"
 },
 {
  "repo": "jedisct1/libsodium",
  "language": "C",
  "readme_contents": "[![GitHub CI](https://github.com/jedisct1/libsodium/workflows/CI/badge.svg)](https://github.com/jedisct1/libsodium/actions)\n[![Windows build status](https://ci.appveyor.com/api/projects/status/fu8s2elx25il98hj?svg=true)](https://ci.appveyor.com/project/jedisct1/libsodium)\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/2397/badge.svg)](https://scan.coverity.com/projects/2397)\n[![Azure build status](https://jedisct1.visualstudio.com/Libsodium/_apis/build/status/jedisct1.libsodium?branchName=stable)](https://jedisct1.visualstudio.com/Libsodium/_build/latest?definitionId=3&branchName=stable)\n[![CodeQL scan](https://github.com/jedisct1/libsodium/workflows/CodeQL%20scan/badge.svg)](https://github.com/jedisct1/libsodium/actions)\n\n![libsodium](https://raw.github.com/jedisct1/libsodium/master/logo.png)\n============\n\nSodium is a new, easy-to-use software library for encryption,\ndecryption, signatures, password hashing and more.\n\nIt is a portable, cross-compilable, installable, packageable\nfork of [NaCl](http://nacl.cr.yp.to/), with a compatible API, and an\nextended API to improve usability even further.\n\nIts goal is to provide all of the core operations needed to build\nhigher-level cryptographic tools.\n\nSodium supports a variety of compilers and operating systems,\nincluding Windows (with MingW or Visual Studio, x86 and x64), iOS, Android,\nas well as Javascript and Webassembly.\n\n## Documentation\n\nThe documentation is available on Gitbook and built from the\n[libsodium-doc](https://github.com/jedisct1/libsodium-doc) repository:\n\n* [libsodium documentation](https://doc.libsodium.org) - online, requires Javascript.\n\n## Integrity Checking\n\nThe integrity checking instructions (including the signing key for libsodium)\nare available in the [installation](https://download.libsodium.org/doc/installation#integrity-checking)\nsection of the documentation.\n\n## Community\n\nA mailing-list is available to discuss libsodium.\n\nIn order to join, just send a random mail to `sodium-subscribe` {at}\n`pureftpd` {dot} `org`.\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](https://github.com/jedisct1/libsodium/graphs/contributors)].\n\n<a href=\"https://github.com/jedisct1/libsodium/graphs/contributors\"><img src=\"https://opencollective.com/libsodium/contributors.svg?width=890&button=false\" /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/libsodium/contribute)]\n\n#### Individuals <a href=\"https://opencollective.com/libsodium\"><img src=\"https://opencollective.com/libsodium/individuals.svg?width=890\"></a>\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/libsodium/contribute)]\n\n<a href=\"https://opencollective.com/libsodium/organization/0/website\"><img src=\"https://opencollective.com/libsodium/organization/0/avatar.svg\"></a>\n\n## License\n\n[ISC license](https://en.wikipedia.org/wiki/ISC_license).\n"
 },
 {
  "repo": "bitchan/eccrypto",
  "language": "JavaScript",
  "readme_contents": "# eccrypto [![Build Status](https://travis-ci.org/bitchan/eccrypto.svg?branch=master)](https://travis-ci.org/bitchan/eccrypto)\n\n[![NPM](https://nodei.co/npm/eccrypto.png)](https://www.npmjs.com/package/eccrypto)\n\nJavaScript Elliptic curve cryptography library for both browserify and node.\n\n## Motivation\n\nThere is currently not any isomorphic ECC library which provides ECDSA, ECDH and ECIES for both Node.js and Browser and uses the fastest implementation available (e.g. [secp256k1-node](https://github.com/wanderer/secp256k1-node) is much faster than other libraries but can be used only on Node.js). So `eccrypto` is an attempt to create one.\n\n## Implementation details\n\nWith the help of browserify `eccrypto` provides different implementations for Browser and Node.js with the same API. Because WebCryptoAPI defines asynchronous promise-driven API, the implementation for Node needs to use promises too.\n\n* Use Node.js crypto module/library bindings where possible\n* Use WebCryptoAPI where possible\n* Promise-driven API\n* Only secp256k1 curve, only SHA-512 (KDF), HMAC-SHA-256 (HMAC) and AES-256-CBC for ECIES\n* Compressed key support\n\n### Native crypto API limitations\n\n#### crypto\n\nECDH only works in Node 0.11+ (see https://github.com/joyent/node/pull/5854), ECDSA only supports keys in PEM format (see https://github.com/joyent/node/issues/6904) and ECIES is not supported at all.\n\n#### WebCryptoAPI\n\nECDSA and ECDH are supported in Chrome [only on Windows](https://sites.google.com/a/chromium.org/dev/blink/webcrypto#TOC-Supported-algorithms-as-of-Chrome-41-) (see also [bug 338883](https://code.google.com/p/chromium/issues/detail?id=338883)), aren't supported by Firefox (fixed only in 36.0+, see [bug 1034854](https://bugzilla.mozilla.org/show_bug.cgi?id=1034854); see also [feature matrix](https://docs.google.com/spreadsheet/ccc?key=0AiAcidBZRLxndE9LWEs2R1oxZ0xidUVoU3FQbFFobkE#gid=1)) and ECIES is not defined at all in WebCryptoAPI draft. Also WebCryptoAPI [currently defines](http://www.w3.org/TR/WebCryptoAPI/#EcKeyGenParams-dictionary) only curves recommended by NIST meaning that secp256k1 (K-256) curve is not supported (see also: [[1]](http://lists.w3.org/Archives/Public/public-webcrypto-comments/2013Dec/0001.html), [[2]](https://bugzilla.mozilla.org/show_bug.cgi?id=1051509)).\n\nSo we use [seck256k1](https://www.npmjs.com/package/secp256k1) library in Node for ECDSA, [elliptic](https://www.npmjs.com/package/elliptic) in Browser for ECDSA and ECDH and implement ECIES manually with the help of native crypto API.\n\n## Possible future goals\n\n* Support other curves/KDF/MAC/symmetric encryption schemes\n\n## Usage\n\n### ECDSA\n\n```js\nvar crypto = require(\"crypto\");\nvar eccrypto = require(\"eccrypto\");\n\n// A new random 32-byte private key.\nvar privateKey = eccrypto.generatePrivate();\n// Corresponding uncompressed (65-byte) public key.\nvar publicKey = eccrypto.getPublic(privateKey);\n\nvar str = \"message to sign\";\n// Always hash you message to sign!\nvar msg = crypto.createHash(\"sha256\").update(str).digest();\n\neccrypto.sign(privateKey, msg).then(function(sig) {\n  console.log(\"Signature in DER format:\", sig);\n  eccrypto.verify(publicKey, msg, sig).then(function() {\n    console.log(\"Signature is OK\");\n  }).catch(function() {\n    console.log(\"Signature is BAD\");\n  });\n});\n```\n\n### ECDH\n\n```js\nvar eccrypto = require(\"eccrypto\");\n\nvar privateKeyA = eccrypto.generatePrivate();\nvar publicKeyA = eccrypto.getPublic(privateKeyA);\nvar privateKeyB = eccrypto.generatePrivate();\nvar publicKeyB = eccrypto.getPublic(privateKeyB);\n\neccrypto.derive(privateKeyA, publicKeyB).then(function(sharedKey1) {\n  eccrypto.derive(privateKeyB, publicKeyA).then(function(sharedKey2) {\n    console.log(\"Both shared keys are equal:\", sharedKey1, sharedKey2);\n  });\n});\n```\n\n### ECIES\n\n```js\nvar eccrypto = require(\"eccrypto\");\n\nvar privateKeyA = eccrypto.generatePrivate();\nvar publicKeyA = eccrypto.getPublic(privateKeyA);\nvar privateKeyB = eccrypto.generatePrivate();\nvar publicKeyB = eccrypto.getPublic(privateKeyB);\n\n// Encrypting the message for B.\neccrypto.encrypt(publicKeyB, Buffer.from(\"msg to b\")).then(function(encrypted) {\n  // B decrypting the message.\n  eccrypto.decrypt(privateKeyB, encrypted).then(function(plaintext) {\n    console.log(\"Message to part B:\", plaintext.toString());\n  });\n});\n\n// Encrypting the message for A.\neccrypto.encrypt(publicKeyA, Buffer.from(\"msg to a\")).then(function(encrypted) {\n  // A decrypting the message.\n  eccrypto.decrypt(privateKeyA, encrypted).then(function(plaintext) {\n    console.log(\"Message to part A:\", plaintext.toString());\n  });\n});\n```\n\n## License\n\neccrypto - JavaScript Elliptic curve cryptography library\n\nWritten in 2014-2015 by Kagami Hiiragi <kagami@genshiken.org>\n\nTo the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n\nYou should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
 },
 {
  "repo": "open-quantum-safe/liboqs",
  "language": "C",
  "readme_contents": "[AppVeyor](https://ci.appveyor.com/project/dstebila/liboqs): ![Build status image](https://ci.appveyor.com/api/projects/status/9d2ts78x88r8wnii/branch/main?svg=true), [CircleCI](https://circleci.com/gh/open-quantum-safe/liboqs/tree/main): ![Build status image](https://circleci.com/gh/open-quantum-safe/liboqs/tree/main.svg?style=svg), [TravisCI](https://travis-ci.com/github/open-quantum-safe/liboqs): [![Build Status](https://travis-ci.com/open-quantum-safe/liboqs.svg?branch=main)](https://travis-ci.com/open-quantum-safe/liboqs)\n\nliboqs\n======================\n\nliboqs is an open source C library for quantum-safe cryptographic algorithms.\n\n- [Overview](#overview)\n- [Status](#status)\n  * [Supported algorithms](#supported-algorithms)\n  * [Limitations and Security](#limitations-and-security)\n- [Quickstart](#quickstart)\n  * [Linux / macOS](#linuxmacOS)\n  * [Windows](#windows)\n  * [Cross compilation](#cross-compilation)\n- [Documentation](#documentation)\n- [Contributing](#contributing)\n- [License](#license)\n- [Acknowledgements](#acknowledgements)\n\n## Overview\n\nliboqs provides:\n\n- a collection of open source implementations of quantum-safe key encapsulation mechanism (KEM) and digital signature algorithms; the full list can be found [below](#supported-algorithms)\n- a common API for these algorithms\n- a test harness and benchmarking routines\n\nliboqs is part of the **Open Quantum Safe (OQS)** project led by [Douglas Stebila](https://www.douglas.stebila.ca/research/) and [Michele Mosca](http://faculty.iqc.uwaterloo.ca/mmosca/), which aims to develop and integrate into applications quantum-safe cryptography to facilitate deployment and testing in real world contexts. In particular, OQS provides prototype integrations of liboqs into TLS and SSH, through [OpenSSL](https://github.com/open-quantum-safe/openssl) and [OpenSSH](https://github.com/open-quantum-safe/openssh-portable).\n\nMore information on OQS can be found [here](https://openquantumsafe.org/) and in the [associated](https://openquantumsafe.org/papers/SAC-SteMos16.pdf) [whitepapers](https://openquantumsafe.org/papers/NISTPQC-CroPaqSte19.pdf).\n\n## Status\n\n### Supported Algorithms\n\nDetails on each supported algorithm can be found in the [docs/algorithms](https://github.com/open-quantum-safe/liboqs/tree/main/docs/algorithms) folder.\n\n#### Key encapsulation mechanisms\n\n<!--- OQS_TEMPLATE_FRAGMENT_LIST_KEXS_START -->\n- **BIKE**: BIKE-L1, BIKE-L3\n- **Classic McEliece**: Classic-McEliece-348864\u2020, Classic-McEliece-348864f\u2020, Classic-McEliece-460896\u2020, Classic-McEliece-460896f\u2020, Classic-McEliece-6688128\u2020, Classic-McEliece-6688128f\u2020, Classic-McEliece-6960119\u2020, Classic-McEliece-6960119f\u2020, Classic-McEliece-8192128\u2020, Classic-McEliece-8192128f\u2020\n- **FrodoKEM**: FrodoKEM-640-AES, FrodoKEM-640-SHAKE, FrodoKEM-976-AES, FrodoKEM-976-SHAKE, FrodoKEM-1344-AES, FrodoKEM-1344-SHAKE\n- **HQC**: HQC-128, HQC-192, HQC-256\u2020\n- **Kyber**: Kyber512, Kyber512-90s, Kyber768, Kyber768-90s, Kyber1024, Kyber1024-90s\n- **NTRU**: NTRU-HPS-2048-509, NTRU-HPS-2048-677, NTRU-HPS-4096-821, NTRU-HPS-4096-1229, NTRU-HRSS-701, NTRU-HRSS-1373\n- **NTRU-Prime**: ntrulpr653, ntrulpr761, ntrulpr857, ntrulpr1277, sntrup653, sntrup761, sntrup857, sntrup1277\n- **SABER**: LightSaber-KEM, Saber-KEM, FireSaber-KEM\n- **SIKE**: SIDH-p434, SIDH-p434-compressed, SIDH-p503, SIDH-p503-compressed, SIDH-p610, SIDH-p610-compressed, SIDH-p751, SIDH-p751-compressed, SIKE-p434, SIKE-p434-compressed, SIKE-p503, SIKE-p503-compressed, SIKE-p610, SIKE-p610-compressed, SIKE-p751, SIKE-p751-compressed\n<!--- OQS_TEMPLATE_FRAGMENT_LIST_KEXS_END -->\n\n#### Signature schemes\n\n<!--- OQS_TEMPLATE_FRAGMENT_LIST_SIGS_START -->\n- **CRYSTALS-Dilithium**: Dilithium2, Dilithium3, Dilithium5, Dilithium2-AES, Dilithium3-AES, Dilithium5-AES\n- **Falcon**: Falcon-512, Falcon-1024\n- **Picnic**: picnic\\_L1\\_FS, picnic\\_L1\\_UR, picnic\\_L1\\_full, picnic\\_L3\\_FS, picnic\\_L3\\_UR, picnic\\_L3\\_full, picnic\\_L5\\_FS, picnic\\_L5\\_UR, picnic\\_L5\\_full, picnic3\\_L1, picnic3\\_L3, picnic3\\_L5\n- **Rainbow**: Rainbow-I-Classic, Rainbow-I-Circumzenithal, Rainbow-I-Compressed, Rainbow-III-Classic\u2020, Rainbow-III-Circumzenithal\u2020, Rainbow-III-Compressed\u2020, Rainbow-V-Classic\u2020, Rainbow-V-Circumzenithal\u2020, Rainbow-V-Compressed\u2020\n- **SPHINCS+-Haraka**: SPHINCS+-Haraka-128f-robust, SPHINCS+-Haraka-128f-simple, SPHINCS+-Haraka-128s-robust, SPHINCS+-Haraka-128s-simple, SPHINCS+-Haraka-192f-robust, SPHINCS+-Haraka-192f-simple, SPHINCS+-Haraka-192s-robust, SPHINCS+-Haraka-192s-simple, SPHINCS+-Haraka-256f-robust, SPHINCS+-Haraka-256f-simple, SPHINCS+-Haraka-256s-robust, SPHINCS+-Haraka-256s-simple\n- **SPHINCS+-SHA256**: SPHINCS+-SHA256-128f-robust, SPHINCS+-SHA256-128f-simple, SPHINCS+-SHA256-128s-robust, SPHINCS+-SHA256-128s-simple, SPHINCS+-SHA256-192f-robust, SPHINCS+-SHA256-192f-simple, SPHINCS+-SHA256-192s-robust, SPHINCS+-SHA256-192s-simple, SPHINCS+-SHA256-256f-robust, SPHINCS+-SHA256-256f-simple, SPHINCS+-SHA256-256s-robust, SPHINCS+-SHA256-256s-simple\n- **SPHINCS+-SHAKE256**: SPHINCS+-SHAKE256-128f-robust, SPHINCS+-SHAKE256-128f-simple, SPHINCS+-SHAKE256-128s-robust, SPHINCS+-SHAKE256-128s-simple, SPHINCS+-SHAKE256-192f-robust, SPHINCS+-SHAKE256-192f-simple, SPHINCS+-SHAKE256-192s-robust, SPHINCS+-SHAKE256-192s-simple, SPHINCS+-SHAKE256-256f-robust, SPHINCS+-SHAKE256-256f-simple, SPHINCS+-SHAKE256-256s-robust, SPHINCS+-SHAKE256-256s-simple\n<!--- OQS_TEMPLATE_FRAGMENT_LIST_SIGS_END -->\n\nNote that for algorithms marked with a dagger (\u2020), liboqs contains at least one implementation that uses a large amount of stack space; this may cause failures when run in threads or in constrained environments. For more information, consult the algorithm information sheets in the [docs/algorithms](https://github.com/open-quantum-safe/liboqs/tree/main/docs/algorithms) folder.\n\n### Limitations and Security\n\nWhile at the time of this writing there are no vulnerabilities known in any of the quantum-safe algorithms used in this library, caution is advised when deploying quantum-safe algorithms as most of the algorithms and software have not been subject to the same degree of scrutiny as for currently deployed algorithms. Particular attention should be paid to guidance provided by the standards community, especially from the NIST [Post-Quantum Cryptography Standardization](https://csrc.nist.gov/Projects/Post-Quantum-Cryptography/Post-Quantum-Cryptography-Standardization) project.  As research advances, the supported algorithms may see rapid changes in their security, and may even prove insecure against both classical and quantum computers.\n\nliboqs does not intend to \"pick winners\": algorithm support is informed by the NIST PQC standardization project. We strongly recommend that applications and protocols rely on the outcomes of ths effort when deploying post-quantum cryptography.\n\nWe realize some parties may want to deploy quantum-safe cryptography prior to the conclusion of the NIST PQC standardization project.  We strongly recommend such attempts make use of so-called **hybrid cryptography**, in which quantum-safe public-key algorithms are used alongside traditional public key algorithms (like RSA or elliptic curves) so that the solution is at least no less secure than existing traditional cryptography.\n\n**WE DO NOT CURRENTLY RECOMMEND RELYING ON THIS LIBRARY IN A PRODUCTION ENVIRONMENT OR TO PROTECT ANY SENSITIVE DATA.** This library is meant to help with research and prototyping.  While we make a best-effort approach to avoid security bugs, this library has not received the level of auditing and analysis that would be necessary to rely on it for high security use.\n\n## Quickstart\n\n### Linux/macOS\n\n1. Install dependencies:\n\n\tOn Ubuntu:\n\n\t\t sudo apt install astyle cmake gcc ninja-build libssl-dev python3-pytest python3-pytest-xdist unzip xsltproc doxygen graphviz python3-yaml valgrind\n\n\tOn macOS, using a package manager of your choice (we've picked Homebrew):\n\n\t\tbrew install cmake ninja openssl@1.1 wget doxygen graphviz astyle valgrind\n\t\tpip3 install pytest pytest-xdist pyyaml\n\n\tNote that, if you want liboqs to use OpenSSL for various symmetric crypto algorithms (AES, SHA-2, etc.) then you must have OpenSSL version 1.1.1 or higher.\n\n2. Get the source:\n\n\t\tgit clone -b main https://github.com/open-quantum-safe/liboqs.git\n\t\tcd liboqs\n\n\tand build:\n\n\t\tmkdir build && cd build\n\t\tcmake -GNinja ..\n\t\tninja\n\nVarious `cmake` build options to customize the resultant artifacts are available and are [documented in CONFIGURE.md](CONFIGURE.md). All supported options are also listed in the `.CMake/alg-support.cmake` file, and can be viewed by running `cmake -LAH ..` in the `build` directory.\n\nThe following instructions assume we are in `build`.\n\n3. By default the main build result is `lib/liboqs.a`, a static library. If you want to build a shared/dynamic library, append [`-DBUILD_SHARED_LIBS=ON`](CONFIGURE.md#build_shared_libs) to the `cmake -GNinja ..` command above and the result will be `lib/liboqs.so|dylib|dll`. The public headers are located in the `include` directory. There are also a variety of programs built under the `tests` directory:\n\n\t- `test_kem`: Simple test harness for key encapsulation mechanisms\n\t- `test_sig`: Simple test harness for key signature schemes\n\t- `test_kem_mem`: Simple test harness for checking memory consumption of key encapsulation mechanisms\n\t- `test_sig_mem`: Simple test harness for checking memory consumption of key signature schemes\n\t- `kat_kem`: Program that generates known answer test (KAT) values for key encapsulation mechanisms using the same procedure as the NIST submission requirements, for checking against submitted KAT values using `tests/test_kat.py`\n\t- `kat_sig`: Program that generates known answer test (KAT) values for signature schemes using the same procedure as the NIST submission requirements, for checking against submitted KAT values using `tests/test_kat.py`\n\t- `speed_kem`: Benchmarking program for key encapsulation mechanisms; see `./speed_kem --help` for usage instructions\n\t- `speed_sig`: Benchmarking program for signature mechanisms; see `./speed_sig --help` for usage instructions\n\t- `example_kem`: Minimal runnable example showing the usage of the KEM API\n\t- `example_sig`: Minimal runnable example showing the usage of the signature API\n\t- `test_aes`, `test_sha3`: Simple test harnesses for crypto sub-components\n\t- `test_portability`: Simple test harnesses for checking cross-CPU code portability; requires presence of `qemu`; proper operation validated only on Ubuntu\n\n\tThe complete test suite can be run using\n\n\t\tninja run_tests\n\n4. To generate HTML documentation of the API, run:\n\n\t\tninja gen_docs\n\n\tThen open `docs/doxygen/html/index.html` in your web browser.\n\n4. Finally, `ninja install` can be run to install the built library and `include` files to a location of choice, which can be specified by passing the `-DCMAKE_INSTALL_PREFIX=<dir>` option to `cmake` at configure time.\n\n### Windows\n\nBinaries can be generated using Visual Studio 2019 with the [CMake Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools) extension installed. The same options as explained above for Linux/macOS can be used and build artifacts are generated in the specified `build` folders.\n\nIf you want to create Visual Studio build files, e.g., if not using `ninja`, be sure to _not_ pass the parameter `-GNinja` to the `cmake` command as exemplified above. You can then build all components using `msbuild`, e.g. as follows: `msbuild ALL_BUILD.vcxproj` and install all artifacts e.g. using this command `msbuild INSTALL.vcxproj`.\n\n\n### Cross compilation\n\nYou can cross compile liboqs for various platforms. Detailed information is available [in the Wiki](https://github.com/open-quantum-safe/liboqs/wiki/Platform-specific-notes-for-building-liboqs#cross-compiling).\n\n## Documentation\n\nMore detailed information on building, optional build parameters, example applications, coding conventions and more can be found in the [wiki](https://github.com/open-quantum-safe/liboqs/wiki).\n\n## Contributing\n\nContributions that meet the acceptance criteria are gratefully welcomed. See our [Contributing Guide](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-Guide) for more details.\n\n## License\n\nliboqs is licensed under the MIT License; see [LICENSE.txt](https://github.com/open-quantum-safe/liboqs/blob/main/LICENSE.txt) for details.\n\nliboqs includes some third party libraries or modules that are licensed differently; the corresponding subfolder contains the license that applies in that case.  In particular:\n\n- `.CMake/CMakeDependentOption.cmake`: BSD 3-Clause License\n- `src/common/common.c`: includes portions which are Apache License v2.0\n- `src/common/crypto/aes/aes_c.c`: public domain or any OSI-approved license\n- `src/common/crypto/aes/aes*_ni.c`: public domain\n- `src/common/crypto/sha2/sha2_c.c`: public domain\n- `src/common/crypto/sha3/xkcp_low` : CC0 (public domain), except `brg_endian.h` and `KeccakP-1600-AVX2.s`\n- `src/common/crypto/sha3/xkcp_low/.../brg_endian.h` : BSD 3-Clause License\n- `src/common/crypto/sha3/xkcp_low/.../KeccakP-1600-AVX2.s` : BSD-like [CRYPTOGAMS license](http://www.openssl.org/~appro/cryptogams/)\n- `src/common/rand/rand_nist.c`: See file\n- `src/kem/bike/additional`: Apache License v2.0\n- `src/kem/classic_mceliece/pqclean_*`: public domain\n- `src/kem/kyber/pqclean_*`: public domain\n- `src/kem/ntru/pqclean_*`: public domain\n- `src/kem/saber/pqclean_*`: public domain\n- `src/sig/dilithium/pqclean_*`: public domain\n- `src/sig/rainbow/pqclean_*`: CC0 (public domain)\n- `src/sig/sphincs/pqclean_*`: CC0 (public domain)\n\n## Acknowledgements\n\nVarious companies, including Amazon Web Services, Cisco Systems, evolutionQ, IBM Research, and Microsoft Research have dedicated programmer time to contribute source code to OQS. [Various people](https://github.com/open-quantum-safe/liboqs/blob/main/CONTRIBUTORS) have contributed source code to liboqs.\n\nFinancial support for the development of Open Quantum Safe has been provided by Amazon Web Services, the Canadian Centre for Cyber Security, the Unitary Fund, the NGI Assure Fund, and VeriSign Inc.\n\nResearch projects which developed specific components of OQS have been supported by various research grants, including funding from the Natural Sciences and Engineering Research Council of Canada (NSERC); see the source papers for funding acknowledgments.\n"
 },
 {
  "repo": "DaGenix/rust-crypto",
  "language": "Rust",
  "readme_contents": "# Rust-Crypto\n\n[![Build Status](https://travis-ci.org/DaGenix/rust-crypto.png?branch=master)](https://travis-ci.org/DaGenix/rust-crypto)\n\nA (mostly) pure-Rust implementation of various common cryptographic algorithms.\n\nRust-Crypto seeks to create practical, auditable, pure-Rust implementations of common cryptographic\nalgorithms with a minimum amount of assembly code where appropriate. The x86-64, x86, and\nARM architectures are supported, although the x86-64 architecture receives the most testing.\n\nRust-Crypto targets the current, stable build of Rust.\nIf you are having issues while using an older version, please try upgrading to the latest stable.\n\nRust-Crypto has not been thoroughly\naudited for correctness, so any use where security is important is not recommended at this time.\n\n## Usage\n\nTo use Rust-Crypto, add the following to your Cargo.toml:\n\n```toml\n[dependencies]\nrust-crypto = \"^0.2\"\n```\n\nand the following to your crate root:\n\n```rust\nextern crate crypto;\n```\n\n## Contributions\n\nContributions are extremely welcome. The most significant needs are help\nadding documentation, implementing new algorithms,\nand general cleanup and improvement of the code. By submitting a pull request you are agreeing to\nmake you work available under the license\nterms of the Rust-Crypto project.\n\n## License\n\nRust-Crypto is dual licensed under the MIT and Apache 2.0 licenses, the same licenses\nas the Rust compiler.\n\n## Algorithms\n\nRust-Crypto already supports a significant number of algorithms and with your help\nit will support even more in the future. Currently supported algorithms include:\n\n* AES\n* Bcrypt\n* BLAKE2b\n* BLAKE2s\n* Blowfish\n* ChaCha20\n* Curve25519\n* ECB, CBC, and CTR block cipher modes\n* Ed25519\n* Fortuna\n* Ghash\n* HC128\n* HMAC\n* MD5\n* PBKDF2\n* PKCS padding for CBC block cipher mode\n* Poly1305\n* RC4\n* RIPEMD-160\n* Salsa20 and XSalsa20\n* Scrypt\n* Sha1\n* Sha2 (All fixed output size variants)\n* Sha3\n* Sosemanuk\n* Whirlpool\n"
 },
 {
  "repo": "jedisct1/libsodium-doc",
  "language": null,
  "readme_contents": "# The Sodium crypto library \\(libsodium\\)\n\nSodium is a modern, easy-to-use software library for encryption, decryption,\nsignatures, password hashing, and more.\n\nIt is a portable, cross-compilable, installable, and packageable fork of\n[NaCl](http://nacl.cr.yp.to/), with a compatible but extended API to\nimprove usability even further.\n\nIts goal is to provide all of the core operations needed to build higher-level\ncryptographic tools.\n\nSodium is cross-platform and cross-language. It runs on many compilers\nand operating systems, including Windows \\(with MinGW or Visual Studio, x86 and\nx86_64\\), iOS, and Android. JavaScript and WebAssembly versions are also\navailable and fully supported. Furthermore, bindings for all common programming languages\nare available and well-supported.\n\nThe design choices emphasize security and ease of use. But despite the emphasis\non high security, primitives are faster across-the-board than most\nimplementations.\n\n## Downloading libsodium\n\n[libsodium 1.0.18-stable](https://download.libsodium.org/libsodium/releases/) is\nthe latest version.\n\n* [Tarballs and pre-compiled binaries](https://download.libsodium.org/libsodium/releases/)\n* [Github repository](https://github.com/jedisct1/libsodium)\n* [Documentation](https://doc.libsodium.org)\n\n## Mailing list\n\nA mailing list is available to discuss libsodium.\n\nTo join, just send a random email to `sodium-subscribe` {at}\n`pureftpd`{dot}`org`.\n\n## License\n\n[ISC license](https://en.wikipedia.org/wiki/ISC_license).\n\nSee the `LICENSE` file for details.\n\n## Thanks!\n\nSodium is developed by volunteers. We would like to\nespecially thank the following companies and organizations for their\ncontribution:\n\n* [Paragonie Initiative Enterprise](https://paragonie.com/), who donated a Raspberry Pi to ensure that the library works perfectly on this hardware.\n  Thanks!\n* [Private Internet Access](https://www.privateinternetaccess.com), who sponsored a [complete security audit](https://www.privateinternetaccess.com/blog/libsodium-audit-results/). This is amazing, thanks!\n* [Maximilian Blochberger](https://github.com/blochberger) and Joshua Small, who both generously donated $100. This will help cover the infrastructure costs a lot. Thanks again, Max and Joshua!\n\nPeople who designed the primitives and wrote implementations the library is\nbased on can be found in the\n[AUTHORS](https://raw.githubusercontent.com/jedisct1/libsodium/master/AUTHORS)\nfile. This project wouldn't exist without them.\n\nAlso, a huge \"thank you\" to people and companies who contributed bindings for\ntheir favorite programming languages. A list can be found in the\n[THANKS](https://raw.githubusercontent.com/jedisct1/libsodium/master/THANKS)\nfile.\n\nAnother huge \"thank you\" to package maintainers who have been doing an amazing\njob at building packages for many distributions and operating systems.\n\nFinally, thanks to **you** for reading this documentation and for the awesome\nprojects you are going to build with this library!\n"
 },
 {
  "repo": "ankeshanand/neural-cryptography-tensorflow",
  "language": "Python",
  "readme_contents": "**Note**: This repository is no longer maintained. \r\n\r\n# Adversarial Neural Cryptography in [TensorFlow](https://github.com/tensorflow/tensorflow)\r\n\r\nA Tensorflow Flow implementation of Google Brain's recent paper ([Learning to Protect Communications with Adversarial Neural Cryptography.](https://arxiv.org/pdf/1610.06918v1.pdf))\r\n\r\nTwo Neural Networks, Alice and Bob learn to communicate secretly with each other, in presence of an adversary Eve.\r\n\r\n![Setup](assets/diagram.png)\r\n\r\n## Pre-requisites\r\n\r\n* TensorFlow \r\n* Seaborn (for plots)\r\n* Numpy\r\n\r\n## Usage \r\nFirst, ensure you have the dependencies installed.\r\n\r\n    $ pip install -r requirements.txt\r\n\r\nTo train the neural networks, run the `main.py` script.\r\n\r\n    $ python main.py --msg-len 32 --epochs 50\r\n    \r\n    \r\n## Attribution / Thanks\r\n\r\n* carpedm20's DCGAN [implementation](https://github.com/carpedm20/DCGAN-tensorflow) in TensorFlow. \r\n* Liam's [implementation](https://github.com/nlml/adversarial-neural-crypt) of Adversarial Neural Cryptography in Theano. \r\n\r\n## Citing Code\r\nIf you want to cite this code in your work, refer to the following DOI:\r\n\r\n[![DOI](https://zenodo.org/badge/73807045.svg)](https://zenodo.org/badge/latestdoi/73807045)\r\n\r\n## License\r\n\r\nMIT\r\n"
 },
 {
  "repo": "Cathedrow/Cryptosuite",
  "language": "Java",
  "readme_contents": "Cryptosuite is a cryptographic library for Arduino (including SHA and HMAC-SHA)\n\nIt currently supports secure hashing and hashed message authentication using SHA-1, SHA-256, HMAC-SHA-1 and HMAC-SHA-256.\n\nInstallation:\n  Make a 'libraries' directory with your Arduino sketches folder if you do not already have one.\n  Copy the 'Sha' directory into that directory.\n  Restart Arduino to rescan for new libraries.\n\nUsing SHA-1:\n  #include \"sha1.h\"\n  ...\n  uint8_t *hash;\n  Sha1.init();\n  Sha1.print(\"This is a message to hash\");\n  hash = Sha1.result();\n\n  The hash result is then stored in hash[0], hash[1] .. hash[19].\n\nUsing HMAC-SHA-1:\n  #include \"sha1.h\"\n  ...\n  uint8_t *hash;\n  Sha1.initHmac(\"hash key\",8); // key, and length of key in bytes\n  Sha1.print(\"This is a message to hash\");\n  hash = Sha1.resultHmac();\n\n  The hash result is then stored in hash[0], hash[1] .. hash[19].\n\nUsing SHA-256:\n  #include \"sha256.h\"\n  ...\n  uint8_t *hash;\n  Sha256.init();\n  Sha256.print(\"This is a message to hash\");\n  hash = Sha256.result();\n\n  The hash result is then stored in hash[0], hash[1] .. hash[31].\n\nUsing HMAC-SHA-256:\n  #include \"sha256.h\"\n  ...\n  uint8_t *hash;\n  Sha256.initHmac(\"hash key\",8); // key, and length of key in bytes\n  Sha256.print(\"This is a message to hash\");\n  hash = Sha256.resultHmac();\n\n  The hash result is then stored in hash[0], hash[1] .. hash[31].\n\n\nVerification:\n  The provided example code tests against published test vectors.\n  SHA-1: FIPS 180-2, RFC3174 compliant\n  HMAC-SHA-1: FIPS 198a compliant\n  SHA-256: FIPS 180-2, RFC4231 compliant\n  HMAC-SHA-256:  RFC4231 compliant\n"
 },
 {
  "repo": "SimplyDo/cryptography",
  "language": "JavaScript",
  "readme_contents": "Cryptography Project\n\nEncrypt and decrypt any text right in your browser. You can also generate random key phrases from the list of 39,000 English words. Nothing is ever sent to a server!\n\nurl: http://simplydo.com/cryptography\nsources: https://github.com/SimplyDo/cryptography\n\nCreated by Simply Do: http://simplydo.com\n\n\n\nUses various libraries / framework under their respective licenses: \n\nAngularJS by Google - http://angularjs.org/\nCryptoJS - http://code.google.com/p/crypto-js/\nTwitter Bootstrapped - http://twitter.github.com/bootstrap/\nKevin's Word List Page - http://wordlist.sourceforge.net/\n\n\n\nInstructions: \n\nSimply point a web server to the root directory of this repository and view in any modern browser. "
 },
 {
  "repo": "zcash-hackworks/bn",
  "language": "Rust",
  "readme_contents": "# bn [![Crates.io](https://img.shields.io/crates/v/bn.svg)](https://crates.io/crates/bn) [![Build status](https://api.travis-ci.org/zcash/bn.svg)](https://travis-ci.org/zcash/bn)\n\nThis is a [pairing cryptography](https://en.wikipedia.org/wiki/Pairing-based_cryptography) library written in pure Rust. It makes use of the Barreto-Naehrig (BN) curve construction from [[BCTV2015]](https://eprint.iacr.org/2013/879.pdf) to provide two cyclic groups **G<sub>1</sub>** and **G<sub>2</sub>**, with an efficient bilinear pairing:\n\n*e: G<sub>1</sub> \u00d7 G<sub>2</sub> \u2192 G<sub>T</sub>*\n\n## Security warnings\n\nThis library, like other pairing cryptography libraries implementing this construction, is not resistant to side-channel attacks.\n\n## Usage\n\nAdd the `bn` crate to your dependencies in `Cargo.toml`...\n\n```toml\n[dependencies]\nbn = \"0.4.3\"\n```\n\n...and add an `extern crate` declaration to your crate root:\n\n```rust\nextern crate bn;\n```\n\n## API\n\n* `Fr` is an element of F<sub>r</sub>\n* `G1` is a point on the BN curve E/Fq : y^2 = x^3 + b\n* `G2` is a point on the twisted BN curve E'/Fq2 : y^2 = x^3 + b/xi\n* `Gt` is a group element (written multiplicatively) obtained with the `pairing` function over `G1` and `G2`.\n\n### Examples\n\n#### Joux's key agreement protocol\n\nIn a typical Diffie-Hellman key exchange, relying on ECDLP, a three-party key exchange requires two rounds. A single round protocol is possible through the use of a bilinear pairing: given Alice's public key *a*P<sub>1</sub> and Bob's public key *b*P<sub>2</sub>, Carol can compute the shared secret with her private key *c* by *e*(*a*P<sub>1</sub>, *b*P<sub>2</sub>)<sup>c</sup>.\n\n(See `examples/joux.rs` for the full example.)\n\n```rust\n// Generate private keys\nlet alice_sk = Fr::random(rng);\nlet bob_sk = Fr::random(rng);\nlet carol_sk = Fr::random(rng);\n\n// Generate public keys in G1 and G2\nlet (alice_pk1, alice_pk2) = (G1::one() * alice_sk, G2::one() * alice_sk);\nlet (bob_pk1, bob_pk2) = (G1::one() * bob_sk, G2::one() * bob_sk);\nlet (carol_pk1, carol_pk2) = (G1::one() * carol_sk, G2::one() * carol_sk);\n\n// Each party computes the shared secret\nlet alice_ss = pairing(bob_pk1, carol_pk2).pow(alice_sk);\nlet bob_ss = pairing(carol_pk1, alice_pk2).pow(bob_sk);\nlet carol_ss = pairing(alice_pk1, bob_pk2).pow(carol_sk);\n\nassert!(alice_ss == bob_ss && bob_ss == carol_ss);\n```\n\n## License\n\nLicensed under either of\n\n * MIT license, ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n\nat your option.\n\nCopyright 2016 [Zcash Electric Coin Company](https://z.cash/). The Zcash Company promises to maintain the \"bn\" crate on crates.io under this MIT/Apache-2.0 dual license.\n\n### Authors\n\n* [Sean Bowe](https://github.com/ebfull)\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n"
 },
 {
  "repo": "Netflix/NfWebCrypto",
  "language": "C++",
  "readme_contents": "NOTE: THIS PROJECT IS NO LONGER UNDER ACTIVE MAINTAINENCE.\nWith most browsers now providing W3C Web Crypto implementations and Chrome disallowing 3rd-party PPAPI plugins, there is little use for this project. It will remain here on Github indefinitely, but there are no plans to keep any branch updated. The most recent code lives in the 'newInterface' branch.\n\nNetflix WebCrypto (NfWebCrypto)\n================================\n\nNetflix WebCrypto is a polyfill of the [W3C Web Cryptography API](http://www.w3.org/TR/WebCryptoAPI/),\n22 April 2013 Editor's Draft, as a native Chrome PPAPI plugin. Unlike a javascript polyfill, the native implementation\nsupports a stronger security model with no key material exposed to javascript. The goal is to make the Web Crypto\nJavascript API [freely available](http://www.apache.org/licenses/LICENSE-2.0) to web\ndevelopers for experimentation and use prior to its implementation by browser vendors.\n\nCurrently only Google Chrome / Chromium on linux amd64 is supported.\n\nFeatures\n--------\n\nNfWebCrypto does not implement the Web Crypto API in its entirety, due to\nlimitations of browser plugin technology and initial focus on operations and\nalgorithms most useful to Netflix. However, the existing feature set supports\nmany typical and common crypto use cases targeted by the Web Crypto API.\n\nSupported\n\n* Interfaces supported:\n  + Key, KeyPair\n  + KeyOperation\n  + CryptoOperation\n  + CryptoKeys\n* SubtleCrypto interface methods supported\n  + encrypt, decrypt\n  + sign, verify\n  + generateKey\n  + exportKey, importKey\n  + wrapKey, unwrapKey* **\n* CryptoKeys interface methods supported\n  + getKeyByName\n* Key formats supported\n  + symmetric keys: raw and jwk (raw)\n  + asymmetric keys: pkcs#8 (public), spki (private), and jwk (public only)\n* Algorithms supported\n  + SHA-1, SHA-224, SHA-256, SHA-384, SHA-512: digest\n  + HMAC SHA-256: sign, verify, importKey, exportKey, generateKey\n  + AES-128 CBC w/ PKCS#5 padding: encrypt, decrypt, importKey, exportKey, generateKey\n  + RSASSA-PKCS1-v1_5: sign, verify, importKey, generateKey\n  + RSAES-PKCS1-v1_5: encrypt, decrypt, importKey, exportKey, generateKey\n  + Diffie-Hellman: generateKey, deriveKey\n  + RSA-OAEP: wrapKey, unwrapKey\n  + AES-KW: wrapKey, unwrapKey\n  + AES-GCM: encrypt, decrypt, importKey, exportKey, generateKey\n\n*A special \"Kds\" NamedKey bound to the plugin binary and script origin can be used with (un)wrapKey to export/import\nopaque key representations for persistence in HTML5 local storage or equivalent.\n\n**Wrap/Unwrap operations follow the Netflix [KeyWrap Proposal](http://www.w3.org/2012/webcrypto/wiki/KeyWrap_Proposal)\nand support protection of the JWE payload with AES128-GCM.\nIt is be possible to wrap/unwrap the following key types: HMAC SHA-256 and AES-128 CBC.\n\nNot Supported\n\n* The streaming/progressive processing model in not supported\n* Synchronous API's like getRandomValues() are not supported\n* Algorithm normalizing rules are not fully implemented\n\nMoving forward, Netflix will continue to enhance this implementation and try to keep it as much in sync as possible\nwith the latest draft Web Crypto API spec.\n\nRequirements\n------------\n\nLinux\n\n* Ubuntu 12.04 64-bit with build-essential, libssl-dev-1.0.1c or later, and cmake 2.8 or later\n* 64-bit Google Chrome / Chromium R22 or later (tested with R27)\n\nDirectory Tour\n--------------\n\n    base/\n        Common C++ source for both the plugin and crypto component.\n    cmake/\n        Cmake toolchain files.\n        Linux desktop builds use the linux system build tools and libs.\n        Only 64-bit builds are supported for now.\n    crypto/\n        C++ source for the crypto component. The contents of this directory is\n        of primary interest to native devs; the entry point is the CadmiumCrypto\n        class. This directory currently builds to an archive file.\n    crypto/test/\n        Contains C++ gtest unit tests that exercise the CadmiumCrypto class\n        interface. Not fleshed out yet and currently not built.\n    misc/\n        Miscellaneous code to support development. Currently has code to run and\n        debug the Chrome browser with the plugin properly registered.\n    plugin/\n        C++ source of the PPAPI plugin. This code builds to shared library that\n        is dl-loaded by the browser when the plugin is registered. It handles\n        interfacing with the browser, bridging to the crypto thread, and decode/\n        dispatch of JSON messages to and from the browser. Native devs will\n        probably only be interested in the NativeBridge class here.\n    web/nfcrypto.js\n        The javascript front-end for the plugin. The bottom level of this code\n        handles the transport of JSON-serialized messages to and from the\n        plugin, while the top level implements the W3C WebCrypto interface.\n        Native devs will need to change the bottom level to match their bridge\n        API. This source file borrows heavily from PolyCrypt (polycrypt.net)\n    web/test_qa.html\n        The Jasmine HTML unit tests that exercise the javascript WebCrypto\n        API exposed to the javascript client by nfcrypto.js.\n        \n\nHow to Build\n------------\nThe following has been verified on Ubunutu 12.04. cmake 2.8 or later is required.\n\nNOTE: The SYSTEM key mentioned above depends in part on a secret build-time key \nSECRET\\_SYSTEM\\_KEY that for example purposes is hard-coded in linux_common.cmake.\nActual deployments must change this key.\n\n    $ mkdir buildDir\n    $ cd buildDir\n    $ cmake -DCMAKE_TOOLCHAIN_FILE=(repo)/cmake/toolchains/linux64.cmake -DCMAKE_BUILD_TYPE=[Debug|Release] (repo)\n    $ make -j<N>\n\nBuild Results\n-------------\n\nBrowser plugin - This is registered and run within the Chrome browser.\n\n    (buildDir)/plugin/libnfwebcrypto.so\n    (buildDir)/plugin/nfwebcrypto.info\n    \nNative gtest unit test executable (if built). This is run from the command\nline.\n\n    (buildDir)/crypto/test/test\n    \nNative CadmiumCrypto archive. Native apps will link to this archive.\n\n    (buildDir)/crypto/libcadcrypto.a\n\n\nHow to run the Unit Tests\n-------------------------\n\nChrome must be run with a special command line option to register the plugin.\nThe easiest way to do this is to use the provided start.sh script, which employs\nthe .info file generated by the build.\n\nMake a directory and copy or symlink start.sh, libnfwebcrypto.so, and\nnfwebcrypto.info.\n\n    $ mkdir runNfWebCrypto\n    $ cd !$\n    $ ln -s (repo)/misc/desktop/start.sh\n    $ ln -s (buildDir)/plugin/libnfwebcrypto.so\n    $ ln -s (buildDir)/plugin/nfwebcrypto.info\n\nThe start.sh script depends on the chrome executable present at\n/opt/google/chrome/chrome. Edit the script if this is not true. Finally, start\nchrome and run the [unit tests hosted on github](http://netflix.github.io/NfWebCrypto/web/test_qa.html)\nby running the script.\n\n    $ ./start.sh\n    \nNote that there must not be any other chrome instance running in the system\nbefore the script is executed. Otherwise the action will be to just open a new\ntab on the existing instance without loading the plugin.\n\nThe unit tests will run automatically and all should pass.\n\nSample Code\n-----------\n\nHere are some examples of how to use the Web Cryptography API to perform typical\ncrypto operations. These will work once the plugin is installed and enabled. More\ndetailed usage examples may be found in the javascript unit tests.\n\nThe examples below use the following utility functions to convert between string\nand Uint8Array:\n\n```JavaScript\n\n// string to uint array\nfunction text2ua(s) {\n    var escstr = encodeURIComponent(s);\n    var binstr = escstr.replace(/%([0-9A-F]{2})/g, function(match, p1) {\n        return String.fromCharCode('0x' + p1);\n    });\n    var ua = new Uint8Array(binstr.length);\n    Array.prototype.forEach.call(binstr, function (ch, i) {\n        ua[i] = ch.charCodeAt(0);\n    });\n    return ua;\n}\n\n// uint array to string\nfunction ua2text(ua) {\n    var binstr = Array.prototype.map.call(ua, function (ch) {\n        return String.fromCharCode(ch);\n    }).join('');\n    var escstr = binstr.replace(/(.)/g, function (m, p) {\n        var code = p.charCodeAt(p).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = '0' + code;\n        }\n        return '%' + code;\n    });\n    return decodeURIComponent(escstr);\n}\n\n```\n\n### Compute SHA-1 hash ###\n\n```JavaScript\n\n<script src='nfcrypto.js'></script>\n<script>\n    var cryptoSubtle = window.nfCrypto.subtle;\n    var data = \"This is some data to hash\";    \n    var op = cryptoSubtle.digest({ name: \"SHA-1\" }, text2ua(data));\n    op.oncomplete = function (e) {\n        window.alert(\"SHA-1 of \\\"\" + data + \"\\\": \" + btoa(e.target.result));\n    };\n</script>\n\n```\n\n### AES-CBC Encryption / Decryption ###\n\n```JavaScript\n\n<script src='nfcrypto.js'></script>\n<script>\n\n    var cryptoSubtle = window.nfCrypto.subtle;\n    var cleartext = \"This is some cleartext to encrypt.\";\n    var key;\n    var iv = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n                             0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F]);\n    var ciphertext;\n    \n    // generate a non-extractable 128-bit AES key\n    function generateKey() {\n        var genKeyOp = cryptoSubtle.generateKey(\n            { name: \"AES-CBC\", params: { length: 128 } },\n            false\n        );\n        genKeyOp.oncomplete = function (e) {\n            key = e.target.result;\n            encryptData();\n        }\n    }\n    \n    // encrypt cleartext to get ciphertext\n    function encryptData() {\n        var encOp = cryptoSubtle.encrypt({\n            name: \"AES-CBC\",\n            params: { iv: iv }\n        }, key, text2ua(cleartext));\n        encOp.oncomplete = function (e) {\n            cipherText = e.target.result;\n            decryptData();\n        }\n    }\n    \n    // decrypt ciphertext to get cleartext\n    function decryptData() {\n        var encOp = cryptoSubtle.decrypt({\n            name: \"AES-CBC\",\n            params: { iv: iv }\n        }, key, cipherText);\n        encOp.oncomplete = function (e) {\n            var cleartext2 = ua2text(e.target.result);\n            if (cleartext2.valueOf() == cleartext.valueOf()) {\n                window.alert(\"Round-trip encryption/decryption works!\");\n            }\n        }\n    }\n\n    generateKey();\n\n</script>\n\n```\n\n### Sign / Verify Data with HMAC SHA256 ###\n\n```JavaScript\n\n<script src='nfcrypto.js'></script>\n<script>\n\n    var cryptoSubtle = window.nfCrypto.subtle;\n    var data = \"This is some data to sign\",\n        hmacKey,\n        signature;\n\n    function generateKey() {\n        var genOp = cryptoSubtle.generateKey({ name: \"HMAC\", params: { hash: {name: \"SHA-256\"} } });\n        genOp.oncomplete = function (e) {\n            hmacKey = e.target.result;\n            signData();\n        };\n    }\n    \n    function signData() {\n        var signOp = cryptoSubtle.sign(\n            { name: \"HMAC\", params: { hash: \"SHA-256\" } },\n            hmacKey,\n            text2ua(data)\n        );\n        signOp.oncomplete = function (e) {\n            signature = e.target.result;\n            verifyData();\n        };\n    }\n    \n    function verifyData() {\n        var verifyOp = cryptoSubtle.verify(\n            { name: \"HMAC\", params: { hash: \"SHA-256\" } },\n            hmacKey,\n            signature,\n            text2ua(data)\n        );\n        verifyOp.oncomplete = function (e) {\n            if (e.target.result) {\n                window.alert(\"Round-trip hmac sign/verify works!\");\n            }\n        };\n    }\n\n    generateKey();\n    \n</script>\n\n```\n\n### RSA Encryption / Decryption ###\n\n```JavaScript\n\n<script src='nfcrypto.js'></script>\n<script>\n\n    var cryptoSubtle = window.nfCrypto.subtle;\n    var clearText = \"This is some data to encrypt\";\n    var pubKey, privKey;\n    var cipherText;\n    \n    // generate a 1024-bit RSA key pair for encryption\n    function generateKey() {\n        var genOp = cryptoSubtle.generateKey({\n            name: \"RSAES-PKCS1-v1_5\",\n            params: {\n                modulusLength: 1024,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]) // Fermat F4\n            }\n        }, false);\n        genOp.oncomplete = function (e) {\n            pubKey  = e.target.result.publicKey;\n            privKey = e.target.result.privateKey;\n            exportKey();\n        }\n    }\n    \n    // export the public key in SPKI format in order to send it to the peer\n    function exportKey() {\n        var exportOp = cryptoSubtle.exportKey(\"spki\", pubKey);\n        exportOp.oncomplete = function (e) {\n            var pubKeySpki = e.target.result;\n            // here you would send pubKeySpki to peer\n            encryptData();\n        }\n    }\n    \n    // simulate peer encryption by encrypting clearText with the public key\n    function encryptData() {\n        var encryptOp = cryptoSubtle.encrypt(\n            { name: \"RSAES-PKCS1-v1_5\" },\n            pubKey,\n            text2ua(clearText)\n        );\n        encryptOp.oncomplete = function (e) {\n            cipherText = e.target.result;\n            decryptData();\n        }\n    }\n    \n    // pretend the cipherText was received from the peer, and decrypt it\n    // with the private key; should get the same clearText back\n    function decryptData() {\n        var decryptOp = cryptoSubtle.decrypt({ name: \"RSAES-PKCS1-v1_5\" }, privKey, cipherText);\n        decryptOp.oncomplete = function (e) {\n            var clearText2 = ua2text(e.target.result);\n            if (clearText2.valueOf() == clearText.valueOf()) {\n                window.alert(\"Round-trip RSA encrypt/decrypt successful!\");\n            }\n        }\n    }\n    \n    generateKey();\n    \n</script>\n\n```\n"
 },
 {
  "repo": "hyperledger/ursa",
  "language": "Rust",
  "readme_contents": "# HYPERLEDGER URSA\n\n[![Ursa CI](https://github.com/hyperledger/ursa/workflows/Ursa%20CI/badge.svg)](https://github.com/hyperledger/ursa/actions?query=workflow%3A%22Ursa+CI%22)\n[![Build status](https://ci.appveyor.com/api/projects/status/1htmp82mdvmfjjap?svg=true)](https://ci.appveyor.com/project/hyperledger/ursa)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/2447/badge)](https://bestpractices.coreinfrastructure.org/projects/2447)\n\n- [Introduction](#introduction)\n- [Features](#features)\n    - [Libursa](#Libursa)\n    - [Libzmix](#libzmix)\n- [Dependencies](#dependencies)\n- [Building from source](#building-from-source)\n- [Contributing](#contributing)\n\n# Introduction\n\nUrsa was created because people in the Hyperledger community realized that it\nwould save time and effort and improve security if we all collaborated on our\ncryptographic code. Since cryptographic APIs are relatively straightforward to\ndefine, it would be possible for many different projects to utilize the same\ncode without too much difficulty.\n\nFirst and foremost, we hope in the long run that Ursa provides open-source\nblockchain developers with reliable, secure, easy-to-use, and pluggable\ncryptographic implementations.\n\n# Features\n\nThe major artifacts of Ursa are:\n\n- C-callable library interface\n- Rust crate\n\nUrsa is divided into two sub libraries: libursa and libzmix.\n\n## Libursa\n\nDesigned for cryptographic primitives like simple digital signatures, encryption\nschemes, and key exchange.\n\n### Supported Signatures\n\n- ECDSA\n  - Secp256k1\n- EdDSA\n  - Ed25519 (Curve25519 in Twisted Edwards Form)\n- Boneh Lynn Shacham (BLS) Signature\n  - Any Pairing friendly curves\n- Camenisch Lysyanskaya\n  - RSA based\n- Shamir Secret Sharing\n\n### Supported Key Agreement\n\n- ECDH\n  - Secp256k1\n  - X25519 (Curve25519 in Montgomery Form)\n\n### Symmetric Encryption\n\n- AES-CBC\n- AES-GCM\n- XCHACHA20-POLY1305\n\n## Libzmix\n\nA generic way to create zero-knowledge proofs, proving statements\nabout multiple cryptographic building blocks, containing signatures,\ncommitments, and verifiable encryption. Libzmix uses many of the building blocks\nfound in Libursa.\n\n### Supported Zero Knowledge Proof capabilities\n- Signature Proofs of Knowledge\n- Bulletproofs\n- Range proofs\n- Set Membership\n\n### Supported Signatures\n\n- Boneh Boyen Shacham (BBS+)\n  - Any Pairing friendly curves\n- Pointcheval Saunders\n  - Any pairing friendly curves\n- Groth\n  - Any Pairing friendly curves\n\n# Dependencies\n\nUrsa uses the following external dependencies:\n\n- [openssl 1.1.0j or greater](https://www.openssl.org/source/openssl-1.1.0j.tar.gz) (Written in C)\n- [libsecp256k1](https://github.com/bitcoin-core/secp256k1) (Written in C)\n\nThese dependencies are used when building in the default secure mode. These\nlibraries are widely known.  There is a goal to be able to compile Ursa from\nrust only code for portability reasons like generating web assemblies without\nthe worry of compatibility issues from C code. For this reason, Ursa can be\ncompiled with *portable* mode which replaces any external libraries with rust\ncompatible code. Ursa developers take care when choosing suitable replacements\nthat are cryptographically safe to use but may not have been audited and vetted\nin a similar manner to these external libraries. Ursa consumers should note this\nwhen using portable mode for their applications.\n\n# Building from Source\n\nPlease see the following document for platform-specific installations [here](docs/build-environment.md).\n\n## Libursa\n\nLibursa uses the rustc compiler with cargo. Go into the libursa\nfolder where the *Cargo.toml* lives.  Run the following commands to get the\ndefault secure mode:\n```bash\ncargo build --release\n```\n\nRun the following commands to build in portable mode:\n\n```bash\ncargo build --release --no-default-features --features=portable\n```\n\nIf you wish to take advantage of assembly level features, you can build\nUrsa using the nightly compiler of rust.\n\n```bash\ncargo build --release --no-default-features --features=asm\n```\n\nThe resulting artifact(s) can be found in the *target/release* folder. They\ninclude:\n\n    libursa.so (Linux)\n    libursa.dylib (Mac OS X)\n    libursa.a (Linux, Mac OS X)\n    libursa.dll (Windows)\n    libursa.lib (Windows)\n\n\n## Packaging\nLibursa can be packaged for debian builds using [cargo-deb](https://github.com/mmstick/cargo-deb).\nTo create a debian package, run the following command with cargo-deb installed\n\n`cargo deb -p ursa` \n\n### Libursa Documentation\n\nLibursa API documentation is now available as rust doc in code. See:\n* C API\n    - [BLS](./libursa/src/ffi/bls.rs)\n    - [CL](./libursa/src/ffi/cl/)\n* Rust API\n    - [BLS](./libursa/src/bls/mod.rs)\n    - [CL](./libursa/src/cl)\n\n## Libzmix\n\nLibzmix uses the rustc compiler with cargo. Go into the libzmix folder where the\n*Cargo.toml* lives.  Run the following commands to get the default secure mode:\n```bash\ncargo build --release\n```\n\nRun the following commands to build in portable mode:\n\n```bash\ncargo build --release --no-default-features --features=portable\n```\n\nIf you wish to take advantage of assembly level features, you can build\nZMix using the nightly compiler of rust.\n\n```bash\ncargo build --release --no-default-features --features=asm\n```\n\nThe resulting artifact(s) can be found in the *target/release* folder. They\ninclude:\n\n    libzmix.so (Linux)\n    libzmix.dylib (Mac OS X)\n    libzmix.a (Linux, Mac OS X)\n    libzmix.dll (Windows)\n    libzmix.lib (Windows)\n    \n# Contributing\n\nAll bugs, stories, and backlog for this project are managed through\nHyperledger's Jira in project IS (note that regular Ursa tickets are in the URSA\nproject).\n\nAlso, join us on [Hyperledger Rocket.Chat](https://chat.hyperledger.org) at #ursa to discuss.\n\nThe ursa group also meets biweekly on Wednesday's at 7 AM PST at\nhttps://zoom.us/my/hyperledger.community. The meeting notes are available\n[here](https://wiki.hyperledger.org/display/ursa/Meeting+Agendas+and+Notes).\n\nMajor modifications to ursa are submitted as RFCs to the [Ursa RFC\nrepo](https://github.com/hyperledger/ursa-rfcs). \n\nFor more details on contributing see [CONTRIBUTING](CONTRIBUTING.md)\n"
 },
 {
  "repo": "kemingy/Cryptography",
  "language": "C",
  "readme_contents": "# Cryptography\n\n1. DES algorithm\n2. Steganography with LSB (text and image)\n3. String cipher\n4. Alphabet statistic\n"
 },
 {
  "repo": "veorq/cryptocoding",
  "language": null,
  "readme_contents": "# Cryptocoding\n\nThis page lists \"coding rules\" for implementations of cryptographic operations, and more generally for operations involving secret or sensitive values.\n\nThe rules on this page are general recommendations and best practices to write safer code, but may not apply to all languages, may not be up-to-date with respect to the latest version of a language, OS, or library, and of course aren't sufficient to write secure code.\nIt's focused on low-level (read: C) implementations\u2014although we recommend against writing your own C cryptography components. \nPull requests to improve the current content or to add new \"rules\" are welcome.\n\nMost of the content comes from the \"Crypto coding standard\", originally set up by @veorq at cryptocoding.net, and created thanks to many contributors.\n\n\nTable of Contents\n=================\n\n   * [Cryptocoding](#cryptocoding)\n      * [Compare secret strings in constant time](#compare-secret-strings-in-constant-time)\n         * [Problem](#problem)\n         * [Solution](#solution)\n      * [Avoid branchings controlled by secret data](#avoid-branchings-controlled-by-secret-data)\n         * [Problem](#problem-1)\n         * [Solution](#solution-1)\n      * [Avoid table look-ups indexed by secret data](#avoid-table-look-ups-indexed-by-secret-data)\n         * [Problem](#problem-2)\n         * [Solution](#solution-2)\n      * [Avoid secret-dependent loop bounds](#avoid-secret-dependent-loop-bounds)\n         * [Problem](#problem-3)\n         * [Solution](#solution-3)\n      * [Prevent compiler interference with security-critical operations](#prevent-compiler-interference-with-security-critical-operations)\n         * [Problem](#problem-4)\n         * [Solution](#solution-4)\n      * [Prevent confusion between secure and insecure APIs](#prevent-confusion-between-secure-and-insecure-apis)\n         * [Problem](#problem-5)\n         * [Bad Solutions](#bad-solutions)\n         * [Solution](#solution-5)\n      * [Avoid mixing security and abstraction levels of cryptographic primitives in the same API layer](#avoid-mixing-security-and-abstraction-levels-of-cryptographic-primitives-in-the-same-api-layer)\n         * [Problem](#problem-6)\n         * [Solution](#solution-6)\n            * [Provide high-level APIs](#provide-high-level-apis)\n            * [When possible, avoid low-level APIs](#when-possible-avoid-low-level-apis)\n            * [Clearly distinguish high-level APIs and low-level APIs](#clearly-distinguish-high-level-apis-and-low-level-apis)\n      * [Use unsigned bytes to represent binary data](#use-unsigned-bytes-to-represent-binary-data)\n         * [Problem](#problem-7)\n         * [Solution](#solution-7)\n      * [Clean memory of secret data](#clean-memory-of-secret-data)\n         * [Problem](#problem-8)\n         * [Solution](#solution-8)\n      * [Use strong randomness](#use-strong-randomness)\n         * [Problem](#problem-9)\n         * [Bad solutions](#bad-solutions-1)\n         * [Solution](#solution-9)\n      * [Always typecast shifted values](#always-typecast-shifted-values)\n         * [Problem](#problem-10)\n         * [Solution](#solution-10)\n\n\n\n\n## Compare secret strings in constant time\n\n### Problem\n\nString comparisons performed byte-per-byte may be exploited in timing attacks, for example in order to forge MACs (see [this](http://rdist.root.org/2009/05/28/timing-attack-in-google-keyczar-library/) and [this vulnerability](http://codahale.com/a-lesson-in-timing-attacks/) in Google's [Keyczar crypto library](https://code.google.com/p/keyczar/)).\n\nBuilt-in comparison functions such as C's `memcmp`, Java's `Arrays.equals`, or Python's `==` test may not execute in constant time.\n\nFor example, this is [OpenBSD libc](https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/lib/libc/string/memcmp.c?rev=1.6&content-type=text/x-cvsweb-markup) implementation of `memcmp`:\n<!-- http://stackoverflow.com/questions/5017659/implementing-memcmp -->\n```C\nint\nmemcmp(const void *s1, const void *s2, size_t n)\n{\n\tif (n != 0) {\n\t\tconst unsigned char *p1 = s1, *p2 = s2;\n\n\t\tdo {\n\t\t\tif (*p1++ != *p2++)\n\t\t\t\treturn (*--p1 - *--p2);\n\t\t} while (--n != 0);\n\t}\n\treturn (0);\n}\n```\n\nThe risk is greater on legacy platforms and on embedded platform, as they are more likely to perform byte-wise comparisons.\n\n### Solution\n\nUse a constant-time comparison function:\n\n* With OpenSSL, use `CRYPTO_memcmp`\n* In Python 2.7.7+, use `hmac.compare_digest`\n* In Java, use `java.security.MessageDigest.isEqual`\n* In Go, use package `crypto/subtle`\n\nIf one is not available, add your own, as used for example by [NaCl](https://nacl.cr.yp.to/verify.html):\n\n```C\nint crypto_verify_16(const unsigned char *x,const unsigned char *y)\n{\n  unsigned int differentbits = 0;\n#define F(i) differentbits |= x[i] ^ y[i];\n  F(0)\n  F(1)\n  F(2)\n  F(3)\n  F(4)\n  F(5)\n  F(6)\n  F(7)\n  F(8)\n  F(9)\n  F(10)\n  F(11)\n  F(12)\n  F(13)\n  F(14)\n  F(15)\n  return (1 & ((differentbits - 1) >> 8)) - 1; /* returns 0 if equal, 0xFF..FF otherwise */\n}\n```\n\nA more general version of the same technique can be found below:\n\n```C\nint util_cmp_const(const void * a, const void *b, const size_t size) \n{\n  const unsigned char *_a = (const unsigned char *) a;\n  const unsigned char *_b = (const unsigned char *) b;\n  unsigned char result = 0;\n  size_t i;\n\n  for (i = 0; i < size; i++) {\n    result |= _a[i] ^ _b[i];\n  }\n\n  return result; /* returns 0 if equal, nonzero otherwise */\n}\n```\n\nExamples of constant-time tests and comparisons for 32-bit values, [by @sneves](https://gist.github.com/sneves/10845247):\n\n```C\n#include <stdint.h>\n\n/* Unsigned comparisons */\n/* Return 1 if condition is true, 0 otherwise */\nint ct_isnonzero_u32(uint32_t x)\n{\n    return (x|-x)>>31;\n}\n\nint ct_iszero_u32(uint32_t x)\n{\n    return 1 ^ ct_isnonzero_u32(x);\n}\n\nint ct_neq_u32(uint32_t x, uint32_t y)\n{\n    return ((x-y)|(y-x))>>31;\n}\n\nint ct_eq_u32(uint32_t x, uint32_t y)\n{\n    return 1 ^ ct_neq_u32(x, y);\n}\n\nint ct_lt_u32(uint32_t x, uint32_t y)\n{\n    return (x^((x^y)|((x-y)^y)))>>31;\n}\n\nint ct_gt_u32(uint32_t x, uint32_t y)\n{\n    return ct_lt_u32(y, x);\n}\n\nint ct_le_u32(uint32_t x, uint32_t y)\n{\n    return 1 ^ ct_gt_u32(x, y);\n}\n\nint ct_ge_u32(uint32_t x, uint32_t y)\n{\n    return 1 ^ ct_lt_u32(x, y);\n}\n\n/* Signed comparisons */\n/* Return 1 if condition is true, 0 otherwise */\nint ct_isnonzero_s32(uint32_t x)\n{\n    return (x|-x)>>31;\n}\n\nint ct_iszero_s32(uint32_t x)\n{\n    return 1 ^ ct_isnonzero_s32(x);\n}\n\nint ct_neq_s32(uint32_t x, uint32_t y)\n{\n    return ((x-y)|(y-x))>>31;\n}\n\nint ct_eq_s32(uint32_t x, uint32_t y)\n{\n    return 1 ^ ct_neq_s32(x, y);\n}\n\nint ct_lt_s32(uint32_t x, uint32_t y)\n{\n    return (x^((x^(x-y))&(y^(x-y))))>>31;\n}\n\nint ct_gt_s32(uint32_t x, uint32_t y)\n{\n    return ct_lt_s32(y, x);\n}\n\nint ct_le_s32(uint32_t x, uint32_t y)\n{\n    return 1 ^ ct_gt_s32(x, y);\n}\n\nint ct_ge_s32(uint32_t x, uint32_t y)\n{\n    return 1 ^ ct_lt_s32(x, y);\n}\n\n/* Generate a mask: 0xFFFFFFFF if bit != 0, 0 otherwise */\nuint32_t ct_mask_u32(uint32_t bit)\n{\n    return -(uint32_t)ct_isnonzero_u32(bit);\n}\n\n/* Conditionally return x or y depending on whether bit is set */\n/* Equivalent to: return bit ? x : y */\nuint32_t ct_select_u32(uint32_t x, uint32_t y, uint32_t bit)\n{\n    uint32_t m = ct_mask_u32(bit);\n    return (x&m) | (y&~m);\n    /* return ((x^y)&m)^y; */\n}\n```\n\n**Note**: The above measures are best effort: C and C++ have the [as-if rule](http://en.cppreference.com/w/cpp/language/as_if), which gives the compiler freedom to implement operations in any arbitrary manner, provided the observable behavior (timing is not considered observable behavior in such languages) remains unchanged. Other languages such as [Rust](https://github.com/klutzy/nadeko#why) have similar semantics, and thus similar caveats apply. For example, consider the following variant of the above `ct_select_u32`:\n\n```C\nuint32_t ct_select_u32(uint32_t x, uint32_t y, _Bool bit)\n{\n    uint32_t m = ct_mask_u32(bit);\n    return (x&m) | (y&~m);\n}\n```\n\nWhen compiled with `clang-3.5 -O2 -m32 -march=i386`, the result is \n\n```asm\nct_select_u32:                          \n    mov    al, byte ptr [esp + 12]\n    test    al, al\n    jne    .LBB0_1\n    lea    eax, dword ptr [esp + 8]\n    mov    eax, dword ptr [eax]\n    ret\n.LBB0_1:\n    lea    eax, dword ptr [esp + 4]\n    mov    eax, dword ptr [eax]\n    ret\n```\n\nDue to branch predictor stalls, this potentially reveals the chosen value via a timing side-channel. Since compilers have essentially unlimited freedom to generate variable-time code, it is important to check the output assembly to verify that it is, indeed, constant-time.\n\nAnother example of constant-time source code compiling to variable-time execution was observed with [Curve25519 built with MSCV 2015](https://infoscience.epfl.ch/record/223794/files/32_1.pdf).\n\n## Avoid branchings controlled by secret data\n\n### Problem\n\nIf a conditional branching (`if`, `switch`, `while`, `for`) depends on secret data then the code executed as well as its execution time depend on the secret data as well.\n\nA classical example is the [timing attack on square-and-multiply](http://users.belgacom.net/dhem/papers/CG1998_1.pdf) exponentiation algorithms (or double-and-add for multiplication in elliptic curve-based cryptosystems).\n\nSecret-dependent loop bounds are a special case of this problem.\n\n### Solution\n\nTiming leaks may be mitigated by introducing dummy operations in branches of the program in order to ensure a constant execution time. It is however more reliable to avoid branchings altogether, for example by implementing the conditional operation as a straight-line program. To select between two inputs `a` and `b` depending on a selection bit `bit`, this can be achieved with the following code:\n<!-- from E. Kasper's ECC code, listing 1 in http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en//pubs/archive/37376.pdf -->\n<!-- Changed int to unsigned. The C standard guarantees that negation of an n-bit unsigned x is 2^n - x; signed integers may have other interpretations, e.g. one's complement -->\n<!-- Changed to return a when bit is non-zero, b otherwise. -->\n\n\n```C\n/* Conditionally return a or b depending on whether bit is set */\n/* Equivalent to: return bit ? a : b */\nunsigned select (unsigned a, unsigned b, unsigned bit)\n{\n        unsigned isnonzero = (bit | -bit) >> (sizeof(unsigned) * CHAR_BIT - 1);\n        /* -0 = 0, -1 = 0xff....ff */\n        unsigned mask = -isnonzero;\n        unsigned ret = mask & (b^a);\n        ret = ret ^ b;\n        return ret;\n}\n```\n\nA possibly faster solution on Intel processors involves the [CMOV](http://www.jaist.ac.jp/iscenter-new/mpc/altix/altixdata/opt/intel/vtune/doc/users_guide/mergedProjects/analyzer_ec/mergedProjects/reference_olh/mergedProjects/instructions/instruct32_hh/vc35.htm) conditional move instructions.\n\n## Avoid table look-ups indexed by secret data\n\n### Problem\n\nThe access time of a table element can vary with its index (depending for example on whether a cache-miss has occured). This has for example been exploited in a series of cache-timing attacks on AES.\n\n### Solution\n\nReplace table look-up with sequences of constant-time logical operations, for example by bitslicing look-ups (as used in [NaCl's](http://nacl.cr.yp.to/) [implementation](http://eprint.iacr.org/2009/129.pdf) of AES-CTR, or in [Serpent](https://www.ii.uib.no/~osvik/serpent/).\nFor AES, constant-time non-bitsliced implementations are also [possible](http://crypto.stackexchange.com/questions/55/known-methods-for-constant-time-table-free-aes-implementation-using-standard/92#92), but are much slower. \n\n\n## Avoid secret-dependent loop bounds\n\n### Problem\n\nLoops with a bound derived from a secret value directly expose a program to timing attacks. For example, a Montgomery ladder implementation in OpenSSL 0.9.8o leaked the logarithm of the (secret) ECDSA nonce, which could be used to [steal the private key](https://eprint.iacr.org/2011/232.pdf) of a TLS server. The relevant code is copied below, where `scalar` is the secret nonce, and `scalar->d` a pointer to an array of its bits:\n\n```C\n/* find top most bit and go one past it */\ni = scalar -> top - 1; j = BN_BITS2 - 1;\nmask = BN_TBIT ;\nwhile (!( scalar -> d[i] & mask )) { mask >>= 1; j --; }\nmask >>= 1; j - -;\n/* if top most bit was at word break , go to next word */\nif (! mask )\n{\n  i - -; j = BN_BITS2 - 1;\n  mask = BN_TBIT ;\n}\nfor (; i >= 0; i - -)\n{\n  for (; j >= 0; j - -)\n  {\n    if ( scalar ->d[ i] & mask )\n    {\n      if (! gf2m_Madd ( group , & point ->X , x1 , z1 , x2 , z2 , ctx )) goto err ;\n      if (! gf2m_Mdouble ( group , x2 , z2 , ctx )) goto err ;\n    }\n    else\n    {\n      if (! gf2m_Madd ( group , & point ->X , x2 , z2 , x1 , z1 , ctx )) goto err ;\n      if (! gf2m_Mdouble ( group , x1 , z1 , ctx )) goto err ;\n    }\n    mask >>= 1;\n  }\n  j = BN_BITS2 - 1;\n  mask = BN_TBIT;\n}\n```\n\n### Solution\n\nMake sure that all loops are bounded by a constant (or at least a non-secret variable).\n\nIn particular, make sure, as far as possible, that loop bounds and their potential underflow or overflow are independent of user-controlled input (you may have heard of the [Heartbleed bug](http://heartbleed.com/)).\n\n## Prevent compiler interference with security-critical operations\n\n### Problem\n\nSome compilers will optimize out operations they deem useless. For example, MS Visual C++ 2010 suppressed the `memset` in the following code fragment from the [Tor](https://www.torproject.org/) anonymity network:\n\n```C\nint\ncrypto_pk_private_sign_digest(...)\n{\n  char digest[DIGEST_LEN];\n  (...)\n  memset(digest, 0, sizeof(digest));\n  return r;\n}\n```\n\nHowever the role of this `memset` is to clear the buffer `digest` off of [secret data](http://www.viva64.com/en/b/0178/) so that any subsequent (erroneous, undefined!) reads of uninitialized stack will learn no secret information.\n\nSome compilers infer that they can eliminate checks based on erroneous code elsewhere in the program.\n\nFor example, when encountering\n\n```C\n  call_fn(ptr); // always dereferences ptr.\n\n  // many lines here\n\n  if (ptr == NULL) { error(\"ptr must not be NULL\"); }\n``` \n\nsome compilers will decide that `ptr == NULL` must always be false, since otherwise it would be incorrect to dereference it in `call_fn()`.\n\n### Solution\n\nLook at the assembly code produced and check that all instructions are there. (This will not be possible for typical application sizes, but should be considered for security-sensitive code.)\n\nKnow what optimizations your compiler can do, and carefully consider the effect of each one on security programming patterns. In particular, be careful of optimizations that can remove code or branches, and code that prevents errors which \"should be impossible\" if the rest of the program is correct.\n\nWhen possible, consider disabling compiler optimizations that can eliminate or weaken security checks.\n\nTo prevent the compiler from \"optimizing out\" instructions by eliminating them, a function may be redefined as a volatile pointer to force the function pointer dereference. This is for example used in [libottery](https://github.com/nmathewson/libottery/) by redefining `memset` to\n\n```C\nvoid * (*volatile memset_volatile)(void *, int, size_t) = memset;\n```\n\nNote that such workarounds [may not be sufficient](https://www.daemonology.net/blog/2014-09-05-erratum.html) and can still be optimized out.\n\nC11 introduced `memset_s` with a requirement that it is not optimized out. It's an optional feature that can be requested when including string.h.\n\n```\n#define __STDC_WANT_LIB_EXT1__ 1\n#include <string.h>\n...\nmemset_s(secret, sizeof(secret), 0, sizeof(secret));\n```\n\n\n## Prevent confusion between secure and insecure APIs\n\n### Problem\nMany programming environments provide multiple implementations of the same API whose functionality is superficially similar, but whose security properties are radically different.\n\nPseudorandom number generators frequently have this problem: OpenSSL has `RAND_bytes()` and `RAND_pseudo_bytes()`; many BSD C libraries have `random()` and `arc4random()`; Java has `Random` and `SecureRandom`.\n\nFor another example, even on systems that provide a constant-time function to compare two byte strings of a given length, there invariably exist fast-exit variants.\n\n### Bad Solutions\nSometimes a function is safe on some platforms but dangerous on others. In these cases, some programmers use the function, believing that their code will only run on platforms where it is safe. This is a bad idea, since when the code is ported to a different platform, it may become insecure without anyone realizing.\n\nOn systems that permit applications to override platform-provided functions, some programmers override insecure functions with secure ones, and then write their programs to use the API that would ordinarily be insecure. This is a questionable idea on its own, since it results in the programmer writing insecure-looking code. Further, if the overriding method ever fails (or is itself re-overridden), the program will become insecure without the new insecurity being detected. Finally, it can result in programs whose pieces become insecure if they are ever copied into another program.\n\n### Solution\nWhen possible, do not include insecure variants of secure functions. For example, a PRNG based on a well-seeded secure stream cipher is generally fast enough for most applications. A data-independent memcmp replacement is fast enough to replace nearly all uses of `memcmp`.\n\nIf you can't remove an insecure function, override it with a variant that produces a compile-time error, or use a code-scanning tool to detect and warn about its use. If you can override a insecure function with a secure variant, you may do so, but for safety in depth, never call the insecure API, and make sure that you can detect its use.\n\nIf you must retain both a secure and an insecure version of a given function, make sure that the names of the functions are distinctive in a way that makes it hard to accidentally use an insecure variant. For example, if you must have a secure and an insecure PRNG, don't name the insecure one \"Random\" or \"FastRandom\" or \"MersenneTwister\" or \"LCGRand\" -- instead, name it something like \"InsecureRandom.\" The spelling for \"Insecure\" should never be \"\"; design your APIs so that using an insecure function is always a bit scary.\n\nWhen your platform provides an insecure function variant without a name that implies it is insecure, and you can't remove the function, give it a wrapper with a safe name, then use a code-scanning tool to detect and warn about all calls to the unsafe name.\n\nWhen a function is secure on some platforms but insecure on others, do not use the function directly: instead, provide a wrapper that is secure everywhere, and use that wrapper instead.\n\n\n## Avoid mixing security and abstraction levels of cryptographic primitives in the same API layer\n\n### Problem\nWhen it's not clear which parts of an API require how much expertise, it's easy for a programmer to make mistakes about which functionality is safe for them to use.\n\nConsider the following (invented, but not unusual) RSA API:\n\n```C\nenum rsa_padding_t { no_padding, pkcs1v15_padding, oaep_sha1_padding, pss_padding };\nint do_rsa(struct rsa_key *key, int encrypt, int public, enum rsa_padding_t padding_type, uint8_t *input, uint8_t *output);\n```\n\nAssuming that \"key\" contains the requisite components, this function can be invoked in 16 ways, many of them nonsensical, and several insecure.\n\n\n| encrypt | public | padding_type | notes |\n| -- | -- | -- | -- |\n| 0 | 0 | none | \u2620: Unpadded decryption. Malleable. |\n| 0 | 0 | pkcs1v15 | \u2620: PKCS1 v1.5 decryption. Probably falls to Bleichenbacher\u2019s attack. | \n| 0 | 0 | oaep | \ud83d\udd12: OAEP decryption. Just fine. |\n| 0 | 0 | pss | \u26a0\ufe0f: PSS decryption. Eccentric; probably accidental. (secure?) |\n| 0 | 1 | none | \u2620: Unpadded signature. Malleable. |\n| 0 | 1 | pkcs1v15 | \u26a0\ufe0f: PKCS1 v1.5 signature. Okay for some applications, but should use PSS instead. | \n| 0 | 1 | oaep | \u26a0\ufe0f: OAEP signature. May be okay for some applications, but should use PSS instead.  |\n| 0 | 1 | pss | \ud83d\udd12\ufe0f: PSS signature. Great. |\n\nNote that only 4 of the 16 ways to call this function are a good idea, 6 of the 16 ways are downright insecure, and the remaining 6 are in some way problematic.  This API is only suitable for use by implementors who understand the ramifications of different RSA padding modes.\n\nNow imagine that we add APIs for block cipher encryption in various modes, for random key generation, and for a wide variety of digest functions and MACs.  Any programmer attempting to construct a correct hybrid authenticate-and-encrypt-this-data function from these will have his or her options grow exponentially, as the safe portion of the decision space dwindles.\n\n### Solution\n\n#### Provide high-level APIs\nFor example, provide a set of hybrid-encrypt-and-authenticate functions that use only safe algorithms, safely. If writing a function that allows multiple combinations of public-key and secret-key algorithms and modes, ensure that it rejects insecure algorithms and insecure combinations of algorithms.\n\n#### When possible, avoid low-level APIs\nFor nearly all users, there is no need to ever use unpadded RSA, or to use a block cipher in ECB mode, or to perform a DSA signature with a user-selected nonce. These functions ''can'' be used as building-blocks to make something secure -- for example, by doing OAEP padding before calling  unpadded RSA, or doing ECB on the sequence of blocks [1, 2, 3] in order to produce a counter mode stream, or by using a random or unpredictable byte-sequence to produce the DSA nonce -- but experience suggest that they will be misused more frequently than they are used correctly.\n\nSome other primitives are necessary for implementing certain protocols, but unlikely to be a good first choice for implementing new protocols. For example, you can't implement browser-compatible TLS nowadays without CBC, PKCS1 v1.5, and RC4, but none of these would be a great.\n\nIf you are providing a crypto implementation for use by inexperienced programmers, it may be best to omit these functions entirely, and choose only functions that implement well-specified, high-level, secure operations. But if you must provide an implementation for use by experienced and inexperienced programmers alike...\n\n#### Clearly distinguish high-level APIs and low-level APIs\n\"Encrypt securely\" should not be the same function as \"encrypt incorrectly\" with slightly different arguments. In languages that divide functions and types into packages or headers, safe and unsafe crypto should not occupy the same packages/headers. In languages with subtyping, there should be a separate type for safe crypto.\n\n<!-- give example of AES-CBC in OpenSSL: low-level vs EVP API... -->\n\n\n## Use unsigned bytes to represent binary data\n\n### Problem\nSome languages in the C family have separate signed and unsigned integer types. For C in particular, the signedness of the type `char` is implementation-defined. This can lead to problematic code such as:\n\n```C\nint decrypt_data(const char *key, char *bytes, size_t len);\n\nvoid fn(...) {\n    //...\n    char *name;\n    char buf[257];\n    decrypt_data(key, buf, 257);\n\n    int name_len = buf[0];\n    name = malloc(name_len + 1);\n    memcpy(name, buf+1, name_len);\n    name[name_len] = 0;\n    //...\n}\n```\n\nIf the `char` type is unsigned, this code behaves as expected. But when `char` is signed, `buf[0]` may be negative, leading to a very large argument for `malloc` and `memcpy`, and a heap corruption opportunity when we try to set the last character of name to `0`. Worse, if `buf[0]` is `255`, then `name_len` will be `-1`. So we will allocate a 0-byte buffer, but then perform a `(size_t)-1 memcpy` into that buffer, thus stomping the heap.\n\n### Solution\n\nIn languages with signed and unsigned byte types, implementations should always use the unsigned byte type to represent bytestrings in their APIs.\n\n\n## Clean memory of secret data\n\n### Problem\n\nProcess memory can be unintentionally accessed by another process when \u2014 process is crashed and core dumped (by accessing the [core dump file](https://wiki.archlinux.org/title/Core_dump)), process memory is swapped (by accessing swap partition), by exploiting a kernel bug or a [bug in the process itself](https://en.wikipedia.org/wiki/Heartbleed), or by some legitimate methods \u2014 such as process tracing, or other debugging facilities. Also, hardware methods such as [DMA attack](https://en.wikipedia.org/wiki/DMA_attack), [cold boot attack](https://en.wikipedia.org/wiki/Cold_boot_attack), [Spectre vulnerability](https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)), etc.\n\n### Solution\n\nClear all variables containing secret data before they go out of scope. Worry about `mmap()`: executing `munmap()` causes memory to go out of scope immediately, while erasing while the mapping exists will destroy the file.\n\nFor clearing memory or destroying objects that are about to go out of scope, use a platform-specific memory-wipe function where available, for example:\n\n- `memset_s`: part of C11 (see above);\n- `explicit_bzero`: [OpenBSD](https://man.openbsd.org/explicit_bzero) extension, also on [FreeBSD](https://www.freebsd.org/cgi/man.cgi?explicit_bzero) and [glibc](http://man7.org/linux/man-pages/man3/bzero.3.html);\n- `SecureZeroMemory()` on [Windows](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/aa366877(v=vs.85));\n- `sodium_memzero()` in [libsodium](https://download.libsodium.org/doc/memory_management);\n- `OPENSSL_cleanse()` in OpenSSL.\n\nA portable C solution, for non-buggy compilers, follows:\n\n```C\nvoid burn( void *v, size_t n )\n{\n  volatile unsigned char *p = ( volatile unsigned char * )v;\n  while( n-- ) *p++ = 0;\n}\n```\n\nUnfortunately, there's virtually no way to reliably clean secret data in garbage-collected languages (such as Go, Java, or JavaScript), nor in language with immutable strings (such as Swift or Objective-C).\nLet's see for example why it's preferable to use `bytes` for secrets in Objective-C:\n\n```objc\n// NSDictionary <passwordUniqueIdentifier, passwordKey>\n@property (nonatomic, strong) NSMutableDictionary <NSString *, NSMutableData *> *passwordsCache;\n\n...\n\n// clean up values\n[self.passwordsCache enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull key, NSMutableData * _Nonnull data, BOOL * _Nonnull stop) {\n    [data resetBytesInRange:NSMakeRange(0, [data length])];\n}];\n[self.passwordsCache removeAllObjects];\n```\n\n## Use strong randomness\n\n### Problem\nMany cryptographic systems require sources of random numbers, and fail with even slight deviations from randomness. For example, leaking just one bit of each random number in the DSA will reveal a private key astonishingly quickly. Lack of randomness can be surprisingly hard to diagnose: the Debian random number generator [failure](http://www.debian.org/security/2008/dsa-1571) in OpenSSL went unnoticed for 2 years, compromising a vast number of keys. The requirements on random numbers for cryptographic purposes are very stringent: most pseudorandom number generators (PRNG) fail to meet them.\n\n### Bad solutions\n\nFor cryptographic applications,\n\n* Do not rely only on predictable entropy source like timestamps, PIDs, temperature sensors, etc.\n* Do not rely only on general-purpose pseudorandom functions like `stdlib`'s `rand()`, `srand()`, `random()`, or Python's `random` module.\n* Do not use [Mersenne Twister](http://crypto.di.uoa.gr/CRYPTO.SEC/Randomness_Attacks.html).\n* Do not use things like http://www.random.org/ (the random data may be shared with and available to other parties).\n* Do not design your own PRNG, even if it's based on a secure cryptographic primitive (unless you know what you're doing).\n* Do not reuse the same randomness accross applications to \"save\" random numbers.\n* Do not conclude that a PRNG is secure just because it passes the [Diehard](http://www.stat.fsu.edu/pub/diehard/) tests or [NIST's tests](http://csrc.nist.gov/groups/ST/toolkit/rng/stats_tests.html).\n* Do not assume that a cryptographically secure PRNG necessarily provides forward or backward secrecy (aka [backtracking resistance and prediction resistance](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf), would the internal state leak to an attacker.\n* Do not directly use \"entropy\" as pseudorandom data (entropy from analog sources is often biased, that is, N bits from an entropy pool often provide less than N bits of entropy).\n\n### Solution\nMinimize the need for randomness through design and choice of primitives (for example [Ed25519](http://ed25519.cr.yp.to/) produces signatures deterministically).\n\nOn Linux, use the [`getrandom()`](http://man7.org/linux/man-pages/man2/getrandom.2.html) system call, which ensures that the underlying PRNG has a high enough level entropy but will not \"block\" afterwards.\nOn OpenBSD, use [`arc4random()`](https://man.openbsd.org/arc4random.3), which is a ChaCha20-based PRNG that calls `getentropy()` for its initial seed. Use this for large amounts of cryptographically-secure randomness. [`getentropy()`](https://man.openbsd.org/getentropy.2) has a 256-byte limit per call and is suitable for scenarios such as seeding PRNGs.\nOn FreeBSD 12 and newer, both [`getrandom()`](https://www.freebsd.org/cgi/man.cgi?getrandom) and [`getentropy()`](https://www.freebsd.org/cgi/man.cgi?query=getentropy&sektion=3&apropos=0&manpath=FreeBSD+12.0-RELEASE+and+Ports) are available. Older versions only have the `KERN_ARND` `sysctl`.\t\n\nThe OpenSSL API offers [`RAND_bytes()`](https://www.openssl.org/docs/man1.0.2/man3/RAND_bytes.html), which behaves differently depending on the platform and attempts to use reliable source of entropy when available. For example, on a Unix platform it would use `/dev/urandom` and the RDRAND/RDSEED instructions, if available, among others.\n\nWhen generating random bytes use operating-system provided sources guaranteed to meet cryptographic requirements like `/dev/random`. On constrained platforms consider adding analog sources of noise and mixing them well.\n\nDo [check the return values](http://jbp.io/2014/01/16/openssl-rand-api) of your RNG, to make sure that the random bytes are as strong as they should be, and they have been written successfully.\n\nFollow the recommendations from Nadia Heninger et al. in Section 7 of their [Mining Your Ps and Qs](https://factorable.net/weakkeys12.extended.pdf) paper.\n\nOn Intel CPUs based on the Ivy Bridge microarchitecture (and future generations), the [built-in PRNG](http://software.intel.com/en-us/articles/intel-digital-random-number-generator-drng-software-implementation-guide) guarantees high entropy and throughput.\n\nOn Unix systems, if no reliable syscall is available, you should generally use `/dev/random` or `/dev/urandom`. However on Linux, the former is \"blocking\", meaning that it won't return any data when it deems that its entropy pool contains insufficient entropy. This feature limits its usability, and is the reason why `/dev/urandom` is more often used. Extracting a random number from `/dev/urandom` can be as simple as\n\n```C\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdio.h>\n\nint main() {\n  int randint;\n  int bytes_read;\n  int fd = open(\"/dev/urandom\", O_RDONLY);\n  if (fd != -1) {\n    bytes_read = read(fd, &randint, sizeof(randint));\n    if (bytes_read != sizeof(randint)) {\n      fprintf(stderr, \"read() failed (%d bytes read)\\n\", bytes_read);\n      return -1;\n    }\n  }\n  else {\n    fprintf(stderr, \"open() failed\\n\");\n    return -2;\n  }\n  printf(\"%08x\\n\", randint); /* assumes sizeof(int) <= 4 */\n  close(fd);\n  return 0;\n}\n```\n\nHowever, this simple program may not be sufficient for secure randomness generation in your environment: it is safer to perform additional error checks, as found in [LibreSSL](http://libressl.org)'s `getentropy_urandom` function:\n\n```C\nstatic int\ngetentropy_urandom(void *buf, size_t len)\n{\n    struct stat st;\n    size_t i;\n    int fd, cnt, flags;\n    int save_errno = errno;\n\nstart:\n\n    flags = O_RDONLY;\n#ifdef O_NOFOLLOW\n    flags |= O_NOFOLLOW;\n#endif\n#ifdef O_CLOEXEC\n    flags |= O_CLOEXEC;\n#endif\n    fd = open(\"/dev/urandom\", flags, 0);\n    if (fd == -1) {\n        if (errno == EINTR)\n            goto start;\n        goto nodevrandom;\n    }\n#ifndef O_CLOEXEC\n    fcntl(fd, F_SETFD, fcntl(fd, F_GETFD) | FD_CLOEXEC);\n#endif\n\n    /* Lightly verify that the device node looks sane */\n    if (fstat(fd, &st) == -1 || !S_ISCHR(st.st_mode)) {\n        close(fd);\n        goto nodevrandom;\n    }\n    if (ioctl(fd, RNDGETENTCNT, &cnt) == -1) {\n        close(fd);\n        goto nodevrandom;\n    }\n    for (i = 0; i < len; ) {\n        size_t wanted = len - i;\n        ssize_t ret = read(fd, (char *)buf + i, wanted);\n\n        if (ret == -1) {\n            if (errno == EAGAIN || errno == EINTR)\n                continue;\n            close(fd);\n            goto nodevrandom;\n        }\n        i += ret;\n    }\n    close(fd);\n    if (gotdata(buf, len) == 0) {\n        errno = save_errno;\n        return 0;        /* satisfied */\n    }\nnodevrandom:\n    errno = EIO;\n    return -1;\n}\n```\n\nOn Windows, when using the Microsoft C compiler, [rand_s](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/rand-s?view=vs-2019) can be used to generate 32 bits of cryptographically secure data:\n\n```C\n#include <string.h>\n\n#define _CRT_RAND_S\n#include <stdlib.h>\n\nint randombytes(unsigned char *out, size_t outlen) {\n    size_t wordlen = sizeof(unsigned int);\n    size_t fullwordslen = (outlen / wordlen) * wordlen;\n    size_t taillen = outlen - fullwordslen;\n\n    for (size_t i = 0; i < fullwordslen; i += wordlen) {\n        unsigned int randword;\n\n        if (rand_s(&randword))\n            return -1;\n\n\tmemcpy(&out[i], &randword, wordlen);\n    }\n\n    if (taillen) {\n        unsigned int randword;\n\n        if (rand_s(&randword))\n            return -1;\n\n        memcpy(&out[fullwordslen], &randword, taillen);\n    }\n\n    return 0;\n}\n```\n\nOn recent Windows platforms, [BCryptGenRandom](https://docs.microsoft.com/en-us/windows/desktop/api/bcrypt/nf-bcrypt-bcryptgenrandom) (nothing to do with the password hash bcrypt) should be used to generate cryptographically secure data. Its interface is straightforward:\n\n```C\nNTSTATUS BCryptGenRandom(\n  BCRYPT_ALG_HANDLE hAlgorithm,\n  PUCHAR            pbBuffer,\n  ULONG             cbBuffer,\n  ULONG             dwFlags\n);\n```\n\nOn legacy Windows platforms, [CryptGenRandom](http://msdn.microsoft.com/en-us/library/aa379942.aspx) from the legacy Win32 CryptoAPI provides cryptographically secure pseudorandom bytes. Microsoft provides the following usage example:\n\n```C\n#include <stddef.h>\n#include <stdint.h>\n#include <windows.h>\n\n#pragma comment(lib, \"advapi32.lib\")\n\nint randombytes(unsigned char *out, size_t outlen)\n{\n  static HCRYPTPROV handle = 0; /* only freed when program ends */\n  if(!handle) {\n    if(!CryptAcquireContext(&handle, 0, 0, PROV_RSA_FULL,\n                            CRYPT_VERIFYCONTEXT | CRYPT_SILENT)) {\n      return -1;\n    }\n  }\n  while(outlen > 0) {\n    const DWORD len = outlen > 1048576UL ? 1048576UL : outlen;\n    if(!CryptGenRandom(handle, len, out)) {\n      return -2;\n    }\n    out    += len;\n    outlen -= len;\n  }\n  return 0;\n}\n```\n\nWhen targeting Windows XP or above, the CryptoAPI above can be bypassed in favor of [RtlGenRandom](http://msdn.microsoft.com/en-us/library/windows/desktop/aa387694%28v=vs.85%29.aspx):\n\n```C\n#include <stdint.h>\n#include <stdio.h>\n\n#include <Windows.h>\n\n#define RtlGenRandom SystemFunction036\n#if defined(__cplusplus)\nextern \"C\"\n#endif\nBOOLEAN NTAPI RtlGenRandom(PVOID RandomBuffer, ULONG RandomBufferLength);\n\n#pragma comment(lib, \"advapi32.lib\")\n\nint main()\n{\n    uint8_t buffer[32] = { 0 };\n    \n    if (FALSE == RtlGenRandom(buffer, sizeof buffer))\n        return -1;\n\n    for (size_t i = 0; i < sizeof buffer; ++i)\n        printf(\"%02X \", buffer[i]);\n    printf(\"\\n\");\n\n    return 0;\n}\n```\n\n## Always typecast shifted values\n\n### Problem\n\nMost cryptographic hash functions, such as SHA-1 and the SHA-2 family, combine\ntheir input bytes into larger \"word-sized\" integers before processing. In C it\nis usually done with the bitwise-left shift operator `<<`.\n\nThe left-shift behaviour can be undefined when the shifted value is signed.\nBecause of the integer promotion rule, unsigned operand like `uint8_t` may be\npromoted to `signed int` and trigger the problem.\n\nHere is a simple example where the `combine` function create a 32-bit unsigned\ninteger given four bytes:\n\n```C\n#include <limits.h>\n#include <stdint.h>\n#include <stdio.h>\n\nuint32_t\ncombine(uint8_t hh, uint8_t h, uint8_t l, uint8_t ll)\n{\n\treturn (hh << 24) | (h << 16) | (l << 8) | ll;\n}\n\nint\nmain(void)\n{\n\tuint32_t combined = combine(/* 128 */0x80, 0xaa, 0xbb, 0xcc);\n\tprintf(\"combined=0x%x\\n\", combined);\n\tprintf(\"INT_MAX=%d\\n\", INT_MAX);\n\treturn 0;\n}\n```\n\nWhen compiled with `clang-4.0 -fsanitize=undefined shift.c` the resulting\nprogram's output is:\n\n```\nshift.c:8:13: runtime error: left shift of 128 by 24 places cannot be represented in type 'int'\ncombined=0x80aabbcc\nINT_MAX=2147483647\n```\n\nHere `hh`, an `uint8_t`, is promoted to `signed int` in the expression\n`hh << 24`. Because `128 * (2 ^ 24) = 2147483648` is greater than `INT_MAX`,\nthe result cannot be represented as a `signed int` and the behaviour is undefined.\n\nThis exact problem can be found in the\n[demonstration implementation of SHA-1 in rfc3174](https://tools.ietf.org/html/rfc3174).\n\n### Solution\n\nExplicitly cast the shifted operand to the resulting type. For example, the\n`combine` function can be rewritten as:\n\n```C\nuint32_t\ncombine(uint8_t hh, uint8_t h, uint8_t l, uint8_t ll)\n{\n\treturn ((uint32_t)hh << 24) | ((uint32_t)h << 16) | ((uint32_t)l << 8) | ll;\n}\n```\n\nNote that even `l` (shifted from 8 bits) need to be cast, as the minimum\nrequirement for `INT_MAX` is `32767`.\n"
 },
 {
  "repo": "input-output-hk/scrypto",
  "language": "Scala",
  "readme_contents": "# Scrypto [![Build Status](https://travis-ci.org/input-output-hk/scrypto.svg?branch=master)](https://travis-ci.org/input-output-hk/scrypto)\n\nScrypto is an open source cryptographic toolkit designed to make it easier and safer for developers to use cryptography in their applications.\n\nIt was extracted from [Scorex](https://github.com/ScorexProject/Scorex-Lagonaki), open-source modular blockchain & cryptocurrency framework.\n\nPublic Domain.\n\n**If you want to check benchmarks for authenticated AVL+ trees, please visit [dedicated repository](https://github.com/input-output-hk/scrypto-benchmarks).\nUse the repository as code examples for the trees also, though one code example is provided in \"Authenticated Data Structures\" section below.**\n\n## Get Scrypto\n\nScrypto is available on Sonatype for Scala 2.12:\n```scala\nresolvers += \"Sonatype Releases\" at \"https://oss.sonatype.org/content/repositories/releases/\"\n```\n\nYou can use Scrypto in your sbt project by simply adding the following dependency to your build file:\n```scala\nlibraryDependencies += \"org.scorexfoundation\" %% \"scrypto\" % \"2.2.0\"\n```\n\n### Hash functions\n\nSupported hash algorithms are:\n- Blake2b\n- Keccak\n- Sha\n- Whirlpool\n- Skein\n- Stribog\n       \nTake a look at CryptographicHash interface and use supported hash algorithms like\n```scala\nKeccak512(\"some string or bytes\")\n```\nAll provided hash functions are secure, and their implementations are thread safe.\n\n### Commutative hash\n\nYou can create commutative hash from any hash function with `CommutativeHash` case class like `CommutativeHash(Sha256)`.\nA hash function h is commutative if h(x,y)==h(y,x) , for all x and y.\n\n### Binary-to-text Encoding Schemes\n\nScrypto has implementations of few binary-to-text encoding schemes:\n\n- Base16\n- Base58\n- Base64\n\nExample:\n\n```scala\n  val encoded = Base64.encode(data)\n  val restored = Base64.decode(encoded)\n  restored shouldBe data\n```\n\n### Signing functions\n\nScrypto supports following elliptic curves:\n\n- Curve25519(& Ed25519)\n\nExample:\n\n```scala\n  val curveImpl = new Curve25519\n  val keyPair = curveImpl.createKeyPair()\n  val sig = curveImpl.sign(keyPair._1, message)\n  assert(curveImpl.verify(sig, message, keyPair._2))\n```\n\n**Note on security:** Scrypto provides a simple Scala wrapper for [Curve25519-Java](https://github.com/WhisperSystems/curve25519-java) by\nWhisper Systems, so has the same security properties. JDK's SecureRandom is used to obtain seed bytes.\n\n### Authenticated data structures\n\nScrypto supports two-party authenticated AVL+ trees with the batching compression support and guaranteed verifier efficiency, as described in http://eprint.iacr.org/2016/994. \nThe implementation can be found in the `scorex.crypto.authds.avltree.batch` package. \n\n\nThe overall approach is as follows. The prover has a data structure of (key, value) pairs\nand can perform operations on it using `performOneOperation` method. An operation (see `scorex.crypto.authds.avltree.batch.Operation`) is either a lookup or a modification.\n We provide sample modifications (such as insertions, removals, and additions/subtractions from the value of a given key), but users of this code may define their own (such as subtractions that allow negative values, unlike our subtractions). A modification may be defined to fail under certain conditions (e.g., a deletion of a key that is not there, or a subtraction that results in a negative value), in which case the tree is not modified. If the operation succeeds, it returns the value associated with the key before the operation was performed. The prover can compute the digest of the current state of the data structure via the `digest` method. At any point the prover may use `generateProof`, which will produce a proof covering the batch of operations (except the ones that failed) since the last `generateProof`. \n\nThe verifier is constructed from the digest that preceeded the latest batch of operations and the proof for the latest batch. The verifier can also be given optional parameters for the maximum number of operations (and at most how many of those are deletions) in order to guarantee a bound on the verifier running time in case of a malicious proof, thus mitigating denial of service attacks. Once constructed, the verifier can replay the same sequence of operations to compute the new digest and to be assured that the operations do not fail and their return values are correct. Note that the verifier is not assured that the sequence of operations is the same as the one the prover performed---it is assumed that the prover and verifier agree on the sequence of operations (two-party authenticated data structures are useful when the prover and verifier agree on the sequence of operations). However, if the verifier digest matches the prover digest after the sequence of operations, then the verifier is assured that the state of the data structure is the same, regardless of what sequence of operations led to this state.\n\nWe also provide `unauthenticatedLookup` for the prover, in order to allow the prover to look up values in the data structure without affecting the proof. \n\nHere are code examples for generating proofs and checking them. In this example we demonstrate two batches of operations, starting with the empty tree. In the first batch, a prover inserts three values into the tree; in the second batch, the prover changes the first value, attempts to subtract too much from the second one, which fails, looks up the third value, and attempts to delete a nonexisting value, which also fails. We use 1-byte keys for simplicity; in a real deployment, keys would be longer.\n \n* First, we create a prover and get an initial digest from it (in a real application, this value is a public constant because anyone, including verifiers, can compute it by using the same two lines of code)\n\n```scala\n  import com.google.common.primitives.Longs\n  import scorex.crypto.authds.{ADKey, ADValue}\n  import scorex.crypto.authds.avltree.batch._\n  import scorex.crypto.hash.{Blake2b256, Digest32}\n\n  val prover = new BatchAVLProver(keyLength = 1, valueLengthOpt = Some(8))\n  val initialDigest = prover.digest\n```        \n\n\n* Second, we create the first batch of tree modifications, inserting keys 1, 2, and 3 with values 10, 20, and 30. We use `com.google.common.primitives.Longs.toByteArray` to get 8-byte values out of longs.\n\n```scala\n  val key1 = Array(1:Byte)\n  val key2 = Array(2:Byte)\n  val key3 = Array(3:Byte)\n  val op1 = Insert(ADKey @@ key1, ADValue @@ Longs.toByteArray(10))\n  val op2 = Insert(ADKey @@ key2, ADValue @@ Longs.toByteArray(20))\n  val op3 = Insert(ADKey @@ key3, ADValue @@ Longs.toByteArray(30))\n```\n    \n* The prover applies the three modifications to the empty tree, obtains the first batch proof, and announces the next digest `digest1`.\n    \n```scala    \n  prover.performOneOperation(op1) // Returns Success(None)\n  prover.performOneOperation(op2) // Returns Success(None)\n  prover.performOneOperation(op3) // Returns Success(None)\n  val proof1 = prover.generateProof()\n  val digest1 = prover.digest\n```    \n      \n* A proof is just an array of bytes, so you can immediately send it over a wire or save it to a disk. \n\n* Next, the prover attempts to perform five more modifications: changing the first value to 50, subtracting 40 from the second value (which will fail, because our UpDateLongBy operation is designed to fail on negative values), looking up the third value, deleting the key 5 (which will also fail, because key 5 does not exist), and deleting the third value. After the four operations, the prover obtains a second proof, and announces the new digest `digest2` \n\n```scala\n  val op4 = Update(ADKey @@ key1, ADValue @@ Longs.toByteArray(50))\n  val op5 = UpdateLongBy(ADKey @@ key2, -40)\n  val op6 = Lookup(ADKey @@ key3)\n  val op7 = Remove(ADKey @@ Array(5:Byte))\n  val op8 = Remove(ADKey @@ key3)\n  prover.performOneOperation(op4) // Returns Success(Some(Longs.toByteArray(10)))\n  // Here we can, for example, perform prover.unauthenticatedLookup(key1) to get 50\n  // without affecting the proof or anything else\n  prover.performOneOperation(op5) // Returns Failure\n  prover.performOneOperation(op6) // Returns Success(Some(Longs.toByteArray(30)))\n  prover.performOneOperation(op7) // Returns Failure\n  prover.performOneOperation(op8) // Returns Success(Some(Longs.toByteArray(30)))\n  val proof2 = prover.generateProof() // Proof only for op4 and op6\n  val digest2 = prover.digest\n```\n\n* We now verify the proofs. For each batch, we first construct a verifier using the digest that preceded the batch and the proof of the batch; we also supply an upper bound on the number of operations in the batch and an upper bound on how many of those operations are deletions. Note that the number of operations can be None, in which case there is no guaranteed running time bound; furthermore, the number of deletions can be None, in which case the guaranteed running time bound is not as small as it can be if a good upper bound on the number of deletion is supplied. \n\n* Once the verifier for a particular batch is constructed, we perform the same operations as the prover, one by one (but not the ones that failed for the prover). If verification fails at any point (at construction time or during an operation), the verifier digest will equal None from that point forward, and no further verifier operations will change the digest.  Else, the verifier's new digest is the correct one for the tree as modified by the verifier. Furthermore, if the verifier performed the same modifications as the prover, then the verifier and prover digests will match.\n\n```scala\n  val verifier1 = new BatchAVLVerifier[Digest32, Blake2b256.type](initialDigest, proof1, keyLength = 1, valueLengthOpt = Some(8), maxNumOperations = Some(2), maxDeletes = Some(0))\n  verifier1.performOneOperation(op1) // Returns Success(None)\n  verifier1.performOneOperation(op2) // Returns Success(None)\n  verifier1.performOneOperation(op3) // Returns Success(None)\n  verifier1.digest match {\n    case Some(d1) if d1.sameElements(digest1) =>\n      //If digest1 from the prover is already trusted, then verification of the second batch can simply start here\n      val verifier2 = new BatchAVLVerifier[Digest32, Blake2b256.type](d1, proof2, keyLength = 1, valueLengthOpt = Some(8), maxNumOperations = Some(3), maxDeletes = Some(1))\n      verifier2.performOneOperation(op4) // Returns Success(Some(Longs.toByteArray(10)))\n      verifier2.performOneOperation(op6) // Returns Success(Some(Longs.toByteArray(30)))\n      verifier2.performOneOperation(op8) // Returns Success(Some(Longs.toByteArray(30)))\n      verifier2.digest match {\n        case Some(d2) if d2.sameElements(digest2) => println(\"first and second digest value and proofs are valid\")\n        case _ => println(\"second proof or announced digest NOT valid\")\n      }\n    case _ =>\n      println(\"first proof or announced digest NOT valid\")\n  }\n```\n\n# Merkle Tree\n\n[TODO: describe MerkleTree & MerkleProof classes]\n\n# Tests\n\nRun `sbt test` from a folder containing the framework to launch tests.\n\n# Benchmarks\n\nRun `sbt bench:test` from a folder containing the framework to launch embedded benchmarks.\n\n# License\n\nThe code is under Public Domain CC0 license means you can do anything with it. Full license text is in [COPYING file](https://github.com/ScorexProject/scrypto/blob/master/COPYING)\n\n# Contributing\n\nYour contributions are always welcome! Please submit a pull request or create an issue to add a new cryptographic primitives or better implementations.\n"
 },
 {
  "repo": "nucypher/nucypher",
  "language": "Python",
  "readme_contents": "![](./docs/source/.static/img/nucypher.png)\n\n*A decentralized cryptological network offering accessible, intuitive, and extensible runtimes and interfaces for secrets management and dynamic access control.*\n\n[![pypi](https://img.shields.io/pypi/v/nucypher.svg?style=flat)](https://pypi.org/project/nucypher/)\n[![pyversions](https://img.shields.io/pypi/pyversions/nucypher.svg)](https://pypi.org/project/nucypher/)\n[![codecov](https://codecov.io/gh/nucypher/nucypher/branch/main/graph/badge.svg)](https://codecov.io/gh/nucypher/nucypher)\n[![circleci](https://img.shields.io/circleci/project/github/nucypher/nucypher.svg?logo=circleci)](https://circleci.com/gh/nucypher/nucypher/tree/main)\n[![discord](https://img.shields.io/discord/411401661714792449.svg?logo=discord)](https://discord.gg/7rmXa3S)\n[![Documentation Status](https://readthedocs.org/projects/nucypher/badge/?version=latest)](https://nucypher.readthedocs.io/en/latest/)\n[![license](https://img.shields.io/pypi/l/nucypher.svg)](https://www.gnu.org/licenses/gpl-3.0.html)\n\n----\n\nThe NuCypher network provides accessible, intuitive, and extensible runtimes and interfaces\nfor secrets management and dynamic access control.\n* Accessible - The network is permissionless and censorship-resistant.\nThere are no gate-keepers and anyone can use it.\n* Intuitive - The network leverages the classic cryptological narrative of Alice and Bob\n(with additional characters where appropriate). This character-based narrative permeates the code-base and helps\ndevelopers write safe, misuse-resistant code.\n* Extensible - The network currently supports proxy re-encryption but can be extended to provide support for other cryptographic primitives.\n\nAccess permissions are baked into the underlying encryption,\nand access can only be explicitly granted by the data owner via sharing policies.\nConsequently, the data owner has ultimate control over access to their data.\nAt no point is the data decrypted nor can the underlying private keys be\ndetermined by the NuCypher network.\n\nUnder the hood, the NuCypher network uses the [Umbral](https://github.com/nucypher/pyUmbral)\nthreshold proxy re-encryption scheme to provide cryptographic access control.\n\n# How does NuCypher work?\n\n![](./docs/source/.static/img/nucypher_overview.png)\n\n01. Alice, the data owner, grants access to her encrypted data to\nanyone she wants by creating a policy and uploading it to\nthe NuCypher network.\n\n02. A group of Ursulas, which are nodes on the NuCypher network,\nreceive information about the policy, called a PolicyArrangement that include\na re-encryption key share. The Ursulas stand ready to re-encrypt data in exchange for payment\nin fees and token rewards. Thanks to the use of proxy re-encryption,\nUrsulas and the storage layer never have access to Alice's plaintext data.\n\n03. Each policy created by Alice has an associated encryption key, which can be used\nby any entity (Enrico) to encrypt data on Alice's behalf.\nThis entity could be an IoT device in her car, a collaborator assigned\nthe task of writing data to her policy, or even a third-party creating\ndata that belongs to her \u2013 for example, a lab analyzing medical tests.\nThe resulting encrypted data can be uploaded to IPFS, Swarm, S3,\nor any other storage layer.\n\n04. Bob, a data recipient, obtains the encrypted data from the storage layer and sends an access request\nto the NuCypher network. If the policy is satisfied, the data is re-encrypted to his public key\nand he can decrypt it with his private key.\n\n05. Ursulas earn fees and token rewards for performing\nre-encryption operations.\n\nMore detailed information:\n\n- Documentation https://docs.nucypher.com/\n- Website https://www.nucypher.com/\n\n\n# Whitepapers\n\n### Network\n\n[*\"NuCypher - A proxy re-encryption network to empower privacy in decentralized systems\"*](https://github.com/nucypher/whitepaper/blob/master/whitepaper.pdf)\n\n*by Michael Egorov, David Nu\u00f1ez, and MacLane Wilkison - NuCypher*\n\n### Economics\n\n[*\"NuCypher - Staking Protocol & Economics\"*](https://github.com/nucypher/whitepaper/blob/master/economics/staking_protocol/NuCypher_Staking_Protocol_Economics.pdf)\n\n*by Michael Egorov, MacLane Wilkison, Arjun Hassard - NuCypher*\n\n\n[*\"NuCypher - Pricing Protocol & Economics\"*](https://github.com/nucypher/whitepaper/blob/master/economics/pricing_protocol/NuCypher_Network__Pricing_Protocol_Economics.pdf)\n\n*by Arjun Hassard - NuCypher*\n\n### Cryptography\n\n[*\"Umbral: A Threshold Proxy Re-Encryption Scheme\"*](https://github.com/nucypher/umbral-doc/blob/master/umbral-doc.pdf)\n\n*by David Nu\u00f1ez*\n\n# Getting Involved\n\nNuCypher is a community-driven project and we're very open to outside contributions.\n\nAll our development discussions happen in our [Discord server](https://discord.gg/7rmXa3S), where we're happy to answer technical questions, discuss feature requests,\nand accept bug reports.\n\nIf you're interested in contributing code, please check out our [Contribution Guide](https://docs.nucypher.com/en/latest/support/contribution.html)\nand browse our [Open Issues](https://github.com/nucypher/nucypher/issues) for potential areas to contribute.\n\nGet up and running quickly by using our [docker development setup](dev/docker/README.md)\n\n# Security\n\nIf you identify vulnerabilities with _any_ nucypher code, please email security@nucypher.com with relevant information to your findings.\nWe will work with researchers to coordinate vulnerability disclosure between our stakers, partners, and users to ensure successful mitigation of vulnerabilities.\n\nThroughout the reporting process, we expect researchers to honor an embargo period that may vary depending on the severity of the disclosure.\nThis ensures that we have the opportunity to fix any issues, identify further issues (if any), and inform our users.\n\nSometimes vulnerabilities are of a more sensitive nature and require extra precautions.\nWe are happy to work together to use a more secure medium, such as Signal.\nEmail security@nucypher.com and we will coordinate a communication channel that we're both comfortable with.\n\nA great place to begin your research is by working on our testnet.\nPlease see our [documentation](https://docs.nucypher.com) to get started.\nWe ask that you please respect testnet machines and their owners.\nIf you find a vulnerability that you suspect has given you access to a machine against the owner's permission, stop what you're doing and immediately email security@nucypher.com.\n"
 },
 {
  "repo": "AlexMAS/GostCryptography",
  "language": "C#",
  "readme_contents": "# GostCryptography\n\n.NET driver for [ViPNet CSP](http://www.infotecs.ru/) and [CryptoPro CSP](http://www.cryptopro.ru/).\nImplements crypto algorithms based on Russian national cryptographic standards `GOST 28147-89`, `GOST R 34.10`\nand `GOST R 34.11`. Also provides abstractions to sign and verify `CMS/PKCS #7` messages, sign, verify and\nencrypt XML documents.\n\n- [NuGet Package](https://www.nuget.org/packages/GostCryptography)\n- [Examples](Source/GostCryptography.Tests)\n- [License](LICENSE)\n\n## Implemented Algorithms\n\n- [Symmetric algorithm based on GOST 28147-89](Source/GostCryptography/Gost_28147_89/Gost_28147_89_SymmetricAlgorithm.cs)\n- [Hash-based Message Authentication Code (HMAC) based on GOST 28147-89](Source/GostCryptography/Gost_28147_89/Gost_28147_89_ImitHashAlgorithm.cs)\n\n- [Hash algorithm based on GOST R 34.11-94](Source/GostCryptography/Gost_R3411/Gost_R3411_94_HashAlgorithm.cs), [2012/256](Source/GostCryptography/Gost_R3411/Gost_R3411_2012_256_HashAlgorithm.cs), [2012/512](Source/GostCryptography/Gost_R3411/Gost_R3411_2012_512_HashAlgorithm.cs)\n- [Hash-based Message Authentication Code (HMAC) based on GOST R 34.11-94](Source/GostCryptography/Gost_R3411/Gost_R3411_94_HMAC.cs), [2012/256](Source/GostCryptography/Gost_R3411/Gost_R3411_2012_256_HMAC.cs), [2012/512](Source/GostCryptography/Gost_R3411/Gost_R3411_2012_512_HMAC.cs)\n- [Pseudorandom Function (PRF) based on GOST R 34.11-94](Source/GostCryptography/Gost_R3411/Gost_R3411_94_PRF.cs), [2012/256](Source/GostCryptography/Gost_R3411/Gost_R3411_2012_256_PRF.cs), [2012/512](Source/GostCryptography/Gost_R3411/Gost_R3411_2012_512_PRF.cs)\n\n- [Asymmetric algorithm based on GOST R 34.10-2001](Source/GostCryptography/Gost_R3410/Gost_R3410_2001_AsymmetricAlgorithm.cs), [2012/256](Source/GostCryptography/Gost_R3410/Gost_R3410_2012_256_AsymmetricAlgorithm.cs), [2012/512](Source/GostCryptography/Gost_R3410/Gost_R3410_2012_512_AsymmetricAlgorithm.cs)\n- [Asymmetric algorithm with an ephemeral key based on GOST R 34.10-2001](Source/GostCryptography/Gost_R3410/Gost_R3410_2001_EphemeralAsymmetricAlgorithm.cs), [2012/256](Source/GostCryptography/Gost_R3410/Gost_R3410_2012_256_EphemeralAsymmetricAlgorithm.cs), [2012/512](Source/GostCryptography/Gost_R3410/Gost_R3410_2012_512_EphemeralAsymmetricAlgorithm.cs)\n\n- [Asymmetric key exchange formatter based on GOST R 34.10-2001](Source/GostCryptography/Gost_R3410/Gost_R3410_2001_KeyExchangeFormatter.cs), [2012/256](Source/GostCryptography/Gost_R3410/Gost_R3410_2012_256_KeyExchangeFormatter.cs), [2012/512](Source/GostCryptography/Gost_R3410/Gost_R3410_2012_512_KeyExchangeFormatter.cs)\n- [Asymmetric key exchange deformatter based on GOST R 34.10-2001](Source/GostCryptography/Gost_R3410/Gost_R3410_2001_KeyExchangeDeformatter.cs), [2012/256](Source/GostCryptography/Gost_R3410/Gost_R3410_2012_256_KeyExchangeDeformatter.cs), [2012/512](Source/GostCryptography/Gost_R3410/Gost_R3410_2012_512_KeyExchangeDeformatter.cs)\n\n- [Asymmetric signature formatter based on GOST R 34.10-2001, 2012/256, 2012/512](Source/GostCryptography/Base/GostSignatureFormatter.cs)\n- [Asymmetric signature deformatter based on GOST R 34.10-2001, 2012/256, 2012/512](Source/GostCryptography/Base/GostSignatureDeformatter.cs)\n\n- [XML encryption based on GOST R 34.10-2001, 2012/256, 2012/512](Source/GostCryptography/Xml/GostEncryptedXml.cs)\n- [XML signing based on XML-DSig and GOST R 34.10-2001, 2012/256, 2012/512](Source/GostCryptography/Xml/GostSignedXml.cs)\n- [Signing and verifying of CMS/PKCS #7 messages based on GOST R 34.10-2001, 2012/256, 2012/512](Source/GostCryptography/Pkcs/GostSignedCms.cs)\n\n## Tested On\n\n- Windows 10 x64, CryptoPro CSP 4.0.9963\n- Windows 10 x64, ViPNet CSP 4.2.8.51670\n\n## Build instructions\n\nTo build package run in repository root:\n\n```\ndotnet build --configuration Release\n```\n"
 },
 {
  "repo": "pyca/pynacl",
  "language": "C",
  "readme_contents": "===============================================\nPyNaCl: Python binding to the libsodium library\n===============================================\n\n.. image:: https://img.shields.io/pypi/v/pynacl.svg\n    :target: https://pypi.org/project/PyNaCl/\n    :alt: Latest Version\n\n.. image:: https://codecov.io/github/pyca/pynacl/coverage.svg?branch=main\n    :target: https://codecov.io/github/pyca/pynacl?branch=main\n\n.. image:: https://img.shields.io/pypi/pyversions/pynacl.svg\n    :target: https://pypi.org/project/PyNaCl/\n    :alt: Compatible Python Versions\n\nPyNaCl is a Python binding to `libsodium`_, which is a fork of the\n`Networking and Cryptography library`_. These libraries have a stated goal of\nimproving usability, security and speed. It supports Python 3.6+ as well as\nPyPy 3.\n\n.. _libsodium: https://github.com/jedisct1/libsodium\n.. _Networking and Cryptography library: https://nacl.cr.yp.to/\n\nFeatures\n--------\n\n* Digital signatures\n* Secret-key encryption\n* Public-key encryption\n* Hashing and message authentication\n* Password based key derivation and password hashing\n\n`Changelog`_\n------------\n\n.. _Changelog: https://pynacl.readthedocs.io/en/latest/changelog/\n"
 },
 {
  "repo": "ANSSI-FR/libecc",
  "language": "C",
  "readme_contents": "[![Build Status](https://travis-ci.com/rb-anssi/libecc.svg?branch=master)](https://travis-ci.com/ANSSI-FR/libecc)\n\n# libecc project\n\n## Copyright and license\nCopyright (C) 2017-2022\n\nThis software is licensed under a dual BSD and GPL v2 license.\nSee [LICENSE](LICENSE) file at the root folder of the project.\n\n## Authors\n\n  * Ryad BENADJILA (<mailto:ryadbenadjila@gmail.com>)\n  * Arnaud EBALARD (<mailto:arnaud.ebalard@ssi.gouv.fr>)\n  * Jean-Pierre FLORI (<mailto:jpflori@gmail.com>)\n\n## Contributors\n  * Nicolas VIVET (<mailto:nicolas.vivet@ssi.gouv.fr>)\n  * Karim KHALFALLAH (<mailto:karim.khalfallah@ssi.gouv.fr>)\n  * Niels SAMWEL (<mailto:nsamwel@google.com>)\n\n## Description\nThis software implements a library for elliptic curves based\ncryptography (ECC). The API supports signature algorithms specified\nin the [ISO 14888-3:2018](https://www.iso.org/standard/76382.html)\nstandard, with the following specific curves and hash functions:\n\n  * **Signatures**: ECDSA, ECKCDSA, ECGDSA, ECRDSA, EC{,O}SDSA, ECFSDSA, SM2.\n  * **Curves**: SECP{192,224,256,384,521}R1, BRAINPOOLP{192,224,256,384,512}R1,\n  FRP256V1, GOST{256,512}, SM2P256V1. The library can be easily expanded with\n  user defined curves using a standalone helper script.\n  * **Hash functions**: SHA-2 and SHA-3 hash functions (224, 256, 384, 512), SM3, RIPEMD-160,\nGOST 34.11-2012 as described in [RFC 6986](https://datatracker.ietf.org/doc/html/rfc6986)\n(also known as [Streebog](https://tc26.ru/en/events/research-projects-competition/streebog-competition.html)),\nSHAKE256 in its restricted version with 114 bytes output (mainly for Ed448).\n**HMAC** based on any of these hash functions is also included.\n\nECDSA comes in two variants: the classical non-deterministic one, and the **deterministic** ECDSA\nas described in [RFC 6979](https://datatracker.ietf.org/doc/html/rfc6979). The deterministic version\ngenerates nonces using a HMAC-DRBG process, and is suitable for situations where there is\nno RNG or where entropy sources are considered weak (please note that any leak on these nonces\nbits can lead to devastating attacks exploiting the [Hidden Number Problem](https://eprint.iacr.org/2020/615.pdf)).\nOn the downside, the deterministic version of ECDSA is susceptible to [fault attacks](https://eprint.iacr.org/2017/1014.pdf).\nHence, one will have to **carefully select** the suitable version to use depending on the usage and\nattack context (i.e. which of side-channel attacks or fault attacks are easier to perform).\n\nThe library also supports EdDSA (Ed25519 and Ed448) as defined in [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032) with\nall their variants (with context, pre-hashed).\nSince the core of the library supports short Weierstrass curves, and as\nEdDSA uses instead Twisted Edwards curves with dedicated formulas, we use\n**isogenies** as described in the [lwig-curve-representations](https://datatracker.ietf.org/doc/html/draft-ietf-lwig-curve-representations)\ndraft. Isogenies are transformations (homomorphisms that are almost isomorphisms) between\ncurves models, allowing to implement operations on one model by operating with\nformulas on another model. Concretely, in our case we perform computations on\nthe Weierstrass WEI25519 that is isogenic to Ed25519 (Twisted Edwards)\nand Curve25519 (Montgomery) curves. This, of course, induces overheads in computations\nwhile having the great benefit of keeping the library core mathematical foundations simple\nand keep the defense-in-depth (regarding software security and side-channels) focused on\na rather limited part: see the discussions below on libecc efforts with regards to security.\n\nPlease note that as for deterministic ECDSA, EdDSA signatures are trivially susceptible to\n[fault attacks](https://eprint.iacr.org/2017/1014.pdf) without having a non-deterministic\nvariant. Hence, when using EdDSA one will have to either ensure that the usage context naturally prevents\nsuch attacks, that the platform implements countermeasures (e.g. using secure MCUs, etc.) or that\nother means allow to detect/mitigate such attacks (e.g. on the compilation toolchain side).\n\nRegarding the specific case of ECRDSA (the Russian standard), libecc implements by default the\n[RFC 7091](https://datatracker.ietf.org/doc/html/rfc7091) and [draft-deremin-rfc4491-bis](https://datatracker.ietf.org/doc/html/draft-deremin-rfc4491-bis)\nversions to comply with the standard test vectors (provided in the form of X.509 certificates).\nThis version of the algorithm **differs** from the ISO/IEC 14888-3 description and test vectors,\nthe main difference coming from the way the hash of the message to be signed/verified is processed:\nin the RFCs, the little endian representation of the hash is taken as big number while in ISO/IEC the big endian\nrepresentation is used. This seems (to be confirmed) to be a discrepancy of ISO/IEC 14888-3 algorithm description\nthat must be fixed there. In order to allow users to still be able to reproduce the ISO/IEC behavior, we provide\na compilation toggle that will force this mode `USE_ISO14888_3_ECRDSA=1`:\n\n<pre>\n\t$ USE_ISO14888_3_ECRDSA=1 make\n</pre>\n\nECDH (Elliptic Curve Diffie-Hellman) variants are also implemented in the\nlibrary. Classical ECDH over Weierstrass curves is implemented in the form\nof ECC-CDH (Elliptic Curve Cryptography Cofactor Diffie-Hellman) as described\nin [section 5.7.1.2 of the NIST SP 800-56A Rev. 3](https://csrc.nist.gov/publications/detail/sp/800-56a/rev-3/final) standard. Montgomery curves\nbased algorithms (Curve25519 and Curve448) are included as specified in [RFC7748](https://datatracker.ietf.org/doc/html/rfc7748),\nalthough the implementation somehow diverges from the canonical ones as u coordinates on the curve\nquadratic twist are rejected (this is due to the underlying usage of isogenies to\nhandle Montgomery curves). This divergence does not impact the ECDH use case though.\n\n\nAdvanced usages of this library also include the possible implementation\nof elliptic curve based protocols as well as any algorithm\non top of prime fields based elliptic curves (or prime fields, or rings\nof integers). Many examples are present in the [src/examples](src/examples)\nfolder, notable ones being:\n  * Pollard-Rho, Miller-Rabin and square residues over finite fields.\n  * The RSA cryptosystem as defined in the PKCS#1 [RFC8017](https://datatracker.ietf.org/doc/html/rfc8017)\nstandard. This implementation also comes with the integration of deprecated hash\nfunctions such as MD2, MD4, MD5, SHA-0, SHA-1, MDC-2, GOSTR34-11-94 and so on in order to be compliant with existing\nsignatures (e.g. in X.509). These primitives are **not** included in the core\nlibrary on purpose: they are **dangerous and broken** and must only be used for\ntests purposes.\n  * The DSA cryptosystem as defined in [FIPS 186-4](https://csrc.nist.gov/publications/detail/fips/186/4/final).\n  * The SDSA (Schnorr DSA) as defined in ISO14888-3\n  * The KCDSA (Korean DSA) as defined in ISO14888-3\n  * The GOSTR34-10-94 function as defined in [RFC4491](https://www.rfc-editor.org/rfc/rfc4491)\n  * The SSS (Shamir Secret Sharing) algorithm over a prime field of 256 bits.\n\n\n**NOTE**: for all the primitives (specifically relevant for signature primitives), a maximum\nallowed size for big numbers is **4096 bits** with word size **64 bits** (this will be less\nfor word sizes 16 and 32 bits). This is due to an internal limitation of libecc\non big numbers allocation documented [here](src/nn/nn_config.h). We can live with\nthis limitation as the library is primarily intended to focus on ECC based algorithms.\nHowever, one should be aware that for example RSA with modulus > 4096 will fail (as well\nand DSA and other El-Gamal based algorithms): these primitives are only included as\nexamples and should be used with care.\n\n**NOTE**: handling 4096 bits NN numbers must be explicitly configured at compilation\ntime using the `-DUSER_NN_BIT_LEN=4096` toggle in the `CFLAGS` or `EXTRA_CFLAGS` as explained\nin [the dedicated section](https://github.com/ANSSI-FR/libecc#modifying-the-big-numbers-size).\n\n\nCompared to other cryptographic libraries providing such\nfeatures, the differentiating points are:\n\n  * A focus on code readability and auditability. The code is pure C99,\n\twith no dynamic allocation and includes pre/post-asserts in the code.\n\tHence, this library is a good candidate for embedded targets (it should be\n\teasily portable accross various platforms).\n  * A clean layer separation for all needed mathematical abstractions and\n\toperations. Strong typing (as \"strong\" as C99 allows, of course) of\n\tmathematical objects has been used in each layer.\n  * The library has NOT been designed to break performance records, though\n\tit does a decent job (see the [performance section discussion](#performance)). Similarly,\n\tthe library memory footprint (in terms of ROM and RAM usage) is not the\n\tsmallest achievable one (though some efforts have been made to limit it\n\tand fit \"common\" platforms, see the [dedicated section](#constrained-devices)).\n  * libecc library core has **no external dependency** (not even the standard\n\tlibc library) to make it portable. See the\n\t[section about portability](#compatibility-and-portability) for more information.\n\n## Building\n\n### Building the static libraries and the signature self tests\n\nThe main [Makefile](Makefile) is in the root directory, and compiling is as simple as\nexecuting:\n\n<pre>\n\t$ make\n</pre>\n\nBy default, compilation is quiet. **Verbose compilation** (i.e. showing all the compilation\nexecuted commands) can be achieved using the `VERBOSE=1` toggle:\n\n<pre>\n\t$ VERBOSE=1 make\n</pre>\n\nThis will compile different elements in the [build](build/) directory:\n\n  * Three **archive** static libraries, each one containing (based on) the previous ones:\n\t* **libarith.a**: this library contains the Natural Numbers (NN) and Finite field over primes\n        (Fp) arithmetic layers.\n\t* **libec.a**: this library is based on libarith.a and contains the EC curves implementation\n\t(points abstraction, point addition/doubling formulas and scalar multiplication).\n\t* **libsign.a**: this library is based on libec.a and contains all our ISO 14888-3 signature\n\talgorithms over some statically defined curves and hash functions.\n  * Two binaries based on the libsign.a static library:\n\t* **ec\\_self\\_tests**: the self tests for signature/verification algorithm of ISO 14888-3\n\twith known and random test vectors, as well as performance tests. Launching the self tests without\n\tan argument will execute the three tests (known and fixed test vectors, random sign/verify\n\tchecks, and performance measurements). One can also launch each test separately.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For known test vectors:\n<pre>\n\t$ ./build/ec_self_tests vectors\n\t======= Known test vectors test ===================\n\t[+] ECDSA-SHA224/secp224r1 selftests: known test vectors sig/verif ok\n\t[+] ECDSA-SHA256/secp256r1 selftests: known test vectors sig/verif ok\n\t[+] ECDSA-SHA512/secp256r1 selftests: known test vectors sig/verif ok\n\t...\n</pre>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For sign/verify checks (with random key pairs and random data):\n\n<pre>\n\t$ ./build/ec_self_tests rand\n\t======= Random sig/verif test ===================\n\t[+]  ECDSA-SHA224/FRP256V1 randtests: random import/export with sig(0)/verif(0) ok\n\t[+] ECDSA-SHA224/SECP224R1 randtests: random import/export with sig(0)/verif(0) ok\n\t...\n</pre>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For performance measurements:\n\n<pre>\n\t$ ./build/ec_self_tests perf\n\t======= Performance test =====================\n\t[+]  ECDSA-SHA224/FRP256V1 perf: 462 sign/s and 243 verif/s\n\t[+] ECDSA-SHA224/SECP224R1 perf: 533 sign/s and 276 verif/s\n\t...\n</pre>\n\n**NOTE**: it is possible to parallelize self tests (known and random) using the\n[OpenMP](https://en.wikipedia.org/wiki/OpenMP) framework (usually packaged with\nmost distros) by using the `OPENMP_SELF_TESTS=1` compilation toggle. This requires\nthe `WITH_STDLIB` option (as it obviously uses the standard library). Performance\ntests are not parallelized due to possible shared ressources exhaustion between CPUs and cores\n(e.g. caches, Branch Prediction Units, etc.).\n\n- **ec\\_utils**: a tool for signing and verifying user defined files, with a user\nprovided signature algorithm/curve/hash function triplet. The tool can also be\nused to generate signature keys.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Generate keys for ECKCDSA over the BRAINPOOLP512R1 curve, with\nthe 'mykeypair' prefix:\n<pre>\n\t$ ./build/ec_utils gen_keys BRAINPOOLP512R1 ECKCDSA mykeypair\n</pre>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This will create four files. Two\nbinary '.bin' files corresponding to the private key (mykeypair\\_private\\_key.bin)\nand the public key (mykeypair\\_public\\_key.bin). Two header '.h' files are also\ncreated, corresponding to a C style header version of the keys so that these can\nbe included and used in a C program using libecc. Note that both kind of keys\n(public and private) include leading metadata (type, algorithm, curve, etc) for\npossible sanity checks when they are used (e.g. to detect passing of an ECDSA\nprivate key to an ECKCDSA signature call, etc).\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Once the key pair has been created,\none can sign a raw binary file named 'myfile' and store the signature in\n'sig.bin'. In the example below, we use SHA3\\_512 as the hash function for\nthe signature. BRAINPOOLP512R1 and ECKCDSA are explicitly given (matching the\ntype of key we generated during previous step). Note that the call would yield\nan error if invalid parameters were given (thanks to the metadata elements\ndescribed above).\n<pre>\n\t$ ./build/ec_utils sign BRAINPOOLP512R1 ECKCDSA SHA3_512 myfile mykeypair_private_key.bin sig.bin\n</pre>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; After this, a raw signature is created, mainly consisting of the ECKCDSA (r, s) big\nnumbers concatenated (the length of this file should be 1024 bits = 2 x 512 bits). The signature can now be verified with\nthe 'verify' command and the public key, the result being either **OK** or **failed**:\n<pre>\n\t$ ./build/ec_utils verify BRAINPOOLP512R1 ECKCDSA SHA3_512 myfile mykeypair_public_key.bin sig.bin\n\t  Signature check of myfile OK\n</pre>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ec\\_utils tool can also be used to produce/verify **structured binaries**\ncontaining a header, raw binary and their signature (see the 'struct\\_sign' and 'struct\\_verify' commands for a help on\nthis mode). The rationale behind these commands is to ease the production/verification of self-contained signed images\n(which can be useful when dealing with embedded firmware updates for instance).\n\n### Building the user examples\n\nSince it is possible to use libecc as a NN (**positive** Natural Numbers), Fp (Finite field over primes) or EC curve layer library,\nwe provide some examples in the [src/examples](src/examples) folder. Compiling these examples is as simple as:\n<pre>\n\t$ cd src/examples\n\t$ make\n</pre>\n\n* NN layer examples:\n  * [src/examples/basic/nn&lowbar;miller&lowbar;rabin.c](src/examples/basic/nn_miller_rabin.c): this example implements the\n    [Miller-Rabin](https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test) composition (or probabilistic primality) test as\n    described in the [Handbook of Applied Cryptography (4.29)](http://cacr.uwaterloo.ca/hac/about/chap4.pdf).\n  * [src/examples/basic/nn&lowbar;pollard&lowbar;rho.c](src/examples/nn_pollard_rho.c): this example is a straightforward\n    implementation of the [Pollard's Rho](https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm) integer factorization\n    algorithm as specified in the [Handbook of Applied Cryptography (3.9)](http://cacr.uwaterloo.ca/hac/about/chap3.pdf).\n\n* Fp layer examples:\n  * [src/examples/basic/fp&lowbar;square&lowbar;residue.c](src/examples/basic/fp_square_residue.c): this is an implementation of\n  the [Tonelli-Shanks](https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm) algorithm for finding quadratic residues\n  over a prime field Fp. Given a prime field element x, the algorithm finds y so that y<sup>2</sup> = x (or informs that there\n  is no solution if this is the case).\n\n* Curves layer examples:\n  * [src/examples/basic/curve&lowbar;basic&lowbar;examples.c](src/examples/basic/curve_basic_examples.c): this example shows basic\n  features of libec for playing with elliptic curves group arithmetic, namely loading defined named curves, generating random points on\n  these curves, checking point addition and doubling formulas as well as scalar multiplication (both Montgomery and non Montgomery based).\n  \n  * [src/examples/basic/curve&lowbar;ecdh.c](src/examples/basic/curve_ecdh.c): the purpose of this code is to provide a toy example of\n  how to implement an [Elliptic Curve Diffie-Hellman](https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman) protocol between two\n  entities 'Alice' and 'Bob' in order to produce a shared secret over a public channel.\n\n**WARNING**: these examples are **toy implementations** not to be used in a production environment (for instance, the code\nhas neither been designed to be efficient nor robust against side channel attacks). Their purpose is only to show basic usage of the\nlibarith and libec libraries.\n\nThe **public headers** containing the functions to be used by higher level code are [src/libarith.h](src/libarith.h),\n[src/libec.h](src/libec.h) and [src/libsig.h](src/libsig.h): they are respectively used for the NN and Fp arithmetic layers,\nthe Elliptic Curves layer, and the signature layer.\n\nMore advanced examples are present in the examples folder:\n\n* Obsolete hash algorithms as an expansion to libecc core algorithms, in [src/examples/hash](src/examples/hash) (MD2, MD4, MD5, MDC2, SHA-0,\nSHA-1, and TDES for supporting MDC2). Please **be careful** when using them, it is advised to use them as toy primitives in **non-production code**\n(e.g. for checking old protocols and cipher suites).\n\n* Pre-ECC Signature schemes (based on Fp finite fields discrete logarithm) in [src/examples/sig](src/examples/sig) (RSA, DSA, SDSA, KCDSA,\nGOSTR34-10-94). Beware that for these signatures, you will have to expand the NN size to bigger values than the default (e.g. supporting RSA 4096\nwill need a size of at least 4096 bits for NN, see how to expand the size in the documentation [here](src/nn/nn_config.h)). Although some\nefforts have been made when developing these signature algorithms, using them in production code should be decided with care (e.g. regarding\nside-channel attack and so on).\n\n* SSS (Shamir Secret Sharing) in [src/examples/sss](src/examples/sss).\n\n\n### Building the NN and Fp arithmetic tests\n\nlibecc is provided with arithmetic random tests for the low level NN and Fp routines (addition, subtraction, logical\noperations, multiplication and Montgomery multiplication, ...).\n\nThese tests are located inside the [src/arithmetic&lowbar;tests/](src/arithmetic_tests/) folder. More specifically, the tests\nare split in two files:\n\n* [src/arithmetic&lowbar;tests/arithmetic&lowbar;tests.c](src/arithmetic_tests/arithmetic_tests.c): a '.c' file to be compiled and linked with libecc\nstatic library and performing a set of tests given on the standard input or in a file. The tests have a specific ASCII\nformat with expected input/output as big numbers, and crafted **opcodes** defining the operation type (addition over\nNN, over Fp, ...).\n* [src/arithmetic&lowbar;tests/arithmetic&lowbar;tests&lowbar;generator.py](src/arithmetic_tests/arithmetic_tests_generator.py): a python\nscript that generates a set of arithmetic tests.\n\n## Configuring the libecc library\n\n### Basic configuration\n\nlibecc can be statically configured at compilation time: the user can tune what curves, hash functions and signature\nalgorithms are embedded in 'libsign.a' and all the binaries using it.\n\nThe main entry point to configure/tune the library is [src/lib&lowbar;ecc&lowbar;config.h](src/lib_ecc_config.h). By default libecc\nembeds everything. In order to remove something, one has to **comment** the element to remove (i.e. comment the\n`WITH_XXX` macro). For instance, removing\nFRP256V1 is simply done by commenting the line:\n<pre>\n\t/* Supported curves */\n\t/* #define WITH_CURVE_FRP256V1 */ /* REMOVING FRP256V1 */\n\t#define WITH_CURVE_SECP192R1\n\t#define WITH_CURVE_SECP224R1\n\t#define WITH_CURVE_SECP256R1\n\t#define WITH_CURVE_SECP384R1\n\t#define WITH_CURVE_SECP521R1\n\t#define WITH_CURVE_BRAINPOOLP224R1\n\t#define WITH_CURVE_BRAINPOOLP256R1\n\t#define WITH_CURVE_BRAINPOOLP384R1\n\t#define WITH_CURVE_BRAINPOOLP512R1\n\t#define WITH_CURVE_GOST256\n\t#define WITH_CURVE_GOST512\n\t...\n</pre>\n\nAs another example, if one wants to build a custom project supporting only\nECFSDA using SHA3-256 on BrainpoolP256R1, this can be done by keeping only the\nfollowing elements in\n[src/lib&lowbar;ecc&lowbar;config.h](src/lib_ecc_config.h):\n\n<pre>\n\t#define WITH_SIG_ECFSDSA\n\t#define WITH_HASH_SHA3_256\n\t#define WITH_CURVE_BRAINPOOLP256R1\n</pre>\n\n### Advanced configuration\n\n#### Modifying the word size\n\nlibecc supports 16, 32 and 64 bits word sizes. Though this word size is usually inferred during compilation\nand adapted depending on the detected platform (to fit the best performance), the user can force it in three ways:\n\n* Overloading the `WORDSIZE` macro in [src/words/words.h](src/words/words.h).\n* Overloading the `WORDSIZE` macro in the Makefile `CFLAGS`.\n* Use specific Makefile targets.\n\nPlease refer to the [portability guide](#libecc-portability-guide) for details on this.\n\n#### Modifying the big numbers size\n\nlibecc infers the Natural Numbers maximum length from the **curves** parameters that have been statically\ndefined in [src/lib&lowbar;ecc&lowbar;config.h](src/lib_ecc_config.h). Though this behaviour is perfectly fine and transparent\nfor the user when dealing with the elliptic curves and signature layers, this can become a limitation when building\ncode around the NN and Fp arithmetic layers. The user will be stuck with a hard coded maximum size of numbers depending\non the curve that is used by libecc, which can be a nonsense if he is only interested in the big number basic\nalgorithmic side (when the default curves are used, this maximum size is 521 bits, corresponding to SECP521\nparameters).\n\nlibecc provides a way to **overload the NN maximum size**, with a strong limit depending on the word size (around\n5300 bits for 64-bit words, around 2650 bits for 32-bit words, and around 1300 bits for 16-bit words). See\nthe comments in [src/nn/nn&lowbar;config.h](src/nn/nn_config.h) for more details about this. In order to manually increase\nthe NN size, the user will have to define the macro `USER_NN_BIT_LEN`, either directly in\n[src/nn/nn&lowbar;config.h](src/nn/nn_config.h), or more appropriately through overloading the Makefile `CFLAGS`\nwith `-DUSER_NN_BIT_LEN=` (see [the dedicated section](#overloading-makefile-variables) for more on how to do this).\n\n**NOTE**: objects and binaries compiled with different word sizes and/or user defined NN maximum bit lengths **are not compatible**,\nand could produce executables with dangerous runtime behaviour. In order to prevent possible honest mistakes, there is\na safety net function catching such situations **at compilation time** in [src/nn/nn&lowbar;config.h](src/nn/nn_config.h): the\n`nn_check_libconsistency` routine will throw an error. For instance, if 'libarith.a' has been compiled with\n`WORDSIZE=64`, and one tries to compile the arithmetic tests with `WORDSIZE=32`, here is the error the compiler\nshould produce:\n\n<pre>\n...\narithmetic_tests.c:(.text+0x3af21)\u00a0: undefined reference to \u00ab\u00a0nn_consistency_check_maxbitlen521wordsize32\u00a0\u00bb\n...\n</pre>\n\n## Expanding the libecc library\n\nThough libecc has been designed to be compiled with a static embedding of all its features (i.e. no dynamic modules\nloading), its **static code extensibility** has been a matter of attention. The library can be:\n* Easily expanded by **adding new curves**, with **zero coding effort**. Note that **only curves over prime fields are\nsupported**.\n* Expanded with new hash functions and new signature algorithms with some coding effort, but clean and well defined\nAPIs should ease this task.\n\n### Adding user defined curves\n\nA companion python script [scripts/expand&lowbar;libecc.py](scripts/expand_libecc.py) will transparently add (and remove) new\nuser defined curves in the source tree of the project. The '.h' headers defining the new curves\nwill be created in a dedicated folder: [src/curves/user&lowbar;defined/](src/curves/user_defined/).\n\nThe python script should have a self explanatory and complete help:\n<pre>\n\t$ python scripts/expand_libecc.py -h\n\tThis script is intented to *statically* expand the ECC library with user defined curves.\n\t...\n</pre>\n\nIn order to add a curve, one can give explicit parameters (prime, order, ...) on the command line or\nprovide a [RFC3279](https://www.ietf.org/rfc/rfc3279.txt) formatted ASN.1 file (DER or PEM) with the\nparameters. Sanity checks are performed by the script. The script is also able to generate\n**test vectors** for the new curve with the `--add-test-vectors` toggle.\n\nLet's show how we can add the BRAINPOOLP320R1 supported by OpenSSL. We use the `ecparam` option of\nthe `openssl` command line:\n\n<pre>\n\t$ openssl ecparam -param_enc explicit -outform DER -name brainpoolP320r1 -out brainpoolP320r1.der\n</pre>\n\nThis creates a DER file 'brainpoolP320r1.der' embedding the parameters (beware of the `-param_enc explicit`\noption that is important here). Now, in order to add this new curve to libecc, we will execute:\n<pre>\n\t$ python scripts/expand_libecc.py --name=\"mynewcurve\" --ECfile=brainpoolP320r1.der --add-test-vectors=1\n\tTest vectors generation asked: this can take some time! Please wait ...\n\t1/56\n</pre>\n\nThis will create a new header file 'ec&lowbar;params&lowbar;user&lowbar;defined&lowbar;mynewcurve.h' in the [src/curves/user&lowbar;defined/](src/curves/user_defined/)\nfolder, and it will modify some libecc core files to transparently add this curve for the next compilation (modified files \nare [src/curves/curves&lowbar;list.h](src/curves/curves_list.h), [src/tests/ec&lowbar;self&lowbar;tests&lowbar;core.h](src/tests/ec_self_tests_core.h),\n[src/lib&lowbar;ecc&lowbar;config.h](src/lib_ecc_config.h) and [src/lib&lowbar;ecc&lowbar;types.h](src/lib_ecc_types.h)).\n\nThe test vectors generation can take some time since all the possible triplets (curve, hash function, signature algorithm) are\nprocessed with the new curve.\n\nAfter compiling the library, the new curve should show up in the self tests:\n<pre>\n\t$ ./build/ec_self_tests\n\t======= Known test vectors test =================\n\t...\n\t[+] ECDSA_SHA224_USER_DEFINED_MYNEWCURVE_0 selftests: known test vectors sig/verif ok\n\t...\n\t======= Random sig/verif test ===================\n\t...\n\t[+] ECDSA-SHA224/USER_DEFINED_MYNEWCURVE randtests: random import/export with sig/verif ok\n\t...\n\t======= Performance test ========================\n\t...\n\t[+] ECDSA-SHA224/USER_DEFINED_MYNEWCURVE perf: 269 sign/s and 141 verif/s\n\t...\n</pre>\n\nIt should also appear in the `ec_utils` help:\n<pre>\n\t$ ./build/ec_utils sign\n\tBad args number for ./build/ec_utils sign:\n\targ1 = curve name: FRP256V1 USER_DEFINED_MYNEWCURVE ...\n\targ2 = signature algorithm type: ECDSA ...\n\targ3 = hash algorithm type: SHA224 ...\n\targ4 = input file to sign\n\targ5 = input file containing the private key (in raw binary format)\n\targ6 = output file containing the signature\n        <arg7 (optional) = ancillary data to be used>\n</pre>\n\nIt is possible to remove a user defined curve by using the python script and its name:\n<pre>\n\t$ python scripts/expand_libecc.py --remove --name mynewcurve\n\tYou asked to remove everything related to user defined mynewcurve curve. Enter y to confirm, n to cancel [y/n]. y\n\tRemoving user defined curve mynewcurve ...\n</pre>\n\nIt is also possible to remove **all** the user defined curves at once:\n<pre>\n\t$ python scripts/expand_libecc.py --remove-all\n</pre>\n\nFinally, two companion shell scripts are provided along with the expanding python script in order to show its basic usage:\n\n* [scripts/gen&lowbar;curves&lowbar;tests.sh](scripts/gen_curves_tests.sh): this script generates the default libecc curves\nwith explicit parameters given on the command line. Of course, since these curves are already embedded in\nlibecc, there is no real use of generating them - the script is only here to serve as a showcase for expanding\nthe library with explicit parameters.\n* [scripts/gen&lowbar;openssl&lowbar;curves&lowbar;tests.sh](scripts/gen_openssl_curves_tests.sh): this script enumerates all OpenSSL\nnamed curves, generates a DER file with their parameters, and adds them to libecc.\n\n### Adding new hash and signature algorithms\n\nObviously, adding new algorithms (hash or signature) will require adding new code.\n\n#### Adding new hash functions\nWe detail hereafter the necessary steps to add a new hash function. The main file listing all the hash functions is [src/hash/hash&lowbar;algs.h](src/hash/hash_algs.h). The new hash\nalgorithm should be added here in compliance with the API described in the `hash_mapping struct`. This API includes:\n\n  * The digest and block sizes and a pretty print name for the algorithm.\n  * `hfunc_init`: the hash function initialization routine.\n  * `hfunc_update`: the hash function update routine.\n  * `hfunc_finalize`: the hash function finalization routine.\n  * `hfunc_scattered`: this function applies the hash function (i.e. compute the digest) on multiple messages\n  (it takes as input an array of pointers to message chunks, and an array of sizes).\n\nThese libecc API functions are in fact redirections to the core routines of the hash algorithm, and\nthe user is expected to add the specific implementation in '.c' and '.h' files inside the [src/hash/](src/hash/)\nfolder. See [src/hash/sha224.c](src/hash/sha224.c) and [src/hash/sha224.h](src/hash/sha224.h) for a practical\nexample of how to do this with SHA-224.\n\nFinally, the user is expected to update the libecc main configuration file [src/lib&lowbar;ecc&lowbar;config.h](src/lib_ecc_config.h)\nwith the `WITH_MY_NEW_HASH` toggle ('my&lowbar;new&lowbar;hash' being the new hash function).\n\n#### Adding new signature algorithms\nIn order to add a new elliptic curve based signature algorithm, here is the needed work:\n* The main file listing all the signature algorithms is [src/sig/sig&lowbar;algs&lowbar;internal.h](src/sig/sig_algs_internal.h).\nThe signature algorithm should be added in compliance with the API described in the `ec_sig_mapping struct`. This\nAPI includes:\n  * The signature type and a pretty print name.\n  * `siglen`: a function giving the length of the produced signature.\n  * `init_pub_key`: a routine producing a public key when given a corresponding private key.\n  * `sign_init`, `sign_update` and `sign_finalize`: the usual functions initializing a signature, updating it with\n   input buffers, and finalizing it to produce an output signature.\n  * `verify_init`, `verify_update` and `verify_finalize`: the usual functions initializing a signature verification, updating\n   it with input buffers, and finalizing it to produce a check status (i.e. signature OK or not OK).\n\nThese libecc APIs have to be plugged to the core signature functions, and the user is expected to handle this implementation\nwith adding the specific '.c' and '.h' files inside the [src/sig](src/sig) folder. See [src/sig/ecdsa.c](src/sig/ecdsa.c) and\n[src/sig/ecdsa.h](src/sig/ecdsa.h) for a practical example of how to do this with ECDSA.\n\nFinally, the user is expected to update the libecc main configuration file [src/lib&lowbar;ecc&lowbar;config.h](src/lib_ecc_config.h)\nwith the `WITH_MY_NEW_SIGN_ALG` toggle ('my&lowbar;new&lowbar;sign&lowbar;alg' being the new signature algorithm).\n\n## <a name=\"performance\"></a> Performance\n\nAs already stated, libecc has not been designed with performance in mind, but\nwith **simplicity** and **portability** as guiding principles; this implies\nseveral things when it comes to performance:\n\n* libecc does not intend to compete with libraries developed with platform specific accelerations, such as the use of **assembly**\nroutines or the adaptation to CPUs quirks at execution time (e.g. a CPU with very slow shift instructions). [OpenSSL](https://www.openssl.org/)\nis an example of such libraries with good and homogeneous performance in mind on most heterogeneous platforms (with the lack of\nportability on very small embedded platforms though).\n* Some algorithmic tricks on specific prime curves are not implemented: the same algorithms are used for all the curves.\nThis means for instance that curves using pseudo-Mersenne primes (such as NIST's SECP curves) won't be faster than\ncurves using generic random primes (such as Brainpool curves), though pseudo-Mersenne primes can benefit from a\ndedicated reduction algorithm, yielding **orders of magnitude faster field arithmetic** (around five to ten times faster). See\n[here](https://tls.mbed.org/kb/cryptography/elliptic-curve-performance-nist-vs-brainpool) for further discussions on this.\nConsequently, we will only focus on performance comparison with other libraries using the Brainpool curves.\n* We use a very straightforward elliptic curve arithmetic implementation, without using literature generic algorithmic optimizations\nsuch as [windowing](https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication#Windowed_method) or\n[fixed-base comb](https://link.springer.com/chapter/10.1007/3-540-45537-X_21) precomputations.\n\nNonetheless and despite all these elements, **libecc is on par with some other general purpose and portable cryptographic\nlibraries** such as [mbedTLS](https://tls.mbed.org) (see the performance figures given below).\n\nWe present hereafter the ECDSA performance comparison of libecc with mbedTLS and OpenSSL on various platforms representing\ndifferent CPU flavours. Here are some information about the tested version when not stated otherwise:\n\n* mbedTLS: stable version 2.4.2, the figures have been gathered with the builtin benchmark.\n* OpenSSL: debian packaged version 1.1.0e. Since OpenSSL builtin ECDSA benchmark does not handle Brainpool curves,\na basic C code using \"named curves\" have been compiled against the installed dynamic library.\n\n### Performance oriented platforms\n\n* **Core i7-5500U** (Broadwell family) is a typical x86 mid-range current laptop CPU.\n* **Xeon E3-1535M** (Skylake family) is a typical x86 high-end CPU.\n* **Power-7** is a typical server CPU of the previous generation (2010) with\na PowerPC architecture.\n\nFor all the platforms in this subsection, the CPUs have been tested in 64-bit mode.\n\n\n| **libecc**      | Core i7-5500U @ 2.40GHz     | Xeon E3-1535M v5 @ 2.90GHz    | Power-7                   |\n|-----------------|:----------------------------|:------------------------------|:--------------------------|\n| BP256R1         | 583 sign/s - 300 verif/s    | 700 sign/s - 355 verif/s      | 213 sign/s - 110 verif/s  |\n| BP384R1         | 231 sign/s - 118 verif/s    | 283 sign/s - 150 verif/s      | 98 sign/s  - 50 verif/s   |\n| BP512R1         | 111 sign/s - 56 verif/s     | 133 sign/s - 68 verif/s       | 51 sign/s  - 26 verif/s   |\n\n| **mbedTLS**     | Core i7-5500U @ 2.40GHz     | Xeon E3-1535M v5 @ 2.90GHz    | Power-7                   |\n|-----------------|:----------------------------|:------------------------------|:--------------------------|\n| BP256R1         | 426 sign/s - 106 verif/s    | 552 sign/s - 141 verif/s      | 178 sign/s - 45 verif/s   |\n| BP384R1         | 239 sign/s - 56 verif/s     | 322 sign/s - 77 verif/s       | 44 sign/s  - 23 verif/s   |\n| BP512R1         | 101 sign/s - 26 verif/s     | 155 sign/s - 34 verif/s       | 38 sign/s  - 12 verif/s   |\n\n| **OpenSSL**     | Core i7-5500U @ 2.40GHz     | Xeon E3-1535M v5 @ 2.90GHz    | Power-7                   |\n|-----------------|:----------------------------|:------------------------------|:--------------------------|\n| BP256R1         | 2463 sign/s - 1757 verif/s    | 2873 sign/s - 2551 verif/s  | 1879 sign/s - 1655 verif/s|\n| BP384R1         | 1091 sign/s - 966 verif/s     | 1481 sign/s - 1265 verif/s  | 792 sign/s  -  704 verif/s|\n| BP512R1         | 727 sign/s - 643 verif/s      | 1029 sign/s - 892 verif/s   | 574 sign/s  -  520 verif/s|\n\n### Embedded platforms with moderate constraints\n* **Marvel Armada A388** is a good representative of moderately constrained embedded devices, such as\nIAD (Internet Access Devices), NAS (Network Attached Storage), STB (Set Top Boxes) and smartphones.\nThis SoC is built around a Cortex-A9 ARMv7-A 32-bit architecture.\n* **BCM2837** is a Broadcom SoC built around the recent 64-bit ARMv8-A architecture, with a\nCortex-A53 core. This SoC can be found in the Raspberry Pi 3, and also represents what can\nbe found in recent Smartphones.\n* **Atom D2700** is a small x86 CPU typically embedded in NAS devices. Though its \"embedded\"\ncoloration, it uses a 64-bit mode that we have tested here.\n\n| **libecc**      | Marvell A388 @ 1.6GHz | BCM2837 (aarch64) @ 1.2GHz | Atom D2700 @ 2.13GHz   |\n|-----------------|:----------------------|----------------------------|:-----------------------|\n| BP256R1         | 64 sign/s - 33 verif/s| 43 sign/s - 22 verif/s     | 68 sign/s - 35 verif/s |\n| BP384R1         | 24 sign/s - 12 verif/s| 17 sign/s - 9 verif/s      | 25 sign/s - 13 verif/s |\n| BP512R1         | 11 sign/s - 5 verif/s | 8 sign/s - 4 verif/s       | 12 sign/s - 6 verif/s  |\n\n| **mbedTLS**     | Marvell A388 @ 1.6GHz | BCM2837 (aarch64) @ 1.2GHz | Atom D2700 @ 2.13GHz   -|\n|-----------------|:----------------------|----------------------------|:------------------------|\n| BP256R1         | 33 sign/s - 8 verif/s   | 14 sign/s - 4 verif/s      | 87 sign/s - 22 verif/s|\n| BP384R1         | 20 sign/s - 4 verif/s   | 8 sign/s - 2 verif/s       | 50 sign/s - 11 verif/s|\n| BP512R1         | 10 sign/s - 2 verif/s   | 4 sign/s - 1 verif/s       | 23 sign/s - 5 verif/s |\n\n| **OpenSSL**     | Marvell A388 @ 1.6GHz   | BCM2837 (aarch64) @ 1.2GHz |  Atom D2700 @ 2.13GHz   |\n|-----------------|:------------------------|----------------------------|:------------------------|\n| BP256R1         | 369 sign/s - 332 verif/s| 124 sign/s - 112 verif/s   | 372 sign/s - 334 verif/s|\n| BP384R1         | 102 sign/s - 94 verif/s | 54 sign/s - 49 verif/s     | 163 sign/s - 149 verif/s|\n| BP512R1         | 87 sign/s - 81 verif/s  | 31 sign/s - 29 verif/s     |  92 sign/s - 83 verif/s |\n\n\n### <a name=\"constrained-devices\"></a> Very constrained embedded devices\nThe library, when configured for a 256-bit curve (SECP256R1, FRP256), SHA-256 and ECDSA signature fits in around\n**30 Kilo Bytes of flash/EEPROM**, and uses around **8 Kilo Bytes of RAM** (stack) with variations depending on the\nchosen WORDSIZE (16, 32, 64), the compilation options (optimization for space `-Os` or speed `-O3`) and the\ntarget (depending on the instructions encoding, produced binary code can be more or less compact).\nA 521-bit curve with SHA-256 hash function and ECDSA signature should fit in 38 Kilo Bytes of flash and around\n16 Kilo Bytes of RAM (stack), with the same variations depending on the WORDSIZE and the compilation options.\n\n**Note**: libecc does not use any heap allocation, and the only global variables used are the **constant ones**. The\nconstant data should end up in the flash/EEPROM section with a read only access to them: no RAM memory should\nbe consumed by these. The libecc read/write data are only made of local variables on the stack. Hence, RAM\nconsumption (essentially made of arrays representing internal objects such as numbers, point on curves ...)\nshould be reasonably constant across platforms. **However**, some platforms using the\n**[Harvard architecture](https://en.wikipedia.org/wiki/Harvard_architecture)** (as opposed to Von Neumann's one)\ncan have big limitations when accessing so called \"program memory\" as data. The 8-bit\n[Atmel AVR](http://www.atmel.com/products/microcontrollers/avr/) MCU\nis such an example. Compilers and toolchains for such architectures usually copy read only data in RAM at run time,\nand/or provide [non-standard ways](http://www.atmel.com/webdoc/avrlibcreferencemanual/pgmspace_1pgmspace_strings.html)\nto access read only data in flash/EEPROM program memory (through specific macros, pragmas, functions). The\nfirst case means that the RAM consumption will increase for libecc compared to the stack only usage (because of\nthe runtime copy). The second case means that libecc code will have to be **adapted** to the platform if the user\nwant to keep RAM usage at its lowest. In any case, tracking where `const` qualified data reside will be important\nwhen the amount of RAM is a critical matter.\n\nA full software stack containing a known test vector scenario has been compiled and tested on a **Cortex-M0**\n([STM32F030R8T6](http://www.st.com/en/microcontrollers/stm32f030r8.html) @ 48MHz with 64KB of flash and 8KB of RAM).\nIt has also been compiled and tested on a **Cortex-M3** ([STM32F103C8T6](http://www.st.com/en/microcontrollers/stm32f103c8.html)\n@ 72MHz with 64KB of flash and 20KB of RAM). The results of the flash/RAM occupancy are given in the table below,\nas well as the timings of the ECDSA signature and verification operations.\n\n**Note**: The Cortex-M0 case is a bit special in the ARM family. Since this MCU lacks a 32-bit x 32-bit to 64-bit\nmultiplication instruction, the multiplication is implemented using a builtin software function. This yields\nin poor performance with WORDSIZE=64 compared to WORDSIZE=32 (this might be explained by the calling cost to\nthe builtin function).\n\n\n| **libecc**      | STM32F103C8T6 (Cortex-M3 @ 72MHz) | STM32F030R8T6 (Cortex-M0 @ 48MHz) |\n|-----------------|:----------------------------------|:----------------------------------|\n| Flash size      |           32KB                    |       30KB                        |\n| RAM size        |           8KB                     |       8KB                         |\n| Sign time       |         950ms                     |    2146ms                         |\n| Verif time      |        1850ms                     |    4182ms                         |\n\nIn order to compare the libecc performance on these embedded platforms, we give figures for mbedTLS on\nCortex-M3 taken from a [recent study by ARM](http://csrc.nist.gov/groups/ST/lwc-workshop2015/presentations/session7-vincent.pdf).\nAs we have previously discussed, only the figures without NIST curves specific optimizations are of interest\nfor a fair comparison:\n\n| **mbedTLS**     | LPC1768 (Cortex-M3 @ 92MHz)<sup>1</sup>  |\n|-----------------|:------------------------------|\n| Flash size      |         ??                    |\n| RAM size        |         3KB<sup>2</sup>|\n| Sign time       |    1893ms                     |\n| Verif time      |    3788ms                     |\n\n<sup>1</sup> Beware of the MCU frequency difference when comparing with libecc test case.\n\n<sup>2</sup> This figure only includes heap usage (stack usage is unknown so this is only a\nrough lower limit for RAM usage).\n\n\n## <a name=\"compatibility-and-portability\"></a> Compatibility and Portability\n\n### libecc compatibility\n\nWhen dealing with the **portability** of a program across various platforms, many issues are\nin fact hidden behind this property. This is due to the very complex nature of what a\n**platform** is, namely:\n\n* A **core CPU** architecture (x86, ARM, MIPS, PowerPC, ...).\n* A target **OS** (Linux, Windows, Mac OS, ...) or more low level firmware (including a **bare-metal**\nprogramming model or exotic real-time OS for microcontrollers for instance).\n* A proper compilation **(cross-)toolchain** producing binaries for the platform. This toolchain will usually\ninclude a compiler and a linker, both with possibly specific flags and limitations.\n\nRegarding libecc, here are the main elements to be aware of when dealing with a \"new\" platform:\n\n* libecc is in pure C-99 (no assembly), so it should compile on **any platform** with a decent C-99\ncompatible compiler. The code is **endian neutral**, meaning that libecc should work on little endian\nand big endian platforms.\n* The Makefile has been tested with clang and gcc under Linux, as well as gcc cross-compilation variants\nsuch as **mingw** for Windows or gcc **Mac OS** version. In order to adapt the makefile behaviour when the\ncompiler is not gcc/clang compatible, the user can modify the CFLAGS as well as the LDFLAGS by exporting them.\n* The library supports 16-bit/32-bit/64-bit word sizes, which should ensure compatibility with most of the platforms\nfor 8-bit MCUs to 64-bit CPUs. If the toolchain does not have a [`stdint.h`](http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdint.h.html)\nheader, it is still possible to compile libecc by exporting LIBECC_NOSTDLIB=1: in this case, the code will try to\nguess and fit to native C types or throw an error so that the user can adapt [src/words/types.h](src/words/types.h) to its specific case.\n* The library core is platform independent. However, when the platform is not recognized (i.e. everything aside UNIX/Windows/Mac OS),\nan error is thrown at compilation time asking the user to provide implementations for **external dependencies**\nin [src/external&lowbar;deps/](src/external_deps), namely:\n  * The printing helper in [src/external&lowbar;deps/print.c](src/external_deps/print.c). This helper serves output debugging purposes.\n  * The timing helper in [src/external&lowbar;deps/time.c](src/external_deps/time.c). This helper is used to measure performances of the\n  library in the performance self tests.\n  * The random helper in [src/external&lowbar;deps/rand.c](src/external_deps/rand.c). This helper is used in the core library for the signature\n  schemes. One should notice that a **good random source** is **crucial** for the security of Elliptic Curve based signature schemes,\n  so great care must be taken when implementing this.\n\nSome other external dependencies could arise depending on the compilation chain and/or the platform. Such an example is the\nimplementation of the gcc and clang stack protection option, usually expecting the user to provide stack canaries generation\n(with random values) and failover behavior.\n\n\n### <a name=\"compiling-libecc-for-arm-cortex-m-with-GNU-gcc-arm\"></a> Compiling libecc for ARM Cortex-M with GNU gcc-arm\n\nCompiling for Cortex-M targets should be straightforward using the arm-gcc none-eabi (for bare metal) cross-compiler as\nwell as the specific Cortex-M target platform SDK. In order to compile the core libsign.a static library, the only thing to do is to execute\nthe makefile command by overloading `CROSS_COMPILE`, `CC` and the `CFLAGS`:\n<pre>\n\t$ CROSS_COMPILE=arm-none-eabi- CC=gcc CFLAGS=\"$(TARGET_OPTS) -W -Wextra -Wall -Wunreachable-code \\\n\t-pedantic -fno-builtin -std=c99 -Os \\\n\t-ffreestanding -fno-builtin -nostdlib -DWORDSIZE=64\" \\\n\tmake build/libsign.a\n</pre>\n\nwhere `$(TARGET_OPTS)` are the flags specific to the considered target: `-mcpu=cortex-m3 -mthumb` for Cortex-M3 for example. The word size\nflag should be adapted to `-DWORDSIZE=32` for the specific case of Cortex-M0/M0+ as discussed in the [performance section](#performance)\n(because of the lacking of 32-bit to 64-bit native multiplication instruction). The library can then be used to be linked against a file\ncontaining the `main` calling function, and the linking part will depend on the\ntarget platform (in addition to the target CPU): one will use the **linker scripts** provided by the platform/board manufacturer to produce\na firmware suitable for the target (ST for STM32, NXP for LPC, Atmel for SAM, ...).\n\nIf the external dependencies have been implemented by the user, it is also possible to build a self-tests binary by adding the\nGNU ld linker script specific to the target platform (`linker_script.ld` in the example below):\n<pre>\n\t$ CROSS_COMPILE=arm-none-eabi- CFLAGS=\"$(TARGET_OPTS) -W -Wextra -Wall -Wunreachable-code \\\n\t-pedantic -fno-builtin -std=c99 -Os \\\n\t-ffreestanding -fno-builtin -nostdlib -DWORDSIZE=64\" \\\n\tLDFLAGS=\"-T linker_script.ld\" \\\n\tmake build/libsign.a\n</pre>\n\n**NOTE1**: By default, the linker scripts share the RAM between heap and stack. Since libecc only uses stack, it is convenient\n(sometimes necessary, specifically on devices with very constrained RAM, such as Cortex-M0 with 8KB) to adapt the **stack base address**\nso that no stack overflow errors occur. These errors can be tricky to detect since they generally produce hard faults silently at\nrun time.\n\n**NOTE2**: It is up to the user to link against the libc (if standard functions are necessary) or not, but this will obviously influence the\nprogram size in flash. As already stated, the libc footprint is not included in the figured that have been given in\nthe [performance section](#performance).\n\n**NOTE3**: libecc has also been successfully tested with other non-GNU compilation SDK and toolchains such as [Keil MDK](http://www.keil.com/)\nconfigured to use the [ARM compiler](http://www2.keil.com/mdk5/compiler/5/).\n\n### <a name=\"libecc-portability-guide\"></a> libecc portability guide\n\nThis section is dedicated to giving some more details on how to compile libecc when non-GNU compilers\nare used (i.e. C compilers that do not support gcc syntax), and/or when compiling with environments that\ndo not provide a **GNU make** compilation style (this is generally the case for all-in-one IDEs such as\nVisual Studio or other BSP and SDK provided by proprietary integrated circuits founders and board manufacturers).\n\n#### 1 - Compilers and C99 standard compliance\n\nAs we have already stated, libecc requires a C99 compiler. More specifically, libecc makes use of\nonly four feature of the C99 standard (over the older C89/C90 standard), namely:\n* The `long long int` type.\n* Designated initializers for structures.\n* The usage of the `inline` keyword.\n* The usage of variadic macros.\n\nHence, when compiling with a given compiler, one will have to check that the compiler is\n**either fully C99 compliant**, or that these four features are at least **implemented as extensions**.\nSuch details are generally provided by the compiler documentation.\n\n**NOTE**: if one wants to adapt libecc for compilers where some of the necessary C99 features are missing, here is a\nbig picture of the necessary work:\n* The `long long int` and structures initializers are used all over libecc code, so they are\n**strong requirements**, and would imply deep code modifications.\n* The `inline` keyword can be removed in most cases, except in the context of header files where it is used\nto define `static inline` functions. These functions will have to be moved to '.c' files, and one will have to\ndeal with minor adaptations.\n* The usage of variadic macros is marginal and can be removed with minimal efforts: these are only used\nto deal with debug helpers in [src/utils](src/utils).\n\n#### 2 - Compiling with environments without GNU make\n\nlibecc uses a GNU style [Makefile](Makefile) to automate the compilation process. One can however use other\ncompilation environments that are not GNU make compatible by implementing the following guidelines:\n* Make the compilation toolchain compile into **'.o' objects** all the necessary '.c' files in [src/nn](src/nn),\n[src/fp](src/fp), [src/curve](src/curve), [src/sig](src/sig), [src/utils](src/utils) and [src/hash](src/hash).\n* Make the compilation toolchain **link** the necessary object files to generate the static libraries:\n<pre>\n  libarith.a:\n  \u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\n  src/fp/fp_rand.o src/fp/fp_mul.o src/fp/fp_montgomery.o src/fp/fp_mul_redc1.o src/fp/fp_add.o src/fp/fp.o\n  src/fp/fp_pow.o src/nn/nn_mul.o src/nn/nn_mul_redc1.o src/nn/nn_logical.o src/nn/nn.o src/nn/nn_modinv.o\n  src/nn/nn_add.o src/nn/nn_rand.o src/nn/nn_div.o src/utils/print_nn.o src/utils/print_fp.o src/utils/print_keys.o\n  src/utils/print_curves.o src/utils/utils.o\n</pre>\n<pre>\n  libec.a:\n  \u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\n  src/fp/fp_rand.o src/fp/fp_mul.o src/fp/fp_montgomery.o src/fp/fp_mul_redc1.o src/fp/fp_add.o src/fp/fp.o src/fp/fp_pow.o\n  src/nn/nn_mul.o src/nn/nn_mul_redc1.o src/nn/nn_logical.o src/nn/nn.o src/nn/nn_modinv.o src/nn/nn_add.o src/nn/nn_rand.o\n  src/nn/nn_div.o src/utils/print_nn.o src/utils/print_fp.o src/utils/print_keys.o src/utils/print_curves.o src/utils/utils.o\n  src/curves/prj_pt.o src/curves/curves.o src/curves/aff_pt.o src/curves/prj_pt_monty.o src/curves/ec_shortw.o src/curves/ec_params.o\n</pre>\n<pre>\n  libsign.a:\n  \u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\n  src/fp/fp_rand.o src/fp/fp_mul.o src/fp/fp_montgomery.o src/fp/fp_mul_redc1.o src/fp/fp_add.o src/fp/fp.o src/fp/fp_pow.o\n  src/nn/nn_mul.o src/nn/nn_mul_redc1.o src/nn/nn_logical.o src/nn/nn.o src/nn/nn_modinv.o src/nn/nn_add.o src/nn/nn_rand.o\n  src/nn/nn_div.o src/utils/print_nn.o src/utils/print_fp.o src/utils/print_keys.o src/utils/print_curves.o src/utils/utils.o\n  src/curves/prj_pt.o src/curves/curves.o src/curves/aff_pt.o src/curves/prj_pt_monty.o src/curves/ec_shortw.o src/curves/ec_params.o\n  src/hash/sha384.o src/hash/sha3-512.o src/hash/sha512.o src/hash/sha3-256.o src/hash/sha3-224.o src/hash/sha3.o src/hash/sha256.o\n  src/hash/sha3-384.o src/hash/sha224.o src/hash/hash_algs.o src/sig/ecsdsa.o src/sig/ecdsa.o src/sig/ecrdsa.o src/sig/ecosdsa.o\n  src/sig/ecfsdsa.o src/sig/eckcdsa.o src/sig/ecgdsa.o src/sig/ecsdsa_common.o src/sig/sig_algs.o src/sig/ec_key.o\n</pre>\n\nCompiling binaries (such as `ec_self_tests` and `ec_utils`) is nothing more than compiling concerned '.c' files under [src/tests](src/tests)\nand linking them with `libsign.a`.\n\n#### 3 - Dealing with the standard library and stdint\n\nSome important **preprocessor flags** are expected to be defined when compiling libecc:\n* `WORDSIZE=`: this is a preprocessor flag defining libecc internal words size (16, 32, or 64). By default libecc will\ndetect the best size depending on the platform, but if the platform is not recognized the user is expected to\nprovide this flag.\n* `WITH_STDLIB`: this flag is used for standard library usage inside libecc. Exporting the environment variable\n`LIBECC_NOSTDLIB=1` will trigger the **non usage** of standard includes and libraries. Standard C library headers and files\nare used for two things in the project:\n  * Defining standard types through the `stdint.h` header.\nThough using this header helps libecc to properly define basic types in [src/words/types.h](src/words/types.h), it is not\nrequired to use it and some heuristics can be used to define these types without standard headers (see explanations on that\nin [src/words/types.h](src/words/types.h)) comments.\n  * Defining standard library functions used by external dependencies as well as `ec_utils`. Compiling without `WITH_STDLIB`\nflag means that one has to provide these.\n\nIn any case, if the user forgot to provide important preprocessing flags whenever they are necessary, **errors will be thrown** during\nthe compilation process. As explained in [src/words/types.h](src/words/types.h), when `stdint.h` is not used (i.e. `WITH_STDLIB`\nnot defined), heuristics are used to guess primitive types sizes. These heuristics can fail and the user will have to adapt the types\ndefinitions accordingly depending on the platform.\n\n#### <a name=\"overloading-makefile-variables\"></a> 4 - Overloading Makefile variables\n\nWhen compiling using compilers that are not compatible with the gcc syntax, but still using a GNU make\ncompilation environment, it is possible to **adpat the Makefile behavior**. In addition to the `LIBECC_NOSTDLIB=1`\nenvironment variable previously described, here is the list of the variables that tune the compilation process:\n\n* `CC`: as usual, this overloads the compiler to be used.\n* `CFLAGS` and `LDFLAGS`: these flags can be overloaded by user defined ones. The user defined flags will completely\nshadow the default flags for both the static libraries (libarith.a, libec.a, libsign.a) and the produced binaries.\n* `LIB_CFLAGS`, `BIN_CFLAGS`, `BIN_LDFLAGS`: when one wants to specifically tune compilation and linking flags for\nthe static libraries and the binaries, these flags can be used and they will shadow the `CFLAGS` and `LDFLAGS`.\n* `AR` and `RANLIB`: these flags override the ar and ranlib tools used to generate the static library archives.\n\nAs a simple example of when and how to use this environment variables overloading system, let's take the following case:\none wants to compile libecc with an old version of gcc that does not support the `-fstack-protector-strong` option\n(this is the case for [gcc < 4.9](https://lwn.net/Articles/584225/)). Since this is the flag used by default in\nlibecc Makefile, an error will be triggered. It is possible to overcome this issue by overloading the `CFLAGS` with\nthe following:\n<pre>\n\t$ CFLAGS=\"-W -Werror -Wextra -Wall -Wunreachable-code -pedantic -fno-builtin -std=c99 -D_FORTIFY_SOURCE=2 \\\n\t-fstack-protector-all -O3 -DWITH_STDLIB -fPIC\" make\n</pre>\n\nAs we can see, we keep the other `CFLAGS` from default compilation while replacing `-fstack-protector-strong` with\nthe **less efficient but more compatible** `-fstack-protector-all`.\n\nIn addition to compilation flags, it is also possible to overload the library **word sizes** as well as **debug**\nmodes through Makefile targets:\n* `make debug` will compile a debug version of the library and binaries, with debugging symbols.\nSetting the environment variable `VERBOSE_INNER_VALUES=1` will print out more values.\n* `make 16`, `make 32` and `make 64` will respectively compile the library with 16, 32 and 64 bits word sizes. `make debug16`,\n`make debug32` and `make debug64` will compile the debug versions of these.\n* `make force_arch32` and `make force_arch64` will force 32-bit and 64-bit architectures compilation (`-m32` and `-m64`\nflags under gcc). These targets allow cross-compilation for a 32-bit (respectively 64-bit) target under a 64-bit (respectively\n32-bit) host: a typical example is compiling for i386 under x86\\_64.\n\n**NOTE**: the targets that we have described here can be used in conjunction with overloading the `CFLAGS` and `LDFLAGS`. Hence,\na: `CFLAGS=\"-fstack-protector-all\" make debug16`\nwill indeed compile all the binaries for debug, with a word size of 16 bits and a `-fstack-protector-all` stack protection option.\n\n\n#### 5 -\u00a0A concrete example with SDCC \n\nAs an example to show how to adapt the compilation process to compilers that are not compatible with the\nGNU compilers syntax, we will detail how to proceed by exploring the [SDCC](http://sdcc.sourceforge.net/)\n(Small Device C Compiler) toolchain. Porting libecc to this compiler is interesting for many reasons:\n\n* The SDCC compiler uses some specific syntax, though it shares some similarities with\nother compilers (`-c` flag to generate object files, `-o` flag to define output file).\n* This compiler is \"almost\" C99 compliant: depending on the target, it has some C99 features\n[partially implemented](http://sdcc.sourceforge.net/mediawiki/index.php/Standard_compliance).\n* The compiler has \"exotic\" targets such as the Zilog Z80 MCU.\n\nWe suppose that the user has also provided the **external dependencies** for print, random and time\nfunctions (otherwise explicit errors will be thrown by #error directives).\n\nWe will show how overloading the Makefile flags can be of use in this case. Say that we want\nto compile libecc in order to embed it in a Game Boy ROM. The Game Boy console uses a proprietary\nversion of the Z80 MCU supported by SDCC under the target name `gbz80`.\n\nHence, a first attempt at compilation would be to:\n* Overload `CC=sdcc` to change the default compiler.\n* Overload `AR=sdar` and `RANLIB=sdranlib` to overload the archives handling binaries (they are specific\nto SDCC).\n* Overload `CFLAGS=\"-mbgz80 --std-sdcc99\"` to specify the target, and ask for the C99 compatibility mode.\n* Overload `LDFLAGS=\" \"` with nothing since we do not want default gcc linking flags to break compilation.\n\nThis first attempt will trigger an error:\n<pre>\n\t$ CC=sdcc AR=sdar RANLIB=sdranlib CFLAGS=\"-mgbz80 --std-sdcc99\" LDFLAGS=\" \" make\n\t...\n\tsrc/external_deps/../words/words.h:62:2: error: #error \"Unrecognized platform. \\\n\tPlease specify the word size of your target (with make 16, make 32, make 64)\"\n</pre>\n\nAs we have explained, when the platform is not recognized one has to specify the word size. We will\ndo it by overloading `WORDSIZE=16`: the Z80 is an 8-bit CPU, so it seems reasonable to fit the word\nsize to 16-bit (8-bit half words). The second attempt will go further but will fail at some point when\ntrying to compile the final binaries:\n<pre>\n\t$ CC=sdcc AR=sdar RANLIB=sdranlib CFLAGS=\"-mgbz80 --std-sdcc99 -DWORDSIZE=16\" LDFLAGS=\" \" make\n\t...\n\tat 1: error 119: don't know what to do with file 'src/tests/ec_self_tests_core.o'. file extension unsupported\n</pre>\n\nHowever, one can notice that the static libraries and some object files have been compiled, which is a\nfirst step! Compiling a full binary is a bit technical due to the fact that SDCC does not know how\nto deal with '.o' object files and '.a' archives. However, we can find our way out of this by renaming\nthe 'libsign.a' to 'libsign.lib', and adding missing objects in the library. Compiling the `ec_self_tests`\nbinary needs external dependencies ([src/external&lowbar;deps/print.c](src/external&lowbar;deps/print.c),\n[src/external&lowbar;deps/rand.c](src/external_deps/rand.c) and [src/external&lowbar;deps/time.c](src/external_deps/time.c))\nas well as the two '.c' files [src/tests/ec&lowbar;self&lowbar;tests&lowbar;core.c](src/tests/ec_self_tests_core.c) and\n[src/tests/ec&lowbar;self&lowbar;tests.c](src/tests/ec_self_tests.c), the latter being the one containing the `main`\nfunction. So we will first add the necessary objects files in the existing library with `sdar`:\n<pre>\n\t$ cp build/libsign.a build/libsign.lib\n\t$ sdar q build/libsign.lib src/external_deps/print.o src/external_deps/rand.o src/external_deps/time.o src/tests/ec_self_tests_core.o\n</pre>\n\nThen, we compile and link [src/tests/ec&lowbar;self&lowbar;tests.c](src/tests/ec_self_tests.c) with the library:\n<pre>\n\t$ sdcc -mgbz80 -DWORDSIZE=16 --std-sdcc99 src/tests/ec_self_tests.c build/libsign.lib\n</pre>\n\nThis should create a `ec_self_tests.ihx`, which has an [Intel HEX](https://fr.wikipedia.org/wiki/HEX_(Intel))\nfile format for firmware programming. From this file, it is usually straightforward to create a Game Boy ROM file\nthat can be interpreted by an [emulator](http://m.peponas.free.fr/gngb/) (there are however some quirks related\nto the Game Boy platform hardware architecture, see the note below).\n\n**NOTE**: the purpose of the section was to show how to adapt the compilation process to compilers non\ncompatible with the GNU C one. Consequently, fully porting libecc to the Game Boy platform is left as\na complementary work, and this is not a \"so easy\" task. Among other things, one will have to deal with\nthe ROM size limitation of 32KB that can be solved using [bank switching](http://gbdev.gg8.se/wiki/articles/Memory_Bank_Controllers),\nwhich will involve some code and compilation tuning. Another issue would be the RAM size of 8KB and\nproperly handling the stack pointer base as described in the [previous sections](#compiling-libecc-for-arm-cortex-m-with-GNU-gcc-arm).\n\n## libecc, side channel attacks and constant time\n\n### Constant time\n\nThough **some efforts** have been made to have (most of) the core algorithms\nconstant time, turning libecc into a library shielded against side channel attacks\nis still a **work in progress**.\n\nBeyond pure algorithmic considerations, many aspects of a program can turn\nsecret leakage resistance into a very complex problem, especially when writing\nportable C code. Among other things, we can list the following:\n\n* Low level issues can arise when dealing with heterogeneous platforms (some\ninstructions might not be constant time) and compilers optimizations\n(a C code that seems constant time is in fact compiled to a non constant time assembly).\n* Any shared hardware resource can become a leakage source (the caches, the\nbranch prediction unit, ...). When dealing with a portable source code\nmeant to run on most platforms, it is not an easy task to think of all these\nleakage sources.\n\nFor a thorough discussion about cryptography and constant time challenges,\none can check [this page](https://bearssl.org/constanttime.html).\n\n### Signature algorithm blinding\n\nIn order to avoid a range of attacks on the signature algorithm exploiting various\nside channel attacks and leading to the recovery of the secret key\n(see [here](https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/2018/rohnp-return-of-the-hidden-number-problem.pdf)\nfor more details), **blinding** operations can be used.\n\nSince such security countermeasures have a **significant performance hit** on the signature algorithm, we have\ndecided to leave the activation of such countermeasures as a **voluntary decision** to the end user.\nThe performance impact might be acceptable or not depending on the context where the signature is performed, and whether attackers exploiting side channels\nare indeed considered in the threat model of the specific use case.\nOf course, for **security critical use cases we recommend the blinding usage\ndespite its performance cost**.\n\nCompiling the library with blinding is as simple as using the ``BLINDIG=1`` environment variable (or the ``-DUSE_SIG_BLINDING`` C flag):\n\n<pre>\n\t$ BLINDING=1 make\n</pre>\n\n**NOTE**: if you are **unsure** about your current security context, use the ``BLINDING=1`` by default!\n\n\n###\u00a0Overview of SCA (Side Channel Attacks) countermeasures\n\nAll in all, libecc has now the following approaches to limit SCA:\n\n* SPA (Simple Power Analysis) is thwarted using Montgomery Ladder (or Double and Add Always optionally using the ``ADALWAYS=1`` switch), plus complete formulas\n(see [here](https://joostrenes.nl/publications/complete.pdf)) to avoid leaking point at infinity (by avoiding exceptions). Constant time\noperations are (tentatively) used to limit leakage of different operations,\neven though this task is very complex to achieve (especially in pure C). See\nthe discussion above.\n* DDPA (Data DPA) is thwarted using blinding of the point (projective\ncoordinates) and of the scalar (with adding a random multiple of the\ncurve order with maximum entropy). Because of its major impact on\nperformance, blinding must be specifically turned on by the used using the\n``BLINDING=1`` switch, see the discussion above.\n* ADPA (Address-bit DPA) is limited using Itoh et al. Double and Add Always\nmasked variant. See the article \"A Practical Countermeasure against\nAddress-Bit Differential Power Analysis\" by Itoh, Izu and Takenaka for more information.\n\nAll these countermeasures must, of course, be validated on the specific target\nwhere the library runs with leakage assessments. Because of the very nature of\nC code and CPU microarchitectural details, it is very complex without such a leakage\nassessment (that again depends on the target) to be sure that SCA protection\nis indeed efficient.\n\n###\u00a0libecc against FIA (Fault Injection Attacks)\n\nEfforts made to render libecc robust against FIA are a **work in progress**, and\nwill require **substantial additions**. As for SCA robustness, many elements\nmight depend on the low-level compilation process and are difficult to handle\nat high-level in pure C.\n\nFor now, we check if points are on the curve when entering and leaving the\nscalar multiplication algorithm, as well as when importing external public points.\nEfforts are also made to sanity check the signature and verification contexts whenever possible,\nas well as all the intermediate contexts (natural numbers, fields, hash functions, etc.).\n\nCurrently, no specific effort has been made to render conditional operations robust\n(e.g. using double if and limiting compilation optimization).\n\n\n## Software architecture\nThe source code is composed of eight main parts that consist of the\n**core source code**:\n\n  * [1] Machine code: in [src/words](src/words/)\n\n    >Abstraction layer to handle word size depending\n    >on the target machine (the word size can also be forced during\n    >compilation). Some useful low level macros and functions are\n    >handled there.\n\n  * [2] Natural Numbers layer: in [src/nn](src/nn/)\n\n    >This part implements all the functions\n    >related to positive integers arithmetic (including modular\n    >arithmetic).\n\n  * [3] Fp layer: in [src/fp](src/fp/)\n\n    >Finite field of prime order (binary fields are\n    >intentionally not supported).\n\n  * [4] Elliptic curves core: in [src/curves](src/curves/)\n\n    >This layer implements all the primitives\n    >handling elliptic curves over prime fields, including point\n    >addition and doubling, affine and projective coordinates, ...\n\n  * [5] Curves definitions: in [src/curves/known](src/curves/known) and\n    [src/curves/user&lowbar;defined](src/curves/user_defined)\n\n    >These are the definitions of some standard curves (SECP, Brainpool,\n    >FRP, ...).\n\n  * [6] EC\\*DSA signature algorithms: in [src/sig](src/sig/)\n\n    >This layer implements the main\n    >elliptic curves based signature algorithms (ECSDSA, ECKCDSA,\n    >ECFSDSA, ECGDSA, ECRDSA, ECOSDSA). It exposes a sign and\n    >verify API with the standard Init/Update/Final logic.\n\n  * [7] Hash functions: in [src/hash](src/hash/)\n\n   >Hash functions (SHA-2 and SHA-3 based algorithms\n   >for now).\n\n  * [8] Utils: in [src/utils](src/utils/)\n\n   >Various useful libc functions (memcpy, memset, ...) as well as\n   >well as pretty printing functions for our NN, Fp and curves layers.\n\nIn addition to the core source code of the library, various resources\nare also present in the source tree. We describe them hereafter.\n\nSome self tests are provided for the signature algorithms over all the curves\nand using all the hash functions [9], as well as tests targeting arithmetic\noperations over NN and Fp more specifically [10]:\n\n  * [9] Sig self tests: in [src/tests](src/tests/)\n\n    >Functions to test that the compiled library is\n    >properly working with regard to the signature algorithms over\n    >the curves statically defined in the library.\n    >These tests consiste in known test vectors, random test\n    >vectors (i.e. random data sign/verify) as well as performance measurements.\n\n  * [10] Arithmetic self tests: in [src/arithmetic](src/arithmetic_tests/)\n\n    >Functions to test that the compiled arithmetic library is\n    >properly working in its basic operations (addition, subtraction,\n    >multiplication, ...).\n\nSome examples to help the user interact with the NN, Fp and cruves layers\nare also provided:\n\n  * [11] User examples: in [src/examples](src/examples/)\n\n    >User examples for each of the NN, Fp and curves layers. These\n    >examples show what are headers to use, and how to interact with\n    >the abstract mathematical objects of each layer.\n\nThe configuration of the library [13] as well as an external dependencies\nabstraction layer are also provided:\n\n  * [12] External dependencies: in [src/external&lowbar;deps](src/external_deps/)\n\n    >These files contain the functions that\n    >are considered as external dependencies, meaning that their\n    >implementation is platform dependent (this concerns debug\n    >output on a console or file, random generation, time measurement).\n    >If no C standard library is provided, the user must implement\n    >those functions.\n\n  * [13] Configuration files: in [src/lib&lowbar;ecc&lowbar;config.h](src/lib_ecc_config.h)\n\n    >These are top C headers that are used for\n    >libecc configuration, i.e. activate given hash/curve/signature\n    >algorithms at compilation time through ifdefs.\n\nFinally, various useful scripts are provided:\n\n  * [14] Scripts: in [scripts](scripts/)\n\n   >Tools to expand the libecc with new user defined curves.\n\nHere is a big picture of the library architecture summarizing the links\nbetween the modules previously described:\n\n<pre>\n    +-------------------------+\n    |EC*DSA signature         |\n    |algorithms               | <------------------+\n    |(ISO 14888-3)      [6]   |                    |\n    +-----------+-------------+                    |\n                ^                                  |\n                |                                  |\n    +-----------+-------------+         +----------+------------+\n    |Curves (SECP, Brainpool, |         |         Hash          |\n    |FRP, ...)                |         |       functions       |\n    |                   [5]   |         |                   [7] |\n    +-----------+-------------+         +-----------------------+\n                ^                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n                |                    @ {Useful auxiliary modules}@\n    +-----------+-------------+      @ +------------------------+@\n    |  Elliptic curves  [4]   |      @ |         Utils      [8] |@\n    |  core (scalar mul, ...) |      @ +------------------------+@\n    +-----------+-------------+      @ |     Sig Self tests [9] |@\n                ^                    @ |  Arith Self tests [10] |@\n                |                    @ |     User Examples [11] |@\n                |                    @ +------------------------+@\n                |                    @ |    External deps  [12] |@\n    +-----------+-------------+      @ +------------------------+@\n    | Fp finite fields  [3]   |      @ | LibECC conf files [13] |@\n    | arithmetic              |      @ +------------------------+@\n    +-----------+-------------+      @ |        Scripts    [14] |@\n                ^                    @ +------------------------+@\n                |                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    +-----------+-------------+        +------------------------+\n    | NN natural        [2]   | <------+   Machine related      |\n    | numbers arithmetic      |        |   (words, ...)     [1] |\n    +-------------------------+        +------------------------+\n\n\n\n</pre>\n\n"
 },
 {
  "repo": "ruby/openssl",
  "language": "C",
  "readme_contents": "# OpenSSL for Ruby\n\n[![Actions Status](https://github.com/ruby/openssl/workflows/CI/badge.svg)](https://github.com/ruby/openssl/actions?workflow=CI)\n\n\nOpenSSL provides SSL, TLS and general purpose cryptography. It wraps the\nOpenSSL library.\n\n## Installation\n\nThe openssl gem is available at [rubygems.org](https://rubygems.org/gems/openssl).\nYou can install with:\n\n```\ngem install openssl\n```\n\nYou may need to specify the path where OpenSSL is installed.\n\n```\ngem install openssl -- --with-openssl-dir=/opt/openssl\n```\n\nAlternatively, you can install the gem with `bundler`:\n\n```ruby\n# Gemfile\ngem 'openssl'\n# or specify git master\ngem 'openssl', git: 'https://github.com/ruby/openssl'\n```\n\nAfter doing `bundle install`, you should have the gem installed in your bundle.\n\n## Usage\n\nOnce installed, you can require \"openssl\" in your application.\n\n```ruby\nrequire \"openssl\"\n```\n\n**NOTE**: If you are using Ruby 2.3 (and not Bundler), you **must** activate\nthe gem version of openssl, otherwise the default gem packaged with the Ruby\ninstallation will be used:\n\n```ruby\ngem \"openssl\"\nrequire \"openssl\"\n```\n\n## Documentation\n\nSee https://ruby.github.io/openssl/.\n\n## Contributing\n\nPlease read our [CONTRIBUTING.md] for instructions.\n\n## Security\n\nSecurity issues should be reported to ruby-core by following the process\ndescribed on [\"Security at ruby-lang.org\"](https://www.ruby-lang.org/en/security/).\n\n\n[CONTRIBUTING.md]: https://github.com/ruby/openssl/tree/master/CONTRIBUTING.md\n"
 },
 {
  "repo": "cloudflare/circl",
  "language": "Go",
  "readme_contents": "<img src=\".etc/icon.png\" align=\"right\" height=\"300\" width=\"300\"/>\n\n# CIRCL\n\n[![GitHub release](https://img.shields.io/github/release/cloudflare/circl.svg)](https://GitHub.com/cloudflare/circl/releases/)\n[![CIRCL](https://github.com/cloudflare/circl/workflows/CIRCL/badge.svg)](https://github.com/cloudflare/circl/actions)\n[![GoDoc](https://godoc.org/github.com/cloudflare/circl?status.svg)](https://pkg.go.dev/github.com/cloudflare/circl?tab=overview)\n[![Go Report Card](https://goreportcard.com/badge/github.com/cloudflare/circl)](https://goreportcard.com/report/github.com/cloudflare/circl)\n[![codecov](https://codecov.io/gh/cloudflare/circl/branch/main/graph/badge.svg)](https://codecov.io/gh/cloudflare/circl)\n\n**CIRCL** (Cloudflare Interoperable, Reusable Cryptographic Library) is a collection\nof cryptographic primitives written in Go. The goal of this library is to be used as a tool for\nexperimental deployment of cryptographic algorithms targeting Post-Quantum (PQ) and Elliptic\nCurve Cryptography (ECC).\n\n## Security Disclaimer\n\n\ud83d\udea8 This library is offered as-is, and without a guarantee. Therefore, it is expected that changes in the code, repository, and API occur in the future. We recommend to take caution before using this library in a production application since part of its content is experimental. All security issues must be reported, please notify us immediately following the instructions given in our [Security Policy](https://github.com/cloudflare/circl/security/policy).\n\n## Installation\n\nYou can get CIRCL by fetching:\n\n```sh\ngo get -u github.com/cloudflare/circl\n```\n\n## List of Algorithms\n\n#### Diffie-Hellman Protocol\n- [X25519](https://datatracker.ietf.org/doc/html/rfc7748/)\n- [X448](https://datatracker.ietf.org/doc/html/rfc7748/)\n- [Curve4Q](https://datatracker.ietf.org/doc/draft-ladd-cfrg-4q/)\n\n#### Digital Signature Schemes\n- [Ed25519](https://datatracker.ietf.org/doc/rfc8032/)\n- [Ed448](https://datatracker.ietf.org/doc/rfc8032/)\n\n#### Groups based on Elliptic Curves\n - P-256, P-384, P-521, [FIPS 186-4](https://doi.org/10.6028/NIST.FIPS.186-4)\n - [Ristretto](https://datatracker.ietf.org/doc/draft-irtf-cfrg-ristretto255-decaf448/01/)\n - [Hash to Curve](https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/)\n\n#### High-Level Protocols\n - Bilinear pairings with [BLS12-381](https://electriccoin.co/blog/new-snark-curve/).\n - [HPKE](https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/): Hybrid Public-Key Encryption\n - [VOPRF](https://datatracker.ietf.org/doc/draft-irtf-cfrg-voprf/): Verifiable Oblivious Pseudorandom function.\n\n#### Post-Quantum Key Encapsulation Methods\n - [SIDH/SIKE](https://sike.org/): Supersingular Key Encapsulation with primes p434, p503, p751\n - [CSIDH](https://csidh.isogeny.org/): Post-Quantum Commutative Group Action\n - [Kyber](https://pq-crystals.org/kyber/) KEM: modes 512, 768, 1024\n - [FrodoKEM](https://frodokem.org/) KEM: modes 640-SHAKE\n\n#### Post-Quantum Public-Key Encryption\n - [Kyber](https://pq-crystals.org/kyber/) PKE: modes 512, 768, 1024\n\n#### Post-Quantum Digital Signature Schemes\n - [Dilithium](https://pq-crystals.org/dilithium/): modes 2, 3, 5\n\n#### Field Arithmetic\n - Fp25519, Fp448, Fp381\n\n#### Elliptic Curves\n - P-384 Curve\n - [FourQ](https://eprint.iacr.org/2015/565)\n - [Goldilocks](https://eprint.iacr.org/2015/625)\n\n#### Parallel SIMD\n - [Keccak](https://keccak.team/keccak_specs_summary.html) f1600 Permutation\n\n#### XOF: eXtendable Output Functions\n - [FIPS 202](https://doi.org/10.6028/NIST.FIPS.202): SHAKE128 and SHAKE256\n - [BLAKE2X](https://www.blake2.net/blake2x.pdf): BLAKE2XB and BLAKE2XS\n\n## Testing and Benchmarking\n\nLibrary comes with number of make targets which can be used for testing and\nbenchmarking:\n\n- ``test`` performs testing of the binary.\n- ``bench`` runs benchmarks.\n- ``cover`` produces coverage.\n- ``lint`` runs set of linters on the code base.\n\n## Contributing\n\nTo contribute, fork this repository and make your changes, and then make a Pull\nRequest. A Pull Request requires approval of the admin team and a successful\nCI build.\n\n## How to Cite\n\nTo cite CIRCL, use one of the following formats and update the version and date you accessed this project.\n\nAPA Style\n\n```\nFaz-Hern\u00e1ndez, A. and Kwiatkowski, K. (2019). Introducing CIRCL:\nAn Advanced Cryptographic Library. Cloudflare. Available at\nhttps://github.com/cloudflare/circl. v1.2.0 Accessed Jun 2022.\n```\n\nBibtex Source\n\n```bibtex\n@manual{circl,\n  title        = {Introducing CIRCL: An Advanced Cryptographic Library},\n  author       = {Armando Faz-Hern\\'{a}ndez and Kris Kwiatkowski},\n  organization = {Cloudflare},\n  abstract     = {{CIRCL (Cloudflare Interoperable, Reusable Cryptographic Library) is\n                   a collection of cryptographic primitives written in Go. The goal\n                   of this library is to be used as a tool for experimental\n                   deployment of cryptographic algorithms targeting Post-Quantum (PQ)\n                   and Elliptic Curve Cryptography (ECC).}},\n  note         = {Available at \\url{https://github.com/cloudflare/circl}. v1.2.0 Accessed Jun 2022},\n  month        = jun,\n  year         = {2019}\n}\n```\n\nCFF Style\n\nSee attached [CITATION.cff](CITATION.cff) file.\n\n## License\n\nThe project is licensed under the [BSD-3-Clause License](./LICENSE).\n"
 },
 {
  "repo": "Runpython-IntroProgramming/Cryptography",
  "language": "Python",
  "readme_contents": "# Cryptography (Level II)\n\n*Challenge by Jack Boffa, HHS '14*\n\nIn this challenge, you will be writing an implementation of a basic encryption algorithm (similar to \n[the Vigen\u00e8re cipher](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher)). Encryption \n(more broadly known as cryptography) is the process of protecting data by making it readable only by \nthose with the authority to see it. Encryption generally works using keys -- passwords used by the \nalgorithm to jumble the sensitive data in some way. Someone who wants to encrypt a secret message chooses \na key, feeding it and the message to the encryption program. The program outputs an unreadable version \nof the message. Someone who knows the selected key can give it to the program (along with the encrypted \nmessage) to get back the original data.\n\n*Write and submit a Python program that performs encryption and decryption*. This program will work by \nasking for some text (to be the secret message), a key (the password), and whether the user wants to \nencrypt or decrypt the given data. The program will then perform the specified action.\n\nYou will implement a simple algorithm that produces its output by adding together corresponding characters \nin the message and key. Since there is no way to mathematically add two letters, you will have to convert \neach one to a number that represents it, operate on that number, then convert back to a letter. Use \nthis string for the conversions:\n\n```\nassociations = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 .,:;'\\\"/\\\\<>(){}[]-=_+?!\"\n```\n\nTo get a character's numeric representation, find the index of that character in the string (use the code\n`associations.find(char)` to get the index of char's first occurrence in associations). To get a character \nback from this numeric representation, get the character at that number's index in the string (using \n`associations[index]`). For example, the letter `'c'` would be represented by a 2 because `'c'` is at index \n2 in the string. If you wanted to find which character is represented by 8, you would get the character \nat index 8, which is `'i'`.\n\nOnce you can convert characters to numbers and back, you can implement the actual algorithm. It will work \nby adding each character in the message to its corresponding character in the key (of course, you are \nactually adding their numerical equivalents). If the message is longer than the key, the key should be \nrepeated to provide more letters to combine. Also, if the sum you get is too high a number to translate \nback to a character, wrap that number to the beginning of the associations string. For example, using the \nmessage \"test\" and the key \"hi\" would look like this:\n\n```\n  19(t) 04(e) 18(s) 19(t)\n+ 07(h) 08(i) 07(h) 08(i)\n-----------------------------\n= 26(A) 12(m) 25(z) 27(B)\n```\n\nDecryption should reverse the process: Given the encrypted message and the original key, it should output \nthe original message. This can simply be done by reversing your algorithm -- that is, subtracting (not \nadding) from each character in the message its corresponding character in the key.\n\n##Your progam's output should look like this:\n\n```\nEnter e to encrypt, d to decrypt, or q to quit: z\nDid not understand command, try again.\nEnter e to encrypt, d to decrypt, or q to quit: e\nMessage: Two plus two = Five\nKey: Lorem ipsum\n+KF;B(CH=NIZ}m;R\\Dt\nEnter e to encrypt, d to decrypt, or q to quit: d\nMessage: +KF;B(CH=NIZ}m;R\\Dt\nKey: Lorem ipsum\nTwo plus two = Five\nEnter e to encrypt, d to decrypt, or q to quit: q\nGoodbye!\n```\n"
 },
 {
  "repo": "boazbk/crypto",
  "language": "TeX",
  "readme_contents": "# An intensive introduction to cryptography\n\nThis is a git repository for lecture notes accompanying a fast-paced introductory undergraduate/beginning graduate course on cryptography that can be found at [http://intensecrypto.org](http://intensecrypto.org)\n\nPlease use the [issues](https://github.com/boazbk/crypto/issues) and [pull requests](https://github.com/boazbk/crypto/pulls) to post any suggestions, comments, typo fixes, etc..\n\n\nThis work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\nWhile these notes will remain freely and publicly available, I may also create a printed book version of them in the future.\nBy making any contribution to this work, such as a typo fix or any other suggestion or edit, you are assigning me the rights to use your contribution in both the online or any other version of this work.\n\n\nThese notes are produced using a set of scripts written by [David Steurer](https://www.dsteurer.org/), together with [Pandoc](https://pandoc.org), and the Tufte  [LaTeX](https://tufte-latex.github.io/tufte-latex/)  and [css](https://edwardtufte.github.io/tufte-css/) templates. See also [introtcs.org](https://introtcs.org) and [sumofsquares.org](https://sumofsquares.org) for other lecture notes using (variants of) the same scripts.\n"
 },
 {
  "repo": "google/wycheproof",
  "language": "Java",
  "readme_contents": "# Project Wycheproof\nhttps://github.com/google/wycheproof\n\n*Project Wycheproof is named after\n[Mount Wycheproof](https://en.wikipedia.org/wiki/Mount_Wycheproof), the smallest\nmountain in the world. The main motivation for the project is to have a goal\nthat is achievable. The smaller the mountain the more likely it is to be able to\nclimb it.*\n\n[TOC]\n\n## Introduction\n\nProject Wycheproof tests crypto libraries against known attacks. It is developed\nand maintained by members of Google Security Team, but it is not an official\nGoogle product.\n\nAt Google, we rely on many third party cryptographic software libraries.\nUnfortunately, in cryptography, subtle mistakes can have catastrophic\nconsequences, and we found that libraries fall into such implementation\npitfalls much too often and for much too long. Good implementation guidelines,\nhowever, are hard to come by: understanding how to implement cryptography\nsecurely requires digesting decades' worth of academic literature. We recognize\nthat software engineers fix and prevent bugs with unit testing, and we found\nthat cryptographic loopholes can be resolved by the same means.\n\nThese observations have prompted us to develop Project Wycheproof, a collection\nof unit tests that detect known weaknesses or check for expected behaviors of\nsome cryptographic algorithm. Project Wycheproof provides tests for most\ncryptographic algorithms, including RSA, elliptic curve crypto and\nauthenticated encryption. Our cryptographers have systematically surveyed the\nliterature and implemented most known attacks. We have over 80 test cases which\nhave uncovered more than [40 bugs](doc/bugs.md). For\nexample, we found that we could recover the private key of widely-used DSA and\nECDHC implementations.\n\nWhile we are committed to develop as many attacks as possible, Project\nWycheproof is by no means complete. Passing the tests does not imply that the\nlibrary is secure, it just means that it is not vulnerable to the attacks that\nProject Wycheproof tests for. Cryptographers are also constantly discovering\nnew attacks. Nevertheless, with Project Wycheproof developers and users now can\ncheck their libraries against a large number of known attacks, without having\nto spend years reading academic papers or become cryptographers themselves.\n\nFor more information on the goals and strategies of Project Wycheproof, please\ncheck out our [doc](doc/).\n\n### Coverage\n\nProject Wycheproof has tests for the most popular crypto algorithms, including\n\n- AES-EAX\n- AES-GCM\n- [DH](doc/dh.md)\n- DHIES\n- [DSA](doc/dsa.md)\n- [ECDH](doc/ecdh.md)\n- ECDSA\n- ECIES\n- [RSA](doc/rsa.md)\n\nThe tests detect whether a library is vulnerable to many attacks, including\n\n- Invalid curve attacks\n- Biased nonces in digital signature schemes\n- Of course, all Bleichenbacher\u2019s attacks\n- And many more -- we have over 80 test cases\n\nOur first set of tests are written in Java, because Java has a common\ncryptographic interface. This allowed us to test multiple providers with a\nsingle test suite. While this interface is somewhat low level, and should not\nbe used directly, we still apply a \"defense in depth\" argument and expect that\nthe implementations are as robust as possible. For example, we consider weak\ndefault values to be a significant security flaw. We are converting as many\ntests into sets of test vectors to simplify porting the tests to other\nlanguages. We provide ready-to-use test runners for Java Cryptography\nArchitecture providers such as [Bouncy Castle](http://bouncycastle.org),\n[Spongy Castle](https://rtyley.github.io/spongycastle/), the\n[Amazon Corretto Crypto Provider](https://github.com/corretto/amazon-corretto-crypto-provider)\nand the default\nproviders in [OpenJDK](http://openjdk.java.net/).\n\n### Usage\n\n-   Install [Bazel](https://bazel.build/).\n\n-   Install [Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction\n    Policy\n    Files](http://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters):\n    this enables tests with large key sizes. Otherwise you'll see a lot of\n    \"illegal key size\" exceptions.\n\n-   Check out the tests\n\n```\ngit clone https://github.com/google/wycheproof.git\n```\n\n- To test latest stable version of Bouncy Castle:\n\n```\nbazel test BouncyCastleAllTests\n```\n\n- To test other versions, e.g., v1.52:\n\n```\nbazel test BouncyCastleAllTests_1_52\n```\n\n- To test all known versions (warning, will take a long time):\n\n```\nbazel test BouncyCastleAllTests_*\n```\n\n-   To test a local jar, set the `WYCHEPROOF_BOUNCYCASTLE_JAR` environment\n    variable:\n\n```shell\n$ WYCHEPROOF_BOUNCYCASTLE_JAR=/path/to/bouncycastle\n$ bazel test BouncyCastleTestLocal\n$ bazel test BouncyCastleAllTestsLocal\n```\n\nNote: bazel does not currently invalidate the build on environment changes. If\nyou change the `WYCHEPROOF_BOUNCYCASTLE_JAR` environment variable, run `bazel\nclean` to force a rebuild:\n\n```shell\n$ WYCHEPROOF_BOUNCYCASTLE_JAR=/path/to/bouncycastle\n$ bazel test BouncyCastleTestLocal\n$ WYCHEPROOF_BOUNCYCASTLE_JAR=/path/to/other/jar\n$ bazel clean\n$ bazel test BouncyCastleTestLocal\n```\n\n- To test [Spongy Castle](https://rtyley.github.io/spongycastle/), replace\nBouncyCastle with SpongyCastle in your commands, for example\n\n```\nbazel test SpongyCastleAllTests\n```\n\n- To test the\n[Amazon Corretto Crypto Provider](https://github.com/corretto/amazon-corretto-crypto-provider), replace\nBouncyCastle with Accp in your commands, for example\n\n```\nbazel test AccpAllTests\n```\n\n- To test a local jar for the Amazon Corretto Crypto Provider, set the\n`WYCHEPROOF_ACCP_JAR` environment variable:\n\n```shell\n$ WYCHEPROOF_ACCP_JAR=/path/to/accp\n$ bazel test AccpTestLocal\n$ bazel test AccpAllTestsLocal\n```\n\nNote: bazel does not currently invalidate the build on environment changes. If\nyou change the `WYCHEPROOF_ACCP_JAR` environment variable, run `bazel\nclean` to force a rebuild:\n\n```shell\n$ WYCHEPROOF_ACCP_JAR=/path/to/accp\n$ bazel test AccpTestLocal\n$ WYCHEPROOF_ACCP_JAR=/path/to/other/jar\n$ bazel clean\n$ bazel test AccpTestLocal\n```\n\n- To test your current installation of\n[OpenJDK](http://openjdk.java.net/):\n\n```\nbazel test OpenJDKAllTests\n```\n\nNote that OpenJDKAllTests expects that OpenJDK is your default JDK, so it might\nrefuse to run or its results might be incorrect if you are using some other JDK.\nIf you downloaded your JDK from Oracle or https://java.com, you're probably\nusing Oracle JDK, which should be compatible with OpenJDK, thus the tests should\nrun correctly.\n\nSome tests take a very long time to finish. If you want to exclude them, use\nBouncyCastleTest, SpongyCastleTest or OpenJDKTest -- these targets exclude all\nslow tests (which are annotated with @SlowTest).\n\nMost test targets are failing, and each failure might be a security issue. To\nlearn more about what a failed test means, you might want to check out [our\ndocumentation](doc/bugs.md) or the comments on top of the corresponding test\nfunction and test class.\n\n### Hall of Bugs\n\nHere are some of the notable vulnerabilities that are uncovered by\nProject Wycheproof:\n\n- OpenJDK's SHA1withDSA leaks private keys > 1024 bits\n  - Test: testBiasSha1WithDSA in\n[DsaTest](https://github.com/google/wycheproof/blob/master/java/com/google/security/wycheproof/testcases/DsaTest.java).\n  - This bug is the same as\n[CVE-2003-0971 - GnuPG generated ElGamal signatures that leaked the private key]\n(https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2003-0971).\n\n- Bouncy Castle's ECDHC leaks private keys\n  - Test: testModifiedPublic and testWrongOrderEcdhc in\n[EcdhTest](https://github.com/google/wycheproof/blob/master/java/com/google/security/wycheproof/testcases/EcdhTest.java).\n\n### Maintainers\n\nProject Wycheproof is maintained by:\n\n- Daniel Bleichenbacher\n- Thai Duong\n- Emilia Kasper\n- Quan Nguyen\n\n### Contact and mailing list\n\nIf you want to contribute, please read [CONTRIBUTING](CONTRIBUTING.md) and send\nus pull requests. You can also report bugs or request new tests.\n\nIf you'd like to talk to our developers or get notified about major new\ntests, you may want to subscribe to our\n[mailing list](https://groups.google.com/forum/#!forum/wycheproof-users). To\njoin, simply send an empty mail to wycheproof-users+subscribe@googlegroups.com.\n"
 },
 {
  "repo": "w3c/webcrypto",
  "language": "HTML",
  "readme_contents": "# Web Crypto API\n\nThis is the repository for the Web Cryptography API.\n\nThe source of the specification is in the main branch.\nEdit [spec/Overview.html](spec/Overview.html) there.\n\nThe [editor's draft on github.io](https://w3c.github.io/webcrypto/) is in the\ngh-pages branch. It is updated automatically.\n"
 },
 {
  "repo": "adamcaudill/libsodium-net",
  "language": "C#",
  "readme_contents": "# libsodium-net [![Build Status](https://travis-ci.org/adamcaudill/libsodium-net.svg?branch=master)](https://travis-ci.org/adamcaudill/libsodium-net) [![NuGet Version](http://img.shields.io/nuget/v/libsodium-net.svg)](https://www.nuget.org/packages/libsodium-net/) [![License](http://img.shields.io/badge/license-MIT-green.svg)](https://github.com/adamcaudill/libsodium-net/blob/master/LICENSE)\n\nlibsodium-net, or better said, [libsodium](https://github.com/jedisct1/libsodium) for .NET, is a C# wrapper around libsodium. For those that don't know, libsodium is a portable implementation of [Daniel Bernstein's](http://cr.yp.to/djb.html) fantastic [NaCl](http://nacl.cr.yp.to/) library. If you aren't familiar with NaCl, I highly suggest that you look into libsodium and NaCl before using this library.\n\n## Why\n\nNaCl is a great library in that its designed has made the right choices on what to implement and how - something most developers don't know how to do. So by using it (or a wrapper), many of those details are abstracted away where you don't need to worry about them. NaCl itself is less than portable C, only targeted for *nix systems; libsodium solves this by making it portable and making a few minor changes to better suite being distributed as a compiled binary.\n\nCrypto is hard - much harder than your average developer understands. This effort was started to make these tools readily available to the .NET community in hopes they will be used to further the goals of defending personal privacy and security.\n\n## Installation\n\n**Windows**: For Windows, the `libsodium` library is included in the [release](https://github.com/adamcaudill/libsodium-net/releases) packages. Or just use the [NuGet version](https://www.nuget.org/packages/libsodium-net/) which has everything you need.\n\n**OSX**: For OSX, `libsodium-net` can easily be built in Xamarin Studio, and `libsodium` can be installed easily via `brew`:\n\n    brew install libsodium --universal\n\n**Linux**: As with OSX, building with Xamarin Studio is simple, or there's always the option of using `xbuild`:\n\n    xbuild libsodium-net.sln\n\nFor `libsodium`, many package managers provide older versions, so it's recommended to build the latest version from source. Thankfully, this is a fairly painless process. See the [travis-build-libsodium.sh](https://github.com/adamcaudill/libsodium-net/blob/master/travis-build-libsodium.sh) file or the `libsodium` [README](https://github.com/jedisct1/libsodium/blob/master/README.markdown) file for details.\n\n**Other**: Support for other Mono supported platforms hasn't been determined. It may or may not work.\n\nNote: For all platforms, it's critical that `libsodium` be compiled for the architecture that the process is running under. If they don't match, you can expect to see errors. If your process is x86/i386, you can't use a copy of `libsodium` compiled for x64.\n\n## Documentation\n\n[libsodium-net](http://bitbeans.gitbooks.io/libsodium-net/content/) documentation is available (an adapted copy of the [original](http://doc.libsodium.org/) written by Frank Denis ([@jedisct1](https://github.com/jedisct1))).\n\n## Requirements & Versions\n\nThis library can be built in Visual Studio 2010, Xamarin Studio (MonoDevelop 3.x supported), and targets .NET 4.0; it is compiled against libsodium v1.0.7.\n\nOn OSX & Linux, your copy of `libsodium` must be compiled for the same architecture as your copy of Mono. If you are running a 32bit process, your copy of `libsodium` must be 32bit as well.\n\n## Notes\n\nAny method that takes a String, has an overload that accepts a byte array; Strings are assumed to be UTF8; if this is not the case, please convert it to bytes yourself and use the overloads that accept byte arrays.\n\n`libsodium` requires the [Visual C++ Redistributable for Visual Studio 2015](https://www.microsoft.com/en-us/download/details.aspx?id=48145).\n\n## File Signing\n\nStarting with version 0.4.0, all files are signed via a Certum.pl Code Signing certificate. The files are signed under the name `Open Source Developer, Adam Caudill` - this can be used to ensure that the files haven't been altered.\n\n## License\n\nNaCl has been released to the public domain to avoid copyright issues. libsodium is subject to the [ISC license](https://en.wikipedia.org/wiki/ISC_license), and this software is subject to the MIT license (see LICENSE).\n"
 },
 {
  "repo": "project-everest/hacl-star",
  "language": "F*",
  "readme_contents": "# A High-Assurance Cryptographic Library\n\nThis repository contains verified code for a library of modern\ncryptographic algorithms, including Curve25519, Ed25519, AES-GCM,\nChacha20, Poly1305, SHA-2, SHA-3, HMAC, and HKDF. This set of algorithms\nis enough to support the full NaCl API and several TLS 1.3 ciphersuites.\nThe code for all of these algorithms is formally verified using the\n[F\\*](https://fstarlang.github.io/) verification framework for memory\nsafety, functional correctness, and secret independence (resistance to\nsome types of timing side-channels).\n\n**Documentation**: More detailed documentation on the library and our verification method\ncan be found at [hacl-star.github.io](https://hacl-star.github.io).\n\nThe code in this repository is divided into three closely-related sub-projects,\nall developed as part of [Project Everest](https://project-everest.github.io/).\n\n## HACL\\*\n\n[HACL\\*](code/) is a formally verified library\nof modern cryptographic algorithms written in a subset of\n[F\\*](https://fstarlang.github.io) called Low\\* and compiled to C\nusing a compiler called\n[KaRaMeL](https://github.com/FStarLang/karamel). The Low\\* source code\nfor each primitive is verified for memory safety, functional\ncorrectness, and secret independence. The compiler generates\nefficient, readable, standalone C code for each algorithm that\ncan be easily integrated into any C project.  We include the current C code for various HACL\\*\nalgorithms in the [dist](dist/) directory. HACL\\* can also be compiled to WebAssembly.\n\n## ValeCrypt\n\n[ValeCrypt](vale/) provides formally verified high-performance\ncryptographic code for selected primitives in assembly language. It relies on the\n[Vale tool](https://github.com/project-everest/vale) to produce\ncode and proofs in [F\\*](https://github.com/FStarLang/FStar). Vale supports\nmultiple platforms and proves that its implementations are memory safe,\nfunctionally correct, and that timing and memory accesses are secret\nindependent.\n\n## EverCrypt\n\n[EverCrypt](providers/evercrypt/) is a high-performance, cross-platform, formally\nverified modern cryptographic provider that packages implementations from\nHACL\\* and ValeCrypt, and automatically picks the fastest one available,\ndepending on processor support and the target execution environment\n(*multiplexing*). Furthermore, EverCrypt offers an (*agile*) API that makes it\nsimple to switch between algorithms (e.g., from SHA2 to SHA3).\n\n## Status\n\n*Warning*: This is a research project. Although some of our code is currently used in popular products like Mozilla Firefox and Wireguard,\nwe highly recommend that users consult with the HACL\\* maintainers before using this code in production systems.\n\nWe are actively developing and integrating our code on the\n[master](https://github.com/project-everest/hacl-star/tree/master/)\nbranch, which tracks F\\*'s `master` branch. Ongoing developments on new\ncryptographic primitives happen in the [dev](https://github.com/project-everest/hacl-star/tree/dev/)\nbranch, which runs a little ahead of master. You can find a current snapshot\nof our C and assembly code in the [dist](dist/) directory; stable releases of the full library\ncan be found in the [releases](https://github.com/project-everest/hacl-star/releases) page.\n\n## License\n\nAll the code in this repository is released under an Apache 2.0 license.\nThe generated C code from HACL\\* is also released under an MIT license.\nContact the maintainers if you have other licensing requirements.\n\n## Contact or Contribute\n\nThis repository contains contributions from many students and researchers at INRIA, Microsoft Research, and Carnegie Mellon University,\nand it is under active development. The primary authors of each verified algorithm are noted in the corresponding AUTHORS.md file.\nFor questions and comments, or if you want to contribute to the project, contact the current maintainers at hacl-star-maintainers@lists.gforge.inria.fr.\n\n"
 },
 {
  "repo": "CodesInChaos/Chaos.NaCl",
  "language": "C#",
  "readme_contents": "Chaos.NaCl\n==========\n\nChaos.NaCl is a cryptography library written in C#. It is based on djb's NaCl.\n\nCurrently it supports:\n\n* Ed25519 signatures\n* Key-exchange using either Curve25519 (montgomery form) or Ed25519 public keys\n* Authenticated encryption using XSalsa20Poly1305\n* Hashing using SHA-512\n\nMost functions come in two variants:\n\n* An easy to use variant, where inputs are complete byte arrays and results are\n  returned in newly allocated arrays. \n* An advanced variant which uses `ArraySegment<byte>` to work on slices of the\n  passed in arrays. This can be used to avoid unnecessary allocations and copies.\n\n**WARNINGS:**\n\n* The current API is not final. I'll probably modify it.\n* Some functions are marked with the `[Obsolete(\"Needs more testing\")]` attribute.\n  Those should work in principle, but I'm not happy with the unit test coverage.\n\n`Ed25519` (Key-exchange and signatures)\n===========================\n\nEd25519 is a public key crypto system with a 128 bit security level.\nIt is based on the 255 bit elliptic curve Curve25519 using Edwards coordinates.\n\nData structures\n---------------\n\n* *Public Keys* are 32 byte values. All possible values of this size a valid.\n* *Private Keys* take two forms:\n\n    * A 32 byte seeds which allow arbitrary values. This is the form that should be generated and stored.\n    * A 64 byte expanded form. This forms is used internally to improve performance\n\n* *Signatures* are 64 byte values\n\nTo generate a keypair first obtain a 32 byte random value, the `privateKeySeed`\nfrom a cryptographic random number generator, such as `RNGCryptoService`.\n\nThen call `KeyPairFromSeed` on it to get the `publicKey` and the `expandedPrivateKey`.\n\nAPI\n---\n\n    public static byte[] PublicKeyFromSeed(byte[] privateKeySeed)\n\nReturns the 32 byte public key corresponding the given `privateKeySeed`.\n\n    public static byte[] ExpandedPrivateKeyFromSeed(byte[] privateKeySeed)\n\nExpands the `privateKeySeed` into the form used by the `Sign` function.\n\n    public static void KeyPairFromSeed(out byte[] publicKey, out byte[] expandedPrivateKey, byte[] privateKeySeed)\n\nEquivalent to calling both `PublicKeyFromSeed` and `ExpandedPrivateKeyFromSeed`.\n\nUsing this function is twice as fast as calling them individually.\n\n    public static byte[] Sign(byte[] message, byte[] expandedPrivateKey)\n\nReturns the 64 byte signature for `message` using the given private key. The signature\ncan be verified using `Verify` with the corresponding public key.\n\n    public static bool Verify(byte[] signature, byte[] message, byte[] publicKey)\n\nVerifies if `signature` was produced by signing `message` using the private key\ncorresponding to `publicKey`.\n\nReturns `true` if the signature is valid, `false` if it is not.\n\n    public static byte[] KeyExchange(byte[] publicKey, byte[] privateKey)\n\nReturns a secred shared by the owners of the two keys pairs. This key can be used\nwith symmetric cryptography, such as encryption, MACs and authenticated encryption.\n\nThis uses Edwards form public keys, but is otherwise identical to `MontgomeryCurve25519.KeyExchange`.\nThe advantage of this method is that you can use one keypair for both key-exchange and signing.\n\nPerformance\n-----------\n\nOn a single core of my Intel Core i3 M390 with 2.66 GHz I obtain:\n\n    Key generation:             116.68 us / 8571 per second / 310356 cycles\n    Signing a short message:    122.46 us / 8166 per second / 325746 cycles\n    Verifying a short message:  279.18 us / 3582 per second / 742607 cycles\n\nThis is about 1.4 times as slow as the equivalent c code.\n\n`MontgomeryCurve25519` - Key-exchange using Curve25519 in montgomery form\n=========================================================================\n\nCompatible with NaCl's `crypto_box_beforenm`\n\n`XSalsa20Poly1305` - Authenticates encryption using XSalsa20 as cipher and Poly1305 as MAC\n==========================================================================================\n\nCompatible with NaCl's `crypto_secret_box` and `crypto_box_afternm`.\n\n\nCryptoBytes\n===========\n\nContains helper functions commonly used in cryptographic code.\n\n    void Wipe(byte[] data)\n\nOverwrites the contents of the array, wiping the previous content. This should be used\nto destroy cryptographic secrets that are no longer required.\n\nComplicating factors like swap files, crash dumps and the moving garbage collector\nreduce the reliability of this function.\n\n    public static bool ContantTimeEquals(byte[] x, byte[] y)\n\nChecks if the contents of the two arrays are the same and returns `truie` if they are equal.  \nThrows an expection if their lengthes differ.\n\nThe runtime of this method does not depend on the contents of the arrays. Using constant time\nprevents timing attacks that allow an attacker to learn if the arrays have a common prefix.\nIt is important to use such a constant time comparison when verifying MACs.\n\n    public static string ToHexString(byte[] data)\n\nConverts the bytes to an upper-case hex string.\n\n*constant time*\n\n    public static string ToHexStringLower(byte[] data)\n\nConverts the bytes to a lower-case hex string.\n\n*constant time*\n\n    public static byte[] FromHexString(string hexString)\n\nConverts the hex string to bytes. Case insensitive.\n\n*variable time*\n\n    public static string ToBase64String(byte[] data)\n\nEncodes the bytes with the Base64 encoding. More compact than hex, but it is case-sensitive\nand uses the special characters `+`, `/` and `=`.\n\n*variable time*\n\n    public static byte[] FromBase64String(string s)\n\nDecodes a Base64 encoded string back to bytes.\n\n*variable time*"
 },
 {
  "repo": "nayuki/Bitcoin-Cryptography-Library",
  "language": "C++",
  "readme_contents": "Nayuki's Bitcoin cryptography library\n=====================================\n\nThis project implements the cryptographic primitives used in the Bitcoin system,\nespecially elliptic curve operations and hash functions.\n\nThe code is written in two independent versions in C++ and Java. It includes a\ntest suite of over a thousand test vectors that cover every feature provided by\nthe library.\n\nThe library is open-source, and is written by Nayuki from the ground up. It is\ndesigned with portability and clarity in mind, and is rigorously verified for\ncorrectness and quality.\n\nMore details about features and design principles are on the main web page:\n[https://www.nayuki.io/page/bitcoin-cryptography-library](https://www.nayuki.io/page/bitcoin-cryptography-library)\n\n\nLicense\n-------\n\nCopyright \u00a9 2019 Project Nayuki. (MIT License)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\n* The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n* The Software is provided \"as is\", without warranty of any kind, express or\n  implied, including but not limited to the warranties of merchantability,\n  fitness for a particular purpose and noninfringement. In no event shall the\n  authors or copyright holders be liable for any claim, damages or other\n  liability, whether in an action of contract, tort or otherwise, arising from,\n  out of or in connection with the Software or the use or other dealings in the\n  Software.\n"
 },
 {
  "repo": "phpecc/phpecc",
  "language": "PHP",
  "readme_contents": "## Pure PHP Elliptic Curve DSA and DH\n\n[![Build Status](https://travis-ci.org/phpecc/phpecc.svg?branch=master)](https://travis-ci.org/phpecc/phpecc)\n\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/phpecc/phpecc/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/phpecc/phpecc?branch=master)\n[![Code Coverage](https://scrutinizer-ci.com/g/phpecc/phpecc/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/phpecc/phpecc/?branch=master)\n\n[![Latest Stable Version](https://poser.pugx.org/mdanter/ecc/v/stable.png)](https://packagist.org/packages/mdanter/ecc)\n[![Total Downloads](https://poser.pugx.org/mdanter/ecc/downloads.png)](https://packagist.org/packages/mdanter/ecc)\n[![Latest Unstable Version](https://poser.pugx.org/mdanter/ecc/v/unstable.png)](https://packagist.org/packages/mdanter/ecc)\n[![License](https://poser.pugx.org/mdanter/ecc/license.png)](https://packagist.org/packages/mdanter/ecc)\n\n### Information\n\nThis library is a rewrite/update of Matyas Danter's ECC library. All credit goes to him.\n\nFor more information on Elliptic Curve Cryptography please read [this fine article](http://www.matyasdanter.com/2010/12/elliptic-curve-php-oop-dsa-and-diffie-hellman/).\n\nThe library supports the following curves:\n\n - secp112r1\n - secp256k1\n - nistp192\n - nistp224\n - nistp256 / secp256r1\n - nistp384 / secp384r1\n - nistp521\n\nDuring ECDSA, a random value `k` is required. It is acceptable to use a true RNG to generate this value, but \nshould the same `k` value ever be repeatedly used for a key, an attacker can recover that signing key. \nThe HMAC random generator can derive a deterministic k value from the message hash and private key, voiding\nthis concern.\n\nThe library uses a non-branching Montgomery ladder for scalar multiplication, as it's constant time and avoids secret \ndependant branches. \n \n### License\n\nThis package is released under the MIT license.\n\n### Requirements\n\n* PHP 7.0+ or PHP 8.0+\n* composer\n* ext-gmp\n\nSupport for older PHP versions:\n * v0.4.x: php ^5.6|<7.2\n * v0.5.x: php ^7.0\n * v1.0.x: php ^7.0|^8.0\n\n### Installation\n\nYou can install this library via Composer :\n\n`composer require mdanter/ecc:^1.0`\n\n### Contribute\n\nWhen sending in pull requests, please make sure to run the `make` command.\n\nThe default target runs all PHPUnit and PHPCS tests. All tests\nmust validate for your contribution to be accepted.\n\nIt's also always a good idea to check the results of the [Scrutinizer analysis](https://scrutinizer-ci.com/g/phpecc/phpecc/) for your pull requests.\n\n### Usage\n\nExamples:\n * [Key generation](./examples/key_generation.php)\n * [ECDH exchange](./examples/ecdh_exchange.php)\n * [Signature creation](./examples/creating_signature.php)\n * [Signature verification](./examples/verify_signature.php)\n"
 },
 {
  "repo": "haskell-crypto/cryptonite",
  "language": "C",
  "readme_contents": "cryptonite\n==========\n\n[![Join the chat at https://gitter.im/vincenthz/cryptonite](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/vincenthz/cryptonite?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/haskell-crypto/cryptonite.png?branch=master)](https://travis-ci.org/haskell-crypto/cryptonite)\n[![BSD](http://b.repl.ca/v1/license-BSD-blue.png)](http://en.wikipedia.org/wiki/BSD_licenses)\n[![Haskell](http://b.repl.ca/v1/language-haskell-lightgrey.png)](http://haskell.org)\n\nCryptonite is a haskell repository of cryptographic primitives. Each crypto\nalgorithm has specificities that are hard to wrap in common APIs and types,\nso instead of trying to provide a common ground for algorithms, this package\nprovides a non-consistent low-level API.\n\nIf you have no idea what you're doing, please do not use this directly.\nInstead, rely on higher level protocols or implementations.\n\nDocumentation: [cryptonite on hackage](http://hackage.haskell.org/package/cryptonite)\n\nStability\n---------\n\nCryptonite APIs are stable, and we only strive to add, not change or remove.\nNote that because the API exposed is wide and also expose internals things (for\npower users and flexibility), certains APIs can be revised in extreme cases\nwhere we can't just add.\n\nVersioning\n----------\n\nNext version of `0.x` is `0.(x+1)`. There's no exceptions, or API related meaning\nbehind the numbers.\n\nEach versions of stackage (going back 3 stable LTS) has a cryptonite version\nthat we maintain with security fixes when necessary and are versioned with the\nfollowing `0.x.y` scheme.\n\nCoding Style\n------------\n\nThe coding style of this project mostly follows:\n[haskell-style](https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md)\n\nSupport\n-------\n\nSee [Haskell packages guidelines](https://github.com/vincenthz/haskell-pkg-guidelines/blob/master/README.md#support)\n\nKnown Building Issues\n---------------------\n\nOn OSX <= 10.7, the system compiler doesn't understand the '-maes' option, and\nwith the lack of autodetection feature builtin in .cabal file, it is left on\nthe user to disable the aesni. See the [Disabling AESNI] section\n\nOn CentOS 7 the default C compiler includes intrinsic header files incompatible\nwith per-function target options.  Solutions are to use GCC >= 4.9 or disable\nflag *use_target_attributes* (see flag configuration examples below).\n\nDisabling AESNI\n---------------\n\nIt may be useful to disable AESNI for building, testing or runtime purposes.\nThis is achieved with the *support_aesni* flag.\n\nAs part of configure of cryptonite:\n\n```\n  cabal configure --flag='-support_aesni'\n```\n\nor as part of an installation:\n\n```\n  cabal install --constraint=\"cryptonite -support_aesni\"\n```\n\nFor help with cabal flags, see: [stackoverflow : is there a way to define flags for cabal](http://stackoverflow.com/questions/23523869/is-there-any-way-to-define-flags-for-cabal-dependencies)\n\nEnabling PCLMULDQ\n-----------------\n\nWhen the C toolchain supports it, enabling flag *support_pclmuldq* can bring\nadditional security and performance for AES GCM.  A CPU with the necessary\ninstruction set will use an alternate implementation selected at runtime.\n\nLinks\n-----\n\n* [ChaCha](http://cr.yp.to/chacha.html)\n* [ChaCha-test-vectors](https://github.com/secworks/chacha_testvectors.git)\n* [Poly1305](http://cr.yp.to/mac.html)\n* [Poly1305-test-vectors](http://tools.ietf.org/html/draft-nir-cfrg-chacha20-poly1305-06#page-12)\n* [Salsa](http://cr.yp.to/snuffle.html)\n* [Salsa128-test-vectors](https://github.com/alexwebr/salsa20/blob/master/test_vectors.128)\n* [Salsa256-test-vectors](https://github.com/alexwebr/salsa20/blob/master/test_vectors.256)\n* [XSalsa](https://cr.yp.to/snuffle/xsalsa-20081128.pdf)\n* [PBKDF2](http://tools.ietf.org/html/rfc2898)\n* [PBKDF2-test-vectors](http://www.ietf.org/rfc/rfc6070.txt)\n* [Scrypt](http://www.tarsnap.com/scrypt.html)\n* [Curve25519](http://cr.yp.to/ecdh.html)\n* [Ed25519](http://ed25519.cr.yp.to/papers.html)\n* [Ed448-Goldilocks](http://ed448goldilocks.sourceforge.net/)\n* [EdDSA-test-vectors](http://www.ietf.org/rfc/rfc8032.txt)\n* [AFIS](http://clemens.endorphin.org/cryptography)\n\n"
 },
 {
  "repo": "mirleft/ocaml-nocrypto",
  "language": "OCaml",
  "readme_contents": "# nocrypto - Simpler crypto\n\n%%VERSION%%\n\nnocrypto is a small cryptographic library that puts emphasis on the applicative\nstyle and ease of use. It includes basic ciphers (AES, 3DES, RC4), hashes (MD5,\nSHA1, SHA2 family), AEAD primitives (AES-GCM, AES-CCM), public-key primitives\n(RSA, DSA, DH) and a strong RNG (Fortuna).\n\nRSA timing attacks are countered by blinding. AES timing attacks are avoided by\ndelegating to AES-NI.\n\n## Documentation\n\n[Interface][nocrypto-mli] is documented. Also [online][doc].\n\n[nocrypto-mli]: https://github.com/mirleft/ocaml-nocrypto/blob/master/src/nocrypto.mli\n[doc]: http://mirleft.github.io/ocaml-nocrypto/doc\n\n## Build\n\n```bash\n./pkg/pkg.ml build\n  --with-unix BOOL\n  --with-lwt BOOL\n  --xen BOOL\n  --freestanding BOOL\n\n./pkg/pkg.ml test\n```\n\n## FAQ\n\n#### RNG seeding\n\nIf RNG fails with `Fatal error: exception Uncommon.Boot.Unseeded_generator`, you\nneed to [seed][doc-entropy] it.\n\nUnix:\n```OCaml\nlet () = Nocrypto_entropy_unix.initialize ()\n```\n\nUnix/Lwt:\n```OCaml\nlet () = Nocrypto_entropy_lwt.initialize () |> ignore\n```\n\n[doc-entropy]: http://mirleft.github.io/ocaml-nocrypto/Nocrypto_entropy_unix.html\n\n#### Illegal instructions\n\n```\nProgram terminated with signal SIGILL, Illegal instruction.\n#0  _mm_aeskeygenassist_si128 (__C=<optimized out>, __X=...)\n```\n\n`Nocrypto` has CPU acceleration support (`SSE2`+`AES-NI`), but no run-time\nautodetection yet. You compiled the library with acceleration, but you are using\nit on a machine that does not support it.\n\n`pkg/pkg.ml build --accelerate false` force-disables non-portable code.\n\n`pkg/pkg.ml build --accelerate true` force-enables non-portable code.\n\nThe flag can also be set via the `NOCRYPTO_ACCELERATE` environment variable.\nWhen unset, it maches the capabilities of the build machine.\n\n[![Build Status](https://travis-ci.org/mirleft/ocaml-nocrypto.svg?branch=master)](https://travis-ci.org/mirleft/ocaml-nocrypto)\n"
 },
 {
  "repo": "RustCrypto/hashes",
  "language": "Rust",
  "readme_contents": "# RustCrypto: Hashes\n\n[![Project Chat][chat-image]][chat-link] [![dependency status][deps-image]][deps-link] ![Apache2/MIT licensed][license-image]\n\nCollection of [cryptographic hash functions][1] written in pure Rust.\n\nAll algorithms reside in the separate crates and implemented using traits from [`digest`] crate.\nAdditionally all crates do not require the standard library (i.e. `no_std` capable) and can be easily used for bare-metal or WebAssembly programming.\n\n## Supported Algorithms\n\n**Note:** For new applications, or where compatibility with other existing standards is not a primary concern, we strongly recommend to use either BLAKE2, SHA-2 or SHA-3.\n\n| Algorithm | Crate | Crates.io | Documentation | MSRV | [Security] |\n|-----------|-------|:---------:|:-------------:|:----:|:----------:|\n| [BLAKE2] | [`blake2`] | [![crates.io](https://img.shields.io/crates/v/blake2.svg)](https://crates.io/crates/blake2) | [![Documentation](https://docs.rs/blake2/badge.svg)](https://docs.rs/blake2) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [FSB] | [`fsb`] | [![crates.io](https://img.shields.io/crates/v/fsb.svg)](https://crates.io/crates/fsb) | [![Documentation](https://docs.rs/fsb/badge.svg)](https://docs.rs/fsb) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [GOST R 34.11-94][GOST94] | [`gost94`] | [![crates.io](https://img.shields.io/crates/v/gost94.svg)](https://crates.io/crates/gost94) | [![Documentation](https://docs.rs/gost94/badge.svg)](https://docs.rs/gost94) | ![MSRV 1.41][msrv-1.41] | :yellow_heart: |\n| [Gr\u00f8stl] (Groestl) | [`groestl`] | [![crates.io](https://img.shields.io/crates/v/groestl.svg)](https://crates.io/crates/groestl) | [![Documentation](https://docs.rs/groestl/badge.svg)](https://docs.rs/groestl) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [KangarooTwelve] | [`k12`] | [![crates.io](https://img.shields.io/crates/v/k12.svg)](https://crates.io/crates/k12) | [![Documentation](https://docs.rs/k12/badge.svg)](https://docs.rs/k12) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [MD2] | [`md2`] | [![crates.io](https://img.shields.io/crates/v/md2.svg)](https://crates.io/crates/md2) | [![Documentation](https://docs.rs/md2/badge.svg)](https://docs.rs/md2) | ![MSRV 1.41][msrv-1.41] | :broken_heart: |\n| [MD4] | [`md4`] | [![crates.io](https://img.shields.io/crates/v/md4.svg)](https://crates.io/crates/md4) | [![Documentation](https://docs.rs/md4/badge.svg)](https://docs.rs/md4) | ![MSRV 1.41][msrv-1.41] | :broken_heart: |\n| [MD5] | [`md5`] [:exclamation:] | [![crates.io](https://img.shields.io/crates/v/md-5.svg)](https://crates.io/crates/md-5) | [![Documentation](https://docs.rs/md-5/badge.svg)](https://docs.rs/md-5) | ![MSRV 1.41][msrv-1.41] | :broken_heart: |\n| [RIPEMD] | [`ripemd`] | [![crates.io](https://img.shields.io/crates/v/ripemd.svg)](https://crates.io/crates/ripemd) | [![Documentation](https://docs.rs/ripemd/badge.svg)](https://docs.rs/ripemd) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [SHA-1] | [`sha1`] | [![crates.io](https://img.shields.io/crates/v/sha1.svg)](https://crates.io/crates/sha1) | [![Documentation](https://docs.rs/sha1/badge.svg)](https://docs.rs/sha1) | ![MSRV 1.41][msrv-1.41] | :broken_heart: |\n| [SHA-2] | [`sha2`] | [![crates.io](https://img.shields.io/crates/v/sha2.svg)](https://crates.io/crates/sha2) | [![Documentation](https://docs.rs/sha2/badge.svg)](https://docs.rs/sha2) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [SHA-3] (Keccak) | [`sha3`] | [![crates.io](https://img.shields.io/crates/v/sha3.svg)](https://crates.io/crates/sha3) | [![Documentation](https://docs.rs/sha3/badge.svg)](https://docs.rs/sha3) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [SHABAL] | [`shabal`] | [![crates.io](https://img.shields.io/crates/v/shabal.svg)](https://crates.io/crates/shabal) | [![Documentation](https://docs.rs/shabal/badge.svg)](https://docs.rs/shabal) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [SM3] (OSCCA GM/T 0004-2012) | [`sm3`] | [![crates.io](https://img.shields.io/crates/v/sm3.svg)](https://crates.io/crates/sm3) | [![Documentation](https://docs.rs/sm3/badge.svg)](https://docs.rs/sm3) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [Streebog] (GOST R 34.11-2012) | [`streebog`] | [![crates.io](https://img.shields.io/crates/v/streebog.svg)](https://crates.io/crates/streebog) | [![Documentation](https://docs.rs/streebog/badge.svg)](https://docs.rs/streebog) | ![MSRV 1.41][msrv-1.41] | :yellow_heart: |\n| [Tiger] | [`tiger`] | [![crates.io](https://img.shields.io/crates/v/tiger.svg)](https://crates.io/crates/tiger) | [![Documentation](https://docs.rs/tiger/badge.svg)](https://docs.rs/tiger) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n| [Whirlpool] | [`whirlpool`] | [![crates.io](https://img.shields.io/crates/v/whirlpool.svg)](https://crates.io/crates/whirlpool) | [![Documentation](https://docs.rs/whirlpool/badge.svg)](https://docs.rs/whirlpool) | ![MSRV 1.41][msrv-1.41] | :green_heart: |\n\nNOTE: the [`blake3`] crate implements the `digest` traits used by the rest of the hashes in this repository, but is maintained by the BLAKE3 team.\n\n[Security]: https://en.wikipedia.org/wiki/Hash_function_security_summary\n[:exclamation:]: #crate-names\n\n### Security Level Legend\n\nThe following describes the security level ratings associated with each hash function (i.e. algorithms, not the specific implementation):\n\n| Heart          | Description |\n|:--------------:|-------------|\n| :green_heart:  | No known successful attacks |\n| :yellow_heart: | Theoretical break: security lower than claimed |\n| :broken_heart: | Attack demonstrated in practice: avoid if at all possible |\n\nSee the [Security] page on Wikipedia for more information.\n\n### Crate Names\n\nWhenever possible crates are published under the the same name as the crate folder.\nOwners of `md5` [declined](https://github.com/stainless-steel/md5/pull/) to participate in this project.\nThis crate does not implement the [`digest`] traits, so it is not interoperable with the RustCrypto ecosystem.\nThis is why we publish our MD5 implementation as `md-5` and mark it with the :exclamation: mark.\nNote that the library itself is named as `md5`, i.e. inside `use` statements you should use `md5`, not `md_5`.\n\nThe SHA-1 implementation was previously published as `sha-1`, but migrated to `sha1` since v0.10.0.\n`sha-1` will continue to recieve v0.10.x patch updates, but will be deprecated after `sha1` v0.11 release.\n\n### Minimum Supported Rust Version (MSRV) Policy\n\nMSRV bumps are considered breaking changes and will be performed only with minor version bump.\n\n## Usage\n\nLet us demonstrate how to use crates in this repository using SHA-2 as an example.\n\nFirst add [`sha2`](https://docs.rs/sha2) crate to your `Cargo.toml`:\n\n```toml\n[dependencies]\nsha2 = \"0.10\"\n```\n\nNote that all crates in this repository have an enabled by default `std` feature.\nSo if you plan to use the crate in `no_std` environments, don't forget to disable it:\n\n```toml\n[dependencies]\nsha2 = { version = \"0.10\", default-features = false }\n```\n\n[`sha2`](https://docs.rs/sha2) and the other hash implementation crates re-export the [`digest`] crate and the [`Digest`] trait for convenience, so you don't have to include it in your `Cargo.toml` it as an explicit dependency.\n\nNow you can write the following code:\n\n```rust\nuse sha2::{Sha256, Digest};\n\nlet mut hasher = Sha256::new();\nlet data = b\"Hello world!\";\nhasher.update(data);\n// `update` can be called repeatedly and is generic over `AsRef<[u8]>`\nhasher.update(\"String data\");\n// Note that calling `finalize()` consumes hasher\nlet hash = hasher.finalize();\nprintln!(\"Binary hash: {:?}\", hash);\n```\n\nIn this example `hash` has type `GenericArray<u8, U32>`, which is a generic alternative to `[u8; 32]` defined in the [`generic-array`] crate.\nIf you need to serialize hash value into string, you can use crates like [`base16ct`] and [`base64ct`]:\n```rust\nuse base64ct::{Base64, Encoding};\n\nlet base64_hash = Base64::encode_string(&hash);\nprintln!(\"Base64-encoded hash: {}\", base64_hash);\n\nlet hex_hash = base16ct::lower::encode_string(&hash);\nprintln!(\"Hex-encoded hash: {}\", hex_hash);\n```\n\nInstead of calling `update`, you also can use a chained approach:\n\n```rust\nuse sha2::{Sha256, Digest};\n\nlet hash = Sha256::new()\n    .chain_update(b\"Hello world!\")\n    .chain_update(\"String data\")\n    .finalize();\n```\n\nIf a complete message is available, then you can use the convenience [`Digest::digest`] method:\n\n```rust\nuse sha2::{Sha256, Digest};\n\nlet hash = Sha256::digest(b\"my message\");\n```\n\n### Hashing `Read`able Objects\n\nIf you want to hash data from a type which imlements the [`Read`] trait, you can rely on implementation of the [`Write`] trait (requires enabled-by-default `std` feature):\n\n```rust\nuse sha2::{Sha256, Digest};\nuse std::{fs, io};\n\nlet mut file = fs::File::open(&path)?;\nlet mut hasher = Sha256::new();\nlet n = io::copy(&mut file, &mut hasher)?;\nlet hash = hasher.finalize();\n```\n\n### Hash-based Message Authentication Code (HMAC)\n\nIf you want to calculate [Hash-based Message Authentication Code][HMAC] (HMAC), you can use the generic implementation from [`hmac`] crate, which is a part of the [RustCrypto/MACs] repository.\n\n### Generic Code\n\nYou can write generic code over the [`Digest`] trait (or other traits from the [`digest`] crate) which will work over different hash functions:\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\n\n// Toy example, do not use it in practice!\n// Instead use crates from: https://github.com/RustCrypto/password-hashing\nfn hash_password<D: Digest>(password: &str, salt: &str, output: &mut [u8]) {\n    let mut hasher = D::new();\n    hasher.update(password.as_bytes());\n    hasher.update(b\"$\");\n    hasher.update(salt.as_bytes());\n    output.copy_from_slice(&hasher.finalize())\n}\n\nlet mut buf1 = [0u8; 32];\nhash_password::<Sha256>(\"my_password\", \"abcd\", &mut buf1);\n\nlet mut buf2 = [0u8; 64];\nhash_password::<Sha512>(\"my_password\", \"abcd\", &mut buf2);\n```\n\nIf you want to use hash functions with trait objects, you can use the [`DynDigest`] trait:\n\n```rust\nuse sha2::{Sha256, Sha512, digest::DynDigest};\n\nfn dyn_hash(hasher: &mut dyn DynDigest, data: &[u8]) -> Box<[u8]> {\n    hasher.update(data);\n    hasher.finalize_reset()\n}\n\nlet mut sha256_hasher = Sha256::default();\nlet mut sha512_hasher = Sha512::default();\n\nlet hash1 = dyn_hash(&mut sha256_hasher, b\"foo\");\nlet hash2 = dyn_hash(&mut sha256_hasher, b\"bar\");\nlet hash3 = dyn_hash(&mut sha512_hasher, b\"foo\");\nlet hash4 = dyn_hash(&mut sha512_hasher, b\"bar\");\n```\n\n## License\n\nAll crates licensed under either of\n\n * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n * [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[deps-image]: https://deps.rs/repo/github/RustCrypto/hashes/status.svg\n[deps-link]: https://deps.rs/repo/github/RustCrypto/hashes\n[msrv-1.41]: https://img.shields.io/badge/rustc-1.41.0+-blue.svg\n\n[//]: # (crates)\n\n[`blake2`]: ./blake2\n[`fsb`]: ./fsb\n[`gost94`]: ./gost94\n[`groestl`]: ./groestl\n[`k12`]: ./k12\n[`md2`]: ./md2\n[`md4`]: ./md4\n[`md5`]: ./md5\n[`ripemd`]: ./ripemd\n[`sha1`]: ./sha1\n[`sha2`]: ./sha2\n[`sha3`]: ./sha3\n[`shabal`]: ./shabal\n[`sm3`]: ./sm3\n[`streebog`]: ./streebog\n[`tiger`]: ./tiger\n[`whirlpool`]: ./whirlpool\n\n[//]: # (footnotes)\n\n[1]: https://en.wikipedia.org/wiki/Cryptographic_hash_function\n[`blake3`]: https://github.com/BLAKE3-team/BLAKE3\n[`base16ct`]: https://docs.rs/base16ct\n[`base64ct`]: https://docs.rs/base64ct\n[`digest`]: https://docs.rs/digest\n[`Digest`]: https://docs.rs/digest/0.10.0/digest/trait.Digest.html\n[`Digest::digest`]: https://docs.rs/digest/0.10.0/digest/trait.Digest.html#tymethod.digest\n[`DynDigest`]: https://docs.rs/digest/0.10.0/digest/trait.DynDigest.html\n[`generic-array`]: https://docs.rs/generic-array\n[HMAC]: https://en.wikipedia.org/wiki/Hash-based_message_authentication_code\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n[`hmac`]: https://docs.rs/hmac\n[RustCrypto/MACs]: https://github.com/RustCrypto/MACs\n\n[//]: # (algorithms)\n\n[BLAKE2]: https://en.wikipedia.org/wiki/BLAKE_(hash_function)#BLAKE2\n[FSB]: https://en.wikipedia.org/wiki/Fast_syndrome-based_hash\n[GOST94]: https://en.wikipedia.org/wiki/GOST_(hash_function)\n[Gr\u00f8stl]: https://en.wikipedia.org/wiki/Gr\u00f8stl\n[KangarooTwelve]: https://keccak.team/kangarootwelve.html\n[MD2]: https://en.wikipedia.org/wiki/MD2_(cryptography)\n[MD4]: https://en.wikipedia.org/wiki/MD4\n[MD5]: https://en.wikipedia.org/wiki/MD5\n[RIPEMD]: https://en.wikipedia.org/wiki/RIPEMD\n[SHA-1]: https://en.wikipedia.org/wiki/SHA-1\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[SHA-3]: https://en.wikipedia.org/wiki/SHA-3\n[SHABAL]: https://www.cs.rit.edu/~ark/20090927/Round2Candidates/Shabal.pdf\n[SM3]: https://en.wikipedia.org/wiki/SM3_(hash_function)\n[Streebog]: https://en.wikipedia.org/wiki/Streebog\n[Whirlpool]: https://en.wikipedia.org/wiki/Whirlpool_(cryptography)\n[Tiger]: http://www.cs.technion.ac.il/~biham/Reports/Tiger/tiger/tiger.html\n"
 },
 {
  "repo": "rust-in-blockchain/awesome-blockchain-rust",
  "language": null,
  "readme_contents": "# Awesome Blockchain Rust\n\n*Useful components for building blockchains in Rust. include: cryptography, distributed, p2p, consensus, etc*\n\n- [Blockchains](#blockchains)\n- [Blockchain Frameworks](#blockchain-frameworks)\n- [Cross-Chain](#cross-chain)\n- [Virtual Machines](#virtual-machines)\n- [General-Purpose Consensus](#general-purpose-consensus)\n- [P2P Network Libraries](#p2p-network-libraries)\n- [Cryptography](#cryptography)\n- [Layer2](#layer2)\n- [Dapps](#dapps)\n- [Other](#other)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Blockchains\n- [Aleo](https://developer.aleo.org/aleo/getting_started/overview).\n  Leo is a rust flavoured zk language.\n- [Aleph Zero](https://alephzero.org/).\n  DAG, PoS, snark smart contracts (substrate based).\n- [Anoma.network](https://anoma.network/).\n  PoS blockchain with privacy.\n- [Bitcoin Cash](https://github.com/be-cash/bitcoin-cash).\n  A library for creating and parsing Bitcoin Cash trasactions.\n- [CITA](https://github.com/cryptape/cita).\n  A high performance blockchain kernel for enterprise users.\n- [CodeChain](https://github.com/CodeChain-io/codechain).\n  Programmable multi-asset chain.\n- [Concordium](https://concordium.com/).\n  Privacy centric (zk) PoS chain, yet with built in identities and rust smart contracts.\n- [Conflux](https://github.com/Conflux-Chain/conflux-rust).\n  The Rust implementation of Conflux protocol.\n- [Darwinia](https://github.com/darwinia-network/darwinia).\n  Relay chain of Darwinia Network, can connect to Polkadot as\n  parachain in Polkadot Model.\n- [Dusk.network](https://dusk.network/).\n  Privacy PoS using zk (plonk).\n- [Enigma](https://github.com/enigmampc/enigma-core) secures the\n  decentralized web.\n- [Elrond](https://elrond.com/).\n  Elrond (EGOLD( - scalable and usable blockchain, written is Rust and\n  has smart contracts in Rust.\n- [Exonum](https://github.com/exonum/exonum).\n  An extensible open-source framework for creating\n  private/permissioned blockchain applications.\n- [Forest](https://github.com/ChainSafe/forest).\n  An implementation of Filecoin written in Rust.\n- [Fuel](https://github.com/FuelLabs/fuel-core).\n  Rust full node implementation of the Fuel v2 protocol.\n- [Gear](https://github.com/gear-tech/gear).\n  Computational component of Polkadot network.\n- [Grin](https://github.com/mimblewimble/grin).\n  Minimal implementation of the MimbleWimble protocol.\n- [Holochain](https://github.com/holochain/holochain).\n  The core Holochain framework written in rust, a container, and\n  hdk-rust library for writing Zomes.\n- [Huobi Chain](https://github.com/HuobiGroup/huobi-chain).\n  The next generation high performance public chain for financial\n  infrastructure.\n- [Interledger](https://github.com/interledger-rs/interledger-rs).\n  An easy-to-use, high-performance Interledger implementation written\n  in Rust.\n- [Internet of People](https://github.com/Internet-of-People/iop-rs).\n  Decentralized software stack that provides the building blocks and\n  tools to support a decentralized society.\n- [Libra](https://github.com/libra/libra).\n  Global currency and financial infrastructure that empowers billions\n  of people.\n- [Lighthouse](https://github.com/sigp/lighthouse).\n  Fast and secure Ethereum 2.0 client.\n- [NEAR](https://github.com/nearprotocol/nearcore).\n  NEAR Protocol - scalable and usable blockchain.\n- [Nervos CKB](https://github.com/nervosnetwork/ckb).\n  Nervos CKB is a public permissionless blockchain, the common\n  knowledge layer of Nervos network.\n- [NYM](https://github.com/nymtech/nym).\n  Selective privacy via a mixnet preventing metadata analysis.\n- [Nomic](https://github.com/nomic-io/nomic).\n  Nomic is a high-performance Bitcoin sidechain which is part of the\n  Cosmos network.\n- [Mina Protocol](https://github.com/ChainSafe/mina-rs).\n  A rust implementation of the mina succinct blockchain.\n- [Mir Protocol](https://mirprotocol.org/).\n  A succinct blockchain powered by zero-knowledge proofs. (plonk based)\n- [OpenEthereum](https://github.com/openethereum/openethereum).\n  The Ethereum Rust client\n- [Parity Bitcoin](https://github.com/paritytech/parity-bitcoin).\n  The Parity Bitcoin client.\n- [Parity Ethereum](https://github.com/paritytech/parity-ethereum).\n  The fast, light, and robust EVM and WASM client.\n- [Parity Zcash](https://github.com/paritytech/parity-zcash).\n  Rust implementation of Zcash protocol.\n- [Polkadot](https://github.com/paritytech/polkadot).\n  Polkadot Node Implementation.\n- [Polymesh](https://github.com/PolymathNetwork/Polymesh).\n  The Polymesh blockchain (built on Substrate) is an identity orientated chain\n  for the issuance, lifecycle management and settlement of regulated securities.\n- [QAN](https://github.com/QANplatform/its_alive).\n  Post-quantum blockchain.\n- [Radix](https://github.com/radixdlt/radixdlt-scrypto).\n  Sharded smart contract DeFi platform.\n- [Setheum](https://github.com/Setheum-Labs/Setheum).\n  SETHEUM : \u201cSecure Evergreen Truthful Heterogeneous Economically Unbiased Market\u201d\n  is an Ethical DeFi-friendly Blockchain (built on Substrate) working on achieving\n  mass adoption, security, scalability, affordability, inclusivity and ethical DeFi Governance.\n- [Shasper](https://github.com/paritytech/shasper).\n  Parity Shasper beacon chain implementation using the Substrate\n  framework.\n- [Solana](https://github.com/solana-labs/solana).\n  Blockchain Rebuilt for Scale.\n- [Stacks 2.0](https://github.com/blockstack/stacks-blockchain).\n  Proof of Transfer blockchain from Blockstack.\n- [Tari](https://github.com/tari-project).\n  The Tari Digital Assets Protocol.\n- [Tendermint](https://github.com/informalsystems/tendermint-rs).\n  Tendermint is a high-performance blockchain consensus engine for\n  Byzantine fault tolerant applications.\n- [Witnet](https://github.com/witnet/witnet-rust).\n  Open source implementation of Witnet decentralized oracle network\n  protocol in Rust.\n- [xx-network](https://github.com/xx-labs/xxchain).\n  Post-quantum blockchain, mixnet privacy preventing metadata analysis. (Substrate rust+go)\n- [Zebra](https://github.com/ZcashFoundation/zebra).\n  An ongoing Rust implementation of a Zcash node.\n- [Zero-chain](https://github.com/LayerXcom/zero-chain).\n  A privacy-preserving blockchain on Substrate.\n\n## Blockchain Frameworks\n- [Substrate](https://github.com/paritytech/substrate).\n  The platform for blockchain innovators.\n- [slingshot](https://github.com/stellar/slingshot).\n  A new blockchain architecture under active development, with a\n  strong focus on scalability, privacy and safety.\n- [Tendermint ABCI](https://github.com/tendermint/rust-abci).\n  Tendermint ABCI server, written in the Rust programming language.\n- [Orga](https://github.com/nomic-io/orga).\n  A high-performance state machine engine designed for\n  Tendermint-based blockchain applications.\n\n## Cross-Chain\n- [Comit](https://comit.network/) is an open protocol facilitating\n  trustless cross-blockchain applications.\n- [IBC](https://github.com/informalsystems/ibc-rs).\n  Rust implementation of Cosmos' Interblockchain Communication Protocol\n  (IBC).\n\n## Virtual Machines\n- [CKB-VM](https://github.com/nervosnetwork/ckb-vm).\n  RISC-V virtual machine.\n- [CosmWasm](https://www.cosmwasm.com).\n  Multi-chain smart contract platform built for the Cosmos ecosystem.\n- [EVM Parity](https://github.com/paritytech/parity-ethereum/tree/master/evmbin).\n  Parity implementation of EVM.\n- [FuelVM](https://github.com/FuelLabs/fuel-vm)\n  FuelVM interpreter in Rust.\n- [Lunatic](https://github.com/lunatic-solutions/lunatic).\n  Erlang-inspired runtime for WebAssembly.\n- [Polygon Miden](https://github.com/maticnetwork/miden).\n  SNARK based VM.\n- [SVM](https://github.com/spacemeshos/svm)\n  Spacemesh Virtual Machine.\n- [Wasmi](https://github.com/paritytech/wasmi).\n  WebAssembly interpreter.\n- [Wasmer](https://wasmer.io/).\n  A convenient Rust wrapper over WebAssembly backends.\n- [Wasmtime](https://github.com/CraneStation/wasmtime).\n  Standalone JIT-style runtime for WebAssembly, using Cranelift.\n- [Zinc](https://github.com/matter-labs/zinc).\n  Zinc zk smart contract language.\n\n## General-Purpose Consensus\n- [Raft](https://github.com/pingcap/raft-rs).\n  Raft distributed consensus algorithm implemented in Rust.\n- [Honey Badger](https://github.com/poanetwork/hbbft).\n  An implementation of the paper \"Honey Badger of BFT Protocols\" in\n  Rust.\n- [Narwhal](https://github.com/MystenLabs/narwhal).\n  The consensus layer used by Sui.\n\n## P2P Network Libraries\n- [chamomile](https://github.com/placefortea/chamomile).\n  P2P library. Support build robust stable connection on\n  p2p/distributed network.\n- [crust](https://github.com/maidsafe/crust).\n  Reliable P2P network connections in Rust with NAT traversal. One of\n  the most needed libraries for any server-less / decentralised\n  projects.\n- [rust-libp2p](https://github.com/libp2p/rust-libp2p).\n  The Rust Implementation of the libp2p networking stack.\n- [Tentacle](https://github.com/driftluo/tentacle).\n  A multiplexed p2p network framework that supports custom protocols\n- [P2P NAT-Traversal](https://github.com/ustulation/p2p).\n  NAT Traversal techniques for p2p communication.\n- [qp2p](https://github.com/maidsafe/qp2p).\n  Peer-to-peer communications library for Rust based on QUIC protocol.\n- [sn_routing](https://github.com/maidsafe/sn_routing).\n  Routing - specialised storage DHT.\n\n## Cryptography\n- [Awesome Cryptography Rust](https://github.com/rust-cc/awesome-cryptography-rust).\n- [Dalek Cryptography](https://github.com/dalek-cryptography).\n- [Za!](https://github.com/adria0/za).\n  An experimental rust zksnarks compiler with embeeded bellman-bn128\n  prover.\n- [OpenZKP](https://github.com/0xProject/OpenZKP).\n  Pure Rust implementations of Zero-Knowledge Proof systems.\n- [Microsoft Nova](https://github.com/microsoft/Nova).\n  Rust recursive snark without trusted setup.\n- [Arkworks](https://github.com/arkworks-rs).\n  An ecosystem for developing and programming with zkSNARKs\n\n## Layer2\n- [Arbitrum's arb-os](https://github.com/OffchainLabs/arb-os)\n  ArbOS is the \"operating system\" that runs an eth Layer 2 on an Arbitrum chain,\n- [Noir language](https://github.com/noir-lang/noir).\n  Noir is a Domain Specific Language for SNARK proving systems. (Aztec eth L2)\n- [Penumbra](https://penumbra.zone/).\n  PoS network providing privacy to the Cosmos ecosystem.\n- [Rust-Lightning](https://github.com/rust-bitcoin/rust-lightning)\n  is a Bitcoin Lightning library written in Rust.\n  The main crate, lightning, does not handle networking,\n  persistence, or any other I/O. Thus, it is runtime-agnostic,\n  but users must implement basic networking logic,\n  chain interactions, and disk storage.\n- [zkSync](https://github.com/matter-labs/zksync).\n  Matter Labs' scaling eth L2 engine secured by zero-knowledge proofs.\n\n## Dapps\n- [Serum-dex](https://github.com/project-serum/serum-dex).\n  A decentralized exchange built on Solana.\n- [SewUp](https://github.com/second-state/SewUp).\n  A library to help you build your Ethereum webassembly contract with\n  Rust and just like develop in a common backend.\n- [Sienna Network](https://github.com/SiennaNetwork/SiennaNetwork).\n  A privacy-first and cross-chain decentralized finance platform where\n  you can privately swap, lend and convert your tokens into their\n  private equivalent.\n\n## Other\n- [abscissa](https://github.com/iqlusioninc/abscissa).\n  Micro-framework for CLI tools with strong focus on security.\n- [tesseracts](https://github.com/adria0/tesseracts).\n  A small block explorer for geth PoAs written in rust.\n- [merk](https://github.com/nomic-io/merk).\n  High performance Merkle key/value store written in Rust, based on\n  RocksDB.\n\n\n## Contribute\nContributions are most welcome.\n\nGitHub: [Awesome Blockchain\nRust](https://github.com/rust-in-blockchain/awesome-blockchain-rust)\n\n\n## License\n[![Creative Commons\nLicense](http://i.creativecommons.org/l/by/4.0/88x31.png)](http://creativecommons.org/licenses/by/4.0/)\n\nThis work is licensed under a [Creative Commons Attribution 4.0\nInternational License](http://creativecommons.org/licenses/by/4.0/).\n"
 },
 {
  "repo": "funcool/buddy-core",
  "language": "Clojure",
  "readme_contents": "# buddy-core\n\n[![Travis Badge](https://img.shields.io/travis/funcool/buddy-core.svg?style=flat)](https://travis-ci.org/funcool/buddy-core \"Travis Badge\")\n\n*buddy-core* module is dedicated to provide a Clojure friendly Cryptographic Api.\n\n[![Clojars Project](http://clojars.org/buddy/buddy-core/latest-version.svg)](http://clojars.org/buddy/buddy-core)\n\nSee the [documentation](https://funcool.github.io/buddy-core/latest/) or\n[api reference](https://funcool.github.io/buddy-core/latest/api/) for more detailed\ninformation.\n"
 },
 {
  "repo": "alanvivona/pwnshop",
  "language": "Python",
  "readme_contents": "# Pwnshop\n> Reverse Engineering, Exploitation & Crypto.\n\nCheck out my [blog](http://medium.syscall59.com), follow me on [Twitter](https://twitter.com/syscall59) and [Youtube](https://www.youtube.com/channel/UC2lZwxYDEAgQod3D4JqxLfg)!  \n### Support the project :  \n<a href=\"https://www.buymeacoffee.com/syscall59\" target=\"_blank\"><img src=\"https://bmc-cdn.nyc3.digitaloceanspaces.com/BMC-button-images/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important;width: auto !important;\" ></a>\n\n## Contents:\n- Reverse engineering a simple crackme called \u201cJust see\u201d: [writeup](https://medium.com/@0x0FFB347/crackme-just-see-c6dda1edb9fb)\n- Reverse engineering a level 1 crackme \"Easy_firstCrackme-by-D4RK_FL0W\": [writeup](https://medium.com/syscall59/reverse-engineering-easy-firstcrackme-by-d4rk-fl0w-73dd4412bca5?source=your_stories_page---------------------------)  \n- Utility - Object/Executable file to shellcode converter script: [code](https://github.com/alanvivona/pwnshop/blob/master/utils/obj2shellcode)    \n- Utility - Assembly and link script : [code](https://github.com/alanvivona/pwnshop/blob/master/utils/asm-and-link)    \n- Utility - Shellcode testing skeleton generator : [code](https://github.com/alanvivona/pwnshop/blob/master/utils/gen-shellcode-test)    \n- Utility - GDB python script template : [code](https://github.com/alanvivona/pwnshop/blob/master/utils/gdb-script-template.py)  \n- Exit syscall asm: [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x00-calling-exit-syscall/0x00-exitSyscall.asm)\n- Write syscall \"Hello world!\": [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x01-calling-write-syscall/0x01-calling-write-syscall.asm)\n- Execve shellcode (dynamic addressing) [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x02-execve-dynamic-addressing/0x02-dynamic-addressing.asm)\n- Ret2libc exploit for protostar stack6 challenge : [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x03-system-for-ret2libc/pwn.py)\n- Exploit for protostar stack7 challenge (Smallest ROP chain): [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x04-simplest-rop-ever/roppwn.py)\n- Exploit for VUPlayer 2.49 (no DEP) local buffer overflow: [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x07-windows-EDBID-40018-localbof/exploit.js), [writeup](https://medium.com/@0x0FFB347/windows-expliot-dev-101-e5311ac284a)\n- Execve shellcode (stack method) : [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x0A-execve-stack/execvestack.nasm)  \n- Execve shellcode using RIP relative addressing [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x0B-execve-rip-relative-addressing/execve-rip-relative.nasm)  \n- Password Protected Bind Shell (Linux/x64) [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x0D-SLAE64-1-tcp-bind-shell-auth/tcp-bind-shell-auth-smaller.nasm), [writeup](https://medium.com/bugbountywriteup/writing-a-password-protected-bind-shell-linux-x64-e052d2f65ff2)  \n- Password Protected Reverse Shell (Linux/x64) [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x0E-SLAE64-2-reverse-tcp-auth/reverse-tcp-with-auth.nasm), [writeup](https://medium.com/@0x0FFB347/writing-a-password-protected-reverse-shell-linux-x64-5f4d3a28d91a), [Featured in the 1st number of Paged-Out](https://pagedout.institute/download/PagedOut_001_beta1.pdf)  \n- XANAX - A custom shellcode encoder written in assembly :  \n    - [encoder code](https://github.com/alanvivona/pwnshop/blob/master/src/0x10-SLAE64-4-custom-encoder/xanax-encoder.nasm)  \n    - [encoder on exploit-db](https://www.exploit-db.com/shellcodes/46679)  \n    - [encoder on packetstormsecurity](https://packetstormsecurity.com/files/152456/Linux-x64-XANAX-Encoder-Shellcode.html)\n    - [decoder code](https://github.com/alanvivona/pwnshop/blob/master/src/0x10-SLAE64-4-custom-encoder/xanax-decoder.nasm)  \n    - [decoder on exploit-db](https://www.exploit-db.com/shellcodes/46680)  \n    - [decoder on packetstormsecurity](https://packetstormsecurity.com/files/152455/Linux-x64-XANAX-Decoder-Shellcode.html)\n    - [writeup](https://medium.com/@0x0FFB347/writing-a-custom-shellcode-encoder-31816e767611)  \n- A more generic (and somewhat extensible) encoder skeleton written in Go [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x10-SLAE64-4-custom-encoder/encoder.go)   \n- Gocryper : A custom AES shellcode crypter written in Go [code](https://github.com/alanvivona/pwnshop/tree/master/src/0x14-SLAE64-crypter), [writeup](https://medium.com/syscall59/a-trinity-of-shellcode-aes-go-f6cec854f992)  \n- A basic Polimorphic Engine written in Go [code](https://github.com/alanvivona/pwnshop/tree/master/src/0x12-SLAE-shellstorm-polymorph), [writeup](https://medium.com/me/stats/post/73ec56a2353e)    \n- Egg-hunter shellcode (Linux/x64) [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x0F-SLAE64-3-egghunter/egghunter-V1.nasm), [writeup](https://medium.com/syscall59/on-eggs-and-egg-hunters-linux-x64-305b947f792e)  \n- Password Protected Reverse Shell (Linux/ARMv6)  \n    - [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x15-ARM-shellcode/ARM-reverse-shell-with-auth.s)\n    - [writeup](https://medium.com/syscall59/shellcode-for-iot-a-password-protected-reverse-shell-linux-arm-a18fcda4853b)\n    - [payload on packetstormsecurity](https://packetstormsecurity.com/files/152602/Linux-ARM-Password-Protected-Reverse-TCP-Shell-Shellcode.html)\n    - [payload on exploit-db](https://www.exploit-db.com/shellcodes/46736)  \n- MalwareTech's String Challenges crackmes: [writeup](https://medium.com/syscall59/solving-malwaretech-string-challenges-with-some-radare2-magic-98ebd8ff0b88)\n- MalwareTech's Shellcode Challenges crackmes: [writeup](http://medium.syscall59.com/solving-malwaretech-shellcode-challenges-with-some-radare2-magic-b91c85babe4b)  \n- DEFCON Qualys 2019 : Speedrun-001 exploit (Stack-based bof + ROP): [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x17-defcon-qualys-2019/speedrun-001-exploit.py)\n- Solution for the crackme \"Crackme2-be-D4RK_FL0W\" [writeup](https://medium.com/syscall59/reverse-engineering-crackme2-be-d4rk-fl0w-walkthrough-ea50b851b5f0)  \n- Solution for the crackme \"Crack3-by-D4RK_FL0W\" :\n    - Option 1 - Using r2 macros to extract the PIN: [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x19-crackme-darkflow-3/r2.commands)  \n    - Option 2 - Using GEF and unicorn-engine emulation to bruteforce the PIN: [code](https://github.com/alanvivona/pwnshop/blob/master/src/0x19-crackme-darkflow-3/emu.py)\n    - Blog post exploring both options: [writeup](https://medium.com/syscall59/re-using-macros-emulation-voodo-to-solve-a-crackme-a90566e9c7c9)  \n- Utility - r2frida Cheatsheet: [writeup](https://github.com/alanvivona/pwnshop/blob/master/utils/r2frida-cheatsheet.md)  \n- Solution for the crackme \"alien_bin\" [writeup](https://medium.com/syscall59/reverse-engineering-cracking-alien-technology-7acddcb561b)  \n- Automated solutions for the crackme \"mexican\": [writeup](https://medium.com/syscall59/solved-solving-mexican-crackme-82d71a28e189), [script solution 1: carving](https://github.com/alanvivona/pwnshop/blob/master/src/0x1A/s1-static-extract-from-code.py), [script solution 2: patching](https://github.com/alanvivona/pwnshop/blob/master/src/0x1A/s2-binary-patching.py)   \n- Writeup for the crackme \"crackme_by_coulomb\" (.net): [writeup](https://medium.com/syscall59/reverse-engineering-solving-my-first-net-crackme-dacf2e59ad3b)   \n- Writeup for the crackme \"shadows_registerme\" (.net): [writeup](https://medium.com/syscall59/reverse-engineering-and-cracking-a-net-binary-using-dnspy-4b88c692a6ff)   \n- Writeup for the crackme \"removemytrial_by_coulomb\" (.net): [writeup](https://medium.com/bugbountywriteup/reverse-engineering-beating-a-trial-on-a-net-crackme-d4ab6604f10b)   \n- Writeup for the crackme \"Get The Password\": [writeup](https://medium.com/bugbountywriteup/writing-a-keygen-using-python-itertools-1944cbb4d07c), [code (keygen)](https://github.com/alanvivona/pwnshop/blob/master/src/0x1C-HN1-Crackme1-GetThePassword/solve.py)  \n\n- Cyptopals Solutions: Set 1, Challenge 1. \"Convert hex to base64\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x1D-cryptopals-se1-ch1/)  \n- Cyptopals Solutions: Set 1, Challenge 2. \"Fixed XOR\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x1E-cryptopals-se1-ch2/)  \n- Cyptopals Solutions: Set 1, Challenge 3. \"Single-byte XOR cipher\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x1F-cryptopals-se1-ch3/)  \n- Cyptopals Solutions: Set 1, Challenge 4. \"Detect single-character XOR\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x20-cryptopals-se1-ch4/)  \n- Cyptopals Solutions: Set 1, Challenge 5. \"Implement repeating-key XOR\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x21-cryptopals-se1-ch5/)  \n- Cyptopals Solutions: Set 1, Challenge 6. \"Break repeating-key XOR\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x22-cryptopals-se1-ch6/)  \n- Cyptopals Solutions: Set 1, Challenge 7. \"AES in ECB mode\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x23-cryptopals-se1-ch7/)  \n- Cyptopals Solutions: Set 1, Challenge 8. \"Detect AES in ECB mode\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x24-cryptopals-se1-ch8/)  \n- Cyptopals Solutions: Set 2, Challenge 9. \"Implement PKCS#7 padding\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x25-cryptopals-se2-ch9/)  \n- Cyptopals Solutions: Set 2, Challenge 15. \"PKCS#7 padding validation\":\n[code](https://github.com/alanvivona/pwnshop/blob/master/src/0x26-cryptopals-se2-ch15/)  \n\n## Useful links:\n\n### Tools:\nA non-exhaustive list of tools  \n- [radare2](https://rada.re) (+[Cutter](https://github.com/radareorg/cutter) +[r2frida](https://github.com/nowsecure/r2frida) +[r2pipe](https://github.com/radare/radare2-r2pipe) +[r2ghidra-dec](https://github.com/radareorg/r2ghidra-dec))\n- [Ghidra](https://ghidra-sre.org/)\n- [x64dbg](https://x64dbg.com)\n- [Frida](https://www.frida.re/)\n- [gdb](https://www.gnu.org/software/gdb/) (+[gdb-dashboard](https://github.com/cyrus-and/gdb-dashboard) +[GEF](https://github.com/hugsy/gef))\n- [Valgrind](http://www.valgrind.org/)\n- [Pwntools](http://pwntools.com)\n- [Wireshark](https://www.wireshark.org/)\n- [Binwalk](https://github.com/ReFirmLabs/binwalk)\n- strace\n- ltrace\n- hexdump\n- xxd\n- [rappel](https://github.com/yrp604/rappel)\n- nasm\n- gas\n- [Unicorn Engine](https://www.unicorn-engine.org/)\n- [IDA](https://www.hex-rays.com/products/ida/index.shtml)  \n- hexedit  \n- bless  \n- Metasploit (https://www.metasploit.com/)  \n\n\n\n### Resources:\nThere's a **LOT** of stuff out there. These are just the most useful things I've found so far.    \n- :computer: [Live overflow](https://liveoverflow.com/)\n- :book: [The shellcoder's handbook](https://amzn.to/2LXi0KH)\n- :computer: [Exploit education](https://exploit.education/)\n- :computer: [Gynvael coldwind](https://gynvael.coldwind.pl/)\n- :computer: [Azeria labs](https://azeria-labs.com/)\n- :computer: [Phrack](http://phrack.org/)\n- :computer: [Corelan](https://www.corelan.be/index.php/articles/)\n- :computer: [Fuzzysecurity](https://www.fuzzysecurity.com/index.html)\n- :computer: [Packetstormsecurity](https://packetstormsecurity.com/)\n- :computer: [Exploitdb](https://www.exploit-db.com/)\n- :book: [Beginners RE](https://beginners.re/)\n- :book: [Practical reverse engineering](https://amzn.to/35lKNQy)\n- :book: [Programming linux anti-reversing techniques](https://leanpub.com/anti-reverse-engineering-linux)\n- :book: [Attacking network protocols](https://amzn.to/35jFO2S)\n- :book: [Penetration testing: A Hands-On introduction to hacking](https://amzn.to/2IzzlHy)\n- :computer: [Malware Unicorn](https://malwareunicorn.org/#/workshops)  \n- :book: [Radare2 Book](https://radare.gitbooks.io/radare2book/)  \n- :computer: [Paged-Out!](https://pagedout.institute)  \n- :book: [PoC||GTFO I](https://amzn.to/2MDgz3l)  \n- :book: [PoC||GTFO II](https://amzn.to/2AS4uBP)  \n- :book: [The IDA Pro Book](https://amzn.to/2LXnKUE)  \n- :book: [Hacker Disassembling Uncovered](https://amzn.to/2nLew4I)  \n- :computer: [Reverse Engineering Stackexchange](https://reverseengineering.stackexchange.com/)  \n- :computer: [Cryptopals Challenges](https://cryptopals.com/)  \n- :book: [Cryptool Book](https://www.cryptool.org/images/ctp/documents/CT-Book-en.pdf)  \n- :book: [Crypto 101](https://github.com/crypto101/crypto101.github.io/raw/master/Crypto101.pdf)  \n- :book: [Cracking Codes With Python](http://inventwithpython.com/cracking/)  \n"
 },
 {
  "repo": "l4wio/CTF-challenges-by-me",
  "language": "CSS",
  "readme_contents": "# CTF-challenges-by-me\n\nThese are CTF-style challenges I've made. Hope you enjoyed \u270c\n\n# Highlight\n\nTips: Like reading book, don't read the last pages first. Let's enjoy them for a day at least before checking writeup/sol. I've put a lot of my work in each one.\n\nI'm going to describe my highlight challenges, which I like mostly. Also point out the interesting points of them.\n\n\n\n## Web\nName | Language | Summary | Rating | Level | Describe yet ?\n--- | --- | --- | --- | --- | --- |\n[prisonbreakseason2](0x3004/150-prisonbreakseason2) | Python | Python Jail | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[XYZBANK](0x3004/200-XYZBANK) | PHP | MySQL type casting | \u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[XYZTemplate](0x3004/250-XYZTemplate) | PHP/Javascript | Javascript/XSS | \u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 |\n[cryptowww](0x3004/cryptowww) | PHP | Hash extension / urldecode trick, HTTP Parameter Pollution | \u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[curl_story_part_1](challs.manhluat.org/curl_story_part_1) | PHP | SSRF /w CRLF Injection (it was 0day)  | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 | \u2714\ufe0f \n[luckygame](0ctf_final-2017/luckygame) | PHP | MySQLi /w session variable + php type juggling | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[simplehttp](svattt-2016/quals/challenges/web/simplehttp) | Ruby | Ruby RCE /w `WEBrick::Log.new` | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[tower4](svattt-2016/final/challenges/Daemons/tower4) | Python | Format injection | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[lixi](lixi_2018) | PHP | PHP syntax trick | \u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[LoginMe](0ctf_quals-2018/LoginMe) | NodeJS | RegExp injection, MongoDB | \u2b50\u2b50\u2b50 | \ud83d\udc80 | \u2714\ufe0f\n[h4x0rs.club](0ctf_quals-2018/h4x0rs.club) | PHP/JS | CSP `strict-dynamic`, XSS, iframe in the middle, postMessage to `top` | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[h4x0rs.space](0ctf_quals-2018/h4x0rs.space) | PHP/JS | CSP, Persistent XSS, AppCache, ServiceWorker | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[h4x0rs.date](0ctf_final-2018/0ctf_tctf_2018_slides.pdf) | PHP/JS | CSP, cache, `<meta>` Referrer override | \u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n\n\n## Pwnable \nName | Summary | Rating | Level | Describe yet ?\n--- | --- | --- | --- | --- |\n[anotherarena](meepwn-2017/anotherarena) | Heap on another `main_arena` (threads) | \u2b50\u2b50\u2b50 | \ud83d\udc80 | \u2714\ufe0f\n[c0ffee](meepwn-2017/c0ffee) | Race condition, with 1-byte overwrite, nearly impossible to exploit | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80\ud83d\udc80 |\n[pokedex](svattt-2015/final/pokedex) | Uninitialized memory -> Heap overflow | \u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[rapgenius](svattt-2015/final/rapgenius) | Uninitialized memory -> Use-After-Free + `_IO_FILE` abusing (`_IO_read_*` && `_IO_write_*`) | \u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[castle](svattt-2016/final/challenges/Daemons/castle) | Combine many of bugs: uninitliazed memory + stack overflow + heap overflow to defeat stack cookie eventually  | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80\ud83d\udc80 | \n[House-of-Cards](0ctf_quals-2018/House-of-Cards) | Old school pwnable, overwriting `ENV` | \u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n[h4x0rs.club pt3](0ctf_final-2018/h4x0rs.club%20pt3) | Old school pwnable, Fake MySQL server, MySQL LOCAL INFILE | \u2b50\u2b50\u2b50\u2b50\u2b50 | \ud83d\udc80\ud83d\udc80\ud83d\udc80 | \u2714\ufe0f\n\n### Footer\n[Final round SVATTT 2016 Introduction page](https://l4wio.github.io/CTF-challenges-by-me/final.svattt.org/)\n\nTwitter: @l4wio\n\n...D\u00e0nh c\u1ea3 tu\u1ed5i thanh xu\u00e2n \u0111\u1ec3 suy ngh\u0129 \u0111\u1ec1 CTF.\n\nUpdating...\n"
 },
 {
  "repo": "zcash-hackworks/sapling-crypto",
  "language": "Rust",
  "readme_contents": "# sapling-crypto\n\nThis repository contains a (work-in-progress) implementation of Zcash's \"Sapling\" cryptography.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n"
 },
 {
  "repo": "pFarb/awesome-crypto-papers",
  "language": null,
  "readme_contents": "# Awesome Crypto Papers  [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\nA curated list of [cryptography](https://en.wikipedia.org/wiki/Cryptography) papers, articles, tutorials and howtos for non-cryptographers.\n\n<p align=\"center\">\n  <img src=\"https://github.com/pFarb/awesome-crypto-papers/blob/master/awesome-felix-big.jpg\" style=\"width: 50%\">\n</p>\n\n### Notes \n\nThe goal of this list is to provide educational reading material for different levels of cryptographic knowledge. I started it because my day job onboarding engineers at [Cossack Labs](https://www.cossacklabs.com) includes educating them in cryptographic matters and giving advise what to read on specific topics, and that involves finding the same materials repeatedly. Hopefully, it will be useful for someone else as well. \n\nIt is aimed at people who are using cryptography in higher-level security systems to implement database encryption, secure sharing, end-to-end encryption in various schemes, and should understand how it works, how it fails and how it is attacked. It is not a list of notable / important / historically important papers (although many of them are here). It is not aimed at academics (who have better grasp of what they need anyway), nor it is aimed for systematic study of wanna-be cryptographers (who better follow structured approach under professional guidance). \n\nIt will be extended gradually as I find something of \"must-have\" value. Pull requests are very welcome.\n\n## Contents\n\n* [Introducing people to data security and cryptography](#introducing-people-to-data-security-and-cryptography).\n  * [Simple: cryptography for non-engineers](#simple-cryptography-for-non-engineers).\n  * [Brief engineer-oriented introductions](#brief-engineer-oriented-introductions).\n* [Specific topics](#specific-topcs).\n  * [Hashing](#hashing) - important bits on modern and classic hashes.\n  * [Secret key cryptography](#secret-key-cryptography) - all things symmetric encryption.\n  * [Cryptanalysis](#cryptanalysis) - attacking cryptosystems.\n  * [Public key cryptography: General and DLP](#public-key-cryptography-general-and-dlp) - RSA, DH and other classic techniques.\n  * [Public key cryptography: Elliptic-curve crypto](#public-key-cryptography-elliptic-curve-crypto) - ECC, with focus on pratcial cryptosystems.\n  * [Zero Knowledge Proofs](#zero-knowledge-proofs) - Proofs of knowledge and other non-revealing cryptosystems.\n  * [Math](#math) - useful math materials in cryptographic context.\n  * [Post-quantum cryptography](#post-quantum-cryptography) - Cryptography in post-quantum period.\n* [Books](#books).\n* [Lectures and educational courses](#lectures-and-educational-courses).\n* [Online crypto challenges](#online-crypto-challenges).\n\n## The list\n\n### Introducing people to data security and cryptography\n\n#### Simple: cryptography for non-engineers\n\n* [Nuts and Bolts of Encryption: A Primer for Policymakers](https://www.cs.princeton.edu/~felten/encryption_primer.pdf).\n* [Keys under Doormats](https://dspace.mit.edu/bitstream/handle/1721.1/97690/MIT-CSAIL-TR-2015-026.pdf) - Or why cryptography shouldn't be backdoored, by a all-star committee of crypto researches from around the world. \n\n#### Brief introductions\n\n* [An Overview of Cryptography](http://www.garykessler.net/library/crypto.html) - By Gary C. Kessler.\n* [Using Encryption for Authentication in Large Networks](http://inst.eecs.berkeley.edu/~cs268/sp02/cached_papers/needham.pdf) - By Needham, Schroeder: this is were crypto-based auth starts.\n* [Communication Theory of Secrecy Systems](http://netlab.cs.ucla.edu/wiki/files/shannon1949.pdf) - Fundamental cryptography paper by Claude Shannon.\n\n#### General cryptographic interest\n\n* [Another Look at \u201cProvable Security\u201d](https://eprint.iacr.org/2004/152.pdf) - Inquiries into formalism and naive intuition behind security proofs, by Neal Koblitz et al.\n* [The security impact of a new cryptographic library](https://cryptojedi.org/papers/coolnacl-20120725.pdf) - Introductory paper on NaCl, discussing important aspects of implementing cryptography and using it as a larger building block in security systems, by Daniel J. Bernstein, Tanja Lange, Peter Schwabe.\n\n<hr>\n\n### Specific topics\n\n#### Hashing\n\n* [FIPS 198-1: HMACs](http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.198-1.pdf) - The Keyed-Hash Message Authentication Code FIPS document.\n* [FIPS 202: SHA3](http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf) - SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions.\n* [Birthday problem](https://en.wikipedia.org/wiki/Birthday_problem) - The best simple explanation of math behind [birthday attack](https://en.wikipedia.org/wiki/Birthday_attack).\n* [On the Security of HMAC and NMAC Based on HAVAL, MD4, MD5, SHA-0 and SHA-1](https://eprint.iacr.org/2006/187.pdf) - Security analysis of different legacy HMAC schemes by Jongsung Kim et al. \n* [On the Security of Randomized CBC-MAC Beyond the Birthday Paradox Limit ](https://eprint.iacr.org/2001/074) - Security of randomized CBC-MACs and a new construction that resists birthday paradox attacks and provably reaches full security, by E. Jaulmes et al.\n\n#### Secret key cryptography\n\n* [FIPS 197](http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf) - AES FIPS document.\n* [List of proposed operation modes of AES](http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html) - Maintained by NIST.\n* [Recomendation for Block Cipher modes of operation: Methods and Techniques](http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf).\n* [Stick figure guide to AES](http://www.moserware.com/2009/09/stick-figure-guide-to-advanced.html) - If stuff above was a bit hard or you're looking for a good laugh.\n* [Cache timing attacks on AES](http://cr.yp.to/antiforgery/cachetiming-20050414.pdf) - Example of designing great practical attack on cipher implementation, by Daniel J. Bernstein.\n* [Cache Attacks and Countermeasures: the Case of AES](http://cs.tau.ac.il/~tromer/papers/cache.pdf) - Side channel attacks on AES, another view, by Dag Arne Osvik, Adi Shamir and Eran Tromer.\n* [Salsa20 family of stream ciphers](https://cr.yp.to/snuffle/salsafamily-20071225.pdf) - Broad explanation of Salsa20 security cipher by Daniel J. Bernstein.\n* [New Features of Latin Dances: Analysis of Salsa, ChaCha, and Rumba](https://eprint.iacr.org/2007/472.pdf) - Analysis of Salsa20 family of ciphers, by Jean-Philippe Aumasson et al.\n* [ChaCha20-Poly1305 Cipher Suites for Transport Layer Security (TLS)](https://tools.ietf.org/html/draft-ietf-tls-chacha20-poly1305-04) - IETF Draft of ciphersuite family, by Adam Langley et al.\n* [AES submission document on Rijndael](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf#page=1) - Original Rijndael proposal by Joan Daemen and Vincent Rijmen.\n* [Ongoing Research Areas in Symmetric Cryptography](http://www.ecrypt.eu.org/ecrypt1/documents/D.STVL.3-2.5.pdf) - Overview of ongoing research in secret key crypto and hashes by ECRYPT Network of Excellence in Cryptology.\n* [The Galois/Counter Mode of Operation (GCM)](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.694.695&rep=rep1&type=pdf) - Original paper introducing GCM, by by David A. McGrew and John Viega.\n* [The Security and Performance of the Galois/Counter Mode (GCM) of Operation](https://eprint.iacr.org/2004/193.pdf) - Design, analysis and security of GCM, and, more specifically, AES GCM mode, by David A. McGrew and John Viega.\n* [GCM Security Bounds Reconsidered](https://www.iacr.org/archive/fse2015/85400168/85400168.pdf) - An analysis and algorithm for nonce generation for AES GCM with higher counter-collision probability, by Yuichi Niwa, Keisuke Ohashi, Kazuhiko Minematsu, Tetsu Iwata.\n* [Proxy-Mediated Searchable Encryption in SQL Databases Using Blind Indexes](https://eprint.iacr.org/2019/806.pdf) - An overview of existing searchable encryption schemes, and analysis of scheme built on AES-GCM, blind index and bloom filter by Eugene Pilyankevich, Dmytro Kornieiev, Artem Storozhuk.\n\n#### Cryptanalysis\n\n* [Differential Cryptanalysis of Salsa20/8](http://www.ecrypt.eu.org/stream/papersdir/2007/010.pdf) - A great example of stream cipher cryptanalysis, by Yukiyasu Tsunoo et al.\n* [Slide Attacks on a Class of Hash Functions](https://eprint.iacr.org/2008/263) - Applying slide attacks (typical cryptanalysis technique for block ciphers) to hash functions, M. Gorski et al.\n* [Self-Study Course in Block Cipher Cryptanalysis](https://www.schneier.com/academic/archives/2000/01/self-study_course_in.html) - Attempt to organize the existing literature of block-cipher cryptanalysis in a way that students can use to learn cryptanalytic techniques and ways to break new algorithms, by Bruce Schneier.\n* [Statistical Cryptanalysis of Block Ciphers](http://crypto.junod.info/phdthesis.pdf) - By Pascal Junod.\n* [Cryptanalysis of block ciphers and protocols](http://www.cs.technion.ac.il/users/wwwb/cgi-bin/tr-info.cgi/2006/PHD/PHD-2006-04) - By Elad Pinhas Barkan.\n* [Too much crypto](https://eprint.iacr.org/2019/1492.pdf) - Analysis of number of rounds for symmetric cryptography primitives, and suggestions to do fewer rounds, by Jean-Philippe Aumasson.\n* [How to Break MD5 and Other Hash Functions](https://iacr.org/archive/eurocrypt2005/34940019/34940019.pdf) - A 2005 paper about modular differential collision attack on MD5, MD4 and other hash functions, by Xiaoyun Wang and Hongbo Yu.\n* [New attacks on Keccak-224 and Keccak-256](https://www.iacr.org/archive/fse2012/75490447/75490447.pdf) - A 2012 paper about using the combination of differential and algebraic techniques for collision attacks on SHA-3, by Itai Dinur, Orr Dunkelman, Adi Shamir.\n* [A Single-Key Attack on the Full GOST Block Cipher](https://www.iacr.org/archive/fse2011/67330297/67330297.pdf) - An attack (\"Reflection-Meet-inthe-Middle Attack\") on GOST block cipher that allows to recover key with 2^225 computations and 2^32 known plaintexts, by Takanori Isobe.\n* [Intro to Linear & Differential Cryptanalysis](http://www.cs.bc.edu/~straubin/crypto2017/heys.pdf) - A beginner-friendly paper explaining and demonstrating techniques for linear and differential cryptanalysis.\n\n#### Public key cryptography: General and DLP\n\n* [New Directions in Cryptography](https://www-ee.stanford.edu/~hellman/publications/24.pdf) - Seminal paper by Diffie and Hellman, introducing public key cryptography and key exchange/agreement protocol.\n* [RFC 2631: Diffie-Hellman Key Agreement](https://tools.ietf.org/html/rfc2631) - An explanation of the Diffie-Hellman methon in more engineering terms.\n* [A Method for Obtaining Digital Signatures and Public-Key Cryptosystems](https://people.csail.mit.edu/rivest/Rsapaper.pdf) -  Original paper introducing RSA algorithm. \n* [RSA Algorithm](http://www.di-mgt.com.au/rsa_alg.html) - Rather education explanation of every bit behind RSA.\n* [Secure Communications Over Insecure Channels ](http://www.merkle.com/1974/PuzzlesAsPublished.pdf) - Paper by R. Merkle,   predated \"New directions in cryptography\" though it was published after it. The Diffie-Hellman key exchange is an implementation of such a Merkle system.\n* [On the Security of Public Key Protocols ](http://www.cs.huji.ac.il/~dolev/pubs/dolev-yao-ieee-01056650.pdf) - Dolev-Yao model is a formal model, used to prove properties of interactive cryptographic protocols.\n* [How to Share a Secret](https://github.com/arupmondal-cs/Crypto-Research/blob/master/Secret%20Sharing/shamirturing.pdf) - A safe method for sharing secrets.\n* [Twenty Years of Attacks on the RSA Cryptosystem](http://crypto.stanford.edu/~dabo/pubs/papers/RSA-survey.pdf) - Great inquiry into attacking RSA and it's internals, by Dan Boneh. \n* [Remote timing attacks are practical](http://crypto.stanford.edu/~dabo/papers/ssl-timing.pdf) - An example in attacking practical crypto implementationby D. Boneh, D. Brumley.\n* [The Equivalence Between the DHP and DLP for Elliptic Curves Used in Practical Applications, Revisited](https://eprint.iacr.org/2005/307.pdf) - by K. Bentahar.\n\n#### Public key cryptography: Elliptic-curve crypto\n\n* [Elliptic Curve cryptography: A gentle introduction](http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/).\n* [Explain me like I'm 5: How digital signatures actually work](http://blog.oleganza.com/post/162861219668/eli5-how-digital-signatures-actually-work) - EdDSA explained with ease and elegance.\n* [Elliptic Curve Cryptography: finite fields and discrete logarithms](http://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/).\n* [Detailed Elliptic Curve cryptography tutorial](https://www.johannes-bauer.com/compsci/ecc/).\n* [Elliptic Curve Cryptography: ECDH and ECDSA](http://andrea.corbellini.name/2015/05/30/elliptic-curve-cryptography-ecdh-and-ecdsa/).\n* [Elliptic Curve Cryptography: breaking security and a comparison with RSA](http://andrea.corbellini.name/2015/06/08/elliptic-curve-cryptography-breaking-security-and-a-comparison-with-rsa/).\n* [Elliptic Curve Cryptography: the serpentine course of a paradigm shift](http://eprint.iacr.org/2008/390.pdf) - Historic inquiry into development of ECC and it's adoption.\n* [Let's construct an elliptic curve: Introducing Crackpot2065](http://blog.bjrn.se/2015/07/lets-construct-elliptic-curve.html) - Fine example of building up ECC from scratch.\n* [Explicit-Formulas Database](http://www.hyperelliptic.org/EFD/) - For many elliptic curve representation forms.\n* [Curve25519: new Diffie-Hellman speed records](https://cr.yp.to/ecdh/curve25519-20060209.pdf) - Paper on Curve25519.\n* [Software implementation of the NIST elliptic curves over prime fields](http://delta.cs.cinvestav.mx/~francisco/arith/julio.pdf) - Pracitcal example of implementing elliptic curve crypto, by M. Brown et al.\n* [High-speed high-security signatures](https://ed25519.cr.yp.to/ed25519-20110926.pdf) - Seminal paper on EdDSA signatures on ed25519 curve by Daniel J. Bernstein et al.\n\n#### Zero Knowledge Proofs\n\n* [Proofs of knowledge](https://cseweb.ucsd.edu/~mihir/papers/pok.pdf) - A pair of papers which investigate the notions of proof of knowledge and proof of computational ability, M. Bellare and O. Goldreich.\n* [How to construct zero-knowledge proof systems for NP](http://www.wisdom.weizmann.ac.il/~oded/gmw1.html) - Classic paper by Goldreich,  Micali and Wigderson.\n* [Proofs that yield nothing but their validity and a Methodology of Cryptographic protocol design](http://www.math.ias.edu/~avi/PUBLICATIONS/MYPAPERS/GMW86/GMW86.pdf) - By Goldreich,  Micali and Wigderson, a relative to the above. \n* [A Survey of Noninteractive Zero Knowledge Proof System and Its Applications](https://www.hindawi.com/journals/tswj/2014/560484/).\n* [How to Prove a Theorem So No One Else Can Claim It](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.469.9048&rep=rep1&type=pdf) - By Manuel Blum.\n* [Information Theoretic Reductions among Disclosure Problems](http://crypto.cs.mcgill.ca/~crepeau/BCR86.pdf) - Brassau et al.\n* [Knowledge complexity of interactive proof systems](https://github.com/manjunath5496/Shafi-Goldwasser-Publications/blob/master/1989-siamjc.pdf) - By GoldWasser, Micali and Rackoff. Defining computational complexity of \"knowledge\" within zero knowledge proofs. \n* [A Survey of Zero-Knowledge Proofs with Applications to Cryptography](http://www.austinmohr.com/work/files/zkp.pdf) - Great intro on original ZKP protocols.\n* [Zero Knowledge Protocols and Small Systems](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.186.4901&rep=rep1&type=pdf) - A good intro into Zero knowledge protocols.\n* [Multi-Theorem Preprocessing NIZKs from Lattices](https://link.springer.com/chapter/10.1007%2F978-3-319-96881-0_25) - Construction of non-interactive zero-knowledge (NIZK) proofs using lattice-based preprocessing models, by Sam Kim and David J. Wu.\n\n#### Key Management\n\n* [Recommendation for Key Management \u2013 Part 1: General](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r4.pdf) - Methodologically very relevant document on goals and procedures of key management. \n* [Selecting Cryptographic Key Sizes](https://link.springer.com/content/pdf/10.1007/s00145-001-0009-4.pdf) - Classic paper from 1999 with guidelines for the determination of key sizes for symmetric cryptosystems, RSA, ECC, by Arjen K. Lenstra and Eric R. Verheul.\n\n#### Math\n\n* [PRIMES is in P](https://www.cse.iitk.ac.in/users/manindra/algebra/primality_v6.pdf) - Unconditional deterministic polynomial-time algorithm that determines whether an input number is prime or composite.\n\n#### Post-quantum cryptography\n\n* [Post-quantum cryptography - dealing with the fallout of physics success](https://eprint.iacr.org/2017/314.pdf) - Brief observation of mathematical tasks that can be used to build cryptosystems secure against attacks by post-quantum computers.\n* [Post-quantum cryptography](https://www.researchgate.net/profile/Nicolas_Sendrier/publication/226115302_Code-Based_Cryptography/links/540d62d50cf2df04e7549388/Code-Based-Cryptography.pdf) - Introduction to post-quantum cryptography.\n* [Post-quantum RSA](https://cr.yp.to/papers/pqrsa-20170419.pdf) - Daniel Bernshtein's insight how to save RSA in post-quantum period.\n\n<hr>\n\n### Books\n\nThat seems somewhat out of scope, isn't it? But these are books only fully available online for free. Read them as a sequence of papers if you will.\n\n* [A Graduate Course in Applied Cryptography](https://crypto.stanford.edu/~dabo/cryptobook/) - By Dan Boneh and Victor Shoup. A well-balanced introductory course into cryptography, a bit of cryptanalysis and cryptography-related security.\n* [Analysis and design of cryptographic hash functions, MAC algorithms and block ciphers](https://www.esat.kuleuven.be/cosic/publications/thesis-16.pdf) - Broad overview of design and cryptanalysis of various ciphers and hash functions, by Bart Van Rompay.\n* [CrypTool book](https://www.cryptool.org/en/ctp-documentation/ctbook) - Predominantly mathematically oriented information on learning, using and experimenting cryptographic procedures.\n* [Handbook of Applied Cryptography](https://cacr.uwaterloo.ca/hac/) - By Alfred J. Menezes, Paul C. van Oorschot and Scott A. Vanstone. Good classical introduction into cryptography and ciphers.\n* [The joy of Cryptography](http://web.engr.oregonstate.edu/~rosulekm/crypto/) - By Mike Rosulek. A lot of basic stuff covered really well. No ECC.\n* [A Computational Introduction to Number Theory and Algebra](http://www.shoup.net/ntb/) - By Victor Shoup, excellent starters book on math universally used in cryptography. \n\n<hr>\n\n### Lectures and educational courses\n\n* [Understanding cryptography: A textbook for Students and Practitioners](http://www.crypto-textbook.com/) - Textbook, great lectures and problems to solve.\n* [Crypto101](https://www.crypto101.io/) - Crypto 101 is an introductory course on cryptography, freely available for programmers of all ages and skill levels.\n* [A Course in Cryptography](https://www.cs.cornell.edu/courses/cs4830/2010fa/lecnotes.pdf) - Lecture notes by Rafael Pass, Abhi Shelat.\n* [Lecture Notes on Cryptography](https://cseweb.ucsd.edu/~mihir/papers/gb.pdf) - Famous set of lectures on cryptography by Shafi Goldwasser (MIT), M. Bellare (University of California).\n* [Introduction to Cryptography by Christof Paar](https://www.youtube.com/watch?v=2aHkqB2-46k) - Video course by Christof Paar (University of Bochum in Germany). In english.\n* [Cryptography I](https://www.coursera.org/learn/crypto) - Stanford University course on Coursera, taught by prof. Dan Boneh. [Cryptography II](https://www.coursera.org/learn/crypto2) is still in development.\n<hr>\n\n### Online crypto challenges \n\nNot exactly papers, but crypto challenges are awesome educational material.\n\n* [CryptoHack](https://cryptohack.org/)\n\n* [Cryptopals crypto challenges](https://cryptopals.com/).\n\n* [id0-rsa crypto challenges](https://id0-rsa.pub/).\n\n* [MTC3](https://www.mysterytwisterc3.org/en/) - xipher contest with more than 200 challenges of different levels, a moderated forum, and a hall-of-fame.\n\n## License\n\n[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)\n\nTo the extent possible under law, author has waived all copyright and related or neighboring rights to this work.\n"
 },
 {
  "repo": "weiyinfu/cryptography",
  "language": null,
  "readme_contents": "\u5317\u4eac\u822a\u7a7a\u822a\u5929\u5927\u5b66\u7814\u7a76\u751f\u8bfe\u7a0b\uff1a\u5bc6\u7801\u5b66"
 },
 {
  "repo": "0v3rW4tch/Cryptography-course-design",
  "language": "Python",
  "readme_contents": "\u4ee3\u7801\u53ef\u80fd\u4e0d\u662f\u7279\u522b\u5b8c\u5584\uff0c\u8fd8\u6709\u53ef\u80fd\u5b58\u5728\u5176\u4ed6\u7684\u6ca1\u6709\u8003\u8651\u5468\u5168\u7684\u5730\u65b9\uff0c\u8bf7\u591a\u591a\u8c05\u89e3\n\nA5.py ---------------> A5\u52a0\u89e3\u5bc6\n\nRC4\u52a0\u89e3\u5bc6.py-----------------> RC4\u52a0\u89e3\u5bc6\n\nDES_destruct----------->DES\u52a0\u89e3\u5bc6\u7684S\u76d2\uff0cP\u76d2\u7b49\u7ed3\u6784\n\nDES\u52a0\u89e3\u5bc6\u6587\u4ef6.py ---------->DES\u6838\u5fc3\u7b97\u6cd5\n\nDigitalSignature.py----------->\u6570\u5b57\u7b7e\u540d\n\nmessageCheck.py --------------->\u6d88\u606f\u8ba4\u8bc1\n\nmymd5 .py     -------------------> Hash\u7b97\u6cd5\n\nmyRSA.py ------------------------> RSA\u52a0\u89e3\u5bc6\n\n\n\n"
 },
 {
  "repo": "cryptolok/CryKeX",
  "language": "Shell",
  "readme_contents": "![](https://github.com/cryptolok/CryKeX/raw/master/logo.png)\n\nProperties:\n* Cross-platform\n* Minimalism\n* Simplicity\n* Interactivity\n* Compatibility/Portability\n* Application Independable\n* Process Wrapping\n* Process Injection\n\nDependencies:\n* **Unix** - should work on any Unix-based OS\n\t- BASH - the whole script\n\t- root privileges (optional)\n\nLimitations:\n* AES and RSA keys only\n* Fails most of the time for Firefox browser\n* Won't work for disk encryption (LUKS) and PGP/GPG\n* Needs proper user privileges and memory authorizations\n\n# How it works\n\nYou may already heard or even used my [AES-REX](https://github.com/cryptolok/AES-REX) project that does pretty the same thing, but differently. Whereas AES-REX extracts cryptographic keys from registers, CryKeX will extract it from volatile memory (RAM).\n\n[Some](https://dfrws.org/sites/default/files/session-files/paper-the_persistence_of_memory_-_forensic_identification_and_extraction_of_cryptographic_keys.pdf) [work](https://www.scribd.com/doc/130070110/Extracting-Encryption-keys-from-RAM) has been already published regarding the subject of cryptograhic keys security within DRAM. Basically, we need to find something that looks like a key (entropic and specific length) and then confirm its nature by analyzing the memory structure around it (C data types).\n\nThe idea is to dump live memory of a process and use those techniques in order to find probable keys since, memory mapping doesn't change. Thanks-fully, tools exist for that purpose.\n\nThe script is not only capable of injecting into already running processes, but also wrapping new ones, by launching them separately and injecting shortly afterwards. This makes it capable of dumping keys from almost any process/binary on the system.\n\nOf course, accessing a memory is limited by kernel, which means that you will still require privileges for a process.\n\nLinux disk ecnryption (LUKS) uses anti-forensic [technique](https://gitlab.com/cryptsetup/cryptsetup/wikis/LUKS-standard/on-disk-format.pdf#4) in order to mitigate such issue, however, extracting keys from a whole memory is still possible.\n\nFirefox browser uses somehow similar memory management, thus seems not to be affected.\n\nSame goes for PGP/GPG.\n\nUnfortunately, solutions like [Ansible](https://docs.ansible.com/ansible/latest/user_guide/vault.html) are affected.\n\n## HowTo\n\nInstalling dependencies:\n```bash\nsudo apt install gdb aeskeyfind rsakeyfind || echo 'have you heard about source compiling?'\n```\n\n\nAn interactive example for OpenSSL AES keys:\n```bash\nopenssl aes-128-ecb -nosalt -out testAES.enc\n```\nEnter a password twice, then some text and before terminating:\n```bash\nCryKeX.sh openssl\n```\nFinally, press Ctrl+D 3 times and [check](http://aes.online-domain-tools.com/) the result.\n\n\nOpenSSL RSA keys:\n```bash\nopenssl genrsa -des3 -out testRSA.pem 2048\n```\nWhen prompted for passphrase:\n```bash\nCryKeX.sh openssl\n```\nVerify:\n```bash\nopenssl rsa -noout -text -in testRSA.pem\n```\n\n\nLet's extract keys from SSH:\n```bash\necho 'Ciphers aes256-gcm@openssh.com' >> /etc/ssh/sshd_config\nssh user@server\nCryKeX.sh ssh\n```\n\nFrom OpenVPN:\n```bash\necho 'cipher AES-256-CBC' >> /etc/openvpn/server.conf\nopenvpn yourConf.ovpn\nsudo CryKeX.sh openvpn\n```\n\nTrueCrypt/VeraCrypt is also affected:\nSelect \"veracrypt\" file in VeraCrypt, mount with password \"pass\" and:\n```bash\nsudo CryKeX.sh veracrypt\n```\n\nChromium-based browsers (thanks Google):\n```bash\nCryKeX.sh chromium\nCryKeX.sh google-chrome\n```\n\nDespite Firefox not being explicitly affected, Tor Browser Bundle is still susceptible due to tunneling:\n```bash\nCryKeX.sh tor\n```\n\nAs said, you can also wrap processes:\n```bash\napt install libssl-dev\ngcc -lcrypto cipher.c -o cipher\nCryKeX.sh cipher\n\twrap\n\tcipher\n```\n\n### Notes\n\nFeel free to contribute and test other applications.\n\n> \"They key of persistence opens all door closed by resistence\"\n\nJohn Di Lemme\n"
 },
 {
  "repo": "hohl/MIHCrypto",
  "language": "Objective-C",
  "readme_contents": "<p align=\"center\" >\n  <img src=\"https://github.com/hohl/MIHCrypto/raw/master/Assets/MIHCrypto-Logo.png\" alt=\"MIHCrypto\" title=\"MIHCrypto\">\n</p>\n\n[![Build Status](https://img.shields.io/travis/hohl/MIHCrypto.svg)](https://travis-ci.org/hohl/MIHCrypto)\n[![Version](https://img.shields.io/cocoapods/v/MIHCrypto.svg)](http://cocoadocs.org/docsets/MIHCrypto)\n[![Platform](https://img.shields.io/cocoapods/p/MIHCrypto.svg)](http://cocoadocs.org/docsets/MIHCrypto)\n\n\n[OpenSSL](https://www.openssl.org/) is the most powerful SSL and TLS library available which wraps a full cryptographic library. The library is written in pure C and due to its endless size and not-so-well-designed C interface it is very hard for beginners to step into it.\n\nThe aim of the MIHCrypto library is to provide an object-oriented interface which allows developers to write simple and clean code by still using the power of the OpenSSL `libCrypto` library. OpenSSL is a very large library so (yet) not the whole library is wrapped by MIHCrypto. Since [I](http://www.michaelhohl.net/) am developing the library because personal needs focus of the functionallity is on modern cryptographic apporaches, but everybody is welcome to contribute other parts to the library.\n\n## How To Get Started\n\n### Installation with CocoaPods\n\n[CocoaPods](http://cocoapods.org) is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries like MIHCrypto in your projects.\n\n```ruby\nplatform :ios, '6.0'\npod \"MIHCrypto\", \"~> 0.4.1\"\n```\n\n### Sample Code\n\nMIHCrypto is based on some less protocol declarations (in `MIHCrypto/Core`) and all ciphers are implementing these. So you have to use only a few interfaces for encrypting and decrypting with different cryptographic approaches.\n\n```objective-c\nid<MIHSymmetricKey> symmetricKey = ...\nNSError *encryptionError = nil;\nNSData *messageData = [@\"My top secret message\" dataByUsingEncoding:NSUTF8Encoding];\nNSData *encryptedData = [symmetricKey encrypt:messageData error:&encryptionError];\n```\n\nThese keys are either loaded from a file or generated by using an implementation of `MIHKeyFactory`.\n\n```objective-c\nMIHAESKeyFactory *factory = [[MIHAESKeyFactory alloc] init];\nid<MIHSymmetricKey> aesKey = [factory generateKey];\n```\n    \nIf you need more sample code have a look at the unit tests or have a look at the <a href=\"http://cocoadocs.org/docsets/MIHCrypto/\">docs</a>.\n\n### Architecture\n\nMIHCrypto is based on 5 core protocols which are implemented by various algorithms and approaches.\n\n - `MIHKeyFactory` - used to generate new keys\n - `MIHSymmetricKey` - represents a symmetric key (like AES or DES) and can be used to encrypt and decrypt data\n - `MIHPublicKey` - represents a public key (like RSA PUBKEY) and can be used to encrypt data and to verify a signature\n - `MIHPrivateKey` - represents a private key (like RSA private key) and can used to decrypt data and to sign a message\n - `MIHHashAlgorithm` - represents a hash funtion and only has one method to create the hash sum of the passed data\n\n### Requirements\n\nMIHCrypto requires Xcode 4 and above, targeting either iOS 6.0 and above, or Mac OS 10.9 Mavericks (64-bit with modern Cocoa runtime) and above.\n\n## About\n\nAs already mentioned OpenSSL is very powerful and large project so this library doesn't support all functionallity of it yet and new functions are added as needed. At the moment following cryptographic approaches are supported:\n\n - AES (block cipher)\n - BIGNUM (discrete mathematics)\n - DES (block cipher)\n - MD5 (hash algorithm)\n - RSA (public-key cryptography)\n - ECC (public-key cryptography)\n - SHA, SHA256, SHA384, SHA512 (hash algorithm)\n \nAnybody is welcome to add additional support for other approaches.\n\n### Contributors\n\n - [Michael Hohl](http://www.michaelhohl.net/)\n - [Dmitry Lobanov](https://github.com/lolgear)\n - [Akhil Stanislavose](https://github.com/akhilstanislavose)\n - [Andrey Toropchin](https://github.com/4ndrey)\n\n### License\n\nMIHCrypto is available under the MIT license. See the LICENSE file for more info.\n"
 },
 {
  "repo": "cpeikert/Lol",
  "language": "Haskell",
  "readme_contents": "\n[![Build Status](https://travis-ci.org/cpeikert/Lol.svg?branch=master)](https://travis-ci.org/cpeikert/Lol)\n\nThis branch is master. It should always be compiling!\n\n--------------------------------------------------------------------------------\n\nThis repository contains several Haskell libraries:\n\n  * The `lol` directory contains the Haskell library \u039b \u26ac \u03bb (Lol),\n    described in the paper\n    [\u039b \u26ac \u03bb: Functional Lattice Cryptography](https://eprint.iacr.org/2015/1134). More\n    documentation can be found on\n    [Hackage](https://hackage.haskell.org/package/lol). This is the\n    core of the project, and you'll need to install it to use anything\n    else.\n\n  * The `lol-apps` directory contains example cryptographic applications\n    built using Lol. If you are interested in using our example\n    applications, you will need this library. It is on Hackage\n    [here](https://hackage.haskell.org/package/lol-apps). If you are\n    just writing your own applications, you don't need to install this\n    library.\n\n  * The `lol-cpp` directory contains a C++ backend \"tensor\"\n    implementation.\n\nDeveloping in the Lol ecosystem:\n\nCompiling the Lol packages takes a long time. If you are just doing\ndevelopment, you probably don't need to compile (with optimizations)\nthe whole ecosystem. Instead, you can develop interactively. Run\n```\n> stack build lol lol-cpp lol-apps lol-tests lol-benches --dependencies-only\n```\nto build all third-party dependencies of the Lol ecosystem, then you can\ndevelop with\n```\n> ./ghci path/to/file\n``` \nThis command builds the C++ library for `lol-cpp` and loads all\nimported files from the Lol ecosystem from source.\n\nYou can load all top-level executables with `./ghci AllMain.hs`.\n\nInstalling Lol:\n\nIf you want to run benchmarks or tests, you'll need to compile the ecosystem\nwith optimizations. The easiest way to do this is to use stack, which is\nincluded in the [Haskell Platform](https://www.haskell.org/platform/).\n```\n> stack setup\n> stack build lol\n```\nor\n```\n> stack setup\n> stack install lol-apps\n```\nYou can run unit tests with `stack test <package>`. You can run\nmicrobenchmarks with `stack bench <package>`. Currently `lol-cpp`\nand `lol-apps` have tests and benchmarks.\n\nThe `lol-apps` package includes examples of how to use each\napplication. These are built automatically when you install\n`lol-apps`.\n"
 },
 {
  "repo": "flier/pyfasthash",
  "language": "C",
  "readme_contents": "# Introduction [![pypi](https://img.shields.io/pypi/v/pyhash.svg)](https://pypi.org/project/pyhash/) [![Travis CI Status](https://travis-ci.org/flier/pyfasthash.svg?branch=master)](https://travis-ci.org/flier/pyfasthash) [![codecov](https://codecov.io/gh/flier/pyfasthash/branch/master/graph/badge.svg)](https://codecov.io/gh/flier/pyfasthash)\r\n\r\n`pyhash` is a python non-cryptographic hash library.\r\n\r\nIt provides several common hash algorithms with C/C++ implementation for performance and compatibility.\r\n\r\n```python\r\n>>> import pyhash\r\n>>> hasher = pyhash.fnv1_32()\r\n\r\n>>> hasher('hello world')\r\n2805756500L\r\n\r\n>>> hasher('hello', ' ', 'world')\r\n2805756500L\r\n\r\n>>> hasher('world', seed=hasher('hello '))\r\n2805756500L\r\n```\r\n\r\nIt also can be used to generate fingerprints without seed.\r\n\r\n```python\r\n>>> import pyhash\r\n>>> fp = pyhash.farm_fingerprint_64()\r\n\r\n>>> fp('hello')\r\n>>> 13009744463427800296L\r\n\r\n>>> fp('hello', 'world')\r\n>>> [13009744463427800296L, 16436542438370751598L]\r\n```\r\n\r\n**Notes**\r\n\r\n`hasher('hello', ' ', 'world')` is a syntax sugar for `hasher('world', seed=hasher(' ', seed=hasher('hello')))`, and may not equals to `hasher('hello world')`, because some hash algorithms use different `hash` and `seed` size.\r\n\r\nFor example, `metro` hash always use 32bit seed for 64/128 bit hash value.\r\n\r\n```python\r\n>>> import pyhash\r\n>>> hasher = pyhash.metro_64()\r\n\r\n>>> hasher('hello world')\r\n>>> 5622782129197849471L\r\n\r\n>>> hasher('hello', ' ', 'world')\r\n>>> 16402988188088019159L\r\n\r\n>>> hasher('world', seed=hasher(' ', seed=hasher('hello')))\r\n>>> 16402988188088019159L\r\n```\r\n\r\n# Installation\r\n\r\n```bash\r\n$ pip install pyhash\r\n```\r\n\r\n**Notes**\r\n\r\nIf `pip` install failed with similar errors, [#27](https://github.com/flier/pyfasthash/issues/27)\r\n\r\n```\r\n/usr/lib/gcc/x86_64-linux-gnu/6/include/smmintrin.h:846:1: error: inlining failed in call to always_inline 'long long unsigned int _mm_crc32_u64(long long unsigned int, long long unsigned int)': target specific option mismatch\r\n _mm_crc32_u64 (unsigned long long __C, unsigned long long __V)\r\n ^~~~~~~~~~~~~\r\nsrc/smhasher/metrohash64crc.cpp:52:34: note: called from here\r\n             v[0] ^= _mm_crc32_u64(v[0], read_u64(ptr)); ptr += 8;\r\n                     ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\nPlease upgrade `pip` and `setuptools` to latest version and try again\r\n\r\n```bash\r\n$ pip install --upgrade pip setuptools\r\n```\r\n\r\n**Notes**\r\n\r\nIf `pip` install failed on MacOS with similar errors [#28](https://github.com/flier/pyfasthash/issues/28)\r\n\r\n```\r\n   creating build/temp.macosx-10.6-intel-3.6\r\n   ...\r\n   /usr/bin/clang -fno-strict-aliasing -Wsign-compare -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -arch i386 -arch x86_64 -g -c src/smhasher/metrohash64crc.cpp -o build/temp.macosx-10.6-intel-3.6/src/smhasher/metrohash64crc.o -msse4.2 -maes -mavx -mavx2\r\n    src/smhasher/metrohash64crc.cpp:52:21: error: use of undeclared identifier '_mm_crc32_u64'\r\n                v[0] ^= _mm_crc32_u64(v[0], read_u64(ptr)); ptr += 8;\r\n                        ^\r\n```\r\n\r\nYou may try to\r\n\r\n```bash\r\n$ CFLAGS=\"-mmacosx-version-min=10.13\" pip install pyhash\r\n```\r\n\r\n**Notes**\r\n\r\n`pyhash` only support `pypy` v6.0 or newer, please [download and install](https://pypy.org/download.html) the latest `pypy`.\r\n\r\n# Algorithms\r\n\r\npyhash supports the following hash algorithms\r\n\r\n- [FNV](http://isthe.com/chongo/tech/comp/fnv/) (Fowler-Noll-Vo) hash\r\n  - fnv1_32\r\n  - fnv1a_32\r\n  - fnv1_64\r\n  - fnv1a_64\r\n- [MurmurHash](http://code.google.com/p/smhasher/)\r\n  - murmur1_32\r\n  - murmur1_aligned_32\r\n  - murmur2_32\r\n  - murmur2a_32\r\n  - murmur2_aligned_32\r\n  - murmur2_neutral_32\r\n  - murmur2_x64_64a\r\n  - murmur2_x86_64b\r\n  - murmur3_32\r\n  - murmur3_x86_128\r\n  - murmur3_x64_128\r\n- [lookup3](http://burtleburtle.net/bob/hash/doobs.html)\r\n  - lookup3\r\n  - lookup3_little\r\n  - lookup3_big\r\n- [SuperFastHash](http://www.azillionmonkeys.com/qed/hash.html)\r\n  - super_fast_hash\r\n- [City Hash](https://code.google.com/p/cityhash/)\r\n  _ city_32\r\n  - city_64\r\n  - city_128\r\n  - city_crc_128\r\n  - city_fingerprint_256\r\n- [Spooky Hash](http://burtleburtle.net/bob/hash/spooky.html)\r\n  - spooky_32\r\n  - spooky_64\r\n  - spooky_128\r\n- [FarmHash](https://github.com/google/farmhash)\r\n  - farm_32\r\n  - farm_64\r\n  - farm_128\r\n  - farm_fingerprint_32\r\n  - farm_fingerprint_64\r\n  - farm_fingerprint_128\r\n- [MetroHash](https://github.com/jandrewrogers/MetroHash)\r\n  - metro_64\r\n  - metro_128\r\n  - metro_crc_64\r\n  - metro_crc_128\r\n- [MumHash](https://github.com/vnmakarov/mum-hash)\r\n  - mum_64\r\n- [T1Ha](https://github.com/leo-yuriev/t1ha)\r\n  - t1ha2 _(64-bit little-endian)_\r\n  - t1ha2_128 _(128-bit little-endian)_\r\n  - t1ha1 _(64-bit native-endian)_\r\n  - t1ha1_le _(64-bit little-endian)_\r\n  - t1ha1_be _(64-bit big-endian)_\r\n  - t1ha0 _(64-bit, choice fastest function in runtime.)_\r\n  - ~~t1_32~~\r\n  - ~~t1_32_be~~\r\n  - ~~t1_64~~\r\n  - ~~t1_64_be~~\r\n- [XXHash](https://github.com/Cyan4973/xxHash)\r\n  - xx_32\r\n  - xx_64\r\n  - xxh3_64 **NEW**\r\n  - xxh3_128 **NEW**\r\n- [Highway Hash](https://github.com/google/highwayhash)\r\n  - highway_64 **NEW**\r\n  - highway_128 **NEW**\r\n  - highway_256 **NEW**\r\n\r\n## String and Bytes literals\r\n\r\nPython has two types can be used to present string literals, the hash values of the two types are definitely different.\r\n\r\n- For Python 2.x [String literals](https://docs.python.org/2/reference/lexical_analysis.html#string-literals), `str` will be used by default, `unicode` can be used with the `u` prefix.\r\n- For Python 3.x [String and Bytes literals](https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals), `unicode` will be used by default, `bytes` can be used with the `b` prefix.\r\n\r\nFor example,\r\n\r\n```\r\n$ python2\r\nPython 2.7.15 (default, Jun 17 2018, 12:46:58)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pyhash\r\n>>> hasher = pyhash.murmur3_32()\r\n>>> hasher('foo')\r\n4138058784L\r\n>>> hasher(u'foo')\r\n2085578581L\r\n>>> hasher(b'foo')\r\n4138058784L\r\n```\r\n\r\n```\r\n$ python3\r\nPython 3.7.0 (default, Jun 29 2018, 20:13:13)\r\n[Clang 9.1.0 (clang-902.0.39.2)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pyhash\r\n>>> hasher = pyhash.murmur3_32()\r\n>>> hasher('foo')\r\n2085578581\r\n>>> hasher(u'foo')\r\n2085578581\r\n>>> hasher(b'foo')\r\n4138058784\r\n```\r\n\r\nYou can also import [unicode_literals](http://python-future.org/unicode_literals.html) to use unicode literals in Python 2.x\r\n\r\n```python\r\nfrom __future__ import unicode_literals\r\n```\r\n\r\n> In general, it is more compelling to use unicode_literals when back-porting new or existing Python 3 code to Python 2/3 than when porting existing Python 2 code to 2/3. In the latter case, explicitly marking up all unicode string literals with u'' prefixes would help to avoid unintentionally changing the existing Python 2 API. However, if changing the existing Python 2 API is not a concern, using unicode_literals may speed up the porting process.\r\n"
 },
 {
  "repo": "cryptoballot/cryptoballot",
  "language": "Rust",
  "readme_contents": "CryptoBallot\n============\n\n[![docs](https://docs.rs/cryptoballot/badge.svg)](https://cryptoballot.com/doc/cryptoballot/index.html)\n[![crates.io](https://meritbadge.herokuapp.com/cryptoballot)](https://crates.io/crates/cryptoballot)\n[![checks](https://github.com/cryptoballot/cryptoballot/workflows/checks/badge.svg)](https://github.com/cryptoballot/cryptoballot/actions)\n\n\nCryptoBallot is a cryptographically secure decentralized end-to-end verifiable voting system meant for real-world elections. It is a \"backend\" service providing vote storage, cryptographic operations, and an API. It does not provide a user interface - although it is built to make creating a UI that interfaces with it easy.\n\nIt uses distributed key-generation for election encryption keys, blind-signing and an elGamal re-encryption mixnet for voter anonymity, and an optional blockchain backend for distributed transaction storage and verification.  It supports all tally methods including write-in candidates. \n\n## Goals\n\n1. **Verifiable** - the entire voting process should be end-to-end verifiable.\n2. **Ergonomic** - Easy to use.\n3. **Fast** - 5,000 votes per second for a single shard. \n4. **Scalable** - Billions of voters. Unlimited votes per second with horizontal shard scaling.\n5. **Secure** - Rock solid security guarantees, byzantine fault tolerance. \n6. **Distributed** - Trust and redundency is distributed amongst an operator-selected set of trustees.\n\n## Current State\n\nUnder active development. Not ready for production use!  \n\n## Road Map\n\n| Status\u00b9 | Feature                           | Notes                                                          |\n| ------- | --------------------------------------- | -------------------------------------------------------------- |\n| \u2713       | Migrate from Go to Rust                 | \ud83e\udd80                                                             |\n| \u2713       | Distributed key generation / decryption | Uses [cryptid](https://github.com/eleanor-em/cryptid/).        |\n| \u2713       | Blind-Signing (RSA)                     | Uses [RSA-FDH](https://github.com/phayes/rsa-fdh)              |\n|         | Blind-Signing ([schnorr](https://www.math.uni-frankfurt.de/~dmst/teaching/WS2013/Vorlesung/Pointcheval,Stern.pdf))       | Will replace current RSA blind-signing                         |\n| \u2713       | Re-encryption mixnet                    | Provides coercion resistant anonymity. Uses [cryptid](https://github.com/eleanor-em/cryptid/).|\n| \u2713       | Optional Blockchain backend             | Uses [Exonum](https://exonum.com/) |\n| \u26a0       | Support all tally methods               | Uses [Tallystick](https://github.com/phayes/tallystick)        |\n| \u26a0       | REST frontend                           |                                                                |\n| \u26a0       | End-User Device Verification            | Uses [Benaoh Challenge](https://github.com/phayes/benaloh-challenge)|\n|         | TypeScript / JS Client Library          |                                                                |\n|         | Dart Client Library (Android)           |                                                                |\n|         | Swift Client Library (iOS)              |                                                                |\n\n1. \u2713 means done, \u26a0 means in-progress, blank means not started but support is planned.\n\n## Quick Start\n\n```bash\n\n# Install dependencies (Mac)\nbrew install jq pkg-config protobuf\n\n# Install dependencies (Debian / Ubuntu)\nsudo apt-get install build-essential jq libsnappy-dev libssl-dev \\\npkg-config clang-7 lldb-7 lld-7 protobuf-compiler libprotobuf-dev\n\n# Clone the repository\ngit clone git@github.com:cryptoballot/cryptoballot.git && cd cryptoballot\ngit checkout 0.5-beta1\n\n# Install the server and command-line tools (go make some tea, this will take a while)\ncargo install --force --path=cryptoballot_server\ncargo install --force --path=cryptoballot_cli\n\n# Make a directory to hold our cryptoballot database\nmkdir $HOME/.cryptoballot\n\n# Start the server in development mode (dev-mode will autogenerate and print the private-key). \n# Make note of the printed CRYPTOBALLOT_SECRET_KEY. We will refer to this as <secret_key>.\n# WARNING: Don't use `run-dev` for production.\ncryptoballot_server run-dev --blockchain-path=$HOME/.cryptoballot\n\n# Example Output:\n#   > Starting in development mode\n#   CRYPTOBALLOT_SECRET_KEY=ddcd9d786ba3975f1c4ba215226f632c455cdd4de51d2183bc985f20f7abc3c9\n#   > Starting cryptoballot server, listening on port 8080\n\n# In another window, generate an election-transaction using the secret key from before\n# This election is very basic with a single trustee, no authentication, and a single write-in-only plurality ballot-type\n# Optionally visit http://localhost:8080/api/services/cryptoballot/transactions to see transactions\nCRYPTOBALLOT_SECRET_KEY=<secret_key> cryptoballot election generate --post\n\n# Make note of the generated election ID (we will refer to this as <election-id>)\n\n# Create some votes\ncryptoballot vote generate <election-id> \"EASTER BUNNY\" --post\ncryptoballot vote generate <election-id> \"SANTA CLAUSE\" --post\ncryptoballot vote generate <election-id> \"EASTER BUNNY\" --post\ncryptoballot vote generate <election-id> \"SANTA CLAUSE\" --post\ncryptoballot vote generate <election-id> \"SANTA CLAUSE\" --post\n\n# As the election-authority, you decide when the voting is over and votes should be mixed and decrypted\n# This can be automated by setting an end-time in the election transaction\nCRYPTOBALLOT_SECRET_KEY=<secret_key> cryptoballot voting_end generate <election-id> --post\n\n# After the voting is over, the server will automatically mix and decrypt the votes\n# Optionally visit http://localhost:8080/api/services/cryptoballot/transactions to see transactions\n\n# Do an verifiable end-to-end verification of the election and get the results!\ncryptoballot e2e <election-id> --print-tally --print-results\n\n```\n\n## Components\n\n### [Core library](https://github.com/cryptoballot/cryptoballot/tree/master/cryptoballot)\n\n1. Add `cryptoballot = \"0.3.1\"` to your [rust](https://www.rust-lang.org) project's `Cargo.toml` file. \n\n### [Command-line tool](https://github.com/cryptoballot/cryptoballot/tree/master/cryptoballot_cli)\n\n1. Install [Rust](https://www.rust-lang.org), \n2. Run `cargo install --path=cryptoballot_cli`\n\n\n### [Cryptoballot Server](https://github.com/cryptoballot/cryptoballot/tree/master/cryptoballot_server)\n\n1. Install [Rust](https://www.rust-lang.org), \n2. Install dependencies (see below)\n3. Run `cargo install --path=cryptoballot_cli`\n\n#### Dependencies\n\nCryptoballot Server depends on the following third-party system libraries:\n - RocksDB (storage engine)\n - libsodium (cryptography engine)\n - Protocol Buffers (mechanism for serializing structured data)\n\nOther components (core library, command-line tools) don't require these dependencies.\n\n**Mac**\n\n```bash\nbrew install jq pkg-config protobuf\n```\n\n**Debian / Ubuntu**\n\n```bash\nsudo apt-get install build-essential jq libsnappy-dev libssl-dev \\\npkg-config clang-7 lldb-7 lld-7 protobuf-compiler libprotobuf-dev\n```\n\n\n## Related papers\n\nThese papers will help in understanding the underlying theory and mathematical foundations involved in CryptoBallot:\n1. [Verifiable Vote-by-mail](https://www.eleanorve.net/static/thesis.pdf), *Eleanor McMurtry*\n2. [A Threshold Cryptosystem\nwithout a Trusted Party](https://link.springer.com/content/pdf/10.1007/3-540-46416-6_47.pdf), *Pederson*\n3. [Pseudo-Code Algorithms for Verifiable\nRe-Encryption Mix-Nets](https://fc17.ifca.ai/voting/papers/voting17_HLKD17.pdf), *Haenni et al.*\n4. [Exonum: Byzantine fault tolerant protocol](https://bitfury.com/content/downloads/wp_consensus_181227.pdf), *Yanovich et al.*\n"
 },
 {
  "repo": "Apress/cryptography-in-c-cpp",
  "language": "C",
  "readme_contents": "# Apress Source Code\n\nThis repository accompanies [*Cryptography in C and C++*](http://www.apress.com/9781590595022) by Michael Welschenbach (Apress, 2005).\n\n![Cover image](9781590595022.jpg)\n\nDownload the files as a zip using the green button, or clone the repository to your machine using Git.\n\n## Releases\n\nRelease v1.0 corresponds to the code in the published book, without corrections or updates.\n\n## Contributions\n\nSee the file Contributing.md for more information on how you can contribute to this repository.\n"
 },
 {
  "repo": "B-Con/crypto-algorithms",
  "language": "C",
  "readme_contents": "crypto-algorithms\n=================\n\n\nAbout\n---\nThese are basic implementations of standard cryptography algorithms, written by Brad Conte (brad@bradconte.com) from scratch and without any cross-licensing. They exist to provide publically accessible, restriction-free implementations of popular cryptographic algorithms, like AES and SHA-1. These are primarily intended for educational and pragmatic purposes (such as comparing a specification to actual implementation code, or for building an internal application that computes test vectors for a product). The algorithms have been tested against standard test vectors.\n\nThis code is released into the public domain free of any restrictions. The author requests acknowledgement if the code is used, but does not require it. This code is provided free of any liability and without any quality claims by the author.\n\nNote that these are *not* cryptographically secure implementations. They have no resistence to side-channel attacks and should not be used in contexts that need cryptographically secure implementations.\n\nThese algorithms are not optimized for speed or space. They are primarily designed to be easy to read, although some basic optimization techniques have been employed.\n\nBuilding\n---\nThe source code for each algorithm will come in a pair of a source code file and a header file. There should be no inter-header file dependencies, no additional libraries, no platform-specific header files, or any other complicating matters. Compiling them should be as easy as adding the relevent source code to the project."
 },
 {
  "repo": "miracl/MIRACL",
  "language": "C",
  "readme_contents": "MIRACL\n======\nWhat is MIRACL?\nMultiprecision Integer and Rational Arithmetic Cryptographic Library \u2013 the MIRACL Crypto SDK \u2013 is a C software library that is widely regarded by developers as the gold standard open source SDK for elliptic curve cryptography (ECC).\n\nWhy is it different?\nWhile many other cryptographic SDKs are focused on PC use, MIRACL also enables developers to build security into highly constrained environments, including embedded, mobile apps and SCADA.\n\nFull documentation can be accessed here:\n<ul type=\"disc\">\n  <li><a href=\"docs/miracl-user-manual/\">About the MIRACL Crypto SDK: Introduction to installation</li>\n  <li><a href=\"docs/miracl-explained/\">MIRACL Explained: Licensing and reference manual</a></li>\n</ul>\n\n<h2>MIRACL enables</h2>\n\n<ul type=\"disc\">\n<li>Reduced program code</li>\n<li>Greatly simplified program development</li>\n<li>Developer-designed APIs</li>\n<li>Rapid implementation, using inline code wrappers, example programs and other innovations</li>\n</ul>\n\nThese unique qualities are the reason MIRACL, and the solutions and services built using it, are in use in hundreds of organizations across the world, including BAE Systems, Hitachi, Intel, Panasonic, Toyota and many others.\n\n<h2>Features and Benefits: why MIRACL is the right choice</h2>\nMIRACL delivers a wide and unique range of benefits, enabling developers to secure even the most constrained environments quickly, easily and effectively. It features, amongst others:\n\n<ul type=\"disc\">\n<li>An inline C++ wrapper \u2013 greatly simplifying program development</li>\n<li>Over 25 example programs in C and C++, covering a wide range of applications, to give development a head start</li>\n<li>Optimization of both embedded processors and RAM, to help developers overcome device and memory constraints</li>\n<li>Compatibility with industry security technologies including AES encryption, RSA public key cryptography, Diffie-Hellman key exchange, DSA digital signature, and others</li>\n<li>A set of tools that enable any new number-theoretic technique to be implemented quickly</li>\n</ul>\n\nThe MIRACL library consists of well over 100 routines that cover all aspects of multi-precision arithmetic. Two new data-types are defined - big for large integers and flash (short for floating-slash) for large rational numbers. The large integer routines are based on Knuth\u2019s algorithms, described in Chapter 4 of his classic work \u2018The Art of Computer Programming\u2019. Floating-slash arithmetic, which works with rounded fractions, was originally proposed by D. Matula and P. Kornerup. All routines have been thoroughly optimised for speed and efficiency, while at the same time remaining standard, portable C. However optional fast assembly language alternatives for certain time-critical routines are also included, particularly for the popular Intel 80x86 range of processors. A C++ interface is also provided. Full source code is included.\n\n<h2>Bug Tracker</h2>\n  MIRACL Ltd. uses JIRA for bug and feature tracking which is integrated with our development system. \u00a0\u00a0If you find a bug, you should report bugs into the <a href=\"https://sdlc.certivox.com/browse/MIRACL\">MIRACL bug tracker&nbsp;</a>.\u00a0 You can check that the bug hasn't already been reported by searching for it. If you find the bug already reported, you can add a comment of your own about it, or change its status to &quot;Confirmed&quot;. If the bug hasn't been reported, you can file a new bug report.</p>\n<h2>Community</h2>\n  MIRACL Ltd. is most of all a community of like-minded information security professionals who believe that cryptography is a necessary tool to advance individual freedom and safeguard privacy. MIRACL Ltd. acts on that belief by providing tools that can be used to secure information, guard privacy and advance individual freedom.<br />\n  Anyone who uses MIRACL Ltd. code or services is part of this global community, and we invite you to help shape MIRACL to better meet your needs. To make it yours!<br />\n  Keep track of development and community news.</p>\n<ul type=\"disc\">\n  <li>Follow @MIRACL on <a href=\"https://twitter.com/MIRACL\">https://twitter.com/MIRACL</a></li>\n  <li>Read our <a href=\"https://miracl.com/crypto-research-with-miracl-labs/\">blog </a> for the latest security and crypto news first </li>\n  <li>Have a question that's not a feature request or bug report? <u><a href=\"https://miracl.com/contact-miracl/\">Contact Us.</a></u></li>\n</ul>\n<h2>Contributing:</h2>\n  MIRACL Ltd. provides an Open Source suite of solutions for data security.\u00a0 The MIRACL Ltd. team firmly believes that our solutions and the organizations and users who benefit by them all derive value from active contributions from the community.<br />\n  You can contribute to help shape and improve our MIRACL Ltd. products.\u00a0 If you have ideas and suggestions on new features and improvements that you would like to see and help bring to MIRACL Ltd., please fork the public available code on GitHub.\n<h2>Authors:</strong></h2>\n  <strong>MIRACL Ltd.</strong></p>\n<ul>\n  <li><a href=\"https://miracl.com/\">https://miracl.com/</a></li>\n  <li><a href=\"https://github.com/miracl\">https://github.com/miracl</a></li>\n  <li><a href=\"https://twitter.com/MIRACL\">https://twitter.com/miracl</a></li>\n  <li><a href=\"https://www.linkedin.com/company/miracl/\">https://www.linkedin.com/company/miracl/</a></li>\n</ul>\n\n<h2>Copyright and License:</strong></h2>\n<p>\u00a9 2018 MIRACL UK Ltd., All Rights Reserved.</p>\n<p>MIRACL SDK provides developers with an  extensive and efficient set of cryptographic functions. For further information about its features and functionalities please refer to https://miracl.com.</p>\n<p>MIRACL SDK is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p>\n<p>MIRACL SDK is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.</p>\n<p>You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving MIRACL without disclosing the source code of your own applications, or shipping MIRACL with a closed source product.</P>\n  <p>For full details regarding our MIRACL Ltd. terms of service please refer to the following links:</p>\n<ul>\n  <li><a href=\"https://miracl.com/privacy-policy/\">Privacy Policy</a></li>\n  <li><a href=\"https://miracl.com/gdpr-privacy-policy/\">GDPR Data Protection Policy</a></li>\n</ul>\n"
 },
 {
  "repo": "RsaCtfTool/RsaCtfTool",
  "language": "Python",
  "readme_contents": "# RsaCtfTool\n[![Test](https://github.com/pedroelbanquero/RsaCtfTool/actions/workflows/test.yml/badge.svg)](https://github.com/pedroelbanquero/RsaCtfTool/actions/workflows/test.yml)\n![lint_python](https://github.com/Ganapati/RsaCtfTool/workflows/lint_python/badge.svg)\n![CodeQL](https://github.com/Ganapati/RsaCtfTool/workflows/CodeQL/badge.svg)\n[![GitHub issues](https://img.shields.io/github/issues/Ganapati/RsaCtfTool.svg)](https://github.com/Ganapati/RsaCtfTool/issues)\n[![GitHub forks](https://img.shields.io/github/forks/Ganapati/RsaCtfTool.svg)](https://github.com/Ganapati/RsaCtfTool/network)\n[![GitHub stars](https://img.shields.io/github/stars/Ganapati/RsaCtfTool.svg)](https://github.com/Ganapati/RsaCtfTool/stargazers)\n[![Rawsec's CyberSecurity Inventory](https://inventory.rawsec.ml/img/badges/Rawsec-inventoried-FF5050_flat.svg)](https://inventory.rawsec.ml/tools.html#RsaCtfTool)\n[![GitHub license](https://img.shields.io/github/license/Ganapati/RsaCtfTool.svg)](https://github.com/Ganapati/RsaCtfTool)\n\nRSA multi attacks tool : uncipher data from weak public key and try to recover private key\nAutomatic selection of best attack for the given public key\n\nAttacks :\n\n- Weak public key factorization\n- Wiener's attack\n- Hastad's attack (Small public exponent attack)\n- Small q (q < 100,000)\n- Common factor between ciphertext and modulus attack\n- Fermat's factorisation for close p and q\n- Gimmicky Primes method\n- Past CTF Primes method\n- Non RSA key in the form b^x, where b is prime\n- Self-Initializing Quadratic Sieve (SIQS) using Yafu (<https://github.com/DarkenCode/yafu.git>)\n- Common factor attacks across multiple keys\n- Small fractions method when p/q is close to a small fraction\n- Boneh Durfee Method when the private exponent d is too small compared to the modulus (i.e d < n^0.292)\n- Elliptic Curve Method\n- Pollards p-1 for relatively smooth numbers\n- Mersenne primes factorization\n- Factordb\n- Londahl\n- Noveltyprimes\n- Partial q\n- Primefac\n- Qicheng\n- Same n, huge e\n- binary polynomial factoring\n- Euler method\n- Pollard Rho\n- Wolfram alpha\n- cm-factor\n- z3 theorem prover\n- Primorial pm1 gcd\n- Mersenne pm1 gcd\n- Fermat Numbers gcd\n- Fibonacci gcd\n- System primes gcd\n- Small crt exponent\n- Shanks's square forms factorization (SQUFOF)\n- Return of Coppersmith's attack (ROCA) with NECA variant\n- Dixon\n- brent (Pollard rho variant)\n- Pisano Period\n- NSIF Vulnerability, Power Modular Factorization, Near Power Factors\n\n## Usage\n\n```bash\nusage: RsaCtfTool.py [-h] [--publickey PUBLICKEY] [--timeout TIMEOUT]\n                     [--createpub] [--dumpkey] [--ext] [--sendtofdb]\n                     [--uncipherfile UNCIPHERFILE] [--uncipher UNCIPHER]\n                     [--verbosity {CRITICAL,ERROR,WARNING,DEBUG,INFO}]\n                     [--private] [--ecmdigits ECMDIGITS] [-n N] [-p P] [-q Q]\n                     [-e E] [--key KEY] [--isconspicuous] [--convert_idrsa_pub] [--isroca] [--check_publickey]\n                     [--attack {brent,fermat_numbers_gcd,comfact_cn,wiener,factordb,smallq,pollard_rho,euler,z3_solver,neca,cm_factor,mersenne_pm1_gcd,SQUFOF,small_crt_exp,fibonacci_gcd,smallfraction,boneh_durfee,roca,fermat,londahl,mersenne_primes,partial_q,siqs,noveltyprimes,binary_polinomial_factoring,primorial_pm1_gcd,pollard_p_1,ecm2,cube_root,system_primes_gcd,dixon,ecm,pastctfprimes,qicheng,wolframalpha,hastads,same_n_huge_e,commonfactors,pisano_period,nsif,all}]\n```\n\n\nMode 1 : Attack RSA (specify --publickey or n and e)\n\n- publickey : public rsa key to crack. You can import multiple public keys with wildcards.\n- uncipher : cipher message to decrypt\n- private : display private rsa key if recovered\n\nMode 2 : Create a Public Key File Given n and e (specify --createpub)\n\n- n : modulus\n- e : public exponent\n\nMode 3 : Dump the public and/or private numbers (optionally including CRT parameters in extended mode) from a PEM/DER format public or private key (specify --dumpkey)\n\n- key : the public or private key in PEM or DER format\n\n### Uncipher file\n\n`./RsaCtfTool.py --publickey ./key.pub --uncipherfile ./ciphered\\_file`\n\n### Print private key\n\n`./RsaCtfTool.py --publickey ./key.pub --private`\n\n### Attempt to break multiple public keys with common factor attacks or individually- use quotes around wildcards to stop bash expansion\n\n`./RsaCtfTool.py --publickey \"*.pub\" --private`\n\n\n### Optionaly send the results back to factordb\n\n`./RsaCtfTool.py --publickey \"*.pub\" --private --sendtofdb`\n\n### Generate a public key\n\n`./RsaCtfTool.py --createpub -n 7828374823761928712873129873981723...12837182 -e 65537`\n\n### Dump the parameters from a key\n\n`./RsaCtfTool.py --dumpkey --key ./key.pub`\n\n### Check a given private key for conspicuousness \n\n`./RsaCtfTool.py --key examples/conspicuous.priv --isconspicuous`\n\n### Factor with ECM when you know the approximate length in digits of a prime\n\n`./RsaCtfTool.py --publickey key.pub --ecmdigits 25 --verbose --private`\n\nFor more examples, look at test.sh file\n\n### Convert idrsa.pub to pem format\n\n`./RsaCtfTool.py  --convert_idrsa_pub --publickey $HOME/.ssh/id_rsa.pub`\n\n\n### Check if a given key or keys are roca ###\n\n`./RsaCtfTool.py --isroca --publickey \"examples/*.pub\"`\n\n### Docker run ###\n\n`docker pull ganapati/rsactftool`\n`docker run -it --rm -v $PWD:/data ganapati/rsactftool <arguments>`\n\n## Requirements\n\n- GMPY2\n- SymPy\n- PyCrypto\n- Requests\n- Libnum\n- SageMath : optional but advisable\n- Sage binaries\n\n### Ubuntu 18.04 and Kali specific Instructions\n\n```bash\ngit clone https://github.com/Ganapati/RsaCtfTool.git\nsudo apt-get install libgmp3-dev libmpc-dev\ncd RsaCtfTool\npip3 install -r \"requirements.txt\"\npython3 RsaCtfTool.py\n```\n\n\n### Fedora (33 and above) specific Instructions\n```bash\ngit clone https://github.com/Ganapati/RsaCtfTool.git\nsudo dnf install gcc python3-devel python3-pip python3-wheel gmp-devel mpfr-devel libmpc-devel\ncd RsaCtfTool\npip3 install -r \"requirements.txt\"\npython3 RsaCtfTool.py\n```\n\nIf you also want the optional SageMath you need to do\n```bash\nsudo dnf install sagemath\npip3 install -r \"optional-requirements.txt\"\n```\n\n### MacOS-specific Instructions\n\nIf `pip3 install -r \"requirements.txt\"` fails to install requirements accessible within environment, the following command may work.\n\n``easy_install `cat requirements.txt` ``\n\n### Optional to factor roca keys upto 512 bits, Install neca:\nYou can follow instructions from : `https://www.mersenneforum.org/showthread.php?t=23087`\n\n## Todo (aka. Help wanted !)\n\n- Please read the CONTRIBUTING.md guideline for the bare minimum aceptable PRs.\n- Implement test method in each attack.\n- Assign the correct algorithm complexity in **Big O** notation for each attack.\n"
 },
 {
  "repo": "cyph/cyph",
  "language": "TypeScript",
  "readme_contents": "# Cyph\n\n[Cyph](https://www.cyph.com) is a cryptographically secure messaging and social networking service, providing an extreme level of privacy combined with best-in-class ease of use.\n\nCyph\u2019s patented technology \u2014 built by former SpaceX engineers, audited by Cure53, and the basis of research presentations at Black Hat and DEF CON \u2014 uniquely allows Cyph to solve the [major security and usability limitations of conventional solutions](https://www.cyph.com/blog/why-should-you-use-cyph).\n\n---\n\nCommands available to run locally (Node.js and Docker required):\n\n* `npm run serve`: Serves a local instance at http://localhost:42002\n\n* `npm run verify`: Verifies that the signed production build is reproducible against the local copy of the code\n\nRunning any of these commands for the first time will build the Docker image locally, which may take a while.\n\n---\n\nCyph is run by founders [Ryan Lester](http://github.com/buu700) and [Josh Boehm](https://github.com/JoshBoehm), former SpaceX engineers and best friends of over 20 years who had spent many all-nighters working closely together on various software projects. Cyph was initially started through the [Mach37 Cyber Accelerator](https://www.mach37.com), and is currently backed by the [Goel Fund](https://www.goelfund.com) and [Center for Innovative Technology](https://www.cit.org).\n\nCyph was a natural project for us to start together, as we\u2019ve always shared an interest in cypherpunk efforts to enhance individual freedom and privacy.\n\nWe spent our teens getting into programming; tinkering with Tor, Linux, and OTR encryption; and mining Bitcoin before it was cool. As adults (who regularly handled ITAR-sensitive information at SpaceX), the difficulty of communicating privately online had become a palpable thorn in our side \u2014 existing solutions were cumbersome to use, missing basic features, and not really all that secure in practice. The revelations brought to light by Edward Snowden ultimately inspired us to take this upon ourselves.\n\nWe knew there could be a better way, so we created Cyph.\n"
 },
 {
  "repo": "BabaSSL/BabaSSL",
  "language": "C",
  "readme_contents": "\u6982\u8ff0\n=========================\n\nBabaSSL\u662f\u4e00\u4e2a\u63d0\u4f9b\u73b0\u4ee3\u5bc6\u7801\u5b66\u7b97\u6cd5\u548c\u5b89\u5168\u901a\u4fe1\u534f\u8bae\u7684\u5f00\u6e90\u57fa\u7840\u5bc6\u7801\u5e93\uff0c\u4e3a\u5b58\u50a8\u3001\u7f51\u7edc\u3001\u5bc6\u94a5\u7ba1\u7406\u3001\u9690\u79c1\u8ba1\u7b97\u7b49\u8bf8\u591a\u4e1a\u52a1\u573a\u666f\u63d0\u4f9b\u5e95\u5c42\u7684\u5bc6\u7801\u5b66\u57fa\u7840\u80fd\u529b\uff0c\u5b9e\u73b0\u6570\u636e\u5728\u4f20\u8f93\u3001\u4f7f\u7528\u3001\u5b58\u50a8\u7b49\u8fc7\u7a0b\u4e2d\u7684\u79c1\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u548c\u53ef\u8ba4\u8bc1\u6027\uff0c\u4e3a\u6570\u636e\u751f\u547d\u5468\u671f\u4e2d\u7684\u9690\u79c1\u548c\u5b89\u5168\u63d0\u4f9b\u4fdd\u62a4\u80fd\u529b\u3002\n\n\n\u7279\u6027\n=========================\n\nBabaSSL\u63d0\u4f9b\u5982\u4e0b\u4e3b\u8981\u7684\u529f\u80fd\u7279\u6027\uff1a\n\n  * \u6280\u672f\u5408\u89c4\u80fd\u529b\n    * BabaSSL\u6b63\u5728\u53d6\u5f97\u56fd\u5bb6\u5bc6\u7801\u7ba1\u7406\u5c40\u5546\u7528\u5bc6\u7801\u68c0\u6d4b\u4e2d\u5fc3\u6388\u4e88\u7684\u201d\u8f6f\u4ef6\u5bc6\u7801\u6a21\u5757\u5b89\u5168\u4e00\u7ea7\u201c\u8d44\u8d28\n  * \u5bc6\u7801\u5b66\u7b97\u6cd5\n    * \u4e2d\u56fd\u5546\u7528\u5bc6\u7801\u7b97\u6cd5\uff1aSM2\u3001SM3\u3001SM4\u3001\u7956\u51b2\u4e4b\u7b49\n    * \u56fd\u9645\u4e3b\u6d41\u7b97\u6cd5\uff1aECDSA\u3001RSA\u3001AES\u3001SHA\u7b49\n    * \u540c\u6001\u52a0\u5bc6\u7b97\u6cd5\uff1aEC-ElGamal\u3001Paillier*\u7b49\n    * \u540e\u91cf\u5b50\u5bc6\u7801\u5b66*\uff1aLAC\u3001NTRU\u3001Saber\u3001Dilithium\u7b49\n  * \u5b89\u5168\u901a\u4fe1\u534f\u8bae\n    * \u652f\u6301GB/T 38636-2020 TLCP\u6807\u51c6\uff0c\u5373\u53cc\u8bc1\u4e66\u56fd\u5bc6\u901a\u4fe1\u534f\u8bae\n    * \u652f\u6301[RFC 8998](https://datatracker.ietf.org/doc/html/rfc8998)\uff0c\u5373TLS 1.3 + \u56fd\u5bc6\u5355\u8bc1\u4e66\n    * \u652f\u6301[QUIC](https://datatracker.ietf.org/doc/html/rfc9000) API\n    * \u652f\u6301Delegated Credentials\u529f\u80fd\uff0c\u57fa\u4e8e[draft-ietf-tls-subcerts-10](https://www.ietf.org/archive/id/draft-ietf-tls-subcerts-10.txt)\n    * \u652f\u6301TLS\u8bc1\u4e66\u538b\u7f29\n    * \u652f\u6301\u7d27\u51d1TLS\u534f\u8bae*\n\n\u6ce8\uff1a*\u53f7\u8868\u793a\u6b63\u5728\u652f\u6301\u4e2d\n\n\u6587\u6863\n=========================\n\nBabaSSL\u7684\u76f8\u5173\u6587\u6863\u7ec4\u7ec7\u5728 [BabaSSL\u6587\u6863\u7f51\u7ad9](https://babassl.readthedocs.io/) \u4e0a\u3002\n\n\u4ea4\u6d41\u7fa4\n=========================\n\nBabaSSL\u4f7f\u7528\u9489\u9489\u7fa4\u8fdb\u884c\u7528\u6237\u7b54\u7591\u548c\u4ea4\u6d41\uff0c\u6b22\u8fce\u626b\u7801\u5165\u7fa4\uff1a\n![QR](babassl-dingtalk.jpg)\n\n\u62a5\u544a\u5b89\u5168\u7f3a\u9677\n=========================\n\nBabaSSL\u76ee\u524d\u4f7f\u7528\u8682\u8681\u96c6\u56e2\u7684\u5a01\u80c1\u641c\u96c6\u7cfb\u7edf\uff0c\u8bf7\u8bbf\u95ee\u5982\u4e0b\u5730\u5740\u8fdb\u884c\u5b89\u5168\u7f3a\u9677\u7684\u62a5\u544a\uff1a\n\n * [https://security.alipay.com/](https://security.alipay.com/)\n\n\u6ce8\u610f\uff1a\u5bf9\u4e8e\u975e\u5b89\u5168\u76f8\u5173\u7684Bug\uff0c\u8bf7\u4f7f\u7528GitHub\u7684Issues\u8fdb\u884c\u63d0\u4ea4\u3002\n"
 },
 {
  "repo": "ZenGo-X/curv",
  "language": "Rust",
  "readme_contents": "[![Build Status](https://app.travis-ci.com/ZenGo-X/curv.svg?branch=master)](https://app.travis-ci.com/ZenGo-X/curv)\n[![Latest version](https://img.shields.io/crates/v/curv-kzen.svg)](https://crates.io/crates/curv-kzen)\n[![Docs](https://docs.rs/curv-kzen/badge.svg)](https://docs.rs/curv-kzen)\n[![License](https://img.shields.io/crates/l/curv-kzen)](LICENSE)\n[![dependency status](https://deps.rs/repo/github/ZenGo-X/curv/status.svg)](https://deps.rs/repo/github/ZenGo-X/curv)\n\nCurv\n=====================================\nCurv contains an extremely simple interface to onboard new elliptic curves. \nUse this library for general purpose elliptic curve cryptography. \n\nThe library has a built in support for some useful operations/primitives such as verifiable secret sharing, commitment \nschemes, zero knowledge proofs, and simple two party protocols such as ECDH and coin flip. The library comes with \nserialize/deserialize support to be used in higher level code to implement networking. \n\n### Usage\n\nTo use `curv` crate, add the following to your Cargo.toml:\n```toml\n[dependencies]\ncurv-kzen = \"0.9\"\n```\n\nThe crate will be available under `curv` name, e.g.:\n```rust\nuse curv::elliptic::curves::*;\n```\n\n### Currently Supported Elliptic Curves  \n\n|        Curve         |   low level library    |    curve description       |     \n|-------------------------------|------------------------|------------------------|\n|    **Secp256k1**    |        [rust-secp256k1](https://github.com/rust-bitcoin/rust-secp256k1)            |      [bitcoin wiki](https://en.bitcoin.it/wiki/Secp256k1)           |     \n|    **P-256**    |        [RustCrypto](https://crates.io/crates/p256)            |      [NIST.FIPS.186.4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf)           |     \n|    **Ed25519**    |        [cryptoxide](https://github.com/typed-io/cryptoxide/blob/master/src/curve25519.rs)            |      [BDLSY11](https://ed25519.cr.yp.to/ed25519-20110926.pdf)           |      \n|    **Ristretto**    |        [curve25519-dalek](https://github.com/dalek-cryptography/curve25519-dalek)            |     [ristretto group](https://ristretto.group/)           |      \n|    **BLS12-381**    |        [bls12-381](https://crates.io/crates/bls12_381)            |     [BLS12-381 For The Rest Of Us](https://hackmd.io/@benjaminion/bls12-381)           |     \n\n### Security  \nThe library was audited by [Kudelski security](https://www.kudelskisecurity.com/) on Feb19. The report can be found \n[here](https://github.com/KZen-networks/curv/tree/master/audit). No critical issue were found and all issues found \nwere fixed.\n\nThe code was reviewed independently by few other cryptographers. Special thanks goes to [Claudio Orlandi](http://cs.au.dk/~orlandi/) \nfrom Aarhus University. \n\nIn general security of the library is strongly dependent on the security of the low level libraries used. We chose only \nlibraries that are used as part of other big projects and went through heavy audit/review. \n\nThe library is not immune to side channel attacks but considerable effort was given to try and catch as many such \nattacks as possible (see audit report). \n\n### Build\nUse `cargo build` to build everything including curve implementations, cryptoprimitives, BigInt, etc.\n\n### Big integer implementation\nThe library supports a couple of bigint implementations and can easily switch between them.\nYou can choose any one which you prefer by specifying a feature:\n* **rust-gmp-kzen**, uses GMP bindings, requires GMP to be installed on a machine. Used by default.\n* **num-bigint**, Rust's pure implementation of big integer. In order to use it, put in Cargo.toml:\n  ```toml\n  [dependencies.curv-kzen]\n  version = \"0.8\"\n  default-features = false\n  features = [\"num-bigint\"]\n  ```\n  \n  **_Warning:_** `num-bigint` support is experimental and should not be used in production. For this\n  bigint implementation, we use prime numbers generator which is not considered secure.\n\n### Examples\nThe library includes some basic examples to get you going. To run them: \n`cargo run --example EXAMPLE_NAME -- CURVE_NAME`\nfor example: `cargo run --example proof_of_knowledge_of_dlog -- secp256k1`\n\n### Docs \nTo build docs, use:\n```bash\ncargo doc\nRUSTDOCFLAGS=\"--html-in-header katex-header.html\" cargo doc --no-deps --open\n```\n\n### License\nCurv is released under the terms of the MIT license. See [LICENSE](LICENSE) for more information.\n\n\n### Development Process & Contact\nThis library is maintained by ZenGo-X. Contributions are highly welcomed! Besides GitHub issues and PRs, feel free to [reach out](mailto:github@kzencorp.com) by mail or join ZenGo X [Telegram](https://t.me/joinchat/ET1mddGXRoyCxZ-7) for discussions on code and research. \n\n"
 },
 {
  "repo": "brendanashworth/generate-password",
  "language": "JavaScript",
  "readme_contents": "# Generate Password [![Build Status](https://travis-ci.org/brendanashworth/generate-password.svg?branch=master)](https://travis-ci.org/brendanashworth/generate-password) [![codecov](https://codecov.io/gh/brendanashworth/generate-password/branch/master/graph/badge.svg)](https://codecov.io/gh/brendanashworth/generate-password)\n\n[![Generate-Password NPM](https://nodei.co/npm/generate-password.png?downloads=true&downloadRank=true)](http://npmjs.org/package/generate-password)\n\n> Generate Password is a (relatively) extensive library for generating random and unique passwords.\n\n## Install\n\n```bash\n$ npm install generate-password --save\n```\n\n## Usage\n\n#### `generate([options])`\n\nGenerate one password with the given options. Returns a string.\n\n```javascript\nvar generator = require('generate-password');\n\nvar password = generator.generate({\n\tlength: 10,\n\tnumbers: true\n});\n\n// 'uEyMTw32v9'\nconsole.log(password);\n```\n\n#### `generateMultiple(amount[, options])`\n\nBulk generate multiple passwords at once, with the same options for all. Returns an array.\n\n```javascript\nvar generator = require('generate-password');\n\nvar passwords = generator.generateMultiple(3, {\n\tlength: 10,\n\tuppercase: false\n});\n\n// [ 'hnwulsekqn', 'qlioullgew', 'kosxwabgjv' ]\nconsole.log(passwords);\n```\n\n### Available options\nAny of these can be passed into the options object for each function.\n\n| Name                     | Description                                                           | Default Value |\n|--------------------------|-----------------------------------------------------------------------|---------------|\n| length                   | Integer, length of password.                                          | 10            |\n| numbers*                 | Boolean, put numbers in password.                                     | false         |\n| symbols*                 | Boolean or String, put symbols in password.                           | false         |\n| lowercase*               | Boolean, put lowercase in password                                    | true          |\n| uppercase*               | Boolean, use uppercase letters in password.                           | true          |\n| excludeSimilarCharacters | Boolean, exclude similar chars, like 'i' and 'l'.                     | false         |\n| exclude                  | String, characters to be excluded from password.                      | ''            |\n| strict                   | Boolean, password must include at least one character from each pool. | false         |\n\n*At least one should be true.\n"
 },
 {
  "repo": "serengil/crypto",
  "language": "Jupyter Notebook",
  "readme_contents": "# crypto\n\nThis repository covers both fundamentals of public key cryptography algorithms, tutorials and implementations. I've created this repository during the capture of the following online courses published on Udemy.\n\n[**Elliptic Curve Cryptography Masterclass**](https://www.udemy.com/course/elliptic-curve-cryptography-masterclass/?referralCode=C5E74D486DD29F6DAF4A)\n\n[**Public Key Cryptography From Scratch In Python**](https://www.udemy.com/course/public-key-cryptography-from-scratch-in-python/?referralCode=8AF2BB504D810A4C99CB)\n\n[**Cryptography Basics From Scratch In Python**](https://www.udemy.com/course/cryptography-basics-from-scratch-in-python/?referralCode=0B65C57251E2674FAC2C)\n\n\n\n## Public Key Cryptography From Scratch In Python\n\n1- **Diffie Hellman Key Exchange Algorithm** [`Code`](https://github.com/serengil/crypto/blob/master/python/diffiehellman.py)\n\n2- **RSA** for Encryption, Digital Signature and Key Exchange [`Code`](https://github.com/serengil/crypto/blob/master/python/rsa.py), [`Tutorial`](http://sefiks.com/2018/05/21/the-math-behind-rsa-algorithm/)\n\n3- **El Gamal** for Encryption and Digital Signature [`Code`](https://github.com/serengil/crypto/blob/master/python/elgamal.py)\n\n4- **Digital Signature Algorithm (DSA)** [`Code`](https://github.com/serengil/crypto/blob/master/python/dsa.py)\n\n5- **Discrete Logarighm Problem** [`Code`](https://github.com/serengil/crypto/blob/master/python/discretelogarithm.py)\n\n\n\n## Elliptic Curve Cryptography Masterclass In Python\n\n1- **Elliptic Curve Cryptography with Python** [`Code`](https://github.com/serengil/crypto/blob/master/python/EccApp.py), [`Tutorial`](https://sefiks.com/2016/03/13/the-math-behind-elliptic-curve-cryptography/), [`Video`](https://youtu.be/iydGkrjJkSM)\n\nThis code covers key exchange, digital signature, symmetric encryption, order of group (number of points in finite field) and elliptic curve discrete logarithm problem. This is dependent to [EccCore.py](https://github.com/serengil/crypto/blob/master/python/EccCore.py).\n\n2- **Edwards Curve Digital Signature Algorithm** [`Code`](https://github.com/serengil/crypto/blob/master/python/EdDSA.py), [`Tutorial`](https://sefiks.com/2018/12/24/a-gentle-introduction-to-edwards-curve-digital-signature-algorithm-eddsa/)\n\n[Edwards curves](https://sefiks.com/2018/12/19/a-gentle-introduction-to-edwards-curves/) offer faster calculations than regular elliptic curve forms.\n\n3- **Finding Bitcoin Address** [`Code`](https://github.com/serengil/crypto/blob/master/python/Bitcoin.py), [`Tutorial`](https://sefiks.com/2018/03/26/a-step-by-step-bitcoin-address-example/), [`Configuration`](https://github.com/serengil/crypto/blob/master/configuration/bitcoin-configuration.txt)\n\nA bitcoin address consists of a public key.\n\n4- **Elliptic Curve ElGamal** [`Code`](https://github.com/serengil/crypto/blob/master/python/EC-ElGamal.py)\n\nPreviously, we have implemented symmetric encryption but in that case we encrypt and decrypt a point on the curve. Now, we will transform a text message to a elliptic curve point and apply encryption. However, this is a de facto implementation because decryption requires to solve ECDLP.\n\n## Elliptic Curve Cryptography Masterclass In Java\n\n1- **Elliptic Curve Cryptography with Java** [`Up-to-date Code`](https://github.com/serengil/crypto/blob/master/com.crypto.action/EccOverFiniteField.java), [`Legacy Code`](https://github.com/serengil/crypto/blob/master/com.crypto.action/EccOverRealNumbers.java)\n\nThis java project is dependent to [entity](https://github.com/serengil/crypto/tree/master/com.crypto.entity) objects.\n\n## Cryptography Basics From Scratch In Python\n\n\n\n1- **Caesar Cipher** [`Code`](https://github.com/serengil/crypto/blob/master/python/classical/Caesar.ipynb)\n\n2- **Substitution Cipher** [`Code`](https://github.com/serengil/crypto/blob/master/python/classical/Substitution.ipynb)\n\n3- **Affine Cipher** [`Code`](https://github.com/serengil/crypto/blob/master/python/classical/Affine.ipynb)\n\n4- **Homophonic Substitution Cipher** [`Code`](https://github.com/serengil/crypto/blob/master/python/classical/Homophonic.ipynb)\n\n5- **Permutation Cipher** [`Code`](https://github.com/serengil/crypto/blob/master/python/classical/Permutation.ipynb)\n\n6- **Hill Cipher** [`Code`](https://github.com/serengil/crypto/blob/master/python/classical/Hill.ipynb), [`Tutorial`](https://sefiks.com/2018/12/04/a-step-by-step-hill-cipher-example/)\n\n7- **Vig\u00e9nere Cipher** [`Code`](https://github.com/serengil/crypto/blob/master/python/classical/Vigenere.ipynb)\n\n8- **Kasiski Examination** [`Code`](https://github.com/serengil/crypto/blob/master/python/classical/Kasiski.ipynb)\n\n9- **Enigma Machine** [`Video`](https://youtu.be/XPd8LCxwrsc)\n\n# Support\n\nThere are many ways to support a project - starring the GitHub repos is one.\n\n# License\n\nThis repository is licensed under MIT license - see [`LICENSE`](https://github.com/serengil/crypto/blob/master/LICENSE) for more details\n"
 },
 {
  "repo": "Savjee/SavjeeCoin",
  "language": "JavaScript",
  "readme_contents": "<p align=\"center\">\n  <a href=\"\" rel=\"noopener\">\n <img width=200px height=200px src=\"https://i.imgur.com/VELRxXl.png\" alt=\"Project logo\"></a>\n</p>\n\n<h3 align=\"center\">SavjeeCoin</h3>\n\n<div align=\"center\">\n\n  [![.github/workflows/ci.yml](https://github.com/Savjee/SavjeeCoin/actions/workflows/ci.yml/badge.svg)](https://github.com/Savjee/SavjeeCoin/actions/workflows/ci.yml)\n  [![Coverage Status](https://coveralls.io/repos/github/Savjee/SavjeeCoin/badge.svg?branch=master)](https://coveralls.io/github/Savjee/SavjeeCoin?branch=master)\n  [![GitHub Issues](https://img.shields.io/github/issues/Savjee/SavjeeCoin.svg)](https://github.com/Savjee/SavjeeCoin/issues)\n  [![GitHub Pull Requests](https://img.shields.io/github/issues-pr/Savjee/SavjeeCoin.svg)](https://github.com/Savjee/SavjeeCoin/pulls)\n  [![License](https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE)\n\n</div>\n\n---\n\n*\u26a0\ufe0f For education purposes only. This is by no means a complete implementation and it is by no means secure!*\n\n## Features\n\n* Simple proof-of-work algorithm\n* Verify blockchain (to prevent tampering)\n* Generate wallet (private/public key)\n* Sign transactions\n\n## \ud83c\udfc1 Getting Started <a name = \"getting_started\"></a>\n\n### Install library\n```\nnpm install --save savjeecoin\n```\n\n### Generate a keypair\nTo make transactions on this blockchain you need a keypair. The public key becomes your wallet address and the private key is used to sign transactions.\n\n```js\nconst EC = require('elliptic').ec;\nconst ec = new EC('secp256k1');\n\nconst myKey = ec.genKeyPair();\n```\n\nThe `myKey` object now contains your public & private key:\n\n```js\nconsole.log('Public key:', myKey.getPublic('hex'));\nconsole.log('Private key:', myKey.getPrivate('hex'));\n```\n\n### Create a blockchain instance\nNow you can create a new instance of a Blockchain:\n\n```js\nconst {Blockchain, Transaction} = require('savjeecoin');\n\nconst myChain = new Blockchain();\n```\n\n### Adding transactions\n```js\n// Transfer 100 coins from my wallet to \"toAddress\"\nconst tx = new Transaction(myKey.getPublic('hex'), 'toAddress', 100);\ntx.signTransaction(myKey);\n\nmyChain.addTransaction(tx);\n```\n\nTo finalize this transaction, we have to mine a new block. We give this method our wallet address because we will receive a mining reward:\n\n```js\nmyChain.minePendingTransactions(myKey.getPublic('hex'));\n```\n\n\n---\n\n## \ud83d\udcfd Video tutorial\nThis source code comes from [my video series on YouTube](https://www.youtube.com/watch?v=zVqczFZr124&list=PLzvRQMJ9HDiTqZmbtFisdXFxul5k0F-Q4). You can check them here:\n\n| Video 1: Simple implementation | Video 2: Adding Proof-of-work |\n:-------------------------:|:-------------------------:\n[![](https://img.youtube.com/vi/zVqczFZr124/maxresdefault.jpg)](https://www.youtube.com/watch?v=zVqczFZr124) | [![](https://img.youtube.com/vi/HneatE69814/maxresdefault.jpg)](https://www.youtube.com/watch?v=HneatE69814)\n| Video 3: Mining rewards & transactions | Video 4: Signing transactions |\n[![](https://img.youtube.com/vi/fRV6cGXVQ4I/maxresdefault.jpg)](https://www.youtube.com/watch?v=fRV6cGXVQ4I) | [![](https://img.youtube.com/vi/kWQ84S13-hw/maxresdefault.jpg)](https://www.youtube.com/watch?v=kWQ84S13-hw)\n| Video 5: Building a front-end in Angular\n[![](https://img.youtube.com/vi/AQV0WNpE_3g/maxresdefault.jpg)](https://www.youtube.com/watch?v=AQV0WNpE_3g) |\n"
 },
 {
  "repo": "herumi/mcl",
  "language": "Assembly",
  "readme_contents": "[![Build Status](https://github.com/herumi/mcl/actions/workflows/main.yml/badge.svg)](https://github.com/herumi/mcl/actions/workflows/main.yml)\r\n\r\n# mcl\r\n\r\nA portable and fast pairing-based cryptography library.\r\n\r\n# Abstract\r\n\r\nmcl is a library for pairing-based cryptography,\r\nwhich supports the optimal Ate pairing over BN curves and BLS12-381 curves.\r\n\r\n# News\r\n- the performance of `{G1,G2}::mulVec(z, xVec, yVec, n)` has improved for n >= 256. (about 2x speed up for n = 512).\r\n  - But it changes the type of xVec from `const G*` to `G*` because xVec may be normalized when computing.\r\n  - fix mul(G, G, F) for F = Fp at v1.61\r\n- add set DST functions for hashMapToGi\r\n- add F::invVec, G::normalizeVec\r\n- improve SECP256K1 for x64\r\n- add G1::mulVecMT, G2::mulVecMT (enabled by MCL_USE_OMP=1)\r\n- improve mulMod of SECP256K1 for wasm\r\n- fix FpToG1(P, u, v) and Fp2ToG2(P, u, v) when u == v (This bug does not affect mapToG1 and mapToG2).\r\n- add millerLoopVecMT (enabled if built with MCL_USE_OMP=1)\r\n- support s390x(systemz)\r\n- improve M1 mac performance\r\n- set default `MCL_MAX_BIT_SIZE=512` so disable to support `NICT_P521`.\r\n- improve performance\r\n- support M1 mac\r\n- dst for mapToG1 has changed to `BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_POP_`.\r\n- `mclBn_eth*` functions are removed.\r\n- `mcl::bn::mapToG1(G1& out, const Fp& v)` supports `BLS12_MAP_FP_TO_G1` in [EIP 2537](https://eips.ethereum.org/EIPS/eip-2537).\r\n- `mcl::bn::hashAndMapToG1(G1& out, const void *msg, size_t msgSize)` supports ([hash-to-curve-09 BLS12381G1_XMD:SHA-256_SSWU_RO_](https://www.ietf.org/id/draft-irtf-cfrg-hash-to-curve-09.html#name-bls12381g1_xmdsha-256_sswu_))\r\n- `MCL_MAP_TO_MODE_HASH_TO_CURVE_07` is added for [hash-to-curve-draft-07](https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/07/).\r\n\r\n# Support architecture\r\n\r\n- x86-64 Windows + Visual Studio 2019 (or later)\r\n- x86, x86-64 Linux + gcc/clang\r\n- x86-64, M1 macOS\r\n- ARM / ARM64 Linux\r\n- WebAssembly\r\n- Android\r\n- iPhone\r\n- s390x(systemz)\r\n  - install llvm and clang, and `make UPDATE_ASM=1` once.\r\n- (maybe any platform to be supported by LLVM)\r\n\r\n# Support curves\r\n\r\n- BN curve ; p(z) = 36z^4 + 36z^3 + 24z^2 + 6z + 1.\r\n  - BN254 ; a BN curve over the 254-bit prime p(z) where z = -(2^62 + 2^55 + 1).\r\n  - BN\\_SNARK1 ; a BN curve over a 254-bit prime p such that n := p + 1 - t has high 2-adicity.\r\n  - BN381\\_1 ; a BN curve over the 381-bit prime p(z) where z = -(2^94 + 2^76 + 2^72 + 1).\r\n  - BN462 ; a BN curve over the 462-bit prime p(z) where z = 2^114 + 2^101 - 2^14 - 1.\r\n- BLS12\\_381 ; [a BLS12-381 curve](https://blog.z.cash/new-snark-curve/)\r\n\r\n# C-API\r\nsee [api.md](api.md) and [FAQ](api.md#faq) for serialization and hash-to-curve.\r\n\r\n# How to build on Linux and macOS\r\nx86-64/ARM/ARM64 Linux, macOS and mingw64 are supported.\r\n\r\n## Installation Requirements\r\n\r\n[GMP](https://gmplib.org/) is necessary (default setting).\r\n\r\n```\r\napt install libgmp-dev # on Ubuntu\r\n```\r\n\r\n## How to build with Makefile\r\n\r\n```\r\ngit clone https://github.com/herumi/mcl\r\ncd mcl\r\nmake -j4\r\n```\r\n\r\n- `lib/libmcl.*` ; core library\r\n- `lib/libmclbn384_256.*` ; library to use C-API of BLS12-381 pairing\r\n\r\n## How to make from src/{base,bint}{32,64}.ll\r\n\r\nclang (clang-cl on Windows) is necessary to build files with a suffix ll.\r\n\r\n- BIT = 64 (if 64-bit CPU) else 32\r\n- `src/base${BIT}.ll` is necessary if `MCL_USE_LLVM` is defined.\r\n  - This code is used if xbyak is not used.\r\n- `src/bint${BIT}.ll` is necessary if `MCL_BINT_ASM=1`.\r\n  - `src/bint-x64-{amd64,win}.asm` is used instead if `MCL_BINT_ASM_X64=1`.\r\n  - It is faster than `src/bint64.ll` because it uses mulx/adox/adcx.\r\n\r\nThese files may be going to be unified in the future.\r\n\r\n## How to test of BLS12-381 pairing\r\n\r\n```\r\n# C\r\nmake bin/bn_c384_256_test.exe && bin/bn_c384_256_test.exe\r\n\r\n# C++\r\nmake bin/bls12_test.exe && bin/bls12_test.exe\r\n```\r\n\r\n## How to profile on Linux\r\n\r\n### Use perf\r\n```\r\nmake MCL_USE_PROF=1 bin/bls12_test.exe\r\nenv MCL_PROF=1 bin/bls12_test.exe\r\n```\r\n\r\n### Use Intel VTune profiler\r\nSupporse VTune is installed in `/opt/intel/vtune_amplifier/`.\r\n```\r\nmake MCL_USE_PROF=2 bin/bls12_test.exe\r\nenv MCL_PROF=2 bin/bls12_test.exe\r\n```\r\n\r\n## How to build on 32-bit x86 Linux\r\n\r\nBuild GMP for 32-bit mode (`env ABI=32 ./configure --enable-cxx ...`) and install `<lib32>` at yourself.\r\n\r\n```\r\nmake ARCH=x86 CFLAGS_USER=\"-I <lib32>/include\" LDFLAGS_USER=\"-L <lib32>/lib -Wl,-rpath,<lib32>/lib\"\r\n```\r\n\r\n# How to build on 64-bit Windows with Visual Studio\r\n\r\nOpen a console window, and\r\n```\r\ngit clone https://github.com/herumi/mcl\r\ncd mcl\r\n\r\n# static library\r\nmklib\r\nmk -s test\\bls12_test.cpp && bin\\bls12_test.exe\r\n\r\n# dynamic library\r\nmklib dll\r\nmk -d test\\bls12_test.cpp && bin\\bls12_test.exe\r\n```\r\n(not maintenanced)\r\nOpen mcl.sln and build or if you have msbuild.exe\r\n```\r\nmsbuild /p:Configuration=Release\r\n```\r\n\r\n# C# test\r\n\r\n```\r\ncd mcl\r\nmklib dll\r\ncd ffi/cs\r\ndotnet build mcl.sln\r\ncd ../../bin\r\n../ffi/cs/test/bin/Debug/netcoreapp3.1/test.exe\r\n```\r\n\r\n# How to build with CMake\r\n\r\nFor Linux, macOS, etc.\r\n```\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake\r\n```\r\nFor Visual Studio,\r\n```\r\nmkdir build\r\ncd build\r\ncmake .. -A x64\r\nmsbuild mcl.sln /p:Configuration=Release /m\r\n```\r\n\r\nSome architectures requre clang.\r\n```\r\nmkdir build\r\ncd build\r\ncmake .. -DCMAKE_CXX_COMPILER=clang++\r\n```\r\n\r\n## options\r\n\r\nsee `cmake .. -LA`.\r\n\r\n## tests\r\nmake test binaries in `./bin`.\r\n```\r\ncmake .. -DBUILD_TESTING=ON\r\nmake -j4\r\n```\r\n\r\n# How to build for wasm(WebAssembly)\r\nmcl supports emcc (Emscripten) and `test/bn_test.cpp` runs on browers such as Firefox, Chrome and Edge.\r\n\r\n* [IBE on browser](https://herumi.github.io/mcl-wasm/ibe-demo.html)\r\n* [SHE on browser](https://herumi.github.io/she-wasm/she-demo.html)\r\n* [BLS signature on brower](https://herumi.github.io/bls-wasm/bls-demo.html)\r\n\r\nThe timing of a pairing on `BN254` is 2.8msec on 64-bit Firefox with Skylake 3.4GHz.\r\n\r\n# Node.js\r\n\r\n* [mcl-wasm](https://www.npmjs.com/package/mcl-wasm) pairing library\r\n* [bls-wasm](https://www.npmjs.com/package/bls-wasm) BLS signature library\r\n* [she-wasm](https://www.npmjs.com/package/she-wasm) 2 Level Homomorphic Encryption library\r\n\r\n# Benchmark\r\n\r\n## The latest benchmark(2018/11/7)\r\n\r\n### Intel Core i7-6700 3.4GHz(Skylake), Ubuntu 18.04.1 LTS\r\n\r\ncurveType |              binary|clang-6.0.0|gcc-7.3.0|\r\n----------|--------------------|-----------|---------|\r\nBN254     |    bin/bn\\_test.exe|    882Kclk|  933Kclk|\r\nBLS12-381 | bin/bls12\\_test.exe|   2290Kclk| 2630Kclk|\r\n\r\n### Intel Core i7-7700 3.6GHz(Kaby Lake), Ubuntu 18.04.1 LTS on Windows 10 Vmware\r\n\r\ncurveType |              binary|clang-6.0.0|gcc-7.3.0|\r\n----------|--------------------|-----------|---------|\r\nBN254     |    bin/bn\\_test.exe|    900Kclk|  954Kclk|\r\nBLS12-381 | bin/bls12\\_test.exe|   2340Kclk| 2680Kclk|\r\n\r\n* now investigating the reason why gcc is slower than clang.\r\n\r\n## Higher-bit BN curve benchmark\r\n\r\nFor JavaScript(WebAssembly), see [ID based encryption demo](https://herumi.github.io/mcl-wasm/ibe-demo.html).\r\n\r\nparamter   |  x64| Firefox on x64|Safari on iPhone7|\r\n-----------|-----|---------------|-----------------|\r\nBN254      | 0.25|           2.48|             4.78|\r\nBN381\\_1   | 0.95|           7.91|            11.74|\r\nBN462      | 2.16|          14.73|            22.77|\r\n\r\n* x64 : 'Kaby Lake Core i7-7700(3.6GHz)'.\r\n* Firefox : 64-bit version 58.\r\n* iPhone7 : iOS 11.2.1.\r\n* BN254 is by `test/bn_test.cpp`.\r\n* BN381\\_1 and BN462 are  by `test/bn512_test.cpp`.\r\n* All the timings  are given in ms(milliseconds).\r\n\r\nThe other benchmark results are [bench.txt](bench.txt).\r\n\r\n## An old benchmark of a BN curve BN254(2016/12/25).\r\n\r\n* x64, x86 ; Inte Core i7-6700 3.4GHz(Skylake) upto 4GHz on Ubuntu 16.04.\r\n    * `sudo cpufreq-set -g performance`\r\n* arm ; 900MHz quad-core ARM Cortex-A7 on Raspberry Pi2, Linux 4.4.11-v7+\r\n* arm64 ; 1.2GHz ARM Cortex-A53 [HiKey](http://www.96boards.org/product/hikey/)\r\n\r\nsoftware                                                 |   x64|  x86| arm|arm64(msec)\r\n---------------------------------------------------------|------|-----|----|-----\r\n[ate-pairing](https://github.com/herumi/ate-pairing)     | 0.21 |   - |  - |    -\r\nmcl                                                      | 0.31 | 1.6 |22.6|  3.9\r\n[TEPLA](http://www.cipher.risk.tsukuba.ac.jp/tepla/)     | 1.76 | 3.7 | 37 | 17.9\r\n[RELIC](https://github.com/relic-toolkit/relic) PRIME=254| 0.30 | 3.5 | 36 |    -\r\n[MIRACL](https://github.com/miracl/MIRACL) ake12bnx      | 4.2  |   - | 78 |    -\r\n[NEONabe](http://sandia.cs.cinvestav.mx/Site/NEONabe)    |   -  |   - | 16 |    -\r\n\r\n* compile option for RELIC\r\n```\r\ncmake -DARITH=x64-asm-254 -DFP_PRIME=254 -DFPX_METHD=\"INTEG;INTEG;LAZYR\" -DPP_METHD=\"LAZYR;OATEP\"\r\n```\r\n\r\n# SELinux\r\nmcl uses Xbyak JIT engine if it is available on x64 architecture,\r\notherwise mcl uses a little slower functions generated by LLVM.\r\nThe default mode enables SELinux security policy on CentOS, then JIT is disabled.\r\n```\r\n% sudo setenforce 1\r\n% getenforce\r\nEnforcing\r\n% bin/bn_test.exe\r\nJIT 0\r\npairing   1.496Mclk\r\nfinalExp 581.081Kclk\r\n\r\n% sudo setenforce 0\r\n% getenforce\r\nPermissive\r\n% bin/bn_test.exe\r\nJIT 1\r\npairing   1.394Mclk\r\nfinalExp 546.259Kclk\r\n```\r\n\r\n# How to make asm files (optional)\r\nThe asm files generated by this way are already put in `src/asm`, then it is not necessary to do this.\r\n\r\nInstall [LLVM](http://llvm.org/).\r\n```\r\nmake MCL_USE_LLVM=1 LLVM_VER=<llvm-version> UPDATE_ASM=1\r\n```\r\nFor example, specify `-3.8` for `<llvm-version>` if `opt-3.8` and `llc-3.8` are installed.\r\n\r\nIf you want to use Fp with 1024-bit prime on x86-64, then\r\n```\r\nmake MCL_USE_LLVM=1 LLVM_VER=<llvm-version> UPDATE_ASM=1 MCL_MAX_BIT_SIZE=1024\r\n```\r\n\r\n# API for Two level homomorphic encryption\r\n* [_Efficient Two-level Homomorphic Encryption in Prime-order Bilinear Groups and A Fast Implementation in WebAssembly_](https://dl.acm.org/citation.cfm?doid=3196494.3196552), N. Attrapadung, G. Hanaoka, S. Mitsunari, Y. Sakai,\r\nK. Shimizu, and T. Teruya. ASIACCS 2018\r\n* [she-api](https://github.com/herumi/mcl/blob/master/misc/she/she-api.md)\r\n* [she-api(Japanese)](https://github.com/herumi/mcl/blob/master/misc/she/she-api-ja.md)\r\n\r\n# Java API\r\nSee [java.md](https://github.com/herumi/mcl/blob/master/ffi/java/java.md)\r\n\r\n# License\r\n\r\nmodified new BSD License\r\nhttp://opensource.org/licenses/BSD-3-Clause\r\n\r\nThis library contains some part of the followings software licensed by BSD-3-Clause.\r\n* [xbyak](https://github.com/herumi/xbyak)\r\n* [cybozulib](https://github.com/herumi/cybozulib)\r\n* [Lifted-ElGamal](https://github.com/aistcrypt/Lifted-ElGamal)\r\n\r\n# References\r\n* [ate-pairing](https://github.com/herumi/ate-pairing/)\r\n* [_Faster Explicit Formulas for Computing Pairings over Ordinary Curves_](http://dx.doi.org/10.1007/978-3-642-20465-4_5),\r\n D.F. Aranha, K. Karabina, P. Longa, C.H. Gebotys, J. Lopez,\r\n EUROCRYPTO 2011, ([preprint](http://eprint.iacr.org/2010/526))\r\n* [_High-Speed Software Implementation of the Optimal Ate Pairing over Barreto-Naehrig Curves_](http://dx.doi.org/10.1007/978-3-642-17455-1_2),\r\n   Jean-Luc Beuchat, Jorge Enrique Gonz\u00e1lez D\u00edaz, Shigeo Mitsunari, Eiji Okamoto, Francisco Rodr\u00edguez-Henr\u00edquez, Tadanori Teruya,\r\n  Pairing 2010, ([preprint](http://eprint.iacr.org/2010/354))\r\n* [_Faster hashing to G2_](https://link.springer.com/chapter/10.1007/978-3-642-28496-0_25),Laura Fuentes-Casta\u00f1eda,  Edward Knapp,  Francisco Rodr\u00edguez-Henr\u00edquez,\r\n  SAC 2011, ([PDF](http://cacr.uwaterloo.ca/techreports/2011/cacr2011-26.pdf))\r\n* [_Skew Frobenius Map and Efficient Scalar Multiplication for Pairing\u2013Based Cryptography_](https://www.researchgate.net/publication/221282560_Skew_Frobenius_Map_and_Efficient_Scalar_Multiplication_for_Pairing-Based_Cryptography),\r\nY. Sakemi, Y. Nogami, K. Okeya, Y. Morikawa, CANS 2008.\r\n\r\n# compatilibity\r\n\r\n- mclBnGT_inv returns a - b w, a conjugate of x for x = a + b w in Fp12 = Fp6[w]\r\n  - use mclBnGT_invGeneric if x is not in GT\r\n- mclBn_setETHserialization(true) (de)serialize acoording to [ETH2.0 serialization of BLS12-381](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/bls_signature.md#point-representations) when BLS12-381 is used.\r\n- (Break backward compatibility) libmcl_dy.a is renamed to libmcl.a\r\n  - The option SHARE_BASENAME_SUF is removed\r\n- 2nd argument of `mclBn_init` is changed from `maxUnitSize` to `compiledTimeVar`, which must be `MCLBN_COMPILED_TIME_VAR`.\r\n- break backward compatibility of mapToGi for BLS12. A map-to-function for BN is used.\r\nIf `MCL_USE_OLD_MAPTO_FOR_BLS12` is defined, then the old function is used, but this will be removed in the future.\r\n\r\n# FAQ\r\n\r\n## How do I set the hash value to Fr?\r\nThe behavior of `setHashOf` function may be a little different from what you want.\r\n  - https://github.com/herumi/mcl/blob/master/api.md#hash-and-mapto-functions\r\n  - https://github.com/herumi/mcl/blob/master/api.md#set-buf0bufsize-1-to-x-with-masking-according-to-the-following-way\r\n\r\nPlease use the following code:\r\n```\r\ntemplate<class F>\r\nvoid setHash(F& x, const void *msg, size_t msgSize)\r\n{\r\n    uint8_t md[32];\r\n    mcl::fp::sha256(md, sizeof(md), msg, msgSize);\r\n    x.setBigEndianMod(md, sizeof(md));\r\n    // or x.setLittleEndianMod(md, sizeof(md));\r\n}\r\n```\r\n\r\n\r\n# History\r\n- 2022/Apr/10 v1.60 improve {G1,G2}::mulVec\r\n- 2022/Mar/25 v1.59 add set DST functions for hashMapToGi\r\n- 2022/Mar/24 add F::invVec, G::normalizeVec\r\n- 2022/Mar/08 v1.58 improve SECP256K1 for x64\r\n- 2022/Feb/13 v1.57 add mulVecMT\r\n- 2021/Aug/26 v1.52 improve {G1,G2}::isValidOrder() for BLS12-381\r\n- 2021/May/04 v1.50 support s390x(systemz)\r\n- 2021/Apr/21 v1.41 fix inner function of mapToGi for large dst (not affect hashAndMapToGi)\r\n- 2021/May/24 v1.40 fix sigsegv in valgrind\r\n- 2021/Jan/28 v1.31 fix : call setOrder in init for isValidOrder\r\n- 2021/Jan/28 v1.30 a little optimization of Fp operations\r\n- 2020/Nov/14 v1.28 support M1 mac\r\n- 2020/Jun/07 v1.22 remove old hash-to-curve functions\r\n- 2020/Jun/04 v1.21 mapToG1 and hashAndMapToG1 are compatible to irtf/eip-2537\r\n- 2020/May/13 v1.09 support draft-irtf-cfrg-hash-to-curve-07\r\n- 2020/Mar/26 v1.07 change DST for hash-to-curve-06\r\n- 2020/Mar/15 v1.06 support hash-to-curve-06\r\n- 2020/Jan/31 v1.05 mclBn_ethMsgToFp2 has changed to append zero byte at the end of msg\r\n- 2020/Jan/25 v1.04 add new hash functions\r\n- 2019/Dec/05 v1.03 disable to check the order in setStr\r\n- 2019/Sep/30 v1.00 add some functions to bn.h ; [api.md](api.md).\r\n- 2019/Sep/22 v0.99 add mclBnG1_mulVec, etc.\r\n- 2019/Sep/08 v0.98 bugfix Ec::add(P, Q, R) when P == R\r\n- 2019/Aug/14 v0.97 add some C api functions\r\n- 2019/Jul/26 v0.96 improved scalar multiplication\r\n- 2019/Jun/03 v0.95 fix a parser of 0b10 with base = 16\r\n- 2019/Apr/29 v0.94 mclBn_setETHserialization supports [ETH2.0 serialization of BLS12-381](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/bls_signature.md#point-representations)\r\n- 2019/Apr/24 v0.93 support ios\r\n- 2019/Mar/22 v0.92 shortcut for Ec::mul(Px, P, x) if P = 0\r\n- 2019/Mar/21 python binding of she256 for Linux/Mac/Windows\r\n- 2019/Mar/14 v0.91 modp supports mcl-wasm\r\n- 2019/Mar/12 v0.90 fix Vint::setArray(x) for x == this\r\n- 2019/Mar/07 add mclBnFr_setLittleEndianMod, mclBnFp_setLittleEndianMod\r\n- 2019/Feb/20 LagrangeInterpolation sets out = yVec[0] if k = 1\r\n- 2019/Jan/31 add mclBnFp_mapToG1, mclBnFp2_mapToG2\r\n- 2019/Jan/31 fix crash on x64-CPU without AVX (thanks to mortdeus)\r\n\r\n# Author\r\n\r\nMITSUNARI Shigeo(herumi@nifty.com)\r\n\r\n# Sponsors welcome\r\n[GitHub Sponsor](https://github.com/sponsors/herumi)\r\n"
 },
 {
  "repo": "cambrian/accumulator",
  "language": "Rust",
  "readme_contents": "# accumulator\nCryptographic accumulators in Rust, implemented over a generic group interface. Batteries (RSA and\nclass group implementations) included!\n\n## Installation\n```toml\n# Cargo.toml\n[dependencies]\naccumulator = { git = \"https://github.com/cambrian/accumulator.git\", tag = \"v0.2.1\" }\n```\n\n## Docs\nAvailable [here](https://cambrian.dev/accumulator/docs), and feel free to reach out with any\nquestions.\n\n## Demo\nWe have a [proof-of-concept](https://github.com/cambrian/accumulator-demo) for stateless Bitcoin\nnodes.\n\n## Contributing\nPlease see our\n[contribution guide](https://github.com/cambrian/accumulator/blob/master/CONTRIBUTING.md). We are\nlooking for long-term maintainers!\n"
 },
 {
  "repo": "trussed-dev/trussed",
  "language": "Rust",
  "readme_contents": "# Trussed\u00ae\n\nModern Cryptographic Firmware\n\n\n## Status\n\nVery much WIP. Actively developed. Unstable APIs.\n\n\n## Resources\n\n- API docs: <https://trussed-dev.github.io/trussed>\n- Example: <https://github.com/trussed-dev/trussed-totp-pc-tutorial>\n- Discussions: <https://github.com/trussed-dev/trussed/discussions>\n- Matrix: <https://matrix.to/#/#trussed:matrix.org>\n- Email: <mailto:alliance@trussed.dev>\n- Website: <https://trussed.dev>\n\n\n## Running tests\n\n```bash\ncargo test\n```\n\n#### License\n\n<sup>`trussed` is licensed under either of [Apache License, Version 2.0](LICENSE-APACHE) or [MIT License](LICENSE-MIT) at your option.</sup>\n<br>\n<sub>Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.</sub>\n"
 },
 {
  "repo": "cryptosubtlety/intuitive-advanced-cryptography",
  "language": null,
  "readme_contents": ""
 },
 {
  "repo": "bitpay/php-bitpay-client",
  "language": "PHP",
  "readme_contents": "# This repository is no longer maintained and it will be archived by the end of 2019, please refer to the latest version [Here](https://github.com/bitpay/php-bitpay-client-v2)\n"
 },
 {
  "repo": "EasyCrypt/easycrypt",
  "language": "OCaml",
  "readme_contents": "EasyCrypt: Computer-Aided Cryptographic Proofs\n====================================================================\n\nEasyCrypt is a toolset for reasoning about relational properties of\nprobabilistic computations with adversarial code. Its main application\nis the construction and verification of game-based cryptographic\nproofs.\n\nTable of Contents\n--------------------------------------------------------------------\n\n * [EasyCrypt: Computer-Aided Cryptographic Proofs](#easycrypt-computer-aided-cryptographic-proofs)\n    - [Installation requirements](#installation-requirements)\n    - [Via OPAM](#via-opam)\n      - [Installing requirements using OPAM (POSIX systems)](#installing-requirements-using-opam-posix-systems)\n      - [Installing requirements using OPAM (non-POSIX systems)](#installing-requirements-using-opam-non-posix-systems)\n    - [Via NIX](#via-nix)\n * [Configuring Why3](#configuring-why3)\n    - [Note on prover versions](#note-on-prover-versions)\n * [Installing/Compiling EasyCrypt](#installingcompiling-easycrypt)\n * [Proof General Front-End](#proof-general-front-end)\n    - [Installing using opam](#installing-using-opam)\n    - [Installing from sources](#installing-from-sources)\n\n\nInstallation requirements\n--------------------------------------------------------------------\n\nEasyCrypt uses the following third-party tools/libraries:\n\n * OCaml (>= 4.08)\n\n     Available at http://caml.inria.fr/\n\n * OCamlbuild\n\n * Why3 (= 1.5.x)\n\n     Available at <http://why3.lri.fr/>\n\n     Why3 must be installed with a set a provers.\n     See <http://why3.lri.fr/#provers>\n\n     Why3 libraries must be installed (make byte && make install-lib)\n\n * Menhir <http://gallium.inria.fr/~fpottier/menhir/>\n\n * OCaml Batteries Included <http://batteries.forge.ocamlcore.org/>\n\n * OCaml PCRE (>= 7) <https://github.com/mmottl/pcre-ocaml>\n\n * OCaml Zarith <https://forge.ocamlcore.org/projects/zarith>\n\n * OCaml ini-files <http://archive.ubuntu.com/ubuntu/pool/universe/o/ocaml-inifiles/>\n\nOn POSIX/Win32 systems (GNU/Linux, *BSD, OS-X), we recommend that users\ninstall EasyCrypt and all its dependencies via `opam`.\n\nVia OPAM\n--------------------------------------------------------------------\n\n### Installing requirements using OPAM 2 (POSIX systems)\n\nOpam can be easily installed from source or via your packages manager:\n\n  * On Ubuntu and derivatives:\n\n      ```\n      $> add-apt-repository ppa:avsm/ppa\n      $> apt-get update\n      $> apt-get install ocaml ocaml-native-compilers camlp4-extra opam\n      ```\n\n  * On Fedora/OpenSUSE:\n\n      ```\n      $> sudo dnf update\n      $> sudo dnf install ocaml ocaml-docs ocaml-camlp4-devel opam\n      ```\n\n  * On MacOSX using brew:\n\n      ```\n      $> brew install ocaml opam\n      ```\n\nOnce `opam` and `ocaml` has been successfully installed run the following:\n\n```\n$> opam init\n$> eval $(opam env)\n```\n\nFor any issues encountered installing `opam` see:\n\n  * [https://opam.ocaml.org/doc/Install.html] for detailed opam installation instructions.\n\n  * [https://opam.ocaml.org/doc/Usage.html] for how to initialize opam.\n\nYou can then install all the needed dependencies via the opam OCaml\npackages manager.\n\n  0. Optionally, switch to a dedicated compiler for EasyCrypt:\n\n      ```\n      $> opam switch create easycrypt $OVERSION\n      ```\n\n      where `$OVERSION` is a valid OCaml version (e.g. ocaml-base-compiler.4.07.0)\n\n  1. Add the EasyCrypt package from repository:\n\n      ```\n      $> opam pin -yn add easycrypt https://github.com/EasyCrypt/easycrypt.git\n      ```\n\n  2. Optionally, use opam to install the system dependencies:\n\n      ```\n      $> opam install opam-depext\n      $> opam depext easycrypt\n      ```\n\n  3. Install EasyCrypt's dependencies:\n\n      ```\n      $> opam install --deps-only easycrypt\n      $> opam install alt-ergo\n      ```\n\n     If you get errors about ocamlbuild failing because it's already\n     installed, the check can be skipped with the following:\n\n      ```\n      CHECK_IF_PREINSTALLED=false opam install --deps-only easycrypt\n      ```\n\n  4. You can download extra provers at the following URLs:\n\n     * Z3: [https://github.com/Z3Prover/z3]\n     * CVC4: [https://cvc4.github.io/]\n\n### Installing requirements using OPAM (non-POSIX systems)\n\nYou can install all the needed dependencies via the opam OCaml packages manager.\n\n  1. Install the opam Ocaml packages manager, following the instructions at:\n\n     https://fdopen.github.io/opam-repository-mingw/installation/\n\n  2. Add the EasyCrypt package from repository:\n\n      ```\n      $> opam pin -yn add easycrypt https://github.com/EasyCrypt/easycrypt.git\n      ```\n\n  3. Use opam to install the system dependencies:\n\n      ```\n      $> opam install depext depext-cygwinports\n      $> opam depext easycrypt\n      ```\n\n  4. Install EasyCrypt's dependencies:\n\n      ```\n      $> opam install --deps-only easycrypt\n      $> opam install alt-ergo\n      ```\n\n  5. You can download extra provers at the following URLs:\n\n     * Z3: [https://github.com/Z3Prover/z3]\n     * CVC4: [https://cvc4.github.io/]\n\n\nVia NIX\n--------------------------------------------------------------------\n\nFirst, install the [Nix package manager](https://nixos.org/) by\nfollowing [these instructions](https://nixos.org/manual/nix/stable/#chap-installation).\n\nThen, at the root of the EasyCrypt source tree, type:\n\n    ```\n    $> nix-shell\n    ```\n    \nThese should install all the required dependencies. From there, simply\nrun:\n\n    ```\n    $> make\n    ```\n    \nto compile EasyCrypt.\n\nNote on Prover Versions\n--------------------------------------------------------------------\n\nWhy3 and SMT solvers are independent pieces of software with their\nown version-specific interactions. Obtaining a working SMT setup may\nrequire installing specific versions of some of the provers.\n\nAt the time of writing, we depend on Why3 1.5.x, which supports the\nfollowing prover versions:\n\n * Alt-Ergo 2.4.1 (if you install alt-ergo using opam, you can\n   prevent upgrades using `opam pin alt-ergo 2.4.1`)\n * CVC4 1.8\n * Z3 4.8.10\n\nInstalling/Compiling EasyCrypt\n====================================================================\n\nIf installing from source, running\n\n```\n$> make\n$> make install\n```\n\nbuilds and install EasyCrypt (under the binary named `easycrypt`),\nassuming that all dependencies have been successfully installed. If\nyou choose not to install EasyCrypt system wide, you can use the\nbinary `ec.native` that is located at the root of the source tree.\n\nEasyCrypt comes also with an opam package. Running\n\n```\n$> opam install easycrypt\n```\n\ninstalls EasyCrypt and its dependencies via opam. In that case, the\nEasyCrypt binary is named `easycrypt`.\n\nConfiguring Why3\n====================================================================\n\nInitially, and after the installation/removal/update of SMT provers,\nyou need to (re)configure Why3 via the following `easycrypt` command:\n\n```\n$> easycrypt why3config\n```\n\nEasyCrypt stores the Why3 configuration file under\n\n```\n$XDG_CONFIG_HOME/easycrypt/why3.conf\n```\n\nEasyCrypt allows you, via the option -why3, to load a Why3\nconfiguration file from a custom location. For instance:\n\n```\n$> easycrypt why3config -why3 $WHY3CONF.conf\n$> easycrypt -why3 $WHY3CONF.conf\n```\n\nwhere `$WHY3CONF` must be replaced by some custom location.\n\nProof General Front-End\n====================================================================\n\nEasyCrypt mode has been integrated upstream. Please, go\nto <https://github.com/ProofGeneral/PG> and follow the instructions.\n\nExamples\n====================================================================\n\nExamples of how to use EasyCrypt are in the `examples` directory. You\nwill find basic examples at the root of this directory, as well as a\nmore advanced example in the `MEE-CBC` sub-directory and a tutorial on\nhow to use the complexity system in `cost` sub-directory.\n"
 },
 {
  "repo": "cpeikert/TheoryOfCryptography",
  "language": "TeX",
  "readme_contents": "These are lecture notes from my graduate-level Theory of Cryptography\ncourse taught at Georgia Tech and University of Michigan.\n\nFeedback (or even better, pull requests) welcome!\n"
 },
 {
  "repo": "fireship-io/node-crypto-examples",
  "language": "JavaScript",
  "readme_contents": "# Node Crypto Examples\n\n7 useful examples of the node crypto module.\n\n- Watch [7 Cryptography Concepts](https://youtu.be/NuyzuNBFWxQ) on YouTube\n- Full [Node Crypto Tutorial](https://fireship.io/lessons/node-crypto-examples/) on Fireship\n\n## Concepts\n\n1. Hash\n1. Salt\n1. HMAC\n1. Symmetric Encryption\n1. Keypairs\n1. Asymmetric Encryption\n1. Signing\n\n## Challenge\n\nCheck out the `src/hack.js` file for a challenge. First person to send a pull request with the correct answer wins a T-shirt!"
 },
 {
  "repo": "briansmith/ring",
  "language": "Assembly",
  "readme_contents": "THE SOFTWARE IS PROVIDED \"AS IS\" AND BRIAN SMITH AND THE AUTHORS DISCLAIM\nALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL BRIAN SMITH OR THE AUTHORS\nBE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\nAN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\n\n*ring*\n======\n\n*ring* is focused on the implementation, testing, and optimization of a core\nset of cryptographic operations exposed via an easy-to-use (and hard-to-misuse)\nAPI. *ring* exposes a [Rust](https://www.rust-lang.org/) API and is written in\na hybrid of Rust, C, and assembly language.\n\nParticular attention is being paid to making it easy to build and integrate\n*ring* into applications and higher-level frameworks, and to ensuring that\n*ring* works optimally on small devices, and eventually microcontrollers, to\nsupport Internet of Things (IoT) applications.\n\n*ring* is focused on general-purpose cryptography. WebPKI X.509 certificate\nvalidation is done in the [webpki](https://github.com/briansmith/webpki)\nproject, which is built on top of *ring*. Also, multiple groups are working on\nimplementations of cryptographic protocols like TLS, SSH, and DNSSEC on top of\n*ring*.\n\n*ring* is the successor of an earlier project called GFp. GFp implemented some\nelliptic curve cryptography over prime finite fields, also known as prime\nGalois fields and often denoted GF(p). When we implemented RSA, the name GFp\ndid not make as much sense, since modular arithmetic over RSA public moduli is\nnot GF(p) arithmetic but rather finite commutative *ring* arithmetic. Also note\nthat *ring* started as a subset of BoringSSL, and \u201c*ring*\u201d is a substring of\n\u201cBo*ring*SSL\u201d.\n\nMost of the C and assembly language code in *ring* comes from BoringSSL, and\nBoringSSL is derived from OpenSSL. *ring* merges changes from BoringSSL\nregularly. Also, several changes that were developed for *ring* have already\nbeen merged into BoringSSL.\n\n\n\n\nDocumentation\n-------------\n\nSee the documentation at\nhttps://briansmith.org/rustdoc/ring/.\n\nSee [BUILDING.md](BUILDING.md) for instructions on how to build it. These\ninstructions are especially important for cross-compiling and for building on\nWindows when not building from crates.io, as there are build prerequisites that\nneed to be installed.\n\n\n\nBenchmarks\n----------\n\n*ring*'s benchmarks are located in the `benches` folder of this repository. Because\nthere is lots of platform-specific code in *ring*, and because *ring* chooses\ndynamically at runtime which optimized implementation of each crypto primitive\nto use, it is very difficult to publish a useful single set of benchmarks;\ninstead, you are highly encouraged to run the benchmarks yourselves on your\ntarget hardware.\n\n\n\n\nContributing\n------------\n\nThe most important contributions are *uses* of *ring*. That is, we're very\ninterested in seeing useful things built on top of *ring*, like implementations\nof TLS, SSH, the Noise Protocol, etc.\n\nOf course, contributions to *ring*'s code base are highly appreciated too.\nThe *ring* project happily accepts pull requests without you needing to sign\nany formal license agreement. The portions of pull requests that modify\nexisting files must be licensed under the same terms as the files being\nmodified. New files in pull requests, including in particular all Rust code,\nmust be licensed under the ISC-style license. Please state that you agree to\nlicense your contributions in the commit messages of commits in pull requests,\ne.g. by putting this at the bottom of your commit message:\n\n```\n\nI agree to license my contributions to each file under the terms given\nat the top of each file I changed.\n```\n\n\nIf\nyou want to work directly on *ring* and you don't have an idea for something to\ncontribute already, see these curated lists of open issues:\n\n* [good-first-bug](https://github.com/briansmith/ring/labels/good-first-bug):\n  Bugs that we think newcomers might find best to start with. Note that what\n  makes a bug a good fit depends a lot on the developer's background and not\n  just the hardness of the work.\n\nIn addition, we're always interested in these kinds of contributions:\n\n* Expanding the benchmarks in the `benches` folder.\n* Additional testing code and additional test vectors.\n* Static analysis and fuzzing in the continuous integration.\n* Support for more platforms in the continuous integration (e.g. Android, iOS,\n  ARM microcontrollers).\n* Documentation improvements.\n* More code simplification, especially eliminating dead code.\n* Improving the code size, execution speed, and/or memory footprint.\n* Fixing any bugs you may have found.\n* Better IDE support for Windows (e.g. running the tests within the IDE) and\n  macOS (e.g. Xcode project files).\n\nBefore submitting pull requests, make sure that the tests succeed both when\nrunning `cargo test` and `cargo test --no-default-features`. See\n[BUILDING.md](BUILDING.md) for more info about the features flags that are\nuseful for people hacking on *ring*.\n\n\n\nVersioning & Stability\n----------------------\n\nUsers of *ring* should always use the latest released version, and users\nshould upgrade to the latest released version as soon as it is released.\n*ring* has a linear release model that favors users of the latest released\nversion. We have never backported fixes to earlier releases and we don't\nmaintain branches other than the main branch. Further, for some obscure\ntechnical reasons it's currently not possible to link two different versions\nof *ring* into the same program; for policy reasons we don't bother to try\nto work around that. Thus it is important that libraries using *ring* update\nto the latest version of *ring* ASAP, so that libraries that depend on\n*their* libraries can upgrade to the latest version of *ring*.\n\n*ring* is tested on the latest Stable, Beta, and Nightly releases of Rust.\nWe do not spend effort on backward compatibility with older releases of\nRust; for example, when Rust 1.53 (Stable) is released, we don't care if\n*ring* stops working with Rust 1.52 or earlier versions. Thus, we can\nalways use the latest *stable* features of the Rust language in *ring*.\nAs a general policy, we don't use unstable features of Rust. Sometimes\nthings are broken with Nightly Rust. We prioritize keeping things working on\nStable; if things break on Beta and Nightly then that breakage won't be\nconsidered urgent, though we will try to resolve it.\n\nWe prefer to improve *ring*'s API over keeping *ring*'s API stable. We\ndon't keep old APIs around for the sake of backward compatibility; we prefer\nto remove old APIs in the same change that adds new APIs. This makes it\neasier for people to contribute improvements. This means that sometimes\nupgrading to the newest version of *ring* will require some code changes. Over\ntime the rate of change in the API will probably slow to the point where it\nwill be stable in practice.\n\nWe don't have release notes. Instead, we try to clearly document each change\nin each commit. Read the commit message, the tests, and the patch itself\nfor each change. If anything is still unclear, let us know by submitting a pull\nrequest or by filing an issue in the issue tracker so that we can improve\nthings.\n\nThis model of development is different than the model a lot of other open\nsource libraries use. The idea behind *our* model is to encourage all users to\nwork together to ensure that the latest version is good *as it is being\ndeveloped*. In particular, because users know that correctness/security fixes\n(if any) aren't going to get backported, they have a strong incentive to help\nreview pull requests before they are merged and/or review commits on the main\nbranch after they've landed to ensure that code quality on the main branch\nstays high.\n\nThe more common model, where there are stable versions that have important\nsecurity patches backported, lowers people's incentives to actively participate\nin mainline development. Maintaining stable APIs also discourages improving\nAPI design and internal code quality. Thus that model doesn't seem like a good\nfit for *ring*.\n\nEvery six months we have a meeting to revisit this policy. Email\n[brian@briansmith.org](mailto:brian@briansmith.org) if you want to attend\nthe next meeting. Please don't file issues regarding this policy.\n\n\n\nBug Reporting\n-------------\n\nPlease report bugs either as pull requests or as issues in [the issue\ntracker](https://github.com/briansmith/ring/issues). *ring* has a\n**full disclosure** vulnerability policy. **Please do NOT attempt to report\nany security vulnerability in this code privately to anybody.**\n\n\n\nOnline Automated Testing\n------------------------\n\nThe following targets are tested in GitHub Actions. The tests are run in debug\nand release configurations, for the current release of each Rust channel\n(Stable, Beta, Nightly). A C compiler is currently required to compile some\nparts of *ring*; *ring* should be compatible with GCC 4.8+, Clang 10+, and MSVC\n2019+, at least.\n\n| Target                         | Notes |\n| -------------------------------| ----- |\n| aarch64-apple-darwin           | Build-only (GitHub Actions doesn't have a way to run the tests)\n| aarch64-apple-ios              | Build-only (GitHub Actions doesn't have a way to run the tests)\n| aarch64-pc-windows-msvc        | Build-only (GitHub Actions doesn't have a way to run the tests)\n| aarch64-unknown-linux-gnu      | Tested on 64-bit Linux using QEMU user emulation\n| aarch64-unknown-linux-musl     | Tested on 64-bit Linux using QEMU user emulation. [Needs more work; issue 713](https://github.com/briansmith/ring/issues/713)\n| aarch64-linux-android          | API level 21 (Android 5.0+); [Build-only; issue 486](https://github.com/briansmith/ring/issues/486)\n| arm-unknown-linux-gnueabihf    | Tested on 64-bit Linux using QEMU user emulation\n| armv7-linux-androideabi        | API level 18 (Android 4.3+); [Build-only; issue 838](https://github.com/briansmith/ring/issues/838)\n| armv7-unknown-linux-musleabihf | Tested on 64-bit Linux using QEMU user emulation. [Needs more work; issue 713](https://github.com/briansmith/ring/issues/713)\n| i686-pc-windows-msvc           | Tested on 64-bit Windows Server 2019 Datacenter\n| i686-unknown-linux-gnu         | Tested on 64-bit Linux using multilib support\n| i686-unknown-linux-musl        | Tested on 64-bit Linux using multilib support. [Needs more work; issue 713](https://github.com/briansmith/ring/issues/713)\n| x86_64-apple-darwin            |\n| x86_64-pc-windows-gnu          |\n| x86_64-pc-windows-msvc         | Tested on 64-bit Windows Server 2019 Datacenter\n| x86_64-unknown-linux-gnu       |\n| x86_64-unknown-linux-musl      | [Needs more work; issue 713](https://github.com/briansmith/ring/issues/713)\n| wasm32-unknown-unknown         | Tested using wasm-bindgen-test-runner on Linux in Chrome and Firefox.\n\nLicense\n-------\n\nSee [LICENSE](LICENSE).\n"
 },
 {
  "repo": "virtual-labs-archive/cryptography-iiith",
  "language": "HTML",
  "readme_contents": "Congrats !!\n\n* You have successfully downloaded and extracted the\n  ui.tgz .\n\n\n* Changes: New Tabs have been added for \n\t-    Target Audience\n\t-    Courses Aligned\n\t-    Pre-requisite Softwares \n\nYou need to added 3 more sections on virtual lab home page\n\n3) Target Audience\n4) Courses Aligned\n5) Pre-requisite Softwares\n\nYou can make the above said changes by editing content.html. To update the changes\n\n1)  open content.html in your fav editor and search for last closing html tag </section>.\n2) Open the change.html file and open it in your fav. editor.\n3) Copy all content of change.html \n4) Paste it after the last closing html tag </section> (you searched in Step1).\n5) Go to ui/src and run  \" make theme=blue-icon\"     on command terminal  to change theme to blue\n\n\nWe had attached change.html in folder.  You can copy the whole content and paste it in content.html .\n\n\nBelow is snapshot how content.html will look like\n<!-- Second section of the article-->\n<section id=\"lab-article-section-2\">\n\n<div id=\"lab-article-section-2-icon\" class=\"icon\">\n  <!-- Enclose the icon image for the section. -->\n  <img src=\"images/simulation.jpg\" />\n</div>\n\n\n<!-- The heading for the section can be enclosed in a \ndiv tag and shown with a <h2> tag -->\n<div id=\"lab-article-section-2-heading\" class=\"heading\">\n  List of experiments\n</div>\n\t\t\t\n<!-- Write the section content inside a paragraph \nelement, You can also include images with <img> tag -->\n<div id=\"lab-article-section-2-content\" class=\"content\">\n  <ul id=\"list-of-experiments\">\n  \n    <li> \n      <!--Link and name of the experiment 1 -->\n      <a href=\"exp1/index.html\">Simple Pendulum Experiment</a> \n    </li>\n  </ul>\n</div>\n\n</section>\n\n// PASTE the CHANGE.html content here..\n\n\n/*****************************************************************/\n\n\n\n\n\n\n\n\n\n* Now run makefile by the following commands inside the 'ui/src' folder to\n  change the default theme :\n\nGo to Command Terminal\n\t $ cd ui_extracted_folder // Where u have extracted the ui kit\n\t $ cd ui/src\n         $ make clean all \n\t $ make theme=blue-icon\n\n* Now, open ui/build/index.html in the browser to test the template.\n\n"
 },
 {
  "repo": "microsoft/SEAL",
  "language": "C++",
  "readme_contents": "# Microsoft SEAL\n\nMicrosoft SEAL is an easy-to-use open-source ([MIT licensed](LICENSE)) homomorphic encryption library developed by the Cryptography and Privacy Research Group at Microsoft.\nMicrosoft SEAL is written in modern standard C++ and is easy to compile and run in many different environments.\nFor more information about the Microsoft SEAL project, see [sealcrypto.org](https://www.microsoft.com/en-us/research/project/microsoft-seal).\n\nThis document pertains to Microsoft SEAL version 4.0.\nUsers of previous versions of the library should look at the [list of changes](CHANGES.md).\n\n## News\n\nThe [BGV scheme](https://eprint.iacr.org/2011/277) is now available in Microsoft SEAL.\nImplementation details are described in [this paper](https://eprint.iacr.org/2020/1481.pdf).\nWe truly appreciate [Alibaba Gemini Lab](https://alibaba-gemini-lab.github.io/) for making massive efforts to develop the BGV scheme and integrate it in Microsoft SEAL. And we would like to thank Privacy Technologies Research, Intel Labs, for continous testing and reporting issues.\n\nStarting from version 3.7.2, Microsoft SEAL will push new changes to the `main`, `master`, and `contrib` branches without creating a new version.\nWe adopt this approach to merge community contribution and resolve issues in a timely manner.\nThese branches will stay ahead of the latest version branch/tag.\nNew versions will be created when there are important bug fixes or new features.\n\nThe [EVA compiler for CKKS](https://arxiv.org/abs/1912.11951) is available at [GitHub.com/Microsoft/EVA](https://GitHub.com/Microsoft/EVA). See [CKKS Programming with EVA](#ckks-programming-with-eva) below for more information.\n\nThe [SEAL-Embedded for CKKS Encryption](https://tches.iacr.org/index.php/TCHES/article/view/8991) is available at [Github.com/Microsoft/SEAL-Embedded](https://github.com/microsoft/SEAL-Embedded).\n\nThe [APSI library for Asymmetric PSI](https://eprint.iacr.org/2021/1116) is available at [Github.com/Microsoft/APSI](https://github.com/microsoft/APSI).\n\n## Contents\n\n- [Introduction](#introduction)\n  - [Core Concepts](#core-concepts)\n  - [Homomorphic Encryption](#homomorphic-encryption)\n  - [Microsoft SEAL](#microsoft-seal-1)\n- [Getting Started](#getting-started)\n  - [Optional Dependencies](#optional-dependencies)\n    - [Intel HEXL](#intel-hexl)\n    - [Microsoft GSL](#microsoft-gsl)\n    - [ZLIB and Zstandard](#zlib-and-zstandard)\n  - [Installing from NuGet Package](#installing-from-nuget-package-windows-linux-macos-android-ios)\n  - [Examples](#examples)\n  - [CKKS Programming with EVA](#ckks-programming-with-eva)\n- [Building Microsoft SEAL Manually](#building-microsoft-seal-manually)\n  - [Building C++ Components](#building-c-components)\n    - [Requirements](#requirements)\n    - [Building Microsoft SEAL](#building-microsoft-seal)\n    - [Installing Microsoft SEAL](#installing-microsoft-seal)\n    - [Building and Installing on Windows](#building-and-installing-on-windows)\n    - [Building for Android and iOS](#building-for-android-and-ios)\n    - [Building for WebAssembly](#building-for-webassembly)\n    - [Basic CMake Options](#basic-cmake-options)\n    - [Advanced CMake Options](#advanced-cmake-options)\n    - [Linking with Microsoft SEAL through CMake](#linking-with-microsoft-seal-through-cmake)\n    - [Examples, Tests, and Benchmark](#examples-tests-and-benchmark)\n  - [Building .NET Components](#building-net-components)\n    - [Windows, Linux, and macOS](#windows-linux-and-macos)\n    - [Android and iOS](#android-and-ios)\n    - [Using Microsoft SEAL for .NET](#using-microsoft-seal-for-net)\n    - [Building Your Own NuGet Package](#building-your-own-nuget-package)\n- [Contributing](#contributing)\n- [Citing Microsoft SEAL](#citing-microsoft-seal)\n- [Acknowledgments](#acknowledgments)\n\n## Introduction\n\n### Core Concepts\n\nMost encryption schemes consist of three functionalities: key generation, encryption, and decryption.\nSymmetric-key encryption schemes use the same secret key for both encryption and decryption; public-key encryption schemes use separately a public key for encryption and a secret key for decryption.\nTherefore, public-key encryption schemes allow anyone who knows the public key to encrypt data, but only those who know the secret key can decrypt and read the data.\nSymmetric-key encryption can be used for efficiently encrypting very large amounts of data, and enables secure outsourced cloud storage.\nPublic-key encryption is a fundamental concept that enables secure online communication today, but is typically much less efficient than symmetric-key encryption.\n\nWhile traditional symmetric- and public-key encryption can be used for secure storage and communication, any outsourced computation will necessarily require such encryption layers to be removed before computation can take place.\nTherefore, cloud services providing outsourced computation capabilities must have access to the secret keys, and implement access policies to prevent unauthorized employees from getting access to these keys.\n\n### Homomorphic Encryption\n\nHomomorphic encryption refers to encryption schemes that allow the cloud to compute directly on the encrypted data, without requiring the data to be decrypted first.\nThe results of such encrypted computations remain encrypted, and can be only decrypted with the secret key (by the data owner).\nMultiple homomorphic encryption schemes with different capabilities and trade-offs have been invented over the past decade; most of these are public-key encryption schemes, although the public-key functionality may not always be needed.\n\nHomomorphic encryption is not a generic technology: only some computations on encrypted data are possible.\nIt also comes with a substantial performance overhead, so computations that are already very costly to perform on unencrypted data are likely to be infeasible on encrypted data.\nMoreover, data encrypted with homomorphic encryption is many times larger than unencrypted data, so it may not make sense to encrypt, e.g., entire large databases, with this technology.\nInstead, meaningful use-cases are in scenarios where strict privacy requirements prohibit unencrypted cloud computation altogether, but the computations themselves are fairly lightweight.\n\nTypically, homomorphic encryption schemes have a single secret key which is held by the data owner.\nFor scenarios where multiple different private data owners wish to engage in collaborative computation, homomorphic encryption is probably not a reasonable solution.\n\nHomomorphic encryption cannot be used to enable data scientists to circumvent GDPR.\nFor example, there is no way for a cloud service to use homomorphic encryption to draw insights from encrypted customer data.\nInstead, results of encrypted computations remain encrypted and can only be decrypted by the owner of the data, e.g., a cloud service customer.\n\nMost homomorphic encryption schemes provide weaker security guarantees than traditional encryption schemes. You need to read [SECURITY.md](SECURITY.md) if you are thinking of building production software using Microsoft SEAL.\n\n### Microsoft SEAL\n\nMicrosoft SEAL is a homomorphic encryption library that allows additions and multiplications to be performed on encrypted integers or real numbers.\nOther operations, such as encrypted comparison, sorting, or regular expressions, are in most cases not feasible to evaluate on encrypted data using this technology.\nTherefore, only specific privacy-critical cloud computation parts of programs should be implemented with Microsoft SEAL.\n\nIt is not always easy or straightfoward to translate an unencrypted computation into a computation on encrypted data, for example, it is not possible to branch on encrypted data.\nMicrosoft SEAL itself has a steep learning curve and requires the user to understand many homomorphic encryption specific concepts, even though in the end the API is not too complicated.\nEven if a user is able to program and run a specific computation using Microsoft SEAL, the difference between efficient and inefficient implementations can be several orders of magnitude, and it can be hard for new users to know how to improve the performance of their computation.\n\nMicrosoft SEAL comes with two different homomorphic encryption schemes with very different properties.\nThe BFV and BGV schemes allow modular arithmetic to be performed on encrypted integers.\nThe CKKS scheme allows additions and multiplications on encrypted real or complex numbers, but yields only approximate results.\nIn applications such as summing up encrypted real numbers, evaluating machine learning models on encrypted data, or computing distances of encrypted locations CKKS is going to be by far the best choice.\nFor applications where exact values are necessary, the BFV and BGV schemes are more suitable.\n\n## Getting Started\n\nThere are multiple ways of installing Microsoft SEAL and starting to use it.\nThe easiest way is to use a package manager to download, build, and install the library.\nFor example, [vcpkg](https://github.com/microsoft/vcpkg) works on most platforms and will be up-to-date with the latest release of Microsoft SEAL (C++17 only).\nOn macOS you can also use [Homebrew](https://formulae.brew.sh/formula/seal).\nOn FreeBSD you can use `pkg install seal` to install [security/seal](https://www.freshports.org/security/seal/).\nThe .NET library is available as a multiplatform [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet).\nFinally, one can build Microsoft SEAL manually with a multiplatform CMake build system; see [Building Microsoft SEAL Manually](#building-microsoft-seal-manually) for details.\n\n### Optional Dependencies\n\nMicrosoft SEAL has no required dependencies, but certain optional features can be enabled when compiling with support for specific third-party libraries.\n\nWhen [building manually](#building-microsoft-seal-manually), one can choose to have the Microsoft SEAL build system download and build the dependencies, or alternatively search the system directories for pre-installed dependencies.\nOn the other extreme, the downloadable [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet) cannot be configured at all, but it is always possible to [build a custom NuGet package](#building-your-own-nuget-package).\nOther package managers offer varying amounts of opportunities for configuring the dependencies and [other build options](#basic-cmake-options).\n\nThe optional dependencies and their tested versions (other versions may work as well) are as follows:\n\n| Optional dependency                                    | Tested version | Use                                              |\n| ------------------------------------------------------ | -------------- | ------------------------------------------------ |\n| [Intel HEXL](https://github.com/intel/hexl)            | 1.2.3          | Acceleration of low-level kernels                |\n| [Microsoft GSL](https://github.com/microsoft/GSL)      | 3.1.0          | API extensions                                   |\n| [ZLIB](https://github.com/madler/zlib)                 | 1.2.11         | Compressed serialization                         |\n| [Zstandard](https://github.com/facebook/zstd)          | 1.4.5          | Compressed serialization (much faster than ZLIB) |\n| [GoogleTest](https://github.com/google/googletest)     | 1.11.0         | For running tests                                |\n| [GoogleBenchmark](https://github.com/google/benchmark) | 1.6.0          | For running benchmarks                           |\n\n#### Intel HEXL\n\nIntel HEXL is a library providing efficient implementations of cryptographic primitives common in homomorphic encryption. The acceleration is particularly evident on Intel processors with the Intel AVX512-IFMA52 instruction set.\n\n#### Microsoft GSL\n\nMicrosoft GSL (Guidelines Support Library) is a header-only library that implements `gsl::span`: a *view type* that provides safe (bounds-checked) array access to memory.\n\nFor example, if Microsoft GSL is available, Microsoft SEAL can allow `BatchEncoder` and `CKKSEncoder` to encode from and decode to a `gsl::span` instead of `std::vector`, which can in some cases have a significant performance benefit.\n\n#### ZLIB and Zstandard\n\nZLIB and Zstandard are widely used compression libraries. Microsoft SEAL can optionally use these libraries to compress data that is serialized.\n\nOne may ask how compression can help when ciphertext and key data is supposed to be indistinguishable from random.\nIn Microsoft SEAL `Ciphertext` objects consist of a large number of integers modulo specific prime numbers (`coeff_modulus` primes).\nWhen using the CKKS scheme in particular, these prime numbers can be quite small (e.g., 30 bits), but the data is nevertheless serialized as 64-bit integers.\nTherefore, it is not uncommon that almost half of the ciphertext bytes are zeros, and applying a general-purpose compression algorithm is a convenient way of getting rid this wasted space.\nThe BFV scheme benefits typically less from this technique, because the prime numbers used for the `coeff_modulus` encryption parameter tend to be larger, and integers modulo these prime numbers fill more of each 64-bit word.\nCompressed serialization can be applied to any serializable Microsoft SEAL object &ndash; not just to `Ciphertext` and keys .\n\nIf Microsoft SEAL is compiled with ZLIB or Zstandard support, compression will automatically be used for serialization; see `Serialization::compr_mode_default` in [native/src/seal/serialization.h](native/src/seal/serialization.h).\nHowever, it is always possible to explicitly pass `compr_mode_type::none` to serialization methods to disable compression.\nIf both ZLIB and Zstandard support are enabled, Zstandard is used by default due to its much better performance.\n\n**Note:** The compression rate for a `SecretKey` can (in theory at least) reveal information about the key.\nIn most common applications of Microsoft SEAL the size of a `SecretKey` would not be deliberately revealed to untrusted parties.\nIf this is a concern, one can always save the `SecretKey` in an uncompressed form.\n\n<!-- ### Installing with VCPKG (Windows, Unix-like) -->\n<!-- To install Microsoft SEAL with all dependencies enabled, run `./vcpkg install seal` or `./vcpkg install seal:x64-windows-static` on Windows. -->\n<!-- To install Microsoft SEAL with partial dependencies enabled, for example, only `ms-gsl`, run `./vcpkg install seal[core,ms-gsl]` or `./vcpkg install seal[core,ms-gsl]:x64-windows-static` on Windows. -->\n\n<!-- ### Installing with Homebrew (macOS) -->\n\n### Installing from NuGet Package (Windows, Linux, macOS, Android, iOS)\n\nFor .NET developers the easiest way of installing Microsoft SEAL is by using the multiplatform NuGet package available at [NuGet.org](https://www.nuget.org/packages/Microsoft.Research.SEALNet).\nSimply add this package into your .NET project as a dependency and you are ready to go.\n\nTo develop mobile applications using Microsoft SEAL and .NET for Android and iOS, just add this package to your [Xamarin](https://dotnet.microsoft.com/apps/xamarin) project. Unlike the Microsoft SEAL C++ library, the .NET wrapper library works only on 64-bit platforms, so only `arm64-v8a`/`x86_64` Android ABIs and `arm64`/`x86_64` iOS architectures are supported.\n\n### Examples\n\nUsing Microsoft SEAL will require the user to invest some time in learning fundamental concepts in homomorphic encryption.\nThe code comes with heavily commented examples that are designed to gradually teach such concepts as well as demonstrate a large fraction of the API.\nThe examples are available (and identical) in C++ and C#, and are divided into several source files in `native/examples/` (C++) and `dotnet/examples/` (C#), as follows:\n\n| C++                   | C#                   | Description                                                                  |\n| --------------------- | -------------------- | ---------------------------------------------------------------------------- |\n| `examples.cpp`        | `Examples.cs`        | The example runner application                                               |\n| `1_bfv_basics.cpp`    | `1_BFV_Basics.cs`    | Encrypted modular arithmetic using the BFV scheme                            |\n| `2_encoders.cpp`      | `2_Encoders.cs`      | Encoding more complex data into Microsoft SEAL plaintext objects             |\n| `3_levels.cpp`        | `3_Levels.cs`        | Introduces the concept of levels; prerequisite for using the CKKS scheme     |\n| `4_bgv_basics.cpp`    | `4_BGV_Basics.cs`    | Encrypted modular arithmetic using the BGV scheme                            |\n| `5_ckks_basics.cpp`   | `5_CKKS_Basics.cs`   | Encrypted real number arithmetic using the CKKS scheme                       |\n| `6_rotation.cpp`      | `6_Rotation.cs`      | Performing cyclic rotations on encrypted vectors in the BFV and CKKS schemes |\n| `7_serialization.cpp` | `7_Serialization.cs` | Serializing objects in Microsoft SEAL                                        |\n| `8_performance.cpp`   | `8_Performance.cs`   | Performance tests                                                            |\n\nIt is recommended to read the comments and the code snippets along with command line printout from running an example.\nFor easier navigation, command line printout provides the line number in the associated source file where the associated code snippets start.\nTo build the examples, see [Examples, Tests, and Benchmark](#examples-tests-and-benchmark) (C++) and [Building .NET Components](#building-net-components) (C#).\n\n**Note:** It is impossible to know how to use Microsoft SEAL correctly without studying examples 1&ndash;6.\nThey are designed to provide the reader with the necessary conceptual background on homomorphic encryption.\nReusing code directly from the examples will not work well, as the examples are often demonstrating individual pieces of functionality, and are not optimized for performance.\nWriting Microsoft SEAL code without studying the examples in depth will inevitably result in code that is vulnerable, malfunctioning, or extremely slow.\n\n### CKKS Programming with EVA\n\nWhen studying the examples above, it will become clear that the CKKS scheme can be unfriendly to beginners.\nEven relatively simple computations can be challenging to get to work due to the limitations of the rescaling operation and the requirement of aligning scales at different levels.\n\nWe have created a new compiler tool called EVA that helps resolve these challenges to a large extent.\nEVA allows programmers to express desired encrypted computations in Python. It optimizes the computations for Microsoft SEAL, selects appropriate encryption parameters, and provides a convenient Python API for encrypting the input, executing the computation, and decrypting the result.\nEVA is available at [GitHub.com/Microsoft/EVA](https://GitHub.com/Microsoft/EVA).\nTry it out, and let us know what you think!\n\n**Note:** EVA only supports the CKKS scheme. There are no immediate plans to support the BFV or BGV scheme.\n\n## Building Microsoft SEAL Manually\n\n### Building C++ Components\n\nOn all platforms Microsoft SEAL is built with CMake.\nWe recommend using out-of-source build although in-source build works.\nBelow we give instructions for how to configure, build, and install Microsoft SEAL either globally (system-wide), or locally (for a single user).\nA global install requires elevated (root or administrator) privileges.\n\n#### Requirements\n\n| System | Toolchain |\n|---|---|\n| Windows | Visual Studio 2022 with C++ CMake Tools for Windows |\n| Linux | Clang++ (>= 5.0) or GNU G++ (>= 6.0), CMake (>= 3.13) |\n| macOS/iOS | Xcode toolchain (>= 9.3), CMake (>= 3.13) |\n| Android | Android Studio |\n| FreeBSD | CMake (>= 3.13) |\n\n**Note:** Microsoft SEAL compiled with Clang++ has much better runtime performance than one compiled with GNU G++.\n\n#### Building Microsoft SEAL\n\nWe assume that Microsoft SEAL has been cloned into a directory called `SEAL` and all commands presented below are assumed to be executed in the directory `SEAL`.\n\nYou can build the Microsoft SEAL library (out-of-source) for your machine by executing the following commands:\n\n```PowerShell\ncmake -S . -B build\ncmake --build build\n```\n\nAfter the build completes, the output binaries can be found in `build/lib/` and `build/bin/` directories.\n\nVarious configuration options can be specified and passed to the CMake build system.\nThese are decribed below in sections [Basic CMake Options](#basic-cmake-options) and [Advanced CMake Options](#advanced-cmake-options).\n\n#### Installing Microsoft SEAL\n\nIf you have root access to the system you can install Microsoft SEAL globally as follows:\n\n```PowerShell\ncmake -S . -B build\ncmake --build build\nsudo cmake --install build\n```\n\nTo instead install Microsoft SEAL locally, e.g., to `~/mylibs/`, do the following:\n\n```PowerShell\ncmake -S . -B build -DCMAKE_INSTALL_PREFIX=~/mylibs\ncmake --build build\nsudo cmake --install build\n```\n\n#### Building and Installing on Windows\n\nOn Windows the same scripts above work in a developer command prompt for Visual Studio using either the Ninja or \"Visual Studio 17 2022\" generators.\n\nWhen using the Ninja generator, please use the appropriate command prompt depending on the platform you want to build for. If you want to build for x64, please use the **x64 Native Tools Command Prompt for Visual Studio 2022** command prompt to configure and build the library. If you want to build for x86, please use the **x86 Native Tools Command Prompt for Visual Studio 2022** command prompt to configure and build the library. To build using Ninja, type\n\n```PowerShell\ncmake -S . -B build -G Ninja\ncmake --build build\n```\n\nWhen using the \"Visual Studio 17 2022\" generator you can use the **Developer Command Prompt for VS 2022** command prompt to configure and build the library. By default the generated platform will be x64. You can specify the desired platform using the architecture flag `-A <x64|Win32>` and the desired configuration using `--config <Debug|Release>`.\n\n```PowerShell\n# Generate and build for x64 in Release mode\ncmake -S . -B build -G \"Visual Studio 17 2022\" -A x64\ncmake --build build --config Release\n```\n\n```PowerShell\n# Generate and build for x86 in Release mode\ncmake -S . -B build -G \"Visual Studio 17 2022\" -A Win32\ncmake --build build --config Release\n```\n\nInstalling the library in Windows works as well. Instead of using the `sudo` command, however, you need to run `cmake --install build` from a command prompt with Administrator permissions. Files will be installed by default to `C:\\Program Files (x86)\\SEAL\\`.\n\nVisual Studio 2022 provides support for CMake-based projects. You can select the menu option `File / Open / Folder...` and navigate to the folder where the Microsoft SEAL repository is located. After opening the folder, Visual Studio will detect that this is a CMake-based project and will enable the menu command `Project / CMake settings for SEAL`. This will open the CMake settings editor that provides a user interface where you can create different configurations and set different CMake options.\n\nAfter the build completes, the output static library `seal-<version>.lib` can be found in `build\\lib\\` or `build\\lib\\Release\\`.\nWhen linking with applications, using CMake as is explained in [Linking with Microsoft SEAL through CMake](#linking-with-microsoft-seal-through-cmake) is highly recommended.\nAlternatively, you need to add `native\\src\\` (full path) and `build\\native\\src\\` as include directories to locate the Microsoft SEAL header files.\n\n#### Building for Android and iOS\n\nMicrosoft SEAL can be compiled for Android and iOS.\nUnder the [android/](android/) directory of the source tree you will find an [Android Studio](https://developer.android.com/studio) project that you can use to compile the library for Android.\n\nTo build the library for iOS, use the following scripts:\n\n```PowerShell\n# Configure CMake\ncmake -S . -B build -GXcode -DSEAL_BUILD_SEAL_C=ON -DSEAL_BUILD_STATIC_SEAL_C=ON -DCMAKE_SYSTEM_NAME=iOS \"-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64\" -C cmake/memset_s.iOS.cmake\n\n# Build libseal*.a for x86_64\nxcodebuild -project build/SEAL.xcodeproj -sdk iphonesimulator -arch x86_64 -configuration Release clean build\nmkdir -p build/lib/x86_64\ncp build/lib/Release/libseal*.a build/lib/x86_64\n\n# Build libseal*.a for arm64\nxcodebuild -project SEAL.xcodeproj -sdk iphoneos -arch arm64 -configuration Release clean build\nmkdir -p build/lib/arm64\ncp build/lib/Release/libseal*.a build/lib/arm64\n\n# Combine libseal-*.a into libseal.a and libsealc-*.a into libsealc.a\nlipo -create -output build/lib/libseal.a build/lib/x86_64/libseal-*.a arm64/libseal-*.a\nlipo -create -output build/lib/libsealc.a build/lib/x86_64/libsealc-*.a build/lib/arm64/libsealc-*.a\n```\n\nThe native libraries generated through these methods are meant to be called only through the .NET library described in the following sections.\nSpecifically, they do not contain any wrappers that can be used from Java (for Android) or Objective C (for iOS).\n\n#### Building for WebAssembly\n\nMicrosoft SEAL can be compiled for JavaScript and WebAssembly using [emscripten](https://emscripten.org) on Windows, Linux, and macOS.\nBuilding for the Web means SEAL can be run in any client/server environment such as all the major browsers (e.g. Edge, Chrome, Firefox, Safari) and NodeJS.\n\nBuilding for WebAssembly requires the emscripten toolchain to be installed.\nThe easiest way to configure the toolchain is to clone [emsdk](https://github.com/emscripten-core/emsdk) and follow the [instructions](https://emscripten.org/docs/getting_started/downloads.html#installation-instructions-using-the-emsdk-recommended) (with system-specific notes). For examples, on Linux and macOS, inside the `emsdk` repo, run the following:\n\n```PowerShell\n# Install the latest toolchain\n./emsdk install latest\n./emsdk activate latest\n# Source the environment\nsource ./emsdk_env.sh\n```\n**On Windows, better run from a developer command prompt for Visual Studio; and replace `./emsdk` and `source ./emsdk_env.sh` with `emsdk` and `emsdk_env.bat`, respectively.**\nIn other environments, `cmake` must be added to the path, and either \"Ninja\" or \"MinGW Makefiles\" should be specified as generator in the following configuration step.\n`emcmake` does not work with Visual Studio 17 2022 generator.\n\nWithin the same shell, navigate to the root directory of Microsoft SEAL, run the following commands to build for WebAssembly:\n\n```PowerShell\n# Configure CMake. Example flags for a release build\nemcmake cmake -S . -B build \\\n -DBUILD_SHARED_LIBS=OFF \\\n -DCMAKE_BUILD_TYPE=Release \\\n -DCMAKE_CXX_FLAGS_RELEASE=\"-DNDEBUG -flto -O3\" \\\n -DCMAKE_C_FLAGS_RELEASE=\"-DNDEBUG -flto -O3\" \\\n -DSEAL_BUILD_BENCH=OFF \\ # Benchmark can be built for WASM. Change this to ON.\n -DSEAL_BUILD_EXAMPLES=OFF \\\n -DSEAL_BUILD_TESTS=OFF \\\n -DSEAL_USE_CXX17=ON \\\n -DSEAL_USE_INTRIN=ON \\\n -DSEAL_USE_MSGSL=OFF \\\n -DSEAL_USE_ZLIB=ON \\\n -DSEAL_THROW_ON_TRANSPARENT_CIPHERTEXT=ON\n\n# Make the static library (shared libs are not supported with emscripten)\nemmake make -C build -j\n\n# Build the WebAssembly module\nemcc \\\n -Wall \\\n -flto \\\n -O3 \\\n build/lib/libseal-4.0.a \\\n --bind \\\n -o \"build/bin/seal_wasm.js\" \\\n -s WASM=1 \\\n -s ALLOW_MEMORY_GROWTH=1\n```\n\n**Note**: There are many flags to consider when building a WebAssembly module. Please refer to the [settings.js](https://github.com/emscripten-core/emscripten/blob/main/src/settings.js) file for advanced build flags.\n\nBuilding will generate two output files, `seal_wasm.js` and `seal_wasm.wasm`, in the `build/bin/` directory.\nThe file sizes for the artifacts are very small.\nThis is because that the optimization flags perform dead code elimination (DCE) as there are no bindings generated to JavaScript.\nDefining these bindings is **necessary** in order to call into WebAssembly from the JavaScript domain; however, Microsoft SEAL does not include any definitions at this time.\nThe build flag `--bind` expects the bindings to be specified using the [embind](https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html) syntax.\n\n#### Basic CMake Options\n\nThe following options can be used with CMake to configure the build. The default value for each option is denoted with boldface in the **Values** column.\n\n| CMake option           | Values                                                       | Information                                                                                                                                                                                            |\n| ---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| CMAKE_BUILD_TYPE       | **Release**</br>Debug</br>RelWithDebInfo</br>MinSizeRel</br> | `Debug` and `MinSizeRel` have worse run-time performance. `Debug` inserts additional assertion code. Set to `Release` unless you are developing Microsoft SEAL itself or debugging some complex issue. |\n| SEAL_BUILD_EXAMPLES    | ON / **OFF**                                                 | Build the C++ examples in [native/examples](native/examples).                                                                                                                                          |\n| SEAL_BUILD_TESTS       | ON / **OFF**                                                 | Build the tests to check that Microsoft SEAL works correctly.                                                                                                                                          |\n| SEAL_BUILD_BENCH       | ON / **OFF**                                                 | Build the performance benchmark.                                                                                                                                                                       |\n| SEAL_BUILD_DEPS        | **ON** / OFF                                                 | Set to `ON` to automatically download and build [optional dependencies](#optional-dependencies); otherwise CMake will attempt to locate pre-installed dependencies.                                    |\n| SEAL_USE_INTEL_HEXL    | ON / **OFF**                                                 | Set to `ON` to use Intel HEXL for low-level kernels.                                                                                                                                            |\n| SEAL_USE_MSGSL         | **ON** / OFF                                                 | Build with Microsoft GSL support.                                                                                                                                                                      |\n| SEAL_USE_ZLIB          | **ON** / OFF                                                 | Build with ZLIB support.                                                                                                                                                                               |\n| SEAL_USE_ZSTD          | **ON** / OFF                                                 | Build with Zstandard support.                                                                                                                                                                          |\n| BUILD_SHARED_LIBS      | ON / **OFF**                                                 | Set to `ON` to build a shared library instead of a static library. Not supported in Windows.                                                                                                           |\n| SEAL_BUILD_SEAL_C      | ON / **OFF**                                                 | Build the C wrapper library SEAL_C. This is used by the C# wrapper and most users should have no reason to build it.                                                                                   |\n| SEAL_USE_CXX17         | **ON** / OFF                                                 | Set to `ON` to build Microsoft SEAL as C++17 for a positive performance impact.                                                                                                                        |\n| SEAL_USE_INTRIN        | **ON** / OFF                                                 | Set to `ON` to use compiler intrinsics for improved performance. CMake will automatically detect which intrinsics are available and enable them accordingly.                                           |\n\nAs usual, these options can be passed to CMake with the `-D` flag.\nFor example, one could run\n\n```PowerShell\ncmake -S . -B build -DSEAL_BUILD_EXAMPLES=ON\n```\n\nto configure a release build of a static Microsoft SEAL library and also build the examples.\n\n#### Advanced CMake Options\n\nThe following options can be used with CMake to further configure the build. Most users should have no reason to change these, which is why they are marked as advanced.\n\n| CMake option                         | Values                    | Information                                                                                                                                                                                                                                                                                              |\n| ------------------------------------ | ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT | **ON** / OFF              | Set to `ON` to throw an exception when Microsoft SEAL produces a ciphertext with no key-dependent component. For example, subtracting a ciphertext from itself, or multiplying a ciphertext with a plaintext zero yield identically zero ciphertexts that should not be considered as valid ciphertexts. |\n| SEAL_BUILD_STATIC_SEAL_C             | ON / **OFF**              | Set to `ON` to build SEAL_C as a static library instead of a shared library.                                                                                                                                                                                                                             |\n| SEAL_DEFAULT_PRNG                    | **Blake2xb**</br>Shake256 | Microsoft SEAL supports both Blake2xb and Shake256 XOFs for generating random bytes. Blake2xb is much faster, but it is not standardized, whereas Shake256 is a FIPS standard.                                                                                                                           |\n| SEAL_USE_GAUSSIAN_NOISE              | ON / **OFF**              | Set to `ON` to use a non-constant time rounded continuous Gaussian for the error distribution; otherwise a centered binomial distribution &ndash; with slightly larger standard deviation &ndash; is used.                                                                                               |\n| SEAL_AVOID_BRANCHING                 | ON / **OFF**              | Set to `ON` to eliminate branching in critical functions when compiler has maliciously inserted flags; otherwise assume `cmov` is used.                                                                                               |\n| SEAL_SECURE_COMPILE_OPTIONS          | ON / **OFF**              | Set to `ON` to compile/link with Control-Flow Guard (`/guard:cf`) and Spectre mitigations (`/Qspectre`). This has an effect only when compiling with MSVC.                                                                                                                                               |\n| SEAL_USE_ALIGNED_ALLOC                    | **ON** / OFF              | Set to `ON` to use 64-byte aligned memory allocations. This can improve performance of AVX512 primitives when Intel HEXL is enabled. This depends on C++17 and is disabled on Android.                                                                                               |\n\n#### Linking with Microsoft SEAL through CMake\n\nIt is very easy to link your own applications and libraries with Microsoft SEAL if you use CMake.\nSimply add the following to your `CMakeLists.txt`:\n\n```PowerShell\nfind_package(SEAL 4.0 REQUIRED)\ntarget_link_libraries(<your target> SEAL::seal)\n```\n\nIf Microsoft SEAL was installed globally, the above `find_package` command will likely find the library automatically.\nTo link with a Microsoft SEAL installed locally, e.g., installed in `~/mylibs` as described above, you may need to tell CMake where to look for Microsoft SEAL when you configure your application by running:\n\n```PowerShell\ncd <directory containing your CMakeLists.txt>\ncmake . -DCMAKE_PREFIX_PATH=~/mylibs\n```\n\nIf Microsoft SEAL was installed using a package manager like vcpkg or Homebrew, please refer to their documentation for how to link with the installed library. For example, vcpkg requires you to specify the vcpkg CMake toolchain file when configuring your project.\n\n#### Examples, Tests, and Benchmarks\n\nWhen building Microsoft SEAL, examples, tests, and benchmarks can be built by setting `SEAL_BUILD_EXAMPLES=ON`, `SEAL_BUILD_TESTS=ON`, and `SEAL_BUILD_BENCH=ON`; see [Basic CMake Options](basic-cmake-options).\nAlternatively, [examples](native/examples/CMakeLists.txt), [tests](native/tests/CMakeLists.txt), and [benchmark](native/bench/CMakeLists.txt) can be built as standalone CMake projects linked with Microsoft SEAL (installed in `~/mylibs`), by following the commands below.\nOmit setting `SEAL_ROOT` if the library is installed globally.\n\n```PowerShell\ncd native/<examples|tests|bench>\ncmake -S . -B build -DSEAL_ROOT=~/mylibs\ncmake --build build\n```\n\nBy default, benchmarks run for a vector of parameters and primitives, which can be overwelmingly informative.\nTo execute a subset of benchmark cases, see [Google Benchmark README](https://github.com/google/benchmark/blob/master/README.md#running-a-subset-of-benchmarks).\nFor advanced users, the `bm_parms_vec` variable in [native/bench/bench.cpp](native/bench/bench.cpp) can be overwritten with custom paramter sets.\n\n**Note**: The benchmark code is strictly for experimental purposes; it allows insecure parameters that must not be used in real applications.\nDo not follow the benchmarks as examples.\n\n### Building .NET Components\n\nMicrosoft SEAL provides a .NET Standard library that wraps the functionality in Microsoft SEAL for use in .NET development.\nUsing the existing [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet) is highly recommended, unless development of Microsoft SEAL or building a custom NuGet package is intended.\nPrior to building .NET components, the C wrapper library SEAL_C must be built following [Building C++ Components](#building-c-components).\nThe SEAL_C library is meant to be used only by the .NET library, not by end-users.\n\n**Note**: SEAL_C and the .NET library only support 64-bit platforms.\n\n#### Windows, Linux, and macOS\n\nFor compiling .NET code you will need to install a [.NET SDK (>= 6.0)](https://dotnet.microsoft.com/download).\nBuilding the SEAL_C library with CMake will generate project files for the .NET wrapper library, examples, and unit tests.\nThe SEAL_C library must be discoverable when running a .NET application, e.g., be present in the same directory as your executable, which is taken care of by the .NET examples and tests project files.\nRun the following scripts to build each project:\n\n```PowerShell\ndotnet build build/dotnet/src --configuration <Debug|Release> # Build .NET wrapper library\ndotnet test build/dotnet/tests # Build and run .NET unit tests\ndotnet run -p build/dotnet/examples # Build and run .NET examples\n```\n\nYou can use `--configuration <Debug|Release>` to run `Debug` or `Release` examples and unit tests.\nYou can use `--verbosity detailed` to print the list of unit tests that are being run.\n\nOn Windows, you can also use the Microsoft Visual Studio 2022 solution file, for example, `out/build/x64-Debug/dotnet/SEALNet.sln` to build all three projects.\n\n#### Android and iOS\n\nWhile it is possible to build your own custom NuGet package for Android or iOS (see [Building for Android and iOS](#building-for-android-and-ios) for the native component), this is not easy and is not recommended. Instead, please add a reference to the multiplatform [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet) to your [Xamarin](https://dotnet.microsoft.com/apps/xamarin) project.\n\n#### Using Microsoft SEAL for .NET\n\nTo use Microsoft SEAL for .NET in your own application you need to:\n\n1. Add a reference in your project to `SEALNet.dll`;\n1. Ensure the native shared library is available for your application when run.\nThe easiest way to ensure this is to copy the native shared library to the same directory where your application's executable is located.\n\n#### Building Your Own NuGet Package\n\nYou can build your own NuGet package for Microsoft SEAL by following the instructions in [NUGET.md](dotnet/nuget/NUGET.md).\n\n## Contributing\n\nFor contributing to Microsoft SEAL, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Citing Microsoft SEAL\n\nTo cite Microsoft SEAL in academic papers, please use the following BibTeX entries.\n\n### Version 4.0\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 4.0)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = mar,\n        year = 2022,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.7\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.7)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = sep,\n        year = 2021,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.6\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.6)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = nov,\n        year = 2020,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.5\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.5)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = apr,\n        year = 2020,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.4\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.4)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = oct,\n        year = 2019,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.3\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.3)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = jun,\n        year = 2019,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.2\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.2)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = feb,\n        year = 2019,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.1\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.1)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = dec,\n        year = 2018,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.0\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.0)},\n        howpublished = {\\url{http://sealcrypto.org}},\n        month = oct,\n        year = 2018,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n## Acknowledgments\n\nMany people have contributed substantially to Microsoft SEAL without being represented in the Git history.\nWe wish to express special gratitude to [John Wernsing](https://github.com/wernsingj), [Hao Chen](https://github.com/haochenuw), [Yongsoo Song](https://yongsoosong.github.io), [Olli Saarikivi](https://github.com/olsaarik), [Rachel Player](https://github.com/rachelplayer), [Gizem S. Cetin](https://github.com/gizemscetin), [Peter Rindal](https://github.com/ladnir), [Amir Jalali](https://github.com/amirjalali65), [Kyoohyung Han](https://github.com/KyoohyungHan), [Sadegh Riazi](https://www.sadeghr.com), [Ilia Iliashenko](https://homes.esat.kuleuven.be/~ilia), [Roshan Dathathri](https://roshandathathri.github.io), [Pardis Emami-Naeini](https://homes.cs.washington.edu/~pemamina), [Sangeeta Chowdhary](https://github.com/sangeeta0201), [Deepika Natarajan](https://github.com/dnat112), and [Michael Rosenberg](https://github.com/rozbb).\n"
 },
 {
  "repo": "zendframework/zend-crypt",
  "language": "PHP",
  "readme_contents": "# zend-crypt\n\n> ## Repository abandoned 2019-12-31\n>\n> This repository has moved to [laminas/laminas-crypt](https://github.com/laminas/laminas-crypt).\n\n[![Build Status](https://secure.travis-ci.org/zendframework/zend-crypt.svg?branch=master)](https://secure.travis-ci.org/zendframework/zend-crypt)\n[![Coverage Status](https://coveralls.io/repos/github/zendframework/zend-crypt/badge.svg?branch=master)](https://coveralls.io/github/zendframework/zend-crypt?branch=master)\n\n`Zend\\Crypt` provides support of some cryptographic tools.\nSome of the available features are:\n\n- encrypt-then-authenticate using symmetric ciphers (the authentication step\n  is provided using HMAC);\n- encrypt/decrypt using symmetric and public key algorithm (e.g. RSA algorithm);\n- encrypt/decrypt using hybrid mode (OpenPGP like);\n- generate digital sign using public key algorithm (e.g. RSA algorithm);\n- key exchange using the Diffie-Hellman method;\n- key derivation function (e.g. using PBKDF2 algorithm);\n- secure password hash (e.g. using Bcrypt algorithm);\n- generate Hash values;\n- generate HMAC values;\n\nThe main scope of this component is to offer an easy and secure way to protect\nand authenticate sensitive data in PHP.\n\n\n- File issues at https://github.com/zendframework/zend-crypt/issues\n- Documentation is at https://docs.zendframework.com/zend-crypt\n"
 },
 {
  "repo": "mirage/mirage-crypto",
  "language": "C",
  "readme_contents": "# mirage-crypto - Cryptographic primitives for MirageOS\n\n%%VERSION%%\n\nmirage-crypto is a small cryptographic library that puts emphasis on the\napplicative style and ease of use. It includes basic ciphers (AES, 3DES, RC4,\nChaCha20/Poly1305), hashes (MD5, SHA1, SHA2 family), AEAD primitives (AES-GCM,\nAES-CCM), public-key primitives (RSA, DSA, DH) and a strong RNG (Fortuna).\n\nRSA timing attacks are countered by blinding. AES timing attacks are avoided by\ndelegating to AES-NI.\n\nMirage-crypto is a fork of the\n[ocaml-nocrypto](https://github.com/mirleft/ocaml-nocrypto) written by David\nKaloper.  It was forked with the permission of the original author in order to\nfacilitate changes (e.g. build system) required by Mirage that the upstream\ndidn't have time to keep up with.\n\nMirage-crypto-rng embeds the former mirage-entropy opam package, which\nimplements various entropy sources:\n- non-deterministic execution time (used at initial seeding, see the [whirlwind RNG paper](https://www.ieee-security.org/TC/SP2014/papers/Not-So-RandomNumbersinVirtualizedLinuxandtheWhirlwindRNG.pdf))\n- a hook into the Lwt event loop that collects a timestamp of each event\n- rdseed and rdrand (x86/x86-64 only)\n\n[API documentation online](https://mirage.github.io/mirage-crypto/doc)\n\n## Build\n\n```bash\ndune build\ndune runtest\n```\n\n## FAQ\n\n#### RNG seeding\n\nIf RNG fails with `Fatal error: exception Unseeded_generator`, you need to\nseed it.\n\nLwt:\n```OCaml\nlet () = Mirage_crypto_rng_lwt.initialize ()\n```\n\nUnix:\n```OCaml\nlet () = Mirage_crypto_rng_unix.initialize ()\n```\n"
 },
 {
  "repo": "BLAKE3-team/BLAKE3",
  "language": "Assembly",
  "readme_contents": "# <a href=\"#\"><img src=\"media/BLAKE3.svg\" alt=\"BLAKE3\" height=50></a>\n\nBLAKE3 is a cryptographic hash function that is:\n\n- **Much faster** than MD5, SHA-1, SHA-2, SHA-3, and BLAKE2.\n- **Secure**, unlike MD5 and SHA-1. And secure against length extension,\n  unlike SHA-2.\n- **Highly parallelizable** across any number of threads and SIMD lanes,\n  because it's a Merkle tree on the inside.\n- Capable of **verified streaming** and **incremental updates**, again\n  because it's a Merkle tree.\n- A **PRF**, **MAC**, **KDF**, and **XOF**, as well as a regular hash.\n- **One algorithm with no variants**, which is fast on x86-64 and also\n  on smaller architectures.\n\nThe [chart below](https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/benchmarks/bar_chart.py)\nis an example benchmark of 16 KiB inputs on a Cascade Lake-SP 8275CL server CPU\nfrom 2019. For more detailed benchmarks, see the\n[BLAKE3 paper](https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf).\n\n<p align=\"center\">\n<img src=\"media/speed.svg\" alt=\"performance graph\">\n</p>\n\nBLAKE3 is based on an optimized instance of the established hash\nfunction [BLAKE2](https://blake2.net) and on the [original Bao tree\nmode](https://github.com/oconnor663/bao/blob/master/docs/spec_0.9.1.md).\nThe specifications and design rationale are available in the [BLAKE3\npaper](https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf).\nThe default output size is 256 bits. The current version of\n[Bao](https://github.com/oconnor663/bao) implements verified streaming\nwith BLAKE3.\n\nThis repository is the official implementation of BLAKE3. It includes:\n\n* The [`blake3`](https://crates.io/crates/blake3) Rust crate, which\n  includes optimized implementations for SSE2, SSE4.1, AVX2, AVX-512,\n  and NEON, with automatic runtime CPU feature detection on x86. The\n  `rayon` feature provides multithreading.\n\n* The [`b3sum`](https://crates.io/crates/b3sum) Rust crate, which\n  provides a command line interface. It uses multithreading by default,\n  making it an order of magnitude faster than e.g. `sha256sum` on\n  typical desktop hardware.\n\n* The [C implementation](c), which like the Rust implementation includes\n  SIMD code and runtime CPU feature detection on x86. Unlike the Rust\n  implementation, it's [not currently multithreaded](c#multithreading). See\n  [`c/README.md`](c/README.md).\n\n* The [Rust reference implementation](reference_impl/reference_impl.rs),\n  which is discussed in Section 5.1 of the [BLAKE3\n  paper](https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf).\n  This implementation is much smaller and simpler than the optimized\n  ones above. If you want to see how BLAKE3 works, or you're writing a\n  port that doesn't need multithreading or SIMD optimizations, start\n  here. Ports of the reference implementation to other languages are\n  hosted in separate repositories\n  ([C](https://github.com/oconnor663/blake3_reference_impl_c),\n  [Python](https://github.com/oconnor663/pure_python_blake3)).\n\n* A [set of test\n  vectors](https://github.com/BLAKE3-team/BLAKE3/blob/master/test_vectors/test_vectors.json)\n  that covers extended outputs, all three modes, and a variety of input\n  lengths.\n\n* [![Actions Status](https://github.com/BLAKE3-team/BLAKE3/workflows/tests/badge.svg)](https://github.com/BLAKE3-team/BLAKE3/actions)\n\nBLAKE3 was designed by:\n\n* [@oconnor663 ](https://github.com/oconnor663) (Jack O'Connor)\n* [@sneves](https://github.com/sneves) (Samuel Neves)\n* [@veorq](https://github.com/veorq) (Jean-Philippe Aumasson)\n* [@zookozcash](https://github.com/zookozcash) (Zooko)\n\nThe development of BLAKE3 was sponsored by [Electric Coin Company](https://electriccoin.co).\n\n*NOTE: BLAKE3 is not a password hashing algorithm, because it's\ndesigned to be fast, whereas password hashing should not be fast. If you\nhash passwords to store the hashes or if you derive keys from passwords,\nwe recommend [Argon2](https://github.com/P-H-C/phc-winner-argon2).*\n\n## Usage\n\n### The `b3sum` utility\n\nThe `b3sum` command line utility prints the BLAKE3 hashes of files or of\nstandard input. Prebuilt binaries are available for Linux, Windows, and\nmacOS (requiring the [unidentified developer\nworkaround](https://support.apple.com/guide/mac-help/open-a-mac-app-from-an-unidentified-developer-mh40616/mac))\non the [releases page](https://github.com/BLAKE3-team/BLAKE3/releases).\nIf you've [installed Rust and\nCargo](https://doc.rust-lang.org/cargo/getting-started/installation.html),\nyou can also build `b3sum` yourself with:\n\n```bash\ncargo install b3sum\n```\n\nIf `rustup` didn't configure your `PATH` for you, you might need to go\nlooking for the installed binary in e.g. `~/.cargo/bin`. You can test\nout how fast BLAKE3 is on your machine by creating a big file and\nhashing it, for example:\n\n```bash\n# Create a 1 GB file.\nhead -c 1000000000 /dev/zero > /tmp/bigfile\n# Hash it with SHA-256.\ntime openssl sha256 /tmp/bigfile\n# Hash it with BLAKE3.\ntime b3sum /tmp/bigfile\n```\n\n### The `blake3` crate [![docs.rs](https://docs.rs/blake3/badge.svg)](https://docs.rs/blake3)\n\nTo use BLAKE3 from Rust code, add a dependency on the `blake3` crate to\nyour `Cargo.toml`. Here's an example of hashing some input bytes:\n\n```rust\n// Hash an input all at once.\nlet hash1 = blake3::hash(b\"foobarbaz\");\n\n// Hash an input incrementally.\nlet mut hasher = blake3::Hasher::new();\nhasher.update(b\"foo\");\nhasher.update(b\"bar\");\nhasher.update(b\"baz\");\nlet hash2 = hasher.finalize();\nassert_eq!(hash1, hash2);\n\n// Extended output. OutputReader also implements Read and Seek.\nlet mut output = [0; 1000];\nlet mut output_reader = hasher.finalize_xof();\noutput_reader.fill(&mut output);\nassert_eq!(hash1, output[..32]);\n\n// Print a hash as hex.\nprintln!(\"{}\", hash1);\n```\n\nBesides `hash`, BLAKE3 provides two other modes, `keyed_hash` and\n`derive_key`. The `keyed_hash` mode takes a 256-bit key:\n\n```rust\n// MAC an input all at once.\nlet example_key = [42u8; 32];\nlet mac1 = blake3::keyed_hash(&example_key, b\"example input\");\n\n// MAC incrementally.\nlet mut hasher = blake3::Hasher::new_keyed(&example_key);\nhasher.update(b\"example input\");\nlet mac2 = hasher.finalize();\nassert_eq!(mac1, mac2);\n```\n\nThe `derive_key` mode takes a context string and some key material (not a\npassword). The context string should be hardcoded, globally unique, and\napplication-specific. A good default format for the context string is\n`\"[application] [commit timestamp] [purpose]\"`:\n\n```rust\n// Derive a couple of subkeys for different purposes.\nconst EMAIL_CONTEXT: &str = \"BLAKE3 example 2020-01-07 17:10:44 email key\";\nconst API_CONTEXT: &str = \"BLAKE3 example 2020-01-07 17:11:21 API key\";\nlet input_key_material = b\"usually at least 32 random bytes, not a password\";\nlet email_key = blake3::derive_key(EMAIL_CONTEXT, input_key_material);\nlet api_key = blake3::derive_key(API_CONTEXT, input_key_material);\nassert_ne!(email_key, api_key);\n```\n\n### The C implementation\n\nSee [`c/README.md`](c/README.md).\n\n### Other implementations\n\nWe post links to third-party bindings and implementations on the\n[@BLAKE3team Twitter account](https://twitter.com/BLAKE3team) whenever\nwe hear about them. Some highlights include [an optimized Go\nimplementation](https://github.com/zeebo/blake3), [Wasm bindings for\nNode.js and browsers](https://github.com/connor4312/blake3), [binary\nwheels for Python](https://github.com/oconnor663/blake3-py), [.NET\nbindings](https://github.com/xoofx/Blake3.NET), and [JNI\nbindings](https://github.com/sken77/BLAKE3jni).\n\n## Contributing\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Intellectual property\n\nThe Rust code is copyright Jack O'Connor, 2019-2020. The C code is\ncopyright Samuel Neves and Jack O'Connor, 2019-2020. The assembly code\nis copyright Samuel Neves, 2019-2020.\n\nThis work is released into the public domain with CC0 1.0.\nAlternatively, it is licensed under the Apache License 2.0.\n\n## Adoption & deployment\n\nHere's a (non-exhaustive) list of protocols and software that use BLAKE3:\n\n* [Chia](https://github.com/Chia-Network/chia-blockchain/blob/main/CHANGELOG.md#10beta8-aka-beta-18---2020-07-16)\n* [IPFS](https://github.com/ipfs/go-verifcid/issues/13)\n* [LLVM](https://reviews.llvm.org/D121510)\n* [Nym](https://github.com/nymtech/nym/blob/59056a22c5e6b01a38da2124662bd1fa3c8abef2/common/nymsphinx/params/src/lib.rs#L5)\n* [OpenZFS](https://github.com/openzfs/zfs/)\n* [Redox](https://www.redox-os.org/news/pkgar-introduction/)\n* [Skale](https://github.com/skalenetwork/skale-consensus/pull/284)\n* [Solana](https://docs.rs/solana-program/1.9.5/solana_program/blake3/index.html)\n* [Wasmer](https://github.com/wasmerio/wasmer/blob/4f935a8c162bf604df223003e434e4f7ca253688/lib/cache/src/hash.rs#L21)\n\n\n## Miscellany\n\n- [@veorq](https://github.com/veorq) and\n  [@oconnor663](https://github.com/oconnor663) did [a podcast\n  interview](https://www.cryptography.fm/3) about designing BLAKE3.\n"
 },
 {
  "repo": "openssl/openssl",
  "language": "C",
  "readme_contents": "Engines\n=======\n\nDeprecation Note\n----------------\n\nThe ENGINE API was introduced in OpenSSL version 0.9.6 as a low level\ninterface for adding alternative implementations of cryptographic\nprimitives, most notably for integrating hardware crypto devices.\n\nThe ENGINE interface has its limitations and it has been superseded\nby the [PROVIDER API](README-PROVIDERS.md), it is deprecated in OpenSSL\nversion 3.0. The following documentation is retained as an aid for\nusers who need to maintain or support existing ENGINE implementations.\nSupport for new hardware devices or new algorithms should be added\nvia providers, and existing engines should be converted to providers\nas soon as possible.\n\nBuilt-in ENGINE implementations\n-------------------------------\n\nThere are currently built-in ENGINE implementations for the following\ncrypto devices:\n\n  * Microsoft CryptoAPI\n  * VIA Padlock\n  * nCipher CHIL\n\nIn addition, dynamic binding to external ENGINE implementations is now\nprovided by a special ENGINE called \"dynamic\". See the \"DYNAMIC ENGINE\"\nsection below for details.\n\nAt this stage, a number of things are still needed and are being worked on:\n\n  1. Integration of EVP support.\n  2. Configuration support.\n  3. Documentation!\n\nIntegration of EVP support\n--------------------------\n\nWith respect to EVP, this relates to support for ciphers and digests in\nthe ENGINE model so that alternative implementations of existing\nalgorithms/modes (or previously unimplemented ones) can be provided by\nENGINE implementations.\n\nConfiguration support\n---------------------\n\nConfiguration support currently exists in the ENGINE API itself, in the\nform of \"control commands\". These allow an application to expose to the\nuser/admin the set of commands and parameter types a given ENGINE\nimplementation supports, and for an application to directly feed string\nbased input to those ENGINEs, in the form of name-value pairs. This is an\nextensible way for ENGINEs to define their own \"configuration\" mechanisms\nthat are specific to a given ENGINE (eg. for a particular hardware\ndevice) but that should be consistent across *all* OpenSSL-based\napplications when they use that ENGINE. Work is in progress (or at least\nin planning) for supporting these control commands from the CONF (or\nNCONF) code so that applications using OpenSSL's existing configuration\nfile format can have ENGINE settings specified in much the same way.\nPresently however, applications must use the ENGINE API itself to provide\nsuch functionality. To see first hand the types of commands available\nwith the various compiled-in ENGINEs (see further down for dynamic\nENGINEs), use the \"engine\" openssl utility with full verbosity, i.e.:\n\n    openssl engine -vvvv\n\nDocumentation\n-------------\n\nDocumentation? Volunteers welcome! The source code is reasonably well\nself-documenting, but some summaries and usage instructions are needed -\nmoreover, they are needed in the same POD format the existing OpenSSL\ndocumentation is provided in. Any complete or incomplete contributions\nwould help make this happen.\n\nSTABILITY & BUG-REPORTS\n=======================\n\nWhat already exists is fairly stable as far as it has been tested, but\nthe test base has been a bit small most of the time. For the most part,\nthe vendors of the devices these ENGINEs support have contributed to the\ndevelopment and/or testing of the implementations, and *usually* (with no\nguarantees) have experience in using the ENGINE support to drive their\ndevices from common OpenSSL-based applications. Bugs and/or inexplicable\nbehaviour in using a specific ENGINE implementation should be sent to the\nauthor of that implementation (if it is mentioned in the corresponding C\nfile), and in the case of implementations for commercial hardware\ndevices, also through whatever vendor support channels are available.  If\nnone of this is possible, or the problem seems to be something about the\nENGINE API itself (ie. not necessarily specific to a particular ENGINE\nimplementation) then you should mail complete details to the relevant\nOpenSSL mailing list. For a definition of \"complete details\", refer to\nthe OpenSSL \"README\" file. As for which list to send it to:\n\n  * openssl-users: if you are *using* the ENGINE abstraction, either in an\n    pre-compiled application or in your own application code.\n\n  * openssl-dev: if you are discussing problems with OpenSSL source code.\n\nUSAGE\n=====\n\nThe default \"openssl\" ENGINE is always chosen when performing crypto\noperations unless you specify otherwise. You must actively tell the\nopenssl utility commands to use anything else through a new command line\nswitch called \"-engine\". Also, if you want to use the ENGINE support in\nyour own code to do something similar, you must likewise explicitly\nselect the ENGINE implementation you want.\n\nDepending on the type of hardware, system, and configuration, \"settings\"\nmay need to be applied to an ENGINE for it to function as expected/hoped.\nThe recommended way of doing this is for the application to support\nENGINE \"control commands\" so that each ENGINE implementation can provide\nwhatever configuration primitives it might require and the application\ncan allow the user/admin (and thus the hardware vendor's support desk\nalso) to provide any such input directly to the ENGINE implementation.\nThis way, applications do not need to know anything specific to any\ndevice, they only need to provide the means to carry such user/admin\ninput through to the ENGINE in question. Ie. this connects *you* (and\nyour helpdesk) to the specific ENGINE implementation (and device), and\nallows application authors to not get buried in hassle supporting\narbitrary devices they know (and care) nothing about.\n\nA new \"openssl\" utility, \"openssl engine\", has been added in that allows\nfor testing and examination of ENGINE implementations. Basic usage\ninstructions are available by specifying the \"-?\" command line switch.\n\nDYNAMIC ENGINES\n===============\n\nThe new \"dynamic\" ENGINE provides a low-overhead way to support ENGINE\nimplementations that aren't pre-compiled and linked into OpenSSL-based\napplications. This could be because existing compiled-in implementations\nhave known problems and you wish to use a newer version with an existing\napplication. It could equally be because the application (or OpenSSL\nlibrary) you are using simply doesn't have support for the ENGINE you\nwish to use, and the ENGINE provider (eg. hardware vendor) is providing\nyou with a self-contained implementation in the form of a shared-library.\nThe other use-case for \"dynamic\" is with applications that wish to\nmaintain the smallest foot-print possible and so do not link in various\nENGINE implementations from OpenSSL, but instead leaves you to provide\nthem, if you want them, in the form of \"dynamic\"-loadable\nshared-libraries. It should be possible for hardware vendors to provide\ntheir own shared-libraries to support arbitrary hardware to work with\napplications based on OpenSSL 0.9.7 or later. If you're using an\napplication based on 0.9.7 (or later) and the support you desire is only\nannounced for versions later than the one you need, ask the vendor to\nbackport their ENGINE to the version you need.\n\nHow does \"dynamic\" work?\n------------------------\n\nThe dynamic ENGINE has a special flag in its implementation such that\nevery time application code asks for the 'dynamic' ENGINE, it in fact\ngets its own copy of it. As such, multi-threaded code (or code that\nmultiplexes multiple uses of 'dynamic' in a single application in any\nway at all) does not get confused by 'dynamic' being used to do many\nindependent things. Other ENGINEs typically don't do this so there is\nonly ever 1 ENGINE structure of its type (and reference counts are used\nto keep order). The dynamic ENGINE itself provides absolutely no\ncryptographic functionality, and any attempt to \"initialise\" the ENGINE\nautomatically fails. All it does provide are a few \"control commands\"\nthat can be used to control how it will load an external ENGINE\nimplementation from a shared-library. To see these control commands,\nuse the command-line;\n\n    openssl engine -vvvv dynamic\n\nThe \"SO_PATH\" control command should be used to identify the\nshared-library that contains the ENGINE implementation, and \"NO_VCHECK\"\nmight possibly be useful if there is a minor version conflict and you\n(or a vendor helpdesk) is convinced you can safely ignore it.\n\"ID\" is probably only needed if a shared-library implements\nmultiple ENGINEs, but if you know the engine id you expect to be using,\nit doesn't hurt to specify it (and this provides a sanity check if\nnothing else). \"LIST_ADD\" is only required if you actually wish the\nloaded ENGINE to be discoverable by application code later on using the\nENGINE's \"id\". For most applications, this isn't necessary - but some\napplication authors may have nifty reasons for using it. The \"LOAD\"\ncommand is the only one that takes no parameters and is the command\nthat uses the settings from any previous commands to actually *load*\nthe shared-library ENGINE implementation. If this command succeeds, the\n(copy of the) 'dynamic' ENGINE will magically morph into the ENGINE\nthat has been loaded from the shared-library. As such, any control\ncommands supported by the loaded ENGINE could then be executed as per\nnormal. Eg. if ENGINE \"foo\" is implemented in the shared-library\n\"libfoo.so\" and it supports some special control command \"CMD_FOO\", the\nfollowing code would load and use it (NB: obviously this code has no\nerror checking);\n\n    ENGINE *e = ENGINE_by_id(\"dynamic\");\n    ENGINE_ctrl_cmd_string(e, \"SO_PATH\", \"/lib/libfoo.so\", 0);\n    ENGINE_ctrl_cmd_string(e, \"ID\", \"foo\", 0);\n    ENGINE_ctrl_cmd_string(e, \"LOAD\", NULL, 0);\n    ENGINE_ctrl_cmd_string(e, \"CMD_FOO\", \"some input data\", 0);\n\nFor testing, the \"openssl engine\" utility can be useful for this sort\nof thing. For example the above code excerpt would achieve much the\nsame result as;\n\n    openssl engine dynamic \\\n              -pre SO_PATH:/lib/libfoo.so \\\n              -pre ID:foo \\\n              -pre LOAD \\\n              -pre \"CMD_FOO:some input data\"\n\nOr to simply see the list of commands supported by the \"foo\" ENGINE;\n\n    openssl engine -vvvv dynamic \\\n              -pre SO_PATH:/lib/libfoo.so \\\n              -pre ID:foo \\\n              -pre LOAD\n\nApplications that support the ENGINE API and more specifically, the\n\"control commands\" mechanism, will provide some way for you to pass\nsuch commands through to ENGINEs. As such, you would select \"dynamic\"\nas the ENGINE to use, and the parameters/commands you pass would\ncontrol the *actual* ENGINE used. Each command is actually a name-value\npair and the value can sometimes be omitted (eg. the \"LOAD\" command).\nWhilst the syntax demonstrated in \"openssl engine\" uses a colon to\nseparate the command name from the value, applications may provide\ntheir own syntax for making that separation (eg. a win32 registry\nkey-value pair may be used by some applications). The reason for the\n\"-pre\" syntax in the \"openssl engine\" utility is that some commands\nmight be issued to an ENGINE *after* it has been initialised for use.\nEg. if an ENGINE implementation requires a smart-card to be inserted\nduring initialisation (or a PIN to be typed, or whatever), there may be\na control command you can issue afterwards to \"forget\" the smart-card\nso that additional initialisation is no longer possible. In\napplications such as web-servers, where potentially volatile code may\nrun on the same host system, this may provide some arguable security\nvalue. In such a case, the command would be passed to the ENGINE after\nit has been initialised for use, and so the \"-post\" switch would be\nused instead. Applications may provide a different syntax for\nsupporting this distinction, and some may simply not provide it at all\n(\"-pre\" is almost always what you're after, in reality).\n\nHow do I build a \"dynamic\" ENGINE?\n----------------------------------\n\nThis question is trickier - currently OpenSSL bundles various ENGINE\nimplementations that are statically built in, and any application that\ncalls the \"ENGINE_load_builtin_engines()\" function will automatically\nhave all such ENGINEs available (and occupying memory). Applications\nthat don't call that function have no ENGINEs available like that and\nwould have to use \"dynamic\" to load any such ENGINE - but on the other\nhand such applications would only have the memory footprint of any\nENGINEs explicitly loaded using user/admin provided control commands.\nThe main advantage of not statically linking ENGINEs and only using\n\"dynamic\" for hardware support is that any installation using no\n\"external\" ENGINE suffers no unnecessary memory footprint from unused\nENGINEs. Likewise, installations that do require an ENGINE incur the\noverheads from only *that* ENGINE once it has been loaded.\n\nSounds good? Maybe, but currently building an ENGINE implementation as\na shared-library that can be loaded by \"dynamic\" isn't automated in\nOpenSSL's build process. It can be done manually quite easily however.\nSuch a shared-library can either be built with any OpenSSL code it\nneeds statically linked in, or it can link dynamically against OpenSSL\nif OpenSSL itself is built as a shared library. The instructions are\nthe same in each case, but in the former (statically linked any\ndependencies on OpenSSL) you must ensure OpenSSL is built with\nposition-independent code (\"PIC\"). The default OpenSSL compilation may\nalready specify the relevant flags to do this, but you should consult\nwith your compiler documentation if you are in any doubt.\n\nThis example will show building the \"atalla\" ENGINE in the\ncrypto/engine/ directory as a shared-library for use via the \"dynamic\"\nENGINE.\n\n  1. \"cd\" to the crypto/engine/ directory of a pre-compiled OpenSSL\n     source tree.\n\n  2. Recompile at least one source file so you can see all the compiler\n     flags (and syntax) being used to build normally. Eg;\n\n         touch hw_atalla.c ; make\n\n     will rebuild \"hw_atalla.o\" using all such flags.\n\n  3. Manually enter the same compilation line to compile the\n     \"hw_atalla.c\" file but with the following two changes;\n      * add \"-DENGINE_DYNAMIC_SUPPORT\" to the command line switches,\n      * change the output file from \"hw_atalla.o\" to something new,\n        eg. \"tmp_atalla.o\"\n\n  4. Link \"tmp_atalla.o\" into a shared-library using the top-level\n     OpenSSL libraries to resolve any dependencies. The syntax for doing\n     this depends heavily on your system/compiler and is a nightmare\n     known well to anyone who has worked with shared-library portability\n     before. 'gcc' on Linux, for example, would use the following syntax;\n\n         gcc -shared -o dyn_atalla.so tmp_atalla.o -L../.. -lcrypto\n\n  5. Test your shared library using \"openssl engine\" as explained in the\n     previous section. Eg. from the top-level directory, you might try\n\n         apps/openssl engine -vvvv dynamic \\\n               -pre SO_PATH:./crypto/engine/dyn_atalla.so -pre LOAD\n\nIf the shared-library loads successfully, you will see both \"-pre\"\ncommands marked as \"SUCCESS\" and the list of control commands\ndisplayed (because of \"-vvvv\") will be the control commands for the\n*atalla* ENGINE (ie. *not* the 'dynamic' ENGINE). You can also add\nthe \"-t\" switch to the utility if you want it to try and initialise\nthe atalla ENGINE for use to test any possible hardware/driver issues.\n\nPROBLEMS\n========\n\nIt seems like the ENGINE part doesn't work too well with CryptoSwift on Win32.\nA quick test done right before the release showed that trying \"openssl speed\n-engine cswift\" generated errors. If the DSO gets enabled, an attempt is made\nto write at memory address 0x00000002.\n\n"
 },
 {
  "repo": "rustls/rustls",
  "language": "Rust",
  "readme_contents": "<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"https://raw.githubusercontent.com/rustls/rustls/main/admin/rustls-logo-web.png\">\n</p>\n\n<p align=\"center\">\nRustls is a modern TLS library written in Rust.  It uses <a href = \"https://github.com/briansmith/ring\"><em>ring</em></a> for cryptography and <a href = \"https://github.com/briansmith/webpki\">libwebpki</a> for certificate\nverification.\n</p>\n\n# Status\nRustls is ready for use.  There are no major breaking interface changes\nenvisioned after the set included in the 0.20 release.\n\nIf you'd like to help out, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n[![Build Status](https://github.com/rustls/rustls/actions/workflows/build.yml/badge.svg?branch=main)](https://github.com/rustls/rustls/actions/workflows/build.yml?query=branch%3Amain)\n[![Coverage Status (codecov.io)](https://codecov.io/gh/rustls/rustls/branch/main/graph/badge.svg)](https://codecov.io/gh/rustls/rustls/)\n[![Documentation](https://docs.rs/rustls/badge.svg)](https://docs.rs/rustls/)\n\n## Release history:\n\n* Next release:\n  - Planned: removal of unused signature verification schemes at link-time.\n  - Expose AlertDescription, ContentType, and HandshakeType,\n    SignatureAlgorithm, and NamedGroup as part of the stable API. Previously they\n    were part of the unstable internals API, but were referenced by parts of the\n    stable API.\n* 0.20.6 (2022-05-18)\n  - 0.20.5 included a change to track more context for the `Error::CorruptMessage`\n    which made API-incompatible changes to the `Error` type. We yanked 0.20.5\n    and have reverted that change as part of 0.20.6.\n* 0.20.5 (2022-05-14)\n  - Correct compatbility with servers which return no TLS extensions and take\n    advantage of a special case encoding.\n  - Remove spurious warn-level logging introduced in 0.20.3.\n  - Expose cipher suites in `ClientHello` type.\n  - Allow verification of IP addresses with `dangerous_config` enabled.\n  - Retry I/O operations in `ConnectionCommon::complete_io()` when interrupted.\n  - Fix server::ResolvesServerCertUsingSni case sensitivity.\n* 0.20.4 (2022-02-19)\n  - Correct regression in QUIC 0-RTT support.\n* 0.20.3 (2022-02-13)\n  - Support loading ECDSA keys in SEC1 format.\n  - Support receipt of 0-RTT \"early data\" in TLS1.3 servers.  It is not enabled\n    by default; opt in by setting `ServerConfig::max_early_data_size` to a non-zero\n    value.\n  - Support sending of data with the first server flight.  This is also not\n    enabled by default either: opt in by setting `ServerConfig::send_half_rtt_data`.\n  - Support `read_buf` interface when compiled with nightly. This means\n    data can be safely read out of a rustls connection into a buffer without\n    the buffer requiring initialisation first.  Set the `read_buf` feature to\n    use this.\n  - Improve efficiency when writing vectors of TLS types.\n  - Reduce copying and improve efficiency in TLS1.2 handshake.\n* 0.20.2 (2021-11-21)\n  - Fix `CipherSuite::as_str()` value (as introduced in 0.20.1).\n* 0.20.1 (2021-11-14)\n  - Allow cipher suite enum items to be stringified.\n  - Improve documentation of configuration builder types.\n  - Ensure unused cipher suites can be removed at link-time.\n  - Ensure single-use error types implement `std::error::Error`, and are public.\n\nSee [RELEASE_NOTES.md](RELEASE_NOTES.md) for further change history.\n\n# Documentation\nLives here: https://docs.rs/rustls/\n\n# Approach\nRustls is a TLS library that aims to provide a good level of cryptographic security,\nrequires no configuration to achieve that security, and provides no unsafe features or\nobsolete cryptography.\n\n## Current features\n\n* TLS1.2 and TLS1.3.\n* ECDSA, Ed25519 or RSA server authentication by clients.\n* ECDSA, Ed25519 or RSA server authentication by servers.\n* Forward secrecy using ECDHE; with curve25519, nistp256 or nistp384 curves.\n* AES128-GCM and AES256-GCM bulk encryption, with safe nonces.\n* ChaCha20-Poly1305 bulk encryption ([RFC7905](https://tools.ietf.org/html/rfc7905)).\n* ALPN support.\n* SNI support.\n* Tunable fragment size to make TLS messages match size of underlying transport.\n* Optional use of vectored IO to minimise system calls.\n* TLS1.2 session resumption.\n* TLS1.2 resumption via tickets ([RFC5077](https://tools.ietf.org/html/rfc5077)).\n* TLS1.3 resumption via tickets or session storage.\n* TLS1.3 0-RTT data for clients.\n* TLS1.3 0-RTT data for servers.\n* Client authentication by clients.\n* Client authentication by servers.\n* Extended master secret support ([RFC7627](https://tools.ietf.org/html/rfc7627)).\n* Exporters ([RFC5705](https://tools.ietf.org/html/rfc5705)).\n* OCSP stapling by servers.\n* SCT stapling by servers.\n* SCT verification by clients.\n\n## Possible future features\n\n* PSK support.\n* OCSP verification by clients.\n* Certificate pinning.\n\n## Non-features\n\nFor reasons [explained in the manual](https://docs.rs/rustls/latest/rustls/manual/_02_tls_vulnerabilities/index.html),\nrustls does not and will not support:\n\n* SSL1, SSL2, SSL3, TLS1 or TLS1.1.\n* RC4.\n* DES or triple DES.\n* EXPORT ciphersuites.\n* MAC-then-encrypt ciphersuites.\n* Ciphersuites without forward secrecy.\n* Renegotiation.\n* Kerberos.\n* Compression.\n* Discrete-log Diffie-Hellman.\n* Automatic protocol version downgrade.\n\nThere are plenty of other libraries that provide these features should you\nneed them.\n\n### Platform support\n\nRustls uses [`ring`](https://crates.io/crates/ring) for implementing the\ncryptography in TLS. As a result, rustls only runs on platforms\n[supported by `ring`](https://github.com/briansmith/ring#online-automated-testing).\nAt the time of writing this means x86, x86-64, armv7, and aarch64.\n\nRustls requires Rust 1.56 or later.\n\n# Example code\nThere are two example programs which use\n[mio](https://github.com/carllerche/mio) to do asynchronous IO.\n\n## Client example program\nThe client example program is named `tlsclient`.  The interface looks like:\n\n```tlsclient\nConnects to the TLS server at hostname:PORT.  The default PORT\nis 443.  By default, this reads a request from stdin (to EOF)\nbefore making the connection.  --http replaces this with a\nbasic HTTP GET request for /.\n\nIf --cafile is not supplied, a built-in set of CA certificates\nare used from the webpki-roots crate.\n\nUsage:\n  tlsclient [options] [--suite SUITE ...] [--proto PROTO ...] <hostname>\n  tlsclient (--version | -v)\n  tlsclient (--help | -h)\n\nOptions:\n    -p, --port PORT     Connect to PORT [default: 443].\n    --http              Send a basic HTTP GET request for /.\n    --cafile CAFILE     Read root certificates from CAFILE.\n    --auth-key KEY      Read client authentication key from KEY.\n    --auth-certs CERTS  Read client authentication certificates from CERTS.\n                        CERTS must match up with KEY.\n    --protover VERSION  Disable default TLS version list, and use\n                        VERSION instead.  May be used multiple times.\n    --suite SUITE       Disable default cipher suite list, and use\n                        SUITE instead.  May be used multiple times.\n    --proto PROTOCOL    Send ALPN extension containing PROTOCOL.\n                        May be used multiple times to offer several protocols.\n    --cache CACHE       Save session cache to file CACHE.\n    --no-tickets        Disable session ticket support.\n    --no-sni            Disable server name indication support.\n    --insecure          Disable certificate verification.\n    --verbose           Emit log output.\n    --max-frag-size M   Limit outgoing messages to M bytes.\n    --version, -v       Show tool version.\n    --help, -h          Show this screen.\n```\n\nSome sample runs:\n\n```\n$ cargo run --example tlsclient -- --http mozilla-modern.badssl.com\nHTTP/1.1 200 OK\nServer: nginx/1.6.2 (Ubuntu)\nDate: Wed, 01 Jun 2016 18:44:00 GMT\nContent-Type: text/html\nContent-Length: 644\n(...)\n```\n\nor\n\n```\n$ cargo run --example tlsclient -- --http expired.badssl.com\nTLS error: WebPkiError(CertExpired, ValidateServerCert)\nConnection closed\n```\n\n## Server example program\nThe server example program is named `tlsserver`.  The interface looks like:\n\n```tlsserver\nRuns a TLS server on :PORT.  The default PORT is 443.\n\n`echo' mode means the server echoes received data on each connection.\n\n`http' mode means the server blindly sends a HTTP response on each\nconnection.\n\n`forward' means the server forwards plaintext to a connection made to\nlocalhost:fport.\n\n`--certs' names the full certificate chain, `--key' provides the\nRSA private key.\n\nUsage:\n  tlsserver --certs CERTFILE --key KEYFILE [--suite SUITE ...] [--proto PROTO ...] [options] echo\n  tlsserver --certs CERTFILE --key KEYFILE [--suite SUITE ...] [--proto PROTO ...] [options] http\n  tlsserver --certs CERTFILE --key KEYFILE [--suite SUITE ...] [--proto PROTO ...] [options] forward <fport>\n  tlsserver (--version | -v)\n  tlsserver (--help | -h)\n\nOptions:\n    -p, --port PORT     Listen on PORT [default: 443].\n    --certs CERTFILE    Read server certificates from CERTFILE.\n                        This should contain PEM-format certificates\n                        in the right order (the first certificate should\n                        certify KEYFILE, the last should be a root CA).\n    --key KEYFILE       Read private key from KEYFILE.  This should be a RSA\n                        private key or PKCS8-encoded private key, in PEM format.\n    --ocsp OCSPFILE     Read DER-encoded OCSP response from OCSPFILE and staple\n                        to certificate.  Optional.\n    --auth CERTFILE     Enable client authentication, and accept certificates\n                        signed by those roots provided in CERTFILE.\n    --require-auth      Send a fatal alert if the client does not complete client\n                        authentication.\n    --resumption        Support session resumption.\n    --tickets           Support tickets.\n    --protover VERSION  Disable default TLS version list, and use\n                        VERSION instead.  May be used multiple times.\n    --suite SUITE       Disable default cipher suite list, and use\n                        SUITE instead.  May be used multiple times.\n    --proto PROTOCOL    Negotiate PROTOCOL using ALPN.\n                        May be used multiple times.\n    --verbose           Emit log output.\n    --version, -v       Show tool version.\n    --help, -h          Show this screen.\n```\n\nHere's a sample run; we start a TLS echo server, then connect to it with\nopenssl and tlsclient:\n\n```\n$ cargo run --example tlsserver -- --certs test-ca/rsa/end.fullchain --key test-ca/rsa/end.rsa -p 8443 echo &\n$ echo hello world | openssl s_client -ign_eof -quiet -connect localhost:8443\ndepth=2 CN = ponytown RSA CA\nverify error:num=19:self signed certificate in certificate chain\nhello world\n^C\n$ echo hello world | cargo run --example tlsclient -- --cafile test-ca/rsa/ca.cert -p 8443 localhost\nhello world\n^C\n```\n\n# License\n\nRustls is distributed under the following three licenses:\n\n- Apache License version 2.0.\n- MIT license.\n- ISC license.\n\nThese are included as LICENSE-APACHE, LICENSE-MIT and LICENSE-ISC\nrespectively.  You may use this software under the terms of any\nof these licenses, at your option.\n\n# Code of conduct\n\nThis project adopts the [Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct).\nPlease email rustls-mod@googlegroups.com to report any instance of misconduct, or if you\nhave any comments or questions on the Code of Conduct.\n"
 },
 {
  "repo": "sindresorhus/crypto-random-string",
  "language": "JavaScript",
  "readme_contents": "# crypto-random-string\n\n> Generate a [cryptographically strong](https://en.wikipedia.org/wiki/Strong_cryptography) random string\n\nCan be useful for creating an identifier, slug, salt, PIN code, fixture, etc.\n\nWorks in Node.js and browsers.\n\n## Install\n\n```sh\nnpm install crypto-random-string\n```\n\n## Usage\n\n```js\nimport cryptoRandomString from 'crypto-random-string';\n\ncryptoRandomString({length: 10});\n//=> '2cf05d94db'\n\ncryptoRandomString({length: 10, type: 'base64'});\n//=> 'YMiMbaQl6I'\n\ncryptoRandomString({length: 10, type: 'url-safe'});\n//=> 'YN-tqc8pOw'\n\ncryptoRandomString({length: 10, type: 'numeric'});\n//=> '8314659141'\n\ncryptoRandomString({length: 6, type: 'distinguishable'});\n//=> 'CDEHKM'\n\ncryptoRandomString({length: 10, type: 'ascii-printable'});\n//=> '`#Rt8$IK>B'\n\ncryptoRandomString({length: 10, type: 'alphanumeric'});\n//=> 'DMuKL8YtE7'\n\ncryptoRandomString({length: 10, characters: 'abc'});\n//=> 'abaaccabac'\n```\n\n## API\n\n### cryptoRandomString(options)\n\nReturns a randomized string. [Hex](https://en.wikipedia.org/wiki/Hexadecimal) by default.\n\n### cryptoRandomStringAsync(options)\n\nReturns a promise which resolves to a randomized string. [Hex](https://en.wikipedia.org/wiki/Hexadecimal) by default.\n\nFor most use-cases, there's really no good reason to use this async version. From the Node.js docs:\n\n> The `crypto.randomBytes()` method will not complete until there is sufficient entropy available. This should normally never take longer than a few milliseconds. The only time when generating the random bytes may conceivably block for a longer period of time is right after boot, when the whole system is still low on entropy.\n\nIn general, anything async comes with some overhead on it's own.\n\n```js\nimport {cryptoRandomStringAsync} from 'crypto-random-string';\n\nawait cryptoRandomStringAsync({length: 10});\n//=> '2cf05d94db'\n```\n\n#### options\n\nType: `object`\n\n##### length\n\n*Required*\\\nType: `number`\n\nLength of the returned string.\n\n##### type\n\nType: `string`\\\nDefault: `'hex'`\\\nValues: `'hex' | 'base64' | 'url-safe' | 'numeric' | 'distinguishable' | 'ascii-printable' | 'alphanumeric'`\n\nUse only characters from a predefined set of allowed characters.\n\nCannot be set at the same time as the `characters` option.\n\nThe `distinguishable` set contains only uppercase characters that are not easily confused: `CDEHKMPRTUWXY012458`. It can be useful if you need to print out a short string that you'd like users to read and type back in with minimal errors. For example, reading a code off of a screen that needs to be typed into a phone to connect two devices.\n\nThe `ascii-printable` set contains all [printable ASCII characters](https://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters): ``!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~`` Useful for generating passwords where all possible ASCII characters should be used.\n\nThe `alphanumeric` set contains uppercase letters, lowercase letters, and digits: `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`. Useful for generating [nonce](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/nonce) values.\n\n##### characters\n\nType: `string`\\\nMinimum length: `1`\\\nMaximum length: `65536`\n\nUse only characters from a custom set of allowed characters.\n\nCannot be set at the same time as the `type` option.\n\n## Related\n\n- [random-int](https://github.com/sindresorhus/random-int) - Generate a random integer\n- [random-float](https://github.com/sindresorhus/random-float) - Generate a random float\n- [random-item](https://github.com/sindresorhus/random-item) - Get a random item from an array\n- [random-boolean](https://github.com/arthurvr/random-boolean) - Get a random boolean\n- [random-obj-key](https://github.com/sindresorhus/random-obj-key) - Get a random key from an object\n- [random-obj-prop](https://github.com/sindresorhus/random-obj-prop) - Get a random property from an object\n- [unique-random](https://github.com/sindresorhus/unique-random) - Generate random numbers that are consecutively unique\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-crypto-random-string?utm_source=npm-crypto-random-string&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n"
 },
 {
  "repo": "RustCrypto/signatures",
  "language": "Rust",
  "readme_contents": "# RustCrypto: signatures [![Project Chat][chat-image]][chat-link] [![dependency status][deps-image]][deps-link]\n\nSupport for [digital signatures][1], which provide authentication of data using\npublic-key cryptography.\n\nAll algorithms reside in the separate crates and implemented using traits from\nthe [`signature`](https://docs.rs/signature/) crate.\n\nCrates are designed so they do not require the standard library (i.e. `no_std`)\nand can be easily used for bare-metal or lightweight WebAssembly programming.\n\n## Crates\n\n| Name        | Algorithm | Crates.io | Documentation | Build |\n|-------------|-----------|-----------|---------------|-------|\n| [`dsa`]     | [DSA](https://en.wikipedia.org/wiki/Digital_Signature_Algorithm) | [![crates.io](https://img.shields.io/crates/v/dsa.svg)](https://crates.io/crates/dsa) | [![Documentation](https://docs.rs/dsa/badge.svg)](https://docs.rs/dsa) | [![dsa build](https://github.com/RustCrypto/signatures/workflows/dsa/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/signatures/actions?query=workflow%3Adsa)\n| [`ecdsa`]   | [ECDSA](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) | [![crates.io](https://img.shields.io/crates/v/ecdsa.svg)](https://crates.io/crates/ecdsa) | [![Documentation](https://docs.rs/ecdsa/badge.svg)](https://docs.rs/ecdsa) | [![ecdsa build](https://github.com/RustCrypto/signatures/workflows/ecdsa/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/signatures/actions?query=workflow%3Aecdsa) |\n| [`ed25519`] | [Ed25519](https://en.wikipedia.org/wiki/EdDSA) | [![crates.io](https://img.shields.io/crates/v/ed25519.svg)](https://crates.io/crates/ed25519) | [![Documentation](https://docs.rs/ed25519/badge.svg)](https://docs.rs/ed25519) | [![ed25519 build](https://github.com/RustCrypto/signatures/workflows/ed25519/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/signatures/actions?query=workflow%3Aed25519)\n| [`rfc6979`] | [RFC6979](https://datatracker.ietf.org/doc/html/rfc6979) | [![crates.io](https://img.shields.io/crates/v/rfc6979.svg)](https://crates.io/crates/rfc6979) | [![Documentation](https://docs.rs/rfc6979/badge.svg)](https://docs.rs/rfc6979) | [![rfc6979 build](https://github.com/RustCrypto/signatures/actions/workflows/rfc6979.yml/badge.svg)](https://github.com/RustCrypto/signatures/actions/workflows/rfc6979.yml)\n\n## Usage\n\nCrates functionality is expressed in terms of traits defined in the [`signature`][2]\ncrate.\n\n## License\n\nAll crates licensed under either of\n\n * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n * [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260048-signatures\n[deps-image]: https://deps.rs/repo/github/RustCrypto/signatures/status.svg\n[deps-link]: https://deps.rs/repo/github/RustCrypto/signatures\n\n[//]: # (crates)\n\n[`dsa`]: ./dsa\n[`ecdsa`]: ./ecdsa\n[`ed25519`]: ./ed25519\n[`rfc6979`]: ./rfc6979\n\n[//]: # (general links)\n\n[1]: https://en.wikipedia.org/wiki/Digital_signature\n[2]: https://docs.rs/signature\n"
 },
 {
  "repo": "mgraczyk/coursera-crypto1",
  "language": "Python",
  "readme_contents": "crypto1\n=======\n\nCoursera Stanford Cryptography 1\n\n\nThese are my problem set and programming assignment solutions for the Spring 2014 term.\n\n\n##NOTICE\nThese solutions are for reference only and should not be viewed by students currently enrolled in the course.  Students who view solutions to homework and programming assignments that they have not yet completed deprive themselves of learning and understanding.\n\n**If you read these solutions before completing the course, you will diminish the course's value for yourself and others.**\n"
 },
 {
  "repo": "chrisveness/crypto",
  "language": "JavaScript",
  "readme_contents": "crypto\n======\n\nReference implementations of AES & SHA cryptographic functions in JavaScript.\n\nThese annotated implementations follow the standards very closely, in order to assist in studying\nthe standards and underlying algorithms. Note for production use I would recommend the\n[Web Cryptography API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) for the browser\n(*see examples of\n[SHA hashing](https://gist.github.com/chrisveness/e5a07769d06ed02a2587df16742d3fdd),\n[PBKDF2 key derivation](https://gist.github.com/chrisveness/770ee96945ec12ac84f134bf538d89fb), and\n[AES-GCM encryption](https://gist.github.com/chrisveness/43bcda93af9f646d083fad678071b90a)*),\nor the [crypto](https://nodejs.org/api/crypto.html) library in Node.js.\n\naes.js\n------\n\nThis is a reference implementation of the AES (Rijndael cipher) algorithm described in the \n[FIPS-197](csrc.nist.gov/publications/fips/fips197/fips-197.pdf) standard.\n\nThis comprises:\n\n- `cipher`: takes a 128-bit input block and applies the cipher algorithm to produce a 128-bit output block\n- `keyExpansion`: applies a key expansion to a 128-/192-/256-bit cipher key to produce a 2D byte-array\n  key schedule for the cipher routine\n\nMore details are available at www.movable-type.co.uk/scripts/aes.html; tests at \nwww.movable-type.co.uk/scripts/test/aes-test.html.\n\naes-ctr.js\n----------\n\nThis is a counter-mode (CTR) wrapper for the AES function, following the method described in [NIST\nSP 800-38A](https://csrc.nist.gov/publications/detail/sp/800-38a/final).\n\nThis comprises:\n\n- `encrypt`: encrypt a plaintext using a supplied password\n- `decrypt`: decrypt an encrypted ciphertext using a supplied password\n\nThese functions take and return (Unicode) strings. Internally they convert them (via UTF-8) to byte \narrays for encryption as set out in NIST SP 800-38A.\n\nNote that there are no standards for data storage formats of AES encryption mode wrapper functions,\nso this is unlikely to inter-operate with standard library functions.\n\nMore details are available at www.movable-type.co.uk/scripts/aes.html; tests at \nwww.movable-type.co.uk/scripts/test/aes-test.html.\n\nsha1.js\n-------\n\nThis is a reference implementation of the SHA-1 algorithm described in the FIPS-180-4 standard.\n\nThis comprises:\n\n- `hash`: takes a (Unicode) string and generates a hash (of the UTF-8 encoded string)\n\nMore details are available at www.movable-type.co.uk/scripts/sha1.html; tests at \nwww.movable-type.co.uk/scripts/test/sha-test.html.\n\nsha256.js\n---------\n\nThis is a reference implementation of the SHA-256 algorithm described in the FIPS-180-4 standard.\n\nThis comprises:\n\n- `hash`: takes a (Unicode) string and generates a hash (of the UTF-8 encoded string)\n\nNote that while SHA-256 and SHA-512 are both members of the SHA-2 family, there is little common\ncode, so they are in separate files here.\n\nMore details are available at www.movable-type.co.uk/scripts/sha256.html; tests at \nwww.movable-type.co.uk/scripts/test/sha-test.html.\n\nsha512.js\n---------\n\nThis is a reference implementation of the SHA-512 algorithm described in the FIPS-180-4 standard.\n\nThis comprises:\n\n- `hash`: takes a (Unicode) string and generates a hash (of the UTF-8 encoded string)\n\nNote that while SHA-256 and SHA-512 are both members of the SHA-2 family, there is little common\ncode, so they are in separate files here.\n\nMore details are available at www.movable-type.co.uk/scripts/sha512.html; tests at \nwww.movable-type.co.uk/scripts/test/sha-test.html.\n\nsha3.js\n-------\n\nThis is a reference implementation of the SHA-3 (Keccak) algorithm described in the FIPS-202 standard.\n\nThis comprises:\n\n- `hash224`: takes a (Unicode) string and generates a SHA3/224 hash (of the UTF-8 encoded string)\n- `hash256`: takes a (Unicode) string and generates a SHA3/256 hash (of the UTF-8 encoded string)\n- `hash384`: takes a (Unicode) string and generates a SHA3/384 hash (of the UTF-8 encoded string)\n- `hash512`: takes a (Unicode) string and generates a SHA3/512 hash (of the UTF-8 encoded string)\n\nMore details are available at www.movable-type.co.uk/scripts/sha3.html; tests at\nwww.movable-type.co.uk/scripts/test/sha-test.html.\n\n\ntea-block.js\n------------\n\nWheeler & Needham\u2019s *Tiny Encryption Algorithm* is a simple but powerful encryption algorithm which\nprovides strong encryption in just a few lines of concise, clear code. This implements the (corrected)\n\u2018Block TEA\u2019 variant (xxtea).\n\nThe library includes:\n\n- `encrypt` a text with a password\n- `decrypt` an encrypted text\n- `encode` an array of longs using a 128-bit key\n- `decode` an encoded array of longs\n\nMore details are available at www.movable-type.co.uk/scripts/tea-block.html; tests at \nwww.movable-type.co.uk/scripts/test/tea-test.html.\n\nDocumentation\n-------------\n\nDocumentation for all these methods is available at www.movable-type.co.uk/scripts/js/crypto/docs.\n\nJavaScript\n----------\n\nCryptographically-speaking, browsers are\n[inherently](//www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful)\n[insecure](//tonyarcieri.com/whats-wrong-with-webcrypto) (Node.js does not suffer the same problems),\nbut these implementations are intended for study rather than production use. With its untyped C-style\nsyntax, JavaScript reads remarkably close to pseudo-code: exposing the algorithms with a minimum of\nsyntactic distractions.\n\nThese implementations are written in ES2015 version of JavaScript; ES2015 `class`es are both clearer\nand more familiar to users of other languages than the ES5 equivalents, and `let` and `const` are\ngood practice and communicate intent better than `var`. Other idiomatic JavaScript which might be\nless familiar to users of other languages has generally been avoided.\n"
 },
 {
  "repo": "bdrister/AquaticPrime",
  "language": "REALbasic",
  "readme_contents": "What is it?\nThe AquaticPrime framework is a secure registration method for your shareware applications, released as free open-source software. \n\nHow is this possible?\nAquaticPrime uses RSA encryption to provide fairly good security - the same that is used to protect government documents. It is computationally infeasible for an attacker to generate fake serial numbers, despite the entire framework being open-source. \n\nWhere did it come from?\nAquaticPrime was written primarily by Lucas Newman, circa 2005, and has enjoyed acceptance among the indie Mac developer community. Many developers have made their own tweaks and extensions to it since then, but for the most part they've stayed with the authors. I've (Benjamin Rister) created this new repository and volunteered to act as maintainer in an effort to reintegrate these changes so that everybody can benefit from them.\n\nHow do I use this?\nCheck out the wiki at http://wiki.github.com/bdrister/AquaticPrime."
 },
 {
  "repo": "latchset/jwcrypto",
  "language": "Python",
  "readme_contents": "[![PyPI](https://img.shields.io/pypi/v/jwcrypto.svg)](https://pypi.org/project/jwcrypto/)\n[![Changelog](https://img.shields.io/github/v/release/latchset/jwcrypto?label=changelog)](https://github.com/latchset/jwcrypto/releases)\n[![Build Status](https://github.com/latchset/jwcrypto/actions/workflows/build.yml/badge.svg)](https://github.com/latchset/jwcrypto/actions/workflows/build.yml)\n[![ppc64le Build](https://github.com/latchset/jwcrypto/actions/workflows/ppc64le.yml/badge.svg)](https://github.com/latchset/jwcrypto/actions/workflows/ppc64le.yml)\n[![Code Scan](https://github.com/latchset/jwcrypto/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/latchset/jwcrypto/actions/workflows/codeql-analysis.yml)\n[![Documentation Status](https://readthedocs.org/projects/jwcrypto/badge/?version=latest)](https://jwcrypto.readthedocs.io/en/latest/?badge=latest)\n\nJWCrypto\n========\n\nAn implementation of the JOSE Working Group documents:\n- RFC 7515 - JSON Web Signature (JWS)\n- RFC 7516 - JSON Web Encryption (JWE)\n- RFC 7517 - JSON Web Key (JWK)\n- RFC 7518 - JSON Web Algorithms (JWA)\n- RFC 7519 - JSON Web Token (JWT)\n- RFC 7520 - Examples of Protecting Content Using JSON Object Signing and\n  Encryption (JOSE)\n\nInstallation\n============\n\n    pip install jwcrypto\n\nDocumentation\n=============\n\nhttp://jwcrypto.readthedocs.org\n\nDeprecation Notices\n===================\n\n2020.12.11: The RSA1_5 algorithm is now considered deprecated due to numerous\nimplementation issues that make it a very problematic tool to use safely.\nThe algorithm can still be used but requires explicitly allowing it on object\ninstantiation. If your application depends on it there are examples of how to\nre-enable RSA1_5 usage in the tests files.\n\nNote: if you enable support for `RSA1_5` and the attacker can send you chosen\nciphertext and is able to measure the processing times of your application,\nthen your application will be vulnerable to a Bleichenbacher RSA padding\noracle, allowing the so-called \"Million messages attack\". That attack allows\nto decrypt intercepted messages (even if they were encrypted with RSA-OAEP) or\nforge signatures (both RSA-PKCS#1 v1.5 and RSASSA-PSS).\n\nGiven JWT is generally used in tokens to sign authorization assertions or to\nencrypt private key material, this is a particularly severe issue, and must\nnot be underestimated.\n"
 },
 {
  "repo": "entronad/crypto-es",
  "language": "JavaScript",
  "readme_contents": "# CryptoES\n\n*A cryptography algorithms library compatible with ES6 and TypeScript*\n\n- Inspired by and has the same API with [CryptoJS](https://code.google.com/archive/p/crypto-js/) \n- With types for TypeScript usage\n- Witten in latest ECMAScript Standard\n- Support ES6 module import and partially import\n\n## Usage\n\nInstallation:\n\n```\nyarn add crypto-es\n```\n\n---\n\nIn Node.js projects, we recommend you to use ECMAScript Modules insead of CommonJS:\n\n```\n// package.json\n{\n  \"type\": \"module\"\n}\n```\n\n```\n# In same folder as above package.json\nnode --experimental-modules my-app.js # Runs as ES module\n```\n\n[See details](<https://nodejs.org/dist/latest-v12.x/docs/api/esm.html>)\n\n---\n\nThen you can import CryptoES:\n\n```\nimport CryptoES from 'crypto-es';\nconst rst = CryptoES.MD5(\"Message\").toString();\n```\n\nOr partially import the function to reduce the package weight:\n\n```\nimport { MD5 } from 'crypto-es/lib/md5.js';\nconst rst = MD5(\"Message\").toString();\n```\n\n## TypeScript Usage\n\nMake sure to add this entry to your tsconfig.json:\n\n```\n{\n  \"compilerOptions\": {\n    ...\n    \n    \"skipLibCheck\": true,\n    \n    ...\n  }\n}\n```\n\n## Guide\n\n> Just the same as [CryptoJS](https://code.google.com/archive/p/crypto-js/)\n\n---\n\n- [Hashers](###Hashers)\n- [HMAC](#HMAC)\n- [Ciphers](#Ciphers)\n- [Encoders](#Encoders)\n- [ArrayBuffer and TypedArray](#ArrayBuffer-and-TypedArray)\n\n---\n\n### Hashers\n\n#### The Hasher Algorithms\n\n**MD5**\n\nMD5 is a widely used hash function. It's been used in a variety of security applications and is also commonly used to check the integrity of files. Though, MD5 is not collision resistant, and it isn't suitable for applications like SSL certificates or digital signatures that rely on this property.\n\n```\nconst hash = CryptoES.MD5(\"Message\");\n```\n\n**SHA-1**\n\nThe SHA hash functions were designed by the National Security Agency (NSA). SHA-1 is the most established of the existing SHA hash functions, and it's used in a variety of security applications and protocols. Though, SHA-1's collision resistance has been weakening as new attacks are discovered or improved.\n\n```\nconst hash = CryptoES.SHA1(\"Message\");\n```\n\n**SHA-2**\n\nSHA-256 is one of the four variants in the SHA-2 set. It isn't as widely used as SHA-1, though it appears to provide much better security.\n\n```\nconst hash = CryptoES.SHA256(\"Message\");\n```\n\nSHA-512 is largely identical to SHA-256 but operates on 64-bit words rather than 32.\n\n```\nconst hash = CryptoES.SHA512(\"Message\");\n```\n\nCryptoES also supports SHA-224 and SHA-384, which are largely identical but truncated versions of SHA-256 and SHA-512 respectively.\n\n**SHA-3**\n\nSHA-3 is the winner of a five-year competition to select a new cryptographic hash algorithm where 64 competing designs were evaluated.\n\n**NOTE:** I made a mistake when I named this implementation SHA-3. It should be named Keccak[c=2d]. Each of the SHA-3 functions is based on an instance of the Keccak algorithm, which NIST selected as the winner of the SHA-3 competition, but those SHA-3 functions won't produce hashes identical to Keccak.\n\n```\nconst hash = CryptoES.SHA3(\"Message\");\n```\n\nSHA-3 can be configured to output hash lengths of one of 224, 256, 384, or 512 bits. The default is 512 bits.\n\n```\nconst hash = CryptoES.SHA3(\"Message\", { outputLength: 512 });\nconst hash = CryptoES.SHA3(\"Message\", { outputLength: 384 });\nconst hash = CryptoES.SHA3(\"Message\", { outputLength: 256 });\nconst hash = CryptoES.SHA3(\"Message\", { outputLength: 224 });\n```\n\n**RIPEMD-160**\n\n```\nconst hash = CryptoES.RIPEMD160(\"Message\");\n```\n\n#### The Hasher Input\n\nThe hash algorithms accept either strings or instances of CryptoES.lib.WordArray. A WordArray object represents an array of 32-bit words. When you pass a string, it's automatically converted to a WordArray encoded as UTF-8.\n\n#### The Hasher Output\n\nThe hash you get back isn't a string yet. It's a WordArray object. When you use a WordArray object in a string context, it's automatically converted to a hex string.\n\n```\nconst hash = CryptoES.SHA256(\"Message\");\nalert(typeof hash); // object\nalert(hash); // 2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91\n```\n\nYou can convert a WordArray object to other formats by explicitly calling the toString method and passing an encoder.\n\n```\nconst hash = CryptoES.SHA256(\"Message\");\nalert(hash.toString(CryptoES.enc.Base64)); // L3dmip37+NWEi57rSnFFypTG7ZI25Kdz9tyvpRMrL5E= alert(hash.toString(CryptoES.enc.Latin1)); // /wf\ufffd\ufffd\u00fb\u00f8\u00d5\ufffd\ufffd\ufffd\u00ebJqE\u00ca\ufffd\u00c6\u00ed\ufffd6\u00e4\u00a7s\u00f6\u00dc\u00af\u00a5\u0013+/\ufffd\nalert(hash.toString(CryptoES.enc.Hex)); // 2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91\n```\n\n#### Progressive Hashing\n\n```\nconst sha256 = CryptoES.algo.SHA256.create();\nsha256.update(\"Message Part 1\");\nsha256.update(\"Message Part 2\");\nsha256.update(\"Message Part 3\");\nconst hash = sha256.finalize();\n```\n\n### HMAC\n\nKeyed-hash message authentication codes (HMAC) is a mechanism for message authentication using cryptographic hash functions.\n\nHMAC can be used in combination with any iterated cryptographic hash function.\n\n```\nconst hash = CryptoES.HmacMD5(\"Message\", \"Secret Passphrase\");\nconst hash = CryptoES.HmacSHA1(\"Message\", \"Secret Passphrase\");\nconst hash = CryptoES.HmacSHA256(\"Message\", \"Secret Passphrase\");\nconst hash = CryptoES.HmacSHA512(\"Message\", \"Secret Passphrase\");\n```\n\n#### Progressive HMAC Hashing\n\n```\nconst hmac = CryptoES.algo.HMAC.create(CryptoES.algo.SHA256, \"Secret Passphrase\");\nhmac.update(\"Message Part 1\");\nhmac.update(\"Message Part 2\");\nhmac.update(\"Message Part 3\");\nconst hash = hmac.finalize();\n```\n\n### PBKDF2\n\nPBKDF2 is a password-based key derivation function. In many applications of cryptography, user security is ultimately dependent on a password, and because a password usually can't be used directly as a cryptographic key, some processing is required.\n\nA salt provides a large set of keys for any given password, and an iteration count increases the cost of producing keys from a password, thereby also increasing the difficulty of attack.\n\n```\nconst salt = CryptoES.lib.WordArray.random(128/8);\nconst key128Bits = CryptoES.PBKDF2(\"Secret Passphrase\", salt, { keySize: 128/32 });\nconst key256Bits = CryptoES.PBKDF2(\"Secret Passphrase\", salt, { keySize: 256/32 });\nconst key512Bits = CryptoES.PBKDF2(\"Secret Passphrase\", salt, { keySize: 512/32 });\nconst key512Bits1000Iterations = CryptoES.PBKDF2(\"Secret Passphrase\", salt, { keySize: 512/32, iterations: 1000 });\n```\n\n### Ciphers\n\n#### The Cipher Algorithms\n\n**AES**\n\nThe Advanced Encryption Standard (AES) is a U.S. Federal Information Processing Standard (FIPS). It was selected after a 5-year process where 15 competing designs were evaluated.\n\n```\nconst encrypted = CryptoES.AES.encrypt(\"Message\", \"Secret Passphrase\");\nconst decrypted = CryptoES.AES.decrypt(encrypted, \"Secret Passphrase\");\n```\n\nCryptoES supports AES-128, AES-192, and AES-256. It will pick the variant by the size of the key you pass in. If you use a passphrase, then it will generate a 256-bit key.\n\n**DES, Triple DES**\n\nDES is a previously dominant algorithm for encryption, and was published as an official Federal Information Processing Standard (FIPS). DES is now considered to be insecure due to the small key size.\n\n```\nconst encrypted = CryptoES.DES.encrypt(\"Message\", \"Secret Passphrase\");\nconst decrypted = CryptoES.DES.decrypt(encrypted, \"Secret Passphrase\");\n```\n\nTriple DES applies DES three times to each block to increase the key size. The algorithm is believed to be secure in this form.\n\n```\nconst encrypted = CryptoES.TripleDES.encrypt(\"Message\", \"Secret Passphrase\");\nconst decrypted = CryptoES.TripleDES.decrypt(encrypted, \"Secret Passphrase\");\n```\n\n**Rabbit**\n\nRabbit is a high-performance stream cipher and a finalist in the eSTREAM Portfolio. It is one of the four designs selected after a 3 1/2-year process where 22 designs were evaluated.\n\n```\nconst encrypted = CryptoES.Rabbit.encrypt(\"Message\", \"Secret Passphrase\");\nconst decrypted = CryptoES.Rabbit.decrypt(encrypted, \"Secret Passphrase\");\n```\n\n**RC4, RC4Drop**\n\nRC4 is a widely-used stream cipher. It's used in popular protocols such as SSL and WEP. Although remarkable for its simplicity and speed, the algorithm's history doesn't inspire confidence in its security.\n\n```\nconst encrypted = CryptoES.RC4.encrypt(\"Message\", \"Secret Passphrase\");\nconst decrypted = CryptoES.RC4.decrypt(encrypted, \"Secret Passphrase\");\n```\n\nIt was discovered that the first few bytes of keystream are strongly non-random and leak information about the key. We can defend against this attack by discarding the initial portion of the keystream. This modified algorithm is traditionally called RC4-drop.\n\nBy default, 192 words (768 bytes) are dropped, but you can configure the algorithm to drop any number of words.\n\n```\nconst encrypted = CryptoES.RC4Drop.encrypt(\"Message\", \"Secret Passphrase\");\nconst encrypted = CryptoES.RC4Drop.encrypt(\"Message\", \"Secret Passphrase\", { drop: 3072/4 });\nconst decrypted = CryptoES.RC4Drop.decrypt(encrypted, \"Secret Passphrase\", { drop: 3072/4 });\n```\n\n#### Custom Key and IV\n\n```\nconst key = CryptoES.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\nconst iv = CryptoES.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');\nconst encrypted = CryptoES.AES.encrypt(\"Message\", key, { iv: iv });\n```\n\n#### Block Modes and Padding\n\n```\nconst encrypted = CryptoES.AES.encrypt(\"Message\", \"Secret Passphrase\", { mode: CryptoES.mode.CFB, padding: CryptoES.pad.AnsiX923 });\n```\n\nCryptoES supports the following modes:\n\n- CBC (the default)\n- CFB\n- CTR\n- OFB\n- ECB\n\nAnd CryptoES supports the following padding schemes:\n\n- Pkcs7 (the default)\n- Iso97971\n- AnsiX923\n- Iso10126\n- ZeroPadding\n- NoPadding\n\n#### The Cipher Input\n\nFor the plaintext message, the cipher algorithms accept either strings or instances of CryptoES.lib.WordArray.\n\nFor the key, when you pass a string, it's treated as a passphrase and used to derive an actual key and IV. Or you can pass a WordArray that represents the actual key. If you pass the actual key, you must also pass the actual IV.\n\nFor the ciphertext, the cipher algorithms accept either strings or instances of CryptoES.lib.CipherParams. A CipherParams object represents a collection of parameters such as the IV, a salt, and the raw ciphertext itself. When you pass a string, it's automatically converted to a CipherParams object according to a configurable format strategy.\n\n#### The Cipher Output\n\nThe plaintext you get back after decryption is a WordArray object. See Hashers' Output for more detail.\n\nThe ciphertext you get back after encryption isn't a string yet. It's a CipherParams object. A CipherParams object gives you access to all the parameters used during encryption. When you use a CipherParams object in a string context, it's automatically converted to a string according to a format strategy. The default is an OpenSSL-compatible format.\n\n```\nconst encrypted = CryptoES.AES.encrypt(\"Message\", \"Secret Passphrase\"); alert(encrypted.key); // 74eb593087a982e2a6f5dded54ecd96d1fd0f3d44a58728cdcd40c55227522223\nalert(encrypted.iv); // 7781157e2629b094f0e3dd48c4d786115\nalert(encrypted.salt); // 7a25f9132ec6a8b34\nalert(encrypted.ciphertext); // 73e54154a15d1beeb509d9e12f1e462a0\nalert(encrypted); // U2FsdGVkX1+iX5Ey7GqLND5UFUoV0b7rUJ2eEvHkYqA=\n```\n\nYou can define your own formats in order to be compatible with other crypto implementations. A format is an object with two methods\u2014stringify and parse\u2014that converts between CipherParams objects and ciphertext strings.\n\nHere's how you might write a JSON formatter:\n\n```\nconst JsonFormatter = { \n  stringify: function (cipherParams) { // create json object with ciphertext\n    const jsonObj = { ct: cipherParams.ciphertext.toString(CryptoES.enc.Base64) }; // optionally add iv and salt\n    if (cipherParams.iv) {\n      jsonObj.iv = cipherParams.iv.toString();\n    }\n    if (cipherParams.salt) {\n      jsonObj.s = cipherParams.salt.toString();\n    }\n    // stringify json object\n    return JSON.stringify(jsonObj);\n  },\n  parse: function (jsonStr) { // parse json string\n    const jsonObj = JSON.parse(jsonStr); // extract ciphertext from json object, and create cipher params object\n    const cipherParams = CryptoES.lib.CipherParams.create(\n      { ciphertext: CryptoES.enc.Base64.parse(jsonObj.ct) },\n    ); // optionally extract iv and salt\n    if (jsonObj.iv) {\n      cipherParams.iv = CryptoES.enc.Hex.parse(jsonObj.iv)\n    }\n    if (jsonObj.s) {\n      cipherParams.salt = CryptoES.enc.Hex.parse(jsonObj.s)\n    }\n    return cipherParams;\n  },\n};\nconst encrypted = CryptoES.AES.encrypt(\n  \"Message\",\n  \"Secret Passphrase\",\n  { format: JsonFormatter },\n);\nalert(encrypted); // {\"ct\":\"tZ4MsEnfbcDOwqau68aOrQ==\",\"iv\":\"8a8c8fd8fe33743d3638737ea4a00698\",\"s\":\"ba06373c8f57179c\"}\nconst decrypted = CryptoES.AES.decrypt(\n  encrypted,\n  \"Secret Passphrase\",\n  { format: JsonFormatter },\n);\nalert(decrypted.toString(CryptoES.enc.Utf8)); // Message\n```\n\n#### Progressive Ciphering\n\n```\nconst key = CryptoES.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\nconst iv = CryptoES.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');\nconst aesEncryptor = CryptoES.algo.AES.createEncryptor(key, { iv: iv });\nconst ciphertextPart1 = aesEncryptor.process(\"Message Part 1\");\nconst ciphertextPart2 = aesEncryptor.process(\"Message Part 2\");\nconst ciphertextPart3 = aesEncryptor.process(\"Message Part 3\");\nconst ciphertextPart4 = aesEncryptor.finalize();\nconst aesDecryptor = CryptoES.algo.AES.createDecryptor(key, { iv: iv });\nconst plaintextPart1 = aesDecryptor.process(ciphertextPart1);\nconst plaintextPart2 = aesDecryptor.process(ciphertextPart2);\nconst plaintextPart3 = aesDecryptor.process(ciphertextPart3);\nconst plaintextPart4 = aesDecryptor.process(ciphertextPart4);\nconst plaintextPart5 = aesDecryptor.finalize();\n```\n\n#### Interoperability\n\nWith OpenSSL\n\nEncrypt with OpenSSL:\n\n```\nopenssl enc -aes-256-cbc -in infile -out outfile -pass pass:\"Secret Passphrase\" -e -base64\n```\n\nDecrypt with CryptoES:\n\n```\nconst decrypted = CryptoES.AES.decrypt(openSSLEncrypted, \"Secret Passphrase\");\n```\n\n### Encoders\n\nCryptoES can convert from encoding formats such as Base64, Latin1 or Hex to WordArray objects and vica versa.\n\n```\nconst words = CryptoES.enc.Base64.parse('SGVsbG8sIFdvcmxkIQ==');\nconst base64 = CryptoES.enc.Base64.stringify(words);\nconst words = CryptoES.enc.Latin1.parse('Hello, World!');\nconst latin1 = CryptoES.enc.Latin1.stringify(words);\nconst words = CryptoES.enc.Hex.parse('48656c6c6f2c20576f726c6421');\nconst hex = CryptoES.enc.Hex.stringify(words);\nconst words = CryptoES.enc.Utf8.parse('\ud852\udf62');\nconst utf8 = CryptoES.enc.Utf8.stringify(words);\nconst words = CryptoES.enc.Utf16.parse('Hello, World!');\nconst utf16 = CryptoES.enc.Utf16.stringify(words);\nconst words = CryptoES.enc.Utf16LE.parse('Hello, World!');\nconst utf16 = CryptoES.enc.Utf16LE.stringify(words);\n```\n\n### ArrayBuffer and TypedArray\n\nWordArray creator could recive an ArrayBuffer or TypedArray so that CryptoES algorisms could apply to them:\n\n```\nconst words = CryptoES.lib.WordArray.create(new ArrayBuffer(8));\nconst rst = CryptoES.AES.encrypt(words, 'Secret Passphrase')\n```\n\n**NOTE**: ArrayBuffer could not directly passed to algorisms, you should change them to WordArray first.\n\nWith this, encrypting files would be easier:\n\n```\nconst fileInput = document.getElementById('fileInput');\nconst file = fileInput.files[0];\nconst reader = new FileReader();\nreader.readAsArrayBuffer(file);\nreader.onload = function () {\n  const arrayBuffer = reader.result;\n  const words = CryptoES.lib.WordArray.create(arrayBuffer);\n  const rst = CryptoES.AES.encrypt(words, 'Secret Passphrase')\n  ...\n};\n```\n\n## Change Log\n\n[Change Log](https://github.com/entronad/crypto-es/blob/master/CHANGELOG.md)\n\n## Blogs\n\n[Refactoring CryptoJS in Modern ECMAScript](https://medium.com/front-end-weekly/refactoring-cryptojs-in-modern-ecmascript-1d4e1837c272) "
 },
 {
  "repo": "NeverWalkAloner/Cryptography-standards",
  "language": "Python",
  "readme_contents": "[![Build Status](https://travis-ci.org/NeverWalkAloner/Cryptography-standards.svg?branch=master)](https://travis-ci.org/NeverWalkAloner/Cryptography-standards)\n[![Coverage Status](https://coveralls.io/repos/github/NeverWalkAloner/Cryptography-standards/badge.svg?branch=master)](https://coveralls.io/github/NeverWalkAloner/Cryptography-standards?branch=master)\n\nRequired python3.3+\n\n"
 },
 {
  "repo": "riscv/riscv-crypto",
  "language": "C",
  "readme_contents": "\n# RISC-V Cryptography Extension\n\n*RISC-V cryptography extensions standardisation work.*\n\n---\n\n- [About](#About)\n- [Specification](#Specification)\n- [Formal Model](#Formal-Model)\n- [Toolchain](#Toolchain)\n- [Spike](#Spike)\n- [Architectural Tests](#Architectural-Tests)\n- [Benchmarks](#Benchmarks)\n- [Verilog RTL](#Verilog-RTL-Prototypes)\n\n## About\n\nThis repository is used to develop standardisation proposals for\nscalar cryptographic instruction set extensions for the RISC-V\narchitecture.\n\nFor a general overview of the extension status and ratification progress,\nplease see \n[our page on the RISC-V Wiki](https://wiki.riscv.org/x/MVcF).\n\n- **Note:** See the\n   [dev/next-release](https://github.com/riscv/riscv-crypto/tree/dev/next-release)\n   branch for the most up to date version.\n\n- **Note:** These instructions are a work in progress. Their specifications\n  will to change before being accepted as part of the RISC-V standard.  While\n  there are *experimental* encodings assigned to the proposed instructions,\n  they *should not* be depended upon.  They only exist to enable a toolchain\n  and simulator flow.  They *will* change.\n\n- The Scalar Cryptography extension proposals overlap significantly\n  with the [Bitmanip extension](https://github.com/riscv/riscv-bitmanip).\n  Hence, we are experimenting with *sharing* opcodes between extensions.\n  \n- See the [project board](https://github.com/riscv/riscv-crypto/projects/1)\n  for a list of on-going  / open issues.\n  [\"How Can I Help?\"](https://github.com/riscv/riscv-crypto/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n\n- Some of the proposals in this repository are based on work done as part of\n  the [XCrypto](https://github.com/scarv/xcrypto) project by the University\n  of Bristol Cryptography Group on scalar cryptography extensions\n  to RISC-V.\n\n## Specification\n\nTo see the latest draft release of the proposals, look at the\n[Releases](https://github.com/riscv/riscv-crypto/releases) tab of\nthe [Github Repository](https://github.com/riscv/riscv-crypto).\n\nSource code and supplementary information is found in the\n[doc/](doc/README.md) directory.\n\n## Formal Model\n\nThere is a work-in-progress formal-model implementation of the crypto\ninstructions in the `sail/` directory.\nSee the [README](sail/README.md) file for information on how to build\nand use it.\n\n## Toolchain\n\nSee [tools/README.md](tools/README.md) for instructions on how to\nbuild the experimental toolchain.\n\nThere is also a [task list](tools/gcc-patch-tasks.adoc) for\nimplementing an upstreamable patch.\nIf you can implement this patch, please get in touch.\n\n## Spike\n\nSpike is included as a submodule (`extern/riscv-isa-sim`), since\nwe have upstream Spike support which is periodically updated as the\nspecification progresses.\nSee [tools/README.md](tools/README.md) for instructions on how to\nbuild Spike.\n\n## Architectural Tests \n\nSee [tests/compliance/README.md](tests/compliance/README.md) for\ninformation on how to run the work-in-progress\n[RISC-V Architectural Test suite](https://github.com/riscv/riscv-arch-test)\nfor the cryptography extension.\nYou will need to setup the toolchain, spike and SAIL before you can do\nthis.\n\nThere is also a work-in-progress \n[test plan](tests/compliance/test-plan-scalar.adoc)\nfor the Scalar cryptography extensions.\n\n**Note:** This was formally known as the _riscv-compliance_ test suite.\nHence there are some references or directories to \"compliance\".\nThese have been left in some cases to preserve widely shared links,\nespecially to the test plan.\n\n## Benchmarks\n\nSee [`benchmarks/README.md`](benchmarks/README.md) for how to\nget started with the benchmarking flow and how to contribute new\nbenchmarks.\n\n## Verilog RTL Prototypes\n\nSee the [`rtl/`](rtl/) directory for information on experimental\nRTL implementations of the proposed instructions.\n\n"
 },
 {
  "repo": "cheatfate/nimcrypto",
  "language": "Nim",
  "readme_contents": "# nimcrypto\n[![Github action](https://github.com/cheatfate/nimcrypto/workflows/nimcrypto/badge.svg)](https://github.com/cheatfate/nimcrypto/actions/workflows/ci.yml)\n\n# Nim cryptographic library\n\nNimcrypto is Nim's cryptographic library. It implements several popular cryptographic algorithms and their tests with some [examples](https://github.com/cheatfate/nimcrypto/tree/master/examples).\n  \nMost notably, this library has been used in the [Nimbus Ethereum client](https://our.status.im/nimbus-for-newbies/). To see the implementation, check out its [Github repository](https://github.com/status-im/nimbus).\n\n\n## The most basic usage\n\n```bash\nnimble install nimcrypto # installation\n```\n\n```nim\n# example.nim\nimport nimcrypto\n\necho keccak_256.digest(\"Alice makes a hash\") \n# outputs F8AE86DA35CF3D9F0816BAA6015A6AFFD20BA5D6A533FEA94D89D6164264326F\n```\n\nSee full documentation [here](https://cheatfate.github.io/nimcrypto)."
 },
 {
  "repo": "google/end-to-end",
  "language": "JavaScript",
  "readme_contents": "End-To-End\n==========\n\n![Travis Build](https://travis-ci.org/google/end-to-end.svg \"End to End Travis Build\")\n\nEnd-To-End is a crypto library to encrypt, decrypt, digital sign, and verify signed messages (implementing OpenPGP and OTR).\n\nThis is the source code for the End-To-End library. It's built upon a newly developed, JavaScript-based crypto library. End-To-End implements the OpenPGP standard, IETF RFC 4880, enabling key generation, encryption, decryption, digital signature, and signature verification.\n\nWe're releasing this library to enable community review.\n\nFor more background, please see [our blog post](http://googleonlinesecurity.blogspot.com/2014/06/making-end-to-end-encryption-easier-to.html).\n\nDocumentation for the project is stored in our [Wiki](https://github.com/google/end-to-end/wiki/). If you're planning to contribute to the project, check out our [Contributor guide](CONTRIBUTING.md).\n\nA few projects have been built on top of this library, to list a few:\n  - [E2EMail](https://github.com/e2email-org/e2email) - A Gmail client that exchanges OpenPGP mail.\n  - [Freedom JS](https://github.com/freedomjs/freedom-pgp-e2e) - A framework for building peer-to-peer (P2P) web apps.\n  - [uProxy](https://github.com/uProxy/uproxy) - A browser extension that lets users share their internet connection.\n  - [Google End-to-End Extension](https://github.com/google/end-to-end/tree/master/src/javascript/crypto/e2e/extension) - Google End-to-End Chrome Extension (not ready for general use).\n  - [Yahoo End-to-End Extension](https://github.com/yahoo/end-to-end) - A fork of Google's End-to-End for Yahoo mail.\n"
 },
 {
  "repo": "libtom/libtomcrypt",
  "language": "C",
  "readme_contents": "# libtomcrypt\n\nPreviously the git repository contained `doc/crypt.pdf` for detailed documentation.\nThis was changed and the file is now only available from the tarball of the appropriate version\nor from the page https://github.com/libtom/libtomcrypt/releases .\n\n## Project Status\n\n### Travis CI\n\nmaster: [![Build Status](https://api.travis-ci.org/libtom/libtomcrypt.png?branch=master)](https://travis-ci.org/libtom/libtomcrypt) [![Coverage Status](https://coveralls.io/repos/libtom/libtomcrypt/badge.png?branch=master)](https://coveralls.io/r/libtom/libtomcrypt)\n\ndevelop: [![Build Status](https://api.travis-ci.org/libtom/libtomcrypt.png?branch=develop)](https://travis-ci.org/libtom/libtomcrypt) [![Coverage Status](https://coveralls.io/repos/libtom/libtomcrypt/badge.png?branch=develop)](https://coveralls.io/r/libtom/libtomcrypt)\n\n### AppVeyor\n\nmaster: [![Build status](https://ci.appveyor.com/api/projects/status/xyl2nbdsyp1tj9ye/branch/master?svg=true)](https://ci.appveyor.com/project/libtom/libtomcrypt/branch/master)\n\ndevelop: [![Build status](https://ci.appveyor.com/api/projects/status/xyl2nbdsyp1tj9ye/branch/develop?svg=true)](https://ci.appveyor.com/project/libtom/libtomcrypt/branch/develop)\n\n### Coverity\n\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/487/badge.svg)](https://scan.coverity.com/projects/487)\n\n### ABI Laboratory\n\nAPI/ABI changes: [check here](https://abi-laboratory.pro/tracker/timeline/libtomcrypt/)\n\n## Submitting patches\n\nPlease branch off from develop if you want to submit a patch.\n\nPatch integration will be faster if tests and documentation are included.\n\nPlease update the makefiles in a separate commit. To update them simply run the `updatemakes.sh` script.\n\nIf you have something bigger to submit, feel free to contact us beforehand.\nThen we can give you write access to this repo, so you can open your PR based on this repo\nand we can easier follow the rebase-before-merge approach we're using (or even do the rebase ourself).\n\n### Reviews\n\nWe're using Pull Request reviews to make sure that the code is in line with the existing code base.\n\nPlease have a look [here](https://help.github.com/articles/approving-a-pull-request-with-required-reviews/) to get an idea of the approach.\n\n## Branches\n\nPlease be aware, that all branches besides _master_ and _develop_ __can__ and __will be__ force-pushed, rebased and/or removed!\n\nIf you want to rely on such an _unstable_ branch, create your own fork of this repository to make sure nothing breaks for you.\n\n## Configuration options\n\nBy default the library builds its entire feature set (besides `katja`) in a (depending on your needs more or less) optimal way.\n\nThere are numerous configuration options available if you want to trim down the functionality of the library.\n\nPlease have a look at `src/headers/tomcrypt_custom.h` for all available configuration options.\n\nThe following list is a small part of the available, but the most often required, configuration switches.\n\n| Flag | Behavior |\n| ---- | -------- |\n| `LTC_NO_TEST` | Remove all algorithm self-tests from the library |\n| `LTC_NO_FILE` | Remove all API functions requiring a pre-defined `FILE` data-type (mostly useful for embedded targets) |\n| `GMP_DESC` | enable [gmp](https://gmplib.org/) as MPI provider *\\*1* |\n| `LTM_DESC` | enable [libtommath](http://www.libtom.net/) as MPI provider *\\*1* |\n| `TFM_DESC` | enable [tomsfastmath](http://www.libtom.net/) as MPI provider *\\*1* *\\*2* |\n| `USE_GMP` | use `gmp` as MPI provider when building the binaries *\\*3* |\n| `USE_LTM` | use `libtommath` as MPI provider when building the binaries *\\*3* |\n| `USE_TFM` | use `tomsfastmath` as MPI provider when building the binaries *\\*3* |\n\n*\\*1* It is possible to build the library against all MPI providers in parallel and choose at startup-time which math library should be used.\n\n*\\*2* Please be aware that `tomsfastmath` has the limitation of a fixed max size of MPI's.\n\n*\\*3* Only one is supported at the time & this is only required when building the binaries, not when building the library itself.\n\n## Building the library\n\nThere are several `makefile`s provided. Please choose the one that fits best for you.\n\n| makefile | use-case |\n| -------- | -------- |\n| `makefile` | builds a static library (GNU Make required) |\n| `makefile.shared` | builds a shared (and static) library (GNU Make required) |\n| `makefile.unix` | for unusual UNIX platforms, or if you do not have GNU Make |\n| `makefile.mingw` | for usage with the mingw compiler on MS Windows |\n| `makefile.msvc` | for usage with the MSVC compiler on MS Windows |\n| `libtomcrypt_VS2008.sln` | A VisualStudio 2008 project for MS Windows |\n\n### Make targets\n\nThe `makefile`s provide several targets to build (VS project excluded).\nThe following list does not claim to be complete resp. to be available across all `makefile` variants.\n\n| target | application |\n| ------ | ----------- |\n| *empty target*/none given | c.f. `library`\n| `library` | builds only the library |\n| `hashsum` | builds the `hashsum` binary, similar to [`shasum`](https://linux.die.net/man/1/shasum), but with support for all hash-algorithms included in the library *\\*4* |\n| `ltcrypt` | builds the `ltcrypt` binary, implementing something similar to [`crypt`](https://linux.die.net/man/3/crypt) *\\*4* |\n| `sizes` | builds the `sizes` binary, printing all internal data sizes on invocation *\\*4* |\n| `constants` | builds the `constants` binary, printing all internal constants on invocation *\\*4* |\n| `openssl-enc` | builds the `openssl-enc` binary, which is more or less compatible to [`openssl enc`](https://linux.die.net/man/1/enc) *\\*4* *\\*5* |\n| `test` | builds the `test` binary, which runs all algorithm self-tests + some extended tests *\\*4* |\n| `timing` | builds the `timing` binary, which can be used to measure timings for algorithms and modes *\\*4* |\n| `bins` | builds `hashsum` *\\*4* |\n| `all_test` | builds `test`, `hashsum`, `ltcrypt`, `small`, `tv_gen`, `sizes` & `constants` *\\*4* |\n| `docs` | builds the developer documentation `doc/crypt.pdf` |\n| `install` | installs the `library` and header files *\\*7* *\\*8* |\n| `install_bins` | installs the binaries created by the `bins` target *\\*7* *\\*8* |\n| `install_docs` | installs the documentation created by the `docs` target *\\*7* *\\*8* |\n| `install_test` | installs the test-app created by the `test` target *\\*7* *\\*8* |\n| `install_all` | installs everything (i.e. `library`, `bins`, `docs` and `test`) *\\*8* |\n| `uninstall` | uninstalls the `library` and header files |\n\n*\\*4* also builds `library`\n\n*\\*5* broken build in some configurations, therefore not built by default\n\n*\\*7* also builds the necessary artifact(s) before installing it\n\n*\\*8* also have a look at the 'Installation' section of this file\n\n### Examples\n\nYou want to build the library as static library\n\n    make\n\nYou want to build the library as shared library\n\n    make -f makefile.shared\n\nYou have `libtommath` installed on your system and want to build a static library and the `test` binary to run the self-tests.\n\n    make CFLAGS=\"-DUSE_LTM -DLTM_DESC\" EXTRALIBS=\"-ltommath\" test\n\nYou have `tomsfastmath` installed on your system and want to build a shared library and all binaries\n\n    make -f makefile.shared CFLAGS=\"-DUSE_TFM -DTFM_DESC\" EXTRALIBS=\"-ltfm\" all demos\n\nYou have `gmp`, `libtommath` and `tomsfastmath` installed on your system and want to build a static library and the `timing` binary to measure timings against `gmp`.\n\n    make CFLAGS=\"-DUSE_GMP -DGMP_DESC -DLTM_DESC -DTFM_DESC\" EXTRALIBS=\"-lgmp\" timing\n\nIf you have `libtommath` in a non-standard location:\n\n    make CFLAGS=\"-DUSE_LTM -DLTM_DESC -I/opt/devel/ltm\" EXTRALIBS=\"/opt/devel/ltm/libtommath.a\" all\n\n## Installation\n\nThere exist several _install_ make-targets which are described in the table above.\n\nThese targets support the standard ways (c.f. [[GNU]], [[FreeBSD]])\nto modify the installation path via the following set of variables:\n\n    DESTDIR\n    PREFIX\n    LIBPATH\n    INCPATH\n    DATAPATH\n    BINPATH\n\nThe entire set of the variables is only supported in `makefile`, `makefile.shared` and `makefile.unix`.\n\nIn case you have to use one of the other makefiles, check in the file which variables are supported.\n\n### Examples\n\nYou want to install the static library to the default paths\n\n    make install\n\nYou want to install the shared library to a special path and use it from this path\n\n    make -f makefile.shared PREFIX=/opt/special/path\n\nHave a look at the developer documentation, [[GNU]] or [[FreeBSD]] to get a detailed explanation of all the variables.\n\n[GNU]: https://www.gnu.org/prep/standards/html_node/DESTDIR.html\n\n[FreeBSD]: https://www.freebsd.org/doc/en/books/porters-handbook/porting-prefix.html\n"
 },
 {
  "repo": "cjdelisle/cjdns",
  "language": "C",
  "readme_contents": "# cjdns\n\n[\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f](README_RU.md)\n[Hrvatski](README_HR.md)\n[Svenska](README_SV.md)\n[\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac](README_GR.md)\n[Deutsch](README_DE.md)\n[\u7e41\u9ad4\u4e2d\u6587](README_ZHT.md)\n[Espa\u00f1ol](README_ES.md)\n[Fran\u00e7ais](README_FR.md)\n[Portugu\u00eas brasileiro](README_PT-BR.md)\n\n#### *Networking Reinvented*\n\nCjdns implements an encrypted IPv6 network using public-key cryptography for\naddress allocation and a distributed hash table for routing. This provides\nnear-zero-configuration networking, and prevents many of the security and\nscalability issues that plague existing networks.\n\n[![Build Status](https://api.travis-ci.org/cjdelisle/cjdns.svg?branch=master)](https://travis-ci.org/cjdelisle/cjdns)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/387/badge)](https://bestpractices.coreinfrastructure.org/projects/387)\n[![tip for next commit](https://tip4commit.com/projects/941.svg)](https://tip4commit.com/github/cjdelisle/cjdns)\n[![irc](https://img.shields.io/badge/irc%20chat-%23cjdns-blue.svg)](https://kiwiirc.com/client/irc.efnet.org/?nick=visitor|?#cjdns)\n![License](https://img.shields.io/github/license/cjdelisle/cjdns.svg)\n\n## Testimonials\n\n    23:26 <@jercos> well, cjdns is now officially more reliable than the open\n                    internet for getting to my cheaper VPSes :|\n\n    12:52 < mariner> so i don't know if it's been done before, and i assume it's\n                     obvious, but I think it's neat. Currently on hype from an\n                     airplane\n\n    00:36 < tester> man sites take so long to load on i2p\n    00:36 < tester> i value speed over anonymity any day\n\n    <DuoNoxSol> it's notably more reliable than the normal internet\n\n    09:46 < Kubuxu> I so love cjdns code base\n\n    <whyrusleeping> my internet is way better now.\n    <whyrusleeping> thanks\n    <whyrusleeping> i'm really upset and sad that its better\n    <whyrusleeping> but also quite happy\n\n    21:01 <@grewalsat> this is amazing. with my workpalce speedtest.net results I get around 6+mb speed, and with my cjdns-gate as vpn network I'm getting like 11-15mb download speed in speedtest.net\n    21:01 <@grewalsat> :P\n    21:01 <@grewalsat> plus, access anything! :D\n\n    <davidar> Yeah, I have to admit I sort of avoided hypeirc because of stuff like that\n\n## Community\n\n* [irc://irc.freenode.org/#cjdns][IRC Web]\n* [Hyperboria][] the largest cjdns network, as of October 2015 there are 2100 nodes.\n* [/r/darknetplan][]\n* [#cjdns on Twitter][]\n* [/r/CJDNS](https://www.reddit.com/r/cjdns/)\n\n\n## Documentation\n\n* [Project Goals](doc/projectGoals.md)\n* [Cjdns Whitepaper](doc/Whitepaper.md)\n* [Cjdns on Wikipedia][]\n\nAdvanced configuration:\n\n* [Setup a cjdns NAT gateway for your LAN](doc/nat-gateway.md)\n* [Install cjdns on OpenIndiana](doc/open-indiana.md)\n\nThank you for your time and interest,\n\nThe cjdns developers.\n\n--------------------------------------------------------------------------------\n\n## How to install cjdns\n\nThese instructions are for Debian-based Linux distributions and macOS. They should be\ninformative enough for use on other distributions - just don't expect them to\nwork verbatim. If you want to know what [operating system's base is go here](https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg).\n\n### 0. Install dependencies\n\n**You must have Rust/Cargo**, see: https://rustup.rs/ for information about how to install.\n\nIf you have [Node.js](https://nodejs.org/) installed, the build will be slightly faster but this is not necessary.\nIf Node.js is unavailable or an unacceptable version, it will be downloaded and installed in the source tree.\n\n#### Debian-based distro:\n\n    sudo apt-get install nodejs git build-essential python2.7\n\n#### Fedora 22+ based distro:\n\n    sudo dnf install nodejs git\n    sudo dnf install @development-tools\n\n#### RHEL based distro (adds the EPEL repo):\n\n    sudo yum localinstall https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n    sudo yum install nodejs git\n    sudo yum install @development-tools\n   \n#### CentOS Stream 9\n    sudo dnf install nodejs git\n    sudo dnf groupinstall \"Development Tools\"\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n#### Gentoo\n\n    emerge --ask nodejs sys-devel/gcc dev-lang/python:3.4 dev-vcs/git\n\n#### MacOS:\n\nInstall with [MacPorts](https://www.macports.org/):\n\n    sudo port install cjdns\n\n#### OpenBSD:\n\n    pkg_add git node gcc gmake bash\n\nSelect version gcc-4.8.1p2 or more recent.\n\n#### FreeBSD:\n\nEverything you need is available prebuild in FreeBSD' ports.\n\n    pkg install gmake node\n\n#### Arch:\n\nYou can install cjdns by running:\n\n    pacman -S cjdns\n\nIf you need to build from source, everything you need can be installed like this:\n\n    pacman -S nodejs git base-devel\n\nAlternatively, you may like to install via AUR from the package, `cjdns-git`.\nAfter Installation, The configuration file is located at `/etc/cjdroute.conf`.\nTo start the service `cjdns.service`, do:\n\n    systemctl start cjdns\n\nTo stop it:\n\n    systemctl stop cjdns\n\n#### Gentoo:\n\ncjdns is not yet in the main Gentoo repository, so you will have to use an overlay.\nThe easiest way is to use Layman but you can do it by hand, too.\n\n##### Layman:\n\nFirst, you need to install layman.\n\n    emerge layman\n\nIf layman is installed correctly, you can add the overlay\n\n    layman -f\n    layman -a weuxel\n\nFor future update of the overlay use\n\n    layman -S\n\nNow you can install cjdns\n\n    emerge cjdns\n\n##### By hand:\n\nYou will have to clone the overlay repository\n\n    cd /opt\n    git clone https://github.com/Weuxel/portage-weuxel.git\n\nNow tell portage to use this repo\n\n    cd /etc/portage/repos.conf/\n\nCreate a file `portage-weuxel.conf` containing\n\n    [weuxel]\n    location = /opt/portage-weuxel\n    masters = gentoo\n    auto-sync = yes\n\nNow sync\n\n    emerge --sync\n\nAnd install cjdns\n\n    emerge cjdns\n\n#### Automatic crash detection and restart\n\nCopy the the openrc init script from `contrib/openrc` to `/etc/init.d/` and modify the `CONFFILE` and `command` parameter to your needs.\nThen start cjdns by issuing\n\n    /etc/init.d/cjdns start\n\nConfigure the init system to autostart cjdns\n\n    rc-update add cjdns default\n\nCopy the service_restart script `contrib/gentoo/service_restart.sh` to any convenient directory on\nyour system and modify the eMail address. If you do not wish to be notified, comment out the whole line.\nNow add a crontab entry like this\n\n    # Restart crashed Services\n    * * * * *       root\t/path/to/script/service_restart.sh\n\n#### Solus:\n\nDependencies:\n\n    sudo eopkg install nodejs git build-essential system.devel python gcc binutils kernal-headers xorg-server-devel\n\nThen Follow the steps below:\n\n*Sorry for so many steps. A package is being worked on currently*\n\n##### 1. Retrieve cjdns from GitHub\n\nClone the repository from GitHub and change to the source directory:\n\n    git clone https://github.com/cjdelisle/cjdns.git cjdns\n    cd cjdns\n\n##### 2. Build\n\n    ./do\n\nLook for `Build completed successfully, type ./cjdroute to begin setup.`, then\nproceed below:\n\n--------------------------------------------------------------------------------\n\n## Setup\n\nRun cjdroute without options for HELP:\n\n    ./cjdroute\n\n### 0. Make sure you've got the stuff.\n\nIf you're on macOS, don't worry about this step.\n\n    LANG=C cat /dev/net/tun\n\nIf it says: `cat: /dev/net/tun: File descriptor in bad state` Good!\n\nIf it says: `cat: /dev/net/tun: No such file or directory`, create it using:\n\n    sudo mkdir -p /dev/net &&\n    sudo mknod /dev/net/tun c 10 200 &&\n    sudo chmod 0666 /dev/net/tun\n\nThen `cat /dev/net/tun` again.\n\nIf it says: `cat: /dev/net/tun: Permission denied` You're probably using a VPS\nbased on the OpenVZ virtualization platform. Ask your provider to enable the\nTUN/TAP device - this is standard protocol so they should know exactly what you\nneed.\n\n\n### 1. Generate a new configuration file\n\n    ./cjdroute --genconf >> cjdroute.conf\n\n**Protect your conf file!**\n\nA lost conf file means you lost your password and\nconnections and anyone who connected to you will no longer be able to connect.\nA compromised conf file means that other people can impersonate you on the\nnetwork.\n\nTo generate a conf file with permissions set so that only your user can\nread it and write to it:\n\n    (umask 077 && ./cjdroute --genconf > cjdroute.conf)\n\n\n### 2. Find a friend\n\nTo get into an existing network (e.g. Hyperboria), you need to connect to\nsomeone who is already in the network. This is required for a number of\nreasons:\n\n1. It helps prevent abuse because bad people will be less likely to abuse a\n   system after they were, in an act of human kindness, given access to that\n   system.\n2. This is not intended to overlay The Old Internet, it is intended to replace\n   it. Each connection will in due time be replaced by a wire, a fiber optic\n   cable, or a wireless network connection.\n3. In any case of a disagreement, there will be a \"chain of friends\" linking\n   the people involved so there will already be a basis for coming to a\n   resolution.\n\nTo find a friend, get out there and join our [community](#community). Also, have\na look at the [Hyperboria Map](https://www.fc00.org/) to find peers near you.\n\nYou can also use the geographically assorted list of public peering credentials for joining Hyperboria at [hyperboria/peers](https://github.com/hyperboria/peers).\n\n### 3. Connect your node to your friend's node\n\n**To initiate the connection OUTbound**\n\nIn your conf file, you will see:\n\n``` javascript\n// Nodes to connect to.\n\"connectTo\":\n{\n    // Add connection credentials here to join the network\n    // Ask somebody who is already connected.\n}\n```\n\nA conf file with multiple friend-nodes, setup OUTbound, should look like:\n\n``` javascript\n// Nodes to connect to.\n\"connectTo\":\n{\n    //friend_1 (IPv4: 0.1.2.3; IPv6 fcaa:5bac:66e4:713:cb00:e446:c317:fc39)\n    \"0.1.2.3:45678\":\n    {\n        \"login\": \"k.alexander\"\n        \"password\": \"thisIsNotARealConnection_1\",\n        \"publicKey\": \"thisIsJustForAnExampleDoNotUseThisInYourConfFile_1.k\"\n    },\n\n    //friend_2 (IPv4: 5.1.2.3; IPv6 fcbb:5bac:66e4:713:cb00:e446:c317:fc39)\n    \"5.1.2.3:5678\":\n    {\n        \"login\": \"k.alexander\"\n        \"password\": \"thisIsNotARealConnection_2\",\n        \"publicKey\": \"thisIsJustForAnExampleDoNotUseThisInYourConfFile_2.k\"\n    }\n}\n```\n\nYou can add as many connections as you want to the `connectTo` attribute,\nfollowing JSON syntax.\n\n\n**To allow your friend to initiate the connection INbound**\n\nIn your conf file, you will see:\n\n``` javascript\n\"authorizedPasswords\":\n[\n    // A unique string which is known to the client and server.\n    {\"password\": \"password001\", \"login\": \"default-login\"}\n\n    // More passwords should look like this.\n    // {\"password\": \"password002\", \"login\": \"my-second-peer\"}\n    // {\"password\": \"password003\", \"login\": \"my-third-peer}\n    // {\"password\": \"password004\", \"login\": \"my-fourth-peer\"}\n    ...\n\n    // \"your.external.ip.goes.here:45678\":{\"login\": \"default-login\", \"password\": \"password001\",\"publicKey\":thisisauniqueKEY_001.k\"}\n\n],\n```\n\nA conf file with multiple friend-nodes, setup INbound, should look like:\n``` javascript\n\"authorizedPasswords\":\n[\n    // A unique string which is known to the client and server.\n    {\"password\": \"thisisauniquestring_001\", \"user\": \"k.alexander\"}\n\n    // More passwords should look like this.\n    //William Jevons (IPv4: 0.1.2.3; IPv6 fcaa:5bac:66e4:713:cb00:e446:c317:fc39)\n    {\"password\": \"thisisauniquestring_002\", \"user\": \"William Jevons\"}\n    //Marilyn Patel (IPv4: 5.1.2.3; IPv6 fcbb:5bac:66e4:713:cb00:e446:c317:fc39)\n    {\"password\": \"thisisauniquestring_003\", \"user\": \"Marilyn Patel\"}\n    // {\"password\": \"thisisauniquestring_004\"}\n    ...\n\n    // \"your.external.ip.goes.here:45678\":{\"password\": \"thisisauniquestring_001\",\"publicKey\":thisisauniqueKEY_001.k\"}\n],\n```\n\n\nYou need to give William Jevons (who is making the INbound connection) the following 4 items:\n\n1. Your external IPv4\n2. The port found in your conf file here:\n\n    `// Bind to this port.\n    \"bind\": \"0.0.0.0:yourportnumberishere\",`\n\n3. Their unique password that you uncommented or created: `\"password\": \"thisisauniquestring_002\"`\n4. Your public key: `\"publicKey\": \"thisisauniqueKEY_001.k\"`\n5. His username: \"William Jevons\"\n\nHis login credentials will look something like this (with your IPv4 and port):\n\n```javascript\n\"1.2.3.4:56789\": {\n    \"login\": \"William Jevons\",\n    \"password\": \"thisisauniquestring_002\",\n    \"publicKey\": \"thisIsJustForAnExampleDoNotUseThisInYourConfFile_1.k\"\n}\n```\n\nPlease note that you and your friend can *initiate* a\nconnection either outbound (from YOU --> FRIEND) or inbound (from FRIEND --> YOU)\nbut traffic flows both ways once the connection is established.\n\nSee [doc/configure.md](doc/configure.md) for more details on configuration,\nincluding how to peer with other cjdns nodes over ethernet and wifi.\n\n\n### 4. Secure your system - check for listening services\n\nOnce your node is running, you're now a newly minted IPv6 host. Your operating\nsystem may automatically reconfigure network services to use this new address.\nIf this is not what you intend, you should check to see that you are not\noffering more services than you intended to. ;)\n\nSee [doc/network-services.md](doc/network-services.md) for instructions.\n\n\n### 5. Start it up!\n\n    sudo ./cjdroute < cjdroute.conf\n\nIf you want to have your logs written to a file:\n\n    sudo ./cjdroute < cjdroute.conf > cjdroute.log\n\nTo stop cjdns:\n\n    sudo killall cjdroute\n\nIf you are having problems use `killall cjdroute` to return to sanity. Use\n`pgrep cjdroute` or `top` to see if it running.\n\n**NOTE!**\n\nThis starts cjdns as the root user so it can configure your system\nwithout concern for permissions. To start cjdns as a non-root user, see\n[doc/non-root-user.md](doc/non-root-user.md).\n\n\n### 6. Get in IRC\n\nWelcome to the network! You're now a network administrator. There are\nresponsibilities which come with being a network administrator which include\nbeing available in case there is something wrong with your equipment. You should\nstay on [IRC](#community) so that people can reach you.\n\n\n## Admin interface\n\nWhen cjdroute is up and running, the admin interface will be available at\n`udp://localhost:11234` (this can be changed in the `cjdroute.conf`\nconfiguration file). See [doc/admin-api.md](doc/admin-api.md) for more\ninformation about the admin interface. There are several tools in `contrib/`\nthat can interact with it.\n\nYou can access the admin API with:\n\n* the **Python library**; see [here](contrib/python/README.md).\n* the **Perl library**, maintained by Mikey; see [here](contrib/perl/CJDNS/README).\n\n\n## Reporting issues\n1. Don't report in this repo, please instead report it at https://github.com/hyperboria/bugs/issues\n2. Get on IRC and talk to somebody\n3. What will happen is either\n * Someone feels like fixing it\n * You feel like fixing it\n * Nobody cares about it and it will be forgotten for a while and maybe someone will hit it later\n and fix it or else it will get wiped away in a refactoring\n * Nobody can fix it at the moment but it is considered worth remembering because it has great\n significance to the way the code is developed, in this case it needs to be explained in technical\n terms by someone with strong familiarity with the code. They will make a pull request to the\n docs/bugs directory.\n\n### Security\nSecurity issues should be reported on IRC the same as other bugs. We don't have a closed\ngroup of people with special knowledge so that means the default security reporting method is\nfull disclosure.\n\nSee: [security_specification.md](https://github.com/cjdelisle/cjdns/blob/master/doc/security_specification.md) to see if a\npossible security issue is really a security issue.\n\n[IRC Web]: http://chat.efnet.org/irc.cgi?chan=%23cjdns\n[Hyperboria]: https://hyperboria.net\n[/r/darknetplan]: https://www.reddit.com/r/darknetplan\n[#cjdns on Twitter]: https://twitter.com/hashtag/cjdns\n[Hyperboria Map]: https://www.fc00.org/\n[Buildbots]: https://buildbot.meshwith.me/cjdns/waterfall\n\n[Cjdns on Wikipedia]: https://fr.wikipedia.org/wiki/Cjdns\n[Distributed Hash Table]: https://en.wikipedia.org/wiki/Distributed_hash_table\n[Beyond Pain]: https://lists.torproject.org/pipermail/tor-dev/2012-October/004063.html\n[Kademlia]: https://en.wikipedia.org/wiki/Kademlia\n\n[Tor]: https://www.torproject.org\n[I2P]: https://geti2p.net/en/\n[Freenet]: https://freenetproject.org\n"
 },
 {
  "repo": "Apress/practical-cryptography-in-python",
  "language": "Python",
  "readme_contents": "# Apress Source Code\n\n\n\nThis repository accompanies [*Cryptography in Python Source Code*](https://www.apress.com/9781484248997) by Seth Nielson and Christopher K. Monson (Apress, 2019).\n\n\n\n[comment]: #cover\n\n![Cover image](9781484248997.jpg)\n\n\n\nDownload the files as a zip using the green button, or clone the repository to your machine using Git.\n\n\n\n## Releases\n\n\nRelease v1.0 corresponds to the code in the published book, without corrections or updates.\n\n\n\n## Contributions\n\n\n\nSee the file Contributing.md for more information on how you can contribute to this repository.\n\n\n## Listing Types\n\nThere are two types of listings in the book. The first is typical Python code meant to be executed as a Python script. These can be executed directly from the command line with the appropriate configuration as described in Chapter 1. \n\nThe other files are representations of Python commands executed in a Python interactive shell. We have included these snippets in files ending with \".pyprompt\". Obviously, these cannot be run from the command line but you can copy each individual command into a shell if you would like to re-create the output.\n\n## Differences from Listings\n\nThe source code herein is not a perfect one-to-one match to source code listings in the book. For one thing, some book listings were shortened or simplified for space constraints or clarity. In other cases, multiple listings within the book are taken from a single file. Occasionally, there is a very small change to the actual code for similar reasons.\n\nMost of the included Python programs also include a simple main function that performs a simplistic sanity check to test that the code is working correctly. It would have been better to use Python's unittest framework but there were a couple of reasons this solution wasn't the default. Most of these programs, if run, will output either \"[PASS]\" (if everything worked correctly) or \"[FAIL]\" otherwise. For some, there is an explicit \"--auto-tester\" value checked at the command line that can be safely ignored.\n\n## Prerequisites\n\nWhile most of the included examples are completely self-contained, there are a few that must be run together or require some special inputs. These prerequisites are listed in the book. If something doesn't seem to work right, make sure that you are following the instructions.\n\n"
 },
 {
  "repo": "Wind-River/crypto-detector",
  "language": "Python",
  "readme_contents": "# Crypto Detector #\n\n## Overview ##\n\nDetecting cryptography in the source code of open-source packages or libraries turns out to be a common problem for many of the software companies that include these packages in their products.\n\nAt Wind River, we face a similar challenge. Thousands of packages are bundled as part of the Wind River operating system. We are developing this project to be an automated and efficient code parser that can determine, with some degree of confidence, that a piece of code contains restricted encryption algorithms. The output could then be verified by a human expert.\n\n\n## Methods of scanning code ##\n\nMore often than not, source code that contains an encryption algorithm has words that are very related to that algorithm. For example, a block of open source code that makes use of the DES algorithm is very likely to contain strings such as \"DES_\" or \"cipher\". So as a start, we can scan the source code searching for these keywords. This is a simple, first-pass that gives us an initial idea as to whether or not the source code might contain encryption. We call this the *keyword* method.\n\nTo go one step further, we search the content of each file for API calls to encryption libraries, include files, encryption data types, and other evidence that might ascertain the use of encryption libraries or services. This is our *API finder* method.\n\n## Encryption algorithms ##\n\nThis script crudely detects the following cryptography schemes:\n\n* Asymmetric cryptography\n\n >RSA, DSA, Diffie-Hellman, ECC, ElGamal, Rabin, XTR\n* Block ciphers\n\n >AES, DES, RC2, RC5, RC6, CAST, Blowfish, Twofish, Threefish, Rijndael, Camellia, IDEA, SEED, ARIA, SM4, Serpent, SHACAL, GOST, TEA, XTEA, BTEA, SAFER, Feistel, IntelCascade, KASUMI, MISTY1, NOEKEON, SHARK, Skipjack, BEAR-LION, RFC2268, MARS, DFC, CSCipher\n* Stream ciphers\n\n >RC4, Salsa20, XSalsa20, ChaCha20, PANAMA, SEAL, SOSEMANUK, WAKE\n* Substitution ciphers\n\n >ROT13\n* Hybrid encryption\n\n >PGP, GPG\n* Hashing algorithms\n\n >MD2, MD4, MD5, SHA-1, SHA-2, SHA-3, MDC-2, BLAKE, HMAC, RIPEMD, HAVAL, Tiger, Whirlpool, GOST, Adler32, Streebog\n* Protocols and standards\n\n >SSL, TLS, SSH, PKI, PKCS, MQV, kerberos, ASN1, MSCHAP\n* Encryption libraries\n\n >OpenSSL, OpenSSH, libgcrypt, Crypto++, cryptlib, libXCrypt, libMD, glibC, BeeCrypt, Botan,\n BouncyCastle, SpongyCastle, QT, JAVA SE 7, WinCrypt\n* Message Authentication Codes\n\n >HMAC, Poly1305\n\n* Cryptographic random number generators\n\n* And other generic encryption evidence\n\n## Using this tool ##\n\nThe script is written in Python and requires Python version 3.4 or later to be installed.\n\n### Installing Python ###\n\n#### Debian based Linux ####\nTo install Python, run the following command:\n\n```\nsudo apt-get install python3\n```\n\n#### Windows ####\nDownload the latest Python 3 release from https://www.python.org/downloads/windows/ and install it using the installation wizard.\n\n#### Apple OS X ####\nIf you have homebrew installed, simply run\n\n```\nsudo brew install python3\n```\nOtherwise, you can download the latest Python 3 release from https://www.python.org/downloads/mac-osx/ and install it that way.\n\n### Running the script ###\n\nTo run the script, exectute\n\n```\npython3 scan-for-crypto.py <options> <packages>\n```\n\nNote: on Windows, the executable is called \"python.exe\", so put that in place of \"python3\". You can create an alias with the command `doskey python3=C:\\path\\to\\python.exe $*` so instead of typing the full path to python.exe, you could use the alias 'python3'.\n\n#### Packages ####\nSpace-separated list of packages to scan. A package can be given as a path to a local directory, a local file, a local compressed archive, wild-card address, a remote archive, URL to a single source file, or a GitHub link. Have a look at `cryptodetector.conf` file for list of examples.\n\n#### Options ####\n##### --config-file=`<file path>` or -c `<file path>` #####\nThe path to the configuration file. If a configuration file is present, all options will be read from this file first, with additional command line arguments overriding them. Next section covers the specifications of a configuration file.\n\n##### --methods=`<comma-separated list>` or -m `<comma-separated list>` #####\nSpecifies the methods of scanning. Accepts a comma-separated list of methods. A method can be one of `keyword` or `api`, pertaining to the keyword search and API finder respectively.\n\n##### --output=`<path to directory>` or -o `<path to directory>` #####\nSpecifies the path in which the output files should be written. If this option is not provided, the default value is the current working directory.\n\n##### --output-in-package-directory or -p or --output-in-package-directory=`<True|False>` #####\nWith this option, this script will create the output file for a package in the directory in which that package resides. Note this will only work for local packages that have a directory.\n\n##### --output-existing=`<rename|overwrite|skip>` #####\nSpecifies what to do when an output crypto file already exists. Can be one of three options: `rename` (default) renames the new crypto file .1.crypto, .2.crypto and so on, `overwrite` overwrites the old file, and `skip` skips scanning the package.\n\n##### --quick or -q or --quick=`<True|False>` #####\nPerforms a quick/express search on a set of given packages, returning a list of only the packages that had at least one match found in any of their files. In the end, it writes the output as a list to the terminal and creates a file in the output directory called `quick-scan-result.txt`.\n\n##### --stop-after=k or -s k #####\nSpecifies to stop the search during execution of each method after finding `k` files with matches in them. `k` has to be a positive integer.\n\n##### --keyword-ignore-case or --keyword-ignore-case=`<True|False>` #####\nMakes the keyword search case-insensitive.\n\n##### --keyword-kwlist-path=`<path to a file>` #####\nPath to the keyword list file for the keyword method. By default, this is `/cryptodetector/methods/keyword/keyword_list.txt`.\n\n##### --api-kwlist-path=`<path to a file>` #####\nPath to the keyword list file for the API finder method. By default, this is `/cryptodetector/methods/api/api_definitions.txt`.\n\n##### --ignore-match-types=`<list of match types>` #####\nComma-separated list of match types to ignore while searching files for matches.\n\n##### --source-files-only or --source-files-only=`<True|False>` #####\nSpecifies whether or not to scan only the files that are source code files (for example .cpp files, .py files, etc) The type of a file is guessed based on its extension (mime type).\n\n##### --pretty or --pretty=`<True|False>` #####\nPlaces indentation and additional spaces in the output crypto files to make them more readable (pretty) at the cost of producing larger files.\n\n##### --verbose or -v or --verbose=`<True|False>` #####\nSpecifies whether to verbosely processes files and print out information.\n\n##### --suppress-warnings or -W or --suppress-warnings=`<True|False>` #####\nSpecifies not to write warning messages.\n\n##### --version #####\nShows the version of this program.\n\n##### --help or -h #####\nShows a help guide.\n\n#### Configuration File ####\nA configuration file contains all the options to the program, so one doesn't have to type them out in the command line every time. The path to the configuration file could be specified by the option `--config-file` or `-c` as specified above.\n\nIf this option is not present, this program will look for the file `cryptodetector.conf` in the *current working directory*. This is the directory in which the command line interpreter works, not necessarily the directory where this script is saved.\n\nIf the configuration file is not found there, it looks for it in the home folder. In Unix and Unix-like systems, this is the directory referred to as `~/`. In Windows, this is the `%UserProfile%` directory. Depending on the version of Windows, that could be one of `<drive>:\\Documents and Settings\\<user>` or ` <drive>:\\Users\\<user>` .\n\nIf no config file is found, the program expects all the parameters from the command line.\n\nLook at the example file `cryptodetector.conf` for the syntax. It is the same syntax as most other configuration files, where sections are enclosed by brackets and items are under sections, line by line. If an item has a value, its value is provided by the equal sign. Commenting out a line is simply putting a ` #` sign in front of it.\n\n#### Examples ####\n\nTo scan a single package (with default keyword search)\n\n```\npython3 scan-for-crypto.py /path/to/root/of/package\n```\n\nTo scan two packages with keyword search and API finder\n\n```\npython3 scan-for-crypto.py --methods=keyword,api /path/to/package1 /path/to/package2\n```\n\nTo download, extract, and scan the content of an archive using the API method, stopping the search after finding matches in at most 4 files\n\n```\npython3 scan-for-crypto.py --methods=api --stop-after=4 http://url/of/archive.tar.gz2\n```\n\nTo scan the master branch of a public GitHub repository:\n\n```\npython3 scan-for-crypto.py https://github.com/godbus/dbus.git\n```\n\nTo write output files to a different directory:\n\n```\npython3 scan-for-crypto.py --output=/output/path /path/to/a/compressed/archive.tar.gz2\n```\n\nTo scan a folder containg tar archives:\n\n```\npython3 scan-for-crypto.py /folder/*.tar.gz\n```\n\n### The Output ###\nThis script creates a set of `<package>.crypto` files for each package that it scans. It writes a JSON object in this file. For specification of the output format, see [output specification](/crypto-output-specification/crypto-spec-3.0.md).\n\n## FAQ ##\n\n### What happens if an error occurs during the execution? ###\nIf the error is related to inputs being invalid, the program prints the error message and terminates. Run-time errors are printed to standard error and added to the `\"errors\"` section of the crypto output, but they do not stop the execution of the program, unless it is an unhandled exception. A good test of knowing everything went okay in the end is to count the number of crypto files. They should be equal to the number of packages you scanned. You can check the log files to see if there was any run-time error.\n\n### How can I make it run faster by running it in parallel on a multi-core machine? ###\nIn Unix and Unix-like systems like Ubuntu or OS X, this can be easily accomplished by installing [GNU parallel](https://www.gnu.org/software/parallel/). In Debian-based systems, it is installed via\n```\nsudo apt-get install parallel\n```\nand similarly, on OS X,\n```\nsudo brew install parallel\n```\nUnfortunately, there is no direct port of GNU parallel for Windows. But it is available in [Cygwin](https://www.cygwin.com/).\n\nOnce this tool is installed, simply create a command_list.txt containing\n\n```\npython3 scan-for-crypto.py package1\npython3 scan-for-crypto.py package2\n...\n```\nand execute\n```\nparallel -j [number of cores] < command_list.txt\n```\nThis way, packages are processed in parallel, one package per core.\n\n### How can I see the list of methods available for scanning a package? ###\nSimply open the help guide by running:\n```\npython3 scan-for-crypto.py -h\n```\nList of available methods will be in the help message of the `--methods` option. As of now, there are only two methods that are usable, `keyword` and `api`.\n\n\n## FAQ for developers ##\n\n### Keyword search and API finder are great, but I want to create my own way of searching code for encryption. How can I do that? ###\n\nStart by creating a folder under `/methods` to put your files there. Have a look at our `hello_world` method under `/cryptodetector/methods/hello_world`. This provides a skeleton for writing a new method. As you can see, a method inherits from the `Method` class and must have a `method_id` attribute. Note that the name you give to your method folder, file names, and the class name for your method are arbitrary. The only thing that uniquely identifies the method is its `method_id`.\n\nEvery method class should implement the following three functions:\n\n* `search(content, language)`\nSearches the string `content` for encryption. `language` specifies the language of the content,\ndefined in the file `languages.py`. It returns a list of matches, where each match is dict object containing all the output fields. The example hello_world class shows basic usage.\n\n* `quick_search(content, language)`\nReturns `True` or `False` if it found one or more matches in the content in the given language.\n\n* `supports_scanning_file(language) `\nReturns `True` or `False` indicating whether this method supports scanning files in the given language.\n\nIn addition, a method class can have `options` and  `options_help` attributes, but these are not required. The hello_world example shows how to create your own options in the method. To set them from the command line, simply reference them by `--[your_method_id]-[your_option]`, replacing all underscores by dashes. For example, `example_value` option can be set from the command line by `--hello-world-example-value`. Indeed, you will see it if you run the help guide `python3 scan-for-crypto.py -h`. Have a look at the example config file `cryptodetector.conf` for the syntax of specifying method options from the config file.\n\n\n### I have an idea or suggestion. How can I contribute to the project? ###\n\nWe welcome your ideas and suggestions. Please create a fork of this project, make any edits to the\ncode that you like, push them to a branch, and create a pull request from that branch by going here:\nhttps://github.com/Wind-River/crypto-detector/pulls. If you'd like to contact the maintainers,\nplease email mark.gisi@windriver.com.\n\n## Project License ##\n\nCrypto Detector is free and distributed under the **Apache License, Version 2.0**. For further details, visit http://www.apache.org/licenses/LICENSE-2.0. Text for the crypto-detector and other applicable license notices can be found in the LICENSE file in the project top level directory. Different files may be under different licenses. Each source file should include a license notice that designates the licensing terms for the respective file.\n\n## Version ##\nVersion 1.0 (kamyar)\n\n## Legal Notices ##\n\nDisclaimer of Warranty / No Support: Wind River does not provide support and maintenance services for this software, under Wind River\u2019s standard Software Support and Maintenance Agreement or otherwise. Unless required by applicable law, Wind River provides the software (and each contributor provides its contribution) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OF ANY KIND, either express or implied, including, without limitation, any warranties of TITLE, NONINFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the software and assume any risks associated with your exercise of permissions under the license.\n"
 },
 {
  "repo": "tezos/tezos",
  "language": null,
  "readme_contents": "\nThis mirror has been deprecated.\nA new mirror has been setup here: https://github.com/tezos/tezos-mirror\n"
 },
 {
  "repo": "rust-cc/awesome-cryptography-rust",
  "language": null,
  "readme_contents": "# Awesome Cryptography Rust\n*Collect libraries and packages about cryptography in Rust.*\n\n- [Collection Library](#collection-library)\n- [Symmetric](#symmetric-cryptography)\n- [Public-key / Asymmetric](#asymmetric-cryptography)\n- [One-way Hash Function](#hash-function)\n- [Message Authentication Code (MAC)](#message-authentication-code)\n- [Digital Signature](#digital-signature)\n- [Rseudo Random Number Generator (PRNG)](#rseudo-random-number-generator)\n- [Zero-Knowledge Proofs (ZKP)](#zero-Knowledge-proofs)\n- [Homomorphic Encryption (HE)](#Homomorphic-encryption)\n- [Secure Multi-party Computation (MPC)](#secure-multi-party-computation)\n- [Theorem](#theorem)\n  - [Math](#math)\n  - [Elliptic Curve](#elliptic-curve)\n- [Attack Defense](#attack-defense)\n- [Others Wait to List](#others)\n\n\n## Cryptography\n### Collection library\n- [libsm](https://github.com/citahub/libsm) A Rust Library of China's Standards of Encryption Algorithms (SM2/3/4).\n- [mesalink](https://github.com/mesalock-linux/mesalink) MesaLink is a memory safe and OpenSSL-compatible TLS library.\n- [orion](https://github.com/brycx/orion) Usable, easy and safe pure-Rust crypto.\n- [rage](https://github.com/str4d/rage) age implementation. A simple, secure and modern encryption tool with small explicit keys, no config options, and UNIX-style composability.\n- [ring](https://github.com/briansmith/ring) Safe, fast, small crypto using Rust. (curve25519, aes-gcm, sha-256, sha-384, sha-512, hmac, hkdf, pbkdf2, p-256, p-384, x25519, chacha20-poly1305, ed25519).\n- [rust-crypto](https://github.com/DaGenix/rust-crypto) A (mostly) pure-Rust implementation of various cryptographic algorithms.\n- [rustls](https://github.com/ctz/rustls) A modern TLS library in Rust.\n- [sodiumoxide](https://github.com/sodiumoxide/sodiumoxide) Sodium Oxide: Fast cryptographic library for Rust (bindings to libsodium).\n\n\n### Symmetric cryptography\n- [aeads](https://github.com/RustCrypto/AEADs): Collection of Authenticated Encryption with Associated Data algorithms written in pure Rust.\n- [block-ciphers](https://github.com/RustCrypto/block-ciphers) Collection of block cipher algorithms written in pure Rust. (AES, Blowfish, DES + 3DES, Kuznyechik, Magma, RC2, Twofish).\n- [stream-ciphers](https://github.com/RustCrypto/stream-ciphers) Collection of stream cipher algorithms.\n\n\n### Asymmetric Cryptography\n###### RSA\n- [RSA](https://github.com/RustCrypto/RSA) RSA implementation in pure Rust. (PKCS1v1.5: Encryption & Decryption, Sign & Verify).\n\n###### DH\n- [x25519-dalek](https://github.com/dalek-cryptography/x25519-dalek) Fast and efficient ed25519 signing and verification in Rust.\n\n\n### Hash Function\n- [BLAKE3](https://github.com/BLAKE3-team/BLAKE3) Official implementations of the BLAKE3 cryptographic hash function.\n- [hashes](https://github.com/RustCrypto/hashes) Collection of cryptographic hash functions written in pure Rust. (sha1, sha2, sha3, md4, md5, BLAKE2, RIPEMD-160, RIPEMD-320, GOST94, Gr\u00f8stl, Streebog, Whirlpool).\n- [tiny-keccak](https://github.com/debris/tiny-keccak) A tiny implementation of SHA-3, SHAKE, Keccak, and sha3sum in rust.\n- [poseidon252](https://github.com/dusk-network/poseidon252) Starkad and Poseidon: New Hash Functions for Zero Knowledge Proof Systems.\n\n\n### Message Authentication Code\n- [MACs](https://github.com/RustCrypto/MACs) Message authentication code algorithms written in pure Rust. (CMAC, DAA, HMAC, PMAC).\n\n\n### Digital Signature\n###### Digital Signature Scheme\n- [bls](https://github.com/w3f/bls) Aggregatable BLS sigantures. (w3f).\n- [bls-signatures](https://github.com/filecoin-project/bls-signatures) BLS Signatures in Rust.\n- [ed25519-dalek](https://github.com/dalek-cryptography/ed25519-dalek) Fast and efficient ed25519 signing and verification in Rust. (dalek)\n- [milagro_bls](https://github.com/sigp/milagro_bls) BLS12-381 cryptography using Apache Milagro.\n- [nisty](https://github.com/nickray/nisty) NIST P-256 signatures for Cortex-M4 microcontrollers.\n- [signatures](https://github.com/RustCrypto/signatures) Cryptographic signature algorithms (e.g. ECDSA, Ed25519).\n\n###### Threshold Signature & Multi Party Signatures\n- [multi-party-ecdsa](https://github.com/KZen-networks/multi-party-ecdsa) Rust implementation of {t,n}-threshold ECDSA (elliptic curve digital signature algorithm).\n- [multi-party-schnorr](https://github.com/KZen-networks/multi-party-schnorr) Rust implementation of multi-party Schnorr signatures over elliptic curves.\n- [multiproof-rs](https://github.com/gballet/multiproof-rs) A rust implementation of Alexey Akhunov's multiproof algorithm.\n- [threshold_crypto](https://github.com/poanetwork/threshold_crypto) A pairing-based threshold cryptosystem for collaborative decryption and signatures.\n\n\n### Rseudo Random Number Generator\n- [rand](https://github.com/rust-random/rand) A Rust library for random number generation.\n\n\n### Zero Knowledge Proofs\n- [bellman](https://github.com/zkcrypto/bellman) zk-SNARK library. (zcash - librustzcash).\n- [bellman (matter-labs)](https://github.com/matter-labs/bellman) Bellman zkSNARK library for community with Ethereum's BN256 support.\n- [bellman (filecoin-project)](https://github.com/filecoin-project/bellman) GPU parallel acceleration to the FFT and Multiexponentation algorithms in the groth16 prover.\n- [bulletproofs (Dalek)](https://github.com/dalek-cryptography/bulletproofs) A pure-Rust implementation of Bulletproofs using Ristretto.\n- [bulletproofs (KZen-networks)](https://github.com/KZen-networks/bulletproofs) Bulletproof Rust implementation for Aggregated Range Proofs over multiple elliptic curves.\n- [Dusk-Zerocaf](https://github.com/dusk-network/dusk-zerocaf) Fast, efficient and bulletproof-friendly cryptographic operations.\n- [halo (prototype)](https://github.com/ebfull/halo) a zkp system.\n- [marlin](https://github.com/scipr-lab/marlin) A Rust library for the Marlin preprocessing zkSNARK.\n- [merlin](https://github.com/dalek-cryptography/merlin) Composable proof transcripts for public-coin arguments of knowledge.\n- [OpenZKP](https://github.com/0xProject/OpenZKP) pure Rust implementations of Zero-Knowledge Proof systems.\n- [rust-secp256k1-zkp](https://github.com/mimblewimble/rust-secp256k1-zkp)  ZKP fork for rust-secp256k1, adds wrappers for range proofs, pedersen commitments, etc.\n- [sonic](https://github.com/ebfull/sonic) a protocol for quickly verifiable, compact zero-knowledge proofs of arbitrary computations.\n- [Spartan](https://github.com/microsoft/Spartan) High-speed zkSNARKs without trusted setup.\n- [zexe](https://github.com/scipr-lab/zexe) Rust library for decentralized private computation.\n- [ZoKrates](https://github.com/Zokrates/ZoKrates) A toolbox for zkSNARKs on Ethereum.\n\n\n### Homomorphic Encryption\n\n\n### Secure Multi-party Computation\n[white-city](https://github.com/KZen-networks/white-city) Network layer for MPC protocols.(include use Tendermint/TokioServer/RocketServer).\n\n\n### Theorem\n#### Math\n- [fiat-crypto](https://github.com/mit-plv/fiat-crypto) Formally verified arithmetic implementations for several elliptic curves and word sizes, extracted to Rust from specifications written using in the Coq theorem prover.\n- [nalgebra](https://github.com/rustsim/nalgebra) Linear algebra library for Rust.\n- [num](https://github.com/rust-num/num) A collection of numeric types and traits for Rust. (Bigint).\n- [rust-decimal](https://github.com/paupino/rust-decimal) A Decimal Implementation written in pure Rust suitable for financial calculations.\n\n#### Elliptic Curve\n- [BLS12-381](https://github.com/zkcrypto/bls12_381) Implementation of the BLS12-381 pairing-friendly elliptic curve group.\n- [bn](https://github.com/paritytech/bn) Fork from [zcash](https://github.com/zcash-hackworks/bn) Pairing cryptography library in Rust. Barreto-Naehrig (BN).\n- [curve25519-dalek](https://github.com/dalek-cryptography/curve25519-dalek) Group operations on Ristretto and Curve25519..\n- [Jubjub](https://github.com/zkcrypto/jubjub) Implementation of the Jubjub elliptic curve group.\n- [k256](https://github.com/RustCrypto/elliptic-curves/tree/master/k256) Pure Rust implementation of secp256k1 using complete Weierstrass formulas\n- [libsecp256k1-rs](https://github.com/sorpaas/libsecp256k1-rs) Pure Rust Implementation of secp256k1. (Wei Tang).\n- [p256](https://github.com/RustCrypto/elliptic-curves/tree/master/p256) Pure Rust NIST P-256 implementation using complete Weierstrass formulas\n- [rust-secp256k1](https://github.com/rust-bitcoin/rust-secp256k1) Rust language bindings for Bitcoin secp256k1 library. (rust-bitcoin).\n\n\n### Attack Defense\n#### Constant time\n- [subtle](https://github.com/dalek-cryptography/subtle) Pure-Rust traits and utilities for constant-time cryptographic implementations.\n- [subtle-encoding](https://github.com/iqlusioninc/crates/tree/develop/subtle-encoding) Hex, Bech32, and Base64 in constant-time(ish).\n#### Zeroing memory\n- [Zeroize](https://github.com/iqlusioninc/crates/tree/develop/zeroize) Securely zero memory while avoiding compiler optimizations.\n\n\n### Others\n- [Double Ratchet](https://github.com/sebastianv89/double-ratchet) Pure Rust implementation of the Double Ratchet algorithm. (communicate securely).\n- [kms-secp256k1](https://github.com/KZen-networks/kms-secp256k1) Multi Party Key Management System (KMS) for Secp256k1 Elliptic curve based digital signatures.\n- [KDFs](https://github.com/RustCrypto/KDFs) Collection of Key Derivation Functions written in pure Rust.\n- [librustzcash](https://github.com/zcash/librustzcash) Rust-language assets for Zcash. (bellman-zk-SNARK, pairing-elliptic curves).\n- [molasses](https://github.com/trailofbits/molasses) A Rust implementation of the Message Layer Security group messaging protocol.\n- [MLSAG](https://github.com/crypto-rs-go/MLSAG) Multilayered Linkable Spontaneous Anonymous Group, This particular version leverages Ristretto255.\n- [password-hashing](https://github.com/RustCrypto/password-hashing) Password-based key derivation functions. (PBKDF2, scrypt).\n- [opaque-ke](https://github.com/novifinancial/opaque-ke) A pure Rust implementation of the recent [OPAQUE](https://datatracker.ietf.org/doc/draft-krawczyk-cfrg-opaque/) PAKE.\n- [PAKEs](https://github.com/RustCrypto/PAKEs) Password-Authenticated Key Agreement protocols. (SRP, spake2).\n- [rcmixed](https://github.com/rust-cc/rcmixed) Mixed cryptosystem. inspired by PGP.\n- [RustySecrets](https://github.com/SpinResearch/RustySecrets) A Rust implementation of threshold Shamir's secret sharing.\n- [schnorrkel](https://github.com/w3f/schnorrkel) Schnorr VRFs and signatures on the Ristretto group.\n- [vdf](https://github.com/poanetwork/vdf) An implementation of Verifiable Delay Functions in Rust.\n\n\n## Contribute\nContributions are most welcome.\nNot so many constraints, only lowercase > uppercase, symbols > letters.\n\n\n## License\n[![Creative Commons License](http://i.creativecommons.org/l/by/4.0/88x31.png)](http://creativecommons.org/licenses/by/4.0/)\n\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
 },
 {
  "repo": "raaz-crypto/raaz",
  "language": "Haskell",
  "readme_contents": "Raaz: A secure cryptographic library\n====================================\n\n[![Apache-2.0 OR BSD-3-Clause][shields-license]](#legal)\n[![][ci-build]][github-actions]\n[![][ci-checks]][github-actions]\n[![Hackage][hackage-badge]][hackage]\n[![Hackage Dependencies][hackage-deps-badge]][hackage-deps]\n\nRaaz is a cryptographic library in Haskell that provide a high level\nand safe access to a lot of cryptographic operations. The library can\nbe used for standalone cryptographic applications as well as for\nimplementing other network protocols. Some of the features that are\nunique to raaz are the following\n\n1. Pervasive use of types for better safety.\n2. Default choice of primitives and implementations are safe.\n3. Mechanism to have multiple implementations for any given\n   cryptographic primitives. An advanced user who has an in-depth\n   knowledge of the platform should be able to plugin the desired\n   implementation.\n4. Strong emphasis on API design with through documentation.\n\nBuilding\n--------\n\nThe recommended way to install raaz is through `cabal-install` version\n3.0 or above. We also need a version of GHC that supports backpack\n(for details on which version of GHC is supported, refer to our\n[CI-builds][github-actions]).\n\n    cabal build\n    cabal test\n    cabal install\n\nOnline documentation\n--------------------\n\n- [Latest release][doc-latest]\n- [Release candidate][doc-candidate]\n\nAbout the name\n--------------\n\nThe word `Raaz` (&#x0930;&#x093E;&#x095B;) stands for secret in Hindi.\n\n\nLegal\n-----\n\nCopyright 2012 Piyush P Kurur\n\nThe library is licensed under\n\n* Apache License, Version 2.0\n  <http://www.apache.org/licenses/LICENSE-2.0>\n* BSD 3-Clause license\n  <https://opensource.org/licenses/BSD-3-Clause>\n\nYou may not use this software except in compliance with one of the\nabove Licenses (*at your option*).\n\nSPDX-License-Identifier: (Apache-2.0 OR  BSD-3-Clause)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under these Licenses is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. For the exact terms and conditions see the accompanying\nLICENSE file.\n\n\n[wiki]: <https://github.com/raaz-crypto/raaz/wiki> \"Raaz Wiki\"\n[repo]: <https://github.com/raaz-crypto/raaz> \"Raaz on github\"\n[blake2]: <https://blake2.net/> \"Blake2 hash function\"\n[emailgroups]: <https://groups.google.com/forum/#!forum/hraaz> \"Raaz on Google groups\"\n[hackage]:       <https://hackage.haskell.org/package/raaz>\n[hackage-badge]: <https://img.shields.io/hackage/v/raaz.svg>\n[hackage-deps-badge]: <https://img.shields.io/hackage-deps/v/raaz.svg>\n[hackage-deps]: <https://packdeps.haskellers.com/feed?needle=raaz>\n[shields-license]: <https://img.shields.io/badge/License-Apache--2.0%20OR%20BSD--3--Clause-informational.svg>\n[ci-build]: <https://github.com/raaz-crypto/raaz/workflows/Build/badge.svg> \"Building source\"\n[ci-checks]: <https://github.com/raaz-crypto/raaz/workflows/Checks/badge.svg> \"Source code checks\"\n[github-actions]: <https://github.com/raaz-crypto/raaz/actions> \"Github actions\"\n[doc-latest]: <https://hackage.haskell.org/package/raaz>\n[doc-candidate]: <https://hackage.haskell.org/package/raaz-0.3.0/candidate>\n"
 },
 {
  "repo": "sshnet/Cryptography",
  "language": "C#",
  "readme_contents": "#SshNet.Security.Cryptography#\n\n[![Version](https://img.shields.io/nuget/vpre/SshNet.Security.Cryptography.svg)](https://www.nuget.org/packages/SshNet.Security.Cryptography)\n[![Build status](https://ci.appveyor.com/api/projects/status/r12lb7hjfjnefv6e/branch/master?svg=true)](https://ci.appveyor.com/project/drieseng/cryptography/branch/master)\n\n##Introduction##\nThis project groups some crypto classes that were previously part of **SSH.NET**, and makes them available for a broad set of target frameworks.\n\n##Hash algorithms##\n\n**SshNet.Security.Cryptography** features the following hash functions:\n* md5\n* sha1\n* sha2-256\n* sha2-384\n* sha2-512\n* ripemd160\n\n##Message Authentication Code##\n\n**SshNet.Security.Cryptography** includes the following MAC algorithms:\n* hmac-md5\n* hmac-sha1\n* hmac-sha2-256\n* hmac-sha2-384\n* hmac-sha2-512\n* hmac-ripemd160\n\n##Framework Support##\n**SshNet.Security.Cryptography** is available for the following target frameworks:\n\nTarget Framework Moniker  | Frameworks\n:------------------------ | :---------------------------------------------------\nnet20                     | .NET Framework 2.0\nnet40                     | .NET Framework 4.0\nnet45                     | .NET Framework 4.5\nnetstandard1.0            | .NET Platform Standard 1.0\nnetstandard1.3            | .NET Platform Standard 1.3\nportable-net45+win8+wpa81 | .NET Framework 4.5<br>Windows 8<br>Windows Phone 8.1\nsl4                       | Silverlight 4\nsl5                       | Silverlight 5\nuap10.0                   | Universal Windows Platform 10\nwp71                      | Windows Phone Silverlight 7.1\nwp8                       | Windows Phone Silverlight 8.0\n\nIn our codebase, we use the following conditional compilation symbols to identity features supported by a given target framework:\n\nSymbol                       | Description\n:----------------------------| :--------------------------------------------------------------------------------\nFEATURE_CRYPTO_HASHALGORITHM | [HashAlgorithm](https://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithm.aspx) and [KeyedHashAlgorithm](https://msdn.microsoft.com/en-us/library/system.security.cryptography.keyedhashalgorithm.aspx) classes are available\n\n##Build##\nThe following software is required to build **SshNet.Security.Cryptography** in all its supported flavors:\n\nSoftware                          | net35 | net40 | net45 | netstandard1.0 | netstandard1.3 | portable-net45+win8+wpa81 | sl4 | sl5 | uap10.0 | wp71 | wp8 |\n--------------------------------- | :---: | :---: | :---: | :------------: | :------------: | :-----------------------: | :-: | :-: | :-----: | :--: | :-: |\nWindows Phone SDK 8.0             |       |       |       |                |                | x                         | x   | x   |         | x    | x   |\nVisual Studio 2012 Update 5       | x     | x     |       |                |                |                           | x   | x   |         | x    | x   |\nVisual Studio 2015 Update 3       | x     | x     | x     | x              | x              | x                         |     | x   | x       |      | x   |\n.NET Core 1.0 Visual Studio Tools |       |       |       | x              | x              |                           |     |     |         |      |     |\n\n**Note:**\n\nWhere possible, we use the **Shared Project** concept - which was introduced in **Visual Studio 2015** - to share code between *flavors* of **SshNet.Security.Cryptography**.\nTo avoid maintaining two sets of project files, these projects can only be built in **Visual Studio 2015** (or higher).\n"
 },
 {
  "repo": "diafygi/webcrypto-examples",
  "language": "HTML",
  "readme_contents": "# Web Cryptography API Examples\n\nLive Table: https://diafygi.github.io/webcrypto-examples/\n\nI couldn't find anywhere that had clear examples of WebCryptoAPI, so I\nwrote examples and made a live table with them. Pull requests welcome!\n\n1. [RSASSA-PKCS1-v1_5](#rsassa-pkcs1-v1_5)\n  * [generateKey](#rsassa-pkcs1-v1_5---generatekey) |\n[importKey](#rsassa-pkcs1-v1_5---importkey) |\n[exportKey](#rsassa-pkcs1-v1_5---exportkey) |\n[sign](#rsassa-pkcs1-v1_5---sign) |\n[verify](#rsassa-pkcs1-v1_5---verify)\n\n2. [RSA-PSS](#rsa-pss)\n  * [generateKey](#rsa-pss---generatekey) |\n[importKey](#rsa-pss---importkey) |\n[exportKey](#rsa-pss---exportkey) |\n[sign](#rsa-pss---sign) |\n[verify](#rsa-pss---verify)\n\n3. [RSA-OAEP](#rsa-oaep)\n  * [generateKey](#rsa-oaep---generatekey) |\n[importKey](#rsa-oaep---importkey) |\n[exportKey](#rsa-oaep---exportkey) |\n[encrypt](#rsa-oaep---encrypt) |\n[decrypt](#rsa-oaep---decrypt) |\n[wrapKey](#rsa-oaep---wrapkey) |\n[unwrapKey](#rsa-oaep---unwrapkey)\n\n4. [ECDSA](#ecdsa)\n  * [generateKey](#ecdsa---generatekey) |\n[importKey](#ecdsa---importkey) |\n[exportKey](#ecdsa---exportkey) |\n[sign](#ecdsa---sign) |\n[verify](#ecdsa---verify)\n\n5. [ECDH](#ecdh)\n  * [generateKey](#ecdh---generatekey) |\n[importKey](#ecdh---importkey) |\n[exportKey](#ecdh---exportkey) |\n[deriveKey](#ecdh---derivekey) |\n[deriveBits](#ecdh---derivebits)\n\n6. [AES-CTR](#aes-ctr)\n  * [generateKey](#aes-ctr---generatekey) |\n[importKey](#aes-ctr---importkey) |\n[exportKey](#aes-ctr---exportkey) |\n[encrypt](#aes-ctr---encrypt) |\n[decrypt](#aes-ctr---decrypt) |\n[wrapKey](#aes-ctr---wrapkey) |\n[unwrapKey](#aes-ctr---unwrapkey)\n\n7. [AES-CBC](#aes-cbc)\n  * [generateKey](#aes-cbc---generatekey) |\n[importKey](#aes-cbc---importkey) |\n[exportKey](#aes-cbc---exportkey) |\n[encrypt](#aes-cbc---encrypt) |\n[decrypt](#aes-cbc---decrypt) |\n[wrapKey](#aes-cbc---wrapkey) |\n[unwrapKey](#aes-cbc---unwrapkey)\n\n8. [AES-CMAC](#aes-cmac)\n  * [generateKey](#aes-cmac---generatekey) |\n[importKey](#aes-cmac---importkey) |\n[exportKey](#aes-cmac---exportkey) |\n[sign](#aes-cmac---sign) |\n[verify](#aes-cmac---verify)\n\n9. [AES-GCM](#aes-gcm)\n  * [generateKey](#aes-gcm---generatekey) |\n[importKey](#aes-gcm---importkey) |\n[exportKey](#aes-gcm---exportkey) |\n[encrypt](#aes-gcm---encrypt) |\n[decrypt](#aes-gcm---decrypt) |\n[wrapKey](#aes-gcm---wrapkey) |\n[unwrapKey](#aes-gcm---unwrapkey)\n\n10. [AES-CFB](#aes-cfb)\n  * [generateKey](#aes-cfb---generatekey) |\n[importKey](#aes-cfb---importkey) |\n[exportKey](#aes-cfb---exportkey) |\n[encrypt](#aes-cfb---encrypt) |\n[decrypt](#aes-cfb---decrypt) |\n[wrapKey](#aes-cfb---wrapkey) |\n[unwrapKey](#aes-cfb---unwrapkey)\n\n11. [AES-KW](#aes-kw)\n  * [generateKey](#aes-kw---generatekey) |\n[importKey](#aes-kw---importkey) |\n[exportKey](#aes-kw---exportkey) |\n[wrapKey](#aes-kw---wrapkey) |\n[unwrapKey](#aes-kw---unwrapkey)\n\n12. [HMAC](#hmac)\n  * [generateKey](#hmac---generatekey) |\n[importKey](#hmac---importkey) |\n[exportKey](#hmac---exportkey) |\n[sign](#hmac---sign) |\n[verify](#hmac-verify)\n\n13. [DH](#dh)\n  * [generateKey](#dh---generatekey) |\n[importKey](#dh---importkey) |\n[exportKey](#dh---exportkey) |\n[deriveKey](#dh---derivekey) |\n[deriveBits](#dh---derivebits)\n\n14. [SHA](#sha-1)\n  * [SHA-1 digest](#sha-1---digest) |\n[SHA-256 digest](#sha-256---digest) |\n[SHA-384 digest](#sha-384---digest) |\n[SHA-512 digest](#sha-512---digest)\n\n18. [CONCAT](#concat)\n  * [importKey](#concat---importkey) |\n[deriveKey](#concat---derivekey) |\n[deriveBits](#concat---derivebits)\n\n19. [HKDF-CTR](#hkdf-ctr)\n  * [importKey](#hkdf-ctr---importkey) |\n[deriveKey](#hkdf-ctr---derivekey) |\n[deriveBits](#hkdf-ctr---derivebits)\n\n20. [PBKDF2](#pbkdf2)\n  * [generateKey](#pbkdf2---generatekey) |\n[importKey](#pbkdf2---importkey) |\n[deriveKey](#pbkdf2---derivekey) |\n[deriveBits](#pbkdf2---derivebits)\n\n## RSASSA-PKCS1-v1_5\n#### RSASSA-PKCS1-v1_5 - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"RSASSA-PKCS1-v1_5\",\n        modulusLength: 2048, //can be 1024, 2048, or 4096\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"sign\", \"verify\"] //can be any combination of \"sign\" and \"verify\"\n)\n.then(function(key){\n    //returns a keypair object\n    console.log(key);\n    console.log(key.publicKey);\n    console.log(key.privateKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSASSA-PKCS1-v1_5 - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    {   //this is an example jwk key, other key types are Uint8Array objects\n        kty: \"RSA\",\n        e: \"AQAB\",\n        n: \"vGO3eU16ag9zRkJ4AK8ZUZrjbtp5xWK0LyFMNT8933evJoHeczexMUzSiXaLrEFSyQZortk81zJH3y41MBO_UFDO_X0crAquNrkjZDrf9Scc5-MdxlWU2Jl7Gc4Z18AC9aNibWVmXhgvHYkEoFdLCFG-2Sq-qIyW4KFkjan05IE\",\n        alg: \"RS256\",\n        ext: true,\n    },\n    {   //these are the algorithm options\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"verify\"] //\"verify\" for public key import, \"sign\" for private key imports\n)\n.then(function(publicKey){\n    //returns a publicKey (or privateKey if you are importing a private key)\n    console.log(publicKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSASSA-PKCS1-v1_5 - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    publicKey //can be a publicKey or privateKey, as long as extractable was true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSASSA-PKCS1-v1_5 - sign\n```javascript\nwindow.crypto.subtle.sign(\n    {\n        name: \"RSASSA-PKCS1-v1_5\",\n    },\n    privateKey, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to sign\n)\n.then(function(signature){\n    //returns an ArrayBuffer containing the signature\n    console.log(new Uint8Array(signature));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSASSA-PKCS1-v1_5 - verify\n```javascript\nwindow.crypto.subtle.verify(\n    {\n        name: \"RSASSA-PKCS1-v1_5\",\n    },\n    publicKey, //from generateKey or importKey above\n    signature, //ArrayBuffer of the signature\n    data //ArrayBuffer of the data\n)\n.then(function(isvalid){\n    //returns a boolean on whether the signature is true or not\n    console.log(isvalid);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## RSA-PSS\n#### RSA-PSS - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"RSA-PSS\",\n        modulusLength: 2048, //can be 1024, 2048, or 4096\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"sign\", \"verify\"] //can be any combination of \"sign\" and \"verify\"\n)\n.then(function(key){\n    //returns a keypair object\n    console.log(key);\n    console.log(key.publicKey);\n    console.log(key.privateKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-PSS - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    {   //this is an example jwk key, other key types are Uint8Array objects\n        kty: \"RSA\",\n        e: \"AQAB\",\n        n: \"vGO3eU16ag9zRkJ4AK8ZUZrjbtp5xWK0LyFMNT8933evJoHeczexMUzSiXaLrEFSyQZortk81zJH3y41MBO_UFDO_X0crAquNrkjZDrf9Scc5-MdxlWU2Jl7Gc4Z18AC9aNibWVmXhgvHYkEoFdLCFG-2Sq-qIyW4KFkjan05IE\",\n        alg: \"PS256\",\n        ext: true,\n    },\n    {   //these are the algorithm options\n        name: \"RSA-PSS\",\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"verify\"] //\"verify\" for public key import, \"sign\" for private key imports\n)\n.then(function(publicKey){\n    //returns a publicKey (or privateKey if you are importing a private key)\n    console.log(publicKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-PSS - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    publicKey //can be a publicKey or privateKey, as long as extractable was true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-PSS - sign\n```javascript\nwindow.crypto.subtle.sign(\n    {\n        name: \"RSA-PSS\",\n        saltLength: 128, //the length of the salt\n    },\n    privateKey, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to sign\n)\n.then(function(signature){\n    //returns an ArrayBuffer containing the signature\n    console.log(new Uint8Array(signature));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-PSS - verify\n```javascript\nwindow.crypto.subtle.verify(\n    {\n        name: \"RSA-PSS\",\n        saltLength: 128, //the length of the salt\n    },\n    publicKey, //from generateKey or importKey above\n    signature, //ArrayBuffer of the signature\n    data //ArrayBuffer of the data\n)\n.then(function(isvalid){\n    //returns a boolean on whether the signature is true or not\n    console.log(isvalid);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## RSA-OAEP\n#### RSA-OAEP - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"RSA-OAEP\",\n        modulusLength: 2048, //can be 1024, 2048, or 4096\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //must be [\"encrypt\", \"decrypt\"] or [\"wrapKey\", \"unwrapKey\"]\n)\n.then(function(key){\n    //returns a keypair object\n    console.log(key);\n    console.log(key.publicKey);\n    console.log(key.privateKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-OAEP - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    {   //this is an example jwk key, other key types are Uint8Array objects\n        kty: \"RSA\",\n        e: \"AQAB\",\n        n: \"vGO3eU16ag9zRkJ4AK8ZUZrjbtp5xWK0LyFMNT8933evJoHeczexMUzSiXaLrEFSyQZortk81zJH3y41MBO_UFDO_X0crAquNrkjZDrf9Scc5-MdxlWU2Jl7Gc4Z18AC9aNibWVmXhgvHYkEoFdLCFG-2Sq-qIyW4KFkjan05IE\",\n        alg: \"RSA-OAEP-256\",\n        ext: true,\n    },\n    {   //these are the algorithm options\n        name: \"RSA-OAEP\",\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\"] //\"encrypt\" or \"wrapKey\" for public key import or\n                //\"decrypt\" or \"unwrapKey\" for private key imports\n)\n.then(function(publicKey){\n    //returns a publicKey (or privateKey if you are importing a private key)\n    console.log(publicKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-OAEP - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    publicKey //can be a publicKey or privateKey, as long as extractable was true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-OAEP - encrypt\n```javascript\nwindow.crypto.subtle.encrypt(\n    {\n        name: \"RSA-OAEP\",\n        //label: Uint8Array([...]) //optional\n    },\n    publicKey, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to encrypt\n)\n.then(function(encrypted){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(encrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-OAEP - decrypt\n```javascript\nwindow.crypto.subtle.decrypt(\n    {\n        name: \"RSA-OAEP\",\n        //label: Uint8Array([...]) //optional\n    },\n    privateKey, //from generateKey or importKey above\n    data //ArrayBuffer of the data\n)\n.then(function(decrypted){\n    //returns an ArrayBuffer containing the decrypted data\n    console.log(new Uint8Array(decrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-OAEP - wrapKey\n```javascript\nwindow.crypto.subtle.wrapKey(\n    \"raw\", //the export format, must be \"raw\" (only available sometimes)\n    key, //the key you want to wrap, must be able to fit in RSA-OAEP padding\n    publicKey, //the public key with \"wrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"RSA-OAEP\",\n        hash: {name: \"SHA-256\"},\n    }\n)\n.then(function(wrapped){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(wrapped));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### RSA-OAEP - unwrapKey\n```javascript\nwindow.crypto.subtle.unwrapKey(\n    \"raw\", //the import format, must be \"raw\" (only available sometimes)\n    wrapped, //the key you want to unwrap\n    privateKey, //the private key with \"unwrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"RSA-OAEP\",\n        modulusLength: 2048,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: {name: \"SHA-256\"},\n    },\n    {   //this what you want the wrapped key to become (same as when wrapping)\n        name: \"AES-GCM\",\n        length: 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //the usages you want the unwrapped key to have\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## ECDSA\n#### ECDSA - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\", //can be \"P-256\", \"P-384\", or \"P-521\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"sign\", \"verify\"] //can be any combination of \"sign\" and \"verify\"\n)\n.then(function(key){\n    //returns a keypair object\n    console.log(key);\n    console.log(key.publicKey);\n    console.log(key.privateKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### ECDSA - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    {   //this is an example jwk key, other key types are Uint8Array objects\n        kty: \"EC\",\n        crv: \"P-256\",\n        x: \"zCQ5BPHPCLZYgdpo1n-x_90P2Ij52d53YVwTh3ZdiMo\",\n        y: \"pDfQTUx0-OiZc5ZuKMcA7v2Q7ZPKsQwzB58bft0JTko\",\n        ext: true,\n    },\n    {   //these are the algorithm options\n        name: \"ECDSA\",\n        namedCurve: \"P-256\", //can be \"P-256\", \"P-384\", or \"P-521\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"verify\"] //\"verify\" for public key import, \"sign\" for private key imports\n)\n.then(function(publicKey){\n    //returns a publicKey (or privateKey if you are importing a private key)\n    console.log(publicKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### ECDSA - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    publicKey //can be a publicKey or privateKey, as long as extractable was true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### ECDSA - sign\n```javascript\nwindow.crypto.subtle.sign(\n    {\n        name: \"ECDSA\",\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    privateKey, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to sign\n)\n.then(function(signature){\n    //returns an ArrayBuffer containing the signature\n    console.log(new Uint8Array(signature));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### ECDSA - verify\n```javascript\nwindow.crypto.subtle.verify(\n    {\n        name: \"ECDSA\",\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    publicKey, //from generateKey or importKey above\n    signature, //ArrayBuffer of the signature\n    data //ArrayBuffer of the data\n)\n.then(function(isvalid){\n    //returns a boolean on whether the signature is true or not\n    console.log(isvalid);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## ECDH\n#### ECDH - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"ECDH\",\n        namedCurve: \"P-256\", //can be \"P-256\", \"P-384\", or \"P-521\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"deriveKey\", \"deriveBits\"] //can be any combination of \"deriveKey\" and \"deriveBits\"\n)\n.then(function(key){\n    //returns a keypair object\n    console.log(key);\n    console.log(key.publicKey);\n    console.log(key.privateKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### ECDH - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"raw\" (public only), \"spki\" (public only), or \"pkcs8\" (private only)\n    {   //this is an example jwk key, other key types are Uint8Array objects\n        kty: \"EC\",\n        crv: \"P-256\",\n        x: \"kgR_PqO07L8sZOBbw6rvv7O_f7clqDeiE3WnMkb5EoI\",\n        y: \"djI-XqCqSyO9GFk_QT_stROMCAROIvU8KOORBgQUemE\",\n        d: \"5aPFSt0UFVXYGu-ZKyC9FQIUOAMmnjzdIwkxCMe3Iok\",\n        ext: true,\n    },\n    {   //these are the algorithm options\n        name: \"ECDH\",\n        namedCurve: \"P-256\", //can be \"P-256\", \"P-384\", or \"P-521\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"deriveKey\", \"deriveBits\"] //\"deriveKey\" and/or \"deriveBits\" for private keys only (just put an empty list if importing a public key)\n)\n.then(function(privateKey){\n    //returns a privateKey (or publicKey if you are importing a public key)\n    console.log(privateKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### ECDH - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" (public or private), \"raw\" (public only), \"spki\" (public only), or \"pkcs8\" (private only)\n    publicKey //can be a publicKey or privateKey, as long as extractable was true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### ECDH - deriveKey\n```javascript\nwindow.crypto.subtle.deriveKey(\n    {\n        name: \"ECDH\",\n        namedCurve: \"P-256\", //can be \"P-256\", \"P-384\", or \"P-521\"\n        public: publicKey, //an ECDH public key from generateKey or importKey\n    },\n    privateKey, //your ECDH private key from generateKey or importKey\n    { //the key type you want to create based on the derived bits\n        name: \"AES-CTR\", //can be any AES algorithm (\"AES-CTR\", \"AES-CBC\", \"AES-CMAC\", \"AES-GCM\", \"AES-CFB\", \"AES-KW\", \"ECDH\", \"DH\", or \"HMAC\")\n        //the generateKey parameters for that type of algorithm\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the derived key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //limited to the options in that algorithm's importKey\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### ECDH - deriveBits\n```javascript\nwindow.crypto.subtle.deriveBits(\n    {\n        name: \"ECDH\",\n        namedCurve: \"P-256\", //can be \"P-256\", \"P-384\", or \"P-521\"\n        public: publicKey, //an ECDH public key from generateKey or importKey\n    },\n    privateKey, //your ECDH private key from generateKey or importKey\n    256 //the number of bits you want to derive\n)\n.then(function(bits){\n    //returns the derived bits as an ArrayBuffer\n    console.log(new Uint8Array(bits));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## AES-CTR\n#### AES-CTR - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"AES-CTR\",\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //can \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CTR - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    {   //this is an example jwk key, \"raw\" would be an ArrayBuffer\n        kty: \"oct\",\n        k: \"Y0zt37HgOx-BY7SQjYVmrqhPkO44Ii2Jcb9yydUDPfE\",\n        alg: \"A256CTR\",\n        ext: true,\n    },\n    {   //this is the algorithm options\n        name: \"AES-CTR\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //can \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n)\n.then(function(key){\n    //returns the symmetric key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CTR - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    key //extractable must be true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CTR - encrypt\n```javascript\nwindow.crypto.subtle.encrypt(\n    {\n        name: \"AES-CTR\",\n        //Don't re-use counters!\n        //Always use a new counter every time your encrypt!\n        counter: new Uint8Array(16),\n        length: 128, //can be 1-128\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to encrypt\n)\n.then(function(encrypted){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(encrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CTR - decrypt\n```javascript\nwindow.crypto.subtle.decrypt(\n    {\n        name: \"AES-CTR\",\n        counter: ArrayBuffer(16), //The same counter you used to encrypt\n        length: 128, //The same length you used to encrypt\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of the data\n)\n.then(function(decrypted){\n    //returns an ArrayBuffer containing the decrypted data\n    console.log(new Uint8Array(decrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CTR - wrapKey\n```javascript\nwindow.crypto.subtle.wrapKey(\n    \"jwk\", //can be \"jwk\", \"raw\", \"spki\", or \"pkcs8\"\n    key, //the key you want to wrap, must be able to export to \"raw\" format\n    wrappingKey, //the AES-CTR key with \"wrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-CTR\",\n        //Don't re-use counters!\n        //Always use a new counter every time your encrypt!\n        counter: new Uint8Array(16),\n        length: 128, //can be 1-128\n    }\n)\n.then(function(wrapped){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(wrapped));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CTR - unwrapKey\n```javascript\nwindow.crypto.subtle.unwrapKey(\n    \"jwk\", //\"jwk\", \"raw\", \"spki\", or \"pkcs8\" (whatever was used in wrapping)\n    wrapped, //the key you want to unwrap\n    wrappingKey, //the AES-CTR key with \"unwrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-CTR\",\n        //Don't re-use counters!\n        //Always use a new counter every time your encrypt!\n        counter: new Uint8Array(16),\n        length: 128, //can be 1-128\n    },\n    {   //this what you want the wrapped key to become (same as when wrapping)\n        name: \"AES-GCM\",\n        length: 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //the usages you want the unwrapped key to have\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## AES-CBC\n#### AES-CBC - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"AES-CBC\",\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //can be \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CBC - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    {   //this is an example jwk key, \"raw\" would be an ArrayBuffer\n        kty: \"oct\",\n        k: \"Y0zt37HgOx-BY7SQjYVmrqhPkO44Ii2Jcb9yydUDPfE\",\n        alg: \"A256CBC\",\n        ext: true,\n    },\n    {   //this is the algorithm options\n        name: \"AES-CBC\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //can be \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n)\n.then(function(key){\n    //returns the symmetric key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CBC - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    key //extractable must be true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CBC - encrypt\n```javascript\nwindow.crypto.subtle.encrypt(\n    {\n        name: \"AES-CBC\",\n        //Don't re-use initialization vectors!\n        //Always generate a new iv every time your encrypt!\n        iv: window.crypto.getRandomValues(new Uint8Array(16)),\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to encrypt\n)\n.then(function(encrypted){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(encrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CBC - decrypt\n```javascript\nwindow.crypto.subtle.decrypt(\n    {\n        name: \"AES-CBC\",\n        iv: ArrayBuffer(16), //The initialization vector you used to encrypt\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of the data\n)\n.then(function(decrypted){\n    //returns an ArrayBuffer containing the decrypted data\n    console.log(new Uint8Array(decrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CBC - wrapKey\n```javascript\nwindow.crypto.subtle.wrapKey(\n    \"jwk\", //can be \"jwk\", \"raw\", \"spki\", or \"pkcs8\"\n    key, //the key you want to wrap, must be able to export to above format\n    wrappingKey, //the AES-CBC key with \"wrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-CBC\",\n        //Don't re-use initialization vectors!\n        //Always generate a new iv every time your encrypt!\n        iv: window.crypto.getRandomValues(new Uint8Array(16)),\n    }\n)\n.then(function(wrapped){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(wrapped));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CBC - unwrapKey\n```javascript\nwindow.crypto.subtle.unwrapKey(\n    \"jwk\", //\"jwk\", \"raw\", \"spki\", or \"pkcs8\" (whatever was used in wrapping)\n    wrapped, //the key you want to unwrap\n    wrappingKey, //the AES-CBC key with \"unwrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-CBC\",\n        iv: ArrayBuffer(16), //The initialization vector you used to encrypt\n    },\n    {   //this what you want the wrapped key to become (same as when wrapping)\n        name: \"AES-GCM\",\n        length: 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //the usages you want the unwrapped key to have\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## AES-CMAC\n#### AES-CMAC - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"AES-CMAC\",\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"sign\", \"verify\"] //can be any combination of \"sign\" and \"verify\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CMAC - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    {   //this is an example jwk key, \"raw\" would be an ArrayBuffer\n        kty: \"oct\",\n        k: \"Y0zt37HgOx-BY7SQjYVmrqhPkO44Ii2Jcb9yydUDPfE\",\n        alg: \"A256CMAC\",\n        ext: true,\n    },\n    {   //this is the algorithm options\n        name: \"AES-CMAC\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"sign\", \"verify\"] //can be any combination of \"sign\" and \"verify\"\n)\n.then(function(key){\n    //returns the symmetric key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CMAC - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    key //extractable must be true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CMAC - sign\n```javascript\nwindow.crypto.subtle.sign(\n    {\n        name: \"AES-CMAC\",\n        length: 256, //bit length of the MAC\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to sign\n)\n.then(function(signature){\n    //returns an ArrayBuffer containing the signature\n    console.log(new Uint8Array(signature));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CMAC - verify\n```javascript\nwindow.crypto.subtle.verify(\n    {\n        name: \"AES-CMAC\",\n        length: 256, //bit length of the MAC\n    },\n    key, //from generateKey or importKey above\n    signature, //ArrayBuffer of the signature\n    data //ArrayBuffer of the data\n)\n.then(function(isvalid){\n    //returns a boolean on whether the signature is true or not\n    console.log(isvalid);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## AES-GCM\n#### AES-GCM - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"AES-GCM\",\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //can \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-GCM - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    {   //this is an example jwk key, \"raw\" would be an ArrayBuffer\n        kty: \"oct\",\n        k: \"Y0zt37HgOx-BY7SQjYVmrqhPkO44Ii2Jcb9yydUDPfE\",\n        alg: \"A256GCM\",\n        ext: true,\n    },\n    {   //this is the algorithm options\n        name: \"AES-GCM\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //can \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n)\n.then(function(key){\n    //returns the symmetric key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-GCM - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    key //extractable must be true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-GCM - encrypt\n```javascript\nwindow.crypto.subtle.encrypt(\n    {\n        name: \"AES-GCM\",\n\n        //Don't re-use initialization vectors!\n        //Always generate a new iv every time your encrypt!\n        //Recommended to use 12 bytes length\n        iv: window.crypto.getRandomValues(new Uint8Array(12)),\n\n        //Additional authentication data (optional)\n        additionalData: ArrayBuffer,\n\n        //Tag length (optional)\n        tagLength: 128, //can be 32, 64, 96, 104, 112, 120 or 128 (default)\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to encrypt\n)\n.then(function(encrypted){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(encrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-GCM - decrypt\n```javascript\nwindow.crypto.subtle.decrypt(\n    {\n        name: \"AES-GCM\",\n        iv: ArrayBuffer(12), //The initialization vector you used to encrypt\n        additionalData: ArrayBuffer, //The addtionalData you used to encrypt (if any)\n        tagLength: 128, //The tagLength you used to encrypt (if any)\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of the data\n)\n.then(function(decrypted){\n    //returns an ArrayBuffer containing the decrypted data\n    console.log(new Uint8Array(decrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-GCM - wrapKey\n```javascript\nwindow.crypto.subtle.wrapKey(\n    \"jwk\", //can be \"jwk\", \"raw\", \"spki\", or \"pkcs8\"\n    key, //the key you want to wrap, must be able to export to above format\n    wrappingKey, //the AES-GCM key with \"wrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-GCM\",\n\n        //Don't re-use initialization vectors!\n        //Always generate a new iv every time your encrypt!\n        //Recommended to use 12 bytes length\n        iv: window.crypto.getRandomValues(new Uint8Array(12)),\n\n        //Additional authentication data (optional)\n        additionalData: ArrayBuffer,\n\n        //Tag length (optional)\n        tagLength: 128, //can be 32, 64, 96, 104, 112, 120 or 128 (default)\n    }\n)\n.then(function(wrapped){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(wrapped));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-GCM - unwrapKey\n```javascript\nwindow.crypto.subtle.unwrapKey(\n    \"jwk\", //\"jwk\", \"raw\", \"spki\", or \"pkcs8\" (whatever was used in wrapping)\n    wrapped, //the key you want to unwrap\n    wrappingKey, //the AES-GCM key with \"unwrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-GCM\",\n        iv: ArrayBuffer(12), //The initialization vector you used to encrypt\n        additionalData: ArrayBuffer, //The addtionalData you used to encrypt (if any)\n        tagLength: 128, //The tagLength you used to encrypt (if any)\n    },\n    {   //this what you want the wrapped key to become (same as when wrapping)\n        name: \"AES-CBC\",\n        length: 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //the usages you want the unwrapped key to have\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## AES-CFB\n#### AES-CFB - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"AES-CFB-8\",\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //can \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CFB - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    {   //this is an example jwk key, \"raw\" would be an ArrayBuffer\n        kty: \"oct\",\n        k: \"Y0zt37HgOx-BY7SQjYVmrqhPkO44Ii2Jcb9yydUDPfE\",\n        alg: \"A256CFB8\",\n        ext: true,\n    },\n    {   //this is the algorithm options\n        name: \"AES-CFB-8\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //can \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n)\n.then(function(key){\n    //returns the symmetric key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CFB - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    key //extractable must be true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CFB - encrypt\n```javascript\nwindow.crypto.subtle.encrypt(\n    {\n        name: \"AES-CFB-8\",\n        //Don't re-use initialization vectors!\n        //Always generate a new iv every time your encrypt!\n        iv: window.crypto.getRandomValues(new Uint8Array(16)),\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to encrypt\n)\n.then(function(encrypted){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(encrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CFB - decrypt\n```javascript\nwindow.crypto.subtle.decrypt(\n    {\n        name: \"AES-CFB-8\",\n        iv: ArrayBuffer(16), //The initialization vector you used to encrypt\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of the data\n)\n.then(function(decrypted){\n    //returns an ArrayBuffer containing the decrypted data\n    console.log(new Uint8Array(decrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CFB - wrapKey\n```javascript\nwindow.crypto.subtle.wrapKey(\n    \"jwk\", //can be \"jwk\", \"raw\", \"spki\", or \"pkcs8\"\n    key, //the key you want to wrap, must be able to export to above format\n    wrappingKey, //the AES-CFB key with \"wrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-CFB\",\n        //Don't re-use initialization vectors!\n        //Always generate a new iv every time your encrypt!\n        iv: window.crypto.getRandomValues(new Uint8Array(16)),\n    }\n)\n.then(function(wrapped){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(wrapped));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-CFB - unwrapKey\n```javascript\nwindow.crypto.subtle.unwrapKey(\n    \"jwk\", //\"jwk\", \"raw\", \"spki\", or \"pkcs8\" (whatever was used in wrapping)\n    wrapped, //the key you want to unwrap\n    wrappingKey, //the AES-CFB key with \"unwrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-CFB\",\n        iv: ArrayBuffer(16), //The initialization vector you used to encrypt\n    },\n    {   //this what you want the wrapped key to become (same as when wrapping)\n        name: \"AES-GCM\",\n        length: 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //the usages you want the unwrapped key to have\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## AES-KW\n#### AES-KW - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"AES-KW\",\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"wrapKey\", \"unwrapKey\"] //can be any combination of \"wrapKey\" and \"unwrapKey\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-KW - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    {   //this is an example jwk key, \"raw\" would be an ArrayBuffer\n        kty: \"oct\",\n        k: \"Y0zt37HgOx-BY7SQjYVmrqhPkO44Ii2Jcb9yydUDPfE\",\n        alg: \"A256KW\",\n        ext: true,\n    },\n    {   //this is the algorithm options\n        name: \"AES-KW\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"wrapKey\", \"unwrapKey\"] //can be any combination of \"wrapKey\" and \"unwrapKey\"\n)\n.then(function(key){\n    //returns the symmetric key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-KW - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    key //extractable must be true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-KW - wrapKey\n```javascript\nwindow.crypto.subtle.wrapKey(\n    \"raw\", //the export format, must be \"raw\" (only available sometimes)\n    key, //the key you want to wrap, must export in 8 byte increments\n    wrappingKey, //the AES-KW key with \"wrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-KW\",\n    }\n)\n.then(function(wrapped){\n    //returns an ArrayBuffer containing the encrypted data\n    console.log(new Uint8Array(wrapped));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### AES-KW - unwrapKey\n```javascript\nwindow.crypto.subtle.unwrapKey(\n    \"raw\", //the import format, must be \"raw\" (only available sometimes)\n    wrapped, //the key you want to unwrap\n    wrappingKey, //the AES-KW key with \"unwrapKey\" usage flag\n    {   //these are the wrapping key's algorithm options\n        name: \"AES-KW\",\n    },\n    {   //this what you want the wrapped key to become (same as when wrapping)\n        name: \"AES-GCM\",\n        length: 256\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //the usages you want the unwrapped key to have\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## HMAC\n#### HMAC - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"HMAC\",\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n        //length: 256, //optional, if you want your key length to differ from the hash function's block length\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"sign\", \"verify\"] //can be any combination of \"sign\" and \"verify\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### HMAC - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    {   //this is an example jwk key, \"raw\" would be an ArrayBuffer\n        kty: \"oct\",\n        k: \"Y0zt37HgOx-BY7SQjYVmrqhPkO44Ii2Jcb9yydUDPfE\",\n        alg: \"HS256\",\n        ext: true,\n    },\n    {   //this is the algorithm options\n        name: \"HMAC\",\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n        //length: 256, //optional, if you want your key length to differ from the hash function's block length\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"sign\", \"verify\"] //can be any combination of \"sign\" and \"verify\"\n)\n.then(function(key){\n    //returns the symmetric key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### HMAC - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"jwk\" or \"raw\"\n    key //extractable must be true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### HMAC - sign\n```javascript\nwindow.crypto.subtle.sign(\n    {\n        name: \"HMAC\",\n    },\n    key, //from generateKey or importKey above\n    data //ArrayBuffer of data you want to sign\n)\n.then(function(signature){\n    //returns an ArrayBuffer containing the signature\n    console.log(new Uint8Array(signature));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### HMAC - verify\n```javascript\nwindow.crypto.subtle.verify(\n    {\n        name: \"HMAC\",\n    },\n    key, //from generateKey or importKey above\n    signature, //ArrayBuffer of the signature\n    data //ArrayBuffer of the data\n)\n.then(function(isvalid){\n    //returns a boolean on whether the signature is true or not\n    console.log(isvalid);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## DH\n#### DH - generateKey\n```javascript\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"DH\",\n        //NOTE: THIS IS A SMALL PRIME FOR TESTING ONLY! DO NOT USE IT FOR REAL!\n        //See http://datatracker.ietf.org/doc/rfc3526/ for better primes\n        prime: new Uint8Array([\n            255,255,255,255,255,255,255,255,201,15,218,162,33,104,194,52,196,198,98,139,\n            128,220,28,209,41,2,78,8,138,103,204,116,2,11,190,166,59,19,155,34,81,74,8,\n            121,142,52,4,221,239,149,25,179,205,58,67,27,48,43,10,109,242,95,20,55,79,225,\n            53,109,109,81,194,69,228,133,181,118,98,94,126,198,244,76,66,233,166,55,237,\n            107,11,255,92,182,244,6,183,237,238,56,107,251,90,137,159,165,174,159,36,17,\n            124,75,31,230,73,40,102,81,236,228,91,61,194,0,124,184,161,99,191,5,152,218,\n            72,54,28,85,211,154,105,22,63,168,253,36,207,95,131,101,93,35,220,163,173,\n            150,28,98,243,86,32,133,82,187,158,213,41,7,112,150,150,109,103,12,53,78,74,\n            188,152,4,241,116,108,8,202,35,115,39,255,255,255,255,255,255,255,255\n        ]),\n        generator: new Uint8Array([2]),\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"deriveKey\", \"deriveBits\"] //can be any combination of \"deriveKey\" and \"deriveBits\"\n)\n.then(function(key){\n    //returns a keypair object\n    console.log(key);\n    console.log(key.publicKey);\n    console.log(key.privateKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### DH - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"raw\", //can be \"raw\" (public only), \"spki\" (public only), or \"pkcs8\" (private only)\n    new Uint8Array([ //this is an example raw key, \"raw\" would be an ArrayBuffer\n        203,25,0,203,43,75,46,159,217,37,185,181,25,220,71,187,112,195,251,233,152,56,206,\n        93,18,96,87,132,17,113,166,110,123,190,194,168,100,147,21,174,131,80,8,247,125,35,\n        210,70,103,141,152,173,99,74,34,132,92,134,216,55,171,186,89,167,189,217,164,119,\n        22,139,55,26,239,242,30,241,140,139,202,116,174,137,77,11,29,4,30,47,118,170,84,243,\n        97,132,86,58,24,82,36,149,45,185,23,172,67,162,48,43,110,251,175,20,102,237,113,148,\n        5,242,29,209,34,173,52,72,251,254,84,86,226,151,202,110,61,145,198,244,80,227,65,\n        203,118,217,91,45,58,172,165,224,122,230,50,135,120,124,37,190,186,204,103,218,19,\n        91,246,115,6,199,45,121,156,149,6,208,85,26,94,171,165,228,58,200,49,82,210,170,243,\n        154,190,15,2,225,143,159\n    ]),\n    {   //these are the algorithm options\n        name: \"DH\",\n        //NOTE: THIS IS A SMALL PRIME FOR TESTING ONLY! DO NOT USE IT FOR REAL!\n        //See http://datatracker.ietf.org/doc/rfc3526/ for better primes\n        prime: new Uint8Array([\n            255,255,255,255,255,255,255,255,201,15,218,162,33,104,194,52,196,198,98,139,\n            128,220,28,209,41,2,78,8,138,103,204,116,2,11,190,166,59,19,155,34,81,74,8,\n            121,142,52,4,221,239,149,25,179,205,58,67,27,48,43,10,109,242,95,20,55,79,225,\n            53,109,109,81,194,69,228,133,181,118,98,94,126,198,244,76,66,233,166,55,237,\n            107,11,255,92,182,244,6,183,237,238,56,107,251,90,137,159,165,174,159,36,17,\n            124,75,31,230,73,40,102,81,236,228,91,61,194,0,124,184,161,99,191,5,152,218,\n            72,54,28,85,211,154,105,22,63,168,253,36,207,95,131,101,93,35,220,163,173,\n            150,28,98,243,86,32,133,82,187,158,213,41,7,112,150,150,109,103,12,53,78,74,\n            188,152,4,241,116,108,8,202,35,115,39,255,255,255,255,255,255,255,255\n        ]),\n        generator: new Uint8Array([2]),\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [] //use [\"deriveKey\", \"deriveBits\"] if importing a private key\n)\n.then(function(publicKey){\n    //returns a publicKey (or privateKey if you are importing a private key)\n    console.log(publicKey);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### DH - exportKey\n```javascript\nwindow.crypto.subtle.exportKey(\n    \"jwk\", //can be \"raw\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    publicKey //can be a publicKey or privateKey, as long as extractable was true\n)\n.then(function(keydata){\n    //returns the exported key data\n    console.log(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### DH - deriveKey\n```javascript\nwindow.crypto.subtle.deriveKey(\n    {\n        name: \"DH\",\n        //NOTE: THIS IS A SMALL PRIME FOR TESTING ONLY! DO NOT USE IT FOR REAL!\n        //See http://datatracker.ietf.org/doc/rfc3526/ for better primes\n        prime: new Uint8Array([\n            255,255,255,255,255,255,255,255,201,15,218,162,33,104,194,52,196,198,98,139,\n            128,220,28,209,41,2,78,8,138,103,204,116,2,11,190,166,59,19,155,34,81,74,8,\n            121,142,52,4,221,239,149,25,179,205,58,67,27,48,43,10,109,242,95,20,55,79,225,\n            53,109,109,81,194,69,228,133,181,118,98,94,126,198,244,76,66,233,166,55,237,\n            107,11,255,92,182,244,6,183,237,238,56,107,251,90,137,159,165,174,159,36,17,\n            124,75,31,230,73,40,102,81,236,228,91,61,194,0,124,184,161,99,191,5,152,218,\n            72,54,28,85,211,154,105,22,63,168,253,36,207,95,131,101,93,35,220,163,173,\n            150,28,98,243,86,32,133,82,187,158,213,41,7,112,150,150,109,103,12,53,78,74,\n            188,152,4,241,116,108,8,202,35,115,39,255,255,255,255,255,255,255,255\n        ]),\n        generator: new Uint8Array([2]),\n        public: publicKey, //a DH public key from generateKey or importKey\n    },\n    privateKey, //your DH private key from generateKey or importKey\n    { //the key type you want to create based on the derived bits\n        name: \"AES-CTR\", //can be any AES algorithm (\"AES-CTR\", \"AES-CBC\", \"AES-CMAC\", \"AES-GCM\", \"AES-CFB\", \"AES-KW\", \"ECDH\", \"DH\", or \"HMAC\")\n        //the generateKey parameters for that type of algorithm\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the derived key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //limited to the options in that algorithm's importKey\n)\n.then(function(key){\n    //returns the derived key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### DH - deriveBits\n```javascript\nwindow.crypto.subtle.deriveBits(\n    {\n        name: \"DH\",\n        //NOTE: THIS IS A SMALL PRIME FOR TESTING ONLY! DO NOT USE IT FOR REAL!\n        //See http://datatracker.ietf.org/doc/rfc3526/ for better primes\n        prime: new Uint8Array([\n            255,255,255,255,255,255,255,255,201,15,218,162,33,104,194,52,196,198,98,139,\n            128,220,28,209,41,2,78,8,138,103,204,116,2,11,190,166,59,19,155,34,81,74,8,\n            121,142,52,4,221,239,149,25,179,205,58,67,27,48,43,10,109,242,95,20,55,79,225,\n            53,109,109,81,194,69,228,133,181,118,98,94,126,198,244,76,66,233,166,55,237,\n            107,11,255,92,182,244,6,183,237,238,56,107,251,90,137,159,165,174,159,36,17,\n            124,75,31,230,73,40,102,81,236,228,91,61,194,0,124,184,161,99,191,5,152,218,\n            72,54,28,85,211,154,105,22,63,168,253,36,207,95,131,101,93,35,220,163,173,\n            150,28,98,243,86,32,133,82,187,158,213,41,7,112,150,150,109,103,12,53,78,74,\n            188,152,4,241,116,108,8,202,35,115,39,255,255,255,255,255,255,255,255\n        ]),\n        generator: new Uint8Array([2]),\n        public: publicKey, //a DH public key from generateKey or importKey\n    },\n    privateKey, //your DH private key from generateKey or importKey\n    256 //the number of bits you want to derive\n)\n.then(function(bits){\n    //returns the derived bits as an ArrayBuffer\n    console.log(new Uint8Array(bits));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## SHA\n#### SHA-1 - digest\n```javascript\nwindow.crypto.subtle.digest(\n    {\n        name: \"SHA-1\",\n    },\n    new Uint8Array([1,2,3,4]) //The data you want to hash as an ArrayBuffer\n)\n.then(function(hash){\n    //returns the hash as an ArrayBuffer\n    console.log(new Uint8Array(hash));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n#### SHA-256 - digest\n```javascript\nwindow.crypto.subtle.digest(\n    {\n        name: \"SHA-256\",\n    },\n    new Uint8Array([1,2,3,4]) //The data you want to hash as an ArrayBuffer\n)\n.then(function(hash){\n    //returns the hash as an ArrayBuffer\n    console.log(new Uint8Array(hash));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n#### SHA-384 - digest\n```javascript\nwindow.crypto.subtle.digest(\n    {\n        name: \"SHA-384\",\n    },\n    new Uint8Array([1,2,3,4]) //The data you want to hash as an ArrayBuffer\n)\n.then(function(hash){\n    //returns the hash as an ArrayBuffer\n    console.log(new Uint8Array(hash));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n#### SHA-512 - digest\n```javascript\nwindow.crypto.subtle.digest(\n    {\n        name: \"SHA-512\",\n    },\n    new Uint8Array([1,2,3,4]) //The data you want to hash as an ArrayBuffer\n)\n.then(function(hash){\n    //returns the hash as an ArrayBuffer\n    console.log(new Uint8Array(hash));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## CONCAT\n#### CONCAT - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"raw\", //only \"raw\" is allowed\n    keydata, //your raw key data as an ArrayBuffer\n    {\n        name: \"CONCAT\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"deriveKey\", \"deriveBits\"] //can be any combination of \"deriveKey\" and \"deriveBits\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### CONCAT - deriveKey\n```javascript\nwindow.crypto.subtle.deriveKey(\n    {\n        \"name\": \"CONCAT\",\n        algorithmId: ArrayBuffer, //?????? I don't know what this should be\n        partyUInfo: ArrayBuffer, //?????? I don't know what this should be\n        partyVInfo: ArrayBuffer, //?????? I don't know what this should be\n        publicInfo: ArrayBuffer, //?????? I don't know what this should be\n        privateInfo: ArrayBuffer, //?????? I don't know what this should be\n        hash: {name: \"SHA-1\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    key, //your key from importKey\n    { //the key type you want to create based on the derived bits\n        name: \"AES-CTR\", //can be any AES algorithm (\"AES-CTR\", \"AES-CBC\", \"AES-CMAC\", \"AES-GCM\", \"AES-CFB\", \"AES-KW\", \"ECDH\", \"DH\", or \"HMAC\")\n        //the generateKey parameters for that type of algorithm\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the derived key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //limited to the options in that algorithm's importKey\n)\n.then(function(key){\n    //returns the derived key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### CONCAT - deriveBits\n```javascript\nwindow.crypto.subtle.deriveBits(\n    {\n        \"name\": \"CONCAT\",\n        algorithmId: ArrayBuffer, //?????? I don't know what this should be\n        partyUInfo: ArrayBuffer, //?????? I don't know what this should be\n        partyVInfo: ArrayBuffer, //?????? I don't know what this should be\n        publicInfo: ArrayBuffer, //?????? I don't know what this should be\n        privateInfo: ArrayBuffer, //?????? I don't know what this should be\n        hash: {name: \"SHA-1\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    key, //your key importKey\n    256 //the number of bits you want to derive\n)\n.then(function(bits){\n    //returns the derived bits as an ArrayBuffer\n    console.log(new Uint8Array(bits));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## HKDF-CTR\n#### HKDF-CTR - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"raw\", //only \"raw\" is allowed\n    keydata, //your raw key data as an ArrayBuffer\n    {\n        name: \"HKDF-CTR\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"deriveKey\", \"deriveBits\"] //can be any combination of \"deriveKey\" and \"deriveBits\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### HKDF-CTR - deriveKey\n```javascript\nwindow.crypto.subtle.deriveKey(\n    {\n        \"name\": \"HKDF-CTR\",\n        label: ArrayBuffer, //?????? I don't know what this should be\n        context: ArrayBuffer, //?????? I don't know what this should be\n        hash: {name: \"SHA-1\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    key, //your key from importKey\n    { //the key type you want to create based on the derived bits\n        name: \"AES-CTR\", //can be any AES algorithm (\"AES-CTR\", \"AES-CBC\", \"AES-CMAC\", \"AES-GCM\", \"AES-CFB\", \"AES-KW\", \"ECDH\", \"DH\", or \"HMAC\")\n        //the generateKey parameters for that type of algorithm\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the derived key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //limited to the options in that algorithm's importKey\n)\n.then(function(key){\n    //returns the derived key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### HKDF-CTR - deriveBits\n```javascript\nwindow.crypto.subtle.deriveBits(\n    {\n        \"name\": \"HKDF-CTR\",\n        label: ArrayBuffer, //?????? I don't know what this should be\n        context: ArrayBuffer, //?????? I don't know what this should be\n        hash: {name: \"SHA-1\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    key, //your key importKey\n    256 //the number of bits you want to derive\n)\n.then(function(bits){\n    //returns the derived bits as an ArrayBuffer\n    console.log(new Uint8Array(bits));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n\n## PBKDF2\n#### PBKDF2 - generateKey\n```javascript\n//NOTE: This prompts the user to enter a password.\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"PBKDF2\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"deriveKey\", \"deriveBits\"] //can be any combination of \"deriveKey\" and \"deriveBits\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### PBKDF2 - importKey\n```javascript\nwindow.crypto.subtle.importKey(\n    \"raw\", //only \"raw\" is allowed\n    window.crypto.getRandomValues(new Uint8Array(16)), //your password\n    {\n        name: \"PBKDF2\",\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"deriveKey\", \"deriveBits\"] //can be any combination of \"deriveKey\" and \"deriveBits\"\n)\n.then(function(key){\n    //returns a key object\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### PBKDF2 - deriveKey\n```javascript\nwindow.crypto.subtle.deriveKey(\n    {\n        \"name\": \"PBKDF2\",\n        salt: window.crypto.getRandomValues(new Uint8Array(16)),\n        iterations: 1000,\n        hash: {name: \"SHA-1\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    key, //your key from generateKey or importKey\n    { //the key type you want to create based on the derived bits\n        name: \"AES-CTR\", //can be any AES algorithm (\"AES-CTR\", \"AES-CBC\", \"AES-CMAC\", \"AES-GCM\", \"AES-CFB\", \"AES-KW\", \"ECDH\", \"DH\", or \"HMAC\")\n        //the generateKey parameters for that type of algorithm\n        length: 256, //can be  128, 192, or 256\n    },\n    false, //whether the derived key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //limited to the options in that algorithm's importKey\n)\n.then(function(key){\n    //returns the derived key\n    console.log(key);\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n#### PBKDF2 - deriveBits\n```javascript\nwindow.crypto.subtle.deriveBits(\n    {\n        \"name\": \"PBKDF2\",\n        salt: window.crypto.getRandomValues(new Uint8Array(16)),\n        iterations: 1000,\n        hash: {name: \"SHA-1\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    key, //your key from generateKey or importKey\n    256 //the number of bits you want to derive\n)\n.then(function(bits){\n    //returns the derived bits as an ArrayBuffer\n    console.log(new Uint8Array(bits));\n})\n.catch(function(err){\n    console.error(err);\n});\n```\n"
 },
 {
  "repo": "rustpq/pqcrypto",
  "language": "Rust",
  "readme_contents": "# Bindings to quantum-safe cryptographic libraries\n\n[![dependency status](https://deps.rs/repo/github/rustpq/pqcrypto/status.svg)](https://deps.rs/repo/github/rustpq/pqcrypto)\n\nThis repository contains bindings to C implementations of cryptographic algorithms part of the [NIST competition][nist].\nThese bindings are generated based on the [PQClean][pqclean] project, which aims to collect 'clean' implementations of cryptographic algorithms.\n\n## How to generate the bindings\n\nThe `pqcrypto-templates` folder contains the master copies of the Rust files.\nThe binding libraries are generated from the PQClean meta files and PQClean specified API.\nThe file `implementations.yaml` controls the version numbers and included variants of each scheme.\nThe generation of the different pq-crates is done by the `generate-implementation.py` script.\n\n## Documentation\n\nSee the [documentation of the master project on docs.rs][docsrs].\n\n[nist]: https://nist.gov/pqcrypto\n[pqclean]: https://github.com/pqclean/pqclean/\n[docsrs]: https://docs.rs/pqcrypto/\n"
 },
 {
  "repo": "adampetcher/fcf",
  "language": "Coq",
  "readme_contents": "Foundational Cryptography Framework for machine-checked proofs of cryptography in the computational model.    \n\n# Dependencies\n\nCoq 8.13\n\n# Building\n\n`make` \n\n# Exploring \n\nThen open a simple example from the [`src/FCF/examples`](https://github.com/adampetcher/fcf/tree/master/src/FCF/examples) directory in Proof General.  A good place to start is [`ElGamal.v`](https://github.com/adampetcher/fcf/blob/master/src/FCF/examples/ElGamal.v).  Interactively step through this proof to learn how to develop a simple proof of non-adaptive security in the concrete setting.  PRF_Encryption_IND_CPA.v contains a more complex proof of adaptive security along with a proof in the asymptotic setting.  \n\n\nThe publications describing FCF are available at adam.petcher.net.   \n\n# Importing\n\n  env COQPATH=/path/to/fcf/src proofgeneral test.v\n  Require Import FCF.FCF.\n\n# History\n\nThis repository used to contain a proof of security of ESPADA SSE Scheme under\n`src/ESPADA`. This proof is no longer maintained; it is preserved in git\nhistory.\n\nSome files that no longer fully build are preserved under `src/FCF/Broken`.\nThere be dragons, though -- not all of them were ever finished, and some contain\nsignificant `admit`s.\n\n# Acknowledgements\n\nThis work is sponsored by the Department of the Air Force under Air Force Contract FA8721-05-C-0002. Opinions, interpretations, conclusions, and recommendations are those of the author and are not necessarily endorsed by the United States Government.\n\nThis work is sponsored by the Intelligence Advanced Research Projects Activity under Air Force Contract FA8721-05-C-0002. Opinions, interpretations, conclusions, and recommendations are those of the author and are not necessarily endorsed by the United States Government.\n"
 },
 {
  "repo": "dannyi96/Image-Cryptography",
  "language": "Python",
  "readme_contents": "# Image Cryptography Based on Rubix's Cube Principle\n\nImplementation of image encryption and decryption using Rubix's Cube Principle. This algorithm is based on the paper [\"A Secure Image Encryption Algorithm Based on Rubik's Cube Principle\"](https://www.hindawi.com/journals/jece/2012/173931/) by Khaled Loukhaoukha, Jean-Yves Chouinard and Abdellah Berdai.\n\n## Algorithm Overview\n\nGiven an input image having the three R,G,B matrices of size `M X N`\nHyperparameters include \n`\u03b1` - used for vector creation\n`ITER_MAX` - maximum number of times to carry out operations\n\n#### A. Encyption\n1. Create two vectors `Kr` and `Kc` with `|Kr|=M` & `|Kc|=N`. The values of these vectors are randomly picked from 0 to 2<sup>\u03b1 </sup>-1\n2. Repeat below steps `ITER_MAX` number of times\n\n    i. **Rolling Rows:** \n        \n      * The sum of all pixel values of every row of the image RGB matrices are calculated one by one. \n        \n      * If the sum of a given row `rowNumber` is even, Roll the row to the right `Kr[rowNumber]` times \n        Otherwise roll to the left `Kr[rowNumber]` times.\n\n    ii. **Rolling Columns:**\n    \n      * The sum of all pixel values of every column of the image RGB matrices are calculated one by one. \n        \n      * If the sum of a given row `columnNumber` is even, roll the column up `Kc[columnNumber]` times.\n        Otherwise roll the column down `Kc[columnNumber]` times.\n\n    iii. **XORing Pixels:**\n    \n      * For every pixel(i,j), XOR the pixel with the below two values\n        \n         - Value #1 - `Kc[columnNumber]` if `i` is odd else 180 rotated bit version of `Kc[columnNumber]`\n        \n         - Value #2 - `Kr[rowNumber]` if `j` is even else 180 rotated bit version of `Kr[rowNumber]`\n\n\n#### B. Decryption\n  Given an encrypted image, vectors `Kr` and `Kc` & `ITER_MAX` , decryption can be done by following the reverse procedure - XORing pixels \u2192 Rolling Columns \u2192 Rolling Rows `ITER_MAX` number of times\n\n## Prerequisites\n\n- Python3 ( https://www.python.org/downloads/ )\n\n- Python3 package dependencies - Run `pip3 install -r requirements.txt`\n\n## Running \n\n\n1. Using the crypto_client.py script supplying neccessary parameters\n```\n$ python3 crypto_client.py -h\nusage: crypto_client.py [-h] [--type TYPE] [--image IMAGE] \n      [--alpha ALPHA] [--iter_max ITER_MAX] \n      [--key KEY] [--output_image OUTPUT_IMAGE]\n```\n\n2. Using rubikencryptor python package\n```\nfrom rubikencryptor.rubikencryptor import RubikCubeCrypto\nfrom PIL import Image\n\n# Encrypt image\ninput_image = Image.open('image1.png')\nencryptor = RubikCubeCrypto(input_image)\nencrypted_image = encryptor.encrypt(alpha=8, iter_max=10, key_filename='key.txt')\nencrypted_image.save('encrypted_image.png')\n\n# Decrypt image\ndecryptor = RubikCubeCrypto(encrypted_image)\ndecrypted_image = decryptor.decrypt(key_filename='key.txt')\ndecrypted_image.save('decrypted_image.png')\n```\n\n## Example -\n\nOriginal Image\n\n![](https://github.com/dannyi96/Image-Cryptography/blob/master/example/original.png)\n\nRun Encryption on the Original Image\n```\n$ python3 crypto_client.py --type encrypt\n    --image example/original.png \n    --output_image example/encrypted.png \n    --key example/encoded_key.txt \n    --alpha 8 --iter_max 10\n```\n\nencrypted image is stored at `example/encrypted.png` & key is stored at `example/encoded_key.txt `\n\nEncrypted Image\n\n![](https://github.com/dannyi96/Image-Cryptography/blob/master/example/encrypted.png)\n\nRun Decryption on the Encryped Image using the Key\n\n```\n$ python3 crypto_client.py --type decrypt  \n    --image example/encrypted.png \n    --output_image example/decrypted.png \n    --key example/encoded_key.txt\n```\n\ndecrypted image is stored at `example/decrypted.png` \n\nDecrypted Image -\n\n![](https://github.com/dannyi96/Image-Cryptography/blob/master/example/decrypted.png)\n"
 },
 {
  "repo": "guidovranken/cryptofuzz",
  "language": "C++",
  "readme_contents": "# Cryptofuzz - Differential cryptography fuzzing\n\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/cryptofuzz.svg)](https://oss-fuzz.com/coverage-report/job/libfuzzer_asan_cryptofuzz/latest)\n\n## Documentation\n\nFor building Cryptofuzz, please refer to [`docs/building.md`](docs/building.md).\n\nFor instructions on how to run Cryptofuzz, please see [`docs/running.md`](docs/running.md).\n\n## Bugs found by Cryptofuzz\n\n- OpenSSL: [ARIA GCM ciphers memory leak after EVP_CTRL_AEAD_SET_IVLEN](https://github.com/openssl/openssl/issues/8567)\n- OpenSSL: [HMAC with SHAKE128 via EVP interface crashes on EVP_DigestSignUpdate](https://github.com/openssl/openssl/issues/8563)\n- OpenSSL: [BLAKE2b_Update can pass NULL to memcpy (undefined behavior)](https://github.com/openssl/openssl/issues/8576)\n- LibreSSL: [EVP_aes_128_cbc_hmac_sha1, EVP_aes_256_cbc_hmac_sha1 decrypt OOB read/crash/invalid result](https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/lib/libcrypto/evp/e_aes_cbc_hmac_sha1.c?rev=1.15&content-type=text/x-cvsweb-markup)\n- OpenSSL: [CHACHA20_POLY1305 different results for chunked/non-chunked updating](https://github.com/openssl/openssl/issues/8675)\n- OpenSSL: [OpenSSL 1.0.2: BIO_read + *_WRAP ciphers copy to uninitialized pointer](https://github.com/openssl/openssl/issues/8688)\n- BoringSSL: [AEAD AES GCM SIV NULL pointer dereference/OOB read](https://boringssl-review.googlesource.com/c/boringssl/+/35545)\n- LibreSSL: [BIO_read can report more bytes written than buffer can hold](https://cvsweb.openbsd.org/src/lib/libcrypto/bio/bio_lib.c?rev=1.29&content-type=text/x-cvsweb-markup)\n- LibreSSL: [Use-after-free/bad free after EVP_CIPHER_CTX_copy](https://cvsweb.openbsd.org/src/lib/libcrypto/evp/evp_enc.c?rev=1.41&content-type=text/x-cvsweb-markup)\n- BoringSSL: [Use-after-free/bad free after EVP_CIPHER_CTX_copy](https://boringssl.googlesource.com/boringssl/+/65dc45cb57c7c6900a0657f6ee5c00fce9d366f5)\n- LibreSSL: [GOST HMAC uses and outputs uninitialized memory](https://cvsweb.openbsd.org/src/lib/libcrypto/evp/digest.c?rev=1.31&content-type=text/x-cvsweb-markup)\n- OpenSSL: [Overlong tag buffer leaves memory uninitialized in CCM mode](https://github.com/openssl/openssl/pull/8810)\n- OpenSSL: [Buffer write overflow when passing large RC5 key](https://github.com/openssl/openssl/pull/8834)\n- OpenSSL: [Hang after particular sequence of operations](https://github.com/openssl/openssl/issues/8827)\n- LibreSSL: [Overlong tag buffer leaves memory uninitialized in CCM mode](https://cvsweb.openbsd.org/src/lib/libcrypto/modes/ccm128.c?rev=1.5&content-type=text/x-cvsweb-markup)\n- LibreSSL: [AES GCM context copy crash](https://cvsweb.openbsd.org/src/lib/libcrypto/evp/e_aes.c?rev=1.38&content-type=text/x-cvsweb-markup)\n- LibreSSL: [Streebog wrong output](https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/lib/libcrypto/gost/streebog.c?rev=1.6&content-type=text/x-cvsweb-markup)\n- OpenSSL: [EVP_EncryptUpdate, EVP_EncryptFinal_ex branching on uninitialized memory](https://github.com/openssl/openssl/pull/8874)\n- libgcrypt: [Invalid output of MD4, MD5, RIPEMD160](https://lists.gnupg.org/pipermail/gcrypt-devel/2019-May/004712.html)\n- OpenSSL: RC5 signed integer overflow, TBA\n- LibreSSL: [AES CCM context copy crash](https://cvsweb.openbsd.org/src/lib/libcrypto/evp/e_aes.c?rev=1.39&content-type=text/x-cvsweb-markup)\n- LibreSSL: [DES EDE3 CFB1 leaves output uninitialized](https://cvsweb.openbsd.org/src/lib/libcrypto/evp/e_des3.c?rev=1.20&content-type=text/x-cvsweb-markup)\n- Crypto++: [Scrypt crash with blocksize 0](https://github.com/weidai11/cryptopp/commit/e0b60439bf63b02ed93bc2c5b4ed15125fd6f278)\n- EverCrypt: Illegal instruction exception on non-AVX CPUs\n- OpenSSL: [OpenSSL 1.0.2: RC4 OOB read](https://github.com/openssl/openssl/issues/8972)\n- OpenSSL: [OpenSSL 1.0.2: Branch on uninitialized memory in EVP_CIPHER_CTX_copy](https://github.com/openssl/openssl/issues/8980)\n- Crypto++: [PBKDF1 OOB read](https://github.com/weidai11/cryptopp/issues/874)\n- NSS: [MD2 invalid output](https://bugzilla.mozilla.org/show_bug.cgi?id=1575923)\n- Botan: [CAST5_CBC invalid output](https://github.com/randombit/botan/issues/2081)\n- Botan: [Streebog invalid output](https://github.com/randombit/botan/issues/2082)\n- Botan: [PBKDF2 hang (very long loop) if iterations == 0](https://github.com/randombit/botan/issues/2088)\n- NSS: [HKDF SHA1 stack buffer overflow, CVE-2019-11759](https://hg.mozilla.org/projects/nss/rev/c0913ad7a5609751a8dfc37ae2e0a7a0cd6a42dd)\n- NSS: [RC2 CBC OOB read with undersized IV](https://hg.mozilla.org/projects/nss/rev/53d92a32408049038f450aa747b0030607988230)\n- NSS: [SEED_CBC encryption out-of-bounds write](https://hg.mozilla.org/projects/nss/rev/7580a5a212c78ab21fc4878330dd7872c3b530b8)\n- NSS: [CKM_AES_GCM succeeds with invalid tag sizes, risk of memory corruption](https://hg.mozilla.org/projects/nss/rev/4e3971fd992c0513d0696048c64b7230e5b6039b)\n- NSS: [PBKDF2 memory leak if key size > 256](https://bugzilla.mozilla.org/show_bug.cgi?id=1591363)\n- NSS: [DES IV buffer overread if IV is undersized](https://hg.mozilla.org/projects/nss/rev/35857ae98190c590ae00a01cb1a2ed48def3915f)\n- wolfCrypt: [RC4 may dereference empty key](https://github.com/wolfSSL/wolfssl/pull/2578)\n- wolfCrypt: [SCRYPT leaves output buffer uninitialized](https://github.com/wolfSSL/wolfssl/pull/2578)\n- wolfCrypt: wc_HKDF + BLAKE2B leaves output buffer uninitialized\n- wolfCrypt: [PKCS12 PBKDF + SHA3 buffer overflow](https://github.com/wolfSSL/wolfssl/pull/2677)\n- NSS: mp_toradix buffer overflow (write) TBA\n- BLAKE3: [memcpy undefined behavior in C impl](https://github.com/BLAKE3-team/BLAKE3/pull/4)\n- sjcl: [scrypt wrong result with certain parameters](https://github.com/bitwiseshiftleft/sjcl/issues/409)\n- sjcl: [RIPEMD160 HMAC wrong result](https://github.com/bitwiseshiftleft/sjcl/issues/410)\n- sjcl: [bignum subtraction incorrect result](https://github.com/bitwiseshiftleft/sjcl/issues/411)\n- NSS: [SEEK ECB leaves output buffer uninitialized when encrypting more than 1 block](https://hg.mozilla.org/projects/nss/rev/d67517e92371ba798751720f7d21968ab2e25c52)\n- libgcrypt: [gcry_mpi_invm indicates multiplicative inverse exists when it does not](https://lists.gnupg.org/pipermail/gcrypt-devel/2020-April/004947.html)\n- wolfCrypt: [AES GCM allows IV of size 0](https://github.com/wolfSSL/wolfssl/pull/2910)\n- wolfCrypt: [AES CCM allows invalid tag sizes](https://github.com/wolfSSL/wolfssl/pull/2930)\n- LibreSSL: [AES GCM allows IV of size 0](https://github.com/openbsd/src/commit/539125b0baa78c5c019ab9e3bbeca4fa822d1bf7)\n- OpenSSL: [CAST5 invalid output](https://github.com/openssl/openssl/issues/11459)\n- Crypto++: [SPECK64 different output if input is passed in chunks](https://github.com/weidai11/cryptopp/issues/945)\n- Crypto++: [Undersized SipHash key leads to buffer out-of-bounds read](https://github.com/weidai11/cryptopp/issues/947)\n- libkcapi: [PBKDF2 with iteration count = 0 zeroes output buffer](https://github.com/smuellerDD/libkcapi/issues/93)\n- wolfCrypt: [HKDF allows key sizes > 255 * digest size TBA](https://github.com/wolfSSL/wolfssl/pull/2956)\n- Botan: [HKDF clamps output to 255 * requested key size](https://github.com/randombit/botan/issues/2347)\n- SymCrypt: [Signed overshift and other undefined behavior](https://github.com/microsoft/SymCrypt/issues/8)\n- NSS: [ChaCha20, ChaCha20/Poly1305 OOB read, OOB write, incorrect output with multi-part updating or small AEAD tag, CVE-2020-12403](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.55_release_notes)\n- OpenSSL: [AES key wrap ciphers out-of-bounds write](https://github.com/openssl/openssl/issues/12014)\n- LibreSSL: [AES key wrap ciphers use-after-free](https://github.com/openbsd/src/commit/f72711c6fb8692f12b01b3a3b7f54687729f6f9b)\n- OpenSSL: [AES key wrap ciphers use-after-free](https://github.com/openssl/openssl/issues/12073)\n- Crypto++: [AES GCM encryption with large tag size results in incorrect output, out-of-bounds reads](https://github.com/weidai11/cryptopp/issues/954)\n- mbed TLS: [mbedtls_md_setup memory leak if allocation fails](https://github.com/ARMmbed/mbedtls/issues/3486)\n- OpenSSL: [EVP_CIPHER_CTX re-initialisation bugs](https://github.com/openssl/openssl/pull/12523)\n- OpenSSL: [KBKDF NULL ptr dereference](https://github.com/openssl/openssl/issues/12409)\n- Botan: [PointGFp_Multi_Point_Precompute gives wrong result when an infinity point occurs in the precomputation](https://github.com/randombit/botan/issues/2424) (credit to @andrewkozlik)\n- Botan: [ECDSA hash truncation discrepancy](https://github.com/randombit/botan/issues/2415)\n- mbed TLS: [mbedtls_cipher_auth_encrypt with AES key wrap OOB write](https://github.com/ARMmbed/mbedtls/issues/3665)\n- bignumber.js: [squareRoot() produces incorrect result](https://github.com/MikeMcl/bignumber.js/issues/276)\n- elliptic: [Curves p384 and p521 produce incorrect results](https://github.com/indutny/elliptic/issues/239)\n- Nettle: [Blowfish signed integer overshift](https://git.lysator.liu.se/nettle/nettle/-/commit/4c8b0cdd97ffec3ae3f8d995afdfccbc261b3c79)\n- Golang: [crypto/ecdsa: signature verification succeeds when it should fail](https://github.com/golang/go/issues/42340)\n- SymCrypt: [Elliptic curve private-to-public incorrect result on Linux 32 bit](https://github.com/microsoft/SymCrypt/issues/9)\n- libtomcrypt: [PKBDF1 hang if iterations is 0](https://github.com/libtom/libtomcrypt/issues/552)\n- libtomcrypt: [TEA cipher incorrect result](https://github.com/libtom/libtomcrypt/issues/553)\n- SymCrypt: [NULL pointer access in struct offset resolution](https://github.com/microsoft/SymCrypt/issues/10)\n- BearSSL: Carry propagation bug in ECC code. Commit: b2ec2030e40acf5e9e4cd0f2669aacb27eadb540\n- Trezor firmware: [ECDSA verification fails if hash is curve order](https://github.com/trezor/trezor-firmware/pull/1374)\n- Botan: [ECDSA verification succeeds with invalid public key](https://github.com/randombit/botan/commit/92cd9ad72184bacacb7682c1b65ff040ab2347ee)\n- Botan: [KDF + BLAKE incorrect result](https://github.com/randombit/botan/issues/2525)\n- Crypto++: [ECDSA verification succeeds with invalid signature](https://github.com/weidai11/cryptopp/issues/981)\n- micro-ecc: [ECDSA verification fails when it should succeed](https://github.com/kmackay/micro-ecc/issues/179#issuecomment-734515934)\n- Parity libsecp256k1: [RFC6979 signature discrepancy if input is curve order](https://github.com/paritytech/libsecp256k1/issues/62)\n- LibreSSL: [ECDSA verification succeeds with invalid public key](https://github.com/openbsd/src/commit/ea076652f78324977b6dc08890965b6823672c02)\n- SymCrypt: [Uninitialized memory used as array index in ECDSA verification if hash is 0](https://github.com/microsoft/SymCrypt/commit/13fa454049fa265fa9e929a3a508907d259024a6)\n- TBA: TBA\n- NSS/ecckiila: [ECDSA verification fails for all-zero hash](https://gitlab.com/nisec/ecckiila/-/commit/ec77867e336827705e67bb9b10538a7980b850fa)\n- mbed TLS: [mbedtls_mpi_sub_abs memory corruption](https://github.com/ARMmbed/mbedtls/issues/4042)\n- relic: [Out-of-bounds read via bn_sqr_basic](https://github.com/relic-toolkit/relic/issues/172)\n- relic: [Wrong square root computation](https://github.com/relic-toolkit/relic/issues/173)\n- relic: [ECDSA verification discrepancies](https://github.com/relic-toolkit/relic/issues/175)\n- relic: [bn_write_str buffer overflow](https://github.com/relic-toolkit/relic/issues/176)\n- Nettle: [ECDSA verification fails for all-zero hash](https://github.com/gnutls/nettle/commit/b3d0bcf5a185842d2c717927eef03577fd61a912)\n- relic: [Buffer overflow via bn_mxp_slide](https://github.com/relic-toolkit/relic/commit/bba5b5fa5489706ab4eaf5d7d0c2550e0a9722c0)\n- relic: [bn_mxp_monty incorrect result](https://github.com/relic-toolkit/relic/commit/d411fabf2358553937fffb3242a57ee711746859)\n- relic: Several other memory and correctness bugs\n- libgcrypt: [ECDSA verification succeeds with invalid public key](https://lists.gnupg.org/pipermail/gcrypt-devel/2021-January/005091.html)\n- libgcrypt: [Out-of-bounds read in SHA256](https://lists.gnupg.org/pipermail/gcrypt-devel/2021-February/005105.html)\n- SymCrypt: [Invalid ECDSA signature and public key for private key that is curve order](https://github.com/microsoft/SymCrypt/issues/12)\n- SymCrypt: [ECDSA signing branches on uninitialized memory](https://github.com/microsoft/SymCrypt/issues/13)\n- blst: [Modular inverse incorrect result](https://github.com/supranational/blst/security/advisories/GHSA-x279-68rr-jp4p)\n- blst: [Inverse modulo hangs on i386 if input is 0 or multiple of modulo](https://github.com/supranational/blst/commit/dd980e7f81397895705c49fcb4f52e485bb45e21)\n- blst  [Using non-standard 'dst' parameter branches on uninitialized memory](https://github.com/supranational/blst/commit/2bfee87adcf45c9d544bbc9486a8b6060044d93c)\n- Botan: [Incorrect comparison of negative values](https://github.com/randombit/botan/issues/2638)\n- blst: [NULL pointer dereference if msg is empty and aug is non-empty](https://github.com/supranational/blst/commit/02d63dac1459d6f9bee5043159c9c0908c1229ac)\n- Nettle: [Crash, potential incorrect verification in ECDSA verification](https://lists.lysator.liu.se/pipermail/nettle-bugs/2021/009457.html)\n- relic: [Modular exponentiation returns 1 if exponent is 0 and modulo is 1](https://github.com/relic-toolkit/relic/issues/185)\n- Chia bls-signatures: TBA\n- relic: [BLAKE2S160, BLAKE2S256 functions leave output buffer uninitialized if input is empty](https://github.com/relic-toolkit/relic/commit/1885ae3b681c423c72b65ce1fe70910142cf941c)\n- Botan: [BigInt right-shifting can cause std::vector to throw std::length_error](https://github.com/randombit/botan/issues/2672)\n- mbed TLS: [ECDSA signing of 0 produces unverifiable signature](https://github.com/ARMmbed/mbedtls/issues/4261)\n- mbed TLS: [PKCS12 KDF + MD2 incorrect result](https://github.com/ARMmbed/mbedtls/issues/4267)\n- libgcrypt [CMAC + SERPENT/IDEA/RC2 buffer overflow/crash with oversized key](https://lists.gnupg.org/pipermail/gcrypt-devel/2021-March/005130.html)\n- Parity libsecp256k1: [Verifies signatures whose R,S > curve order](https://github.com/paritytech/libsecp256k1/commit/b525d5d318d9672a40250c1725fa1bb3156688b7)\n- Botan: [ECDSA pubkey recovery succeeds with invalid parameters](https://github.com/randombit/botan/issues/2698)\n- mbed TLS: [CHACHA20-POLY1305 succeeds with invalid IV size](https://github.com/ARMmbed/mbedtls/issues/4301)\n- SymCrypt: [ECDSA signing produces invalid signature](https://github.com/microsoft/SymCrypt/issues/15)\n- BLAKE reference implementation: [Updating with empty buffer resets internal counter](https://github.com/trezor/trezor-firmware/commit/b2cc3bcb369b163e31b3f34608878be7f9410a64)\n- Herumi mcl: [Incorrect results with dst larger than 255 bytes](https://github.com/herumi/mcl/commit/b01ef452a5a4acae584c0b27956cbf55b5275607)\n- LibreSSL: [EC_POINT_point2oct / EC_POINT_oct2point asymmetry](https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/lib/libcrypto/ec/ec2_oct.c?rev=1.13&content-type=text/x-cvsweb-markup)\n- noble-secp256k1: Several ECDSA verification bugs: [1](https://github.com/paulmillr/noble-secp256k1/commit/13da0de79bf3b04f892f8d73bd4b5657a7329828) [2](https://github.com/paulmillr/noble-secp256k1/commit/9082b405a3d1958b5b6a699bb408215ae30eea5b) [3](https://github.com/paulmillr/noble-secp256k1/commit/c514f79ebdab1042dac214446f1ca32214a5edfd)\n- blst: [NULL pointer dereference if point multiplier is zero-stripped](https://github.com/supranational/blst/commit/9a9d57d5a11b52b46d358ffbb995013cd1ac1faa)\n- libecc: [Use of uninitialized memory in ECGDSA signing](https://github.com/ANSSI-FR/libecc/commit/57016705636b66f146bd437172dc1950fd71aec4)\n- noble-ed25519: [Accepts overlong private keys](https://github.com/paulmillr/noble-ed25519/commit/c726f5202fd82062d645e1cd0ebbfdbd3e81a0fc)\n- relic: [Elliptic curve point multiplication incorrect result if input X = 0](https://github.com/relic-toolkit/relic/issues/206)\n- relic: [Incorrect point validation](https://github.com/relic-toolkit/relic/commit/7ed8e702db74d5d5a83b0bfaf9ee8e33a70e36ed)\n- Chia/relic: Allows loading invalid point [1](https://github.com/Chia-Network/bls-signatures/issues/247) [2](https://github.com/Chia-Network/bls-signatures/issues/251)\n- blst: [Branching on uninitialize memory](https://github.com/supranational/blst/commit/eb6151961c133a930420e844e1a84708fbb4f6a4)\n- num-bigint: [Panic on multiplication](https://github.com/rust-num/num-bigint/security/advisories/GHSA-v935-pqmr-g8v9)\n- Botan: [Produces invalid ECDSA signatures](https://github.com/randombit/botan/issues/2841)\n- libgcrypt: [gcry_mpi_sub_ui result is positive when it should be negative](https://lists.gnupg.org/pipermail/gcrypt-devel/2021-November/005191.html)\n- Decred uint256: [Incorrect decimal string formatting](https://github.com/decred/dcrd/pull/2844)\n- Botan: [Undefined behavior upon instantiating DL_Group](https://github.com/randombit/botan/issues/2861)\n- libtommath: [mp_is_square says 0 is not a square](https://github.com/libtom/libtommath/issues/521)\n- OpenSSL: [HMAC use-after-free after copying ctx](https://github.com/openssl/openssl/issues/17261)\n- Golang: [CVE-2022-23806: crypto/elliptic: IsOnCurve returns true for invalid field elements](https://github.com/golang/go/issues/50974)\n- mbed TLS: [mbedtls_ecp_muladd hangs with oversized point coordinates](https://github.com/ARMmbed/mbedtls/issues/5376)\n- BoringSSL: [EVP_AEAD_CTX_free NULL pointer dereference if pointer is NULL](https://bugs.chromium.org/p/boringssl/issues/detail?id=473)\n- blst: [blst_fr_eucl_inverse incorrect result](https://github.com/supranational/blst/commit/fd453524b12cc438adc65636fc52375b0f47b17e)\n- circl: [Inadequate scalar reduction in p384 leads to panic](https://github.com/cloudflare/circl/issues/312)\n- Herumi mcl: [map-to-curve incorrect result if both inputs are equivalent](https://github.com/herumi/mcl/commit/0ddbe946423acd5cee2552b09373f4e1e9ba4023)\n- OpenSSL: [BN_mod_exp2_mont NULL pointer dereference if modulus is 0](https://github.com/openssl/openssl/issues/17648)\n- relic: [bn_mod_pmers hangs if modulus is 0](https://github.com/relic-toolkit/relic/issues/221)\n- relic: [bn_mod_barrt out-of-bounds write and hang](https://github.com/relic-toolkit/relic/issues/222)\n- relic: [bn_gcd_ext_stein returns different Bezout coefficients](https://github.com/relic-toolkit/relic/issues/223)\n- Zig: [std.math.big.int panics (divFloor, gcd, bitAnd)](https://github.com/ziglang/zig/issues/10932)\n- NSS: [mp_xgcd produces incorrect Bezout coefficients](https://bugzilla.mozilla.org/show_bug.cgi?id=1761708)\n- Nettle: TBA\n- libgcrypt: [Argon2 incorrect result and division by zero](https://lists.gnupg.org/pipermail/gcrypt-devel/2022-March/005290.html)\n- Herumi mcl: [Incorrect result for G1 multiplication by Fp](https://github.com/herumi/mcl/issues/141)\n- libgcrypt: [gcry_mpi_invm incorrect result](https://lists.gnupg.org/pipermail/gcrypt-devel/2022-April/005303.html)\n- OpenSSL, LibreSSL: [Incorrect NIST curve math](https://cvsweb.openbsd.org/src/lib/libcrypto/bn/bn_nist.c?rev=1.20&content-type=text/x-cvsweb-markup)\n- relic: [bn_lcm incorrect result with negative zero input](https://github.com/relic-toolkit/relic/issues/235)\n- relic: [bn_gcd_lehme hangs with negative input](https://github.com/relic-toolkit/relic/issues/236)\n- relic: [Modulo functions hang with negative inputs](https://github.com/relic-toolkit/relic/issues/237)\n- blst: [blst_fp_is_square incorrect result on ARM](https://github.com/supranational/blst/commit/69d380745b64c8e72128263434762770a9162622)\n- OpenSSL, BoringSSL: [BN_mod_exp_mont_consttime returns modulus when it should return 0](https://boringssl-review.googlesource.com/c/boringssl/+/52825)\n- libgcrypt: [Allows invalid HKDF output sizes](https://lists.gnupg.org/pipermail/gcrypt-devel/2022-June/005328.html)\n"
 },
 {
  "repo": "wavesplatform/Waves",
  "language": "Scala",
  "readme_contents": "<h1 align=\"center\">\ud83d\udd37 Waves Node</h1>\n\n<p align=\"center\">\n  <a href=\"https://github.com/wavesplatform/Waves/actions\" target=\"_blank\">\n    <img alt=\"Checks status\" src=\"https://badgen.net/github/checks/wavesplatform/waves?cache=600\"  />\n  </a>\n  <a href=\"https://github.com/wavesplatform/Waves/releases\" target=\"_blank\">\n    <img alt=\"Downloads\" src=\"https://badgen.net/github/assets-dl/wavesplatform/waves?color=blue\" />\n  </a>\n  <a href=\"https://hub.docker.com/r/wavesplatform/wavesnode\" target=\"_blank\">\n    <img alt=\"Docker pulls\" src=\"https://badgen.net/docker/pulls/wavesplatform/wavesnode?icon=docker\" />\n  </a>\n\n  <br/>\n\n  <a href=\"https://twitter.com/wavesprotocol\" target=\"_blank\">\n    <img alt=\"Twitter: Waves Tech\" src=\"https://badgen.net/twitter/follow/wavesprotocol?icon=twitter&label=follow%20on%20Twitter\" />\n  </a>\n  <a href=\"https://medium.com/wavesprotocol\" target=\"_blank\">\n    <img alt=\"Medium: Waves Tech\" src=\"https://badgen.net/runkit/msmolyakov/get-medium-followers?icon=medium&cache=86400\" />\n  </a>\n  <a href=\"https://t.me/waves_ride_dapps_dev\" target=\"_blank\">\n    <img alt=\"Telegram\" src=\"https://badgen.net/badge/icon/Waves%20Dev%20Jedi?icon=telegram&label=Telegram\"/>\n  </a>\n  <a href=\"https://github.com/msmolyakov/awesome-waves\" target=\"_blank\">\n    <img alt=\"Awesome Waves\" src=\"https://badgen.net/badge/icon/Awesome%20Waves?icon=awesome&label&color=pink\" />\n  </a>\n</p>\n\n> Waves is an open source [blockchain protocol](https://waves.tech/waves-protocol). <br/> \nYou can use it to build your own decentralized applications. Waves provides full blockchain ecosystem including smart contracts language called RIDE.\n\n\n## \u2728 Demo\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/1945126/78667964-88209480-78e2-11ea-9304-72178a6a5974.gif\" alt=\"Waves Node Run Demo\">\n</p>\n\nWaves node is a host connected to the blockchain network with the following functions:\n\n- Processing and validation of [transactions](https://docs.waves.tech/en/blockchain/transaction/transaction-validation)\n- Generation and storage of [blocks](https://docs.waves.tech/en/blockchain/block/)\n- Network communication with [other nodes](https://docs.waves.tech/en/blockchain/blockchain/#node)\n- [REST API](https://docs.waves.tech/en/waves-node/node-api/)\n- [Extensions](https://docs.waves.tech/en/waves-node/extensions/) management\n\nLearn more about Waves Node in the [documentation](https://docs.waves.tech/en/waves-node/).\n\n## \ud83d\ude80\ufe0f Getting started\n\nA quick introduction of the minimal setup you need to get a running node. \n\n*Prerequisites:*\n- configuration file for a needed network from [here](https://github.com/wavesplatform/Waves/tree/HEAD/node)\n- `waves-all*.jar` file from [releases](https://github.com/wavesplatform/Waves/releases) \n\nLinux systems:\n```bash\nsudo apt-get update\nsudo apt-get install openjdk-8-jre\njava -jar node/target/waves-all*.jar path/to/config/waves-{network}.conf\n```\n\nMac systems (assuming already installed homebrew):\n```bash\nbrew cask install adoptopenjdk/openjdk/adoptopenjdk8\njava -jar node/target/waves-all*.jar path/to/config/waves-{network}.conf\n```\n\nWindows systems (assuming already installed OpenJDK 8):\n```bash\njava -jar node/target/waves-all*.jar path/to/config/waves-{network}.conf\n```\n\nUsing docker, follow the [official image documentation](https://hub.docker.com/r/wavesplatform/wavesnode).\n\n> More details on how to install a node for different platforms you can [find in the documentation](https://docs.waves.tech/en/waves-node/how-to-install-a-node/how-to-install-a-node). \n\n## \ud83d\udd27 Configuration\n\nThe best starting point to understand available configuration parameters is [this article](https://docs.waves.tech/en/waves-node/node-configuration).\n\nThe easiest way to start playing around with configurations is to use default configuration files for different networks; they're available in [network-defaults.conf](./node/src/main/resources/network-defaults.conf).\n\nLogging configuration with all available levels and parameters is described [here](https://docs.waves.tech/en/waves-node/logging-configuration).\n\n## \ud83d\udc68\u200d\ud83d\udcbb Development\n\nThe node can be built and installed wherever Java can run. \nTo build and test this project, you will have to follow these steps:\n\n<details><summary><b>Show instructions</b></summary>\n\n*1. Setup the environment.*\n- Install Java for your platform:\n\n```bash\nsudo apt-get update\nsudo apt-get install openjdk-8-jre                     # Ubuntu\n# or\n# brew cask install adoptopenjdk/openjdk/adoptopenjdk8 # Mac\n```\n\n- Install SBT (Scala Build Tool)\n\nPlease follow the SBT installation instructions depending on your platform ([Linux](https://www.scala-sbt.org/1.0/docs/Installing-sbt-on-Linux.html), [Mac](https://www.scala-sbt.org/1.0/docs/Installing-sbt-on-Mac.html), [Windows](https://www.scala-sbt.org/1.0/docs/Installing-sbt-on-Windows.html))\n\n*2. Clone this repo*\n\n```bash\ngit clone https://github.com/wavesplatform/Waves.git\ncd Waves\n```\n\n*3. Compile and run tests*\n\n```bash\nsbt checkPR\n```\n\n*4. Run integration tests (optional)*\n\nCreate a Docker image before you run any test: \n```bash\nsbt node-it/docker\n```\n\n- Run all tests. You can increase or decrease number of parallel running tests by changing `waves.it.max-parallel-suites`\nsystem property:\n```bash\nsbt -Dwaves.it.max-parallel-suites=1 node-it/test\n```\n\n- Run one test:\n```bash\nsbt node-it/testOnly *.TestClassName\n# or \n# bash node-it/testOnly full.package.TestClassName\n```\n\n*5. Build packages* \n\n```bash\nsbt packageAll                   # Mainnet\nsbt -Dnetwork=testnet packageAll # Testnet\n```\n\n`sbt packageAll` \u200cproduces only `deb` package along with a fat `jar`. \n\n*6. Install DEB package*\n\n`deb` package is located in target folder. You can replace '*' with actual package name:\n\n```bash\nsudo dpkg -i node/target/*.deb\n```\n\n\n*7. Run an extension project locally during development (optional)*\n\n```bash\nsbt \"extension-module/run /path/to/configuration\"\n```\n\n*8. Configure IntelliJ IDEA (optional)*\n\nThe majority of contributors to this project use IntelliJ IDEA for development, if you want to use it as well please follow these steps:\n\n1. Click `Add configuration` (or `Edit configurations...`).\n2. Click `+` to add a new configuration, choose `Application`.\n3. Specify:\n   - Main class: `com.wavesplatform.Application`\n   - Program arguments: `/path/to/configuration`\n   - Use classpath of module: `extension-module`\n4. Click `OK`.\n5. Run this configuration.\n\n</details>\n\n## \ud83e\udd1d Contributing\n\nIf you'd like to contribute, please fork the repository and use a feature branch. Pull requests are warmly welcome.\n\nFor major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate.\n\nPlease follow the [code of conduct](./CODE_OF_CONDUCT.md) during communication with the each other. \n\n## \u2139\ufe0f Support (get help)\n\nKeep up with the latest news and articles, and find out all about events happening on the [Waves Protocol](https://waves.tech/).\n\n- [Telegram Dev Chat](https://t.me/waves_ride_dapps_dev)\n- [Waves Blog](https://medium.com/wavesprotocol)\n\n## \u26d3 Links\n\n- [Documentation](https://docs.waves.tech/)\n- Blockchain clients for Mainnet: [Waves Exchange](https://waves.exchange/), [Waves FX](https://github.com/wavesfx), [SIGN app](https://www.sign-web.app/)\n- Blockchain clients for Testnet: [Waves Exchange](https://testnet.waves.exchange/)\n- Blockchain Explorer: [Mainnet](https://wavesexplorer.com/), [Testnet](https://testnet.wavesexplorer.com/), [Stagenet](https://stagenet.wavesexplorer.com/) \n- [Ride Online IDE](https://waves-ide.com/)\n\n## \ud83d\udcdd Licence\n\nThe code in this project is licensed under [MIT license](./LICENSE)\n\n## \ud83d\udc4f Acknowledgements\n\n[<img src=\"https://camo.githubusercontent.com/97fa03cac759a772255b93c64ab1c9f76a103681/68747470733a2f2f7777772e796f75726b69742e636f6d2f696d616765732f796b6c6f676f2e706e67\">](https://www.yourkit.com/)\n\nWe use YourKit full-featured Java Profiler to make Waves node faster. YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications.\n\nTake a look at YourKit's leading software products: YourKit Java Profiler and YourKit .NET Profiler.\n"
 },
 {
  "repo": "kmaragon/Konscious.Security.Cryptography",
  "language": "C#",
  "readme_contents": ".NET Core Crypto Extensions [![build status](https://ci.appveyor.com/api/projects/status/rqgutdor95f2exav/branch/master?svg=true&branch=master \"Appveyor Build Status\")](https://ci.appveyor.com/project/kmaragon/konscious-security-cryptography/branch/master)\n===============\n\n# Konscious.Security.Cryptography.Blake2\n\n[NuGet package](https://www.nuget.org/packages/Konscious.Security.Cryptography.Blake2/)\n\nAn implementation of Blake2 per RFC 7693 in C# and available for .NET core\n\nhttps://blake2.net/\n\nUsage follows standard types found in System.Security.Cryptography in corefx. Specifically HMAC algorithms.\n\n## Usage\n\nYou can use Blake2B interchangeably with any code that uses [`System.Security.Cryptography.HashAlgorithm`](https://docs.microsoft.com/en-us/dotnet/core/api/system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm) Or [`System.Security.Cryptography.HMAC`](https://docs.microsoft.com/en-us/dotnet/core/api/system.security.cryptography.hmac#System_Security_Cryptography_HMAC) And usage is generally consistent with both.\n\nIn the project.json:\n```JSON\n\"dependencies\":\n{\n  \"Konscious.Security.Cryptography.Blake2\": \"1.0.*\"\n}\n```\nCreate an instance of the algorithm:\n\n```C#\nusing Konscious.Security.Cryptography;\n```\n```C#\nvar hashAlgorithm = new Blake2B(512);\n```\nThis will give you a default implementation with no salt that generates a 512 bit key\n```\nbyte[] key = ...\nvar hashAlgorithm = new Blake2B(key, 512);\n```\nThis will specify some salt to use for the 512 bit hash. Hash size can be any 8 bit aligned value between 8 and 512. The key can be any size between 0 and 64 bytes.\n\nThe algorithm needs to be initialized before use:\n```C#\nhashAlgorithm.Initialize();\n```\nThen it can be used with any of the standard HashAlgorithm overloads\n```C#\nStream p = ...\nhashAlgorithm.Hash(p);\n```\n```C#\nbyte[] a = ...\nhashAlgorithm.Hash(a);\n```\nAnd as consistent with any other HMAC implementation:\n```C#\nhashAlgorithm.Key = otherByteArray;\n```\n\n# Konscious.Security.Cryptography.Argon2\n\n[NuGet package](https://www.nuget.org/packages/Konscious.Security.Cryptography.Argon2/)\n\nAn implementation of Argon2 winner of PHC\n\nhttps://password-hashing.net/#argon2\n\nUsage follows standard types found in System.Security.Cryptography in corefx. Specifically DeriveBytes.\n\n## Usage\n\nThere is both an Argon2i and Argon2d implementation included in this library. Argon2d is less intensive but subject to timing attacks. That is, if an attacker is appropriately positioned, they can observe the nanosecond differences in processing keys to perform a non-naive brute force attack to reverse the key. Argon2i is non-deterministic so there is no way for an attacker to deduce qualities of the password even if they can observe individual clock cycles and is thus more secure where timing attacks are possible.\n\nBoth are standard implementations of the [`System.Security.Cryptography.DeriveBytes`](https://docs.microsoft.com/en-us/dotnet/core/api/system.security.cryptography.derivebytes#System_Security_Cryptography_DeriveBytes) type from corefx. This is commonly used for less secure password hashing via [`System.Security.Cryptography.Rfc2898DeriveBytes`](https://docs.microsoft.com/en-us/dotnet/core/api/system.security.cryptography.rfc2898derivebytes#System_Security_Cryptography_Rfc2898DeriveBytes) which implements the standard PBKDF2 scheme. Argon2 provides a more secure alternative for password hashing.\n\nProject.json:\n```JSON\n  \"dependencies\":\n  {\n      \"Konscious.Security.Cryptography.Argon2\": \"1.0.*\"\n  }\n```\n\nAs with Rfc2898DeriveBytes, an Argon2 object is constructed with the password to be hashed:\n```C#\nusing Konscious.Security.Cryptography;\n```\n```C#\nbyte[] password = ...\nvar argon2 = new Argon2i(password);\n```\nor\n```C#\nvar argon2 = new Argon2d(password);\n```\n\nVarious attributes can be added to secure the hash:\n\n| Property           | Type      | Required?   |    Description\n|--------------------|-----------|-------------|-----------------\n|DegreeOfParallelism | int       | REQUIRED    | Argon2 is memory hard and takes advantage of modern processors tendency to be multi-core. It does this by segmenting chunks of memory into lanes. Degree of parallelism specifies how many of these lanes will be used to generate the hash. This value affects the hash itself but can be altered for ideal run time given the processor and number of cores.\n|MemorySize          | int       | REQUIRED    | The amount of memory (in KiB) to use to calculate the hash. This is the property that is used to tweak the memory-hard property of Argon2. Please see the Argon2 documentation for more details about how to tweak this, DegreeOfParallelism, and Iterations to suit your needs\n|Iterations          | int       | REQUIRED    | The number of iterations to perform to compute the hash. Because of Argon2's higher security, huge values like with PBKDF2 are not as necessary, although multiple iterations are still very much recommended.\n|Salt                | byte[]    | RECOMMENDED | Standard Salt value for the Hash Algorithm\n|AssociatedData      | byte[]    | OPTIONAL    | Additional associated data to use to compute the hash. This adds another layer of inderection for an attacker to reverse engineer the hash\n|KnownSecret         | byte[]    | OPTIONAL    | An additional secret to use for the hash for extra security\n\nAnd the primary hash method:\n````csharp\nbyte[] GetBytes(int)\n````\nWhich takes the number of bytes to generate. This implementation will accept only up to 1024 bytes as input.\n\n```C#\nbyte[] salt;\nbyte[] userUuidBytes;\n...\nargon2.DegreeOfParallelism = 16;\nargon2.MemorySize = 8192;\nargon2.Iterations = 40;\nargon2.Salt = salt;\nargon2.AssociatedData = userUuidBytes;\n\nvar hash = argon2.GetBytes(128);\n```\n"
 },
 {
  "repo": "shadowsocks/crypto2",
  "language": "Rust",
  "readme_contents": "# Rust Crypto\n\n[![License](https://img.shields.io/github/license/shadowsocks/crypto2.svg)](https://github.com/shadowsocks/crypto2)\n[![Build & Test](https://github.com/shadowsocks/crypto2/actions/workflows/build-and-test.yml/badge.svg)](https://github.com/shadowsocks/crypto2/actions/workflows/rust.yml)\n[![crates.io](https://img.shields.io/crates/v/crypto2.svg)](https://crates.io/crates/crypto2)\n\nAn all-in-one cryptographic algorithm library in Rust.\n\n## Supported Details\n\n\ud83d\udea7 Interested but not implemented yet \u2705 Implemented \u274c Not Interested\n\n### Hardware Acceleration\n\n#### X86/X86-64\n\n- \u2705 AES\n- \u2705 CLMUL\n- \u274c SHA\uff08SHA1\uff09\n- \u2705 SHA\uff08SHA2-256\uff09\n\n#### AArch64\n\n- \u2705 AES\n- \u2705 PMULL\n- \u274c SHA1\n- \u2705 SHA2 \uff08SHA2-256\uff09\n- \u274c SHA512 (SHA2-512)\n- \u274c SHA3\n- \u274c SM3\n- \u274c SM4\n\n### Digest Algorithms\n\n- \u2705 MD2\n- \u2705 MD4\n- \u2705 MD5\n- \u274c MD6\n- \u2705 SHA1\n- \u2705 SHA2-224\n- \u2705 SHA2-256\n- \u2705 SHA2-384\n- \u2705 SHA2-512\n- \ud83d\udea7 SHA3-256\n- \ud83d\udea7 SHA3-384\n- \ud83d\udea7 SHA3-512\n- \u2705 SM3\n- \u2705 BLAKE2b\n- \u2705 BLAKE2s\n- \u2705 BLAKE3\n- \u274c RIPEMD\n- \u274c Whirlpool\n- \ud83d\udea7 GOST\n\n### Symmetric Key Encryption (Block Alogrithms)\n\n- \u274c DES\n- \u274c 3DES\n- \u2705 RC2 (or: ARC2)\n- \ud83d\udea7 RC5\n- \u274c RC6\n- \u2705 AES\n- \u2705 SM4\n- \u2705 Camellia\n- \u2705 ARIA\n- \ud83d\udea7 GOST\uff08Magma\u3001Kuznyechik\uff09\n- \u274c Blowfish\n- \u274c Twofish\n- \u274c Threefish\n\n### Stream Cipher Alogrithms\n\n- \u2705 RC4\n- \u2705 Chacha20\n- \ud83d\udea7 ZUC (in Chinese: \u7956\u51b2\u4e4b\u7b97\u6cd5)\n\n### Asymmetric Cryptographic Algorithm\n\n- \ud83d\udea7 RSA\n- \u274c ED25519\n- \ud83d\udea7 SM2\n- \ud83d\udea7 SM9\n\n### Authenticated Encryption (AE) Algorithms\n\n- \u2705 Chacha20Poly1305 (RFC7539)\n- \u2705 Chacha20Poly1305OpenSSH (chacha20-poly1305@openssh.com)\n- \u2705 AES-CCM\n- \u2705 AES-OCB\n- \u2705 AES-GCM\n- \u2705 AES-GCM-SIV\n- \u2705 AES-SIV (AesSivCmac256\u3001AesSivCmac384\u3001AesSivCmac512)\n\n- \u2705 CAMELLIA-CCM\n- \u2705 CAMELLIA-GCM\n- \u2705 CAMELLIA-GCM-SIV\n\n- \u2705 ARIA-CCM\n- \u2705 ARIA-GCM\n- \u2705 ARIA-GCM-SIV\n\n- \u2705 SM4-CCM\n- \u2705 SM4-GCM\n- \u2705 SM4-GCM-SIV\n\n### Encryption Algorithms\n\n- \u2705 AES-ECB\n- \u2705 AES-CBC\n- \u2705 AES-CFB1\n- \u2705 AES-CFB8\n- \u2705 AES-CFB64\n- \u2705 AES-CFB128\n- \u2705 AES-OFB\n- \u2705 AES-CTR\n\n- \u2705 CAMELLIA-CBC\n- \u2705 CAMELLIA-CFB1\n- \u2705 CAMELLIA-CFB8\n- \u2705 CAMELLIA-CFB64\n- \u2705 CAMELLIA-CFB128\n- \u2705 CAMELLIA-OFB\n- \u2705 CAMELLIA-CTR\n\n- \u2705 ARIA-CBC\n- \u2705 ARIA-CFB1\n- \u2705 ARIA-CFB8\n- \u2705 ARIA-CFB64\n- \u2705 ARIA-CFB128\n- \u2705 ARIA-OFB\n- \u2705 ARIA-CTR\n\n- \u2705 SM4-CBC\n- \u2705 SM4-CFB1\n- \u2705 SM4-CFB8\n- \u2705 SM4-CFB64\n- \u2705 SM4-CFB128\n- \u2705 SM4-OFB\n- \u2705 SM4-CTR\n\n### Key Derivation Function (KDF)\n\n- \u2705 HKDF\n- \ud83d\udea7 Scrypt\n- \u274c PBKDF2\n\n### Message Authentication Code (MAC)\n\n- \u2705 HMAC\n- \u2705 Poly1305\n- \u2705 GMAC\n- \u2705 CBC-Mac\n- \u2705 CMac\n\n### Others\n\n- \ud83d\udea7 bcrypt\n"
 },
 {
  "repo": "secworks/sha256",
  "language": "Verilog",
  "readme_contents": "# sha256 #\n\n## Implementation status ##\nThe core has been completed for a long time and been used in several\ndesigns in ASICs as well as in FPGAs. The core is considered mature and\nready for use. Minor changes are non-functional cleanups of code.\n\n\n## Introduction\nHardware implementation of the SHA-256 cryptographic hash function with\nsupport for both SHA-256 and SHA-224. The implementation is written in\nVerilog 2001 compliant code. The implementation includes the main core\nas well as wrappers that provides interfaces for simple integration.\n\nThis is a low area implementation that iterates over the rounds but\nthere is no sharing of operations such as adders.\n\nThe hardware implementation is complemented by a functional model\nwritten in Python.\n\nNote that the core does **NOT** implement padding of final block. The\ncaller is expected to handle padding.\n\n\n## FuseSoC\nThis core is supported by the\n[FuseSoC](https://github.com/olofk/fusesoc) core package manager and\nbuild system. Some quick  FuseSoC instructions:\n\ninstall FuseSoC\n~~~\npip install fusesoc\n~~~\n\nCreate and enter a new workspace\n~~~\nmkdir workspace && cd workspace\n~~~\n\nRegister sha256 as a library in the workspace\n~~~\nfusesoc library add sha256 /path/to/sha256\n~~~\n\n...if repo is available locally or...\n...to get the upstream repo\n~~~\nfusesoc library add sha256 https://github.com/secworks/sha256\n~~~\n\nTo run lint\n~~~\nfusesoc run --target=lint secworks:crypto:sha256\n~~~\n\nRun tb_sha256 testbench\n~~~\nfusesoc run --target=tb_sha256 secworks:crypto:sha256\n~~~\n\nRun with modelsim instead of default tool (icarus)\n~~~\nfusesoc run --target=tb_sha256 --tool=modelsim secworks:crypto:sha256\n~~~\n\nList all targets\n~~~\nfusesoc core show secworks:crypto:sha256\n~~~\n\n\n## Implementation details ##\nThe sha256 design is divided into the following sections.\n- src/rtl - RTL source files\n- src/tb  - Testbenches for the RTL files\n- src/model/python - Functional model written in python\n- doc - documentation (currently not done.)\n- toolruns - Where tools are supposed to be run. Includes a Makefile for\nbuilding and simulating the design using\n[Icarus Verilog](http://iverilog.icarus.com/). There are also targets\nfor linting the core using [Verilator](http://www.veripool.org/wiki/verilator).\n\nThe actual core consists of the following files:\n- sha256_core.v - The core itself with wide interfaces.\n- sha256_w_mem.v - W message block memory and block expansion logic.\n- sha256_k_constants.v - K constants ROM memory.\n\nThe top level entity is called sha256_core. This entity has wide\ninterfaces (512 bit block input, 256 bit digest). In order to make it\nusable you probably want to wrap the core with a bus interface.\n\n\nThe provided top level wrapper, sha256.v provides a simple 32-bit memory\nlike interface. The core (sha256_core) will sample all data inputs when\ngiven the init or next signal. the wrapper contains additional data\nregisters. This allows you to load a new block while the core is\nprocessing the previous block.\n\n\nThe core supports both sha224 and sha256 modes. The default mode is\nsha256. The mode bit is located in the ADDR_CTRL API register and this\nmeans that when writing to this register to start processing a block,\ncare must be taken to set the mode bit to the intended mode. This means\nthat old code that for example simply wrote 0x01 to initiate SHA256\nprocessing will now initiate SHA224 processing. Writing 0x05 will\nnow initiate SHA256 processing.\n\nRegarding SHA224, it is up to the user to only read seven, not eight\nwords from the digest registers. The core will update the LSW too.\n\n\n## Streaming interface ##\nThere is a streaming interface for the core contributed by\n[Olof Kindgren](https://github.com/olofk).\n\n- src/interfaces/stream/rtl - RTL source file for wrapped core\n- src/interfaces/stream/tb - Testbench for the wrapped core\n\n\n## AXI4 interface ##\n\n**NOTE** This interface is currently being developed. Expect bugs as this\ninterface is still under development.\n\nThere is now an AXI4 interface for the core contributed by\n[Sanjay A Menon](https://github.com/Sanjay-A-Menon). The interface wraps\nsha256_core, replacing sha256.v\n\nThe interface provides an AXI4-Lite slave interface with added hash\ncomplete interrupt signal. Chip select is implemented via axi_awprot\nsignal.\n\n- src/interfaces/axi4/rtl - RTL source file for wrapped core\n- src/interfaces/axi4/tb  - Testbench for the wrapped core\n\n\n## ASIC-results ##\nImplementation in 40 nm low power standard cell process.\n- Area: 14200 um2\n- Combinational cells: 2344.9230\n- Non-combinational cells: 2902.4856\n- Clock frequency: 250 MHz\n\n\n## Fpga-results ##\n\n### Altera Cyclone FPGAs ###\nImplementation results using Altera Quartus-II 13.1.\n\n**Cyclone IV E**\n- EP4CE6F17C6\n- 3882 LEs\n- 1813 registers\n- 74 MHz\n- 66 cycles latency\n\n**Cyclone IV GX**\n- EP4CGX22CF19C6\n- 3773 LEs\n- 1813 registers\n- 76 MHz\n- 66 cycles latency\n\n**Cyclone V**\n- 5CGXFC7C7F23C8\n- 1469 ALMs\n- 1813 registers\n- 79 MHz\n- 66 cycles latency\n\n\n### Microchip ###\n\n***IGLOO2***\n- Tool: Libero v 12.4\n- Device: M2GL090TS-1FG484I\n- LUTs: 2811\n- SLEs: 1900\n- BRAMs: 0\n- Fmax: 114 MHz\n\n\n### Xilinx FPGAs ###\nImplementation results using ISE 14.7.\n\n**Spartan-6**\n- xc6slx45-3csg324\n- 2012 LUTs\n- 688 Slices\n- 1929 regs\n- 70 MHz\n- 66 cycles latency\n\n**Artix-7**\n- xc7a200t-3fbg484\n- 2471 LUTs\n- 747 Slices\n- 1930 regs\n- 108 MHz\n- 66 cycles latency\n\n\nImplementation results using Vivado 2014.4.\n\n**Zynq-7030**\n- xc7z030fbg676-1\n- 2308 LUTs\n- 796 Slices\n- 2116 regs\n- 116 MHz\n- 66 cycles latency\n\n\nImplementation results using Vivado v.2019.2\n\nResults kindly provided by\n[Sanjay-A-Menon](https://github.com/Sanjay-A-Menon). Implemented design\nincludes the AXI4 wrapper.\n\n**Zynq-7020**\n- Device: 7z020clg400-1\n- Slice LUTs: 2555\n- Slice regs: 2606\n- Fmax: 78 MHz\n- 66 cycles latency\n"
 },
 {
  "repo": "Nik-U/pbc",
  "language": "Go",
  "readme_contents": "# The PBC Go Wrapper [![Build Status](https://travis-ci.org/Nik-U/pbc.svg)](https://travis-ci.org/Nik-U/pbc) [![GoDoc](https://godoc.org/github.com/Nik-U/pbc?status.svg)](https://godoc.org/github.com/Nik-U/pbc)\n\nPackage pbc provides structures for building pairing-based cryptosystems. It\nis a wrapper around the Pairing-Based Cryptography (PBC) Library authored by\nBen Lynn (https://crypto.stanford.edu/pbc/).\n\nThis wrapper provides access to all PBC functions. It supports generation of\nvarious types of elliptic curves and pairings, element initialization, I/O,\nand arithmetic. These features can be used to quickly build pairing-based or\nconventional cryptosystems.\n\nThe PBC library is designed to be extremely fast. Internally, it uses GMP\nfor arbitrary-precision arithmetic. It also includes a wide variety of\noptimizations that make pairing-based cryptography highly efficient. To\nimprove performance, PBC does not perform type checking to ensure that\noperations actually make sense. The Go wrapper provides the ability to add\ncompatibility checks to most operations, or to use unchecked elements to\nmaximize performance.\n\nSince this library provides low-level access to pairing primitives, it is\nvery easy to accidentally construct insecure systems. This library is\nintended to be used by cryptographers or to implement well-analyzed\ncryptosystems.\n\n## Features\n* 5 different pairing types\n* Pairing generation\n* Parameter export and import\n* Element type checking\n* Fast element arithmetic and pairing\n* Element randomization\n* Element export and import\n* Automatic garbage collection\n* Integration with `fmt`\n* Integration with `math/big`\n\n## Dependencies\nThis package must be compiled using cgo. It also requires the installation\nof GMP and PBC. During the build process, this package will attempt to\ninclude `gmp.h` and `pbc/pbc.h`, and then dynamically link to GMP and PBC.\nInstallation on Windows requires the use of MinGW.\n\n## Documentation\nFor additional installation instructions and documentation, see\nhttps://godoc.org/github.com/Nik-U/pbc\n"
 },
 {
  "repo": "vibornoff/webcrypto-shim",
  "language": "JavaScript",
  "readme_contents": "webcrypto-shim.js\n=================\n\n[Web Cryptography API](https://www.w3.org/TR/WebCryptoAPI/) shim for legacy browsers.\n\nQuick start with _Bower_\n------------------------\n\nInstall the package\n\n```sh\n$ bower install webcrypto-shim\n```\n\nand link scripts into your html code\n\n```html\n<script src=\"bower_components/promiz/promiz.js\"></script>\n<script src=\"bower_components/webcrypto-shim/webcrypto-shim.js\"></script>\n```\n\nNow you can use webcrypto api through the `window.crypto` and `window.crypto.subtle` objects.\n\nNote that _IE11_ lacks support of `Promise`-s and requires _promiz.js_ to work properly. You can replace _promiz.js_ with any _Promise/A+_-compatible implementation.\n\nSupported browsers\n------------------\n\nThe library is targeted to fix these browsers having prefixed and buggy webcrypto api implementations:\n* _Internet Explorer 11_, _Mobile Internet Explorer 11_,\n* _Safari 8 - 10_, _iOS Safari 8 - 10_.\n\nThese browsers have unprefixed and conforming webcrypto api implementations, so no need in shim:\n* _Chrome 43+_, _Chrome for Android 44+_,\n* _Opera 24+_,\n* _Firefox 34+_,\n* _Edge 12+_.\n* _Safari 11+_.\n\nCrossbrowser support of algorithms & operations\n-----------------------------------------------\n\n* **SHA-256**, **SHA-384**: `digest`\n\n* **HMAC**: `sign`, `verify`, `generateKey`, `importKey`, `exportKey`\n  * with _hash_ **SHA-1**, **SHA-256**, **SHA-384**\n\n* **AES-CBC**: `encrypt`, `decrypt`, `generateKey`, `importKey`, `exportKey`, `wrapKey`, `unwrapKey`\n  * _TODO_ tests\n\n* **AES-KW**: `generateKey`, `importKey`, `exportKey`, `wrapKey`, `unwrapKey`\n  * _TODO_ tests\n\n* **RSASSA-PKCS1-v1\\_5**: `sign`, `verify`, `generateKey`, `importKey`, `exportKey`\n  * with _hash_ **SHA-256**, **SHA-384**\n  * and _modulusLength_ at least 2048 bits\n\n* **RSA-OAEP**: `encrypt`, `decrypt`, `generateKey`, `importKey`, `exportKey`, `wrapKey`, `unwrapKey`\n  * with _hash_ **SHA-1**\n  * and _modulusLength_ at least 2048 bits\n  * _FIXME_ only `\"jwk\"` format for wrapped/unwrapped keys\n\nKnown limitations\n-----------------\n\n`deriveKey`, `deriveBits` are not supported under _IE11_ and _Safari_  since there is no implementation of any algorithm providing key derivation.\n\nUnder _IE11_ exception is thrown in case of empty input data since _IE11_ silently discards empty data and leaves returned `Promise` object never resolved nor rejected.\n\nOther browsers support\n----------------------\n\nSee https://vibornoff.github.io/webcrypto-examples/index.html\n\nSponsored by\n------------\n\n[BrowserStack](https://browserstack.com) \u2014 automated & manual crossbrowser testing solution.\n"
 },
 {
  "repo": "microsoft/MSR-JavaScript-Crypto",
  "language": "JavaScript",
  "readme_contents": "\ufeff## Overview\n\nThe **Microsoft Research JavaScript Cryptography Library** (msrCrypto) has been developed for use with cloud services in an HTML5 compliant and forward-looking manner. The algorithms are exposed via the [W3C Web Cryptography API](https://www.w3.org/TR/WebCryptoAPI/).\n\nThe library currently supports RSA encryption (OAEP) and digital signature (PSS); AES-CBC and GCM encrypt/decrypt; SHA-256/384/512, HMAC with supported hash functions; PRNG (AES-CTR based) as specified by NIST; ECDH; ECDSA; and KDF (Concat). The library is tested on IE8, 9, 10, 11, Microsoft Edge and latest Firefox, Chrome, Opera, and Safari browsers.    \n\nThis library includes big-number integer arithmetic to support the aforementioned cryptographic algorithms. It supports unsigned big integer arithmetic with addition, subtraction, multiplication, division, reduction, inversion, GCD, extended Euclidean algorithm (EEA), Montgomery multiplication, and modular exponentiation. It provides useful utility functions, such as endianness management and conversion routines. The big integer library is likely to change in future releases. Future updates to this library may change the programming interfaces.    \n\nThis library has no run-time dependencies.\n\n## Recommended Usage\nIt is recommended that this library be used as a polyfill for the native Web Crypto API supported in modern browsers.\nIt is strongly advised that you used the native browser crypto whenever available. It will be more thoroughly tested, more secure, and have significantly better performance.  \nIt is not recommended to use this library in a server type application.   \n\nTo select native crypto, when available, you can use the following code:  \n```javascript\n// Select native crypto if supported\nvar crypto =  window.crypto /*native*/ || window.msCrypto /*IE11 native*/ || window.msrCrypto; /*polyfill*/\n\n// Call crypto functions\ncrypto.subtle.encrypt(...);\n```\n\n## Library Files  \n\nFull library [`/lib/msrCrypto.js`](https://github.com/microsoft/MSR-JavaScript-Crypto/blob/master/lib/msrcrypto.js)  \nMinified library [`/lib/msrCrypto.min.js`](https://github.com/microsoft/MSR-JavaScript-Crypto/blob/master/lib/msrcrypto.min.js)\n\n\n## Supported Algorithms\n\nEncryption/Decryption:  \n- RSA-OAEP\n- AES-GCM\n- AES-CBC (_no longer recommended. Use AES-GCM. We continue support for compatibility_)\n\nDigital Signature  \n- RSA-PSS \n- RSA-PKCSv1.15\n- HMAC\n- ECDSA\n\nHash  \n- SHA-1 (_no longer recommended. Use SHA-2. We continue support for compatibility_)\n- SHA-224\n- SHA-256\n- SHA-384\n- SHA-512\n\nDerive Key/Bits  \n- ECDH\n- PBKDF2\n- Concat-KDF\n- HKDF\n\nWrap/Unwrap Key\n- AES-GCM, AES-CBC, RSA-OAEP\n\nSupported ECC curves:  \n- P-256, P-384, P-521, BN-254, NUMSP256D1, NUMSP256T1, NUMSP384D1, NUMSP384T1\n\n## Building the Library  \n\n>_While this library has npm build dependencies, it has no run-time dependencies._\n\nYou may build the library from the source files. The library is built using [gulp](https://gulpjs.com/) from npm to concatenate many individual JavaScript files into a single library file.  \nRun `npm install` from a command terminal to install the required _npm_ packages. `gulpfile.js` contains a list of scripts included in the build. You may remove scripts to create a subset of the library that supports fewer algorithms. Be aware, many scripts have dependencies on other scripts to function properly.\n\n#### Building from Visual Studio Code:\n>_These steps require that [git](https://git-scm.com/downloads), [Node.js](https://nodejs.org/en/), and [Visual Studio Code](https://code.visualstudio.com/) are installed on your system._  \n\n1. Clone the repo to a local folder `git clone https://github.com/microsoft/MSR-JavaScript-Crypto.git`  \n2. Open Visual Studio Code, select menu `File->Open Folder...` and open the cloned `MSR-JavaScript-Crypto` folder.  \n3. After the project has loaded, select menu `Terminal->New Terminal` to open a terminal window.  \n4. At the terminal prompt, run `npm install` to install the required [Node.js](https://nodejs.org/en/) modules to the project's `node_modules` folder.  \n\t>You may need to reload the project for the build tools work properly:  \n\t>Select menu `View->Command Palette...` (or `F1`) then enter `Developer: Reload Window`  \n5. Build the project: menu `View->Command Palette...` (or `F1`) then enter `Tasks: Run Build Task`.\n\t>Alternately you can use the _ctrl+shift+b_ keyboard shortcut. \n6. The newly built library files will appear in the `lib` directory as `msrCrypto.js` and `msrCrypto.min.js`.\n\n#### Building from the command line:\n>_These steps require that [git](https://git-scm.com/downloads) and [Node.js](https://nodejs.org/en/) are installed on your system._  \n1. Clone the repo to a local folder `git clone https://github.com/microsoft/MSR-JavaScript-Crypto.git`  \n2. `cd MSR-JavaScript-Crypto` to enter the project directory.\n3. `npm install` to install the required [Node.js](https://nodejs.org/en/) modules to the project's `node_modules` folder.  \n4. `node_modules\\.bin\\gulp` to build the library files.  \n5. The newly built library files will appear in the `lib` directory as `msrCrypto.js` and `msrCrypto.min.js`.\n\n\n## Additional Utilities\n**msrCrypto** supplies a few data conversion functions that are not part of the Web Cryptography API spec.  \n`.textToBytes(String)` converts a string to an Array of UTF-8 encoded bytes.  \n`.bytesToText(Array|ArrayBuffer|TypedArray)` converts UTF-8 bytes into a string.  \n`.toBase64(Array|ArrayBuffer|TypedArray)` converts byte data to a base-64 string.  \n`.fromBase64(String)` converts a base-64 string into an Array of bytes.  \n\n## Limitations and Security    \n\n**Native crypto**   \nDevelopers should always use native platform crypto when available. Native crypto will have improved performance and offer additional security and memory protection not available in JavaScript. Modern browsers support the Web Crypto API.\n\n**Secret/private key data**    \nSecret key data is stored in JavaScript's memory and is potentially accessible to other scripts, applications, browser extensions, and developer tools. While key data may be stored outside of JavaScripts memory, the key data will be required in-memory by the algorithms running in JavaScript.\n\n**Side-channel protection**    \nWe have taken steps to prevent side-channel vulnerabilities where practical in the library. This library is meant to run on many platforms with many JavaScript engines and we cannot control the side-channel prevention measures employed in either the engines or the underlying platforms.    \n\n**HTTPS**    \nWhen this library is used as part of an html application, HTTPS should always be used when connecting to the server. HTTPS will allow your secret keys and data to be transmitted to client across a secure connection.\n\n## Browser Compatibility\n\n**msrCrypto.js** is compatible with IE8 and newer browsers; latest versions of Chrome, Firefox, Safari, and Opera.  \nBrowser web crypto uses Typed-Arrays for input and output of data. msrCrypto can use either Typed-Arrays or regular Arrays.\n\nKnown issues:  \n#### IE8:\n\"Catch\" is a reserved keyword. Calling the Promise.catch() function will throw an error.  \nTo use the `catch()` function use the `promise[\"catch\"]()` form.\n\n#### IE8/9:\t\nNo Typed Array Support (`ArrayBuffer`, `UInt8Array`, etc...).  \nYou must use regular Arrays for inputting data into msrCrypto when using IE8/9.  \nResults will be returned as regular Arrays as well. For IE10 and newer, results will be returned as an ArrayBuffer.  \nA workaround is to create a simple Uint8Array wrapper for an Array when Typed Arrays are not supported. You wont' get any actual Uint8Array functionality, but you can pass arguments without having to have special cases for your code.\n```javascript\nif (!Uint8Array) {\n\tvar Uint8Array = function (array) {\n\t\treturn array;\n\t}\n}\n\nvar data = new Uint8Array(dataArray);\n```\n\n#### IE11\nIE11 supports the Web Crypto API, but was based on a pre-release version of the spec and was never updated. So it uses event based calls instead of Promises and a few other quirks of the API.\nIn the `/lib` folder there is a `IE11PromiseWrapper.js` file. This shim can be loaded in IE11 and allow you to call the native Web Crypto API using the Promise based calling scheme. This shim also corrects some of the quirks in the IE11 API.\n\n## Random Number Generator (PRNG):\n\nMany of msrCrypto's crypto algorithms require random numbers. Random numbers for cryptography\nneed to be obtained from a cryptographically secure random number generator. This is not \navailable on older browsers (IE10, IE9, & IE8). \n\nmsrCrypto has its own secure pseudo random number generator (PRNG) written in JavaScript. However, the PRNG \nneeds to be initialized with some bytes of random entropy that it cannot obtain on older browsers. It is important that this entropy is obtained from a secure random source - such as from a crypto API on the server and sent with the web application over a secure HTTPS connection.\n\nNewer browsers use `Crypto.getRandomValues()` to obtain cryptographically strong random values. msrCrypto's PRNG will seed itself with this when available.\n\nOnce the entropy is obtained initialize the PRNG before calling any functions. 48 random bytes is recommended.\n```javascript\nmsrCrypto.initPrng(<randomArrayOf48Bytes>);\n```\n## API Documentation\n\nSince this library uses the standard Web Cryptography API we used to recommend the official Microsoft documentation for the Web Crypto API in Microsoft Edge browser. I can no longer find that documentation.  \nA good source for documentation is:  \n[MDN Web Docs Subtle Crypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)  \n[W3C Web Cryptography API](https://www.w3.org/TR/WebCryptoAPI/)\n\n>msrCrypto uses identical calls as these documents with the addition of allowing both regular JavaScript Arrays and Typed-Arrays for data input and output.\n\n## Updates\n\n#### Changes with version 1.6\n\n\tAutomatic web-worker usage is disabled by default. \n\tWhen enabled, it may cause problems when the library is bundled with other scripts.  \n\n\traw key import support for HMAC & ECDH.  \n\n\tspki public key import for RSA.\n\t\n\twrapKey support for AES-CBC, AES-GCM, RSA-OAEP.\n\n\tPBKDF2 key derivation algorithm.\n\n\tIncludes additional side-channel protection.\n\n\tMoved source to GitHub.\n\n#### Changes with version 1.5\n\n\tAdded support for streaming input/output data to crypto calls.\n\tSee Samples/StreamSample.html for an example on how to use this feature.\n\n\tNow allow concurrent crypto calls of the same type at the same time. Before, concurrent \n\tcrypto operations that shared code would possibly return incorrect results.  \n\tNow, for example, you could perform multiple encryptions at the same time with streaming.\n\n\tAdded 'raw' keyImport/keyExport format for hmac, AES-CBC, AES-GCM.\n\n\tAdded IE11PromiseWrapper.js script to wrap the IE11 non-standard WebCrypto api and make\n\tit function the same as current standard WebCrypto api. Your WebCrypto code should now \n\twork with msrCrypto, IE11-WebCrypto, and the current standard WebCrypto with minimal\n\tspecial case code.\n\n\tRemoved RSASSA-PKCS1-v1_5 encrypt/decrypt algorithm. (considered less secure and obsolete)\n\tIt is no longer supported by WebCrypto in modern browsers.\n\n\tAdded TypeScript d.ts file.   msrCrypto.d.ts for using with type script.\n\n\tMoved the Promise polyfill outside of the msrCrypto library so you can use the built-in\n\tbrowser version when available.\t \n\n#### Changes with version 1.4\n\nThe API has been updated to support the latest Web Crypto API spec and be compatible with the\nimplementation on the latest browsers.\n\nPromises are now supported and the IE11 based events are removed. Crypto calls are now in the \nform:\n\n```javascript\n// NEW STYLE with Promises\nmsrCrypto.subtle.encrypt(<parameters>).then(\n\tfunction(encryptionResult) {\n\t\t//... do something here with the result\n\t},\n\tfunction(error) {\n\t\t//... handle error\n\t}\n);\n```\n\nThis will break code that uses the pre-1.4 calling conventions:\n```javascript\n// OLD STYLE with events (before version 1.4)\nvar cryptoOperation =  msrCrypto.subtle.encrypt(<parameters>);\n\ncryptoOperation.onComplete = \n\tfunction(encryptionResult) {\n\t\t//... do something here with the result\n\t};\n\ncryptoOperation.onError = \n\tfunction(encryptionResult) {\n\t\t//... handle error\n\t};\n```\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments."
 },
 {
  "repo": "jvdsn/crypto-attacks",
  "language": "Python",
  "readme_contents": "## Introduction\nPython implementations of cryptographic attacks and utilities.\n\n## Requirements\n* [SageMath](https://www.sagemath.org/) with Python 3.9\n* [PyCryptodome](https://pycryptodome.readthedocs.io/)\n\nYou can check your SageMath Python version using the following command:\n```\n$ sage -python --version\nPython 3.9.0\n```\nIf your SageMath Python version is older than 3.9.0, some features in some scripts might not work.\n\n## Usage\nUnit tests are located in the `test` directory and can be executed using the `unittest` module or using `pytest`. This should not take very long, perhaps a few minutes depending on your machine.\n\nTo run a specific attack, you must add the code to the proper file before executing it.\n\n### Example\n\nFor example, you want to attack RSA using the Boneh-Durfee attack, with the following parameters (taken from [test_rsa.py](test/test_rsa.py)):\n```python\nN = 88320836926176610260238895174120738360949322009576866758081671082752401596826820274141832913391890604999466444724537056453777218596634375604879123818123658076245218807184443147162102569631427096787406420042132112746340310992380094474893565028303466135529032341382899333117011402408049370805729286122880037249\ne = 36224751658507610673165956970793195381480143363550601971796688201449789736497322700382657163240771111376677180786660893671085854060092736865293791299460933460067267613023891500397200389824179925263846148644777638774319680682025117466596019474987378275216579013846855328009375540444176771945272078755317168511\n```\n\nYou add the following code at the bottom of the [boneh_durfee.py](attacks/rsa/boneh_durfee.py) file:\n```python\nimport logging\n\n# Some logging so we can see what's happening.\nlogging.basicConfig(level=logging.DEBUG)\n\nN = 88320836926176610260238895174120738360949322009576866758081671082752401596826820274141832913391890604999466444724537056453777218596634375604879123818123658076245218807184443147162102569631427096787406420042132112746340310992380094474893565028303466135529032341382899333117011402408049370805729286122880037249\ne = 36224751658507610673165956970793195381480143363550601971796688201449789736497322700382657163240771111376677180786660893671085854060092736865293791299460933460067267613023891500397200389824179925263846148644777638774319680682025117466596019474987378275216579013846855328009375540444176771945272078755317168511\np_bits = 512\ndelta = 0.26\n\np, q = attack(N, e, p_bits, delta=delta)\nassert p * q == N\nprint(f\"Found p = {p} and q = {q}\")\n```\n\nThen you can simply execute the file using Sage. It does not matter where you execute it from, the Python path is automagically set:\n```commandline\n[crypto-attacks]$ sage -python attacks/rsa/boneh_durfee.py\nINFO:root:Trying m = 1, t = 0...\nDEBUG:root:Generating shifts...\nDEBUG:root:Filling the lattice (3 x 3)...\nDEBUG:root:Executing the LLL algorithm...\nDEBUG:root:Reconstructing polynomials...\nDEBUG:root:Polynomial at row 0 is constant, ignoring...\nDEBUG:root:Reconstructed 2 polynomials\nDEBUG:root:Using Groebner basis method to find roots...\nDEBUG:root:Groebner basis length: 1\nDEBUG:root:Groebner basis length: 1\nINFO:root:Trying m = 2, t = 0...\nDEBUG:root:Generating shifts...\nDEBUG:root:Filling the lattice (6 x 6)...\nDEBUG:root:Executing the LLL algorithm...\nDEBUG:root:Reconstructing polynomials...\nDEBUG:root:Polynomial at row 0 is constant, ignoring...\nDEBUG:root:Reconstructed 5 polynomials\nDEBUG:root:Using Groebner basis method to find roots...\nDEBUG:root:Groebner basis length: 1\nDEBUG:root:Groebner basis length: 1\nDEBUG:root:Groebner basis length: 1\nDEBUG:root:Groebner basis length: 1\nDEBUG:root:Groebner basis length: 1\nINFO:root:Trying m = 3, t = 1...\nDEBUG:root:Generating shifts...\nDEBUG:root:Filling the lattice (11 x 11)...\nDEBUG:root:Executing the LLL algorithm...\nDEBUG:root:Reconstructing polynomials...\nDEBUG:root:Polynomial at row 8 is constant, ignoring...\nDEBUG:root:Reconstructed 10 polynomials\nDEBUG:root:Using Groebner basis method to find roots...\nDEBUG:root:Groebner basis length: 1\nDEBUG:root:Groebner basis length: 1\nDEBUG:root:Groebner basis length: 1\nDEBUG:root:Groebner basis length: 2\nFound p = 7866790440964395011005623971351568677139336343167390105188826934257986271072664643571727955882500173182140478082778193338086048035817634545367411924942763 and q = 11227048386374621771175649743442169526805922745751610531569607663416378302561807690656370394330458335919244239976798600743588701676542461805061598571009923\n```\n\nYou can also call the attacks from other Python files, but then you'll have to fix the Python path yourself.\n\n## Implemented attacks\n### Approximate Common Divisor\n* [x] [Multivariate polynomial attack](attacks/acd/mp.py) [More information: Galbraith D. S. et al., \"Algorithms for the Approximate Common Divisor Problem\" (Section 5)]\n* [x] [Orthogonal based attack](attacks/acd/ol.py) [More information: Galbraith D. S. et al., \"Algorithms for the Approximate Common Divisor Problem\" (Section 4)]\n* [x] [Simultaneous Diophantine approximation attack](attacks/acd/sda.py) [More information: Galbraith D. S. et al., \"Algorithms for the Approximate Common Divisor Problem\" (Section 3)]\n\n### CBC\n* [x] [Bit flipping attack](attacks/cbc/bit_flipping.py)\n* [x] [IV recovery attack](attacks/cbc/iv_recovery.py)\n* [x] [Padding oracle attack](attacks/cbc/padding_oracle.py)\n\n### CBC + CBC-MAC\n* [x] [Key reuse attack (encrypt-and-MAC)](attacks/cbc_and_cbc_mac/eam_key_reuse.py)\n* [x] [Key reuse attack (encrypt-then-MAC)](attacks/cbc_and_cbc_mac/etm_key_reuse.py)\n* [x] [Key reuse attack (MAC-then-encrypt)](attacks/cbc_and_cbc_mac/mte_key_reuse.py)\n\n### CBC-MAC\n* [x] [Length extension attack](attacks/cbc_mac/length_extension.py)\n\n### CTR\n* [x] [Bit flipping attack](attacks/ctr/bit_flipping.py)\n* [x] [CRIME attack](attacks/ctr/crime.py)\n* [x] [Separator oracle attack](attacks/ctr/separator_oracle.py)\n\n### ECB\n* [x] [Plaintext recovery attack](attacks/ecb/plaintext_recovery.py)\n* [x] [Plaintext recovery attack (harder variant)](attacks/ecb/plaintext_recovery_harder.py)\n* [x] [Plaintext recovery attack (hardest variant)](attacks/ecb/plaintext_recovery_harder.py)\n\n### Elliptic Curve Cryptography\n* [x] [ECDSA nonce reuse attack](attacks/ecc/ecdsa_nonce_reuse.py)\n* [x] [Frey-Ruck attack](attacks/ecc/frey_ruck_attack.py) [More information: Harasawa R. et al., \"Comparing the MOV and FR Reductions in Elliptic Curve Cryptography\" (Section 3)]\n* [x] [MOV attack](attacks/ecc/mov_attack.py) [More information: Harasawa R. et al., \"Comparing the MOV and FR Reductions in Elliptic Curve Cryptography\" (Section 2)]\n* [x] [Parameter recovery](attacks/ecc/parameter_recovery.py)\n* [x] [Singular curve attack](attacks/ecc/singular_curve.py)\n* [x] [Smart's attack](attacks/ecc/smart_attack.py) [More information: Smart N. P., \"The discrete logarithm problem on elliptic curves of trace one\"]\n\n### ElGamal Encryption\n* [x] [Nonce reuse attack](attacks/elgamal_encryption/nonce_reuse.py)\n* [x] [Unsafe generator attack](attacks/elgamal_encryption/unsafe_generator.py)\n\n### ElgGamal Signature\n* [ ] Bleichenbacher's attack\n* [ ] Khadir's attack\n* [x] [Nonce reuse attack](attacks/elgamal_signature/nonce_reuse.py)\n\n### Factorization\n* [x] [Base conversion factorization](attacks/factorization/base_conversion.py)\n* [x] [Branch and prune attack](attacks/factorization/branch_and_prune.py) [More information: Heninger N., Shacham H., \"Reconstructing RSA Private Keys from Random Key Bits\"]\n* [x] [Complex multiplication (elliptic curve) factorization](attacks/factorization/complex_multiplication.py) [More information: Sedlacek V. et al., \"I want to break square-free: The 4p - 1 factorization method and its RSA backdoor viability\"]\n* [x] [Coppersmith factorization](attacks/factorization/coppersmith.py)\n* [x] [Fermat factorization](attacks/factorization/fermat.py)\n* [x] [Ghafar-Ariffin-Asbullah attack](attacks/factorization/gaa.py) [More information: Ghafar AHA. et al., \"A New LSB Attack on Special-Structured RSA Primes\"]\n* [x] [Implicit factorization](attacks/factorization/implicit.py) [More information: Nitaj A., Ariffin MRK., \"Implicit factorization of unbalanced RSA moduli\"]\n* [x] [Known phi factorization](attacks/factorization/known_phi.py) [More information: Hinek M. J., Low M. K., Teske E., \"On Some Attacks on Multi-prime RSA\" (Section 3)]\n* [x] [ROCA](attacks/factorization/roca.py) [More information: Nemec M. et al., \"The Return of Coppersmith\u2019s Attack: Practical Factorization of Widely Used RSA Moduli\"]\n* [x] [Shor's algorithm (classical)](attacks/factorization/shor.py) [More information: M. Johnston A., \"Shor\u2019s Algorithm and Factoring: Don\u2019t Throw Away the Odd Orders\"]\n* [x] [Twin primes factorization](attacks/factorization/twin_primes.py)\n* [x] [Factorization of unbalanced moduli](attacks/factorization/unbalanced.py) [More information: Brier E. et al., \"Factoring Unbalanced Moduli with Known Bits\" (Section 4)]\n\n### GCM\n* [x] [Forbidden attack](attacks/gcm/forbidden_attack.py) [More information: Joux A., \"Authentication Failures in NIST version of GCM\"]\n\n### Hidden Number Problem\n* [x] [Extended hidden number problem](attacks/hnp/extended_hnp.py) [More information: Hlavac M., Rosa T., \"Extended Hidden Number Problem and Its Cryptanalytic Applications\" (Section 4)]\n* [ ] Fourier analysis attack\n* [x] [Lattice-based attack](attacks/hnp/lattice_attack.py)\n\n### IGE\n* [x] [Padding oracle attack](attacks/ige/padding_oracle.py)\n\n### Knapsack Cryptosystems\n* [x] [Low density attack](attacks/knapsack/low_density.py) [More information: Coster M. J. et al., \"Improved low-density subset sum algorithms\"]\n\n### Linear Congruential Generators\n\n* [x] [LCG parameter recovery](attacks/lcg/parameter_recovery.py)\n* [x] [Truncated LCG parameter recovery](attacks/lcg/truncated_parameter_recovery.py) [More information: Contini S., Shparlinski I. E., \"On Stern's Attack Against Secret Truncated Linear Congruential Generators\"]\n* [x] [Truncated LCG state recovery](attacks/lcg/truncated_state_recovery.py) [More information: Frieze, A. et al., \"Reconstructing Truncated Integer Variables Satisfying Linear Congruences\"]\n\n### Learning With Errors\n\n* [x] [Arora-Ge attack](attacks/lwe/arora_ge.py) [More information: \"The Learning with Errors Problem: Algorithms\" (Section 1)]\n* [ ] Blum-Kalai-Wasserman attack\n* [ ] Lattice reduction attack\n\n### Mersenne Twister\n\n* [x] [State recovery](attacks/mersenne_twister/state_recovery.py)\n\n### One-time Pad\n\n* [x] [Key reuse](attacks/otp/key_reuse.py)\n\n### Pseudoprimes\n\n* [x] [Generating Miller-Rabin pseudoprimes](attacks/pseudoprimes/miller_rabin.py) [More information: R. Albrecht M. et al., \"Prime and Prejudice: Primality Testing Under Adversarial Conditions\"]\n\n### RC4\n\n* [x] [Fluhrer-Mantin-Shamir attack](attacks/rc4/fms.py)\n\n### RSA\n\n* [x] [Bleichenbacher's attack](attacks/rsa/bleichenbacher.py) [More information: Bleichenbacher D., \"Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption Standard PKCS #1\"]\n* [x] [Bleichenbacher's signature forgery attack](attacks/rsa/bleichenbacher_signature_forgery.py)\n* [x] [Boneh-Durfee attack](attacks/rsa/boneh_durfee.py) [More information: Boneh D., Durfee G., \"Cryptanalysis of RSA with Private Key d Less than N^0.292\"]\n* [x] [Common modulus attack](attacks/rsa/common_modulus.py)\n* [x] [CRT fault attack](attacks/rsa/crt_fault_attack.py)\n* [x] [Extended Wiener's attack](attacks/rsa/extended_wiener_attack.py) [More information: Dujella A., \"Continued fractions and RSA with small secret exponent\"]\n* [x] [Hastad's broadcast attack](attacks/rsa/hastad_attack.py)\n* [x] [Known CRT exponents attack](attacks/rsa/known_crt_exponents.py) [More information: Campagna M., Sethi A., \"Key Recovery Method for CRT Implementation of RSA\"]\n* [x] [Known private exponent attack](attacks/rsa/known_d.py)\n* [x] [Low public exponent attack](attacks/rsa/low_exponent.py)\n* [x] [LSB oracle (parity oracle) attack](attacks/rsa/lsb_oracle.py)\n* [x] [Manger's attack](attacks/rsa/manger.py) [More information: Manger J., \"A Chosen Ciphertext Attack on RSA Optimal Asymmetric Encryption Padding (OAEP) as Standardized in PKCS #1 v2.0\"]\n* [x] [Nitaj's CRT-RSA attack](attacks/rsa/nitaj_crt_rsa.py) [More information: Nitaj A., \"A new attack on RSA and CRT-RSA\"]\n* [x] [Non coprime public exponent attack](attacks/rsa/non_coprime_exponent.py) [More information: Shumow D., \"Incorrectly Generated RSA Keys: How To Recover Lost Plaintexts\"]\n* [x] [Partial key exposure](attacks/rsa/partial_key_exposure.py) [More information: Boneh D., Durfee G., Frankel Y., \"An Attack on RSA Given a Small Fraction of the Private Key Bits\", Ernst M. et al., \"Partial Key Exposure Attacks on RSA Up to Full Size Exponents\", Blomer J., May A., \"New Partial Key Exposure Attacks on RSA\"]\n* [x] [Related message attack](attacks/rsa/related_message.py)\n* [x] [Stereotyped message attack](attacks/rsa/stereotyped_message.py)\n* [x] [Wiener's attack](attacks/rsa/wiener_attack.py)\n* [x] [Wiener's attack for Common Prime RSA](attacks/rsa/wiener_attack_common_prime.py) [More information: Jochemsz E., May A., \"A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants\" (Section 5)]\n* [x] [Wiener's attack (Heuristic lattice variant)](attacks/rsa/wiener_attack_lattice.py) [More information: Nguyen P. Q., \"Public-Key Cryptanalysis\"]\n\n### Shamir's Secret Sharing\n* [x] [Deterministic coefficients](attacks/shamir_secret_sharing/deterministic_coefficients.py)\n* [x] [Share forgery](attacks/shamir_secret_sharing/share_forgery.py)\n\n## Other interesting implementations\n* [x] [Adleman-Manders-Miller root extraction method](shared/__init__.py) [More information: Cao Z. et al., \"Adleman-Manders-Miller Root Extraction Method Revisited\" (Section 5)]\n* [x] [Fast CRT using divide-and-conquer](shared/crt.py)\n* [x] [Linear Hensel lifting](shared/hensel.py)\n* [ ] Quadratic Hensel lifting\n* [x] [Babai's Nearest Plane Algorithm](shared/lattice.py)\n* [x] [Matrix discrete logarithm](shared/matrices.py)\n* [x] [Matrix discrete logarithm (equation)](shared/matrices.py)\n* [x] [PartialInteger](shared/partial_integer.py)\n* [x] [Fast polynomial GCD using half GCD](shared/polynomial.py)\n\n### Elliptic Curve Generation\n* [x] [Complex multiplication](shared/ecc.py)\n* [x] [Anomalous curves](shared/ecc.py)\n* [ ] MNT curves\n* [x] [Prescribed order](shared/ecc.py)\n* [x] [Prescribed trace](shared/ecc.py)\n* [x] [Supersingular curves](shared/ecc.py)\n\n### Small Roots\n* [x] [Polynomial roots using Groebner bases](shared/small_roots/__init__.py)\n* [x] [Polynomial roots using resultants](shared/small_roots/__init__.py)\n* [x] [Polynomial roots using Sage variety (triangular decomposition)](shared/small_roots/__init__.py)\n* [x] [Blomer-May method](shared/small_roots/blomer_may.py) [More information: Blomer J., May A., \"New Partial Key Exposure Attacks on RSA\" (Section 6)]\n* [x] [Boneh-Durfee method](shared/small_roots/boneh_durfee.py) [More information: Boneh D., Durfee G., \"Cryptanalysis of RSA with Private Key d Less than N^0.292\"]\n* [x] [Coron method](shared/small_roots/coron.py) [More information: Coron J., \"Finding Small Roots of Bivariate Polynomial Equations Revisited\"]\n* [x] [Coron method (direct)](shared/small_roots/coron_direct.py) [More information: Coron J., \"Finding Small Roots of Bivariate Integer Polynomial Equations: a Direct Approach\"]\n* [x] [Ernst et al. methods](shared/small_roots/ernst.py) [More information: Ernst M. et al., \"Partial Key Exposure Attacks on RSA Up to Full Size Exponents\"]\n* [x] [Herrmann-May method (unravelled linearization)](shared/small_roots/herrmann_may.py) [More information: Herrmann M., May A., \"Maximizing Small Root Bounds by Linearization and Applications to Small Secret Exponent RSA\"]\n* [x] [Herrmann-May method (modular multivariate)](shared/small_roots/herrmann_may_multivariate.py) [More information: Herrmann M., May A., \"Solving Linear Equations Modulo Divisors: On Factoring Given Any Bits\" (Section 3 and 4)]\n* [x] [Howgrave-Graham method](shared/small_roots/howgrave_graham.py) [More information: May A., \"New RSA Vulnerabilities Using Lattice Reduction Methods\" (Section 3.2)]\n* [x] [Jochemsz-May method (modular roots)](shared/small_roots/jochemsz_may_modular.py) [More information: Jochemsz E., May A., \"A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants\" (Section 2.1)]\n* [x] [Jochemsz-May method (integer roots)](shared/small_roots/jochemsz_may_integer.py) [More information: Jochemsz E., May A., \"A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants\" (Section 2.2)]\n* [x] [Nitaj-Fouotsa method](shared/small_roots/nitaj_fouotsa.py) [More information: Nitaj A., Fouotsa E., \"A New Attack on RSA and Demytko's Elliptic Curve Cryptosystem\"]\n"
 },
 {
  "repo": "vercel/uid-promise",
  "language": "TypeScript",
  "readme_contents": "# uid-promise\n\nCreates a cryptographically secure UID with a 62 character range that can be safely used in URLs.\n\n## Usage\n\nFirstly, install the package from [npm](https://www.npmjs.com):\n\n```js\nnpm install --save uid-promise\n```\n\nThen load it:\n\n```js\nconst uid = require('uid-promise');\n```\n\nFinally, call it:\n\n```js\nawait uid(20);\n```\n\n## API\n\n**`uid(Number len) => Promise`**\n\n- Return a `Promise` that resolves with a string of random characters\n  of length `len`\n- `len` must always be provided, else the promise is rejected\n- Under the hood, `crypto.randomBytes` is used\n- Character set: `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`\n\n## Authors\n\n- Guillermo Rauch ([@rauchg](https://twitter.com/rauchg)) - [Vercel](https://vercel.com)\n- Leo Lamprecht ([@notquiteleo](https://twitter.com/notquiteleo)) - [Vercel](https://vercel.com)\n"
 },
 {
  "repo": "froydnj/ironclad",
  "language": "Common Lisp",
  "readme_contents": "This is the README for Ironclad, a cryptography package for ANSI Common\nLisp.  It includes several popular block encryption algorithms and\nseveral popular hash functions.  This release also includes some initial\npublic-key cryptography functionality with the addition of DSA signing\nand verification.  (As a bonus, this software used to sign this release\nwas written in pure Common Lisp.)  This release is intended as a\nprototype and as a basis for discussion and refinement.\n\nMost of the algorithms were written with efficiency for specific Common\nLisp implementations in mind, although portable code is provided as an\nalternative in nearly all instances.  The framework should be flexible\nenough to accomodate implementation-specific optimizations when possible.\n\nDocumentation is currently minimal.  Documentation strings for most of\nthe exported functions should be provided; these strings provide a\ndecent overview of what the library is capable of.\n\nTest vectors for many of the algorithms are included to provide a level\nof confidence in the correctness of the implementations.\n\nA (incomplete) TODO list is included with the package.  The NEWS file\nprovides a high-level overview of what has changed since the last\nrelease.\n\nASDF packaging is provided; (asdf:oos 'asdf:load-op :ironclad) should be\nall you need to get started.\n\nComments, criticisms, additions, and optimizations are welcome at the\nbelow email address.\n\nNathan Froyd\nfroydnj@gmail.com\n30 January 2006\n"
 },
 {
  "repo": "signalapp/libsignal",
  "language": "Rust",
  "readme_contents": "# Overview\n\nlibsignal contains platform-agnostic APIs used by the official Signal clients and servers, exposed\nas a Java, Swift, or TypeScript library. The underlying implementations are written in Rust:\n\n- libsignal-protocol: Implements the Signal protocol, including the [Double Ratchet algorithm][]. A\n  replacement for [libsignal-protocol-java][] and [libsignal-metadata-java][].\n- signal-crypto: Cryptographic primitives such as AES-GCM. We use [RustCrypto][]'s where we can\n  but sometimes have differing needs.\n- device-transfer: Support logic for Signal's device-to-device transfer feature.\n- attest: Functionality for remote attestation of [SGX enclaves][] and server-side [HSMs][].\n- zkgroup: Functionality for [zero-knowledge groups][] and related features available in Signal.\n- poksho: Utilities for implementing zero-knowledge proofs (such as those used by zkgroup); stands for \"proof-of-knowledge, stateful-hash-object\".\n\nThis repository is used by the Signal client apps ([Android][], [iOS][], and [Desktop][]) as well as\nserver-side. Use outside of Signal is unsupported. In particular, the products of this repository\nare the Java, Swift, and TypeScript libraries that wrap the underlying Rust implementations. All\nAPIs and implementations are subject to change without notice, as are the JNI, C, and Node add-on\n\"bridge\" layers. However, backwards-incompatible changes to the Java, Swift, TypeScript, and\nnon-bridge Rust APIs will be reflected in the version number on a best-effort basis.\n\n[Double Ratchet algorithm]: https://signal.org/docs/\n[libsignal-protocol-java]: https://github.com/signalapp/libsignal-protocol-java\n[libsignal-metadata-java]: https://github.com/signalapp/libsignal-metadata-java\n[RustCrypto]: https://github.com/RustCrypto\n[Noise protocol]: http://noiseprotocol.org/\n[SGX enclaves]: https://www.intel.com/content/www/us/en/architecture-and-technology/software-guard-extensions.html\n[HSMs]: https://en.wikipedia.org/wiki/Hardware_security_module\n[zero-knowledge groups]: https://signal.org/blog/signal-private-group-system/\n[Android]: https://github.com/signalapp/Signal-Android\n[iOS]: https://github.com/signalapp/Signal-iOS\n[Desktop]: https://github.com/signalapp/Signal-Desktop\n\n\n# Building\n\nTo build anything in this repository you must have [Rust](https://rust-lang.org) installed.\nThe build currently uses a specific version of the Rust nightly compiler, which\nwill be downloaded automatically by cargo. To build and test the basic protocol\nlibraries:\n\n```shell\n$ cargo build\n...\n$ cargo test\n...\n```\n\n## Java/Android\n\nTo build for Android you must install several additional packages including a JDK,\nthe Android NDK/SDK, and add the Android targets to the Rust compiler, using\n\n```rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android```\n\nas well as the Cargo NDK tool using\n\n```cargo install --version=1.0.0 cargo-ndk```\n\nTo build the Java/Android ``jar`` and ``aar``, and run the tests:\n\n```shell\n$ cd java\n$ ./gradlew test\n$ ./gradlew build # if you need AAR outputs\n```\n\nAlternately, a build system using Docker is available:\n\n```shell\n$ cd java\n$ make java_test\n```\n\nWhen exposing new APIs to Java, you will need to run `rust/bridge/jni/bin/gen_java_decl.py` in\naddition to rebuilding.\n\n\n## Swift\n\nTo learn about the Swift build process see [``swift/README.md``](swift/)\n\n\n## Node\n\nYou'll need Node installed to build. If you have [nvm][], you can run `nvm use` to select an\nappropriate version automatically.\n\nWe use [`yarn`](https://classic.yarnpkg.com/) as our package manager. The Rust library will automatically be built when you run `yarn install`.\n\n```shell\n$ cd node\n$ nvm use\n$ yarn install\n$ yarn tsc\n$ yarn test\n```\n\nWhen testing changes locally, you can use `yarn build` to do an incremental rebuild of the Rust library.\n\nWhen exposing new APIs to Node, you will need to run `rust/bridge/node/bin/gen_ts_decl.py` in\naddition to rebuilding.\n\n[nvm]: https://github.com/nvm-sh/nvm\n\n\n# Contributions\n\nSignal does accept external contributions to this project. However unless the change is\nsimple and easily understood, for example fixing a bug or portability issue, adding a new\ntest, or improving performance, first open an issue to discuss your intended change as not\nall changes can be accepted.\n\nContributions that will not be used directly by one of Signal's official client apps may still be\nconsidered, but only if they do not pose an undue maintenance burden or conflict with the goals of\nthe project.\n\nSigning a [CLA (Contributor License Agreement)](https://signal.org/cla/) is required for all contributions.\n\n# Legal things\n## Cryptography Notice\n\nThis distribution includes cryptographic software. The country in which you currently reside may have restrictions on\nthe import, possession, use, and/or re-export to another country, of encryption software.  BEFORE using any encryption\nsoftware, please check your country's laws, regulations and policies concerning the import, possession, or use, and\nre-export of encryption software, to see if this is permitted.  See <http://www.wassenaar.org/> for more information.\n\nThe U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as\nExport Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing\ncryptographic functions with asymmetric algorithms.  The form and manner of this distribution makes it eligible for\nexport under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export\nAdministration Regulations, Section 740.13) for both object code and source code.\n\n## License\n\nCopyright 2020-2022 Signal Messenger, LLC.\n\nLicensed under the AGPLv3: https://www.gnu.org/licenses/agpl-3.0.html\n"
 },
 {
  "repo": "somesocks/lua-lockbox",
  "language": "Lua",
  "readme_contents": ">## :information_source: Looking For Maintainers\n>\n>I'm afraid I've run out of free time to work on the Lockbox, so I'm looking for anyone interested in maintaining/growing the project.  If you're interested, open an issue and request to be a collaborator.\n---\n# The Lua Lockbox\n[![Build Status](https://travis-ci.com/somesocks/lua-lockbox.svg)](https://travis-ci.com/somesocks/lua-lockbox) [![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.png)](LICENSE) [![Luacheck](https://github.com/somesocks/lua-lockbox/workflows/Luacheck/badge.svg)](https://github.com/somesocks/lua-lockbox/actions)\n\nA collection of cryptographic primitives and protocols written in pure Lua.  This was written to provide cross-platform, tested reference implementations of many different cryptographic primitives.  These are written to be easy to read and easy to use, not for performance!\n\n# Implemented Primitives\n\nDigests:\n* MD2\n* MD4\n* MD5\n* RIPEMD128\n* RIPEMD160\n* SHA1\n* SHA2-224\n* SHA2-256\n\nMessage Authentication Codes (MACs):\n* HMAC\n\nKey Derivation Functions (KDFs):\n* HKDF\n* PBKDF2\n\nBlock Ciphers:\n* DES\n* DES3\n* AES128\n* AES192\n* AES256\n* TEA\n* XTEA\n\nBlock Cipher Modes:\n* ECB\n* CBC\n* PCBC\n* CFB\n* OFB\n* CTR\n* IGE\n\nBlock Cipher Padding:\n* Zero Padding\n* ANSI X.923 Padding\n* ISO/IEC 7816 Padding\n* PKCS7 Padding (PKCS5-Compatible)\n\n# Usage\nTo use these cryptographic primitives in a project, you'll likely have to modify Lockbox.lua to change the module search path.  All the primitives import this module to find the packages they require.  See RunTests.lua as an example.\n\nThe cryptographic primitives are designed to work on streams of bytes.  There are three data structures used to help with this:  Array(a Lua array of bytes), Stream(an iterator that returns a series of bytes), and Queue(a FIFO pipe of bytes).  See Array.lua, Stream.lua, and Queue.lua for more details.\n\nMost cryptographic primitives are designed in a builder-style pattern.  They usually have three functions: init, update, and finish.  All of these functions will return the primitive, so you can chain functions calls together.\n\n* init() - resets the state of the primitive, so you can reuse it.\n* update( byteStream ) - takes in a Stream of bytes, and updates its internal state.  This function can be called repeatedly, which effectively concatenates separate inputs.  If the primitive requires an IV, it is usually read as the first input provided to update.\n* finish() - does any finalization necessary to finish generating output.\n\nFor examples of how to use the different primitives, read the test case files under tests.\n\n# Security Concerns\nSeveral weak or broken primitives are implemented in this library, for research or legacy reasons.  These should not be used under normal circumstances!  To restrict their usage, they have been marked as insecure, with the Lockbox.insecure() method.  This will cause a failed assertion when you attempt to import the module, unless you set Lockbox.ALLOW_INSECURE to true before the import.  For an example, see RunTests.lua.\n\n# Modules names\n\n * `lockbox` (or `lockbox.init`)\n * `lockbox.cipher.aes128`\n * `lockbox.cipher.aes192`\n * `lockbox.cipher.aes256`\n * `lockbox.cipher.des3`\n * `lockbox.cipher.des`\n * `lockbox.cipher.mode.cbc`\n * `lockbox.cipher.mode.cfb`\n * `lockbox.cipher.mode.ctr`\n * `lockbox.cipher.mode.ecb`\n * `lockbox.cipher.mode.ige`\n * `lockbox.cipher.mode.ofb`\n * `lockbox.cipher.mode.pcbc`\n * `lockbox.digest.md2`\n * `lockbox.digest.md4`\n * `lockbox.digest.md5`\n * `lockbox.digest.ripemd128`\n * `lockbox.digest.ripemd160`\n * `lockbox.digest.sha1`\n * `lockbox.digest.sha2_224`\n * `lockbox.digest.sha2_256`\n * `lockbox.kdf.hkdf`\n * `lockbox.kdf.pbkdf2`\n * `lockbox.mac.hmac`\n * `lockbox.padding.ansix923`\n * `lockbox.padding.isoiec7816`\n * `lockbox.padding.pkcs7`\n * `lockbox.padding.zero`\n * `lockbox.util.base64`\n * `lockbox.util.array`\n * `lockbox.util.bit`\n * `lockbox.util.queue`\n * `lockbox.util.stream`\n\n# Planned Updates\n* RC4\n* XXTEA\n* SHA3(Keccak)\n* MD6\n* BLAKE2s\n* bcrypt / scrypt\n\n"
 },
 {
  "repo": "jmcardon/tsec",
  "language": "Scala",
  "readme_contents": "```\n________________________________________  \n\\__    ___/   _____/\\_   _____/\\_   ___ \\ \n  |    |  \\_____  \\  |    __)_ /    \\  \\/ \n  |    |  /        \\ |        \\\\     \\____\n  |____| /_______  //_______  / \\______  /\n                 \\/         \\/         \\/ \n```\n# [TSEC: A type-safe, functional, general purpose security and cryptography library.](https://jmcardon.github.io/tsec/)\n\n[![Join the chat at https://gitter.im/tsecc/Lobby](https://badges.gitter.im/tsecc/Lobby.svg)](https://gitter.im/tsecc/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/jmcardon/tsec.svg?branch=master)](https://travis-ci.org/jmcardon/tsec)\n[ ![Latest Version](https://maven-badges.herokuapp.com/maven-central/io.github.jmcardon/tsec-common_2.12/badge.svg)](https://search.maven.org/#search%7Cga%7C1%7Cg%3A\"io.github.jmcardon\"%20tsec)\n\n\n### Latest Release: 0.0.1-M11\n\nFor the current progress, please refer to the [RoadMap](https://github.com/jmcardon/tsec/wiki)\n\nFor version changes and additions, including breaking changes, see either [release notes](https://github.com/jmcardon/tsec/releases)\nor the [Version Changes](https://github.com/jmcardon/tsec/wiki/Version-Changes) page.\n\n## Note about using Windows\ufffc\u2122\u00ae with tsec\n\nWindows\u2122\u00ae is not supported.\n\nFeel free to fork the project and add your own windows support.\n\n\n### Note on milestones:\nOur Notation for versions is:\n```\nX.X.X\n^ ^ ^____Minor\n| |______Major\n|________Complete redesign (i.e scalaz 7 vs 8)  \n```\n\nAll `x.x.x-Mx` releases are milestone releases. Thus, we do not guarantee binary compatibility or no api-breakage until\na concrete version(i.e `0.0.1`). We aim to keep userland-apis relatively stable, but \ninternals shift as we find better/more performant abstractions.\n\nWe will guarantee compatibility between minor versions (i.e 0.0.1 => 0.0.2) but not major versions (0.0.1 => 0.1.0)\n\n0.0.1-M11 is here for scala 2.12+ and Cats 1.0.1!\n\nTo get started, if you are on sbt 0.13.16+, add\n\n\n| Name                  | Description                                              | Examples |\n| -----                 | ----------                                               | -------- |\n| tsec-common           | Common crypto utilities                                  |          |\n| tsec-password         | Password hashers: BCrypt and Scrypt                      | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/PasswordHashingExamples.scala)|\n| tsec-cipher-jca       | Symmetric encryption utilities                           | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/SymmetricCipherExamples.scala)|\n| tsec-cipher-bouncy    | Symmetric encryption utilities                           | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/SymmetricCipherExamples.scala)|\n| tsec-mac              | Message Authentication                                   | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/MacExamples.scala)|\n| tsec-signatures       | Digital signatures                                       | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/SignatureExamples.scala)|\n| tsec-hash-jca         | Message Digests (Hashing)                                | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/MessageDigestExamples.scala)|\n| tsec-hash-bouncy      | Message Digests (Hashing)                                | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/MessageDigestExamples.scala)|\n| tsec-libsodium        | Nicely-typed Libsodium JNI bridge                        | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/MessageDigestExamples.scala)|\n| tsec-jwt-mac          | JWT implementation for Message Authentication signatures | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/JWTMacExamples.scala)|\n| tsec-jwt-sig          | JWT implementation for Digital signatures                | [here](https://github.com/jmcardon/tsec/blob/master/examples/src/main/scala/JWTSignatureExamples.scala)|\n| tsec-http4s           | Http4s Request Authentication and Authorization          | [here](https://github.com/jmcardon/tsec/tree/master/examples/src/main/scala/http4sExamples)|\n\nTo include any of these packages in your project use:\n\n```scala\nval tsecV = \"0.0.1-M11\"\n libraryDependencies ++= Seq(\n \"io.github.jmcardon\" %% \"tsec-common\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-password\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-cipher-jca\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-cipher-bouncy\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-mac\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-signatures\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-hash-jca\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-hash-bouncy\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-libsodium\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-jwt-mac\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-jwt-sig\" % tsecV,\n \"io.github.jmcardon\" %% \"tsec-http4s\" % tsecV\n)\n```\n\n## Note on contributing\n\nSee CONTRIBUTING.md\n \n## A note on logging\nWe use `log4s` which is a logging facade over [SLF4J](https://www.slf4j.org/). This implies you need to add a\n_binding_ to your classpath. Check https://www.slf4j.org/codes.html#StaticLoggerBinder\n \n## Big Thank you to our contributors (direct or indirect):\n[Robert Soeldner](https://github.com/rsoeldner) (Contributor/Maintainer)\n\n[Christopher Davenport](https://github.com/ChristopherDavenport)(Contributor/Maintainer)\n\n[Harrison Houghton](https://github.com/hrhino)(Contributor/Maintainer)\n\n[Bj\u00f8rn Madsen](https://github.com/aeons) (Contributor)\n\n[Andr\u00e9 Rou\u00e9l](https://github.com/before)(Contributor)\n\n[Edmund Noble](https://github.com/edmundnoble) (For the dank tagless)\n\n[Fabio Labella](https://github.com/systemfw) (For the great FP help)\n\n[Will Sargent](https://github.com/wsargent) (Security Discussions)\n\n"
 },
 {
  "repo": "guggero/cryptography-toolkit",
  "language": "JavaScript",
  "readme_contents": "# Cryptography Toolkit\n\nA web-based collection of cryptography tools for schemes/algorithms used in\n[Bitcoin](https://github.com/bitcoin/bitcoin) and [LND](https://github.com/lightningnetwork/lnd).\n\n**This toolkit has been built with educational purposes in mind!**  \nIt is meant to play around with different schemes and algorithms to understand how they work.  \nHowever, you must be **extremely careful** when using real/live/mainnet data/keys/credentials!  \nA web browser usually is not a safe environment to either create strong cryptographic keys and/or\npaste sensitive information into. So consider yourself warned.\n\n[Live version](https://guggero.github.io/cryptography-toolkit/)\n\n## Tools\n* [Elliptic Curve Cryptography / Key Pair page](https://guggero.github.io/cryptography-toolkit/#!/ecc)\n* [Hierarchical Deterministic Wallet page](https://guggero.github.io/cryptography-toolkit/#!/hd-wallet)\n* [Bitcoin Block Parser page](https://guggero.github.io/cryptography-toolkit/#!/bitcoin-block)\n* [Shamir's Secret Sharing Scheme page](https://guggero.github.io/cryptography-toolkit/#!/shamir-secret-sharing)\n* [BIP Schnorr Signatures page](https://guggero.github.io/cryptography-toolkit/#!/schnorr)\n* [MuSig: Key Aggregation for Schnorr Signatures page](https://guggero.github.io/cryptography-toolkit/#!/mu-sig)\n* [Transaction Creator page](https://guggero.github.io/cryptography-toolkit/#!/transaction-creator)\n* [aezeed Cipher Seed Scheme page](https://guggero.github.io/cryptography-toolkit/#!/aezeed)\n* [Macaroons page](https://guggero.github.io/cryptography-toolkit/#!/macaroon)\n* [Wallet Import helper page](https://guggero.github.io/cryptography-toolkit/#!/wallet-import)\n\n## Send Thanks\n\nCreated by [Oliver Gugger](https://github.com/guggero):\n* BTC tip address: `bc1qfgua5vhwm6myajak9p4crhwmwm2k6mczf789eh`\n"
 },
 {
  "repo": "ircmaxell/PHP-CryptLib",
  "language": "PHP",
  "readme_contents": "#PHP-CryptLib\n\n[![Build Status](https://travis-ci.org/ircmaxell/PHP-CryptLib.png?branch=master)](https://travis-ci.org/ircmaxell/PHP-CryptLib)\n\n##Version\n\nThe current version is considered Alpha.  This means that it is *ready enough* to start testing and vetting the library, but not feature complete and not production ready.\n\nAs this software is **ALPHA**, **Use at your own risk**!\n\n#About\n\nPHP-CryptLib aims to be an all-inclusive cryptographic library for all cryptographic needs.  It is meant to be easy to install and use, yet extensible and powerful enough for even the most experienced developer.\n\n##Design Goals\n\n - **100% Portable**\n\n    That means there are no hard (meaning required) dependencies on extensions or non-standard server configurations.  Certain configurations will have better performance for certain features, but all configurations should be supported.\n\n - **Well Designed**\n\n    The code will use industry standard design patterns as well as follow guidelines for clean and testable code.\n\n - **Well Tested**\n\n    That means that the code should be well covered by unit tests.  In addition to unit tests, standard test vectors should be run for custom implementations of algorithms to ensure proper behavior.\n\n - **Easy To Install**\n\n    PHP-CryptLib will support two install methods.  The first method is a pear based installer.  The second is a single file PHAR archive.\n\n - **Easy To Use**\n\n    One goal of this system is to provide a simple interface which has secure defaults for standard cryptographic needs (Random token generation, password hashing and verifying, etc).  If more power is needed, additional layers of abstraction are available to wire together however is needed.\n\n - **Easy To Extend**\n\n    The library should be very easy to extend and add new functionality.\n\n#Features\n\n##Optional Autoloading\n\nIf you include CryptLib via a PHAR package, it will automatically autoload all of the classes for you, no extra step necessary.  Simply:\n\n    require 'path/to/CryptLib.phar';\n\nIf you include CryptLib via a filesystem install, you can use the internal autoloader by either loading the bootstrap.php file, or loading the CryptLib.php file\n\n    require_once 'path/to/CryptLib/bootstrap.php\n\nor\n\n    require_once 'path/to/CryptLib/CryptLib.php\n\nYou can also use any [PSR-0] [3] autoloader.  CryptLib will automatically detect if an autoloader is setup for its namespace, and will not declare its own if it finds one (it does this by testing if the class CryptLib\\Core\\AutoLoader can be found.  If so, that means that an autoloader was declared already.  If not, it loads the core implementation).\n\n    $classLoader = new SplClassLoader('CryptLib', 'path/to/');\n    $classLoader->register();\n\nNote that the path you supply is the directory which contains the *CryptLib* directory.  Not the CryptLib directory itself.\n\n##Secure Random Number/String Generation\n\nPHP-CryptLib implements a method specified in [RFC 4086 - Randomness Requirements for Security] [2].  Basically, it generates randomness from a number of pseudo random sources, and \"mixes\" them together to get better quality random data out.  When you specify the \"strength\" of random generator, you are actually telling the system which sources you would like to use.  The higher the strength, the slower and potentially more fragile the source it will use.\n\nThe mixing function is also dependent upon the strength required.  For non-cryptographic numbers, a simple XOR mixing function is used (for speed).  As strength requirements increase, it will use a SHA512 based mixing function, then a DES based mixing function and finally an AES-128 based mixing function at \"High\" strength.\n\nAnd all of this is hidden behind a simple API.\n\nTo generate user-readable strings, you can use the CryptLib class (which generates medium strength numbers by default):\n\n    $crypt = new CryptLib\\CryptLib;\n    $token = $crypt->getRandomToken(16);\n\nOr you can use the core generator to get more control:\n\n    $factory = new CryptLib\\Random\\Factory;\n    $generator = $factory->getHighStrengthGenerator();\n    $token = $generator->generateString(16);\n\nTo generate salts, simple use CryptLib::getRandomString() or Generator::generate()\n\n##Password Hashing And Validation\n\nA number of password hashing algorithms are supported.  When creating a new hash, the algorithm is chosen via a prefix (a CRYPT() style prefix).  The library will do the rest (salt generation, etc):\n\n    $crypt = new CryptLib\\CryptLib;\n    $hash = $crypt->createPasswordHash($password, '$2a$'); // Blowfish\n    $hash = $crypt->createPasswordHash($password, '$S$'); // Drupal\n\nWhen validating password hashes, where possible, the library will actually auto-detect the algorithm used from the format and verify.  That means it's as simple as:\n\n    $crypt = new CryptLib\\CryptLib;\n    if (!$crypt->verifyPasswordHash($password, $hash)) {\n        //Invalid Password!\n    }\n\nYou can bypass the auto-detection and manually verify:\n\n    $hasher = new CryptLib\\Password\\Implementation\\Joomla;\n    $hash = $hasher->create($password);\n    if (!$hasher->verify($password, $hash)) {\n        //Invalid Hash!\n    }\n\n#Specifications\n\n - Supported Portable Block Ciphers\n    - **aes-128**\n    - **aes-192**\n    - **aes-256**\n    - **rijndael-128**\n    - **rijndael-160**\n    - **rijndael-192**\n    - **rijndael-224**\n    - **rijndael-256**\n    - **des**\n    - **tripledes**\n\n - Supported Portable Cipher Modes Of Operation\n    - **CBC** - Encryption (Cipher Block Chaining)\n    - **CCM** - Encryption and Authentication (Counter Cipher Block Chaining)\n    - **CFB** - Encryption (Cipher FeedBack)\n    - **CTR** - Encryption (Counter)\n    - **ECB** - Encryption (Electronic CodeBook)\n    - **NOFB** - Encryption (Output FeedBack - Variable Block Size)\n\n - Supported Packing Modes\n    - **ANSI-923**\n    - **ISO-10126**\n    - **PKCS-7**\n    - **Zeros** - (Null Padding)\n\n - Supported Key Derivation Functions\n    - **KDF1**\n    - **KDF2**\n    - **KDF3**\n\n - Supported Password Based Key Derivation Functions\n    - **BCrypt**\n    - **PBKDF1**\n    - **PBKDF2**\n    - **SHA256** - (crypt()'s implementation)\n    - **SHA512** - (crypt()'s implementation)\n    - **Schneier** (a PBKDF derivative)\n\n - Supported MAC Functions (Message Authentication Code)\n    - **CMAC** (Cipher MAC)\n    - **HMAC** (Hash MAC)\n\n - Supported Password Storage Functions\n    - **APR1**     - Apache's internal password function\n    - **Blowfish** - BCrypt\n    - **Drupal**   - Drupal's SHA512 based algorithm\n    - **Hash**     - Raw md5, sha1, sha256 and sha512 detected by length\n    - **Joomla**   - Joomla's MD5 based algorithm\n    - **PBKDF**    - A PBKDF implementation (which supports any supported password based key derivation)\n    - **PHPASS**   - An implementation of the portable hash from the PHPASS library\n    - **PHPBB**    - PHPBB's MD5 based algorithm\n\n - Supported Random Number Sources\n    - **CAPICOM**   - A COM object method call available on Windows systems\n    - **MTRand**    - Generation based upon the mt_rand() functions\n    - **MicroTime** - A low entropy source based upon the server's microtime\n    - **OpenSSL**   - Generation from the OpenSSL library (if available)\n    - **Rand**      - A low entropy source based upon rand()\n    - **Random**    - Generation from the system's /dev/random source\n    - **URandom**   - Generation from the system's /dev/urandom source\n    - **UniqID**    - A low entropy source based upon uniqid()\n\n#Library Dependencies:\n\nThe only dependency PHP-CryptLib has to use as a library is the PHP version.  It is made to be completely indepedent of extensions, implementing functionality natively where possible.\n\n##Required\n\n - PHP >= 5.3.2\n\n##Optional\n\n - [MCrypt] [1] Support Compiled In\n\n\n#Build (Testing) Dependencies:\n\nThese dependencies are necessary to build the project for your environment (including running unit tests, packaging and code-quality checks)\n\n##Pear Dependencies\n\n - PDepend Channel (pear.pdepend.org)\n   - pdepend/PHP_Depend >= 0.10.0\n\n - Phing Channel (pear.phing.info)\n   - phing/Phing >= 2.4.0\n\n - PHPMD Channel (pear.phpmd.org)\n   - phpmd/PHP_PMD >= 1.1.0\n\n\n - PHPUnit Channel (pear.phpunit.de)\n   - phpunit/PHPUnit >=3.5.0\n   - phpunit/PHP_CodeBrowser >= 1.0.0\n   - phpunit/phpcpd >= 1.3.0\n   - phpunit/phploc >= 1.6.0\n\n - PHP-Tools Channel (pear.php-tools.net)\n   - pat/vfsStream >= 0.8.0\n\n - Default Pear Channel\n   - pear/PHP_CodeSniffer >= 1.3.0\n   - pear/PHP_UML >= 1.5.0\n\nNote: You can install all of them with the following commands:\n\n    pear channel-discover pear.pdepend.org\n    pear channel-discover pear.phing.info\n    pear channel-discover pear.phpmd.org\n    pear channel-discover pear.phpunit.de\n    pear channel-discover pear.php-tools.net\n    pear channel-discover components.ez.no\n    pear channel-discover pear.symfony-project.com\n\n    pear install pdepend/PHP_Depend\n    pear install phpmd/PHP_PMD\n    pear install pat/vfsStream\n    pear install PHP_CodeSniffer\n    pear install PHP_UML\n    pear install phpunit/PHPUnit\n    pear install phpunit/PHP_CodeBrowser\n    pear install phpunit/phpcpd\n    pear install phpunit/phploc\n    pear install phing/Phing\n\n\n##PHP Dependencies\n\n - PHP >= 5.3.2\n   - `php.ini` Settings:\n     - `phar.readonly = Off`\n\n - PHP Extensions\n   - XDebug\n   - MCrypt\n   - Hash (usually enabled)\n   - Phar\n   - Zip (For Packaging)\n   - BZ2 (For Packaging)\n   - XSL (For Documentation)\n\n  [1]: http://us.php.net/manual/en/book.mcrypt.php \"MCrypt Book\"\n  [2]: http://www.ietf.org/rfc/rfc4086.txt \"RFC 4086 - Randomness Requirements for Security\"\n  [3]: http://groups.google.com/group/php-standards/web/psr-0-final-proposal \"PSR-0 Autoloading Final Proposal\"\n"
 },
 {
  "repo": "X-Vector/X-RSA",
  "language": "Python",
  "readme_contents": "# X-RSA \n\n**What's X-RSA ?**\n- it's a Tool Which contains a many of attack types in RSA such as Hasted, Common Modulus, Chinese Remainder Theorem, Wiener ... etc , and it's still under development and adding other Attacks.\n\n**Why X-RSA ?**\n- X-RSA help you in [CTF , Penetration Testing , Decryption]\n\n- Written By [ Python 3 ]\n\n\n# Installing and Running Tool \n1 - Install Tool \n```\ngit clone https://github.com/X-Vector/X-RSA.git\n```\n2 - Download Requirement\n```\napt install libgmp-dev libmpfr-dev libmpc-dev\npip3 install -r requirement.txt\n```\n3 - Run Tool \n```\npython3 Attack.py\n```\n\n- Coded By X-Vector\n- [Facebook](https://www.facebook.com/X.Vector1) - [Linkedin](https://www.linkedin.com/in/x-vector/) - [Twitter](https://twitter.com/@XVector11)\n\n# Reference\n- [Quadratic sieve](https://github.com/skollmann/PyFactorise)\n"
 },
 {
  "repo": "PQClean/PQClean",
  "language": "C",
  "readme_contents": "# PQClean\n\n_[See the build status for each component here](.github/workflows/BADGES.md)_\n\n**PQClean**, in short, is an effort to collect **clean** implementations of the post-quantum\nschemes that are in the\n[NIST post-quantum project](https://csrc.nist.gov/projects/post-quantum-cryptography).\nThe goal of PQClean is to provide *standalone implementations* that\n\n* can easily be integrated into libraries such as [liboqs](https://openquantumsafe.org/#liboqs).\n* can efficiently upstream into higher-level protocol integration efforts such as [Open Quantum Safe](https://openquantumsafe.org/#integrations);\n* can easily be integrated into benchmarking frameworks such as [SUPERCOP](https://bench.cr.yp.to/supercop.html);\n* can easily be integrated into frameworks targeting embedded platforms such as [pqm4](https://github.com/mupq/pqm4);\n* are suitable starting points for architecture-specific optimized implementations;\n* are suitable starting points for evaluation of implementation security; and\n* are suitable targets for formal verification.\n\nWhat PQClean is **not** aiming for is\n\n* a build system producing an integrated library of all schemes;\n* including benchmarking of implementations; and\n* including integration into higher-level applications or protocols.\n\nAs a first main target, we are collecting C implementations that fulfill the requirements\nlisted below. We also accept optimised implementations, but still requiring high-quality, tested code.\n\nPlease also review our [guidelines for contributors](CONTRIBUTING.md) if you are interested in adding a scheme to PQClean.\n\n## Requirements on C implementations that are automatically checked\n\n_The checking of items on this list is still being developed. Checked items should be working._\n\n* [x] Code is valid C99\n* [x] Passes functional tests\n* [x] API functions do not write outside provided buffers\n* [x] `api.h` cannot include external files\n* [x] Compiles with `-Wall -Wextra -Wpedantic -Werror -Wmissing-prototypes` with `gcc` and `clang`\n* [x] `#if`/`#ifdef`s only for header encapsulation\n* [x] Consistent test vectors across runs\n* [x] Consistent test vectors on big-endian and little-endian machines\n* [x] Consistent test vectors on 32-bit and 64-bit machines\n* [x] `const` arguments are labeled as `const`\n* [x] No errors/warnings reported by valgrind\n* [x] No errors/warnings reported by address sanitizer\n* [x] Only dependencies: `fips202.c`, `sha2.c`, `aes.c`, `randombytes.c`\n* [x] API functions return `0` on success\n* [x] No dynamic memory allocations (including variable-length arrays)\n* [ ] No branching on secret data (dynamically checked using valgrind)\n* [ ] No access to secret memory locations (dynamically checked using valgrind)\n* [x] Separate subdirectories (without symlinks) for each parameter set of each scheme\n* [x] Builds under Linux, MacOS, and Windows\n    * [x] Linux\n    * [x] MacOS\n    * [x] Windows\n* [x] Makefile-based build for each separate scheme\n* [x] Makefile-based build for Windows (`nmake`)\n* [x] All exported symbols are namespaced with `PQCLEAN_SCHEMENAME_`\n* [x] Each implementation comes with a `LICENSE` file (see below)\n* [x] Each scheme comes with a `META.yml` file giving details about version of the algorithm, designers\n    * [x] Each individual implementation is specified in `META.yml`.\n\n\n## Requirements on C implementations that are manually checked\n\n* Minimalist Makefiles\n* No stringification macros\n* Output-parameter pointers in functions are on the left\n* All exported symbols are namespaced in place\n* Integer types are of fixed size where relevant, using `stdint.h` types (optional, recommended)\n* Integers used for indexing memory are of size `size_t` (optional, recommended)\n* Variable declarations at the beginning (except in `for (size_t i=...`) (optional, recommended)\n\n## Schemes currently in PQClean\n\nFor the following schemes we have implementations of one or more of their parameter sets.\nFor all of these schemes we have clean C code, but for some we also have optimised code.\n\n### Key Encapsulation Mechanisms\n\n**Finalists:**\n* Classic McEliece\n* Kyber\n* NTRU\n* SABER\n\n**Alternate candidates:**\n* FrodoKEM\n* HQC\n\n### Signature schemes\n\n**Finalists:**\n* Dilithium\n* Falcon\n* Rainbow\n\n**Alternate candidates:**\n* SPHINCS+\n\nImplementations previously available in PQClean and dropped in Round 3 of the NIST standardization effort are available in the [`round2` tag](https://github.com/PQClean/PQClean/releases/tag/round2).\n\n## API used by PQClean\n\nPQClean is essentially using the same API as required for the NIST reference implementations,\nwhich is also used by SUPERCOP and by libpqcrypto. The only differences to that API are\nthe following:\n* All functions are namespaced;\n* All lengths are passed as type `size_t` instead of `unsigned long long`; and\n* Signatures offer two additional functions that follow the \"traditional\" approach used\nin most software stacks of computing and verifying signatures instead of producing and\nrecovering signed messages. Specifically, those functions have the following name and signature:\n\n```c\nint PQCLEAN_SCHEME_IMPL_crypto_sign_signature(\n    uint8_t *sig, size_t *siglen,\n    const uint8_t *m, size_t mlen,\n    const uint8_t *sk);\nint PQCLEAN_SCHEME_IMPL_crypto_sign_verify(\n    const uint8_t *sig, size_t siglen,\n    const uint8_t *m, size_t mlen,\n    const uint8_t *pk);\n```\n\n## Building PQClean\n\nAs noted above, PQClean is **not** meant to be built as a single library: it is a collection of source code that can be easily integrated into other libraries.  The PQClean repository includes various test programs which do build various files, but you should not use the resulting binaries.\n\nList of required dependencies: ``gcc or clang, make, python3, python-yaml library, valgrind, astyle (>= 3.0)``.\n\n## Using source code from PQClean in your own project\n\nEach implementation directory in PQClean (e.g., crypto\\_kem/kyber768\\clean) can be extracted for use in your own project.  You will need to:\n\n1. Copy the source code from the implementation's directory into your project.\n2. Add the files to your project's build system.\n3. Provide instantiations of any of the common cryptographic algorithms used by the implementation.  This likely includes `common/randombytes.h` (a cryptographic random number generator), and possibly `common/sha2.h` (the SHA-2 hash function family), `common/aes.h` (AES implementations), `common/fips202.h` (the SHA-3 hash function family) and `common/sp800-185.h` (the cSHAKE family).\n\nRegarding #2, adding the files to your project's build system, each implementation in PQClean is accompanied by example two makefiles that show how one could build the files for that implementation:\n\n- The file `Makefile` which can be used with GNU Make, BSD Make, and possibly others.\n- The file `Makefile.Microsoft_nmake` which can be used with Visual Studio's nmake.\n\n## Projects integrating PQClean-distributed source code\n\nThe following projects consume implementations from PQClean and provide their own wrappers around the implementations.\nTheir integration strategies may serve as examples for your own projects.\n\n- **[pqcrypto crate](https://github.com/rustpq/pqcrypto)**: Rust integration that automatically generates wrappers from PQClean source code.\n- **[mupq](https://github.com/mupq/)**: Runs the implementations from PQClean as reference implementations to compare with microcontroller-optimized code.\n- **[Open Quantum Safe](https://github.com/open-quantum-safe/)**: The Open Quantum Safe project integrates implementations from PQClean into their [liboqs](https://github.com/open-quantum-safe/liboqs/) C library, which then exposes them via [C++](https://github.com/open-quantum-safe/liboqs-cpp), [C# / .NET](https://github.com/open-quantum-safe/liboqs-dotnet), and [Python](https://github.com/open-quantum-safe/liboqs-python) wrappers, as well as to forks of [OpenSSL](https://github.com/open-quantum-safe/openssl) and [OpenSSH](https://github.com/open-quantum-safe/openssh-portable).\n\n## License\n\nEach subdirectory containing implementations contains a `LICENSE` file stating under what license that specific implementation is released.\nThe files in `common` contain licensing information at the top of the file (and are currently either public domain or MIT).\nAll other code in this repository is released under the conditions of [CC0](http://creativecommons.org/publicdomain/zero/1.0/).\n\n## Running tests locally\n\nSee https://github.com/PQClean/PQClean/wiki/Test-framework for details about the PQClean test framework.\n\nWhile we run extensive automatic testing on Github Actions ((emulated) Linux builds, MacOS and Windows builds) and [Travis CI][travis-pqc] (Aarch64 builds), and most tests can also be run locally.\nTo do this, make sure the following is installed:\n\n* Python 3.6+\n* `pytest` for python 3.\n\nWe also recommend installing ``pytest-xdist`` to allow running tests in parallel.\n\nYou will also need to make sure the submodules are initialized by running:\n\n```\ngit submodule update --init\n```\n\nRun the Python-based tests by going into the `test` directory and running `pytest -v` or (recommended) `pytest -n=auto` for parallel testing.\n\nYou may also run `python3 <testmodule>` where `<testmodule>` is any of the files starting with `test_` in the `test/` folder.\n\n[travis-pqc]: https://travis-ci.com/PQClean/PQClean/\n"
 },
 {
  "repo": "LessonStudio/VisualCryptography",
  "language": "Python",
  "readme_contents": "Copyright, Robert Donovan, LessonStudio, 2014\nIf you use this then tweet what you did with it @LessonStudio.\n\nThis file takes one argument which is a file that you would like to split into two encrypted images.\nThe original image can only be viewed by overlaying the two encrypted images.\nIf printed on clear plastic, It can be very finicky to align the two images if the pixel count is too high.\nFor best results keep the original image below 200x200 pixels and print as large as possible onto clear plastic to obtain the best results.\n\nYou can go to higher resolutions but you then really have to be precise when aligning the two images.\n\nThe resulting images will be twice as wide and twice as tall pixelwise and there is only 1 bit colour.\n\nFuture features should include alignment marks to make aligning the two transparancies easier.\n\nMaybe I will increase the efficiency of the conversion except that I find that I spend more prep time in photoshop by many orders of magnitude than any time savings that could be extracted.\n\nThe reason I built this is that I found many tools out there for doing this that didn't work for a variety of reasons including being built for long dead versions of Python.\n\nUSAGE: python visual_cryptography.py file_to_encrypt.png"
 },
 {
  "repo": "liuweiran900217/CloudCrypto",
  "language": "Java",
  "readme_contents": "# CloudCrypto\n\nCryptographic primitive implementations for secure Cloud Storage / Computing applications. \n\n## Introduction\n\nTraditional public key cryptographic primitives (e.g., Diffie-Hellman, RSA, ElGamals) have been widely applied in practice to secure network and storage systems. However, such schemes have limited functionalities. Researches have been made to propose advancaed cryptographic primitives and schemes to meet the functionality and security needs for cloud storage / computing paradigms.\n\n**CloudCrypto** project aims at implementing advanced cryptographic schemes under the well-designed Java Cryptographic Architecture (JCA). To achieve this target, **CloudCrypto** leverages [Bouncy Castle](http://www.bouncycastle.org/java.html) as the underlying library, which strictly follows JCA standard. In general, Java seems not a good choice for Crypto implementations due to runtime effiency. \nWe choose Java as the programming language since Java provides good portability so that **CloudCrypto** can be even **directly** port to mobile and / or other embedded devices, e.g., Android. \n\nWe are providing the source code of **CloudCrypto** with no license fee. It is open source and free to use for Research & Development purpose. \n\nWe are glad to notice that Medica Corp. is experimenting with **CloudCrypto** for Research & Development purpose. \n\n## Develop Environments\n\n**CloudCrypto** is buit using Maven 2. Please see `pom.xml` for the dependent libiraries. In its current version, **CloudCrypto** leverages the following libraries:\n\n- [Bouncy Castle](http://www.bouncycastle.org/java.html): supporting basic cryptographic primitives, e.g., hash functions, symmetric encryption schemes.\n- [jPBC Library](http://gas.dia.unisa.it/projects/jpbc/): supporting bilinear groups.\n- [JUnit](http://junit.org/junit4/): for unit test.\n- [Standard Input and Output Libraries by Princeton University](http://algs4.cs.princeton.edu/code/): an easy-to-use standard input and output library from the Princeton open course *Introduction to Programming: An Interdisciplinary Approach*. We only leverages `In.java`, `Out.java`, `StdIn.java`, `StdOut.java`, `BinaryIn.java`, `BinaryOut.java`. Therefore, we directly include these files in our project. You can find the source code under the package `/src/main/java/edu/princeton/cs/algs4`.\n\n## Pairing-Based Cryptographic Primitives\n\nIn its current verion, **CloudCrypto** mainly focuses on implementing schemes based on Bilinear Groups. The underlying algebric library is [Java Pairing-Based Cryptography Library](http://gas.dia.unisa.it/projects/jpbc/). \n\n### Challenges \n\nThere are some schemes implementations in Java Pairing-Based Cryptography, but with the following issues:\n\n- No avaiable serialization methods.\n- The encryption scheme implementations indeed encrypt a random element in G\\_T, while there is no reasonable methods that can map messages / plaintexts to elements in G\\_T in an one-to-one manner. That is, one cannot decrypt the ciphertext, get the elemment in G\\_T, and map it back to the original message.\n\n### Our Solutions\n\nIn our implementations, we leverage the built-in Java serialization method, allowing serializing any CipherParameters  to byte arrays. This allows users to further upload the generated CipherParameters to public Clouds. Any objects whose name ends with `SerParameter` supports serialization. The following method in `src/main/java/cn/edu/buaa/crypto/utils/PairingUtils.java`shows how to serialize / deserizalie these objects:\n\n\tpublic static byte[] SerCipherParameter(CipherParameters cipherParameters) throws IOException {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);\n        objectOutputStream.writeObject(cipherParameters);\n        byte[] byteArray = byteArrayOutputStream.toByteArray();\n        objectOutputStream.close();\n        byteArrayOutputStream.close();\n        return byteArray;\n    }\n\nWe provide a key encapsulation mechanisms for encryption schemes, i.e., the encryption algorithm encapsulates a random session key, by which the encryptor can use to encrypt arbitrary data using symmetric encryption schemes, i.e., AES, TwoFish. \n\n### Object `PairingParameters`\n\nThe most important object for invoking pairing-based cryptographic schemes is `PairingParameters`, which belongs to jPBC library that provides all necessary information for bilinear groups. Note that it is a littie bit complicated to correctly generate such parameters without knowing necessary backgrounds about bilinear groups. We have pre-generated some parameters, all of which can be found at `/params`. We list some of the parameters used in our unit tests:\n\n- `a_80_256.properties`: Type A prime-order bilinear groups with 80-bit Z_p and 256-bit G. Note that the group order cannot meet the security needs for today's system. This parameters can only be used for testing the correctness of the scheme implementations.\n- `a_160_512.properties`: Type A prime-order bilinear groups with 160-bit Z_p and 512-bit G. \n- `a1_3_128.properties` : Type A1 composite-order bilinear groups with 3 prime factors, all of which have size 128-bit. Note that the group order cannnot meet the security needs for today's sstem. This parameter can only be used for testing the correctness of the scheme implementations.\n- `a1_3_512.properties`: Type A1 composite-order bilinear groups with 3 prime factors, all of which have size 512-bit.\n- `f_160.properties`: Type F prime-order bilinear groups with 160-bit Z_p. Note that this group is an asymmetric bilinear group so that it can be only used for schemes built on asymmetric bilinear groups. We recommend using this properties for the Boneh-Lynn-Shacham short signature scheme.\n\nThe following code shows how to get PairingParameters from files in /params:\n\n\t//Obtain PairingParameters from /params/a_160_512.properties\n    PairingParameters pairingParameters = PairingFactory.getPairingParameters(\"params/a_160_512.properties\");\n\n## Algebric Algorithms\n\t\n### Linear Secret Sharing Scheme\n\nLinear secret sharing scheme (LSSS) is the generalization of Shamir secret sharing scheme, which is one of the most famous cryptographic primitives proposed by Shamir in 1979 (See paper [*How To Share a Secret*](http://dl.acm.org/citation.cfm?id=359176)). In 1996, Beimel introduced the concept of LSSS, showing that Shamir's scheme can be seen as a special case for LSSS (See thesis [*Secret Schemes for Secret Sharing and Key Distribution*](https://www.cs.bgu.ac.il/~beimel/Papers/thesis.pdf)). Nowadays, LSSS has been a basic primitive to construct access control mechanism in Attribute-Based Encryption (ABE) systems.\n\nWe implemented two forms of access control mechanism by LSSS, one is based on the original Shamir's scheme. The other one is based on the construction by Waters and Lewko (See [full version](https://eprint.iacr.org/2010/351.pdf) of the paper [*Decentralizing Attribute-Based Encryption*](http://link.springer.com/chapter/10.1007%2F978-3-642-20465-4_31), Appendix G).\n\nThe following code shows how to construct and use access control mechanism using LSSS. The access tree is represented by int\\[\\]\\[\\], see the comment in the [source code](https://dsl-external.bbn.com/svn/openP3S/trunk/jmiracl-crypto/src/main/java/com/bbn/projects/spar/p3s/jmiracl/crypto/utils/LSSS.java) on how to represent access tree by int\\[\\]\\[\\].\n\n    Pairing pairing = PairingFactory.getPairing(pairingParameters);\n    //note that Lewko-Waters LSSS do not support threshold gate access control.\n    int[][] accessPolicy = {\n            {2,2,1,2},\n            {2,2,3,4},\n            {4,3,-7,-8,-9,-10},\n            {2,2,-2,5},\n            {3,2,-4,-5,-6},\n            {2,1,-1,-3}\n    };\n    // rhos can be arbitrary strings\n    String[] rhos = new String[] {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"};\n    String[] satisfiedRhos = new String[] {\"2\", \"3\", \"5\", \"6\", \"7\", \"9\", \"10\"};\n    //Using access tree\n    AccessControlEngine accessControlEngine = AccessTreeEngine.getInstance();\n    try {\n        AccessControlParameter accessControlParameter = accessControlEngine.generateAccessControl(accessPolicy, rhos);\n        //secret sharing\n        Element secret = pairing.getZr().newRandomElement().getImmutable();\n        Map<String, Element> lambdaElementsMap = accessControlEngine.secretSharing(pairing, secret, accessControlParameter);\n\n        //Secret reconstruction\n        Map<String, Element> omegaElementsMap = accessControlEngine.reconstructOmegas(pairing, satisfiedRhos, accessControlParameter);\n        Element reconstructedSecret = pairing.getZr().newZeroElement().getImmutable();\n        for (String eachAttribute : satisfiedRhos) {\n            if (omegaElementsMap.containsKey(eachAttribute)) {\n                reconstructedSecret = reconstructedSecret.add(lambdaElementsMap.get(eachAttribute).mulZn(omegaElementsMap.get(eachAttribute))).getImmutable();\n            }\n        }\n        Assert.assertEquals(secret, reconstructedSecret);\n    } catch (UnsatisfiedAccessControlException e) {\n        // throw if the given attribute set does not satisfy the access policy represented by accress tree.\n    }\n\nThe following code shows how to construct and use access control mechanism using LSSS, where the access policy is represented by a String.\n\n    Pairing pairing = PairingFactory.getPairing(pairingParameters);\n    String accessPolicyString = \"((0 and 1 and 2) and (3 or 4 or 5) and (6 and 7 and (8 or 9 or 10 or 11)))\";\n    String[] satisfiedRhos = new String[] {\"0\", \"1\", \"2\", \"4\", \"6\", \"7\", \"10\"};\n    //Using Lewko-Waters LSSS\n    AccessControlEngine accessControlEngine = LSSSLW10Engine.getInstance();\n    try {\n        //parse access policy\n        int[][] accessPolicy = ParserUtils.GenerateAccessPolicy(accessPolicyString);\n        String[] rhos = ParserUtils.GenerateRhos(accessPolicyString);\n        AccessControlParameter accessControlParameter = accessControlEngine.generateAccessControl(accessPolicy, rhos);\n        //secret sharing\n        Element secret = pairing.getZr().newRandomElement().getImmutable();\n        Map<String, Element> lambdaElementsMap = accessControlEngine.secretSharing(pairing, secret, accessControlParameter);\n\n        //Secret reconstruction\n        Map<String, Element> omegaElementsMap = accessControlEngine.reconstructOmegas(pairing, satisfiedRhos, accessControlParameter);\n        Element reconstructedSecret = pairing.getZr().newZeroElement().getImmutable();\n        for (String eachAttribute : satisfiedRhos) {\n            if (omegaElementsMap.containsKey(eachAttribute)) {\n                reconstructedSecret = reconstructedSecret.add(lambdaElementsMap.get(eachAttribute).mulZn(omegaElementsMap.get(eachAttribute))).getImmutable();\n            }\n        }\n        Assert.assertEquals(secret, reconstructedSecret);\n    } catch (UnsatisfiedAccessControlException e) {\n        // throw if the given attribute set does not satisfy the access policy represented by accress tree.\n    } catch (PolicySyntaxException e) {\n        // throw if invalid access policy representation.\n    }\n\n### Horner's Rule under Z_p\n\nGiven the product $\\prod\\limits_{i = 1}^n {({b_i}x + 1)}$, find the coefficients $a_n, a_{n-1}, \\cdots, a_1, a_0$ such that\n${a_n}{x^n} + {a_{n - 1}}{x^{n - 1}} +  \\cdots  + {a_1}x + {a_0} = \\prod\\limits_{i = 1}^n {({b_i}x + 1)}$.\n\nThis algorithm is called Horner's Rule, which is previously used to efficiently evaluate n-degree polynomials. \nThe Horner's Rule can be used to compute the above coefficients. The detailed algorithm is shown in the paper [*Fully Homomorphic Encryption with Relatively Small Key and Ciphertext Sizes*](http://link.springer.com/chapter/10.1007%2F978-3-642-13013-7_25).\n\nThe following code shows how to use Horner's rule to comupte the coefficients:\n\n    Pairing pairing = PairingFactory.getPairing(pairingParameters);\n    //randomly generate 10 bi's\n    Element[] bs = new Element[10];\n    for (Element bi : bs) {\n        bi = pairing.getZr().newRandomElement().getImmutable();\n    }\n    //the resulting ai's\n    Element[] as = HornerRule.ComputeEfficients(pairing, bs);\n\n## Basic Cryptographic Primitives\n\n### Public Key Signatures\n\nWe implemented three secure signature schemes based built on bilinear groups:\n\n- Boneh-Lynn-Shacham short signature scheme (`BLS01Signer`, see paper [*Short Signatures from the Weil Pairing*](http://link.springer.com/chapter/10.1007/3-540-45682-1_30));\n- Boneh-Boyen short signatures (`BB04Signer`, see paper [*Short Signatures Without Random Oracles*](http://link.springer.com/chapter/10.1007/978-3-540-24676-3_4));\n- Boneh-Boyen improved short signatures (`BB08Signer`, see paper [*Short Signatures Without Random Oracles and the SDH Assumption in Bilinear Groups*](http://link.springer.com/article/10.1007/s00145-007-9005-7));\n\nThe following code shows how to use Boneh-Boyen signatures under the JCA standard:\n\n\t//replace the BB04 related objects to others (BLS01, BB08) to use other signature schemes\n\n\t//generate public key / secret key pair\n    PairingKeyPairGenerator signKeyPairGenerator = new BB04SignKeyPairGenerator();\n    signKeyPairGenerator.init(new BB04SignKeyPairGenerationParameter(pairingParameters));\n    PairingKeySerPair keyPair = signKeyPairGenerator.generateKeyPair();\n    PairingKeySerParameter publicKey = keyPair.getPublic();\n    PairingKeySerParameter secretKey = keyPair.getPrivate();\n\n    try {\n        //sign\n        Signer signer = new PairingDigestSigner(new BB04Signer(), new SHA256Digest());\n        byte[] message = \"Message\".getBytes();\n        signer.init(true, secretKey);\n        signer.update(message, 0, message.length);\n        byte[] signature = signer.generateSignature();\n\n        //verify\n        signer.init(false, publicKey);\n        signer.update(message, 0, message.length);\n        if (!signer.verifySignature(signature)) {\n            System.out.println(\"cannot verify valid signature abort...\");\n            System.exit(0);\n        }\n    } catch (CryptoException e) {\n        //useless, just for satisfying JCA standard\n    }\n\nNote that the signature of the Boneh-Boyen-04 scheme and the Boneh-Boyen-08 scheme are serialized using ASN1 encodings. \nThis is because the signature results contain at least two Elements so that we need to leverage an encoding method to distinct Elements.\n\nThe most important feature of the Boneh-Lynn-Shacham scheme is that the resulting signature length can be short. \nTo achieve this feature, we use toBytesCompressed() in CurveElement to compress the Element, and serialize it without using any encoding methods. \nFurther, we recommend using Type F curve (with PairingParameters shown in /params/f_160.properties). \nThe resulting signature length can be short. In fact, for Type F curve with r bit length 160, the signature length is 21 bytes, i.e., 168 bits.\n\nFor detailed information, please see the implemention shown in BLS01Signer. \n\nWe thank an anonymous employee from Medica Corp. for finding this problem and offering solutions for shortening the byte array length of Element. \n\n### Chameleon Hash Functions\n\nWe implemented the Discrete-Log-based chameleon hash function proposed by Krawczyk and Rabin. (`DLogKR00bHasher.java`, see paper [*Chameleon Signatures*](https://www.mendeley.com/catalog/chameleon-signatures/)). Note that in 2016, me, Jianwei Liu, Qianhong Wu, Bo Qin and Kaitai Liang introduced the concept of Universal collision-resistant chameleon hash function (See paper [*Online/Offline Public-Index Predicate Encryption for Fine-Grained Mobile Access Control*](http://link.springer.com/chapter/10.1007/978-3-319-45741-3_30)). We also implemented the universal collision-resistant chamelon hash based on the Krawczyk-Rabin chameleoin hash, see `DLogKR00bUniversalHasher.java`.\n\nThe JUnit test example is in `src/test/java/com/example/chameleonhash/ChameleonHasherJUnitTest.java`.\n\nWe follow the standard `RFC3526` to build DLog groups used for DLog-based chameleon hash functions, see `src/main/java/cn/edu/buaa/crypto/algebra/serparams/SecurePrimeSerParameter.java` for detailed information.\n\n## Advanced Cryptographic Primitives\n\n### Broadcast Encryption (BE)\n\nWe implemented Boneh-Gentry-Waters BE scheme (`BEBGW05Engine`, see paper [*Collusion Resistant Broadcast Encryption with Short Ciphertexts and Private Keys*](http://link.springer.com/chapter/10.1007/11535218_16)). \n\nSee `src/test/java/com/example/encryption/be/BEEngineJUnitTest.java` for JUnit test example.\n\n### Identity-Based Encryption (IBE)\n\nWe implemented several IBE schemes:\n\n- Boneh-Franklin CPA-secure IBE scheme (`IBEBF01aEngine`, see paper [*Identity-Based Encryption from the Weil Pairing*](http://link.springer.com/chapter/10.1007/3-540-44647-8_13));\n- Boneh-Franklin CPA-secure IBE scheme (`IBEBF01bEngine`, see paper [*Identity-Based Encryption from the Weil Pairing*](http://link.springer.com/chapter/10.1007/3-540-44647-8_13));\n- Gentry CPA-secure IBE scheme (`IBEGen06aEngine`, see paper [*Practical Identity-Based Encryption Without Random Oracles*](http://link.springer.com/chapter/10.1007/11761679_27));\n- Gentry CCA2-secure IBE scheme (`IBEGen06bEngine`, see paper [*Practical Identity-Based Encryption Without Random Oracles*](http://link.springer.com/chapter/10.1007/11761679_27));\n- Lewko-Waters CPA-secure IBE scheme built on composite-order bilinear groups (`IBELW10Engine`, see paper [*New Techniques for Dual System Encryption and Fully Secure HIBE with Short Ciphertexts*](http://link.springer.com/chapter/10.1007/978-3-642-11799-2_27));\n\nSee `src/test/java/com/example/encryption/ibe/IBEEngineJUnitTest` for JUnit test example.\n\n### Hierarchical Identity-Based Encryption (HIBE)\n\nWe implemented two HIBE schemes:\n\n- Boneh-Boyen HIBE scheme (`HIBEBB04Engine`, see paper [*Efficient Selective-ID Secure Identity-Based Encryption Without Random Oracles*](http://link.springer.com/chapter/10.1007/978-3-540-24676-3_14));\n- Boneh-Boyen-Goh HIBE scheme (`HIBEBBG05Engine`, see paper [*Hierarchical Identity Based Encryption with Constant Size Ciphertext*](http://link.springer.com/chapter/10.1007/11426639_26));\n\nSee `src/test/java/com/example/encryption/hibe/HIBEEngineJUnitTest` for JUnit test example.\n\n### Identity-Based Broadcast Encryption (IBBE)\n\nWe implemented Delerabl\u00e9e IBBE scheme (`IBBEDel07Engine`, see paper [*Identity-Based Broadcast Encryption with Constant Size Ciphertexts and Private Keys*](http://link.springer.com/chapter/10.1007/978-3-540-76900-2_12)). \n\nSee `src/test/java/com/example/encryption/ibbe/IBBEEngineJUnitTest` for JUnit test example.\n\n### Hierarchical Identity-Based Broadcast Encryption (HIBBE)\n\nThe concept of HIBBE was proposed by me, Prof. Jianwei Liu, Prof. Qianhong Wu, and Dr. Bo Qin in 2014. We further proposed and implemented several HIBBE schemes:\n\n- CPA-secure HIBBE built on composite-order bilinear groups (`HIBBELLW14Engine`, see paper [*Hierarchical Identity-Based Broadcast Encryption*](http://link.springer.com/chapter/10.1007/978-3-319-08344-5_16));\n- CPA-secure HIBBE built on prime-order bilinear groups (`HIBBELLW16aEngine`, see paper [*Practical chosen-ciphertext secure Hierarchical Identity-Based Broadcast Encryption*](http://link.springer.com/article/10.1007/s10207-015-0287-8));\n- CCA2-secure HIBBE built on prime-order bilinear groups (`HIBBELLW16bEngine`, see paper [*Practical chosen-ciphertext secure Hierarchical Identity-Based Broadcast Encryption*](http://link.springer.com/article/10.1007/s10207-015-0287-8));\n- CCA2-secure HIBBE built on composite-order bilinear groups (`HIBBELLW17Engine`, the paper has been submitted to *Soft Computing*, under review, minr revision);\n\nSee `src/test/java/com/example/encryption/hibbe/HIBBEEngineJUnitTest` for JUnit test example.\n\n### Revocation Encryption (RE)\n\nThe concept of RE was proposed by Lewko and Waters. We implemented serverl RE schemes:\n\n- Lewko-Waters RE scheme version 1 (`RELSW10aEngine`, see paper [*Revocation Systems with Very Small Private Keys*](http://ieeexplore.ieee.org/abstract/document/5504791/));\n- CPA-secure online/offline RE scheme constructed by me, Jianwei Liu, Qianhong Wu, Bo Qin and Kaitai Liang (`RELLW16aEngine`, see paper [*Online/Offline Public-Index Predicate Encryption for Fine-Grained Mobile Access Control*](http://link.springer.com/chapter/10.1007/978-3-319-45741-3_30)).\n- CCA2-secure online/offline RE scheme constructed by me, Jianwei Liu, Qianhong Wu, Bo Qin and Kaitai Liang (`RELLW16bEngine`, see paper [*Online/Offline Public-Index Predicate Encryption for Fine-Grained Mobile Access Control*](http://link.springer.com/chapter/10.1007/978-3-319-45741-3_30)).\n\nSee `src/test/java/com/example/encryption/re/REEngineJUnitTest` for JUnit test example.\n\n### Attribute-Based Encryption (ABE)\n\nWe implemented several ABE schemes, including Key-Policy setting (KP-ABE) and Ciphertext-Policy setting (CP-ABE). KP-ABE includes:\n\n- Goyal-Pandey-Sahai-Waters small-universe KP-ABE (`KPABEGPSW06aEngine`, see paper [*Attribute-Based Encryption for Fine-Grained Access Control of Encrypted Data*](http://dl.acm.org/citation.cfm?id=1180418));\n- Goyal-Pandey-Sahai-Waters large-universe KP-ABE (`KPABEGPSW06bEngine`, see paper [*Attribute-Based Encryption for Fine-Grained Access Control of Encrypted Data*](http://dl.acm.org/citation.cfm?id=1180418));\n- Rouselakis-Waters large-universe KP-ABE (`KPABERW13Engine`, see paper [*Practical Constructions and New Proof Methods for Large Universe Attribute-Based Encryption*](http://dl.acm.org/citation.cfm?id=2516672));\n- Hohenberger-Waters online/offline KP-ABE (`OOKPABEHW14Engine`, see paper [*Online/Offline Attribute-Based Encryption*](http://link.springer.com/chapter/10.1007/978-3-642-54631-0_17));\n- CCA2-secure KP-ABE proposed by me, Jianwei Liu, Qianhong Wu, and Bo Qin (`KPABELLW14Engine`, see paper [*Practical Direct Chosen Ciphertext Secure Key-Policy Attribute-Based Encryption with Public Ciphertext Test*](http://link.springer.com/chapter/10.1007/978-3-319-11212-1_6));\n- CCA2-secure online/offline KP-ABE proposed by me, Jianwei Liu, Qianhong Wu, Bo Qin and Kaitai Liang (`OOKPABELLW16Engine`, see paper [*Online/Offline Public-Index Predicate Encryption for Fine-Grained Mobile Access Control*](http://link.springer.com/chapter/10.1007/978-3-319-45741-3_30)).\n\nCP-ABE includes:\n\n- Bethencourt-Sahai-Waters large-universe CP-ABE (`CPABEBSW07Engine`, see paper [*Ciphertext-Policy Attribute-Based Encryption*](http://ieeexplore.ieee.org/abstract/document/4223236/));\n- Rouselakis-Waters large-universe CP-ABE (`CPABERW13Engine`, see paper [*Practical Constructions and New Proof Methods for Large Universe Attribute-Based Encryption*](http://dl.acm.org/citation.cfm?id=2516672));\n- Hohenberger-Waters online/offline CP-ABE (`OOCPABEHW14Engine`, see paper [*Online/Offline Attribute-Based Encryption*](http://link.springer.com/chapter/10.1007/978-3-642-54631-0_17));\n- CCA2-secure CP-ABE proposed by me, Jianwei Liu, Qianhong Wu, and Bo Qin (`KPABELLW14Engine`, the paper is in the manuscript form);\n- CCA2-secure online/offline KP-ABE proposed by me, Jianwei Liu, Qianhong Wu, Bo Qin and Kaitai Liang (`OOKPABELLW16Engine`, see paper [*Online/Offline Public-Index Predicate Encryption for Fine-Grained Mobile Access Control*](http://link.springer.com/chapter/10.1007/978-3-319-45741-3_30)).\n\nSee `src/test/java/com/example/encryption/abe/KPABEEngineJUnitTest` and `src/test/java/com/example/encryption/abe/CPABEEngineJUnitTest` for JUnit test example.\n\n### Self-Extractable Predicate Encryption (SEPE)\n\nThe concept of SEPE was introduced by Bo Qin, me, Jianwei Liu and Qianhong Wu. The paper has been submitted to *The 37th IEEE International Conference on Distributed Computing Systems (ICDCS 2017)*, under review.\n\nRespectively see JUnit test examples in different kinds of encryption schemes under package `src/test/java/com/example/encryption/`.\n\n## Contact\n\nCloudCrypto is mainly developed by Weiran Liu.\n\nFeel free to contact me at [footman_900217@126.com](mailto:footman_900217@126.com), or at [liuweiran900217@gmail.com](mailto:liuweiran900217@gmail.com). \n\nI can receive the emails from both mailboxs. I would mainly reply the emails using 126 since sometimes it would be difficult to reply emails using Gmail from China."
 },
 {
  "repo": "agievich/bee2",
  "language": "C",
  "readme_contents": "Bee2: a cryptographic library\n=============================\n\n![](img/bee2.png)\n\n[![Build Status](https://travis-ci.com/agievich/bee2.svg?branch=master)](https://travis-ci.com/agievich/bee2)\n[![Coverity Static Analysis](https://scan.coverity.com/projects/8544/badge.svg)](https://scan.coverity.com/projects/agievich-bee2)\n[![Coverage Analysis](https://codecov.io/gh/agievich/bee2/coverage.svg?branch=master)](https://codecov.io/gh/agievich/bee2?branch=master)\n\nWhat is Bee2?\n-------------\n\nBee2 is a cryptographic library which implements cryptographic \nalgorithm and protocols standardized in Belarus. \n\nBee2 fully supports the following standards \n(see [apmi.bsu.by/resources/std.html](http://apmi.bsu.by/resources/std.html)):\n\n1. STB 34.101.31 (belt): data encryption and integrity algorithms.\n2. STB 34.101.45 (bign): digital signature and key transport algorithms \n   over elliptic curves.\n3. STB 34.101.47 (brng): cryptographic algorithms of pseudorandom number \n   generation + one-time passwords.\n4. STB 34.101.60 (bels): secret sharing algorithms.\n5. STB 34.101.66 (bake): key establishment protocols over elliptic curves. \n6. STB 34.101.77 (bash): sponge-based algorithms. \n\nBee2 partially supports cryptographic data formats defined in the following \nstandards:\n\n7. STB 34.101.78 (bpki): a PKI profile. \n\nAdditionally, Bee2 implements digital signature algorithms standardized in \nRussia and Ukraine.\n\nBuild\n-----\n```\nmkdir build\ncd build\ncmake [-DCMAKE_BUILD_TYPE={Release|Debug|Coverage|ASan|ASanDbg|MemSan|MemSanDbg|Check}]\\\n      [-DBUILD_FAST=ON]\\\n      [-DBASH_PLATFORM={BASH_32|BASH_64|BASH_AVX2|BASH_AVX512|BASH_NEON}]\\\n      ..\nmake\n[make test]\n[make install]\n```\n\n> **Note**. To build on Windows you need to specify compiler and use the\ncompiler-specific `make` command. The following example is for the MinGW\ncompiler:\n> ```\n> mkdir build\n> cd build\n> cmake [-DCMAKE_BUILD_TYPE={Release|Debug|Coverage|ASan|ASanDbg|MemSan|MemSanDbg|Check}]\\\n>       [-DBUILD_FAST=ON]\\\n>       [-DBASH_PLATFORM={BASH_32|BASH_64|BASH_AVX2|BASH_AVX512|BASH_NEON}]\\\n>       -G \"MinGW Makefiles\"\\\n>       ..\n> mingw32-make\n> [mingw32-make test]\n> [mingw32-make install]\n> ```\n\nBuild types (`Release` by default):\n   \n*  `Coverage` \u2014 test coverage;\n*  `ASan`, `ASanDbg` \u2014 [address sanitizer](http://en.wikipedia.org/wiki/AddressSanitizer);\n*  `MemSan`, `MemSanDbg` \u2014 [memory sanitizer](http://code.google.com/p/memory-sanitizer/);\n*  `Check` \u2014 strict compile rules.\n\nThe `BUILD_FAST` option (`OFF` by default) switches from safe (constant-time) \nfunctions to fast (non-constant-time) ones.\n\nThe `BASH_PLATFORM` option (`BASH_64` by default) requests to use a specific \nimplementation of the STB 34.101.77 algorithms optimized for a given hardware platform. \nThe request may be rejected if it conflicts with other options.\n\nLicense\n-------\n\nBee2 is released under the terms of the GNU General Public License version 3\n(GNU GPLv3). See [LICENSE](LICENSE) for more information.\n\nRelated projects\n----------------\n\n* [Bee2evp](https://github.com/bcrypto/bee2evp): an OpenSSL engine over Bee2;\n* [Bee2j](https://github.com/bcrypto/bee2j): a Java wrapper over Bee2.\n\nWhat is the logo?\n-----------------\n\nThe logo of Bee2 is taken from a self-portrait engraving by \n[Francysk Skaryna](https://en.wikipedia.org/wiki/Francysk_Skaryna), \nthe famous Belarusian medieval printer, enlightener, translator and writer. \nThe engraving is full of riddles, mysteries and cryptograms. One version \nis that a bee in the right-bottom corner, our logo, designates the \nconstellation known as *Apes* (Latin for bees) in Skaryna's time. This \nconstellation was later renamed in *Musca Borelias* (Latin for northern \nfly) and then absorbed by *Aries*.\n\n"
 },
 {
  "repo": "Kitura/BlueECC",
  "language": "Swift",
  "readme_contents": "<p align=\"center\">\n    <a href=\"http://kitura.io/\">\n        <img src=\"https://raw.githubusercontent.com/IBM-Swift/Kitura/master/Sources/Kitura/resources/kitura-bird.svg?sanitize=true\" height=\"100\" alt=\"Kitura\">\n    </a>\n</p>\n\n\n<p align=\"center\">\n    <a href=\"https://ibm-swift.github.io/BlueECC/index.html\">\n    <img src=\"https://img.shields.io/badge/apidoc-BlueECC-1FBCE4.svg?style=flat\" alt=\"APIDoc\">\n    </a>\n    <a href=\"https://travis-ci.org/IBM-Swift/BlueECC\">\n    <img src=\"https://travis-ci.org/IBM-Swift/BlueECC.svg?branch=master\" alt=\"Build Status - Master\">\n    </a>\n    <img src=\"https://img.shields.io/badge/os-macOS-green.svg?style=flat\" alt=\"macOS\">\n    <img src=\"https://img.shields.io/badge/os-linux-green.svg?style=flat\" alt=\"Linux\">\n    <img src=\"https://img.shields.io/badge/license-Apache2-blue.svg?style=flat\" alt=\"Apache 2\">\n    <a href=\"http://swift-at-ibm-slack.mybluemix.net/\">\n    <img src=\"http://swift-at-ibm-slack.mybluemix.net/badge.svg\" alt=\"Slack Status\">\n    </a>\n</p>\n\n# BlueECC\n\nA cross platform Swift implementation of Elliptic Curve Digital Signature Algorithm (ECDSA) and Elliptic Curve Integrated Encryption Scheme (ECIES). This allows you to sign, verify, encrypt and decrypt using elliptic curve keys.\n\n## Swift version\n\nThe latest version of BlueECC requires **Swift 4.1** or later. You can download this version of the Swift binaries by following this [link](https://swift.org/download/). Compatibility with other Swift versions is not guaranteed.\n\n## Usage\n\n#### Add dependencies\n\nAdd the `BlueECC` package to the dependencies within your application\u2019s `Package.swift` file. Substitute `\"x.x.x\"` with the latest `BlueECC` [release](https://github.com/IBM-Swift/BlueECC/releases).\n\n```swift\n.package(url: \"https://github.com/IBM-Swift/BlueECC.git\", from: \"x.x.x\")\n```\n\nAdd `CryptorECC` to your target's dependencies:\n\n```swift\n.target(name: \"example\", dependencies: [\"CryptorECC\"]),\n```\n\n#### Import package\n\n```swift\nimport CryptorECC\n```\n\n### Getting Started\n\n#### Elliptic curve private key\n\nyou can generate an ECPrivate key using BlueECC.\n\n```swift\nlet p256PrivateKey = try ECPrivateKey.make(for: .prime256v1)\n```\n\nYou can then view the key in it's PEM format as follows:\n\n```swift\nlet privateKeyPEM = p256PrivateKey.pemString\n```\n\nThe following curves are supported:\n- prime256v1\n- secp384r1\n- secp521r1\n\nAlternatively, you may generate private key using a third party provider:\n\n- You can generate a `p-256` private key as a `.p8` file for Apple services from [https://developer.apple.com/account/ios/authkey](https://developer.apple.com/account/ios/authkey/). This will produce a key that should be formatted as follows:\n```swift\nlet privateKey =\n\"\"\"\n-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQglf7ztYnsaHX2yiHJ\nmeHFl5dg05y4a/hD7wwuB7hSRpmhRANCAASKRzmboLbG0NZ54B5PXxYSU7fvO8U7\nPyniQCWG+Agc3bdcgKU0RKApWYuBJKrZqyqLB2tTlgdtwcWSB0AEzVI8\n-----END PRIVATE KEY-----\n\"\"\"\n```\n\n- You can use OpenSSL [Command Line Elliptic Curve Operations](https://wiki.openssl.org/index.php/Command_Line_Elliptic_Curve_Operations).  \n\nThe following commands generate private keys for the three supported curves as `.pem` files:\n```\n// p-256\n$ openssl ecparam -name prime256v1 -genkey -noout -out key.pem\n// p-384\n$ openssl ecparam -name secp384r1 -genkey -noout -out key.pem\n// p-521\n$ openssl ecparam -name secp521r1 -genkey -noout -out key.pem\n```\nThese keys will be formatted as follows:\n```swift\nlet privateKey =\n\"\"\"\n-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIJX+87WJ7Gh19sohyZnhxZeXYNOcuGv4Q+8MLge4UkaZoAoGCCqGSM49\nAwEHoUQDQgAEikc5m6C2xtDWeeAeT18WElO37zvFOz8p4kAlhvgIHN23XIClNESg\nKVmLgSSq2asqiwdrU5YHbcHFkgdABM1SPA==\n-----END EC PRIVATE KEY-----\n\"\"\"\n```\n\nThe key string can then be used to initialize an `ECPrivateKey` instance:\n```swift\nlet eccPrivateKey = try ECPrivateKey(key: privateKey)\n```\n\n####  Elliptic curve public  key\n\nYou can use OpenSSL to generate an elliptic curve public key `.pem` file from any of the above elliptic curve private key files:\n```\n$ openssl ec -in key.pem -pubout -out public.pem\n```\nThis will produce a public key formatted as follows:\n```swift\nlet publicKey =\n\"\"\"\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEikc5m6C2xtDWeeAeT18WElO37zvF\nOz8p4kAlhvgIHN23XIClNESgKVmLgSSq2asqiwdrU5YHbcHFkgdABM1SPA==\n-----END PUBLIC KEY-----\n\"\"\"\n```\nThese keys can then be used to initialize an `ECPrivateKey` instance:\n```swift\nlet eccPublicKey = try ECPublicKey(key: publicKey)\n```\n\nAlternatively, you can extract the public key from your `ECPrivateKey`:\n\n```swift\nlet eccPublicKey = try eccPrivateKey.extractPublicKey()\nprint(eccPublicKey.pemString)\n```  \n\n#### Signing String or Data\n\nBlueECC extends `String` and `Data` so you can call sign directly on your plaintext using an EC private key. This creates an `ECSignature` containing the r and s signature values:\n\n```swift\nlet message = \"hello world\"\nlet signature = try message.sign(with: eccPrivateKey)\n```\n\n#### Verifying the signature\n\nUse the public key to verify the signature for the plaintext:\n```swift\nlet verified = signature.verify(plaintext: message, using: eccPublicKey)\nif verified {\n    print(\"Signature is valid for provided plaintext\")\n}\n```\n\n#### Encrypting String or Data\n\nUse the public key to encrypt your plaintext String or Data to encrypted Data or an encrypted Base64Encoded String:\n```swift\nlet encryptedData = try \"Hello World\".encrypt(with: eccPublicKey)\nprint(encryptedData.base64EncodedString())\n```\n\n#### Decrypting to plaintext\n\nUse the private key to decrypt the encrypted Data or Base64Encoded String to plaintext Data or UTF8 String:\n\n```swift\nlet decryptedData = try encryptedData.decrypt(with: eccPrivateKey)\nprint(String(data: decryptedData, encoding: .utf8))\n```\n\n#### Encryption interoperability\n\nCross platform encryption and decryption is currently only supported with `prime256v1` curves. The `secp384r1` and `secp521r1` curves do not support Linux encryption with Apple platform decryption and vice versa.\n\nIf you would like to interoperate with this repo,\nThe following describes the encryption process:\n- Generate an ephemeral EC key pair\n- Use ECDH of your EC pair to generate a symmetric key\n- Use SHA256 ANSI x9.63 Key Derivation Function with the ephemeral public key to generate a 32 byte key\n- Use the first 16 bytes as an AES-GCM key\n- Use the second 16 bytes as the initialization vector (IV)\n- Use aes_128_gcm to encrypt the plaintext and generate a 16 byte GCM tag\n- Send the ephemeral public key, encrypted data and GCM tag\n\nThis is equivalent to: `kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM` when using apple security.  \n\n## API Documentation\n\nFor more information visit our [API reference](https://ibm-swift.github.io/BlueECC/index.html).\n\n## Community\nWe love to talk server-side Swift, and Kitura. Join our [Slack](http://swift-at-ibm-slack.mybluemix.net/) to meet the team!\n\n## License\nThis library is licensed under Apache 2.0. Full license text is available in [LICENSE](https://github.com/IBM-Swift/BlueECC/blob/master/LICENSE.txt).\n"
 },
 {
  "repo": "PacktPublishing/Hands-On-Cryptography-with-Python",
  "language": "Python",
  "readme_contents": "# Hands-On Cryptography with Python\n\n<a href=\"https://www.packtpub.com/networking-and-servers/hands-cryptography-python?utm_source=repository&utm_medium=github&utm_campaign=repository&utm_term=9781789534443\"><img src=\"https://d255esdrn735hr.cloudfront.net/sites/default/files/imagecache/ppv4_main_book_cover/B11735.png\" alt=\"Hands-On Cryptography with Python\" height=\"256px\" align=\"right\"></a>\n\nThis is the code repository for [Hands-On Cryptography with Python](https://www.packtpub.com/networking-and-servers/hands-cryptography-python), published by Packt.\n\n**Leverage the power of Python to encrypt and decrypt data**\n\n## What is this book about?\nCryptography is essential for protecting sensitive information, but it is often performed inadequately or incorrectly.\n\nThis book covers the following exciting features:\n* Protect data with encryption and hashing\n* Explore and compare various encryption methods\n* Encrypt data using the Caesar Cipher technique\n* Make hashes and crack them\n* Learn how to use three NIST-recommended systems: AES, SHA, and RSA\n\nIf you feel this book is for you, get your [copy](https://www.amazon.com/dp/1789534445) today!\n\n<a href=\"https://www.packtpub.com/?utm_source=github&utm_medium=banner&utm_campaign=GitHubBanner\"><img src=\"https://raw.githubusercontent.com/PacktPublishing/GitHub/master/GitHub.png\" \nalt=\"https://www.packtpub.com/\" border=\"5\" /></a>\n\n\n## Instructions and Navigations\nAll of the code is organized into folders. For example, Chapter01.\n\nThe code will look like the following:\n```\n alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n str_in = raw_input(\"Enter message, like HELLO: \")\n\n n = len(str_in)\n str_out = \"\"\n\n for i in range(n):\n    c = str_in[i]\n    loc = alpha.find(c)\n    print i, c, loc, \n    newloc = loc + 3\n    str_out += alpha[newloc]\n    print newloc, str_out\n\n print \"Obfuscated version:\", str_out\n```\n\n**Following is what you need for this book:**\nHands-On Cryptography with Python is for security professionals who want to learn to encrypt and evaluate data, and compare different encryption methods.\n\nWith the following software and hardware list you can run all code files present in the book (Chapter 1-3).\n\n### Software and Hardware List\n\n| Chapter  | Software required                   | OS required                        |\n| -------- | ------------------------------------| -----------------------------------|\n| 1-3      | Python (latest version)             | macOS or Ubuntu/Linux              |\n\n\nWe also provide a PDF file that has color images of the screenshots/diagrams used in this book. [Click here to download it](https://www.packtpub.com/sites/default/files/downloads/HandsOnCryptographywithPython_ColorImages.pdf).\n\n### Related products <Paste books from the Other books you may enjoy section>\n* Python Penetration Testing Cookbook [[Packt]](https://www.packtpub.com/networking-and-servers/python-penetration-testing-cookbook?utm_source=repository&utm_medium=github&utm_campaign=repository&utm_term=9781784399771) [[Amazon]](https://www.amazon.com/dp/1784399779)\n\n* Python For Offensive PenTest [[Packt]](https://www.packtpub.com/networking-and-servers/python-offensive-pentest?utm_source=repository&utm_medium=github&utm_campaign=repository&utm_term=9781788838979) [[Amazon]](https://www.amazon.com/dp/1788838971)\n\n## Get to Know the Author\n**Sam Bowne**\nhas been teaching computer networking and security classes at City College of San Francisco since 2000. He has given talks and hands-on training at DEFCON, HOPE, B-Sides SF, B-Sides LV, BayThreat, LayerOne, Toorcon, and many other schools and conferences. He has done his PhD and CISSP. He is a DEF CON Black-Badge co-winner.\n\n### Suggestions and Feedback\n[Click here](https://docs.google.com/forms/d/e/1FAIpQLSdy7dATC6QmEL81FIUuymZ0Wy9vH1jHkvpY57OiMeKGqib_Ow/viewform) if you have any feedback or suggestions.\n\n"
 },
 {
  "repo": "blowdart/Cryptography101",
  "language": "C#",
  "readme_contents": ""
 },
 {
  "repo": "PacktPublishing/Hands-On-Cryptography-with-Java",
  "language": "Java",
  "readme_contents": "# Hands-On-Cryptography-with-Java\nHands-On Cryptography with Java, published b y Packt\n\nThis is the code repository for [Hands-On Cryptography with Java [Video]](https://www.packtpub.com/application-development/hands-cryptography-java-video), published by [Packt](https://www.packtpub.com/?utm_source=github). It contains all the supporting project files necessary to work through the video course from start to finish.\n## About the Video Course\nSecurity is paramount for any application. Cryptography occurs all across software fields: it protects all HTTPS traffic between browsers, encrypts phone storage against prying eyes, and can even hide files inside other files through a technique called steganography. This course is for developers looking to design a system that uses cryptography, rather than designing new algorithms. Most developers simply need to put the right pieces together to make their own system work.\nIn this course, you will break down the concepts behind cryptography into simple lessons, covering terminology, algorithms, standards, and encryption/decryption techniques. We will also walk through how cryptographic systems are hacked to bypass (rather than break) their cryptographic capabilities. \n<DIV class=book-info-will-learn-text>\n<UL>\n<LI>The course answers questions such as:\n<LI>What is cryptography used for?\n<LI>What are keys and where do they go?\n<LI>Why do networked systems sometimes give certificate validation errors?\n<LI>If I need to encrypt something, how should I do that?\n</LI></UL></DIV>\nBy the end of this course, you will recognize cryptographic problems and understand the right knowledge to apply a verifiable solution.\n\n<H2>What You Will Learn</H2>\n<DIV class=book-info-will-learn-text>\n<UL>\n<LI>Develop applications that use an existing reliable cryptography\n<LI>Build complex integrations with other systems, taking advantage of worldwide public key infrastructures and certificates\n<LI>Identify hacking risks in your own and other cryptographic systems and how to fix them\n<LI>Discover cryptographic terms used to describe any system you work on or with\n<LI>Design functioning, well-performing applications that use seamless cryptography\n</LI></UL></DIV>\n\n## Instructions and Navigation\n### Assumed Knowledge\nThis video course is for developers whose applications require encryption, or integration with an external cryptographic system. The course requires knowledge of Java programming but does not require a degree in mathematics or advanced computer science.\nJava developers building standard applications that require encryption, developers looking to understand flaws in cryptographic systems, and developers who do not want flaws in their cryptographic systems will benefit from this course.\n### Technical Requirements\nThis course has the following requirements:<br/>\nOS: Windows 7 or Windows 10<br/>\nBrowser: Google Chrome, Latest Version<br/>\nCode Editor: Eclipse, IntelliJ, NetBeans<br/>\nOthers: Java 8 or higher<br/>\nProcessor: Intel Core i7 or equivalent<br/>\nMemory: 8 GB RAM<br/>\nStorage: 35 GB available space<br/>\n\n\n\n\n\n\n## Related Products\n* [Hands-On Cryptography with Python](https://www.packtpub.com/networking-and-servers/hands-cryptography-python)\n\n* [Security Engineering for the IoT [Video]](https://www.packtpub.com/networking-and-servers/security-engineering-iot-video)\n\n* [Cryptography with Python [Video]](https://www.packtpub.com/networking-and-servers/cryptography-python-video)\n"
 },
 {
  "repo": "Co-dfns/mystika",
  "language": "APL",
  "readme_contents": "\ufeff# Mystika\n\nThe Mystika project seeks to deliver an industrial quality, high-performance cryptographic library with forward-looking features and very high-level code. The idea is to deliver a cryptographic foundation for critical software that consists of a small, efficient, and easy to audit code base built on very high-level coding practices. Here are some key goals:\n\n* Demonstrably Reliable\n* Safe and future-worthy cryptography only\n* Protocol level compatibility with existing standards when possible\n* Easy to use\n\n## Dictionary\n\nHere are the verbs, nouns, adverbs, and conjunctions provided by this project.\n\n### Data Structures\n\n    BA \u235d Bignum Array\n    PA \u235d Bigpoly Array\n    bf \u235d Bignum function\n    NBA \u235d Nested bignum Array\n\nA bignum array is an array where the 0th axis is used for the places of a number in a given base, and the first 3 elements of that axis are reserved for metadata.\nThe metadata has the following format:\n\n* the 0th element specifies the base, which must have the form B for a real bignum or 0JB for a complex bignum where B<2*16\n* the 1st element indicates the number of places that the radix point is shifted to the left (a negative number indicates that the radix point is shifted to the right)\n* the 2nd element is 1 for a negative real bignum and zero otherwise (even in the complex case).\n\nThe remaining elements provide the base B expansion of the abslute value of the number in the real case (i.e. B complement notation is not used), and the base 0JB expans of the number in the complex case.\n\nA bigpoly array is a special type of bignum array in which the 1st axis is reserved for the coefficients of a polynomial in one variable, say x, such that the ith element is the coefficient of the ith power of x.\n\n### APL Primitive Functions\n\n    BA\u2190ima BA           \u235d 11\u25cb over bignums\n    BA\u2190rea BA           \u235d 9\u25cb over bignums\n    BA\u2190cnj BA           \u235d monadic + over bignums\n    BA\u2190BA add BA        \u235d dyadic + over bignums\n    BA\u2190{BA} sub BA      \u235d - over bignums\n    BA\u2190BA mul BA        \u235d dyadic \u00d7 over bignums\n    BA\u2190{BA} cat BA      \u235d \u236a over bignums\n    BA\u2190rav BA           \u235d , over bignums (monadically: , also works).\n    BA\u2190{A} trn BA       \u235d \u2349 over bignums\n    BA\u2190{A} rot BA       \u235d \u233d over bignums\n    BA\u2190{A} rof BA       \u235d \u2296 over bignums\n    BA\u2190{A} pic BA       \u235d \u2283 over bignums\n    BA\u2190{A} sqd BA       \u235d \u2337 over bignums\n    A\u2190BA eql BA         \u235d = over Bignums\n    A\u2190BA neq BA         \u235d \u2260 over Bignums\n    A\u2190BA leq BA         \u235d \u2264 over Bignums\n    A\u2190BA geq BA         \u235d \u2265 over Bignums\n    A\u2190BA gth BA         \u235d > over Bignums\n    A\u2190BA lth BA         \u235d < over Bignums\n    BA\u2190flo BA           \u235d monadic \u230a over bignums\n    BA\u2190cel BA           \u235d monadic \u2308 over bignums\n    BA\u2190BA min BA        \u235d dyadic \u230a over bignums\n    BA\u2190BA max BA        \u235d dyadic \u2308 over bignums\n    BA\u2190abs BA           \u235d monadic | over bignums\n    BA\u2190{A} rho BA       \u235d \u2374 over bignums\n    BA\u2190{BA} eps BA      \u235d \u220a over bignums\n    BA\u2190BA ind BA        \u235d dyadic \u2373 over bignums\n    BA\u2190rol BA           \u235d monadic ? over bignums\n    BA\u2190tke BA           \u235d dyadic \u2191 over bignums\n    BA\u2190drp BA           \u235d dyadic \u2193 over bignums \n    BA\u2190spl BA           \u235d monadic \u2193 over bignums\n    BA\u2190mix NBA          \u235d monadic \u2191 over bignums\n    BA\u2190{BA} div BA      \u235d \u00f7 over bignums\n    BA\u2190BA mod BA        \u235d | over bignums\n    BA\u2190snh BA           \u235d 5\u25cb over bignums\n    BA\u2190cis BA           \u235d 12\u25cb over bignums\n    BA\u2190tan BA           \u235d 3\u25cb over bignums\n    BA\u2190sin BA           \u235d 1\u25cb over bignums\n\n### APL Primitive Operators\n\n    BA\u2190BA bf dot bf BA  \u235d f.g over bignums\n    BA\u2190BA bf out BA     \u235d \u2218.f over bignums\n    BA\u2190bf red BA        \u235d f/ over bignums\n    BA\u2190bf scn BA        \u235d f\\ over bignums\n    BA\u2190bf rdf BA        \u235d f\u233f over bignums\n    BA\u2190bf scf BA        \u235d f\u2340 over bignums\n    BA\u2190BA bf pop bg BA  \u235d f\u2363g over bignums\n    BA\u2190{BA}bf rop k BA  \u235d f\u2364k over bignums\n\n### Numerical Algorithms\n    \n    PA\u2190PA pmul PA       \u235d \u00d7 over bigpolys\n    BA\u2190mrp BA           \u235d Miller-Rabin primality test\n    BA\u2190sgp BA           \u235d Sophie-Germain primality test\n    BA\u2190{BA}rsg BA       \u235d Creates random Sophie-Germain prime\n    BA\u2190{BA}rpr BA       \u235d creates random prime\n    \n### Hashing\n\n### Cyphers\n\n    \u237a \u2375\u2190key message \u22c4 A\u2190A AES.ecr A \u235dAES encrypt\n    \u237a \u2375\u2190key message \u22c4 A\u2190A AES.dcr A \u235dAES decrypt\n\n### Protocols\n\n### Application Utilities\n\n    H\u2190{B} hex A\n    A or BA\u2190b64 BA or A \u235d base 64 \n\nConverts an integer array S into a hexadecimal string representing the data in row major order. Each element is assumed to represent B bits of data. If B is not provided, then the largest value in the array is used to calculate the number of bits to use per element.\n\n## Developer's Guide\n\nWorking with the Mystika code base involves writing tests in the `tests/` directory and writing code in the `[a-z].cd` files in the root directory. Code is loaded into the `mystika` workspace using the `LOAD` function. The `UT` and `util` namespaces provide testing harness and utility function support for developers.\n\n### Useful Developer Functions\n\n    util.test <name> \u235d Run the <name>_tests.dyalog test in tests/\n    util.TEST        \u235d Run all tests in tests/\n    util.pp          \u235d Equivalent to \u22a2 but with a display as a side-effect\n    LOAD             \u235d Load the latest mystika source into the workspace\n"
 },
 {
  "repo": "ctz/cifra",
  "language": "C",
  "readme_contents": "# Cifra\nCifra is a collection of cryptographic primitives targeted at embedded use.\n\n[![Build Status](https://travis-ci.org/ctz/cifra.svg?branch=main)](https://travis-ci.org/ctz/cifra)\n\n[![Documentation](https://readthedocs.org/projects/pip/badge/)](https://cifra.readthedocs.org/en/latest/)\n\n[![Analysis Status](https://scan.coverity.com/projects/4324/badge.svg)](https://scan.coverity.com/projects/4324)\n\n[![Coverage Status](https://coveralls.io/repos/ctz/cifra/badge.svg?branch=coveralls-scan)](https://coveralls.io/r/ctz/cifra?branch=coveralls-scan)\n\n## Aims\nIn order of descending emphasis, cifra aims for:\n\n* **Clarity** and **simplicity**.\n* Countermeasures for side channel leaks inherent in some\n  algorithms.\n* Suitability for embedded use.  Particularly: cifra uses an\n  absolute minimum of the standard C library and is reasonably\n  efficient with respect to code and data space.\n\n## Features\n* **AES** in the **GCM**, **CCM**, **EAX** and **OCB3** authenticated encryption modes.\n* **NORX** authenticated encryption system.\n* **SHA224**, **SHA256**, **SHA384** and **SHA512** hash functions (including **HMAC** and **PBKDF2**).\n* **SHA3-224**, **SHA3-256**, **SHA3-384**, **SHA3-512** hash functions (FIPS 202 compatible).\n* **ChaCha20** and **Salsa20** stream ciphers.\n* **Poly1305** one time MAC.\n* 100% code coverage by line, zero static analysis defects, valgrind-clean.\n\nAdditionally cifra imports curve25519 from elsewhere (&mu;NaCl, NaCl, tweetNaCl,\nAdam Langley's curve25519-donna) for comparison between various implementations\non embedded targets.\n\n## Documentation\nAvailable at [Read the Docs](https://cifra.readthedocs.org/en/latest/).\n\n## Testing\nThere is quite a lot of testing available:\n\n* **Host builds**: run `make test` in the `src` directory.  This builds and\n  runs assorted test programs.\n* **Emulated embedded builds**: run `make test` in the `src/arm` directory.  This\n  expects to find `qemu-system-gnuarmeclipse` on the path.  These tests assume\n  a Cortex-M3 target.\n* **Cortex-M0 on-target tests**: run `make test.stm32f0` in the `src/arm` directory.\n  This expects to find `openocd` on the path, with an STM32F0xx attached via\n  stlinkv2.  It uses ARM semihosting to report results.\n* **Cortex-M3/4 on-target tests**: run `make test.stm32f1` or `make test.stm32f3` as above.\n\nAdditionally all embedded targets expect to find the `arm-none-eabi` toolchain\nto be on the path.\n\n## Measurements\nAll measurements performed at `-Os` (optimise for space), on the following MCUs: \n\nCore       | Part number   | Price (1s)   | Max clock  | Flash | SRAM\n---------- | ------------- | ------------ | ---------- | ----- | -----\nCortex-M0  | STM32F030F4P6 | 1.17EUR      | 48MHz      | 16KB  | 4KB\nCortex-M3  | STM32F103C8T6 | 2.87EUR      | 72MHz      | 64KB  | 20KB\nCortex-M4F | STM32F303K6T6 | 4.53EUR      | 72MHz      | 32KB  | 12KB\n\nMore measurements are available for AEAD modes on my blog post:\n[Benchmarking Modern Authenticated Encryption on \u20ac1 devices](http://jbp.io/2015/06/01/modern-authenticated-encryption-for-1-euro/).\n\n## AES\nThis test does a key schedule, then encrypts one block.\n\n### 128-bit key\nCore       | Cycles (key schedule + block) | Cycles (key schedule) | Cycles (block) | Stack | Code size\n---------- | ----------------------------- | --------------------- | -------------- | ----- | ---------\nCortex-M0  | 7156                          | 2147                  | 5009           | 312B  | 1020B    \nCortex-M3  | 4692                          | 1591                  | 3101           | 300B  | 960B     \nCortex-M4F | 4591                          | 1571                  | 3020           | 300B  | 960B     \n\n### 256-bit key\nCore       | Cycles (key schedule + block) | Cycles (key schedule) | Cycles (block) | Stack | Code size\n---------- | ----------------------------- | --------------------- | -------------- | ----- | ---------\nCortex-M0  | 10611                         | 3650                  | 6961           | 396B  | 1100B    \nCortex-M3  | 6735                          | 2450                  | 4285           | 380B  | 1048B    \nCortex-M4F | 6588                          | 2416                  | 4172           | 380B  | 1048B    \n\n## AES128-GCM\nThis test encrypts and authenticates a 16 byte message,\nwith 16 bytes additionally authenticated data.  It includes\nthe initial key schedule.\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 57022  | 796B  | 2600B\nCortex-M3  | 44306  | 812B  | 2644B\nCortex-M4F | 43657  | 812B  | 2644B\n\n## AES128-EAX\nThis test encrypts and authenticates a 16 byte message,\nwith 16 bytes additionally authenticated data.  It includes\nthe initial key schedule.\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 50564  | 932B  | 2836B\nCortex-M3  | 32855  | 932B  | 2780B\nCortex-M4F | 32159  | 932B  | 2780B\n\n## AES128-CCM\nThis test encrypts and authenticates a 16 byte message,\nwith 16 bytes additionally authenticated data.  It includes\nthe initial key schedule.\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 37677  | 772B  | 2280B\nCortex-M3  | 24462  | 780B  | 2256B\nCortex-M4F | 23949  | 780B  | 2256B\n\n## NORX32\nThis test encrypts and authenticates a 16 byte message,\nwith 16 bytes additionally authenticated data.\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 10692  | 320B  | 1636B\nCortex-M3  | 6909   | 320B  | 1820B\nCortex-M4F | 6855   | 320B  | 1820B\n\n## ChaCha20\nThis test encrypts a 64 byte message.\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 5981   | 564B  | 1416B\nCortex-M3  | 3487   | 544B  | 1328B\nCortex-M4F | 3468   | 544B  | 1328B\n\n(For comparison with AES, add an AES256 key schedule plus 4 blocks.\nThat's about 33K cycles.)\n\n## Salsa20\nThis test encrypts a 64 byte message.\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 6173   | 560B  | 1412B\nCortex-M3  | 3320   | 552B  | 1272B\nCortex-M4F | 3311   | 552B  | 1272B\n\n## SHA256\nThis test hashes the empty string (one compression function invocation).\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 11561  | 312B  | 1760B\nCortex-M3  | 6530   | 300B  | 1708B\nCortex-M4F | 6278   | 300B  | 1708B\n\n## SHA512\nThis test hashes the empty string (one compression function invocation).\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 38447  | 796B  | 2888B\nCortex-M3  | 28771  | 836B  | 2988B\nCortex-M4F | 28777  | 836B  | 2980B\n\n## SHA3-256\nThis test hashes the empty string (one sponge permutation).\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 93648  | 848B  | 2212B\nCortex-M3  | 74321  | 856B  | 2164B\nCortex-M4F | 72215  | 856B  | 2140B\n\n## SHA3-512\nThis test hashes the empty string (one sponge permutation).\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 92565  | 880B  | 2212B\nCortex-M3  | 73509  | 888B  | 2164B\nCortex-M4F | 71419  | 888B  | 2140B\n\n## HMAC-SHA256\nThis test computes a MAC with a 32 byte key over the\nmessage \"hello world\".\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 48924  | 1328B | 2200B\nCortex-M3  | 28333  | 1324B | 2132B\nCortex-M4F | 27337  | 1324B | 2132B\n\n## Poly1305-AES\nThis test computes a MAC with a 32 byte key over the\nmessage \"hello world\".  It includes the AES nonce\nprocessing.\n\nCore       | Cycles | Stack | Code size\n---------- | ------ | ----- | ---------\nCortex-M0  | 15719  | 704B  | 1920B\nCortex-M3  | 11328  | 696B  | 1964B\nCortex-M4F | 10706  | 696B  | 1932B\n\n## Curve25519\nThis test is one point multiplication.\n\nThis uses the implementation from [&mu;NaCl](http://munacl.cryptojedi.org/curve25519-cortexm0.shtml)\nby D\u00fcll, Haase, Hinterw\u00e4lder, Hutter, Paar, S\u00e1nchez and Schwabe.\n\nCore       | Cycles  | Stack | Code size\n---------- | ------- | ----- | ---------\nCortex-M0  | 4070271 | 464B  | 5596B\nCortex-M3  | 3720363 | 448B  | 5536B\nCortex-M4F | 3720105 | 448B  | 5536B\n\nSee [curve25519-shootout](curve25519-shootout.md) for comparitive measurements\nfor other curve25519 implementations.\n\n## C library requirements\nCifra requires `memcpy`, `memset`, and `abort`.\n\n## Future\n* ~~Keccak hash function (aka SHA3)~~.\n* ~~Poly1305 one-time MAC~~.\n* Constant time curve25519 for Cortex-M4F using the FPU.\n* Constant time curve25519 for Cortex-M3 (avoiding the variable-time multiplier).\n\n## Notable past bugs/advisories\n* [Issue #2](https://github.com/ctz/cifra/issues/2): in all versions before commit\n  [d62aa26e](https://github.com/ctz/cifra/commit/d62aa26e2c3c49e5b8a4298644cff290406d9357)\n  (September 16th 2015) too much padding was added when hashing messages of certain\n  lengths.  Specifically, messages whose length satisfied `len % 64 = 55` for\n  SHA1/SHA224/SHA256 or `len % 128 = 119` for SHA384/SHA512.  SHA3 was not affected.\n  Better testing is now in place.\n* [Issue #3](https://github.com/ctz/cifra/issues/3): in all versions before commit\n  [82d77cd8](https://github.com/ctz/cifra/commit/82d77cd8323f6d4473fcb68517752a778970138d)\n  (April 16th 2016) EAX would produce wrong tags for empty AADs or messages.  The\n  underlying CMAC is now more resistant to this case.\n* [Issue #6](https://github.com/ctz/cifra/issues/6): in all versions before commit\n  [b6cdf9f3](https://github.com/ctz/cifra/commit/b6cdf9f3dcf693fbc243c5f341ea27114caf869a)\n  the chacha20poly1305 construction would produce incorrect tags for some message or AAD\n  lengths.  These case weren't covered by the standard test vectors, so extra tests have\n  been added computed with libsodium.\n* [Issue #11](https://github.com/ctz/cifra/issues/11): in all versions before commit\n  [df1e4130](https://github.com/ctz/cifra/commit/df1e4130722943b15563e92a0595b31c603aa34d)\n  our salsa20 used incorrect internal ordering when constructing the nonce.  The correct\n  ordering is apparently not specified by the specification or covered by test vectors.\n  Additional tests have been generated from libsodium.\n\n## License\n[CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n\nPlease attribute the author.  This is a request only, and not a license term.\n\n## Author\nJoseph Birr-Pixton <jpixton@gmail.com>\n"
 },
 {
  "repo": "ProbeTS/Cryptography",
  "language": "C++",
  "readme_contents": "Cryptography algorithms"
 },
 {
  "repo": "google/crunchy",
  "language": "C++",
  "readme_contents": "# CrunchyCrypt - Safe and Simple Cryptography\n\nCrunchyCrypt is an opensource library offering safe and easy-to-use cryptography\nAPIs with a built-in key-versioning protocol.\n\n## Table of Contents\n\n- [About CrunchyCrypt](#about)\n- [Codemap](#codemap)\n- [Compatibility guarantees](#compatibility)\n- [License](#license)\n\nContact us at crunchy-discuss@googlegroups.com\n([link](https://groups.google.com/forum/#!forum/crunchy-discuss))\n\n<a name=\"about\"></a>\n## About CrunchyCrypt\n\nCrunchyCrypt is an open-source collection of cryptography APIs, safe and\neasy-to-use wrappings of lower-level crypto libraries such as boringssl.\nAlthough CrunchyCrypt is intended to primarily be a curated collection of\nmodern cryptography, CrunchyCrypt is designed to be extendable to both\nbleeding-edge and legacy cryptography.\n\nCrunchyCrypt has a built-in key versioning protocol, where cryptographic\npayloads (signatures and ciphertexts) are (optionally) prefixed with a few\nbytes of key versioning information. This allows project owners to gracefully\nrotate new crunchy keys while maintaining backwards compatibility with old keys,\neven while switching the underlying algorithm.\n\nSafety and ease-of-use are primary features of CrunchyCrypt, which is good for\nmost, but not all, use cases. For example, user-specificed nonces is not\nsomething we intend to support. As a consequence, CrunchyCrypt is not meant to\nbe a comprehensive replacement for openssl/boringssl.\n\n<a name=\"codemap\"></a>\n## Codemap\n\nCrunchyCrypt supports crypto and key management in C++. CrunchyCrypt supports\ncrypto in Java via JNI bindings.\n\nCrunchyCrypt supports the following primitives in C++:\n\n* [`AEAD Encryption`](crunchy/crunchy_crypter.h) Authenticated Encryption with\n  Associated Data, aka symmetric encryption\n  <br /> We support AES-GCM and AES-EAX at 128 and 256 bits of security.\n* [`MACs`](crunchy/crunchy_macer.h) Message authentication code, aka symmetric\n  authentication\n  <br /> We support HMAC-SHA256 with 16-byte tags and a 32-byte key.\n* [`Digital Signatures`](crunchy/crunchy_signer.h), aka asymmetric\n  authentication\n  <br /> We support P256-ECDSA, Ed25519, and RSA-PKCS1 using SHA256 and a\n  2048-bit modulus.\n* [`Hybrid Encryption`](crunchy/crunchy_hybrid_crypter.h), aka asymmetric\n  encryption\n  <br /> We support ECIES using HKDF and AEADs in various combinations,\n  including versions using P256 and curve25519.\n\nCrunchyCrypt supports [`key management`](crunchy/key_management/) in C++.\nCrunchyCrypt's built-in key-versioning protocol allows for graceful rotation of\nkeys. [`KeysetManager`](crunchy/key_management/key_manager.h) is used to create,\nrotate, and delete keys.  Serialization of unencrypted key material is in a\nseparate [`keyset_serialization`](crunchy/key_management/keyset_serialization.h)\nbuild target.\n\n[`Java APIs`](crunchy/java/src/main/java/com/google/security/crunchy/) for the\nabove are implemented via [`JNI\nbindings`](crunchy/java/src/main/com/google/security/crunchy/jni).\n\nSome internal APIs may be eventually made user-facing as we gain more experience\nas to how they might be used. For example,\n[`AdvancedKeysetManager`](crunchy/key_management/) and [`our subtle crypto\nAPIs`](crunchy/internal/algs) might be made non-internal if they're deemed\nuseful.\n\n<a name=\"compatibility\"></a>\n## Compatibility guarantees\n\nWe do not offer any ABI compatibility. We will strive to not break API\ncompatibility. If we plan to break API compability, we will provide a migration\npath.\n\nWe ask that you:\n\n* Don't open the crunchy namespace.\n* Don't forward-declare crunchy types.\n* Don't depend on internal details, namespaces or files that contain the word\n  \"internal\".\n\n<a name=\"license\"></a>\n## License\n\nCrunchyCrypt is licensed under the terms of the Apache License, Version 2.0. See\n[LICENSE](LICENSE) for more information.\n"
 },
 {
  "repo": "PerfectlySoft/Perfect-Crypto",
  "language": "Swift",
  "readme_contents": "# Perfect-Crypto [\u7b80\u4f53\u4e2d\u6587](README.zh_CN.md)\n\n<p align=\"center\">\n    <a href=\"http://perfect.org/get-involved.html\" target=\"_blank\">\n        <img src=\"http://perfect.org/assets/github/perfect_github_2_0_0.jpg\" alt=\"Get Involed with Perfect!\" width=\"854\" />\n    </a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://developer.apple.com/swift/\" target=\"_blank\">\n        <img src=\"https://img.shields.io/badge/Swift-5.2-orange.svg?style=flat\" alt=\"Swift 5.2\">\n    </a>\n    <a href=\"https://developer.apple.com/swift/\" target=\"_blank\">\n        <img src=\"https://img.shields.io/badge/Platforms-OS%20X%20%7C%20Linux%20-lightgray.svg?style=flat\" alt=\"Platforms OS X | Linux\">\n    </a>\n    <a href=\"http://perfect.org/licensing.html\" target=\"_blank\">\n        <img src=\"https://img.shields.io/badge/License-Apache-lightgrey.svg?style=flat\" alt=\"License Apache\">\n    </a>\n</p>\n\n\nDigest, cipher and encoding support for Perfect.\n\n## Building\n\nAdd this project as a dependency in your Package.swift file.\n\n```\n.package(url: \"https://github.com/PerfectlySoft/Perfect-Crypto.git\", from: \"4.0.0\")\n```\n\n## Linux Build Notes\n\nEnsure that you have installed libssl-dev. OpenSSL 1.0.2+ is required for this package. On Ubuntu 14 or some Debian distributions you will need to update your OpenSSL before this package will build.\n\n```\nsudo apt-get install openssl libssl-dev\n```\n\n## Overview\n\nThis package wraps up some of the functionality provided by OpenSSL and adds a Swift layer on top of it. The main features are:\n\n* Extensions for String, [UInt8] and UnsafeRawBufferPointer that provide simple encode, decode, digest and cipher operations.\n* JWT (JSON Web Token) generation and validation.\n* Generation of arbitrary amounts of random data.\n* Swift wrappers around OpenSSL BIOs, providing chainable, filterable byte IO sinks and sources.\n* Convenience functions for creating Strings given non-null terminated UTF8 containing UnsafeRawBufferPointer or [UInt8] objects.\n\n## Usage Examples\n\n### Encode/Decode Hex\n\n```swift\nlet testStr = \"Hello, world!\"\nguard let hexBytes = testStr.encode(.hex) else {\n\treturn\n}\n\nString(validatingUTF8: hexBytes) == \"48656c6c6f2c20776f726c6421\"\n\nguard let unHex = hexBytes.decode(.hex) else {\n\treturn\n}\n\nString(validatingUTF8: unHex) == testStr\n\n```\n\n### Encode/Decode Base 64\n\n```swift\nlet testStr = \"Hello, world!\"\nguard let baseBytes = testStr.encode(.base64) else {\n\treturn\n}\n\nString(validatingUTF8: baseBytes) == \"SGVsbG8sIHdvcmxkIQ==\"\n\nguard let unBase = baseBytes.decode(.base64) else {\n\treturn\n}\n\nString(validatingUTF8: unBase) == testStr\n```\n\n### Digest\n\n```swift\nlet testStr = \"Hello, world!\"\nlet testAnswer = \"315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3\"\nguard let enc = testStr.digest(.sha256)?.encode(.hex) else {\n\treturn\n}\n\nString(validatingUTF8: enc) == testAnswer\n```\n\n### HMAC Sign/Verify\n\nThe following snippet will HMAC-SHA1 sign, encode as base64, then decode, and verify a data string. Replace usages of .sha1 or .base64 depending on your requirements.\n\n```swift\nlet password = \"this is a good pw\"\nlet data = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\t\nif let signed = data.sign(.sha1, key: HMACKey(password))?.encode(.base64),\n\tlet base64Str = String(validatingUTF8: signed),\n\t\n\tlet reRawData = base64Str.decode(.base64) {\n\t\n\tlet verifyResult = data.verify(.sha1, signature: reRawData, key: HMACKey(password))\n\tXCTAssert(verifyResult)\n} else {\n\tXCTAssert(false, \"Failed signing\")\n}\n```\n\n### Public API\n\n```swift\npublic extension String {\n\t/// Construct a string from a UTF8 character pointer.\n\t/// Character data does not need to be null terminated.\n\t/// The buffer's count indicates how many characters are to be converted.\n\t/// Returns nil if the data is invalid.\n\tinit?(validatingUTF8 ptr: UnsafeRawBufferPointer?)\n\t/// Construct a string from a UTF8 character array.\n\t/// The array's count indicates how many characters are to be converted.\n\t/// Returns nil if the data is invalid.\n\tinit?(validatingUTF8 a: [UInt8])\n}\n\npublic extension String {\n\t/// Decode the String into an array of bytes using the indicated encoding.\n\t/// The string's UTF8 characters are decoded.\n\tfunc decode(_ encoding: Encoding) -> [UInt8]?\n\t/// Encode the String into an array of bytes using the indicated encoding.\n\t/// The string's UTF8 characters are decoded.\n\tfunc encode(_ encoding: Encoding) -> [UInt8]?\n\t/// Perform the digest algorithm on the String's UTF8 bytes\n\tfunc digest(_ digest: Digest) -> [UInt8]?\n\t/// Sign the String data into an array of bytes using the indicated algorithm and key.\n\tfunc sign(_ digest: Digest, key: Key) -> [UInt8]?\n\t/// Verify the signature against the String data.\n\t/// Returns true if the signature is verified. Returns false otherwise.\n\tfunc verify(_ digest: Digest, signature: [UInt8], key: Key) -> Bool\n\t/// Encrypt this buffer using the indicated cipher, password, and salt.\n\t/// The string's UTF8 characters are encoded.\n\t/// Resulting data is in PEM encoded CMS format.\n\tfunc encrypt(_ cipher: Cipher,\n\t             password: String,\n\t             salt: String,\n\t             keyIterations: Int = 2048,\n\t             keyDigest: Digest = .md5) -> String?\n\t/// Decrypt this PEM encoded CMS buffer using the indicated password and salt.\n\t/// Resulting decrypted data must be valid UTF-8 characters or the operation will fail.\n\tfunc decrypt(_ cipher: Cipher,\n\t             password: String,\n\t             salt: String,\n\t             keyIterations: Int = 2048,\n\t             keyDigest: Digest = .md5) -> String?\n}\n\npublic protocol Octal {}\nextension UInt8: Octal {}\n\npublic extension Array where Element: Octal {\n\t/// Encode the Array into An array of bytes using the indicated encoding.\n\tfunc encode(_ encoding: Encoding) -> [UInt8]?\n\t/// Decode the Array into an array of bytes using the indicated encoding.\n\tfunc decode(_ encoding: Encoding) -> [UInt8]?\n\t/// Digest the Array data into an array of bytes using the indicated algorithm.\n\tfunc digest(_ digest: Digest) -> [UInt8]?\n\t/// Sign the Array data into an array of bytes using the indicated algorithm and key.\n\tfunc sign(_ digest: Digest, key: Key) -> [UInt8]?\n\t/// Verify the array against the signature.\n\t/// Returns true if the signature is verified. Returns false otherwise.\n\tfunc verify(_ digest: Digest, signature: [UInt8], key: Key) -> Bool\n\t/// Decrypt this buffer using the indicated cipher, key an iv (initialization vector).\n\tfunc encrypt(_ cipher: Cipher, key: [UInt8], iv: [UInt8]) -> [UInt8]?\n\t/// Decrypt this buffer using the indicated cipher, key an iv (initialization vector).\n\tfunc decrypt(_ cipher: Cipher, key: [UInt8], iv: [UInt8]) -> [UInt8]?\n\t/// Encrypt this buffer using the indicated cipher, password, and salt.\n\t/// Resulting data is PEM encoded CMS format.\n\tfunc encrypt(_ cipher: Cipher,\n\t             password: [UInt8],\n\t             salt: [UInt8],\n\t             keyIterations: Int = 2048,\n\t             keyDigest: Digest = .md5) -> [UInt8]?\n\t/// Decrypt this PEM encoded CMS buffer using the indicated password and salt.\n\tfunc decrypt(_ cipher: Cipher,\n\t             password: [UInt8],\n\t             salt: [UInt8],\n\t             keyIterations: Int = 2048,\n\t             keyDigest: Digest = .md5) -> [UInt8]?\n}\n\npublic extension UnsafeRawBufferPointer {\n\t/// Encode the buffer using the indicated encoding.\n\t/// The return value must be deallocated by the caller.\n\tfunc encode(_ encoding: Encoding) -> UnsafeMutableRawBufferPointer?\n\t/// Decode the buffer using the indicated encoding.\n\t/// The return value must be deallocated by the caller.\n\tfunc decode(_ encoding: Encoding) -> UnsafeMutableRawBufferPointer?\n\t/// Digest the buffer using the indicated algorithm.\n\t/// The return value must be deallocated by the caller.\n\tfunc digest(_ digest: Digest) -> UnsafeMutableRawBufferPointer?\n\t/// Sign the buffer using the indicated algorithm and key.\n\t/// The return value must be deallocated by the caller.\n\tfunc sign(_ digest: Digest, key: Key) -> UnsafeMutableRawBufferPointer?\n\t/// Verify the signature against the buffer.\n\t/// Returns true if the signature is verified. Returns false otherwise.\n\tfunc verify(_ digest: Digest, signature: UnsafeRawBufferPointer, key: Key) -> Bool\n\t/// Encrypt this buffer using the indicated cipher, key and iv (initialization vector).\n\t/// Returns a newly allocated buffer which must be freed by the caller.\n\tfunc encrypt(_ cipher: Cipher, key: UnsafeRawBufferPointer, iv: UnsafeRawBufferPointer) -> UnsafeMutableRawBufferPointer?\n\t/// Decrypt this buffer using the indicated cipher, key and iv (initialization vector).\n\t/// Returns a newly allocated buffer which must be freed by the caller.\n\tfunc decrypt(_ cipher: Cipher, key: UnsafeRawBufferPointer, iv: UnsafeRawBufferPointer) -> UnsafeMutableRawBufferPointer?\n\t/// Encrypt this buffer to PEM encoded CMS format using the indicated cipher, password, and salt.\n\t/// Returns a newly allocated buffer which must be freed by the caller.\n\tfunc encrypt(_ cipher: Cipher,\n\t             password: UnsafeRawBufferPointer,\n\t             salt: UnsafeRawBufferPointer,\n\t             keyIterations: Int = 2048,\n\t             keyDigest: Digest = .md5) -> UnsafeMutableRawBufferPointer?\n   \t/// Decrypt this PEM encoded CMS buffer using the indicated password and salt.\n\t/// Returns a newly allocated buffer which must be freed by the caller.\n\tfunc decrypt(_ cipher: Cipher,\n\t             password: UnsafeRawBufferPointer,\n\t             salt: UnsafeRawBufferPointer,\n\t             keyIterations: Int = 2048,\n\t             keyDigest: Digest = .md5) -> UnsafeMutableRawBufferPointer?\n}\n\npublic extension UnsafeRawBufferPointer {\n\t/// Allocate memory for `size` bytes with word alignment from the encryption library's\n\t///\trandom number generator.\n\t///\n\t/// - Postcondition: The memory is allocated and initialized to random bits.\n\tstatic func allocateRandom(count size: Int) -> UnsafeRawBufferPointer? \n}\n\npublic extension FixedWidthInteger {\n  /// get a random integer, i.e., signed or unsigned int8/16/32/64\n  public static var random: Self\n}\npublic extension Float {\n  /// get a random float\n  public static var random: Float\n}\npublic extension Double {\n  /// get a random double\n  public static var random: Double \n}\n```\n\n### JSON Web Tokens (JWT)\n\nThis crypto package provides an means for creating new JWT tokens and validating existing tokens.\n\nJSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA. Source: [JWT](https://jwt.io/introduction/).\n\nNew JWT tokens are created through the `JWTCreator` object.\n\n```swift\n/// Creates and signs new JWT tokens.\npublic struct JWTCreator {\n\t/// Creates a new JWT token given a payload.\n\t/// The payload can then be signed to generate a JWT token string.\n\tpublic init?(payload: [String:Any])\n\t/// Sign and return a new JWT token string using an HMAC key.\n\t/// Additional headers can be optionally provided.\n\t/// Throws a JWT.Error.signingError if there is a problem generating the token string.\n\tpublic func sign(alg: JWT.Alg, key: String, headers: [String:Any] = [:]) throws -> String\n\t/// Sign and return a new JWT token string using the given key.\n\t/// Additional headers can be optionally provided.\n\t/// The key type must be compatible with the indicated `algo`.\n\t/// Throws a JWT.Error.signingError if there is a problem generating the token string.\n\tpublic func sign(alg: JWT.Alg, key: Key, headers: [String:Any] = [:]) throws -> String\n}\n```\n\nExisting JWT tokens can be validated through the `JWTVerifier` object.\n\n```swift\n/// Accepts a JWT token string and verifies its structural validity and signature.\npublic struct JWTVerifier {\n\t/// The headers obtained from the token.\n\tpublic var header: [String:Any]\n\t/// The payload carried by the token.\n\tpublic var payload: [String:Any]\n\t/// Create a JWTVerifier given a source string in the \"aaaa.bbbb.cccc\" format.\n\t/// Returns nil if the given string is not a valid JWT.\n\t/// *Does not perform verification in this step.* Call `verify` with your key to validate.\n\t/// If verification succeeds then the `.headers` and `.payload` properties can be safely accessed.\n\tpublic init?(_ jwt: String)\n\t/// Verify the token based on the indicated algorithm and HMAC key.\n\t/// Throws a JWT.Error.verificationError if any aspect of the token is incongruent.\n\t/// Returns without any error if the token was able to be verified.\n\t/// The parameter `algo` must match the token's \"alg\" header.\n\tpublic func verify(algo: JWT.Alg, key: String) throws\n\t/// Verify the token based on the indicated algorithm and key.\n\t/// Throws a JWT.Error.verificationError if any aspect of the token is incongruent.\n\t/// Returns without any error if the token was able to be verified.\n\t/// The parameter `algo` must match the token's \"alg\" header.\n\t/// The key type must be compatible with the indicated `algo`.\n\tpublic func verify(algo: JWT.Alg, key: Key) throws\n}\n```\n\nThe following example will create and then verify a token using the \"HS256\" alg scheme.\n\n```swift\nlet name = \"John Doe\"\nlet tstPayload = [\"sub\": \"1234567890\", \"name\": name, \"admin\": true] as [String : Any]\nlet secret = \"secret\"\nguard let jwt1 = JWTCreator(payload: tstPayload) else {\n\treturn // fatal error\n}\nlet token = try jwt1.sign(alg: .hs256, key: secret)\nguard let jwt = JWTVerifier(token) else {\n  return // fatal error\n}\ntry jwt.verify(algo: .hs256, key: HMACKey(secret))\nlet fndName = jwt.payload[\"name\"] as? String\n// name == fndName!\n```\n\nIt's important to note that the JWTVerifier will verify that the token is cryptographically sound, but it **does not** validate payload claims such as iss(uer) or exp(iration). You can obtain these from the payload dictionary and validate according to the needs of your application. \n\n### Supported encodings, digests and ciphers\n\n```swift\n/// Available encoding methods.\npublic enum Encoding {\n\tcase base64\n\tcase hex\n}\n\n/// Available digest methods.\npublic enum Digest {\n\tcase md4\n\tcase md5\n\tcase sha\n\tcase sha1\n\tcase dss\n\tcase dss1\n\tcase ecdsa\n\tcase sha224\n\tcase sha256\n\tcase sha384\n\tcase sha512\n\tcase ripemd160\n\tcase whirlpool\n\t\n\tcase custom(String)\n}\n\n/// Available ciphers.\npublic enum Cipher {\n\tcase des_ecb\n\tcase des_ede\n\tcase des_ede3\n\tcase des_ede_ecb\n\tcase des_ede3_ecb\n\tcase des_cfb64\n\tcase des_cfb1\n\tcase des_cfb8\n\tcase des_ede_cfb64\n\tcase des_ede3_cfb1\n\tcase des_ede3_cfb8\n\tcase des_ofb\n\tcase des_ede_ofb\n\tcase des_ede3_ofb\n\tcase des_cbc\n\tcase des_ede_cbc\n\tcase des_ede3_cbc\n\tcase desx_cbc\n\tcase des_ede3_wrap\n\tcase rc4\n\tcase rc4_40\n\tcase rc4_hmac_md5\n\tcase rc2_ecb\n\tcase rc2_cbc\n\tcase rc2_40_cbc\n\tcase rc2_64_cbc\n\tcase rc2_cfb64\n\tcase rc2_ofb\n\tcase bf_ecb\n\tcase bf_cbc\n\tcase bf_cfb64\n\tcase bf_ofb\n\tcase cast5_ecb\n\tcase cast5_cbc\n\tcase cast5_cfb64\n\tcase cast5_ofb\n\tcase aes_128_ecb\n\tcase aes_128_cbc\n\tcase aes_128_cfb1\n\tcase aes_128_cfb8\n\tcase aes_128_cfb128\n\tcase aes_128_ofb\n\tcase aes_128_ctr\n\tcase aes_128_ccm\n\tcase aes_128_gcm\n\tcase aes_128_xts\n\tcase aes_128_wrap\n\tcase aes_192_ecb\n\tcase aes_192_cbc\n\tcase aes_192_cfb1\n\tcase aes_192_cfb8\n\tcase aes_192_cfb128\n\tcase aes_192_ofb\n\tcase aes_192_ctr\n\tcase aes_192_ccm\n\tcase aes_192_gcm\n\tcase aes_192_wrap\n\tcase aes_256_ecb\n\tcase aes_256_cbc\n\tcase aes_256_cfb1\n\tcase aes_256_cfb8\n\tcase aes_256_cfb128\n\tcase aes_256_ofb\n\tcase aes_256_ctr\n\tcase aes_256_ccm\n\tcase aes_256_gcm\n\tcase aes_256_xts\n\tcase aes_256_wrap\n\tcase aes_128_cbc_hmac_sha1\n\tcase aes_256_cbc_hmac_sha1\n\tcase aes_128_cbc_hmac_sha256\n\tcase aes_256_cbc_hmac_sha256\n\tcase camellia_128_ecb\n\tcase camellia_128_cbc\n\tcase camellia_128_cfb1\n\tcase camellia_128_cfb8\n\tcase camellia_128_cfb128\n\tcase camellia_128_ofb\n\tcase camellia_192_ecb\n\tcase camellia_192_cbc\n\tcase camellia_192_cfb1\n\tcase camellia_192_cfb8\n\tcase camellia_192_cfb128\n\tcase camellia_192_ofb\n\tcase camellia_256_ecb\n\tcase camellia_256_cbc\n\tcase camellia_256_cfb1\n\tcase camellia_256_cfb8\n\tcase camellia_256_cfb128\n\tcase camellia_256_ofb\n\tcase seed_ecb\n\tcase seed_cbc\n\tcase seed_cfb128\n\tcase seed_ofb\n\t\n\tcase custom(String)\n}\n```\n\n## Further Information\n\nFor more documentation, please visit [perfect.org](http://www.perfect.org/docs/crypto.html).\n"
 },
 {
  "repo": "hacspec/hacspec",
  "language": "Rust",
  "readme_contents": "# hacspec [![hacspec chat][chat-image]][chat-link]\n\n<img src=\"https://raw.githubusercontent.com/hacspec/hacspec/master/img/mascot.png\" width=100 style=\"float: left;\"> A specification language for crypto primitives in Rust.\n\n_This is the successor of https://github.com/HACS-workshop/hacspec._\n\nFor a quick intro, you can look at the [presentation slides](./presentation_slides.pdf). An in-depth\n[technical report](https://hal.inria.fr/hal-03176482) is also available.\n\n## Crates\n\n| Name             | Crates.io                                                                 |                                                                 Docs                                                                  |                        CI                         |\n| :--------------- | :------------------------------------------------------------------------ | :-----------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------: |\n| hacspec          | [![crates.io][crate-hacspec]](https://crates.io/crates/hacspec)           |                           [![Docs](https://img.shields.io/badge/docs-master-blue.svg?logo=rust)](language/)                           | [![Build & Test Status][build-image]][build-link] |\n| hacspec-lib      | [![crates.io][crate-lib]](https://crates.io/crates/hacspec-lib)           |   [![Docs](https://img.shields.io/badge/docs-master-blue.svg?logo=rust)](https://hacspec.github.io/hacspec/hacspec_lib/index.html)    | [![Build & Test Status][build-image]][build-link] |\n| hacspec-provider | [![crates.io][crate-provider]](https://crates.io/crates/hacspec-provider) | [![Docs](https://img.shields.io/badge/docs-master-blue.svg?logo=rust)](https://hacspec.github.io/hacspec/hacspec_provider/index.html) | [![Build & Test Status][build-image]][build-link] |\n\n## Usage\n\n### Writing hacspec\n\nhacspec is always valid Rust code such that starting to write hacspec is as simple as writing Rust code that is compliant with the [language](Language.md) specification.\nHowever, this is very tedious.\nIt is recommended to use the [hacspec standard library](https://crates.io/crates/hacspec-lib) to write hacspec.\nIn order to ensure that the code is a hacspec one can use the typecheker.\n\n### Typechecking\n\nMake sure you have at least `rustup 1.23.0`.\nThe [`rust-toolchain`](./language/rust-toolchain) automatically picks the correct Rust nightly version and components.\nThe compiler version is currently pinned to `nightly-2021-11-14`.\n\n**Installing the typechecker from the repository**\n```\ncargo install --path language\n```\n\n**Installing the typechecker from crates.io (not always up to date)**\n```\ncargo install hacspec --version 0.2.0-beta.4\n```\n\n**Manually installing dependencies**\n\nFirst ensure that Rust nightly is installed and the typechecker is installed.\n\n```bash\ncd language\nrustup toolchain install nightly-2021-11-14\nrustup component add --toolchain nightly-2021-11-14 rustc-dev\ncargo +nightly-2021-11-14 install hacspec\n```\n\nDepending on your system you might also need `llvm-tools-preview`\n\n```bash\nrustup component add --toolchain nightly-2021-11-14 llvm-tools-preview\n```\n\n**Usage**\n\nIn a hacspec crate or workspace directory typechecking can be done as follows now:\n(Specifying `+nightly-2021-11-14` is only necessary if it's not specified in the toolchain as it is in this main repository.)\n\n```bash\ncargo +nightly-2021-11-14 hacspec <crate-name>\n```\n\nNote that the crate dependencies need to be compiled before it can be typechecked.\n\n```bash\ncargo +nightly-2021-11-14 build\n```\n\nIf typechecking succeeds, it should show\n\n```bash\n> Successfully typechecked.\n```\n\n### Generating code\n\nTo generate F\\*, EasyCrypt, or Coq code from hacspec the typechecker (see above) is required.\n\n```bash\ncargo +nightly-2021-11-14 hacspec -o <fst-name>.fst <crate-name>\ncargo +nightly-2021-11-14 hacspec -o <ec-name>.ec <crate-name>\ncargo +nightly-2021-11-14 hacspec -o <coq-name>.v <crate-name>\n```\n\n## Publications & Other material\n\n* [\ud83d\udcd5 Tech report](https://hal.inria.fr/hal-03176482)\n* [\ud83d\udcd5 Original hacspec paper](https://www.franziskuskiefer.de/publications/hacspec-ssr18-paper.pdf)\n\n# Repository Structure\n\nThis is a cargo workspace consisting of three main crates:\n\n- [hacspec](language/): the compiler, typechecker and language infrastructure for the hacspec subset of Rust\n  - Note that the language infrastructure is excluded from the main workspace of crates, so it won't be build when you launch `cargo build` from the root of the repository.\n- [hacspec-lib](lib/): the standard library of hacspec programs\n- [hacspec-provider](provider/): a cryptography provider with a set of cryptographic primitives written in hacspec\n  - This combines the individual crates from the [examples](examples/) directory and implements the [RustCrypto](https://github.com/RustCrypto/traits) API on top to use them from regular Rust code.\n\nThe three main crates make use of a set of additional crates:\n\n- [abstract-integers](utils/abstract-integers/): wrapper around `BigInt` for modular natural integers\n- [secret-integers](utils/secret-integers/): wrapper around integer types for constant-timedness\n- [unsafe-hacspec-examples](examples-unsafe/): cryptographic specs written in hacspec but not formally typechecked yet(hence the unsafety) as hacspec is a work in progress\n- [examples](examples/): cryptographic primitives that have passed the hacspec typechecking\n- [hacspec-attributes](utils/attributes): helper for the hacspec library\n- [hacspec-dev](utils/dev/): utilities that are not part of the language\n\nCompiled code:\n\n- [fstar](fstar/): contains F\\* translations of the cryptographic specs, produced by the hacspec compiler\n- [easycrypt](easycrypt/): contains EasyCrypt translations of the cryptographic specs, produced by the hacspec compiler\n- [coq](coq/): contains Coq translations of the cryptographic specs, produced by the hacspec compiler\n\n## Contributing\n\nBefore starting any work please join the [Zulip chat][chat-link], start a [discussion on Github](https://github.com/hacspec/hacspec/discussions), or file an [issue](https://github.com/hacspec/hacspec/issues) to discuss your contribution.\n\nThe main entry points for contributions and some general work items are\n\n- the [language](language/) if you want to work on the hacspec language itself\n  - improve the typechecker\n  - improve the existing compiler backends (F\\* and EasyCrypt)\n  - add a new compiler backend\n- hacspec [implementations](examples/)\n  - implementing new cryptographic primitives in hacspec\n  - improve the [provider](provider/)\n- the [standard library](lib/)\n  - enhance numeric implementations\n  - enhance vector arithmetic\n\n# Examples\n\nThere's a set of example specs, divided between the [safe](examples/) and [unsafe](examples-unsafe). To run all examples one can use `cargo test`.\n\n## Examples\n\n- [Chacha20](examples/chacha20/src/chacha20.rs)\n- [Poly1305](examples/poly1305/src/poly1305.rs)\n- [Chacha20Poly1305](examples/chacha20poly1305/src/chacha20poly1305.rs)\n- [SHA256](examples/sha256/src/sha256.rs)\n- [SHA512](examples/sha512/src/sha512.rs)\n- [Curve25519](examples/curve25519/src/curve25519.rs)\n- [NTRU-prime](examples/hacspec-ntru-prime/src/ntru-prime.rs)\n- [SHA-3](examples/sha3/src/sha3.rs)\n- [HKDF-SHA256](examples/hkdf/src/hkdf.rs)\n- [HMAC-SHA256](examples/hmac/src/hmac.rs)\n- [BLS12-381](examples/bls12-381/src/bls12-381.rs)\n- [BLS12-381 Hash To Curve](examples/bls12-381-hash/src/bls12-381-hash.rs)\n- [RIOT bootloade](examples/riot-bootloader/src/lib.rs)\n- [GIMLI](examples/gimli/src/gimli.rs)\n- [P256](examples/p256/src/p256.rs)\n- [ECDSA-P256-SHA256](examples/ecdsa-p256-sha256/src/ecdsa.rs)\n- [Ed25519](examples/ed25519/src/ed25519.rs)\n\n## Unsafe examples\n\n- [AES 128/256](examples-unsafe/src/aes_gcm/aes.rs)\n- [GF 128](examples-unsafe/src/aes_gcm/gf128.rs)\n- [AES-GCM 128/256](examples-unsafe/src/aes_gcm/aesgcm.rs)\n- [Blake2b](examples-unsafe/src/blake2/blake2b.rs)\n\n[//]: # \"badges\"\n[crate-outdated-image]: https://img.shields.io/badge/crate-outdated-red.svg?logo=rust\n[crate-hacspec]: https://img.shields.io/crates/v/hacspec.svg?logo=rust\n[crate-lib]: https://img.shields.io/crates/v/hacspec-lib.svg?logo=rust\n[crate-provider]: https://img.shields.io/crates/v/hacspec-provider.svg?logo=rust\n[docs-master-image]: https://img.shields.io/badge/docs-master-blue.svg?logo=rust\n[docs-master-link]: https://hacspec.github.io/hacspec/hacspec_lib/index.html\n[docs-image]: https://docs.rs/hacspec/badge.svg?logo=rust\n[docs-link]: https://docs.rs/hacspec/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[build-image]: https://github.com/hacspec/hacspec/workflows/Build%20&%20Test/badge.svg?branch=master&event=push\n[build-link]: https://github.com/hacspec/hacspec/actions?query=workflow%3A%22Build+%26+Test%22\n[deploy-docs-image]: https://github.com/hacspec/hacspec/workflows/Deploy%20Docs/badge.svg?branch=master&event=push\n[deploy-docs-link]: https://github.com/hacspec/hacspec/actions?query=workflow%3A%22Deploy+Docs%22\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg?style=social&logo=zulip&color=fedcba\n[chat-link]: https://hacspec.zulipchat.com\n"
 },
 {
  "repo": "github/SoftU2F",
  "language": "Swift",
  "readme_contents": "# SoftU2F is no longer supported\n\nThe SoftU2F project is deprecated and no longer supported. SoftU2F was created\nto support Touch ID for U2F when browsers did not support it, but the functionality is now\navailable on macOS using Touch ID in:\n\n- Safari (macOS 11.0 Big Sur)\n- Google Chrome\n\nSoftU2F has several compatibility issues that will not be fixed, so we recommend\nswitching to one of these alternatives.\n\nThanks to everyone who used SoftU2F over the years, and special thanks to Ben\nToews for writing and maintaining the original implementation!\n\n<br><br><br><br><br><br>\n--------\n<br><br><br><br><br><br>\n\n![](https://user-images.githubusercontent.com/1144197/28190263-470a80d2-67e7-11e7-81e6-17895d70bf75.png)\n\nSoft U2F is a software U2F authenticator for macOS. It emulates a hardware U2F HID device and performs cryptographic operations using the macOS Keychain. This tool works with Google Chrome/Chromium, Safari, Firefox and Opera's built-in U2F implementations.\n\nWe take the security of this project seriously. Report any security vulnerabilities to the [GitHub Bug Bounty Program](https://hackerone.com/github).\n\n## Installing\n\nYou can download the installer [here](https://github.com/github/SoftU2F/releases/latest).\n\n## Usage\n\nThe app runs in the background. When a site loaded in a U2F-compatible browser attempts to register or authenticate with the software token, you'll see a notification asking you to accept or reject the request. You can experiment on [Yubico's U2F demo site](https://demo.yubico.com/u2f).\n\n### Registration\n\n![register](https://cloud.githubusercontent.com/assets/1144197/25875975/9bb638bc-34d7-11e7-8327-8f8a6be4a52d.png)\n\n### Authentication\n\n![authenticate](https://cloud.githubusercontent.com/assets/1144197/25875979/a710b67e-34d7-11e7-853c-ca54f9a24ee8.png)\n\n## Uninstalling\n\nUnload the launchd agent\n\n```\n$ launchctl unload ~/Library/LaunchAgents/com.github.SoftU2F.plist\n```\n\nDelete the launch agent plist\n\n```\n$ rm ~/Library/LaunchAgents/com.github.SoftU2F.plist\n```\n\nDelete the `.app`\n\n```\n$ sudo rm -rf /Applications/SoftU2F.app/\n```\n\nUnload the kernel extension (this may fail if a browser is still talking to the driver. Deleting the `.kext` and restarting the system will fix this)\n\n```\n$ sudo kextunload /Library/Extensions/softu2f.kext\n```\n\nDelete the kernel extension\n\n```\n$ sudo rm -rf /Library/Extensions/softu2f.kext\n```\n\nTell macOS to forget about the installation\n\n```\n$ sudo pkgutil --forget com.GitHub.SoftU2F\n```\n\nDone\n\n## Security considerations\n\nA USB authenticator stores key material in hardware, whereas Soft U2F stores its keys in the macOS Keychain. There is an argument to be made that it is more secure to store keys in hardware since malware running on your computer can access the contents of your Keychain but cannot export the contents of a hardware authenticator. On the other hand, malware can also access your browser's cookies and has full access to all authenticated website sessions, regardless of where U2F keys are stored.\n\nIn the case of malware installed on your computer, one meaningful difference between hardware and software key storage for U2F is the duration of the compromise. With hardware key storage, you are only compromised while the malware is running on your computer. With software key storage, you could continue to be compromised, even after the malware has been removed.\n\nSome people may decide the attack scenario above is worth the usability tradeoff of hardware key storage. But, for many, the security of software-based U2F is sufficient and helps to mitigate against many common attacks such as password dumps, brute force attacks, and phishing related exploits.\n\n## Hacking\n\n### Building\n\nYou must have Xcode Command Line Tools installed to build this project.\n\n```bash\n# Install Commaned Line Tools\nxcode-select --install\n\n# Build softu2f.kext and SoftU2F.app.\nscript/build\n```\n\n### Running\n\nThere are two parts to Soft U2F: the driver and the app. To use a modified version of the driver, you must [disable System Integrity Protection](https://developer.apple.com/library/content/documentation/Security/Conceptual/System_Integrity_Protection_Guide/ConfiguringSystemIntegrityProtection/ConfiguringSystemIntegrityProtection.html#//apple_ref/doc/uid/TP40016462-CH5-SW1). The app can be modified and run via Xcode normally.\n\n## Known app-IDs/facets\n\nEvery website using U2F has an app-ID. For example, the app-ID of [Yubico's U2F demo page](https://demo.yubico.com/u2f) is `https://demo.yubico.com`. When the low-level U2F authenticator receives a request to register/authenticate a website, it doesn't receive the friendly app-ID string. Instead, it receives a SHA256 digest of the app-ID. To be able to show a helpful alert message when a website is trying to register/authenticate, a list of app-ID digests is maintained in this repository. You can find the list [here](https://github.com/github/SoftU2F/blob/master/SoftU2FTool/KnownFacets.swift). If your company's app-ID is missing from this list, open a pull request to add it.\n\n\n## License\n\nThis project is MIT licensed, except for the files in [`/inc`](https://github.com/github/SoftU2F/tree/master/inc), which are included with their own licenses.\n"
 },
 {
  "repo": "xtaci/kcp-go",
  "language": "Go",
  "readme_contents": "<img src=\"kcp-go.png\" alt=\"kcp-go\" height=\"50px\" />\n\n\n[![GoDoc][1]][2] [![Powered][9]][10] [![MIT licensed][11]][12] [![Build Status][3]][4] [![Go Report Card][5]][6] [![Coverage Statusd][7]][8] [![Sourcegraph][13]][14]\n\n[1]: https://godoc.org/github.com/xtaci/kcp-go?status.svg\n[2]: https://pkg.go.dev/github.com/xtaci/kcp-go\n[3]: https://travis-ci.org/xtaci/kcp-go.svg?branch=master\n[4]: https://travis-ci.org/xtaci/kcp-go\n[5]: https://goreportcard.com/badge/github.com/xtaci/kcp-go\n[6]: https://goreportcard.com/report/github.com/xtaci/kcp-go\n[7]: https://codecov.io/gh/xtaci/kcp-go/branch/master/graph/badge.svg\n[8]: https://codecov.io/gh/xtaci/kcp-go\n[9]: https://img.shields.io/badge/KCP-Powered-blue.svg\n[10]: https://github.com/skywind3000/kcp\n[11]: https://img.shields.io/badge/license-MIT-blue.svg\n[12]: LICENSE\n[13]: https://sourcegraph.com/github.com/xtaci/kcp-go/-/badge.svg\n[14]: https://sourcegraph.com/github.com/xtaci/kcp-go?badge\n\n## Introduction\n\n**kcp-go** is a **Production-Grade Reliable-UDP** library for [golang](https://golang.org/). \n\nThis library intents to provide a **smooth, resilient, ordered, error-checked and anonymous** delivery of streams over **UDP** packets, it has been battle-tested with opensource project [kcptun](https://github.com/xtaci/kcptun). Millions of devices(from low-end MIPS routers to high-end servers) have deployed **kcp-go** powered program in a variety of forms like **online games, live broadcasting, file synchronization and network acceleration**.\n\n[Lastest Release](https://github.com/xtaci/kcp-go/releases)\n\n## Features\n\n1. Designed for **Latency-sensitive** scenarios.\n1. **Cache friendly** and **Memory optimized** design, offers extremely **High Performance** core.\n1. Handles **>5K concurrent connections** on a single commodity server.\n1. Compatible with [net.Conn](https://golang.org/pkg/net/#Conn) and [net.Listener](https://golang.org/pkg/net/#Listener), a drop-in replacement for [net.TCPConn](https://golang.org/pkg/net/#TCPConn).\n1. [FEC(Forward Error Correction)](https://en.wikipedia.org/wiki/Forward_error_correction) Support with [Reed-Solomon Codes](https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)\n1. Packet level encryption support with [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard), [TEA](https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm), [3DES](https://en.wikipedia.org/wiki/Triple_DES), [Blowfish](https://en.wikipedia.org/wiki/Blowfish_(cipher)), [Cast5](https://en.wikipedia.org/wiki/CAST-128), [Salsa20]( https://en.wikipedia.org/wiki/Salsa20), etc. in [CFB](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Feedback_.28CFB.29) mode, which generates completely anonymous packet.\n1. Only **A fixed number of goroutines** will be created for the entire server application, costs in **context switch** between goroutines have been taken into consideration.\n1. Compatible with [skywind3000's](https://github.com/skywind3000) C version with various improvements.\n1. Platform-dependent optimizations: [sendmmsg](http://man7.org/linux/man-pages/man2/sendmmsg.2.html) and [recvmmsg](http://man7.org/linux/man-pages/man2/recvmmsg.2.html) were expoloited for linux.\n\n## Documentation\n\nFor complete documentation, see the associated [Godoc](https://godoc.org/github.com/xtaci/kcp-go).\n\n## Specification\n\n<img src=\"frame.png\" alt=\"Frame Format\" height=\"109px\" />\n\n```\nNONCE:\n  16bytes cryptographically secure random number, nonce changes for every packet.\n  \nCRC32:\n  CRC-32 checksum of data using the IEEE polynomial\n \nFEC TYPE:\n  typeData = 0xF1\n  typeParity = 0xF2\n  \nFEC SEQID:\n  monotonically increasing in range: [0, (0xffffffff/shardSize) * shardSize - 1]\n  \nSIZE:\n  The size of KCP frame plus 2\n```\n\n```\n+-----------------+\n| SESSION         |\n+-----------------+\n| KCP(ARQ)        |\n+-----------------+\n| FEC(OPTIONAL)   |\n+-----------------+\n| CRYPTO(OPTIONAL)|\n+-----------------+\n| UDP(PACKET)     |\n+-----------------+\n| IP              |\n+-----------------+\n| LINK            |\n+-----------------+\n| PHY             |\n+-----------------+\n(LAYER MODEL OF KCP-GO)\n```\n\n\n## Examples\n\n1. [simple examples](https://github.com/xtaci/kcp-go/tree/master/examples)\n2. [kcptun client](https://github.com/xtaci/kcptun/blob/master/client/main.go)\n3. [kcptun server](https://github.com/xtaci/kcptun/blob/master/server/main.go)\n\n## Benchmark\n```\n===\nModel Name:\tMacBook Pro\nModel Identifier:\tMacBookPro14,1\nProcessor Name:\tIntel Core i5\nProcessor Speed:\t3.1 GHz\nNumber of Processors:\t1\nTotal Number of Cores:\t2\nL2 Cache (per Core):\t256 KB\nL3 Cache:\t4 MB\nMemory:\t8 GB\n===\n\n$ go test -v -run=^$ -bench .\nbeginning tests, encryption:salsa20, fec:10/3\ngoos: darwin\ngoarch: amd64\npkg: github.com/xtaci/kcp-go\nBenchmarkSM4-4                 \t   50000\t     32180 ns/op\t  93.23 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkAES128-4              \t  500000\t      3285 ns/op\t 913.21 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkAES192-4              \t  300000\t      3623 ns/op\t 827.85 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkAES256-4              \t  300000\t      3874 ns/op\t 774.20 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkTEA-4                 \t  100000\t     15384 ns/op\t 195.00 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkXOR-4                 \t20000000\t        89.9 ns/op\t33372.00 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkBlowfish-4            \t   50000\t     26927 ns/op\t 111.41 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkNone-4                \t30000000\t        45.7 ns/op\t65597.94 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkCast5-4               \t   50000\t     34258 ns/op\t  87.57 MB/s\t       0 B/op\t       0 allocs/op\nBenchmark3DES-4                \t   10000\t    117149 ns/op\t  25.61 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkTwofish-4             \t   50000\t     33538 ns/op\t  89.45 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkXTEA-4                \t   30000\t     45666 ns/op\t  65.69 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkSalsa20-4             \t  500000\t      3308 ns/op\t 906.76 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkCRC32-4               \t20000000\t        65.2 ns/op\t15712.43 MB/s\nBenchmarkCsprngSystem-4        \t 1000000\t      1150 ns/op\t  13.91 MB/s\nBenchmarkCsprngMD5-4           \t10000000\t       145 ns/op\t 110.26 MB/s\nBenchmarkCsprngSHA1-4          \t10000000\t       158 ns/op\t 126.54 MB/s\nBenchmarkCsprngNonceMD5-4      \t10000000\t       153 ns/op\t 104.22 MB/s\nBenchmarkCsprngNonceAES128-4   \t100000000\t        19.1 ns/op\t 837.81 MB/s\nBenchmarkFECDecode-4           \t 1000000\t      1119 ns/op\t1339.61 MB/s\t    1606 B/op\t       2 allocs/op\nBenchmarkFECEncode-4           \t 2000000\t       832 ns/op\t1801.83 MB/s\t      17 B/op\t       0 allocs/op\nBenchmarkFlush-4               \t 5000000\t       272 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkEchoSpeed4K-4         \t    5000\t    259617 ns/op\t  15.78 MB/s\t    5451 B/op\t     149 allocs/op\nBenchmarkEchoSpeed64K-4        \t    1000\t   1706084 ns/op\t  38.41 MB/s\t   56002 B/op\t    1604 allocs/op\nBenchmarkEchoSpeed512K-4       \t     100\t  14345505 ns/op\t  36.55 MB/s\t  482597 B/op\t   13045 allocs/op\nBenchmarkEchoSpeed1M-4         \t      30\t  34859104 ns/op\t  30.08 MB/s\t 1143773 B/op\t   27186 allocs/op\nBenchmarkSinkSpeed4K-4         \t   50000\t     31369 ns/op\t 130.57 MB/s\t    1566 B/op\t      30 allocs/op\nBenchmarkSinkSpeed64K-4        \t    5000\t    329065 ns/op\t 199.16 MB/s\t   21529 B/op\t     453 allocs/op\nBenchmarkSinkSpeed256K-4       \t     500\t   2373354 ns/op\t 220.91 MB/s\t  166332 B/op\t    3554 allocs/op\nBenchmarkSinkSpeed1M-4         \t     300\t   5117927 ns/op\t 204.88 MB/s\t  310378 B/op\t    6988 allocs/op\nPASS\nok  \tgithub.com/xtaci/kcp-go\t50.349s\n```\n\n```\n=== Raspberry Pi 4 ===\n\n\u279c  kcp-go git:(master) cat /proc/cpuinfo\nprocessor\t: 0\nmodel name\t: ARMv7 Processor rev 3 (v7l)\nBogoMIPS\t: 108.00\nFeatures\t: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32\nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t: 0x0\nCPU part\t: 0xd08\nCPU revision\t: 3\n\n\u279c  kcp-go git:(master)  go test -run=^$ -bench .\n2020/01/05 19:25:13 beginning tests, encryption:salsa20, fec:10/3\ngoos: linux\ngoarch: arm\npkg: github.com/xtaci/kcp-go/v5\nBenchmarkSM4-4                     20000             86475 ns/op          34.69 MB/s           0 B/op          0 allocs/op\nBenchmarkAES128-4                  20000             62254 ns/op          48.19 MB/s           0 B/op          0 allocs/op\nBenchmarkAES192-4                  20000             71802 ns/op          41.78 MB/s           0 B/op          0 allocs/op\nBenchmarkAES256-4                  20000             80570 ns/op          37.23 MB/s           0 B/op          0 allocs/op\nBenchmarkTEA-4                     50000             37343 ns/op          80.34 MB/s           0 B/op          0 allocs/op\nBenchmarkXOR-4                    100000             22266 ns/op         134.73 MB/s           0 B/op          0 allocs/op\nBenchmarkBlowfish-4                20000             66123 ns/op          45.37 MB/s           0 B/op          0 allocs/op\nBenchmarkNone-4                  3000000               518 ns/op        5786.77 MB/s           0 B/op          0 allocs/op\nBenchmarkCast5-4                   20000             76705 ns/op          39.11 MB/s           0 B/op          0 allocs/op\nBenchmark3DES-4                     5000            418868 ns/op           7.16 MB/s           0 B/op          0 allocs/op\nBenchmarkTwofish-4                  5000            326896 ns/op           9.18 MB/s           0 B/op          0 allocs/op\nBenchmarkXTEA-4                    10000            114418 ns/op          26.22 MB/s           0 B/op          0 allocs/op\nBenchmarkSalsa20-4                 50000             36736 ns/op          81.66 MB/s           0 B/op          0 allocs/op\nBenchmarkCRC32-4                 1000000              1735 ns/op         589.98 MB/s\nBenchmarkCsprngSystem-4          1000000              2179 ns/op           7.34 MB/s\nBenchmarkCsprngMD5-4             2000000               811 ns/op          19.71 MB/s\nBenchmarkCsprngSHA1-4            2000000               862 ns/op          23.19 MB/s\nBenchmarkCsprngNonceMD5-4        2000000               878 ns/op          18.22 MB/s\nBenchmarkCsprngNonceAES128-4     5000000               326 ns/op          48.97 MB/s\nBenchmarkFECDecode-4              200000              9081 ns/op         165.16 MB/s         140 B/op          1 allocs/op\nBenchmarkFECEncode-4              100000             12039 ns/op         124.59 MB/s          11 B/op          0 allocs/op\nBenchmarkFlush-4                  100000             21704 ns/op               0 B/op          0 allocs/op\nBenchmarkEchoSpeed4K-4              2000            981182 ns/op           4.17 MB/s       12384 B/op        424 allocs/op\nBenchmarkEchoSpeed64K-4              100          10503324 ns/op           6.24 MB/s      123616 B/op       3779 allocs/op\nBenchmarkEchoSpeed512K-4              20         138633802 ns/op           3.78 MB/s     1606584 B/op      29233 allocs/op\nBenchmarkEchoSpeed1M-4                 5         372903568 ns/op           2.81 MB/s     4080504 B/op      63600 allocs/op\nBenchmarkSinkSpeed4K-4             10000            121239 ns/op          33.78 MB/s        4647 B/op        104 allocs/op\nBenchmarkSinkSpeed64K-4             1000           1587906 ns/op          41.27 MB/s       50914 B/op       1115 allocs/op\nBenchmarkSinkSpeed256K-4             100          16277830 ns/op          32.21 MB/s      453027 B/op       9296 allocs/op\nBenchmarkSinkSpeed1M-4               100          31040703 ns/op          33.78 MB/s      898097 B/op      18932 allocs/op\nPASS\nok      github.com/xtaci/kcp-go/v5      64.151s\n```\n\n\n## Typical Flame Graph\n![Flame Graph in kcptun](flame.png)\n\n## Key Design Considerations\n\n1. slice vs. container/list\n\n`kcp.flush()` loops through the send queue for retransmission checking for every 20ms(interval).\n\nI've wrote a benchmark for comparing sequential loop through *slice* and *container/list* here:\n\nhttps://github.com/xtaci/notes/blob/master/golang/benchmark2/cachemiss_test.go\n\n```\nBenchmarkLoopSlice-4   \t2000000000\t         0.39 ns/op\nBenchmarkLoopList-4    \t100000000\t        54.6 ns/op\n```\n\nList structure introduces **heavy cache misses** compared to slice which owns better **locality**, 5000 connections with 32 window size and 20ms interval will cost 6us/0.03%(cpu) using slice, and 8.7ms/43.5%(cpu) for list for each `kcp.flush()`.\n\n2. Timing accuracy vs. syscall clock_gettime\n\nTiming is **critical** to **RTT estimator**, inaccurate timing leads to false retransmissions in KCP, but calling `time.Now()` costs 42 cycles(10.5ns on 4GHz CPU, 15.6ns on my MacBook Pro 2.7GHz). \n\nThe benchmark for time.Now() lies here:\n\nhttps://github.com/xtaci/notes/blob/master/golang/benchmark2/syscall_test.go\n\n```\nBenchmarkNow-4         \t100000000\t        15.6 ns/op\n```\n\nIn kcp-go, after each `kcp.output()` function call, current clock time will be updated upon return, and for a single `kcp.flush()` operation, current time will be queried from system once. For most of the time, 5000 connections costs 5000 * 15.6ns = 78us(a fixed cost while no packet needs to be sent), as for 10MB/s data transfering with 1400 MTU, `kcp.output()` will be called around 7500 times and costs 117us for `time.Now()` in **every second**.\n\n3. Memory management\n\nPrimary memory allocation are done from a global buffer pool xmit.Buf, in kcp-go, when we need to allocate some bytes, we can get from that pool, and a fixed-capacity 1500 bytes(mtuLimit) will be returned, the rx queue, tx queue and fec queue all receive bytes from there, and they will return the bytes to the pool after using to prevent unnecessary zer0ing of bytes. The pool mechanism maintained a high watermark for slice objects, these in-flight objects from the pool will survive from the perodical garbage collection, meanwhile the pool kept the ability to return the memory to runtime if in idle.\n\n4. Information security\n\nkcp-go is shipped with builtin packet encryption powered by various block encryption algorithms and works in [Cipher Feedback Mode](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Feedback_(CFB)), for each packet to be sent, the encryption process will start from encrypting a [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) from the [system entropy](https://en.wikipedia.org/wiki//dev/random), so encryption to same plaintexts never leads to a same ciphertexts thereafter.\n\nThe contents of the packets are completely anonymous with encryption, including the headers(FEC,KCP), checksums and contents. Note that, no matter which encryption method you choose on you upper layer, if you disable encryption, the transmit will be insecure somehow, since the header is ***PLAINTEXT*** to everyone it would be susceptible to header tampering, such as jamming the *sliding window size*, *round-trip time*, *FEC property* and *checksums*. ```AES-128``` is suggested for minimal encryption since modern CPUs are shipped with [AES-NI](https://en.wikipedia.org/wiki/AES_instruction_set) instructions and performs even better than `salsa20`(check the table above).\n\nOther possible attacks to kcp-go includes: a) [traffic analysis](https://en.wikipedia.org/wiki/Traffic_analysis), dataflow on specific websites may have pattern while interchanging data, but this type of eavesdropping has been mitigated by adapting [smux](https://github.com/xtaci/smux) to mix data streams so as to introduce noises, perfect solution to this has not appeared yet, theroretically by shuffling/mixing messages on larger scale network may mitigate this problem.  b) [replay attack](https://en.wikipedia.org/wiki/Replay_attack), since the asymmetrical encryption has not been introduced into kcp-go for some reason, capturing the packets and replay them on a different machine is possible, (notice: hijacking the session and decrypting the contents is still *impossible*), so upper layers should contain a asymmetrical encryption system to guarantee the authenticity of each message(to process message exactly once), such as HTTPS/OpenSSL/LibreSSL, only by signing the requests with private keys can eliminate this type of attack. \n\n## Connection Termination\n\nControl messages like **SYN/FIN/RST** in TCP **are not defined** in KCP, you need some **keepalive/heartbeat mechanism** in the application-level. A real world example is to use some **multiplexing** protocol over session, such as [smux](https://github.com/xtaci/smux)(with embedded keepalive mechanism), see [kcptun](https://github.com/xtaci/kcptun) for example.\n\n## FAQ\n\nQ: I'm handling >5K connections on my server, the CPU utilization is so high.\n\nA: A standalone `agent` or `gate` server for running kcp-go is suggested, not only for CPU utilization, but also important to the **precision** of RTT measurements(timing) which indirectly affects retransmission. By increasing update `interval` with `SetNoDelay` like `conn.SetNoDelay(1, 40, 1, 1)` will dramatically reduce system load, but lower the performance.\n\nQ: When should I enable FEC?\n\nA: Forward error correction is critical to long-distance transmission, because a packet loss will lead to a huge penalty in time. And for the complicated packet routing network in modern world, round-trip time based loss check will not always be efficient, the big deviation of RTT samples in the long way usually leads to a larger RTO value in typical rtt estimator, which in other words, slows down the transmission.\n  \nQ: Should I enable encryption?\n\nA: Yes, for the safety of protocol, even if the upper layer has encrypted.\n\n## Who is using this?\n\n1. https://github.com/xtaci/kcptun -- A Secure Tunnel Based On KCP over UDP.\n2. https://github.com/getlantern/lantern -- Lantern delivers fast access to the open Internet. \n3. https://github.com/smallnest/rpcx -- A RPC service framework based on net/rpc like alibaba Dubbo and weibo Motan.\n4. https://github.com/gonet2/agent -- A gateway for games with stream multiplexing.\n5. https://github.com/syncthing/syncthing -- Open Source Continuous File Synchronization.\n\n## Links\n\n1. https://github.com/xtaci/smux/ -- A Stream Multiplexing Library for golang with least memory\n1. https://github.com/xtaci/libkcp -- FEC enhanced KCP session library for iOS/Android in C++\n1. https://github.com/skywind3000/kcp -- A Fast and Reliable ARQ Protocol\n1. https://github.com/klauspost/reedsolomon -- Reed-Solomon Erasure Coding in Go\n"
 },
 {
  "repo": "lvh/caesium",
  "language": "Clojure",
  "readme_contents": "# caesium\n\n![caesium spectral lines](https://raw.githubusercontent.com/lvh/caesium/master/caesium.png)\n\n[![Clojars Project](http://clojars.org/caesium/latest-version.svg)](http://clojars.org/caesium)\n\n[![Build Status](https://github.com/lvh/caesium/workflows/build/badge.svg?branch=master)](https://github.com/lvh/caesium/actions?query=workflow%3Abuild)\n[![codecov](https://codecov.io/gh/lvh/caesium/branch/master/graph/badge.svg)](https://codecov.io/gh/lvh/caesium)\n[![Dependencies Status](https://versions.deps.co/lvh/caesium/status.svg)](https://versions.deps.co/lvh/caesium)\n\ncaesium is a modern cryptography library for Clojure. It is a direct\n[jnr-ffi][jnr-ffi] binding to [libsodium][libsodium], which in turn is\na more convenient fork of the original [NaCl][nacl] library by\n[djb][djb].\n\n[jnr-ffi]: https://github.com/jnr/jnr-ffi\n[nacl]: http://nacl.cr.yp.to/.\n[djb]: http://cr.yp.to/djb.html\n[libsodium]: https://github.com/jedisct1/libsodium\n\n***NOTE:*** Install [libsodium 1.0.18+](https://libsodium.gitbook.io/doc/installation) before trying to use caesium.\n\n## Minimum viable snippet\n\nHere's a sample of how you can use secretbox:\n\n``` clojure\n(ns minimum-viable-secretbox\n  (:require [caesium.crypto.secretbox :as sb]))\n\n(def key (sb/new-key!))\n(def plaintext \"Hello caesium!\")\n(def nonce (sb/int->nonce 0))\n(def ciphertext (sb/encrypt key nonce (.getBytes plaintext)))\n(def roundtrip (String. (sb/decrypt key nonce ciphertext)))\n(assert (= plaintext roundtrip))\n```\n\n## Documentation\n\nThe most important documentation for caesium is actually the\n[documentation for libsodium][libsodiumdocs]. Since it's all just relatively\nsmall wrappers around that, everything in it applies.\n\n[libsodiumdocs]: http://doc.libsodium.org\n\n### Password hashing\n\nHere's an example of how you can use pwhash:\n\n``` clojure\n(ns pwhash-usage\n  (:require [caesium.crypto.pwhash :as pwhash]\n            [caesium.randombytes :as rb]\n            [caesium.byte-bufs :as bb]\n            [caesium.util :as u]\n            [caesium.crypto.secretbox :as sb]))\n\n;; helper function for creating salts from integers. may be useful for deterministic\n;; key derivation, incrementing subkeys from 0.\n(def int->salt (partial u/n->bytes pwhash/saltbytes))\n\n;; hashing passwords\n(def password \"example\")\n(def hashed-password (pwhash/pwhash-str password \n                                        pwhash/opslimit-sensitive\n                                        pwhash/memlimit-sensitive))\n(assert (= 0 (pwhash/pwhash-str-verify hashed-password password)))\n\n;; key derivation\n(def salt (rb/randombytes pwhash/saltbytes)) ; changing salt means changed derived key\n(def derived-key (pwhash/pwhash msb/keybytes\n                                password\n                                salt\n                                pwhash/opslimit-sensitive\n                                pwhash/memlimit-sensitive\n                                pwhash/alg-default))\n(def message (.getBytes \"hello, world!\"))\n(def encrypted-message (sb/encrypt derived-key (sb/int->nonce 0) message))\n(def decrypted-message (sb/decrypt derived-key (sb/int->nonce 0) encrypted-message))\n(assert (bb/bytes= message decrypted-message))\n```\n\n### Usage with Github Actions secrets\n\nHere is how you can create or update a repository secret for GitHub actions:\n\n``` clojure\n(require '[caesium.crypto.box])\n(require '[clj-http.client :as http])\n(require '[jsonista.core :as json])\n(import '(java.util Base64))\n\n(def public-key\n  \"The public key of the repository of which you want to create or update a secret\"\n  (let [payload (-> {:request-method :get\n                     :url \"https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key\"\n                     :basic-auth [\"{user}\" \"{GITHUB_TOKEN}\"]\n                     :headers {\"Content-Type\" \"application/json\"\n                               \"Accept\" \"application/vnd.github.v3+json\"}}\n                    http/request\n                    :body\n                    json/read-value)\n        ^String encoded-key (get payload \"key\")]\n    {:decoded-key (.decode (Base64/getDecoder) (.getBytes encoded-key))\n     :key-id (get payload \"key_id\")}))\n\n(let [{:keys [^String decoded-key ^String key-id]} public-key\n      plaintext \"MY_SECRET_VALUE\"\n      cyphertext (caesium.crypto.box/box-seal\n                   (byte-streams/to-byte-array plaintext)\n                   decoded-key)]\n  (http/request\n    {:request-method :put\n     :url \"https://api.github.com/repos/{owner}/{repo}/actions/secrets/{MY_SECRET}\"\n     :body (json/write-value-as-string\n             {:encrypted_value (.encodeToString (Base64/getEncoder) cyphertext)\n              :key_id key-id})\n     :basic-auth [\"{user}\" \"{GITHUB_TOKEN}\"]\n     :headers {\"Content-Type\" \"application/json\"\n               \"Accept\" \"application/vnd.github.v3+json\"}}))\n```\n\n## Differences with other bindings\n\nInstead of making specific claims about specific libraries which may become\noutdated, here are a few properties you may care about:\n\n* caesium is written by a cryptographer who has experience binding\n  cryptographic libraries.\n* caesium has continuous integration and a fairly extensive test suite with\n  very high form/line coverage.\n* caesium does not provide magic layers on top of libsodium that prevent you\n  from writing secure software because of JVM memory semantics, while not\n  getting in your way if you want the default good-enough behavior.\n* caesium uses jnr-ffi pinning correctly; resulting in zero-copy behavior\n  between JVM and C land at the call site.\n* All APIs take `byte[]` and in some cases `ByteBuffer`, never `String`. This\n  gives you the option of zeroing byte arrays out once you're done. `caesium`\n  doesn't hide the no-magic C APIs from you; but you have to understand\n  libsodium to use them. The upside of that is that this library provides the\n  APIs necessary to use `libsodium` safely; e.g. with locked buffers with\n  canaries, secure memset, et cetera.\n* caesium's APIs match libsodium's behavior. If libsodium hashes a seed to\n  produce a keypair, caesium will hash a seed to produce a keypair. If\n  libsodium uses the default output size of a particular hash function,\n  caesium will use the default output size of that hash function. (These were\n  at time of writing not true for at least 1 other library).\n\ncaesium tries to just give you the libsodium experience from Clojure. C\npseudo-namespaces are mapped to real Clojure namespaces. It usually maps fns to\npredictable names; `sodium_crypto_secretbox_open_easy` will be called\n`caesium.crypto.secretbox/open-easy`. Formally: take the C pseudo-namespace,\nturn it into a real namespace, replace the leading `sodium` with caesium,\nreplace underscores with dashes. Exceptions where this doesn't work out:\n\n* sometimes, the last part of the C pseudo-namespace is repeated. This happens\n  for functions that have the same name as a C pseudo-namespace,\n  e.g. `crypto_generichash` (which is also the pseudo-namespace for\n  e.g. `crypto_generichash_init`). These would be available in the\n  `caesium.crypto.generichash` namespace, as `generichash` and `init`. This is\n  also repeated for some functions where there is a small suffix, e.g. the\n  function name for the \"easy secretbox opener\" is `secretbox-easy-open`, not\n  `easy-open`.\n* some functions map to the same underlying C functions, but have different\n  Java APIs. For example, one of them might cast to `ByteBuffer`, while others\n  assume byte arrays, while others rely on reflection to call the right\n  thing. Other pairs of functions might expect you to produce the output\n  buffer, or manage the output buffer for you. Since these are only JVM-level\n  differences, these often need different names at the JVM/Clojure\n  level. (This is always done as a fairly descriptive suffix.)\n* functions designed to make a `#define` constant available are accessible as\n  values, they don't need to be called. For example, you can access the\n  `crypto_generichash_KEYBYTES_MIN` constant via the `libsodium` `size_t\n  crypto_generichash_keybytes_min(void);` function, but in caesium, it's just\n  `caesium.crypto.generichash/keybytes-min` (not a function you have to call).\n* some families of functions in libsodium are a consequence of C not\n  supporting multi-arity functions; e.g. `scalarmult` in libsodium has two\n  functions: one with the fixed base point and one with an explicit base\n  point; caesium just has one function with two arities.\n* caesium sometimes takes a little artistic license with some of the exposed\n  names when that makes more sense than the original; generally fns will be\n  available under both the \"official\" name and an alias.\n\n## Compatibility\n\ncaesium uses [semver](http://semver.org/).\n\nSince this is a security-sensitive library, I will actively remove functions\nor APIs that have serious security problems, instead of simply documenting the\nproblem.\n\n## License\n\nCopyright \u00a9 the caesium authors (see AUTHORS)\n\nDistributed under the Eclipse Public License either version 1.0 or (at\nyour option) any later version.\n"
 },
 {
  "repo": "aldobas/cryptography-03lpyov-exercises",
  "language": "Python",
  "readme_contents": "# cryptography-03lpyov-exercises\n\nThis repository collects the source code of the exercises presented during the Cryptography course of the CyberSecurity career of Computer Science Engineering of the Politecnico di Torino.\n\n\n"
 },
 {
  "repo": "btclib-org/btclib",
  "language": "Python",
  "readme_contents": "\n# A Python library for 'bitcoin cryptography'\n\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/btclib.svg)](https://pypi.python.org/pypi/btclib/)\n[![PyPI version](https://img.shields.io/pypi/v/btclib.svg)](https://pypi.python.org/pypi/btclib/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-%231674b1.svg)](https://github.com/psf/black)\n[![Imports: isort](https://img.shields.io/badge/imports-isort-%231674b1)](https://timothycrosley.github.io/isort/)\n[![Linted: flake8](https://img.shields.io/badge/lint-flake8-%231674b1)](https://flake8.pycqa.org)\n[![Linted: pylint](https://img.shields.io/badge/lint-pylint-%231674b1)](https://pylint.pycqa.org)\n[![Type-checked: mypy](https://img.shields.io/badge/type--check-mypy-%231674b1)](http://mypy-lang.org/)\n[![Type-checked: pyright](https://img.shields.io/badge/type--check-pyright-%231674b1)](https://github.com/microsoft/pyright)\n[![Refactored: sourcery](https://img.shields.io/badge/refactor-sourcery-%231674b1)](https://sourcery.ai)\n[![Security: bandit](https://img.shields.io/badge/security-bandit-%231674b1.svg)](https://github.com/PyCQA/bandit)\n[![Build Status](https://github.com/btclib-org/btclib/actions/workflows/test.yml/badge.svg)](https://github.com/btclib-org/btclib/actions/workflows/test.yml)\n[![ReadtheDocs](https://img.shields.io/readthedocs/btclib.svg)](https://btclib.readthedocs.io)\n[![Coverage Status](https://coveralls.io/repos/github/btclib-org/btclib/badge.svg?branch=master)](https://coveralls.io/github/btclib-org/btclib?branch=master)\n[![PyPI status](https://img.shields.io/pypi/status/btclib.svg)](https://pypi.python.org/pypi/btclib/)\n[![GitHub License](https://img.shields.io/github/license/btclib-org/btclib.svg)](https://github.com/btclib-org/btclib/blob/master/LICENSE)\n[![Follow on Twitter](https://img.shields.io/twitter/follow/btclib?style=social&logo=twitter)](https://twitter.com/intent/follow?screen_name=btclib)\n\n[btclib](https://btclib.org) is a\nPython3 [type annotated](https://docs.python.org/3/library/typing.html)\nlibrary intended for teaching, learning, and using bitcoin,\nits blockchain, and the associated elliptic curve cryptography.\n\nIt is rigorously and extensively tested: the test suite\n[covers 100%](https://coveralls.io/github/btclib-org/btclib)\nof the code base and reproduces results from both informal\nand major reference sources.\n\nOriginally developed for the\n[_Bitcoin and Blockchain Technology_](https://www.ametrano.net/bbt/)\ncourse at the University of Milano-Bicocca,\nbtclib is not intended for production environments:\nit is often refactored for improved clarity,\nwithout care for backward compatibility; moreover,\nsome of its algorithms could be broken using side-channel attacks.\n\nIncluded features are:\n\n- modulo algebra functions (gcd, inverse, legendre symbol, square root)\n- octets / integer / point / var_int / var_bytes helper functions\n- elliptic curve class\n  - fast algebra implemented using Jacobian coordinates\n  - double scalar multiplication (Straus's algorithm, also known as\n    Shamir's trick)\n  - multi scalar multiplication (Bos-coster's algorithm)\n  - point simmetry solution: odd/even, low/high, and quadratic residue\n- elliptic curves: SEC 1 v1 and v2, NIST, Brainpool, and\n  low cardinality test curves\n- ECDSA signature with (transaction) DER encoding\n- ECDSA signature with (message) compact encoding: standard p2pkh and\n  [BIP137](https://github.com/bitcoin/bips/blob/master/bip-0137.mediawiki)/[Electrum](https://electrum.org/#home)\n  extensions to p2wpkh and p2wpkh-p2sh\n- EC Schnorr signature (according to\n  [BIP340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki)\n  bitcoin standardization)\n  - batch validation\n  - threshold signature (see test-suite)\n  - MuSig multi-signature (see test-suite)\n- Borromean ring signature\n- [RFC 6979](https://tools.ietf.org/html/rfc6979:) to make signature\n  schemes deterministic\n- Sign-to-contract commitment\n- Diffie-Hellman\n- Pedersen committment\n- Base58 encoding/decoding\n- p2pkh/p2sh addresses and WIFs\n- Bech32 encoding/decoding\n- p2wpkh/p2wsh native SegWit addresses and their legacy p2sh-wrapped versions\n- [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n  hierarchical deterministic key chains\n- [SLIP132](https://github.com/satoshilabs/slips/blob/master/slip-0132.md)\n  key versions (xprv, yprv, zprv, Yprv, Zprv, tprv, uprv, vprv, and Uprv)\n  with corresponding mapping to\n  p2pkh/p2sh, p2wpkh-p2sh, p2wpkh, p2wsh-p2sh, p2wsh and p2tr addresses\n- [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)\n  wordlists and mnemonic for generating deterministic keys\n- [Electrum](https://electrum.org/#home) standard for mnemonic\n- Script encoding/decoding\n- nulldata, p2pk, p2ms, p2pkh, p2sh, p2wpkh, p2wsh and p2tr ScriptPubKeys\n- BlockHeader and Block data classes\n- OutPoint, TxIn, TxOut, and TX data classes\n- legacy, segwit_v0 and taproot transaction hash signatures\n- [BIP174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)\n  partially signed bitcoin transactions (PSBT):\n  PsbtIn, PbstOut, and Psbt data classes\n\n* * *\n\nTo install (and/or upgrade) btclib:\n\n    python -m pip install --upgrade btclib\n\nYou might want to install btclib into a\npython virtual environment; e.g. from the root folder:\n\nBash shell\n\n    python -m venv venv_btclib\n    source ./venv_btclib/bin/activate\n    python -m pip install --upgrade btclib\n\nWindows CMD or PowerShell:\n\n    python -m venv venv_btclib\n    .\\venv_btclib\\Scripts\\activate\n    python -m pip install --upgrade btclib\n\nWindows Git bash shell:\n\n    python -m venv venv_btclib\n    cd ./venv_btclib/Scripts\n    . activate\n    cd ../..\n    python -m pip install --upgrade btclib\n\nSome development tools are required to develop and test btclib;\nthey can be installed with:\n\n    python -m pip install --upgrade -r requirements-dev.txt\n\nSome additional packages are needed to build the documentation:\n\n    python -m pip install --upgrade -r docs/requirements.txt\n\n\nDevelopers might also consider to install btclib in editable way:\n\n    python -m pip install --upgrade -e ./\n"
 },
 {
  "repo": "StephenGenusa/DCPCrypt",
  "language": "Pascal",
  "readme_contents": "     =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n     =       DCPcrypt Cryptographic Component Library v2.1     =\n     =                                                         =\n     =          Copyright (c) 1999-2009 David Barton           =\n     =                                                         =\n     =         Further Changes by Henri Gourvest,              =\n     =             Warren Postma and others                    =\n     =           to support Delphi XE and up.                  =\n     =                                                         =\n     =   \twarren.postma@gmail.com                        =\n     =     https://bitbucket.org/wpostma/dcpcrypt2010          =\n     =                                                         =\n     =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=    \n\nUPDATE JANUARY 2014:\n Updated and tested with Delphi 2009, 2010, XE, XE2, XE3, XE4, XE5\n by Warren Postma.  \n  \n Please report bugs on Delphi versions XE or newer at bitbucket\n here: https://bitbucket.org/wpostma/dcpcrypt2010\n\nIntroduction:\n\nDCPcrypt is a collection of cryptographic components for Delphi, \nand C++ Builder. Version 2.1 should work with almost all versions of\nDelphi, from ancient versions like Delphi 5 to the latest versions as\nof 2014, which is Delphi XE5. \n\n** The remainder of this introduction was written around 2003 and \n has not been modified since then, and was written by David Barton. **\n\nThe idea behind DCPcrypt is that it should be possible to \"drop in\"\nany algorithm implementation to replace another with minimum or no\ncode changes. To aid in this goal all cryptographic components are\ndescended from one of several base classes, TDCP_cipher for encryption\nalgorithms and TDCP_hash for message digest algorithms.\n\nDCPcrypt is open source software (released under the MIT license) and\nas such there is no charge for inclusion in other software. However, I\nam currently a student and if you are making money from my software I\nwould really appreciate a donation of some sort, whether financial or\na license for the software you develop (or if anyone wants to sponsor \na Mathematical Modelling (Masters) student for their final year...). \nPlease note THIS IS NOT COMPULSORY IN ANY WAY. See \nhttp://www.cityinthesky.co.uk/cryptography.html for details on \nfinancial donations.\n\nThis software is OSI Certified Open Source Software.\nOSI Certified is a certification mark of the Open Source Initiative.\n\nIf you maintain a website then a link to my page at \nhttp://www.cityinthesky.co.uk/ would be great!\n\n\n\nWhat's New:\n\nChanges since DCPcrypt v2 Beta 2 include\n\n  *  Corrected C++ Builder compilation problem.\n\n\nChanges since DCPcrypt v2 Beta 1 include\n\n  *  Renamed source code files for hashes and ciphers to DCPxxx.pas\n  \n  *  Change the format of Cipher.InitStr so that the hash algorithm\n     used to generate the key is explicitly specified. In order to\n     get the same functionality as before, use TDCP_sha1.\n     e.g. Cipher.InitStr('Hello World',TDCP_sha1);\n\n  *  Block ciphers are now inherited from an intermediate component\n     that implements the block size specific chaining mode encryption\n     routines.\n\n  *  Remove the internal component registration, it was more hassle\n     than it was worth. If there is a demand for this to be put back\n     then I might...     \n\n  *  Added the full range of operation modes for Haval. By changing\n     the defines at the top of DCPhaval.pas you can specify the\n     number of passes and the output hash size.\n     \n  *  Added the Tiger hash algorithm (192bit digest).\n  \n  *  Changed the name of the file containing TDCP_ripemd160 for \n     consistency to DCPripemd160 from DCPrmd160.\n     \n  *  GOST no longer appears on the component palette pending verifying\n     what the actual standard is (the code is still included however).\n\n  *  Added the RipeMD-128 hash algorithm (128bit digest).\n  \n  *  Added the Serpent block cipher (AES finalist).\n  \n  *  Added the SHA-256,384,512 hash algorithms (256, 384, 512bit digest\n     respectively).\n\n  *  Added CTR chaining mode to all block ciphers.\n  \n\n\nInstallation:\n\nDelphi:      Open the appropriate package, DCPdelphiX.dpk where X is \n             your version of Delphi (either 4, 5 or 6). Then press the\n             install button.\n\nC++ Builder: Create a new design time package and add all the .pas\n             files from the DCPcrypt2.zip archive including all those\n             in the Ciphers and Hashes subdirectories. Then press the\n             install button.\n\nKylix:       Open the DCPkylix.dpk package and then press the install\n             button (note: Kylix 1 users may need to create a new\n             package as with C++ Builder as this is a Kylix 2 package).\n\nYou may need to add the directory containing DCPcrypt (and the Ciphers\nand Hashes subdirectories) to your library search path (found under \nEnvironment Options).\n\nOnce installed you will find two extra pages of components on your \ncomponent palette, namely DCPciphers and DCPhashes. You can now place \nthese components onto the form of your application to start using the \nalgorithms.\n\n\n\nUsage:\n\nSee the main html documentation in the Docs subdirectory.\n\n\n\nContact:\n\nI appreciate knowing what DCPcrypt is being used for and also if you \nhave any queries or bug reports please email me at crypto@cityinthesky.co.uk. \n\n\n\nDCPcrypt is copyrighted (c) 1999-2003 David Barton.\nAll trademarks are property of their respective owners.\n"
 },
 {
  "repo": "sodiumoxide/sodiumoxide",
  "language": "Rust",
  "readme_contents": "[DEPRECATED]\n\nThis project has reached the end of its development as a cryptographic library\nfor rust. Feel free to browse the code, and feel free to use it, but it will\nnot see any more updates (unless a security issue arises, those will be fixed).\n\nThe cryptographic landscape of rust has vastly changed since this library was\nintroduced to the community, and we believe that if you need a featureset that\ngoes beyond what this library delivers there are other libraries that would\nwork well.\n\nIt's been fun, but the last couple of years I haven't been able to give this\nlibrary the attention I feel that it deserves, so now it's time to formally\ndeprecate it.\n\n\n# sodiumoxide\n\n|Crate|Documentation|Gitter|\n|:---:|:-----------:|:--------:|:-----:|:------:|:----:|\n|[![Crates.io][crates-badge]][crates-url]|[![Docs][doc-badge]][doc-url]|[![Gitter][gitter-badge]][gitter-url]|\n\n[crates-badge]: https://img.shields.io/crates/v/sodiumoxide.svg\n[crates-url]: https://crates.io/crates/sodiumoxide\n[doc-badge]: https://docs.rs/sodiumoxide/badge.svg\n[doc-url]: https://docs.rs/sodiumoxide\n[gitter-badge]: https://badges.gitter.im/rust-sodiumoxide/Lobby.svg\n[gitter-url]: https://gitter.im/rust-sodiumoxide/Lobby\n\n> [NaCl](http://nacl.cr.yp.to) (pronounced \"salt\") is a new easy-to-use high-speed software library for network communication, encryption, decryption, signatures, etc. NaCl's goal is to provide all of the core operations needed to build higher-level cryptographic tools.\n> Of course, other libraries already exist for these core operations. NaCl advances the state of the art by improving security, by improving usability, and by improving speed.\n\n> [Sodium](https://github.com/jedisct1/libsodium) is a portable, cross-compilable, installable, packageable fork of NaCl (based on the latest released upstream version nacl-20110221), with a compatible API.\n\nThis package aims to provide a type-safe and efficient Rust binding that's just\nas easy to use.\nRust >= 1.36.0 is required because of mem::MaybeUninit.\n\n## Basic usage\n\n### Cloning\n```\ngit clone https://github.com/sodiumoxide/sodiumoxide.git\ncd sodiumoxide\ngit submodule update --init --recursive\n```\n\n### Building\n```\ncargo build\n```\n\n### Testing\n```\ncargo test\n```\n\n### Documentation\n```\ncargo doc\n```\n\nDocumentation will be generated in target/doc/...\n\nMost documentation is taken from NaCl, with minor modification where the API\ndiffers between the C and Rust versions.\n\n### Support for the AES AEAD Variant\n\nThe AES AEAD variant `crypto_aead_aes256gcm` requires hardware support for the\n`AES` and `CLMUL` instruction set extensions to x86; you can read why that's the\ncase\n[here](https://doc.libsodium.org/secret-key_cryptography/aead/aes-256-gcm#limitations). These instruction set extensions were first made\navailable in Intel Westmere (early 2010) and at the time of writing x86 hardware\nsupport for them is near universal.\n\nLibsodium exposes an API for runtime feature detection and doesn't prevent\nyou from calling `crypto_aead_aes256gcm` on a machine lacking `AES` and\n`CMUL` expressions; doing so will result in a runtime `SIGILL` (illegal\ninstruction). By contrast sodiumoxide exposes an API that precludes the use of\nthe `crypto_aead_aes256gcm_*` family of functions without performing the runtime\ncheck. It's important to note that the use of `sodiumoxide::init()` is mandatory\nwhen using AES; unless you call `init` calls `aead::aes256gcm::Aes256Gcm::new()`\nwill always return `Err(_)` even if your runtime hardware supports AES.\n\n## Dependencies\n\nC compiler (`cc`, `clang`, ...) must be installed in order to build libsodium from source.\n\n## Extended usage\n\nThis project contains a snapshot of libsodium and builds it by default, favouring a statically-built, fixed version of the native library.\n\nAlthough it is highly recommended to use the default way with the pinned version, there are several ways you may want to use this crate:\n* link it against the library installed on your system\n* link it against a precompiled library that you built on your own\n\nYou can do this by setting environment variables.\n\n|Name|Description|Example value|Notes|\n| :- | :-------- | :---------- | :-- |\n|`SODIUM_LIB_DIR`|Where to find a precompiled library|`/usr/lib/x86_64-linux-gnu/`|The value should be set to the directory containing `.so`,`.a`,`.la`,`.dll` or `.lib`|\n|`SODIUM_SHARED`|Tell `rustc` to link the library dynamically|`1`|Works only with `SODIUM_LIB_DIR`. We check only the presence|\n|`SODIUM_USE_PKG_CONFIG`|Tell build.rs to find system library using pkg-config|`1`|We check only the presence|\n|`SODIUM_DISABLE_PIE`|Build with `--disable-pie`|`1`|Certain situations may require building libsodium configured with `--disable-pie`. Useful for !Windows only and when building libsodium from source. We check only the presence|\n\n### Examples on *nix\n\n#### Using pkg-config\n\n(Ubuntu: `apt install pkg-config`, OSX: `brew install pkg-config`, ...)\n\n```\nexport SODIUM_USE_PKG_CONFIG=1\ncargo build\n```\n\n#### Using precompiled library\n\nSee https://download.libsodium.org/doc/installation.\n\n```\nexport SODIUM_LIB_DIR=/home/user/libsodium-1.0.18/release/lib/\nexport SODIUM_SHARED=1\ncargo build\n```\n\n## Optional features\n\nSeveral [optional features](http://doc.crates.io/manifest.html#usage-in-end-products) are available:\n\n* `std` (default: **enabled**). When this feature is disabled,\n  sodiumoxide builds using `#![no_std]`. Some functionality may be lost.\n\n* `serde` (default: **enabled**). Allows serialization and deserialization of\n  keys, authentication tags, etc. using the\n  [serde library](https://crates.io/crates/serde).\n\n* `benchmarks` (default: **disabled**). Compile benchmark tests. Requires a\n  nightly build of Rust.\n\n## Cross-Compiling\n\n### Cross-Compiling for armv7-unknown-linux-gnueabihf\n\n1. Install dependencies and toolchain:\n\n```\nsudo apt update\nsudo apt install build-essential gcc-arm-linux-gnueabihf libc6-armhf-cross libc6-dev-armhf-cross -y\nrustup target add armv7-unknown-linux-gnueabihf\n```\n\n2. Add the following to a [.cargo/config file](http://doc.crates.io/config.html):\n\n```\n[target.armv7-unknown-linux-gnueabihf]\nlinker = \"arm-linux-gnueabihf-gcc\"\n```\n\n3. Build by running:\n\n```\ncargo build --release --target armv7-unknown-linux-gnueabihf\n```\n\n### Cross-Compiling for armv7-unknown-linux-musleabihf via docker\n\n1. cargo.config:\n\n```\n[target.armv7-unknown-linux-musleabihf]\nlinker = \"arm-buildroot-linux-musleabihf-gcc\"\n```\n\n2. Dockerfile:\n\n```\nFROM rust:1.36.0\n\nENV TARGET=\"armv7-unknown-linux-musleabihf\"\n\nARG TOOLCHAIN_ARM7=\"armv7-eabihf--musl--stable-2018.02-2\"\nARG TC_ARM7_URL=\"https://toolchains.bootlin.com/downloads/releases/toolchains/armv7-eabihf/tarballs/${TOOLCHAIN_ARM7}.tar.bz2\"\n\nRUN rustup target add ${TARGET}\nCOPY cargo.config \"${CARGO_HOME}/config\"\n\nWORKDIR /opt\nRUN curl -o- ${TC_ARM7_URL} | tar -xjf -\n\nENV PATH=\"${PATH}:/opt/${TOOLCHAIN_ARM7}/bin\"\nENV CC_armv7_unknown_linux_musleabihf=arm-buildroot-linux-musleabihf-gcc\nENV CXX_armv7_unknown_linux_musleabihf=arm-buildroot-linux-musleabihf-g++\nENV LD_armv7_unknown_linux_musleabihf=arm-buildroot-linux-musleabihf-ld\n\nWORKDIR /work\nRUN git clone https://github.com/sodiumoxide/sodiumoxide\n\nWORKDIR /work/sodiumoxide\nRUN cargo build --target=${TARGET}\n```\n\n### Cross-Compiling for 32-bit Linux\n\n1. Install dependencies and toolchain:\n\n```\nsudo apt update\nsudo apt install build-essential gcc-multilib -y\nrustup target add i686-unknown-linux-gnu\n```\n\n2. Build by running:\n\n```\ncargo build --release --target i686-unknown-linux-gnu\n```\n\n## Examples\n\nTBD\n\n## Platform Compatibiility\n\nSodiumoxide has been tested on:\n\n- Linux: Yes\n- Windows: Yes (MSVC)\n- Mac OS: Yes\n- IOS: TODO\n- Android: Yes\n\n\n# Join in\n\nFile bugs in the issue tracker\n\nMaster git repository\n\n    git clone https://github.com/sodiumoxide/sodiumoxide.git\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nGo through the [CONTRIBUTING.md](https://github.com/sodiumoxide/sodiumoxide/blob/master/CONTRIBUTING.md) document to know more about how to contribute to this project.\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n\n### Code of Conduct\n\nWe believe in creating an enabling community for developers and have laid out a general [code of conduct](https://github.com/sodiumoxide/sodiumoxide/blob/master/CODE_OF_CONDUCT.md). Please read and adopt it to help us achieve and maintain the desired community standards.\n"
 },
 {
  "repo": "sustrik/crypto-for-kids",
  "language": "HTML",
  "readme_contents": "# Crypto for Kids (A Book that is a Labyrinth)\n\nThis project is a dumping ground for texts that will one day form a cryptography book for kids.\n\nThe target age group is 11+. According to Piaget, kids in concrete operational stage, aged 7-11, learn to understand a perspective other than one's own. Once they are done with that the door is open to understanding cryptography which, by it nature, requires looking at conflicts from persepectives of different participants.\n\nThat being said, 95% of the grown-ups know nothing about cryptography, maybe except for its name. Furthermore, 99.9% have no idea that some special kind of thinking is required, one that doesn't come naturally and which may be useful even in everyday situations that have nothing to do with cryptography. Therefore, it would be nice if the book, while primarily focused on children, would be digestible by grown-ups.\n\nThe goal of the book is to avoid as much technical detail as possible and focus on basic principles and the kind of twisted thinking needed for cryptography. As such the book will also touch adjacent subjects such as game theory, psychology, maths, economics, history, opsec, stage magic, you name it.\n\nThe book itself is going to be a mystery, a puzzle, a labyrinth. It will be split into small pieces and the correct ordering of the pieces will be revealed only by solving little cryptographical puzzles.\n\n![](paths1.png)\n\nOne story may look, for example, like this: First, something impossible happens. Then the reader will be told: \"How is that possible?\" or \"You now have enough information to solve the mystery yourself!\" The final part of the story will resolve the mystery, but there's a catch. The reference to the final part will be encrypted, obfuscated or maybe steganographically hidden. To give a trivial example: \"Continue reading at section 54 mod 7!\"\n\nStructuring the stories like this has an educational value. Namely, if you want to teach something to someone, exercises are needed. But people tend to skip exercises. I, for one, do. This way the reader will be forced to do the exercise to be able to continue reading.\n\nThe system also enforces the rules of the game. The reader cannot skip stuff or start reading from the middle.\n\nFirst, you cannot pick a chapter and find the previous one. Technically, this works like a one-way function. Given that the chapters are unordered and the only link between two subsequent chapters is a command at the end of the first chapter (e.g. \"Go to section 135!\") you would have to search through the entire book to find the previous chapter. But even if the book is digitalized and allows for automated searching, looking for \"135\" is not going to find anything if the command is \"Go to section 324 mod 189!\". \n\nSecond, picking a chapter from the middle of the book and trying to move forward is not going to work. Specifically, if the puzzle at the end of the chapter requires a skill that wasn't taught in that chapter, there's no way to find the next chapter.\n\nThe picture below shows how, starting reading from chapter 99 it's impossible to move either forward or backward:\n\n![](paths3.png)\n\nTo prevent reader from just reading the entire book some confusing and/or boring pulp should be added. The content of the pulp should not be easily distinguishable from the regular content. Old news articles, letters, accounting statements, fragments of boring novels, nonsensical diagrams and so on. These sections won't be linked from the regular content, but they may be linked together. The puzzles in these pages can be unsolvable or can even make no sense at all. From education standpoint, the reader embarking on the mission to read the entire book will live through an authentic the \"sifting through a lot of stuff\" experience, perhaps landing on an interesting bit here and there.\n\nAs a side effect, the \"hyperlink\" structure of the book makes it possible for the book to be non-linear. Think of the fictional book discussed in Borges' _The Garden of Forking Paths_. Or, to pick a real book, Pavi\u0107's _Dictionary of the Khazars_. If the idea is taken into extreme it won't be possible to read the book without drawing a map, as you do when playing Dungeons & Dragons.\n\n![](paths2.png)\n\nAs for the concrete mechanism, a path split corresponds to a chapter with two puzzles. There's even a neat trick to randomize the splitting. Imagine, for example, that there's a single puzzle in a chapter, a sudoku. After solving it you should continue to the chapter pointed to by the number in upper right corner of the sudoku square. However, unbenknownst to the reader, the sudoku has two possible solutions, each resulting in different number in the upper right corner.\n\nA joining of the paths, on the other hand, doesn't require anything special. All that's needed is for two puzzles in different chapters to point to a single chapter. This mechanism should be used cautiously though as it means that sometimes the reader is going to solve the puzzle and arrive at an already visited place. This element of disappointment may be desirable at small doses but if overdone, it will ruin the game experience. Often, it may be better to have dead-end side branches rather than cycles.\n\nWhile the above primitives provide a tool to build a labyrinth of any kind, the question is what type of labyrinth we want to actually build. And given that the entire project is, in its essence, a game, the form of the labyrinth should be guided by a sound game design.\n\nThe simplest way to do that is to separate the book into multiple \"levels\". Each level will teach particular set of skills. Those skills will then be needed to defeat a \"boss\", i.e. a particularly hard puzzle, that gates the way to the next level:\n\n![](paths4.png)\n\nAnother thing to be learned from game design is that being said how to play the game spoils all the fun. The players should discover stuff by themselves. Therefore, there will be no sheet with the rules. Let kids experience the feeling of dealing with a mysterious artifact, devised by adversarial intelligence to confuse them. Even false leads can be added to make the entire enterprise more entertaining.\n\nYet one more thing to focus on is correct pacing of stories and puzzles. The story should be a reward for solving a puzzle. It should be reasonably long to be an actual reward, but not overly long which would make the entire project less of a game and more of a plain old-school book.\n\nFinally, the story should, at the edges, blend to the real world. Example: \"This is Voynich manuscript. It's scanned and posted online. Go and decypher it if you dare.\" Different example: \"This is the history of cryptography. By the way, there's such a thing as CCC. Go and attend if you will.\" The idea to communicate here is: The thread that stretches from the dawn of time and passes through Caesar, Trithemius and Alan Turing ends in your hand today.\n\n### Notes\n\n1. The rationale for excluding maths: The average reader is not likely to be involved in crypto primitive design, ever. As the primitives get better they become more like Lego blocks. You never make Lego blocks yourself. They are done by few experts in a Lego factory. It may be interesting to know how they are made but you don't have to to play with the bricks.\n2. I definitely want the book to by printed in some XVII. century typeface. That seems to be a good compromise between keeping it readable while at the same time mysterious and weird. Also, the number of topics covered and unconnectedness of the different stories gives it a distinct baroque feel (think _Anatomy of Melancholy_) so the font should reflect that.\n3. In such a convoluted book, pictures are natural focus points. This gives a possibility to attract attention of the reader to read particular sections in out-of-order manner. Which may be desirable in some cases. Where it is not, we can still put the picture in a separate section with no accompanying text. The section that references it will be hard to find, so such stand-alone pictures will make casual thumb-throughers only more confused.\n4. One fun option: The story wanders of to the Internet at some point. Then returns back to the book after a while. That, in turn, allows for playing a stage magic trick: The reader is, at this point, accustomed to how the printed book works. They will expect that the chapters on Internet will be similar. Wrong! The Internet can do different kinds of things, like showing a different chapter to different people. Showing particular text only on special occassions, like when moon is full, and so on.\n5. Unsolved problem: How to do references? It would be nice if, say, Messager's story had a reference to \"perfect secrecy\" and \"Claude Shannon\", so that interested readers would have keywords to search for on the Internet. On the other hand, providing references can make the book less mysterious and readers could cheat when solving the puzzles by looking at the reference material instead of thinking themselves.\n\nRendered version of the text: <https://sustrik.github.io/crypto-for-kids/>\n\nIf you want to participate in writing this book, please drop me a note at `sustrik@250bpm.com` or simply open a pull request.\n\n**All the text is licensed under Creative Commons Attribution 4.0 International Public License.**\n"
 },
 {
  "repo": "dalek-cryptography/subtle",
  "language": "Rust",
  "readme_contents": "# subtle [![](https://img.shields.io/crates/v/subtle.svg)](https://crates.io/crates/subtle) [![](https://img.shields.io/badge/dynamic/json.svg?label=docs&uri=https%3A%2F%2Fcrates.io%2Fapi%2Fv1%2Fcrates%2Fsubtle%2Fversions&query=%24.versions%5B0%5D.num&colorB=4F74A6)](https://doc.dalek.rs/subtle) [![](https://travis-ci.org/dalek-cryptography/subtle.svg?branch=master)](https://travis-ci.org/dalek-cryptography/subtle)\n\n**Pure-Rust traits and utilities for constant-time cryptographic implementations.**\n\nIt consists of a `Choice` type, and a collection of traits using `Choice`\ninstead of `bool` which are intended to execute in constant-time.  The `Choice`\ntype is a wrapper around a `u8` that holds a `0` or `1`.\n\n```toml\nsubtle = \"2.4\"\n```\n\nThis crate represents a \u201cbest-effort\u201d attempt, since side-channels\nare ultimately a property of a deployed cryptographic system\nincluding the hardware it runs on, not just of software.\n\nThe traits are implemented using bitwise operations, and should execute in\nconstant time provided that a) the bitwise operations are constant-time and\nb) the bitwise operations are not recognized as a conditional assignment and\noptimized back into a branch.\n\nFor a compiler to recognize that bitwise operations represent a conditional\nassignment, it needs to know that the value used to generate the bitmasks is\nreally a boolean `i1` rather than an `i8` byte value. In an attempt to\nprevent this refinement, the crate tries to hide the value of a `Choice`'s\ninner `u8` by passing it through a volatile read. For more information, see\nthe _About_ section below.\n\nVersions prior to `2.2` recommended use of the `nightly` feature to enable an\noptimization barrier; this is not required in versions `2.2` and above.\n\nNote: the `subtle` crate contains `debug_assert`s to check invariants during\ndebug builds. These invariant checks involve secret-dependent branches, and\nare not present when compiled in release mode. This crate is intended to be\nused in release mode.\n\n## Documentation\n\nDocumentation is available [here][docs].\n\n## Minimum Supported Rust Version\n\nRust **1.41** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n\n## About\n\nThis library aims to be the Rust equivalent of Go\u2019s `crypto/subtle` module.\n\nThe optimization barrier in `impl From<u8> for Choice` was based on Tim\nMaclean's [work on `rust-timing-shield`][rust-timing-shield], which attempts to\nprovide a more comprehensive approach for preventing software side-channels in\nRust code.\n\n`subtle` is authored by isis agora lovecruft and Henry de Valence.\n\n## Warning\n\nThis code is a low-level library, intended for specific use-cases implementing\ncryptographic protocols.  It represents a best-effort attempt to protect\nagainst some software side-channels.  Because side-channel resistance is not a\nproperty of software alone, but of software together with hardware, any such\neffort is fundamentally limited.\n\n**USE AT YOUR OWN RISK**\n\n[docs]: https://docs.rs/subtle\n[rust-timing-shield]: https://www.chosenplaintext.ca/open-source/rust-timing-shield/security\n"
 },
 {
  "repo": "ageron/visual_crypto",
  "language": "Python",
  "readme_contents": "# Visual cryptography tool\n\nA fun visual cryptography tool that will amaze your kids.\n\n![overview](overview.png)\n\n## Usage\n\n    $ python visual_crypto.py -vvv --message message.png --secret secret.png\n\nThis produces the ciphered image (`ciphered.png`) that looks completely random, just like the random secret image (`secret.png`).\n\nPrint `secret.png` on a transparent paper, and `ciphered.png` on regular paper, then place the transparent paper on top of the regular paper, and see the original image suddenly appear in front of you. Make sure to print at exactly the same scale and align both papers perfectly: the image only appears when alignment is perfect.\n\n## Requirements\nThis program requires the Python Image Library (PIL). The easiest way to install it is using pip:\n\n    $ pip install --upgrade Pillow\n\n## More info\nThis is a visual variant of the one-time-pad algorithm which is one of the rare crypto algorithms that has been proven to be completely unbreakable. The great thing about it is that you don't need a computer to decipher the messages you receive (but you do need one to generate the ciphered messages). If you were to use this seriously, you would first generate many random secret images and share them securely with the person you want to communicate with, then later you must use one different secret image for each message you want to send. Never reuse a secret image.\n\nCheck out the Wikipedia article on [Visual Cryptography](https://en.wikipedia.org/wiki/Visual_cryptography) for more details.\n\nHave fun!"
 },
 {
  "repo": "danielquinn/aletheia",
  "language": "CSS",
  "readme_contents": "<img src=\"logo-light.png\" alt=\"Aletheia\" />\n\n[![Python3](https://img.shields.io/pypi/pyversions/aletheia.svg)](https://pypi.org/project/aletheia/)\n\nFight fake news with cryptography & human nature\n\nJust as journalism has taken a critical financial hit, fake news is multiplying\nacross social networks faster than facts. The public doesn't know which stories\nare real any more because anyone with a laptop can forge audio & video in\nrecord time. We need to empower the institutions we trust with the ability to\ntie their reputations to the journalism they produce.\n\nAletheia uses cryptographic signatures + DNS to leverage existing networks of\nhuman trust in individual journalists & institutions to help link those people\nto the work they produce with a view to change our expectations of what\nconstitutes journalism: if it's not verified, it's just some stranger on the\ninternet.\n\nTo this end, Aletheia combines cryptographic signatures with human nature's\nconcept of social trust.  It helps you sign all the files you produce so that\nthey can later be verified as coming from you.  At that point, math has\nguaranteed the file's origin, it's only our personal (or professional)\nreputations that can be called into question.\n\nThis is further outlined in this [blog post](https://danielquinn.org/blog/public-key-authentication-for-media-files-why-isnt-this-a-thing/)\non the subject.  This project is inspired by this [Radiolab story](http://futureoffakenews.com/videos.html)\ncovering how surprisingly easy it is to create believable audio & video fakes.\n\n\n## Visuals\n\n\n### Signing\n\nThis is a typical file\n\n<p align=\"center\"><img src=\"presentation/img/diagrams/sign-structure.png\" alt=\"A basic file\" /></p>\n\nAletheia uses your private key to sign the relevant portion of the file:\n\n<p align=\"center\"><img src=\"presentation/img/diagrams/sign-read.png\" alt=\"Signing with a private key\" /></p>\n\nThat signature is inserted into the file header, along with the URL for the\npublic key:\n\n<p align=\"center\"><img src=\"presentation/img/diagrams/sign-write.png\" alt=\"Writing the headers\" /></p>\n\nThe final result is a slightly larger file, now with a means of verifying its\norigin.\n\n<p align=\"center\"><img src=\"presentation/img/diagrams/sign-final.png\" alt=\"A basic file\" /></p>\n\n\n### Verification\n\nWhen it comes time to verify the file, you need only extract the public key\nURL:\n\n<p align=\"center\"><img src=\"presentation/img/diagrams/verify-extract.png\" alt=\"Extract the public key URL\" /></p>\n\n...and fetch that key from the creator's site:\n\n<p align=\"center\"><img src=\"presentation/img/diagrams/verify-fetch.png\" alt=\"Fetch the public key\" /></p>\n\nFinally, we use this public key to verify the file:\n\n<p align=\"center\"><img src=\"presentation/img/diagrams/verify-final.png\" alt=\"Verify all the things!\" /></p>\n\n---\n\nAletheia will do all of this for you in two commands: `sign`, and `verify`.\n\nIf you'd like to get started, you can [install Aletheia from PyPi now](https://pypi.org/project/aletheia/).\nIf however you're looking for a more technical explanation, keep reading.\n\n\n## A technical explanation\n\nThe process is relatively simple: source organisations & individuals can\npublish their public key somewhere on the internet and use their private key to\nsign the media they distribute.  Social networks and individuals can then\nreference this signature to verify the origin.\n\n\n### Generate a private & public key\n\nGenerating a private & public key is necessary for the signing & verification\nprocess, but this only needs to be run once.\n\n```bash\n$ aletheia generate\nGenerating private/public key pair...\n\nAll finished!\n\nYou now have two files: aletheia.pem (your private key) and\naletheia.pub (your public key).  Keep the former private, and share\nthe latter far-and-wide.  Importantly, place your public key at a\npublicly accessible URL so that when you sign a file with your\nprivate key, it can be verified by reading the public key at that\nURL.\n```\n\n\n### Sign a file\n\n```bash\n$ aletheia sign file.jpg example.com\n```\n\nHere, the `aletheia` program:\n\n1. Gets the image data (sans metadata)\n2. Generates a signature by combining it with our private key\n3. Converts the signature to text\n4. Writes the new signature to the file along with the location of our public\n   key.\n\n\n### Verifying a file\n\n```bash\n$ aletheia verify file.jpg\n```\n\nMuch like signing, `aletheia` is doing all the work for you:\n\n1. It extracts the signature & URL from the file\n2. Fetches the public key from the URL & caches it\n3. Attempts to verify the signature on the file with said public key.\n\n\n## Project Status\n\nAletheia is working, and ready to be deployed on sites running Python, or ones\nhappy to use the Python-based command-line script.  In order for it to be\nwidely adopted however, more needs to be done.  Here's what we have so far:\n\n\n### Ready\n\nWe now have a working [Python library](https://pypi.org/project/aletheia/) that\ncan generate keys as well as support the following file formats:\n\n\n### Images\n\n<table style=\"margin: 0 auto;\">\n   <tr>\n      <th>Format</th>\n      <th>Supported</th>\n      <th>Notes</th>\n   </tr>\n   <tr>\n      <th colspan=\"3\">Images</th>\n   </tr>\n   <tr>\n      <td>JPEG</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td>Requires <a href=\"https://sno.phy.queensu.ca/~phil/exiftool/\">Exiftool</a></td>\n   </tr>\n   <tr>\n      <td>GIF</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td>Requires <a href=\"https://sno.phy.queensu.ca/~phil/exiftool/\">Exiftool</a></td>\n   </tr>\n   <tr>\n      <td>PNG</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td>Requires <a href=\"https://sno.phy.queensu.ca/~phil/exiftool/\">Exiftool</a></td>\n   </tr>\n   <tr>\n      <th colspan=\"3\">Audio</th>\n   </tr>\n   <tr>\n      <td>MP3</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td>Requires <a href=\"https://ffmpeg.org/\">FFmpeg</a></td>\n   </tr>\n   <tr>\n      <th colspan=\"3\">Video</th>\n   </tr>\n   <tr>\n      <td>MKV</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td>Requires <a href=\"https://ffmpeg.org/\">FFmpeg</a></td>\n   </tr>\n   <tr>\n      <td>WEBM</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td>Requires <a href=\"https://ffmpeg.org/\">FFmpeg</a> to verify.  FFmpeg 3.4+ is required for signing.</td>\n   </tr>\n   <tr>\n      <td>MP4</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td>Requires <a href=\"https://ffmpeg.org/\">FFmpeg</a></td>\n   </tr>\n   <tr>\n      <td>AV1</td>\n      <td align=\"center\">\u274c</td>\n      <td></td>\n   </tr>\n   <tr>\n      <th colspan=\"3\">Other</th>\n   </tr>\n   <tr>\n      <td>HTML</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>Markdown</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>ReStructuredText</td>\n      <td align=\"center\">\u274c</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>JSON</td>\n      <td align=\"center\">\ud83d\udc4d</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>PDF</td>\n      <td align=\"center\">\u274c</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>GZ</td>\n      <td align=\"center\">\u274c</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>BZ2</td>\n      <td align=\"center\">\u274c</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>XZ</td>\n      <td align=\"center\">\u274c</td>\n      <td></td>\n   </tr>\n</table>\n\n\n### Help Wanted\n\n\n#### Support for additional formats.\n\nThe lowest-hanging fruit are finished, so now the priorities are the other\npopular web formats like `pdf`, `gz`, and maybe `av1` -- assuming these\nformats have a metadata layer into which we can include a signature.\n\n\n#### Porting the Python library to additional languages\n\nPython is great, but it's not for everyone.  Ideally, it would great if\ndevelopers in languages like Ruby, Javascript, PHP, Java, Rust, Clojure, Go,\nand C# could use Aletheia in their chosen environment.\n"
 },
 {
  "repo": "usnistgov/ACVP",
  "language": "HTML",
  "readme_contents": "# ACVP\nThe [Automated Cryptographic Validation Protocol](https://pages.nist.gov/ACVP/draft-fussell-acvp-spec.html) (ACVP) is a protocol to support a new National Voluntary Laboratory Accreditation Program (NVLAP) testing scope at the [National Institute of Standards and Technology (NIST)](https://www.nist.gov).  \n\nThe new testing scope, 17ACVT, is available, and defined in [NIST Handbook 150-17](https://www.nist.gov/system/files/documents/2020/05/12/NIST-HB-150-17-2020.pdf).\n\nAll current information about ACVP protocol may be found within this Github project at https://github.com/usnistgov/ACVP. View the protocol documents at https://pages.nist.gov/ACVP/.\n\nFor issues regarding the actual ACVP Server implementation, as well as pre-release (demo) and release notes (prod), see the ACVP-Server repository: https://github.com/usnistgov/ACVP-Server/.\n\n# Jump to\n* [Background](#background)\n* [How to use Metanorma](#how-to-use-metanorma)\n* [Objective](#objective)\n* [Project Goals](#project-goals)\n* [Status](#status)\n* [Supported Algorithms](#supported-algorithms)\n  * [Block Cipher Modes](#block-cipher-modes)\n  * [Secure Hash](#secure-hash)\n  * [XOFs](#xofs)\n  * [Message Authentication](#message-authentication)\n  * [DRBG](#drbg)\n  * [Digital Signature](#digital-signature)\n  * [Key Agreement](#key-agreement)\n  * [KDFs](#kdfs)\n  * [Safe Primes](#safe-primes)\n  * [Conditioning Components](#conditioning-components)\n* [Accessing the Server](#accessing-the-demo-server)\n* [Contribution Guidelines](contribution-guidelines)\n* [Related Projects](#related-projects)\n* [Licensing Terms](#licensing-terms)\n\n# Background\nThe rapid development of cryptographic technology over the last two decades and its adoption in many different technology domains has resulted in a sharp increase in the number and complexity of approved algorithms. The volume of cryptographic algorithm validations has outstripped the available human resources available to test, report, and validate results. The plethora of different algorithms has created a dire need for consistent requesting and reporting of test data and results. We also live in times of unprecedented levels of threats and exploits that require frequent product updates to fix defects and remove security vulnerabilities, which in turn requires much faster turnaround of validation updates than what the existing validation model allows. See the NIST [Automated Cryptographic Validation Testing project](https://csrc.nist.gov/Projects/Automated-Cryptographic-Validation-Testing) for broader context and information.\n\nRequirements documents for the existing Cryptographic Algorithm Validation Program (CAVP) and the 17CAV scope can be found at https://nvlpubs.nist.gov/nistpubs/hb/2020/NIST.HB.150-2020.pdf. The requirements documents for the 17ACVT scope can be found on the same page.\n\nGeneral information about CAVP can be found at https://csrc.nist.gov/Projects/Cryptographic-Algorithm-Validation-Program with the CAVP management manual found at https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/CAVPMM.pdf and the FAQ at https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/CAVPFAQ.pdf.\n\n# How to use Metanorma\n\nUsing Metanorma is not required to view the documents in the GitHub repository. When changes occur, documents will automatically be built and deployed to https://pages.nist.gov/ACVP.\n\nMetanorma is a library for writing standards. It can compile `.adoc` files into multiple common standards formats including the IETF's RFC format.\n\nUse the instructions here to set up Metanorma: https://www.metanorma.com/author/topics/install/\n\nTo compile an individual file, to make sure your gem versions are up to date run\n\n```\ngem install metanorma-cli\n```\n\nFrom there run\n\n```\nmetanorma compile -t ietf -x html file.adoc\n```\n\nYou can switch between `-x html` and `-x txt` for different RFC output formats.\n\nIf you make changes to a file that's referenced by a top level spec, run metanorma\non the referenced file prior to running it on the top level file. E.g.,\n\n```\nmetanorma compile -t ietf -x html symmetric/sections/04-testtypes.adoc\nmetanorma compile -t ietf -x html draft-celi-acvp-symmetric.adoc\n```\n\nOr you can use the `Makefile` which is available.\n\nTo build all documents, html and txt\n\n```\nmake all\n```\n\nTo build a specific file\n\n```\nmake specific-file.html\n```\n\nTo remove all xml, txt, html, err produces files,\n\n```\nmake clean\n```\n\n# Objective\nThe objective of this project is to define a protocol allowing independent implementation by all vendors participating in the NIST cryptographic validation programs ([CAVP](https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program#) and [CMVP](https://csrc.nist.gov/projects/cryptographic-module-validation-program#)) for accelerated test data generation and requisition, reporting of test results, and validation of NIST-approved cryptographic algorithms (see FIPS140-2 [Annex A](https://csrc.nist.gov/CSRC/media/Publications/fips/140/2/final/documents/fips1402annexa.pdf), [Annex C](https://csrc.nist.gov/CSRC/media/Publications/fips/140/2/final/documents/fips1402annexc.pdf) and [Annex D](https://csrc.nist.gov/CSRC/media/Publications/fips/140/2/final/documents/fips1402annexd.pdf)). For FIPS140-3, the NIST-approved cryptographic algorithms are defined in the [SP800-140 Document Series](https://csrc.nist.gov/publications/detail/sp/800-140/final).\n\n# Project Goals\nThe development of an Automated Cryptographic Validation Protocol (ACVP) that enables the generation and\nvalidation of standardized algorithm test evidence to facilitate the [modernization](https://csrc.nist.gov/Projects/Automated-Cryptographic-Validation-Testing) of [CAVP](https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program#) and [CMVP](https://csrc.nist.gov/projects/cryptographic-module-validation-program).\n\n# Status\nThe demo server (demo.acvts.nist.gov) supports ACVP version 1.0. All endpoints defined in the [protocol specification](https://pages.nist.gov/ACVP/draft-fussell-acvp-spec.html) are available. Some additional endpoinds defined in https://github.com/usnistgov/ACVP-Server are also available but not considered part of this protocol.\n\nThe prod server (acvts.nist.gov) also supports ACVP version 1.0, with the same endpoints defined.\n\n## Supported Algorithms\n\n### Block Cipher Modes\n* [AES-CBC](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-CFB1](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-CFB8](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-CFB128](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-CTR](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-ECB](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-GCM](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-GCM-SIV](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html) - DEMO only\n* [AES-KW](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-KWP](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-OFB](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-XPN](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-XTS 1.0](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html) - no longer supported by ACVTS\n* [AES-XTS 2.0](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-FF1](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-FF3-1](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html) - DEMO only\n* [TDES-CBC](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-CBCI](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-CFB1](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-CFB8](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-CFB64](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-CFBP1](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-CFBP8](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-CFBP64](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-CTR](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-ECB](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-KW](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-OFB](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [TDES-OFBI](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n\n### Secure Hash\n* [SHA-1](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.html)\n* [SHA-224](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.html)\n* [SHA-256](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.html)\n* [SHA-384](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.html)\n* [SHA-512](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.html)\n* [SHA-512/224](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.html)\n* [SHA-512/256](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha.html)\n* [SHA3-224 1.0](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html) - no longer supported by ACVTS\n* [SHA3-256 1.0](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html) - no longer supported by ACVTS\n* [SHA3-384 1.0](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html) - no longer supported by ACVTS\n* [SHA3-512 1.0](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html) - no longer supported by ACVTS\n* [SHA3-224 2.0](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html)\n* [SHA3-256 2.0](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html)\n* [SHA3-384 2.0](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html)\n* [SHA3-512 2.0](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html)\n\n### XOFs\n* [SHAKE-128](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html)\n* [SHAKE-256](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-sha3.html)\n* [cSHAKE-128](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.html)\n* [cSHAKE-256](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.html)\n* [KMAC-128](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.html)\n* [KMAC-256](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.html)\n* [ParallelHash-128](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.html)\n* [ParallelHash-256](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.html)\n* [TupleHash-128](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.html)\n* [TupleHash-256](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-xof.html)\n\n### Message Authentication\n* [AES-CCM](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-symmetric.html)\n* [AES-GMAC](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [CMAC-AES](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [CMAC-TDES](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA-1](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA2-224](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA2-256](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA2-384](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA2-512](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA2-512/224](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA2-512/256](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA3-224](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA3-256](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA3-384](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n* [HMAC-SHA3-512](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-mac.html)\n\n### DRBG\n* [ctrDRBG-AES-128](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.txt) - [HTML](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.html)\n* [ctrDRBG-AES-192](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.txt) - [HTML](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.html)\n* [ctrDRBG-AES-256](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.txt) - [HTML](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.html)\n* [ctrDRBG-TDES](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.txt) - [HTML](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.html)\n* [HASH DRBG](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.txt) - [HTML](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.html)\n* [HMAC DRBG](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.txt) - [HTML](https://pages.nist.gov/ACVP/draft-vassilev-acvp-drbg.html)\n\n### Digital Signature\n* [RSA mode: keyGen](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.html)\n* [RSA mode: sigGen](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.html)\n* [RSA mode: sigVer](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.html)\n* [RSA mode: signaturePrimitive (Component)](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.html)\n* [RSA mode: decryptionPrimitive (Component)](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.html)\n* [RSA mode: legacySigVer](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-rsa.html)\n* [ECDSA mode: sigGenComponent](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.html)\n* [ECDSA mode: keyGen](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.html)\n* [ECDSA mode: keyVer](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.html)\n* [ECDSA mode: sigGen](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.html)\n* [Deterministic ECDSA mode: sigGen](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.html)\n* [ECDSA mode: sigVer](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-ecdsa.html)\n* [DSA mode: keyGen](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.html)\n* [DSA mode: sigVer](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.html)\n* [DSA mode: sigGen](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.html)\n* [DSA mode: pqgGen](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.html)\n* [DSA mode: pqgVer](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-dsa.html)\n* [EDDSA mode: keyGen](https://pages.nist.gov/ACVP/draft-celi-acvp-eddsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-eddsa.html) - DEMO only\n* [EDDSA mode: keyVer](https://pages.nist.gov/ACVP/draft-celi-acvp-eddsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-eddsa.html) - DEMO only\n* [EDDSA mode: sigGen](https://pages.nist.gov/ACVP/draft-celi-acvp-eddsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-eddsa.html) - DEMO only\n* [EDDSA mode: sigVer](https://pages.nist.gov/ACVP/draft-celi-acvp-eddsa.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-eddsa.html) - DEMO only\n\n### Key Agreement\n#### Full KAS Testing\n\nTests against shared secret computation (SSC), key derivation functions (KDF) or key derivation algorithms (KDA), and optionally key confirmation (KC). Test vectors issued under this set of tests (with the exception of 1.0 component based tests) are considered \"full KAS\" testing.\n\n* [KAS ECC ephemeralUnified](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC fullMqv](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC fullUnified](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC onePassDh](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC onePassMqv](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC OnePassUnified](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC staticUnified](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS FFC dhHybrid1](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC mqv2](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC dhEphem](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC dhHybridOneFlow](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC mqv1](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC dhOneFlow](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC dhStatic](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS ECC ephemeralUnified Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.html)\n* [KAS ECC fullMqv Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.html)\n* [KAS ECC fullUnified Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.html)\n* [KAS ECC onePassDh Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.html)\n* [KAS ECC onePassMqv Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.html)\n* [KAS ECC OnePassUnified Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.html)\n* [KAS ECC staticUnified Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.html)\n* [KAS ECC CDH-Component Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ecc-sp800-56ar3.html)\n* [KAS FFC dhHybrid1 Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.html)\n* [KAS FFC mqv2 Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.html)\n* [KAS FFC dhEphem Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.html)\n* [KAS FFC dhHybridOneFlow Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.html)\n* [KAS FFC mqv1 Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.html)\n* [KAS FFC dhOneFlow Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.html)\n* [KAS FFC dhStatic Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ffc-sp800-56ar3.html)\n* [KAS IFC KAS1-basic](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.html)\n* [KAS IFC KAS1-Party_V-confirmation](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.html)\n* [KAS IFC KAS2-basic](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.html)\n* [KAS IFC KAS2-bilateral-confirmation](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.html)\n* [KAS IFC KAS2-Party_U-confirmation](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.html)\n* [KAS IFC KAS2-Party_V-confirmation](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.html)\n* [KTS IFC KTS-OAEP-basic](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.html)\n* [KTS IFC KTS-OAEP-Party_V-confirmation](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ifc.html)\n\n#### KAS SSC Testing\n\nStandalone KAS SSC testing from SP800-56A/B. Can be used in conjunction with KDF/KDA testing and optionally key confirmation testing (as opposed to \"full KAS\" testing) to be considered a valid KAS implementation.\n\n* [KAS ECC ephemeralUnified](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC fullMqv](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC fullUnified](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC onePassDh](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC onePassMqv](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC OnePassUnified](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC staticUnified](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS ECC CDH-Component](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ecc.html)\n* [KAS FFC dhHybrid1](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC mqv2](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC dhEphem](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC dhHybridOneFlow](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC mqv1](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC dhOneFlow](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS FFC dhStatic](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-fussell-acvp-kas-ffc.html)\n* [KAS ECC SSC ephemeralUnified Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.html)\n* [KAS ECC SSC fullMqv Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.html)\n* [KAS ECC SSC fullUnified Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.html)\n* [KAS ECC SSC onePassDh Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.html)\n* [KAS ECC SSC onePassMqv Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.html)\n* [KAS ECC SSC OnePassUnified Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.html)\n* [KAS ECC SSC staticUnified Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ecc.html)\n* [KAS FFC SSC dhHybrid1 Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.html)\n* [KAS FFC SSC mqv2 Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.html)\n* [KAS FFC SSC dhEphem Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.html)\n* [KAS FFC SSC dhHybridOneFlow Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.html)\n* [KAS FFC SSC mqv1 Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.html)\n* [KAS FFC SSC dhOneFlow Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.html)\n* [KAS FFC SSC dhStatic Sp800-56Ar3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ffc.html)\n* [KAS IFC SSC KAS1 Sp800-56Br2](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ifc.html)\n* [KAS IFC SSC KAS2 Sp800-56Br2](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ifc.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-ssc-ifc.html)\n\n#### KDA Testing SP800-56Cr1/r2\n\nStandalone KDA testing from SP800-56Cr1 or SP800-56Cr2. Can be used in conjunction with SSC testing and optionally key confirmation testing (as opposed to \"full KAS\" testing) to be considered a valid KAS implementation.\n\n* [KDA HKDF Sp800-56Cr1](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-kdf-hkdf.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-kdf-hkdf.html)\n* [KDA OneStep Sp800-56Cr1](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-kdf-onestep.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-kdf-onestep.html)\n* [KDA TwoStep Sp800-56Cr1](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-kdf-twostep.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kas-kdf-twostep.html)\n* [KDA HKDF Sp800-56Cr2](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kdf-hkdf.txt) - [HTML](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kdf-hkdf.html)\n* [KDA OneStep Sp800-56Cr2](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kdf-onestep.txt) - [HTML](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kdf-onestep.html)\n* [KDA OneStepNoCounter Sp800-56Cr2](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kdf-onestepnocounter.txt) - [HTML](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kdf-onestepnocounter.html)\n* [KDA TwoStep Sp800-56Cr2](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kdf-twostep.txt) - [HTML](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kdf-twostep.html)\n\n#### KAS KC Testing SP800-56\n\n  Standalone KAS Key Confirmation testing from SP800-56Ar3 and/or SP800-56Br2.  Can be as a KC primitive validation as a part of a KAS validation.\n\n* [KAS KC Sp800-56](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kc-sp800-56.txt) - [HTML](https://usnistgov.github.io/ACVP/draft-hammett-acvp-kas-kc-sp800-56.html)\n\n### KDFs\n* [Counter KDF](https://pages.nist.gov/ACVP/draft-celi-acvp-kbkdf.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kbkdf.html)\n* [Feedback KDF](https://pages.nist.gov/ACVP/draft-celi-acvp-kbkdf.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kbkdf.html)\n* [Double Pipeline Iterator KDF](https://pages.nist.gov/ACVP/draft-celi-acvp-kbkdf.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kbkdf.html)\n* [IKEv1](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ikev1.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ikev1.html)\n* [IKEv2](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ikev2.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ikev2.html)\n* [SNMP](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-snmp.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-snmp.html)\n* [SRTP](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-srtp.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-srtp.html)\n* [SSH](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ssh.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ssh.html)\n* [TLS v1.0/v1.1](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-tls.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-tls.html)\n* [TLS v1.2](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-tls.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-tls.html)\n* [TLS v1.3](https://pages.nist.gov/ACVP/draft-hammett-acvp-kdf-tls-v1.3.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-kdf-tls-v1.3.html)\n* [TPM](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-tpm.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-tpm.html)\n* [ANSX9.63](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ansi-x963.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ansi-x963.html)\n* [ANSX9.42](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ansi-x942.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-kdf-ansi-x942.html)\n* [PBKDF](https://pages.nist.gov/ACVP/draft-celi-acvp-pbkdf.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-pbkdf.html)\n\n### Safe Primes\n* [SafePrimes KeyGen](https://pages.nist.gov/ACVP/draft-hammett-acvp-safe-primes.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-safe-primes.html)\n* [SafePrimes KeyVer](https://pages.nist.gov/ACVP/draft-hammett-acvp-safe-primes.txt) - [HTML](https://pages.nist.gov/ACVP/draft-hammett-acvp-safe-primes.html)\n\n### Conditioning Components\n* [ConditioningComponent AES-CBC-MAC](https://pages.nist.gov/ACVP/draft-celi-acvp-conditioning-components.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-conditioning-components.html)\n* [ConditioningComponent BlockCipher_DF](https://pages.nist.gov/ACVP/draft-celi-acvp-conditioning-components.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-conditioning-components.html)\n* [ConditioningComponent Hash_DF](https://pages.nist.gov/ACVP/draft-celi-acvp-conditioning-components.txt) - [HTML](https://pages.nist.gov/ACVP/draft-celi-acvp-conditioning-components.html)\n\nThe prod server supports all of the above except for the EdDSA variants, AES-FF3-1, and AES-GCM-SIV. Some of these algorithms have NIST SP800 series drafts in progress and will be available on the prod server when the draft becomes a standard.\n\n# Accessing the Server\n\nTo access the demo server one needs a TLS credential **and** a one-time password (OTP). The [protocol specification](https://pages.nist.gov/ACVP/draft-fussell-acvp-spec.html) and other development information are available in this repository. You may want to use the companion [ACVP client](https://github.com/cisco/libacvp) to jump-start your work.\n\nTo set expectations, since this is a demo system, it will be in a state of flux and any all data on the system is considered temporary and may be reset to accommodate development of the Automated Cryptographic Validation Protocol (ACVP) service. We will try to keep the demo service relatively stable, but we plan to update it as we continue to add new algorithms and capabilities.\n\nTo access the prod server, first you must demonstrate compentency on the demo server. Then follow the instructions available at https://csrc.nist.gov/Projects/cryptographic-algorithm-validation-program/how-to-access-acvts.\n\n## Obtaining TLS credentials\n\nTo access the [demo environment](https://demo.acvts.nist.gov/acvp/home) you will need to send your CSR to us. Please use a 2048-bit RSA key pair and sign using at least a SHA-256 hash. Please send a request to acvts-demo@nist.gov with 'CSR REQUEST FOR ACCESS TO DEMO' in the subject line. You will receive instructions for how to upload your CSR.\n\nYou are expected to protect the key pair from unauthorized use and to notify NIST in the event the keypair becomes compromised. Also, since we do not have a formal login page the following notice applies when accessing the ACVP system:\n\n```\n\"***WARNING***WARNING***WARNING\nYou are accessing a U.S. Government information system, which includes: 1) this computer, 2) this computer network, 3) all computers connected to this network, and 4) all devices and storage media attached to this network or to a computer on this network. You understand and consent to the following: you may access this information system for authorized use only; you have no reasonable expectation of privacy regarding any communication of data transiting or stored on this information system; at any time and for any lawful Government purpose, the Government may monitor, intercept, and search and seize any communication or data transiting or stored on this information system; and any communications or data transiting or stored on this information system may be disclosed or used for any lawful Government purpose.\n***WARNING***WARNING***WARNING\"\n```\n\n## Configuring and using One-Time-Passwords (OTP)\n\nTOTP has been configured on all servers. See details [here](https://github.com/usnistgov/ACVP/wiki#second-factor-authentication-and-authorization-schema-for-accessing-and-working-with-the-nist-automated-cryptographic-validation-services).\n\n# Contribution Guidelines\n\nIf you want to contribute, please follow the simple rules below and send us pull requests.\n\n- See [Metanorma](#how-to-use-metanorma) for installation instructions\n- Documents are templated out and organized into folders, find and edit the appropriate document and build the HTML or TXT file to ensure the changes are correct\n- Create a Pull Request with the updated ADOC files. GitHub Actions will verify the files can compile.\n- Once approved by a NIST member, GitHub Actions will rebuild the `nist-pages` branch to be reflected on https://pages.nist.gov/ACVP\n\nIf you would like to talk to our developers, you may want to send email to our mailing list algotest@list.nist.gov. You may also report bugs or request new tests.\n\n\n# Related Projects\n- [ACVP Server](https://github.com/usnistgov/ACVP-Server/) (Release/Issue tracking for NIST's implementation of the ACVP protocol)\n- [Automated Cryptographic Validation Testing](https://csrc.nist.gov/Projects/Automated-Cryptographic-Validation-Testing)\n- [Cisco libacvp](https://github.com/cisco/libacvp)\n- [Google Project Wycheproof](https://github.com/google/wycheproof)\n- [HACL\\*, a formally verified cryptographic library written in F\\*](https://github.com/mitls/hacl-star)\n- [Automated Module Validation Protocol](https://github.com/usnistgov/AMVP)\n- [ACVP Proxy](https://github.com/smuellerDD/acvpproxy)\n- [ACVP Parser](https://github.com/smuellerDD/acvpparser)\n\n# Licensing Terms\n\nThis data was developed by employees of the National Institute of Standards and Technology (NIST), an agency of the Federal Government, in collaboration with third-party contributors. Pursuant to title 17 United States Code Section 105, works of NIST employees are not subject to copyright protection in the United States and are considered to be in the public domain. The data is provided by NIST as a public service and is expressly provided \"AS IS.\" NIST MAKES NO WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR STATUTORY, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT AND DATA ACCURACY. NIST does not warrant or make any representations regarding the use of the data or the results thereof, including but not limited to the correctness, accuracy, reliability or usefulness of the data. NIST SHALL NOT BE LIABLE AND YOU HEREBY RELEASE NIST FROM LIABILITY FOR ANY INDIRECT, CONSEQUENTIAL, SPECIAL, OR INCIDENTAL DAMAGES (INCLUDING DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, AND THE LIKE), WHETHER ARISING IN TORT, CONTRACT, OR OTHERWISE, ARISING FROM OR RELATING TO THE DATA (OR THE USE OF OR INABILITY TO USE THIS DATA), EVEN IF NIST HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nTo the extent that NIST may hold copyright in countries other than the United States, you are hereby granted the non-exclusive irrevocable and unconditional right to print, publish, prepare derivative works and distribute the NIST data, in any medium, or authorize others to do so on your behalf, on a royalty-free basis throughout the world.\n\nYou may improve, modify, and create derivative works of the data or any portion of the data, and you may copy and distribute such modifications or works. Modified works should carry a notice stating that you changed the data and should note the date and nature of any such change. Please explicitly acknowledge the National Institute of Standards and Technology as the source of the data: Data citation recommendations are provided below. Permission to use this data is contingent upon your acceptance of the terms of this agreement and upon your providing appropriate acknowledgments of NIST's creation of the data.\n\n## Citation Format\n\nAuthor/editor (Publication Year), Title, Publisher, Persistent Identifier (PID) or URL (Access date).\n"
 },
 {
  "repo": "0xs34n/blockchain",
  "language": "JavaScript",
  "readme_contents": "<h1 align=\"center\">\n  <br>\n  <a href=\"https://blockchaindemo.io\" rel=\"noopener noreferrer\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/seanseany/blockchain/master/logo.png\" width=\"200\"></a>\n  <br>\n    <a href=\"https://blockchaindemo.io\" rel=\"noopener noreferrer\" target=\"_blank\">Blockchaindemo.io</a>\n  <br>\n</h1>\n\n<h4 align=\"center\">Code for learning the blockchain data structure</h4>\n\n<br>\n\n## \ud83d\udce6 Installation\n\nTo install this application, you'll need\n[Node.js](https://nodejs.org/en/download/) 7+ (which comes with\n[npm](http://npmjs.com)) installed on your computer. From your command line:\n\n#### Source\n\nYou'll need [Git](https://git-scm.com) to run the project from source. From your\ncommand line:\n\n```bash\n# Clone this repository\n$ git clone https://github.com/seanseany/blockchain\n\n# Go into the repository\n$ cd blockchain\n\n# Install dependencies\n$ npm install\n\n# Run the app\n$ npm start\n```\n\n## \u2139\ufe0f FAQ\n\n#### When or why I would use this?\n\nYou should use this if you want to build a bitcoin wallet, payment processor, or\nbitcoin merchant portal in javascript. You might also be interested in why\ndecentralized networks or p2p applications are useful, or what advantages they\nhave; this project seems like a good way to learn about that.\n\n#### What is the block chain actually for?\n\nThe blockchain is for authorizing payments of a cryptocurrency between two peers\nwithout the need for a centralized 3rd party approving of the transaction. There\nare other uses of the blockchain which are more in line with the second point,\ndigital signatures, but they are secondary to the main purpose of peer to peer\ntransfer of value. Bitcoin is blockchain's killer app.\n\n#### Why the hell should I care about the blockchain?\n\nBlockchain facilitates trade over a network. Imagine a metal as scarce as gold\nwith a magical property of \"can be transported over a communications channel\".\nThis has implications with respect to individual rights, the world economy, and\nthe way we monetize and transfer value at a level higher than bartering directly\nfor goods.\n\nLately people are distancing themselves from the proof-of-work concept and are\nusing blockchain to describe only the mechanism of signing a transaction as\nverification of sending an amount. Change \"sending an amount\" to almost anything\nelse - authorizing a change in a ruleset, casting a vote for a politician,\nverifying a point of IoT data is authentic. Now add in the concept of a\npeer-to-peer network to this and you've eliminated a middleman that once\nexisted, thereby improving the efficiency and reducing cost. In these cases,\n\"blockchain\" refers to the structuring of a program or database in such a way\nthat it has no central point of failure while still providing all of the\nfeatures expected. For example, augur and gnosis are decentralized prediction\nmarkets. Ethereum has implemented smart contracts which enable decentralized\nrelease of funds based on a gambling outcome.\n"
 },
 {
  "repo": "turtlecoin/turtlecoin-crypto",
  "language": "C",
  "readme_contents": "![image](https://user-images.githubusercontent.com/34389545/35821974-62e0e25c-0a70-11e8-87dd-2cfffeb6ed47.png)\r\n\r\n# TurtleCoin: Standalone Cryptography Library\r\n\r\n[![NPM](https://nodei.co/npm/turtlecoin-crypto.png?downloads=true&stars=true)](https://nodei.co/npm/turtlecoin-crypto/)\r\n\r\n![Prerequisite](https://img.shields.io/badge/node-%3E%3D6-blue.svg) [![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/turtlecoin/turtlecoin-crypto/graphs/commit-activity) [![License: GPL-3.0](https://img.shields.io/badge/License-GPL--3.0-yellow.svg)](https://github.com/turtlecoin/turtlecoin-crypto/blob/master/LICENSE) [![Twitter: TurtlePay](https://img.shields.io/twitter/follow/_TurtleCoin.svg?style=social)](https://twitter.com/_TurtleCoin)\r\n\r\n#### Master Build Status\r\n[![Build Status](https://github.com/turtlecoin/turtlecoin-crypto/workflows/CI%20Build%20Tests/badge.svg?branch=master)](https://github.com/turtlecoin/turtlecoin-crypto/actions)\r\n\r\n#### Development Build Status\r\n[![Build Status](https://github.com/turtlecoin/turtlecoin-crypto/workflows/CI%20Build%20Tests/badge.svg?branch=development)](https://github.com/turtlecoin/turtlecoin-crypto/actions)\r\n\r\nThis repository contains the necessary files to compile the cryptography library used within [TurtleCoin](https://turtlecoin.lol) as a standalone library that can be included in various other projects in a variety of development environments, including:\r\n\r\n* Node.js >= 6.x\r\n* C++\r\n* C# (via C++ shared library & P/Invoke)\r\n* Native Javascript\r\n* WASM\r\n\r\n## Javascript Library\r\n\r\n**Note:** We build prebuilds of the Node.js native addon module as well as the WASM/JS binaries that are included for distribution with the NPM installed version of this package to speed up your development efforts.\r\n\r\n### Dependencies\r\n\r\n* [Node.js](https://nodejs.org) >= +6.x LTS (or Node v11)\r\n\r\n#### Windows (if not using prebuilds)\r\n\r\n##### Prerequisites\r\n\r\nRead very careful if you want this to work right the first time.\r\n\r\n1) Open a *Windows Powershell* console as **Administrator**\r\n\r\n2) Run the command: `npm install -g windows-build-tools --vs2015`\r\n   ***This will take a while. Sit tight.***\r\n\r\n### Installation\r\n\r\n```bash\r\nnpm install turtlecoin-crypto\r\n```\r\n\r\n### Intialization\r\n\r\n#### TypeScript\r\n\r\n```javascript\r\nimport { Crypto } from 'turtlecoin-crypto';\r\nconst TurtleCoinCrypto = new Crypto();\r\n```\r\n\r\n#### CommonJS\r\n\r\n```javascript\r\nconst Crypto = require('turtlecoin-crypto').Crypto\r\nconst TurtleCoinCrypto = new Crypto()\r\n```\r\n\r\n#### Documentation\r\n\r\nYou can find the full TypeScript/JS documentation for this library [here](https://crypto.turtlecoin.dev).\r\n\r\n## C++ Library\r\n\r\n### How To Compile\r\n\r\n#### Build Optimization\r\n\r\nThe CMake build system will, by default, create optimized *native* builds for your particular system type when you build the software. Using this method, the binaries created provide a better experience and all together faster performance.\r\n\r\nHowever, if you wish to create *portable* binaries that can be shared between systems, specify `-DARCH=default` in your CMake arguments during the build process. Note that *portable* binaries will have a noticable difference in performance than *native* binaries. For this reason, it is always best to build for your particuar system if possible.\r\n\r\n#### Linux\r\n\r\n##### Ubuntu, using GCC\r\n\r\n```bash\r\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\r\nsudo apt-get update\r\nsudo apt-get install aptitude -y\r\nsudo aptitude install -y build-essential git cmake\r\ngit clone -b master --single-branch https://github.com/turtlecoin/turtlecoin-crypto\r\ncd turtlecoin-crypto\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake -j\r\n```\r\n\r\nThe static library will be built as `libturtlecoin-crypto.a` in the build folder.\r\n\r\n##### Ubuntu, using Clang\r\n\r\n```bash\r\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\r\nwget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\r\n```\r\n\r\nYou need to modify the below command for your version of ubuntu - see https://apt.llvm.org/\r\n\r\n* Ubuntu 14.04 (Trusty)\r\n- `sudo add-apt-repository \"deb https://apt.llvm.org/trusty/ llvm-toolchain-trusty 6.0 main\"`\r\n\r\n* Ubuntu 16.04 (Xenial)\r\n- `sudo add-apt-repository \"deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial 6.0 main\"`\r\n\r\n* Ubuntu 18.04 (Bionic)\r\n- `sudo add-apt-repository \"deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic 6.0 main\"`\r\n\r\n```bash\r\nsudo apt-get update\r\nsudo apt-get install aptitude -y\r\nsudo aptitude install -y -o Aptitude::ProblemResolver::SolutionCost='100*canceled-actions,200*removals'\r\nsudo aptitude install build-essential clang-6.0 libstdc++-7-dev git cmake\r\nexport CC=clang-6.0\r\nexport CXX=clang++-6.0\r\ngit clone -b master --single-branch https://github.com/turtlecoin/turtlecoin-crypto\r\ncd turtlecoin-crypto\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake -j\r\n```\r\n\r\nThe following library files will be created in the `build` folder:\r\n\r\n* `libturtlecoin-crypto-static.a`\r\n\r\n##### Generic Linux\r\n\r\nEnsure you have the dependencies listed above.\r\n\r\nIf you want to use clang, ensure you set the environment variables `CC` and `CXX`.\r\nSee the ubuntu instructions for an example.\r\n\r\n```bash\r\ngit clone -b master --single-branch https://github.com/turtlecoin/turtlecoin-crypto\r\ncd turtlecoin-crypto\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake -j\r\n```\r\n\r\nThe following library files will be created in the `build` folder:\r\n\r\n* `libturtlecoin-crypto-static.a`\r\n\r\n#### OSX/Apple, using Clang\r\n\r\n##### Prerequisites\r\n\r\n- Install XCode and Developer Tools.\r\n\r\n##### Building\r\n\r\n```bash\r\nwhich brew || /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r\nbrew install --force cmake boost llvm\r\nexport CC=/usr/local/opt/llvm/bin/clang\r\nexport CXX=/usr/local/opt/llvm/bin/clang++\r\ngit clone -b master --single-branch https://github.com/turtlecoin/turtlecoin-crypto\r\ncd turtlecoin-crypto\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake\r\n```\r\n\r\nThe following library files will be created in the `build` folder:\r\n\r\n* `libturtlecoin-crypto-static.a`\r\n\r\n#### Windows\r\n\r\n##### Prerequisites\r\n\r\n- Install [Visual Studio 2017 Community Edition](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15&page=inlineinstall)\r\n- When installing Visual Studio, it is **required** that you install **Desktop development with C++**\r\n\r\n##### Building\r\n\r\n- From the start menu, open 'x64 Native Tools Command Prompt for vs2017'.\r\n```\r\ncd <your_turtlecoin-crypto_directory>\r\nmkdir build\r\ncd build\r\nset PATH=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\";%PATH%\r\ncmake -G \"Visual Studio 15 2017 Win64\" ..\r\n```\r\n\r\n**Note:** If you have errors on this step about not being able to find the some libraries, you may need to update your cmake. Open 'Visual Studio Installer' and click 'Update'.\r\n\r\n`MSBuild turtlecoin-crypto.sln /p:Configuration=Release /m`\r\n\r\nThe following library files will be created in the `build/Release` folder:\r\n\r\n* `turtlecoin-crypto-static.lib`\r\n* `turtlecoin-crypto-shared.lib`\r\n* `turtlecoin-crypto-shared.dll`\r\n\r\n## Native Javascript & WASM\r\n\r\n### Prerequisites\r\n\r\nYou will need the following packages:\r\n\r\n* CMake (2.8 or higher), make, and git.\r\n\r\n### Compiling\r\n\r\n```bash\r\ngit clone -b master --single-branch https://github.com/turtlecoin/turtlecoin-crypto\r\ncd turtlecoin-crypto\r\nsource ./build_js.sh\r\n```\r\n\r\nThis script will install the necessary dependencies on your machine and then proceed to compile the library to Native Javascript and WASM.\r\n\r\nThe following library files will be created in the `jsbuild` folder:\r\n\r\n* Native Javascript\r\n  * `turtlecoin-crypto.js`\r\n* WASM\r\n  * `turtlecoin-crypto-wasm.js`\r\n\r\n## Thanks\r\nCryptonote Developers, Bytecoin Developers, Monero Developers, Forknote Project, TurtleCoin Community\r\n\r\n## Copypasta for license when editing files\r\n\r\nHi TurtleCoin contributor, thanks for forking and sending back Pull Requests. Extensive docs about contributing are in the works or elsewhere. For now this is the bit we need to get into all the files we touch. Please add it to the top of the files.\r\n\r\n```\r\n// Copyright (c) 2012-2017, The CryptoNote developers, The Bytecoin developers\r\n// Copyright (c) 2014-2018, The Monero Project\r\n// Copyright (c) 2018-2019, The TurtleCoin Developers\r\n//\r\n// Please see the included LICENSE file for more information.\r\n```\r\n"
 },
 {
  "repo": "cioccarellia/ksprefs",
  "language": "Kotlin",
  "readme_contents": "<p align=\"center\">\n  <a href=\"https://github.com/cioccarellia/ksprefs\" target=\"_blank\"><img width=\"100\" src=\"https://raw.githubusercontent.com/cioccarellia/ksprefs/master/extras/ksprefs.png\"></a>\n</p>\n<h1 align=\"center\">KsPrefs</h1>\n<p align=\"center\">SharedPreferences. 100% Kotlin.</p>\n<p align=\"center\">\n  <a href=\"https://search.maven.org/artifact/com.github.cioccarellia/ksprefs\"><img src=\"https://img.shields.io/maven-central/v/com.github.cioccarellia/ksprefs.svg?label=Maven%20Central\" alt=\"Download from MavenCentral\"></a>\n  <a href=\"https://app.circleci.com/pipelines/github/cioccarellia/ksprefs\"><img src=\"https://circleci.com/gh/cioccarellia/ksprefs.svg?style=svg\" alt=\"CircleCI\"></a>\n  <a href=\"https://app.codacy.com/manual/cioccarellia/ksprefs/dashboard\"><img src=\"https://api.codacy.com/project/badge/Grade/f10cdbdbe7b84d0ea7a03b755c104e03\" alt=\"Codacy\"></a>\n  <a href=\"https://kotlinlang.org/docs/releases.html\"><img src=\"https://img.shields.io/badge/kotlin-1.5.31-orange.svg\" alt=\"Kotlin\"></a>\n  <a href=\"https://source.android.com/setup/start/build-numbers\"><img src=\"https://img.shields.io/badge/min-19-00e676.svg\" alt=\"Android Min Sdk\"></a>\n  <a href=\"https://source.android.com/setup/start/build-numbers\"><img src=\"https://img.shields.io/badge/compile-30-00e676.svg\" alt=\"Android Compile Version\"></a>\n  <a href=\"https://github.com/cioccarellia/ksprefs/blob/master/LICENSE.md\"><img src=\"https://img.shields.io/badge/license-Apache%202.0-blue.svg\" alt=\"License\"></a>\n</p>\n\n\n<details open><summary>Gradle</summary>\n\n```gradle\ndependencies {\n    implementation 'com.github.cioccarellia:ksprefs:2.3.2'\n}\n```\n</details>\n\n<details><summary>Kotlin DSL</summary>\n\n```gradle\ndependencies {\n    implementation(\"com.github.cioccarellia:ksprefs:2.3.2\")\n}\n```\n</details>\n\n<details><summary>Maven</summary>\n\n```xml\n<dependency>\n    <groupId>com.github.cioccarellia</groupId>\n    <artifactId>ksprefs</artifactId>\n    <version>2.3.2</version>\n    <type>pom</type>\n</dependency>\n```\n</details>\n\n- \u26a1\ufe0f Powerful SharedPreferences wrapper & API.\n- \ud83d\ude80 Easy to pick up & use right away.\n- \ud83e\uddea Tested and production-ready.\n- \u2699\ufe0f Fully customizable behaviour.\n- \ud83d\udd12 Built-in cryptography & decoding engines (PlainText, Base64, AES-CBC, AES-ECB, Android KeyStore + AES-GCM / RSA KeyPair).\n- \ud83d\uddc2 Extensive type & enum support.\n- \ud83e\udde1 Kotlin powered.\n\n```kotlin\nval prefs = KsPrefs(applicationContext)\nval count = prefs.pull<Int>(\"app_start_key\")\n```\n\nTo _read_ from SharedPreferences, use `pull(key, fallback)`.<br>\nTo _write_ to SharedPreferences, use `push(key, value)`.\n\n## Introduction\n<img src=\"https://raw.githubusercontent.com/cioccarellia/ksprefs/master/extras/dark/png/scheme.png\"><br><br>\nKsPrefs (<b>K</b>otlin <b>S</b>hared <b>Pref</b>erences) is a wrapper for the default Android SharedPreferences (_SP_ for short) implementation.<br>\nIts purpuses are to bring security to preference storage through cryptography, to implement an elegant and practical SP API, and to do so with as little overhead as possible.<br>\nKsprefs can be used as a replacement of direct _SP_ usage, whick lacks both security and practicality, and which even Google is moving away from with [Jetpack DataStore](https://developer.android.com/topic/libraries/architecture/datastore).<br>\nOn top of the _SP_ API, KsPrefs extends with numerous features and extra bits which come pre-packed with the library, and can be used to enhance the development experience and productivity.\n\n## Basics\n### Initialization\n\nYou should create `KsPrefs` only once in your codebase. \n```kotlin\nval prefs = KsPrefs(applicationContext)\n```\n\nIt is recommended to keep it inside your `Application` class, so that it's reachable everywhere from your code.\n\n```kotlin\nclass App : Application() {\n\n    companion object {\n        lateinit var appContext: Context\n        val prefs by lazy { KsPrefs(appContext) }\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n        appContext = this\n    }\n}\n```\n\n### Terminology\n\n| Term                   | Description                                                                                                           |\n|------------------------|-----------------------------------------------------------------------------------------------------------------------|\n| SP                     | Android Shared Preferences                                                                                            |\n| Entry                  | Key-Value pair stored by _SP_. Thus the basic data entity which can be pushed and pulled                              |\n| Persistent XML Storage | _SP_ XML file containing actual entries. Stored in the application [private storage](https://developer.android.com/training/data-storage/app-specific) |\n|                        |                                                                                                                       |\n|                        |                                                                                                                       |\n\n\n### Read <small>(Pull)</small>\nTo retrieve saved values from _SP_ you use `pull()`.<br>\nKey uniquely identifies a record, fallback is the default value if none is found in _SP_.\n\n```kotlin\nval uname = prefs.pull(key = \"username\", fallback = nobody)\n```\n\n\nThere are 4 different variants of `pull`. <!-- helo -->\n\n- `pull<T>(key, fallback<T>)`: Scans the preferences with the given key. If a record is found, the value is read from the persistent XML storage, deserialized as the requested type and returned. If the key isn't contained inside the storage, the fallback value is returned.\n- `pull<T>(key)`: No fallback value is supplied\n- `pull<T>(key, kclass<T>)`\n- `pull<T>(key, jclass<T>)`\n\n\nA function is defined *safe* when you supply the fallback (Android SharedPreferences defines it `default`) value, so that, for *any* given key, you always have a concrete in-memory value to return.<br>\nA function is *unsafe* because there is no guarantee it will return a concrete value, as it only relies on the supplied key to pull the value from the persistent XML storage<br>\n\n\nEven though the standard SharedPreferences API always forces you to provide a default (KsPrefs defines it `fallback`) value, KsPrefs allows you to leave that out, because supplying an actual instance of an object, in some contexts is verbose and redundant if you are know that the key is present inside the persistent storage, or if for some clever intuition you know that the key holds a value at some specific time.\n\n```kotlin\nval username = prefs.pull(\"username\")\n```\n\n*:pushpin: #1: Using an unsafe version of `pull()` isn't dangerous, as long as you are sure the target key holds a value.*<br>\n*:pushpin: #2: The 3 unsafe functions accept the type parameter as a kotlin class, as a java class or as a kotlin generic. For the latter, the bytecode of the function is inlined, in order for the generic type to be reified.*<br>\n\n### Write <small>(Push)</small>\nTo save values to the preference storage you use `push()`<br>\nPush takes a key and a value, and stores them inside the preferences, according to the commitStrategy, autoSavePoliciy.\n\n```kotlin\nprefs.push(\"username\", viewModel.username)\n```\n\n\n\n### Configuration\nKsPrefs is configurable at initialization time with specific parameters.<br>\nEach parameters has a default value which will be used unless you specify otherwise.<br>\nEach parameter changes the internal behaviour and the algorithms used, so it is vital to choose the appropriate settings.<br>\n\n```kotlin\nval prefs = KsPrefs(applicationContext) {\n    // Configuration Parameters Lambda\n    encryptionType = PlainText()\n    autoSave = AutoSavePolicy.MANUAL\n    commitStrategy = CommitStrategy.COMMIT\n}\n```\n\n| Field | Type | Description | Default Value |\n|-----------------|----------------|--------------------------------------------------------------------------------------------|----------------------|\n| encryptionType | EncryptionType | Encryption technique used to encrypt and decrypt data | PlainText() |\n| commitStrategy | CommitStrategy | Strategy to use at the moment of writing preferences entries to the persistent XML storage | CommitStrategy.APPLY |\n| autoSave | AutoSavePolicy | Whether after a `push()` operation changes are saved to the persistent XML storage; saving strategy depending on `commitStrategy` | AutoSavePolicy.AUTOMATIC |\n| mode | Int | SharedPreferences access mode | Context.MODE_PRIVATE |\n| charset | Charset | Charset used for string-to-byte and byte-to-string conversions | Charsets.UTF_8 |\n| keyRegex | Regex? | Regular Expression which, if non null, every key must match. | null |\n\n\n\n### Saving, Auto Save Policies & Commit Strategies\nA pending transaction is a change which is registered in-memory, but not yet on the XML preference file.\nAndroid SharedPreferences works that way; indeed, you can stack up pending transactions, but at some point you have to _actually_ save them.\nIf the app were to shut down unexpectedly, those changes would be lost.<br>\nTo commit any pending transaction to the persistent XML storage, in ksprefs you use `save()`. \nThis matches `commit()` and `apply()` SharedPreferences behaviour you may be accustomed to.<br>\n\n#### Auto Save Policy\nBy default, `autoSave` is set to `AutoSavePolicy.AUTOMATIC`, and therefore changes are automatically synchronized with the underlying XML file, because after each `push()` call, a `save()` follows, in order to automatically commit and save the preference. Therefore, no pending transaction is kept.\n\nHowever, if `autoSave` is turned off (using `AutoSavePolicy.MANUAL`), `push()` will save the change in-memory, but is not going to write it to the XML preferences file until `save()` is invoked. This way it's going to create a pending transaction which will be kept in-memory until a `save()` operation happens.\n\nHere is a table representing when values are saved to the storage, depending on the policy in use.\n\n| `AutoSavePolicy` | AUTO | MANUAL |\n|---------|--------------------|--------------------|\n| push()  | :white_check_mark: | :x: |\n| queue() | :x: | :x: |\n| save()  | :white_check_mark: | :white_check_mark: |\n| SharedPreferences.Editor.commit()  | :white_check_mark: | :white_check_mark: |\n| SharedPreferences.Editor.apply()  | :white_check_mark: | :white_check_mark: |\n\n*:pushpin: `AutoSavePolicy` chooses when to write changes to the persistent XML storage and when to keep them in memory.*<br>\n\n#### Commit Strategy\nThe best (and default) practise while dealing with SharedPreferences is to use `APPLY`. It is asynchronous and fast. `COMMIT` is also available, though it should not be used unless you have a valid reason to, given its synchronous and strict nature, as well as `NONE`, for no-op (Does not save anything, used internally for `queue()`).<br>\n`save()` and `push()` always refer to the commit strategy to decide how to save their updates to the persistent XML preference storage.\n\nHere is a table representing various features of different commit strategies. Check out the official documentation [here](https://developer.android.com/reference/android/content/SharedPreferences.Editor.html) and see [this](https://stackoverflow.com/questions/5960678/whats-the-difference-between-commit-and-apply-in-sharedpreferences) post for more intel.\n\n| `CommitStrategy` | APPLY | COMMIT | NONE |\n|--------|--------------------|--------------------|------|\n| in-memory | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| XML | :white_check_mark: | :white_check_mark: | :x: |\n| async | :white_check_mark: | :x: | :heavy_minus_sign:\t |\n| atomic | :white_check_mark: | :white_check_mark: | :heavy_minus_sign:\t |\n| error report | :x: | :white_check_mark: | :heavy_minus_sign:\t |\n\n*:pushpin: The `CommitStrategy` involves how to write changes to the persistent XML storage.*<br>\n\n### Queuing\nTo enqueue values to be written into the preference storage you use `queue()`. It follows `push()`'s syntax.<br>\nWhile `push`, by default, _pushes_ the update immediately on the XML persistent storage (By default, changable with `AutoSave`), `queue()` saves the update in-memory without writing it out to the storage.<br>\nNot writing the changes to the file makes enqueuing a valid choice for both batch computing or resource-expensive and long-running operations.<br>\n- `queue()` takes a key and a value, and saves the changes in-memory.<br>\n- `queue()` does not actually send updates to the storage. You can do so by calling `save()` (Or by using `push()` subsequently).\n<br><br>\n\nThis segment touches a broader concept, which is storing scope.\nThere are two storing scopes for SharedPreferences:\n- in-memory (key-value pairs are kept in memory). This is fast to read to/write from, but does not persist application restarts.\n- XML (key-value pairs are kept on a file). Writing to a file is mildly expensive but it allows preferences to survive across application restarts.<br>\nHere is a table explaining how different methods inside KsPrefs touch and go through those storing scopes.\n\n| `StoringScope` | in-memory | XML |\n|---------|--------------------|---------------------------------|\n| push(k, v)  | :white_check_mark: | :white_check_mark: (By default) |\n| queue(k, v) | :white_check_mark: | :x: |\n| save()      | :white_check_mark: | :white_check_mark: |\n\n*:pushpin: The `StoringScope` determines at which level changes are propagated.*<br>\n\nIn the following snippet (Given that `autoSavePolicy` is set to `AUTOMATIC`), `n` in-memory and `x` XML write operations are performed. This, given  `f(n)` and `f(x)` for how long those operations will take, takes `n\u00d7f(n) + m\u00d7f(x)`. Given that, if using `push()`, `m=n`, then it resolves to `n\u00d7(f(n) + f(x))`\n\n```kotlin\nfor ((index, pic) in picsArray.toList().withIndex()) {\n    // Long-running computation\n    prefs.push(\"pic-$index\", pic.url)\n}\n```\n\nEven though this isn't a significant speedup for small data sizes, as n (and m) grow the computation takes longer; since enqueuing values sets `m=1`, thus, `f(n) < f(x)`. The time/op chart follows a much more gentle curve: `n\u00d7f(n) + f(x)`.\nThis improvements drastically optimizes performances for a large amount of operations.\n\n```kotlin\nfor ((index, pic) in picsArray.toList().withIndex()) {\n    // Long-running computation\n    prefs.queue(\"pic-$index\", pic.url)\n}\n\n// One save operation\nprefs.save()\n```\n\nPlease note, that if you set `autoSavePolicy` to `MANUAL`, `push()` will only change the in-memory values, and you will need to save them manually anyways.\n\n## API\nKsPrefs provides some customizable data structures, to abstract preference reads/writes to function calls.\n\n### Preferences Center\nA `PrefsCenter` is to be though as a task-specific abstractor. It is used to enclose and contain all the SP-specific operations, such as providing a key, doing some value specific post-read/pre-write operation, providing the fallback value or the explicit return type, handling logic / conditions and interacting with other app components.\n\n```kotlin\nobject StartCounterPrefCenter : PrefsCenter(App.prefs) {\n    private const val counterKey = \"start_counter\"\n    \n    fun increment() = prefs.push(counterKey,  read() + 1)\n    fun read() = prefs.pull(counterKey, 0)\n}\n```\n\n### Dynamic Delegates\nIt is really useful and fun to have dynamic properties whose value is a direct representation of what the underlying XML preferences file contains.\n\n```kotlin\nval accentColor by prefs.dynamic(\"accent_color\", \"#2106F3\")\n```\n\nWhen you set a value for this property, it is also updated on the XML preference file, as it is a dynamic reference to the preference.\n\n## Encryption\nKsPrefs provides with different levels of encryption. From no encryption at all (`EncryptionType.PlainText` and `EncryptionType.Base64`), to standard [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) with key size among 128, 192 & 256-bit and ECB/CBC modes (base64-wrapped ciphertext), to [Android's own keystore system](https://developer.android.com/training/articles/keystore) (though the ksprefs implementation isn't nearly as fast as the AES-backed one).</br>\nIt is recommended to store the AES key into a native library shipped with your application, which makes reverse engineering your code harder.\n\n## Sample App\n<img src=\"https://raw.githubusercontent.com/cioccarellia/ksprefs/master/art/demo-app.png\">\n"
 },
 {
  "repo": "google/tink",
  "language": "C++",
  "readme_contents": "# Tink\n\n*A multi-language, cross-platform library that provides cryptographic APIs that are secure, easy to use correctly, and hard(er) to misuse.*\n\nhttps://developers.google.com/tink\n\n**`Ubuntu`**                        | **`macOS`**\n----------------------------------- | ---------------------------------\n[![Kokoro Ubuntu][ubuntu_badge]](#) | [![Kokoro macOS][macos_badge]](#)\n\n[ubuntu_badge]: https://storage.googleapis.com/tink-kokoro-build-badges/tink-ubuntu.png\n[macos_badge]: https://storage.googleapis.com/tink-kokoro-build-badges/tink-macos.png\n\n## Index\n\n1.  [Introduction](#introduction)\n2.  [Current status](#current-status)\n3.  [Getting started](#getting-started)\n4.  [Learn more](#learn-more)\n5.  [Contact and mailing list](#contact-and-mailing-list)\n6.  [Maintainers](#maintainers)\n\n## Introduction\n\nUsing crypto in your application [shouldn't have to][devs_are_users_too_slides]\nfeel like juggling chainsaws in the dark. Tink is a crypto library written by a\ngroup of cryptographers and security engineers at Google. It was born out of our\nextensive experience working with Google's product teams, [fixing weaknesses in\nimplementations](https://github.com/google/wycheproof), and providing simple\nAPIs that can be used safely without needing a crypto background.\n\nTink provides secure APIs that are easy to use correctly and hard(er) to misuse.\nIt reduces common crypto pitfalls with user-centered design, careful\nimplementation and code reviews, and extensive testing. At Google, Tink is one\nof the standard crypto libraries, and has been deployed in hundreds of products\nand systems.\n\nTo get a quick overview of Tink design please take a look at\n[slides][tink_talk_slides] from [a talk about Tink][tink_talk_recording]\npresented at [Real World Crypto 2019](https://rwc.iacr.org/2019/).\n\n[devs_are_users_too_slides]: https://www.usenix.org/sites/default/files/conference/protected-files/hotsec15_slides_green.pdf\n[tink_talk_slides]: docs/Tink-a_cryptographic_library--RealWorldCrypto2019.pdf\n[tink_talk_recording]: https://www.youtube.com/watch?v=pqev9r3rUJs&t=9665\n\n## Current status\n\n[Java/Android](docs/JAVA-HOWTO.md), [C++](docs/CPP-HOWTO.md),\n[Obj-C](docs/OBJC-HOWTO.md), [Go](docs/GOLANG-HOWTO.md), and\n[Python](docs/PYTHON-HOWTO.md) are field tested and ready for production. The\nlatest version is [1.6.1](https://github.com/google/tink/releases/tag/v1.6.1),\nreleased on 2021-07-12.\n\nJavascript/Typescript is in an alpha state and should only be used for testing.\n\n## Getting started\n\nDocumentation for the project is located at https://developers.google.com/tink.\nCurrently, it details a variety of common usage scenarios and covers the Java\nand Python implementations. The site will be populated with more content over\ntime.\n\nAlternatively, you can look at all of the [`examples`] which demonstrate\nperforming simple tasks using Tink in a variety of languages.\n\n[`examples`]: https://github.com/google/tink/tree/master/examples\n\n*   Python\n\n```sh\npip3 install tink\n```\n\n*   Golang\n\n```sh\ngo get github.com/google/tink/go/...\n```\n\n*   Java\n\n```xml\n<dependency>\n  <groupId>com.google.crypto.tink</groupId>\n  <artifactId>tink</artifactId>\n  <version>1.6.1</version>\n</dependency>\n```\n\n*   Android\n\n```\ndependencies {\n  implementation 'com.google.crypto.tink:tink-android:1.6.1'\n}\n```\n\n*   Objective-C/iOS\n\n```sh\ncd /path/to/your/Xcode project/\npod init\npod 'Tink', '1.6.1'\npod install\n```\n\n## Learn more\n\n*   [Java HOW-TO](docs/JAVA-HOWTO.md)\n*   [C++ HOW-TO](docs/CPP-HOWTO.md)\n*   [Obj-C HOW-TO](docs/OBJC-HOWTO.md)\n*   [Go HOW-TO](docs/GOLANG-HOWTO.md)\n*   [Python HOW-TO](docs/PYTHON-HOWTO.md)\n*   [Security and Usability Design Goals](docs/SECURITY-USABILITY.md)\n*   [Supported Crypto Primitives](docs/PRIMITIVES.md)\n*   [Key Management](docs/KEY-MANAGEMENT.md)\n*   [Managing keys with Tinkey](docs/TINKEY.md)\n*   [Known Issues](docs/KNOWN-ISSUES.md)\n\n## Community-driven ports\n\nOut of the box Tink supports a wide range of languages, but it still doesn't\nsupport every language. Fortunately, some users like Tink so much that they've\nported it to their favorite languages! Below you can find notable ports.\n\n**WARNING** While we usually review these ports, until further notice, we do not\nmaintain them and have no plan to support them in the foreseeable future.\n\n*   [Clojure](https://github.com/perkss/tinklj)\n\n## Contact and mailing list\n\nIf you want to contribute, please read [CONTRIBUTING](docs/CONTRIBUTING.md)\nand send us pull requests. You can also report bugs or file feature requests.\n\nIf you'd like to talk to the developers or get notified about major product\nupdates, you may want to subscribe to our\n[mailing list](https://groups.google.com/forum/#!forum/tink-users).\n\n## Maintainers\n\nTink is maintained by (A-Z):\n\n-   Moreno Ambrosin\n-   Taymon Beal\n-   Daniel Bleichenbacher\n-   William Conner\n-   Thai Duong\n-   Thomas Holenstein\n-   Stefan K\u00f6lbl\n-   Charles Lee\n-   Cindy Lin\n-   Fernando Lobato Meeser\n-   Atul Luykx\n-   Rafael Misoczki\n-   Sophie Schmieg\n-   Laurent Simon\n-   Elizaveta Tretiakova\n-   J\u00fcrg Wullschleger\n\nAlumni:\n\n-   Haris Andrianakis\n-   Tanuj Dhir\n-   Quan Nguyen\n-   Bartosz Przydatek\n-   Enzo Puig\n-   Veronika Sl\u00edvov\u00e1\n-   Paula Vidas\n"
 },
 {
  "repo": "pubkey/eth-crypto",
  "language": "JavaScript",
  "readme_contents": "<!--\n    This is a different readme file which will be published to npm\n    @link https://stackoverflow.com/a/52683086\n    The problem was that googled indexed the npm-site instead of the github site\n-->\n\n<p align=\"center\">\n    <a alt=\"travis\" href=\"https://travis-ci.org/pubkey/eth-crypto\">\n        <img src=\"https://travis-ci.org/pubkey/eth-crypto.svg?branch=master\" /></a>\n    <a href=\"https://twitter.com/pubkeypubkey\">\n        <img src=\"https://img.shields.io/twitter/follow/pubkeypubkey.svg?style=social&logo=twitter\"\n            alt=\"follow on Twitter\"></a>\n</p>\n\n# eth-crypto\n\nCryptographic javascript-functions for ethereum and tutorials on how to use them together with web3js and solidity.\n\n## Tutorials\n\n- **[Creating Keys and use them for ethereum-transactions](./tutorials/creating-transactions.md)**\n\n  In this tutorial we will create an ethereum-identity and use it so send transactions to the blockchain.\n\n- **[Sign and validate data with solidity](./tutorials/signed-data.md)**\n\n  In this tutorial we will sign data in javascript and validate the signature inside of a smart-contract.\n\n- **[Sending encrypted and signed data to other identites](./tutorials/encrypted-message.md)**  \n\n  In this tutorial we will use the ethereum-identites and asymmetric cryptography to send an encrypted and signed message from Alice to Bob.\n\n## Functions\n\n### Install\n\n```bash\n  npm install eth-crypto --save\n```\n\n```javascript\n// es6\nimport EthCrypto from 'eth-crypto';\n\n// node\nconst EthCrypto = require('eth-crypto');\n```\n\n## API\n\n- [createIdentity()](https://github.com/pubkey/eth-crypto#createidentity)\n- [publicKeyByPrivateKey()](https://github.com/pubkey/eth-crypto#publickeybyprivatekey)\n- [publicKey.toAddress()](https://github.com/pubkey/eth-crypto#publickeytoaddress)\n- [publicKey.compress()](https://github.com/pubkey/eth-crypto#publickeycompress)\n- [publicKey.decompress()](https://github.com/pubkey/eth-crypto#publickeydecompress)\n- [sign()](https://github.com/pubkey/eth-crypto#sign)\n- [recover()](https://github.com/pubkey/eth-crypto#recover)\n- [recoverPublicKey()](https://github.com/pubkey/eth-crypto#recoverpublickey)\n- [encryptWithPublicKey()](https://github.com/pubkey/eth-crypto#encryptwithpublickey)\n- [decryptWithPrivateKey()](https://github.com/pubkey/eth-crypto#decryptwithprivatekey)\n- [cipher.stringify()](https://github.com/pubkey/eth-crypto#cipherstringify)\n- [cipher.parse()](https://github.com/pubkey/eth-crypto#cipherparse)\n- [signTransaction()](https://github.com/pubkey/eth-crypto#signtransaction)\n- [txDataByCompiled()](https://github.com/pubkey/eth-crypto#txdatabycompiled)\n- [calculateContractAddress()](https://github.com/pubkey/eth-crypto#calculatecontractaddress)\n- [hex.compress() hex.decompress()](https://github.com/pubkey/eth-crypto#hex-compressdecompress)\n\n\n# [READ THE FULL DOCUMENTATION ON GITHUB](https://github.com/pubkey/eth-crypto)\n"
 },
 {
  "repo": "sean-public/python-hashes",
  "language": "Python",
  "readme_contents": "# python-hashes\n\nInteresting (non-cryptographic) hashes implemented in pure Python. Included so far:\n\n * Bloom filters\n * Charikar similarity hashes \n * Nilsimsa signatures\n * geohashes\n\nEach hash is implemented as its own type extended from the base class `hashtype`.\n\nOfficial repository and latest version: https://github.com/sean-public/python-hashes\n\nTo install the latest version, you can either do `easy_install python-hashes` or\n`pip install python-hashes`. You may need to use `sudo`, depending on your environment.\n\n---\n\n### simhash\n\nCharikar similarity is most useful for creating 'fingerprints' of\ndocuments or metadata so you can quickly find duplicates or cluster\nitems. It operates on lists of strings, treating each word as its\nown token (order does not matter, as in the bag-of-words model).\n\nHere is a quick example session showing off similarity hashes:\n```python\n    >>> from hashes.simhash import simhash\n    >>> hash1 = simhash('This is a test string one.')\n    >>> hash2 = simhash('This is a test string TWO.')\n    >>> hash1\n    <simhash.simhash object at 0x7f1f93070c90>\n    >>> print hash1, hash2\n    10203485745788768176630988232 10749932022170787621889701832\n    >>> hash1.hex()\n    '0x20f82026a01daffae45cfdc8L'\n    >>> hash1.similarity(hash2)\n    0.875                   # % of bits in common (calculated via hamming distance)\n    >>> long(hash1) - long(hash2)\n    -546446276382019445258713600L\n    >>> hash1 < hash2       # Hashes of the same type can be compared\n    True\n    >>> a_list = [hash2, hash1, 4.2]\n    >>> for item in a_list: print item\n    10749932022170787621889701832\n    10203485745788768176630988232\n    4.2\n    >>> a_list.sort()       # Because comparisons work, so does sorting\n    >>> for item in a_list: print item\n    4.2\n    10203485745788768176630988232\n    10749932022170787621889701832\n```\n\nIt can be extended to any bitlength using the `hashbits` parameter.\n\n```python\n    >>> hash3 = simhash('this is yet another test', hashbits=8)\n    >>> hash3.hex()\n    '0x18'\n    >>> hash4 = simhash('extremely long hash bitlength', hashbits=2048)\n    >>> hash4.hex()\n    '0xf00020585012016060260443bab0f7d76fde5549a6857ecL'\n```\n\nBut be careful; it only makes sense to compare equal-length hashes!\n\n```python\n    >>> hash3.similarity(hash4)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"hashes/simhash.py\", line 63, in similarity\n        raise Exception('Hashes must be of equal size to find similarity')\n    Exception: Hashes must be of equal size to find similarity\n```\n\n### bloom\n\nThe Bloom filter is a space-efficient probabilistic data structure that is\nused to test whether an element is a member of a set. False positives are\npossible, but false negatives are not. Elements can be added to the set but\nnot removed.\n\nUses SHA-1 from Python's hashlib, but you can swap that out with any other\n160-bit hash function. Also keep in mind that it starts off very sparse and\nbecome more dense (and false-positive-prone) as you add more elements.\n\nHere is the basic use case:\n\n```python\n    >>> from hashes.bloom import bloomfilter\n    >>> hash1 = bloomfilter('test')\n    >>> hash1.hashbits, hash1.num_hashes     # default values (see below)\n    (28756, 7)\n    >>> hash1.add('test string')\n    >>> 'test string' in hash1\n    True\n    >>> 'holy diver' in hash1\n    False\n    >>> for word in 'these are some tokens to add to the filter'.split():\n    ...     hash1.add(word)\n    >>> 'these' in hash1\n    True\n```\n\nThe hash length and number of internal hashes used for the digest are automatically\ndetermined using your input values `capacity` and `false_positive_rate`. The capacity\nis the upper bound on the number of items you wish to add. A lower false-positive\nrate will create a larger, but more accurate, filter.\n\n```python\n    >>> hash2 = bloomfilter(capacity=100, false_positive_rate=0.01)\n    >>> hash2.hashbits, hash2.num_hashes\n    (959, 7)\n    >>> hash3 = bloomfilter(capacity=1000000, false_positive_rate=0.01)\n    >>> hash3.hashbits, hash3.num_hashes\n    (9585059, 7)\n    >>> hash4 = bloomfilter(capacity=1000000, false_positive_rate=0.0001)\n    >>> hash4.hashbits, hash4.num_hashes\n    (19170117, 14)\n```\n\nThe hash grows in size to accommodate the number of items you wish to add,\nbut remains sparse until you are done adding the projected number of items:\n\n```python\n    >>> import zlib\n    >>> len(hash4.hex())\n    250899\n    >>> len(zlib.compress(hash4.hex()))\n    1068\n```\n\n\n### geohash\n\nGeohash is a latitude/longitude geocode system invented by\nGustavo Niemeyer when writing the web service at geohash.org, and put\ninto the public domain.\n\nIt is a hierarchical spatial data structure which subdivides space\ninto buckets of grid shape. Geohashes offer properties like\narbitrary precision and the possibility of gradually removing\ncharacters from the end of the code to reduce its size (and\ngradually lose precision). As a consequence of the gradual\nprecision degradation, nearby places will often (but not always)\npresent similar prefixes. On the other side, the longer a shared\nprefix is, the closer the two places are. For this implementation,\nthe default precision is 12 (base32) characters long.\n\nIt's very easy to use:\n\n```python\n    >>> from hashes.geohash import geohash\n    >>> here = geohash(33.0505, -1.024, precision=4)\n    >>> there = geohash(34.5, -2.5, precision=4)\n    >>> here.hash, there.hash\n    ('evzs', 'eynk')\n    >>> here.distance_in_miles(there)\n    131.24743425050551\n\n    >>> # The longer the hash, the more accurate it is\n    >>> here.encode(33.0505, -1.024, precision=8)\n    >>> here.hash\n    'evzk08wt'\n    >>> here.decode()\n    (33.050565719604492, -1.0236167907714844)\n\n    >>> # Now try with 20 characters\n    >>> here.encode(33.0505, -1.024, precision=20)\n    >>> here.hash\n    'evzk08wm55drbqbww0j7'\n    >>> here.decode()\n    (33.050499999999936, -1.0239999999998339)\n```\n\n\n### nilsimsa\n\nMost useful for filtering spam by creating signatures of documents to\nfind near-duplicates. Charikar similarity hashes can be used on any\ndatastream, whereas Nilsimsa is a digest ideal for documents (language\ndoesn't matter) because it uses histograms of *rolling* trigraphs instead\nof the usual bag-of-words model where order doesn't matter.\n\n[Related paper](http://spdp.dti.unimi.it/papers/pdcs04.pdf) and [original reference](http://ixazon.dynip.com/~cmeclax/nilsimsa.html).\n\n*The Nilsimsa hash does not output the same data as the\nreference implementation.* **Use at your own risk.**\n"
 },
 {
  "repo": "AllenAnthony/Cryptography",
  "language": "C",
  "readme_contents": "# Cryptography\n\u8fd9\u662f\u6211\u5728\u5bc6\u7801\u5b66\u79d1\u4e0a\u5199\u7684\u51e0\u4e2a\u5927\u7a0b\uff0c\u5305\u62ec\u6a21\u62dfEnigma\uff0cAES\u52a0\u5bc6\uff0cDES\u52a0\u5bc6\uff0cRSA\u52a0\u5bc6\uff0cECC\u52a0\u5bc6\n"
 },
 {
  "repo": "amaurym/login-with-metamask-demo",
  "language": "TypeScript",
  "readme_contents": "# Login with MetaMask\n\n[![Actions Status](https://github.com/amaurym/login-with-metamask-demo/workflows/pr/badge.svg)](https://github.com/amaurym/login-with-metamask-demo/actions)\n[![David (backend)](<https://img.shields.io/david/amaurym/login-with-metamask-demo.svg?label=deps%20(backend)&path=packages/backend>)](https://david-dm.org/amaurym/login-with-metamask-demo?path=packages/backend)\n[![David (frontend)](<https://img.shields.io/david/amaurym/login-with-metamask-demo.svg?label=deps%20(frontend)&path=packages/frontend>)](https://david-dm.org/amaurym/login-with-metamask-demo?path=packages/frontend)\n[![](https://img.shields.io/badge/Buy%20me%20a%20tree-%F0%9F%8C%B3-lightgreen)](https://offset.earth/amaurym)\n\nThis demo is published as part of the corresponding blog article: [\"One-Click Login with Blockchain: a MetaMask Tutorial\"](https://www.toptal.com/ethereum/one-click-login-flows-a-metamask-tutorial).\n\n> \u2757Important note. The article was written in March 2018, and in between, MetaMask introduced a [breaking change](https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8). The codebase has since then been updated to support the breaking change. As such, the snippets in the article might not be exactly the same as the updated code today. The login flow however is still exactly the same. If you want to see the original code, please visit the [`original` branch](https://github.com/amaurym/login-with-metamask-demo/tree/original).\n\n## Live Demo: https://amaurym.com/login-with-metamask-demo/\n\n![demo](https://uploads.toptal.io/blog/image/125794/toptal-blog-image-1522395423193-b3227ea1f43c6cbb9f78e090bd7bb2ee.gif)\n\n## Getting Started\n\nThere are 2 packages in this repo: a [`backend`](./packages/backend) which is a REST API written in Express, and a [`frontend`](./packages/frontend) which is a React single-page application. It's really a demo, so I tried to use as few libraries as possible, and the most popular ones when possible.\n\nThe simplest way to get started is to launch the demo using Docker Compose. Alternatively you could launch docker the containers manually, or run the node services using yarn.\n\n#### 1. Launch the demo using Docker Compose:\n\n```bash\ndocker-compose up -d\n```\n\nThis will setup the bakcend listening on `localhost:8000` and the frontend on `localhost:3000`.\n\n#### 2. Launching the demo using Docker:\n\nBuild and launch the backend:\n\n```bash\ncd backend\ndocker build -t login-backend .\ndocker run -d -p 8000:8000 login-backend\n```\n\nBuild and launch the frontend:\n\n```bash\ncd frontend\ndocker build -t login-frontend .\ndocker run -d -p 3000:3000 login-frontend\n```\n\nYou can then access the frontend app on `localhost:3000`.\n\n#### 3. Start the demo using Yarn:\n\nFrom the root folder of this repo, run\n\n```bash\nyarn install # Install root dependencies (for TS & linting in your IDE)\ncd packages/backend && yarn install # Install backend packages\ncd ../frontend && yarn install # Install frontend packages\ncd ../.. # Go back to root folder\nyarn start # Will launch the frontend and the backend at the same time\n```\n\nThe backend should be running on `localhost:8000`, and the frontend on `localhost:3000`.\n\nAlternatively, you can start the frontend and the backend separately:\n\n```bash\n# Start the backend\ncd packages/backend\nyarn start\n\n# Start the frontend\ncd packages/frontend\nyarn start\n```\n\n## Tests\n\nSince this project is a demo, I haven't written any tests for it. Only code linting is performed, via eslint and prettier, which you can run using `yarn lint`.\n\n## Credits\n\nIf you liked this demo, I appreciate donations. My Ethereum address is `0xa395447BF15f7525484C0378c76627D45ADE0B96`.\n\n---\n\nThis demo is published as part of the corresponding blog article at [https://www.toptal.com/ethereum/one-click-login-flows-a-metamask-tutorial](https://www.toptal.com/ethereum/one-click-login-flows-a-metamask-tutorial).\n"
 },
 {
  "repo": "WebAssembly/wasi-crypto",
  "language": "Rust",
  "readme_contents": "# WASI Cryptography APIs\n\nThis repository is for development of Cryptography API proposals for the\n[WASI Subgroup] of the [WebAssembly Community Group].\n\nPlease refer to those groups' documentation for more information on their\nprocesses, goals, scope, and deliverables.\n\n[WASI Subgroup]: https://github.com/WebAssembly/WASI\n[WebAssembly Community Group]: https://www.w3.org/community/webassembly/\n\n* [High-level goals](docs/HighLevelGoals.md)\n* [Security design document](design/security.md)\n* [Specification](docs/wasi-crypto.md)\n* Interface definitions:\n  * common types and functions ([witx](witx/codegen/wasi_ephemeral_crypto_common.witx), [doc](witx/codegen/wasi_ephemeral_crypto_common.md))\n  * symmetric operations ([witx](witx/codegen/wasi_ephemeral_crypto_symmetric.witx), [doc](witx/codegen/wasi_ephemeral_crypto_symmetric.md))\n  * common types and functions for asymmetric operations ([witx](witx/codegen/wasi_ephemeral_crypto_asymmetric_common.witx), [doc](witx/codegen/wasi_ephemeral_crypto_asymmetric_common.md))\n  * signatures ([witx](witx/codegen/wasi_ephemeral_crypto_signatures.witx), [doc](witx/codegen/wasi_ephemeral_crypto_signatures.md))\n  * key exchange ([witx](witx/codegen/wasi_ephemeral_crypto_kx.witx), [doc](witx/codegen/wasi_ephemeral_crypto_kx.md))\n  * external secrets ([witx](witx/codegen/wasi_ephemeral_crypto_external_secrets.witx), [doc](witx/codegen/wasi_ephemeral_crypto_external_secrets.md))\n* [Concise API overview](witx/codegen/wasi_ephemeral_crypto.txt)\n* [WIP implementation for the WasmEdge runtime](https://github.com/WasmEdge/WasmEdge/issues/410)\n* [Example AssemblyScript bindings](implementations/bindings/assemblyscript)\n* [Example Rust bindings](implementations/bindings/rust)\n"
 },
 {
  "repo": "keplerproject/md5",
  "language": "C",
  "readme_contents": "# MD5 - Cryptographic Library for Lua\n\nhttp://keplerproject.github.io/md5/\n\nMD5 offers basic cryptographic facilities for Lua 5.1: a hash (digest)\nfunction, a pair crypt/decrypt based on MD5 and CFB, and a pair crypt/decrypt based\non DES with 56-bit keys.\n\nMD5 current version is 1.2.\n\nPlease check the documentation at /doc/us/ for more information.\n\n## Installation\n\nTo install using [LuaRocks](https://github.com/keplerproject/luarocks) run:\n\n```\nluarocks install md5\n```\n\nTo install on Linux/OSX/BSD, please edit the config file and then call\n\n```\nmake\nmake install\n```\n\nThe last step may require root privileges.\n\n## History\n\nVersion 1.2 [06/Sep/2013]\n\n* Code adapted to compile for Lua 5.0, 5.1 and 5.2\n\nVersion 1.1.2 [12/May/2008]\n\n* Fixed bug in 64-bit systems\n* Fixed the Windows makefile to accept longer directory names\n  (patch by Alessandro Hecht and Ignacio Burgue\u00f1o).\n\n\n## License\n\nMD5 is free software and uses the same license as Lua (MIT). \n\nThe DES 56 C library was implemented by Stuart Levy and uses a MIT license too (check the source).\n"
 },
 {
  "repo": "hellman/xortool",
  "language": "Python",
  "readme_contents": "xortool.py\n====================\n\nA tool to do some xor analysis:\n\n  - guess the key length (based on count of equal chars)\n  - guess the key (base on knowledge of most frequent char)\n\n**Notice:** xortool is now only running on Python 3. The old Python 2 version is accessible at the `py2` branch. The **pip** package has been updated.\n\n## Installation\n\n```bash\n$ pip3 install xortool\n```\n\nFor development or building this repository, [poetry](https://python-poetry.org/) is needed.\n\n\nUsage\n---------------------\n\n```\nxortool\n  A tool to do some xor analysis:\n  - guess the key length (based on count of equal chars)\n  - guess the key (base on knowledge of most frequent char)\n\nUsage:\n  xortool [-x] [-m MAX-LEN] [-f] [-t CHARSET] [FILE]\n  xortool [-x] [-l LEN] [-c CHAR | -b | -o] [-f] [-t CHARSET] [-p PLAIN] [FILE]\n  xortool [-x] [-m MAX-LEN| -l LEN] [-c CHAR | -b | -o] [-f] [-t CHARSET] [-p PLAIN] [FILE]\n  xortool [-h | --help]\n  xortool --version\n\nOptions:\n  -x --hex                          input is hex-encoded str\n  -l LEN, --key-length=LEN          length of the key\n  -m MAX-LEN, --max-keylen=MAX-LEN  maximum key length to probe [default: 65]\n  -c CHAR, --char=CHAR              most frequent char (one char or hex code)\n  -b --brute-chars                  brute force all possible most frequent chars\n  -o --brute-printable              same as -b but will only check printable chars\n  -f --filter-output                filter outputs based on the charset\n  -t CHARSET --text-charset=CHARSET target text character set [default: printable]\n  -p PLAIN --known-plaintext=PLAIN  use known plaintext for decoding\n  -h --help                         show this help\n\nNotes:\n  Text character set:\n    * Pre-defined sets: printable, base32, base64\n    * Custom sets:\n      - a: lowercase chars\n      - A: uppercase chars\n      - 1: digits\n      - !: special chars\n      - *: printable chars\n\nExamples:\n  xortool file.bin\n  xortool -l 11 -c 20 file.bin\n  xortool -x -c ' ' file.hex\n  xortool -b -f -l 23 -t base64 message.enc\n  xortool -b -p \"xctf{\" message.enc\n```\n\nExample 1\n---------------------\n\n```bash\n# xor is xortool/xortool-xor\ntests $ xor -f /bin/ls -s \"secret_key\" > binary_xored\n\ntests $ xortool binary_xored\nThe most probable key lengths:\n   2:   5.0%\n   5:   8.7%\n   8:   4.9%\n  10:   15.4%\n  12:   4.8%\n  15:   8.5%\n  18:   4.8%\n  20:   15.1%\n  25:   8.4%\n  30:   14.9%\nKey-length can be 5*n\nMost possible char is needed to guess the key!\n\n# 00 is the most frequent byte in binaries\ntests $ xortool binary_xored -l 10 -c 00\n...\n1 possible key(s) of length 10:\nsecret_key\n\n# decrypted ciphertexts are placed in ./xortool_out/Number_<key repr>\n# ( have no better idea )\ntests $ md5sum xortool_out/0_secret_key /bin/ls\n29942e290876703169e1b614d0b4340a  xortool_out/0_secret_key\n29942e290876703169e1b614d0b4340a  /bin/ls\n```\n\nThe most common use is to pass just the encrypted file and the most frequent character (usually 00 for binaries and 20 for text files) - length will be automatically chosen:\n\n```bash\ntests $ xortool tool_xored -c 20\nThe most probable key lengths:\n   2:   5.6%\n   5:   7.8%\n   8:   6.0%\n  10:   11.7%\n  12:   5.6%\n  15:   7.6%\n  20:   19.8%\n  25:   7.8%\n  28:   5.7%\n  30:   11.4%\nKey-length can be 5*n\n1 possible key(s) of length 20:\nan0ther s3cret \\xdd key\n```\n\nHere, the key is longer then default 32 limit:\n\n```bash\ntests $ xortool ls_xored -c 00 -m 64\nThe most probable key lengths:\n   3:   3.3%\n   6:   3.3%\n   9:   3.3%\n  11:   7.0%\n  22:   6.9%\n  24:   3.3%\n  27:   3.2%\n  33:   18.4%\n  44:   6.8%\n  55:   6.7%\nKey-length can be 3*n\n1 possible key(s) of length 33:\nreally long s3cr3t k3y... PADDING\n```\n\nSo, if automated decryption fails, you can calibrate:\n\n- (`-m`) max length to try longer keys\n- (`-l`) selected length to see some interesting keys\n- (`-c`) the most frequent char to produce right plaintext\n\nExample 2\n---------------------\n\nWe are given a message in encoded in Base64 and XORed with an unknown key.\n\n```bash\n# xortool message.enc\nThe most probable key lengths:\n   2:   12.3%\n   4:   13.8%\n   6:   10.5%\n   8:   11.5%\n  10:   8.6%\n  12:   9.4%\n  14:   7.1%\n  16:   7.8%\n  23:   10.4%\n  46:   8.7%\nKey-length can be 4*n\nMost possible char is needed to guess the key!\n```\n\nWe can now test the key lengths while filtering the outputs so that it only keeps the plaintexts holding the character set of Base64. After trying a few lengths, we come to the right one, which gives only 1 plaintext with a percentage of valid characters above the default threshold of 95%.\n\n```bash\n$ xortool message.enc -b -f -l 23 -t base64\n256 possible key(s) of length 23:\n\\x01=\\x121#\"0\\x17\\x13\\t\\x7f ,&/\\x12s\\x114u\\x170#\n\\x00<\\x130\"#1\\x16\\x12\\x08~!-\\'.\\x13r\\x105t\\x161\"\n\\x03?\\x103! 2\\x15\\x11\\x0b}\".$-\\x10q\\x136w\\x152!\n\\x02>\\x112 !3\\x14\\x10\\n|#/%,\\x11p\\x127v\\x143\n\\x059\\x165\\'&4\\x13\\x17\\r{$(\"+\\x16w\\x150q\\x134\\'\n...\nFound 1 plaintexts with 95.0%+ valid characters\nSee files filename-key.csv, filename-char_used-perc_valid.csv\n```\n\nBy filtering the outputs on the character set of Base64, we directly keep the only solution.\n\nInformation\n---------------------\n\nAuthor: hellman\n\nLicense: [MIT License](https://opensource.org/licenses/MIT)\n"
 },
 {
  "repo": "cryptocoinjs/ecurve",
  "language": "JavaScript",
  "readme_contents": "ecurve\n=======\n\n[![build status](https://secure.travis-ci.org/cryptocoinjs/ecurve.svg)](http://travis-ci.org/cryptocoinjs/ecurve)\n\n\nJavaScript component for [Elliptic Curve Cryptography](http://en.wikipedia.org/wiki/Elliptic_curve_cryptography). Works in both Node.js and the browser.\n\nOfficial documentation:\n\nhttp://cryptocoinjs.com/modules/crypto/ecurve/\n\n\n### LICENSE [MIT](LICENSE)\nParts of this software are derivative works of [`ec.js`](http://www-cs-students.stanford.edu/~tjw/jsbn/ec.js) by Tom Wu,  please see the MIT-like in [LICENSE](https://github.com/cryptocoinjs/ecurve/blob/ecd0f386024dba37bba40850b4ea6d1607f10e26/lib/point.js)\n"
 },
 {
  "repo": "waveto/node-crypto",
  "language": "C++",
  "readme_contents": "node-crypto\n===========\n\nA wrapper around openssl for node.js, currently exposing Hashing, Signing\nand Verifying methods.\n\nVersion 0.0.5 : test.js now uses mjsunit\n\nVersion 0.0.4 : Added package.json and updated tests to latest node version.\n\nVersion 0.0.3 : Added cipher / decipher, thanks to Frans-Willem Hardijzer.\n\nTo install, ensure that you have openssl installed, and run:\n\nnode-waf configure \nnode-waf build\n\nThis will put the crypto.node binary module in build/default. \n\nThe hashing, signing and verifying methods can work with binary, hex or \nbase64 encoded strings.\n\nThe encrypt / decrypt methods work with binary, hex or base64 encodings,\nwith streaming.\n\nSee test.js for example usage."
 },
 {
  "repo": "Chainers/Cryptography.ECDSA",
  "language": "C#",
  "readme_contents": "[![NuGet version](https://badge.fury.io/nu/Cryptography.ECDSA.Secp256k1.svg)](https://badge.fury.io/nu/Cryptography.ECDSA.Secp256k1)\n[![Build Status](https://travis-ci.org/Chainers/Cryptography.ECDSA.svg?branch=master)](https://travis-ci.org/Chainers/Cryptography.ECDSA)\n\n# Cryptography.ECDSA (secp256k1 only)\n\nThis library implements transaction signing algorithm secp256k1 which is used in several blockchains like Bitcoin, EOS and Graphene-based Steem, Golos, BitShares. The library is based on https://github.com/warner/python-ecdsa and https://github.com/bitcoin-core/secp256k1)\nNo other curves are included.\nC#, MIT license.\n\n### Usage\n```\n//Sign message\nvar seckey = Hex.HexToBytes(\"80f3a375e00cc5147f30bee97bb5d54b31a12eee148a1ac31ac9edc4ecd13bc1f80cc8148e\");\nvar data = Sha256Manager.GetHash(msg);\nvar sig = Secp256K1Manager.SignCompressedCompact(data, seckey);\n```\n\n### Instalation\n```\nInstall-Package Cryptography.ECDSA.Secp256k1\n```\n"
 },
 {
  "repo": "crev-dev/cargo-crev",
  "language": "Rust",
  "readme_contents": "cargo-crev/README.md"
 },
 {
  "repo": "bwesterb/py-seccure",
  "language": "Python",
  "readme_contents": "py-seccure\n==========\n\nSimple Elliptic Curve Cryptography for Python compatible with the\nexcellent `SECCURE`_ command\nline utility (version 0.5). It's licensed under LGPLv3. See LICENSE.\n\n**Do not use ``py-seccure`` when its operation can be timed by an\nattacker.** See `timing attack`_.\n\nUsage\n-----\n\nPublic key from private\n~~~~~~~~~~~~~~~~~~~~~~~\n\nTo get the public key from the private, you can use the original\ncommandline utility:\n\n::\n\n    $ seccure-key\n    Assuming curve p160.\n    Enter private key: my private key\n    The public key is: 8W;>i^H0qi|J&$coR5MFpR*Vn\n\nIn Python:\n\n.. code:: python\n\n    >>> import seccure\n    >>> str(seccure.passphrase_to_pubkey(b'my private key'))\n    '8W;>i^H0qi|J&$coR5MFpR*Vn'\n\nEncrypting a string\n~~~~~~~~~~~~~~~~~~~\n\nTo encrypt for a public key, one would use the original commandline\nutility as follows.\n\n::\n\n    $ seccure-encrypt -o private.msg '8W;>i^H0qi|J&$coR5MFpR*Vn'  \n    Assuming MAC length of 80 bits.\n    Go ahead and type your message ...\n    This is a very very secret message!\n    ^D\n\nIn Python:\n\n.. code:: python\n\n    >>> ciphertext = seccure.encrypt(b'This is a very secret message\\n', b'8W;>i^H0qi|J&$coR5MFpR*Vn')\n    >>> ciphertext\n    '\\x00\\x146\\x17\\xe9\\xc1\\x1a\\x7fkX\\xec\\xa0n,h\\xb4\\xd0\\x98\\xeaO[\\xf8\\xfa\\x85\\xaa\\xb37!\\xf0j\\x0e\\xd4\\xd0\\x8b\\xfe}\\x8a\\xd2+\\xf2\\xceu\\x07\\x90K2E\\x12\\x1d\\xf1\\xd8\\x8f\\xc6\\x91\\t<w\\x99\\x1b9\\x98'\n\nThere is a shorthand to encrypt a file:\n\n.. code:: python\n\n    >>> seccure.encrypt_file('/path/to/file',  '/path/to/file.enc', '8W;>i^H0qi|J&$coR5MFpR*Vn')\n\nDecrypting\n~~~~~~~~~~\n\nTo decrypt the message with the original utility:\n\n::\n\n    $ seccure-decrypt -i private.msg\n    Assuming MAC length of 80 bits.\n    Assuming curve p160.\n    Enter private key: my private key\n    This is a very very secret message!\n    Integrity check successful, message unforged!\n\nIn Python:\n\n.. code:: python\n\n    >>> seccure.decrypt(ciphertext, b'my private key')\n    'This is a very secret message\\n'\n\nAnd to decrypt a file:\n\n.. code:: python\n\n    >>> seccure.decrypt_file('/path/to/file.enc',  '/path/to/file', b'my private key')\n\nCreating a signature\n~~~~~~~~~~~~~~~~~~~~\n\nTo create a signature:\n\n::\n\n    $ seccure-sign\n    Assuming curve p160.\n    Enter private key: my private key\n    Go ahead and type your message ...\n    This message will be signed\n    ^D\n    Signature: $HPI?t(I*1vAYsl$|%21WXND=6Br*[>k(OR9B!GOwHqL0s+3Uq\n\nIn Python:\n\n.. code:: python\n\n    >>> seccure.sign(b'This message will be signed\\n', b'my private key')\n    '$HPI?t(I*1vAYsl$|%21WXND=6Br*[>k(OR9B!GOwHqL0s+3Uq'\n\nVerifying a signature\n~~~~~~~~~~~~~~~~~~~~~\n\nTo verify a signature:\n\n::\n\n    $ seccure-verify '8W;>i^H0qi|J&$coR5MFpR*Vn' '$HPI?t(I*1vAYsl$|%21WXND=6Br*[>k(OR9B!GOwHqL0s+3Uq'  \n    Go ahead and type your message ...\n    This message will be signed\n    ^D\n    Signature successfully verified!\n\nIn Python:\n\n.. code:: python\n\n    >>> seccure.verify(b'This message will be signed\\n', b'$HPI?t(I*1vAYsl$|%21WXND=6Br*[>k(OR9B!GOwHqL0s+3Uq', b'8W;>i^H0qi|J&$coR5MFpR*Vn')\n    True\n\nInstallation\n------------\n\nOn Debian Wheezy\n~~~~~~~~~~~~~~~~\n\n::\n\n    $ apt-get install libgmp3-dev build-essential python-dev python-pip libmpfr-dev libmpc-dev\n    $ pip install seccure\n\nOn Ubuntu\n~~~~~~~~~\n\n::\n\n    $ apt-get install libgmp-dev build-essential python-dev python-pip libmpfr-dev libmpc-dev\n    $ pip install seccure\n\nOn Mac with MacPorts\n~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    $ port install py27-gmpy2\n    $ pip install seccure\n\nPlease contribute!\n------------------\n\nTo help out, you could:\n\n1. Test and report any bugs or other difficulties.\n2. Implement missing features, such as ``seccure-dh``,\n   ``seccure-veridec`` and ``seccure-signcrypt``.\n3. Package py-seccure (or the original SECCURE itself) for your\n   platform.\n4. Write more unit tests.\n\n.. image:: https://travis-ci.org/bwesterb/py-seccure.png\n   :target: https://travis-ci.org/py-seccure/py-seccure\n\n.. _SECCURE: http://point-at-infinity.org/seccure/\n.. _timing attack: http://en.wikipedia.org/wiki/Timing_attack\n"
 },
 {
  "repo": "sharplispers/ironclad",
  "language": "Common Lisp",
  "readme_contents": "#+TITLE: Ironclad\n#+AUTHOR: The Ironclad developers\n#+DATE:\n#+EMAIL:\n#+LANGUAGE: en\n#+OPTIONS: num:nil toc:nil html-style:nil html-postamble:nil html-scripts:nil\n#+HTML_DOCTYPE: html5\n#+HTML_HEAD: <style type=\"text/css\">\n#+HTML_HEAD: body { margin: 1em 5% 1em 5%; }\n#+HTML_HEAD: p { margin-top: 0.5em; margin-bottom: 0.5em; }\n#+HTML_HEAD: pre { padding: 0; margin: 0; }\n#+HTML_HEAD: h1, h2 { border-bottom: 2px solid #449977; }\n#+HTML_HEAD: h1, h2, h3, h4, h5, h6 { font-family: sans-serif; line-height: 1.3; }\n#+HTML_HEAD: a:link { color: #449977; }\n#+HTML_HEAD: a:visited { color: purple; }\n#+HTML_HEAD: a { text-decoration: none; padding: 1px 2px; }\n#+HTML_HEAD: a:hover { text-decoration: none; padding: 1px; border: 1px solid #000000; }\n#+HTML_HEAD: pre.src-lisp { margin-right: 10%; margin-top: 1.5em; margin-bottom: 1.5em; border: 1px solid #449977; background: #eeeeee; padding: 1em; }\n#+HTML_HEAD: pre.example { margin-right: 10%; margin-top: 1.5em; margin-bottom: 1.5em; border: 1px solid black; padding: 1em; }\n#+HTML_HEAD: .underline { margin-top: 1.5em; margin-bottom: 1.5em; font-family: sans-serif; font-size: 1.1em; font-weight: bold; text-decoration: underline; }\n#+HTML_HEAD: </style>\n\n#+ATTR_HTML: :style width: 0; height: 0; padding: 0; margin: 0; border: 0; overflow: hidden;\n[[https://github.com/sharplispers/ironclad/workflows/CI/badge.svg?branch=master][file:https://github.com/sharplispers/ironclad/workflows/CI/badge.svg?branch=master]]\n\nIronclad is a cryptography library written entirely in Common Lisp. It\nincludes support for several popular [[#ciphers][ciphers]], [[#digests][digests]], [[#message-authentication-codes][MACs]] and\n[[#public-key-cryptography][public key cryptography]] algorithms. For several implementations that\nsupport Gray streams, support is included for convenient [[#gray-streams][stream wrappers]].\n\nMost of the algorithms were written with efficiency for specific\nCommon Lisp implementations in mind, although portable code is\nprovided as an alternative in nearly all instances. The framework\nshould be flexible enough to accommodate implementation-specific\noptimizations when possible.\n\nTest vectors for many of the algorithms are included to provide\na level of confidence in the correctness of the implementations.\n\n#+TOC: headlines 1\n\n* Warnings\n  :PROPERTIES:\n  :CUSTOM_ID: warning\n  :END:\n\n*Ironclad should not be considered safe against side channel attacks.*\n\nSome algorithms can be safe against side channel attacks on some\narchitectures using some Common Lisp implementations, but in the\ngeneral case it can't be guaranteed. This is due to the fact that\nintegers and arithmetic functions of Common Lisp implementations are\nusually not safe against side channel attacks.\n\n\n*Ironclad's digest, MAC and cipher objects should not be considered thread\nsafe.*\n\nCreating a digest, a MAC or a cipher object and using it in several threads at\nthe same time can lead to an undefined result. If you need to do that, you must\nput locks in your application where necessary.\n\n\n*Ironclad's pseudo random number generation should only be considered thread\nsafe with bordeaux-threads.*\n\nIf you have a multi-threaded application in which you want to use functions\nrequiring some random numbers (key derivation, key generation, public key\nencryption, signature, etc.) in several threads, each of these threads must have\nits own PRNG, or they might generate the same \"random\" numbers. If the threads\nare created using the *bordeaux-threads* library (or by a library using\n*bordeaux-threads*, like *lparallel*), this is done automatically. However, if\nyou are using the threading functions of your Common Lisp implementation\ndirectly, you have to bind the ~*prng*~ special variable to a new PRNG in each\nthread. There is an example showing how it can be done in the section about\n[[make-prng][make-prng]].\n\n* Installation\n  :PROPERTIES:\n  :CUSTOM_ID: installation\n  :END:\n\nThe current version of Ironclad is 0.57. It can be downloaded\nat [[https://github.com/sharplispers/ironclad/archive/v0.57.tar.gz]].\nIf you are feeling adventurous, you can download a bleeding-edge version\nat [[https://github.com/sharplispers/ironclad]].\n\nIt comes with an ASDF system definition, so ~(asdf:load-system \"ironclad\")~\nshould be all that you need to get started. The testsuite can be run\nby substituting ~asdf:test-system~ for ~asdf:load-system~ in the form above.\n\nIf you are using [[https://www.quicklisp.org][Quicklisp]] to manage your libraries, just use\n~(ql:quickload \"ironclad\")~.\n\nWhen Ironclad is loaded, its functions are in the ~ironclad~ package (e.g.\n~(ironclad:make-cipher ...)~). If you prefer, you can also use the ~crypto~\nnickname (e.g. ~(crypto:make-cipher ...)~).\n\nIronclad has been tested in the following implementations:\n - SBCL x86/linux, x86-64/linux (primary development platforms)\n - SBCL x86-64/solaris, x86/darwin\n - CMUCL x86/linux\n - ABCL with Sun's 1.5.0 JVM\n - Lispworks 5.0.1 x86/linux\n - Lispworks 5.1.2 x86-64/darwin x86/windows\n - Allegro 8.0 x86/linux\n - Allegro 8.1 x86/linux, x86-64/linux, sparc/solaris\n - CLISP 2.41 x86/linux, x86/cygwin\n - Clozure Common Lisp 1.11 x86-64/Linux\n - Clozure Common Lisp 1.10 x86-64/darwin\n - ECL 16.1.3 x86-64/linux\n\nAll included tests should pass successfully. If you use a platform not\nlisted above, please send your platform information so that it can be\nadded to the above list. If the tests do not all pass, you have found\na bug; please report it.\n\nBy default, Ironclad uses some implementation dependent low-level code to make\nsome functions run much faster (currently, some assembly for SBCL and CCL, some\nC code for ECL). If for some reason you want to disable these optimisations and\nuse the generic Lisp code, it can be achieved by commenting out the\n~(pushnew :ironclad-assembly *features*)~ line in the /src/package.lisp/ file.\n\n* License\n  :PROPERTIES:\n  :CUSTOM_ID: license\n  :END:\n\nIronclad is released under a MIT-like license; you can do pretty much\nanything you want to with the code except claim that you wrote it.\n\n* Ciphers\n  :PROPERTIES:\n  :CUSTOM_ID: ciphers\n  :END:\n\n#+NAME: make-cipher\n#+BEGIN_SRC lisp\n(make-cipher name &key key mode initialization-vector padding tweak) => cipher\n#+END_SRC\n\nReturn a cipher object suitable for use for both encryption and decryption.\n\n/name/ denotes the encryption algorithm to use. [[list-all-ciphers][list-all-ciphers]] will tell you\nthe names of all supported ciphers. They are:\n - 3des\n - aes\n - arcfour (rc4)\n - aria\n - blowfish\n - camellia\n - cast5\n - chacha\n - chacha/12\n - chacha/8\n - des\n - idea\n - kalyna128\n - kalyna256\n - kalyna512\n - kuznyechik\n - misty1\n - rc2\n - rc5\n - rc6\n - salsa20\n - salsa20/12\n - salsa20/8\n - seed\n - serpent\n - sm4\n - sosemanuk\n - square\n - tea\n - threefish1024\n - threefish256\n - threefish512\n - twofish\n - xchacha\n - xchacha/12\n - xchacha/8\n - xor (not a real cipher, use only for testing)\n - xsalsa20\n - xsalsa20/12\n - xsalsa20/8\n - xtea\n\n/name/ can be a symbol in the ~keyword~ package or in the ~ironclad~ package;\n~:aes~ for AES, ~ironclad:arcfour~ for RC4, and so forth.\n\n/mode/ describes the mode of operation for the cipher. Stream ciphers\nsuch as Arcfour can operate in only one mode, ~stream~. Block ciphers\nsuch as AES and DES can operate in several different modes:\n - ecb\n - cbc\n - ofb\n - cfb (note that Ironclad's CFB mode is /n/-bit CFB, where /n/ is the [[block-length][block-length]] of the cipher)\n - cfb8 (this seems to be the mode other crypto packages call CFB)\n - ctr\n\n/mode/ should be a symbol in the ~keyword~ or ~ironclad~ packages;\n~:stream~, ~ironclad:ofb~, and so forth. An error will be signaled if\n/mode/ is not appropriate for the cipher /name/.\n\n/initialization-vector/ (IV) should be supplied only if /mode/ requires one.\n/initialization-vector/ should be a ~(simple-array (unsigned-byte 8) (*))~.\nThe supplied IV should be the same length as the [[block-length][block-length]] of /name/.\nThe Chacha and Salsa20 stream ciphers also use an initialization\nvector (nonce). It should be 8 bytes long for Chacha and Salsa20, and\n24 bytes long for XChacha and XSalsa20.\n\n/key/ is, of course, the key for the cipher.\n/key/ should be a ~(simple-array (unsigned-byte 8) (*))~.\n\nIf /padding/ is supplied, the specified padding method will be used by [[encrypt][encrypt]]\nand [[decrypt][decrypt]] to handle short blocks when the ~:handle-final-block~ argument is\nsupplied. /padding/ will only be used if the mode is ECB or CBC. The possible\nvalues for /padding/ are ~:pkcs7~, ~:ansi-x923~ and ~:iso-7816-4~.\n\nIf the cipher can use a tweak (e.g. threefish), it can be specified\nwith the /tweak/ key parameter.\n\n\n#+NAME: encrypt\n#+BEGIN_SRC lisp\n(encrypt cipher plaintext ciphertext &key plaintext-start plaintext-end ciphertext-start handle-final-block) => n-bytes-consumed, n-bytes-produced\n#+END_SRC\n\nEncrypts data according to /cipher/ from /plaintext/ starting at\n/plaintext-start/ and continuing until /plaintext-end/. The encrypted\ndata is placed in /ciphertext/ starting at /ciphertext-start/.\n\n\n#+NAME: decrypt\n#+BEGIN_SRC lisp\n(decrypt cipher ciphertext plaintext &key ciphertext-start ciphertext-end plaintext-start handle-final-block) => n-bytes-consumed, n-bytes-produced\n#+END_SRC\n\nDecrypts data according to /cipher/ from /ciphertext/ starting at\n/ciphertext-start/ and continuing until /ciphertext-end/. The decrypted\ndata is placed in /plaintext/ starting at /plaintext-start/.\n\n\n#+NAME: encrypt-in-place\n#+BEGIN_SRC lisp\n(encrypt-in-place cipher text &key start end) => n-bytes-consumed, n-bytes-produced\n#+END_SRC\n#+NAME: decrypt-in-place\n#+BEGIN_SRC lisp\n(decrypt-in-place cipher text &key start end) => n-bytes-consumed, n-bytes-produced\n#+END_SRC\n\nEncrypts or decrypts data in /text/ between /start/ and /end/ \"in-place\"\naccording to /cipher/. These functions are shorthand for:\n#+BEGIN_EXAMPLE\n(encrypt cipher text text :plaintext-start start :plaintext-end end :ciphertext-start start)\n(decrypt cipher text text :ciphertext-start start :ciphertext-end end :plaintext-start start)\n#+END_EXAMPLE\n\n_Note:_ [[encrypt-in-place][encrypt-in-place]] and [[decrypt-in-place][decrypt-in-place]] do not support\na /handle-final-block/ parameter as [[encrypt][encrypt]] and [[decrypt][decrypt]] do. If you\nneed the functionality that /handle-final-block/ provides, then you\nneed to use [[encrypt][encrypt]] and [[decrypt][decrypt]].\n\n_Note:_ /n-bytes-consumed/ and /n-bytes-produced/ may not always be\nequal to the length of the data specified in the call to\n[[encrypt-in-place][encrypt-in-place]] or [[decrypt-in-place][decrypt-in-place]]. This subtlely is also present in\n[[encrypt][encrypt]] or [[decrypt][decrypt]].\n\n\n#+BEGIN_SRC lisp\n(encrypt-message cipher message &key start end &allow-other-keys) => encrypted-message\n#+END_SRC\n\nReturn the /message/ between /start/ and /end/ encrypted with the /cipher/; the\nclass of /cipher/ determines the algorithm used to encrypt the message.\n\n\n#+BEGIN_SRC lisp\n(decrypt-message cipher message &key start end &allow-other-keys) => decrypted-message\n#+END_SRC\n\nReturn the /message/ between /start/ and /end/ decrypted by the /cipher/; the\nclass of /cipher/ determines the algorithm used to decrypt the message.\n\n** Inquiry functions\n\n#+NAME: list-all-ciphers\n#+BEGIN_SRC lisp\n(list-all-ciphers) => list\n#+END_SRC\n\nReturns a list of cipher-names that may be validly passed to [[make-cipher][make-cipher]].\n\n\n#+NAME: cipher-supported-p\n#+BEGIN_SRC lisp\n(cipher-supported-p name) => boolean\n#+END_SRC\n\nReturns ~t~ if /name/ would be in the list returned by [[list-all-ciphers][list-all-ciphers]],\n~nil~ otherwise.\n\n\n#+NAME: key-lengths\n#+BEGIN_SRC lisp\n(key-lengths cipher) => list\n#+END_SRC\n\nReturn a list of valid key lengths for /cipher/.\n\n\n#+NAME: block-length\n#+BEGIN_SRC lisp\n(block-length cipher) => number\n#+END_SRC\n\nReturn the number of octets /cipher/ processes at a time. This\nfunction always returns 1 for stream ciphers.\n\n** Key stream position\n\nBlock ciphers in CTR mode and some stream ciphers have the ability to change the\ncurrent position within the key stream in constant time instead of having to\nconsume all the bytes until the desired position is reached.\n\n#+NAME: keystream-position\n#+BEGIN_SRC lisp\n(keystream-position cipher &optional position) => number or boolean\n#+END_SRC\n\nReturn or change the current /position/ within the key stream of a /cipher/.\nWhen /position/ is not supplied, [[keystream-position][keystream-position]] returns the current position\nin the key stream, or /nil/ if it can't be determined. When /position/ is\nsupplied, the key stream position of the /cipher/ is set to that /position/ if\npossible. [[keystream-position][keystream-position]] returns /t/ if the repositioning is performed\nsuccessfully, or /nil/ otherwise.\n\n[[keystream-position][keystream-position]] can be used with the following ciphers:\n - all the block ciphers (aes, twofish, etc.) in CTR mode\n - chacha\n - chacha/12\n - chacha/8\n - salsa20\n - salsa20/12\n - salsa20/8\n - xchacha\n - xchacha/12\n - xchacha/8\n - xsalsa20\n - xsalsa20/12\n - xsalsa20/8\n\n* Digests\n  :PROPERTIES:\n  :CUSTOM_ID: digests\n  :END:\n\nDigest functions, also known as hash functions, produce fixed-length\noutput (a /digest/ or /hash/) from a variable-length message. The\nsimplest example of a digest function is one that adds up all the\nbytes in the message modulo 256. This digest function fails one test\nof a cryptographically secure hash function: it must be difficult to\nfind a message with a given digest. It also fails the other test: it\nmust be difficult to find two messages with the same digest.\n\nIronclad provides several cryptographically secure digest functions\nand several non-cryptographically secure digest functions.\n\n_Note:_ In the functions below, messages or parts thereof are provided\nas octet vectors; Ironclad has no facilities for producing digests of\nstrings. If you need to obtain the digest of a string, then you need\nto figure out how to convert it to an octet vector first. This is\na deliberate design decision. Characters are not equivalent to bytes.\nSee your local Unicode guru for more details.\n\n\n#+NAME: make-digest\n#+BEGIN_SRC lisp\n(make-digest digest-name &rest keys &key &allow-other-keys) => digester\n#+END_SRC\n\nReturns a digest object. /digest-name/ is a keyword naming the\nalgorithm you wish /digester/ to use. The supported digest names can be found\nby calling [[list-all-digests][list-all-digests]]. They are:\n - adler32\n - blake2\n - blake2/160\n - blake2/256\n - blake2/384\n - blake2s\n - blake2s/128\n - blake2s/160\n - blake2s/224\n - crc24\n - crc32\n - groestl\n - groestl/224\n - groestl/256\n - groestl/384\n - jh\n - jh/224\n - jh/256\n - jh/384\n - keccak\n - keccak/224\n - keccak/256\n - keccak/384\n - kupyna\n - kupyna/256\n - md2\n - md4\n - md5\n - ripemd-128\n - ripemd-160\n - sha1\n - sha224\n - sha256\n - sha3\n - sha3/224\n - sha3/256\n - sha3/384\n - sha384\n - sha512\n - shake128\n - shake256\n - skein1024\n - skein1024/384\n - skein1024/512\n - skein256\n - skein256/128\n - skein256/160\n - skein256/224\n - skein512\n - skein512/128\n - skein512/160\n - skein512/224\n - skein512/256\n - skein512/384\n - sm3\n - streebog\n - streebog/256\n - tiger\n - tree-hash\n - whirlpool\n\nLike for [[make-cipher][make-cipher]], /digest-name/ should be a symbol in the\n~keyword~ or ~ironclad~ packages.\n\nSome algorithms (e.g. shake128 and shake256) can produce digests of\nany size. The size of the digest in bytes can be specified with the\n/output-length/ key parameter:\n\n#+BEGIN_EXAMPLE\n(make-digest :shake256 :output-length 123)\n#+END_EXAMPLE\n\n\n#+NAME: update-digest\n#+BEGIN_SRC lisp\n(update-digest digester thing &key &allow-other-keys) => (values)\n#+END_SRC\n\nUpdates the internal state of /digester/ with the contents of /thing/.\nThe exact method is determined by the type of /thing/.\n\nThere are several methods defined on this generic function that take\na particular digester and a ~(simple-array (unsigned-byte 8) (*))~ as\nwell as the usual /start/ and /end/ keyword arguments. These methods\nupdate the state of /digester/ with the subsequence of the array\ndenoted by /start/ and /end/. They are not listed here because there's\none method for every type of digest that Ironclad provides, and\nlisting them would get very tedious for no benefit. An example should\nsuffice.\n\n#+BEGIN_EXAMPLE\n(let ((digester (ironclad:make-digest :sha1))\n      (array (make-array 16 :element-type '(unsigned-byte 8) :initial-element 0)))\n  ;; Update with 16 zeroes.\n  (ironclad:update-digest digester array)\n  ;; Update with 8 ones.\n  (fill array 1 :start 2 :end 10)\n  (ironclad:update-digest digester array :start 2 :end 10))\n#+END_EXAMPLE\n\n\n#+BEGIN_SRC lisp\n(update-digest digester (stream stream) &key buffer start end &allow-other-keys) => digester\n#+END_SRC\n\nUpdate the internal state of /digester/ with the contents of /stream/,\nwhich must respond to ~read-byte~ or ~read-sequence~ with\na ~(simple-array (unsigned-byte 8) (*))~ and return /digester/. It\ndiffers from [[digest-stream][digest-stream]], below, in that you may need to digest data\nbefore or after the contents of /stream/ (this happens, for instance,\nwhen signing the contents of some file).\n\n\n#+NAME: produce-digest\n#+BEGIN_SRC lisp\n(produce-digest digester &key digest digest-start) => digest\n#+END_SRC\n\nReturn the digest of the data processed by /digester/ so far.\n\nIf /digest/ is provided, the computed digest will be placed into\n/digest/ starting at /digest-start/. /digest/ must be a\n~(simple-array (unsigned-byte 8) (*))~. An [[insufficient-buffer-space][insufficient-buffer-space]]\nerror will be signaled if there is insufficient space in /digest/.\n\n** High-level convenience functions\n\nSeveral high-level convenience functions that encapsulate common\nsequences of [[make-digest][make-digest]], [[update-digest][update-digest]] and [[produce-digest][produce-digest]] are\nprovided by Ironclad as well. They come in two flavors: the first\ntakes a digest name as would be provided to [[make-digest][make-digest]]. The second\nway to call these functions is to provide an actual digest object as\nthe first argument. So one can say:\n\n#+BEGIN_EXAMPLE\n(ironclad:digest-sequence :md5 *buffer*)\n#+END_EXAMPLE\n\nor, equivalently:\n\n#+BEGIN_EXAMPLE\n(let ((digester (ironclad:make-digest :md5)))\n  (ironclad:digest-sequence digester *buffer*))\n#+END_EXAMPLE\n\nThe second form comes in handy if you plan on [[*Miscellaneous][reusing the digest object]].\n\n\n#+NAME: digest-sequence\n#+BEGIN_SRC lisp\n(digest-sequence digest-spec sequence &rest args &key start end digest digest-start) => digest\n#+END_SRC\n\nReturns the digest of the subsequence of /sequence/ bounded by /start/\nand /end/, according to /digest-name/. /sequence/ must be\na ~(vector (unsigned-byte 8))~. /digest/ and /digest-start/\nare as in [[produce-digest][produce-digest]].\n\n\n#+NAME: digest-stream\n#+BEGIN_SRC lisp\n(digest-stream digest-spec stream &rest args &key buffer start end digest digest-start) => digest\n#+END_SRC\n\nReturns the digest of the contents of the stream specified by\n/stream/. ~read-byte~ must be a legal operation on /stream/ and return\nan ~(unsigned-byte 8)~. In a similar fashion, ~read-sequence~ on\n/stream/ must support reading into a ~(simple-array (unsigned-byte 8) (*))~.\n/digest/ and /digest-start/ are as in [[produce-digest][produce-digest]].\n\nIf /buffer/ is provided, it must be a ~(simple-array (unsigned-byte 8) (*))~;\nthe portion of /buffer/ between /start/ and /end/ will be used to read\nthe data from the stream.\n\n\n#+NAME: digest-file\n#+BEGIN_SRC lisp\n(digest-file digest-spec pathname &rest args &key buffer start end digest digest-start) => digest\n#+END_SRC\n\nReturns the digest of the contents of the file named by /pathname/.\n/digest/ and /digest-start/ are as in [[produce-digest][produce-digest]].\n\nIf /buffer/ is provided, it must be a ~(simple-array (unsigned-byte 8) (*))~;\nthe portion of /buffer/ between /start/ and /end/ will be used to read\nthe data from the stream.\n\n** Inquiry functions\n\n#+NAME: list-all-digests\n#+BEGIN_SRC lisp\n(list-all-digests) => list\n#+END_SRC\n\nReturns a list whose elements may be validly passed to [[make-digest][make-digest]].\n\n\n#+NAME: digest-supported-p\n#+BEGIN_SRC lisp\n(digest-supported-p name) => boolean\n#+END_SRC\n\nReturns ~t~ if /name/ would be in the list returned by [[list-all-digests][list-all-digests]],\n~nil~ otherwise.\n\n\n#+NAME: digest-length\n#+BEGIN_SRC lisp\n(digest-length digest) => number\n#+END_SRC\n\nReturns the length of the digest computed by /digest/, which may be\na digest-name or a digest instance.\n\n** Miscellaneous\n\nIronclad digests are CLOS objects; the interesting thing about this\nfor most purposes is that functions like ~reinitialize-instance~ are\nsupported. This means one can write a fairly efficient clone of the\n=md5sum= program like so:\n\n#+BEGIN_EXAMPLE\n(defun digest-sum-files (digest-name &rest files)\n  (unless files\n    (error \"no files given to digest\"))\n  (loop with buffer = (make-array 8192 :element-type '(unsigned-byte 8))\n        with digest = (make-array (ironclad:digest-length digest-name)\n                                  :element-type '(unsigned-byte 8))\n       for file in files\n       for digester = (ironclad:make-digest digest-name)\n       then (reinitialize-instance digester)\n       do (ironclad:digest-file digester file :buffer buffer :digest digest)\n          (format t \"~A ~A~%\" (file-namestring file)\n                  (ironclad:byte-array-to-hex-string digest))))\n#+END_EXAMPLE\n\n** Tree hashes\n\nIronclad supports tree hashes, as described in [[http://web.archive.org/web/20080316033726/http://www.open-content.net/specs/draft-jchapweske-thex-02.html][Tree Hash EXchange format]].\nYou create tree hashes as if you were creating a digest:\n\n#+BEGIN_EXAMPLE\n(ironclad:make-digest :tree-hash)\n#+END_EXAMPLE\n\nBy default, this creates a tree hash that uses the Tiger digest\nalgorithm internally and a segment size of 1024. Since using the Tiger\ndigest algorithm is so common, a convenience function that makes your\nintent obvious has also been provided:\n\n#+BEGIN_EXAMPLE\n(ironclad:make-tiger-tree-hash)\n#+END_EXAMPLE\n\nYou may indicate that you wish to use a different algorithm than\nTiger:\n\n#+BEGIN_EXAMPLE\n(ironclad:make-digest '(:treehash :digest :sha256))\n#+END_EXAMPLE\n\nOr you might wish to use a different segment size:\n\n#+BEGIN_EXAMPLE\n(ironclad:make-digest '(:tree-hash :block-length 16384))\n#+END_EXAMPLE\n\nThere is currently no interface for obtaining the intermediate hashes\ncomputed while computing the final tree hash.\n\n* Message authentication codes\n  :PROPERTIES:\n  :CUSTOM_ID: message-authentication-codes\n  :END:      \n\nA message authentication code is a cryptographic function of some data\nand a user-specified key. Only a person knowing the key can recompute\nthe MAC for the given message. A MAC is useful where maintaining data\nintegrity is required, but the secrecy of the data is not paramount.\n\nIronclad provides different kinds of MACs:\n - HMAC, specified in [[http://www.ietf.org/rfc/rfc2109.txt][RFC 2104]]\n - CMAC, specified in [[http://www.ietf.org/rfc/rfc4493.txt][RFC 4493]] and NIST document 800-38B\n - GMAC, specified in NIST document 800-38D\n - Blake2 and Blake2s MAC\n - Poly1305\n - SipHash\n - Skein MAC\n\n\n#+NAME: make-mac\n#+BEGIN_SRC lisp\n(make-mac mac-name key &rest args) => mac\n#+END_SRC\n\nReturn a MAC object initialized with a secret /key/. /mac-name/ is\na keyword naming the algorithm you wish /mac/ to use. The supported\nMACs can be found by calling [[list-all-macs][list-all-macs]]. They are:\n - blake2-mac\n - blake2s-mac\n - cmac\n - gmac\n - hmac\n - poly1305\n - siphash\n - skein-mac\n\nLike for [[make-digest][make-digest]], /mac-name/ should be a symbol in the ~keyword~\nor ~ironclad~ packages.\n\nSome MACs take extra arguments that can be specified in /args/.\n\n#+BEGIN_EXAMPLE\n(make-mac :blake2-mac key &key digest-length)\n(make-mac :blake2s-mac key &key digest-length)\n(make-mac :cmac key cipher-name)\n(make-mac :gmac key cipher-name initialization-vector)\n(make-mac :hmac key digest-name)\n(make-mac :poly1305 key)\n(make-mac :siphash key &key compression-rounds finalization-rounds digest-length)\n(make-mac :skein-mac key &key block-length digest-length)\n#+END_EXAMPLE\n\nWhen making a Blake2 MAC, the length of the /key/ passed to [[make-mac][make-mac]]\nmust be 64 bytes.\n\nWhen making a Blake2s MAC, the length of the /key/ passed to [[make-mac][make-mac]]\nmust be 32 bytes.\n\nWhen making a CMAC, /cipher-name/ must have a [[block-length][block-length]] of either 8, 16, 32,\n64 or 128; this restriction is satisfied by many ciphers in Ironclad with the\nnotable exception of stream ciphers. /key/ must be an acceptable key for\n/cipher-name/.\n\nWhen making a GMAC, /cipher-name/ must have a [[block-length][block-length]] of 16. /key/ must be\nan acceptable key for /cipher-name/.\n\nWhen making a Poly1305 MAC, the length of the /key/ passed to [[make-mac][make-mac]] must be\n32 bytes.\n\nWhen making a SipHash MAC, the length of the /key/ passed to [[make-mac][make-mac]] must be 16\nbytes. /digest-length/ is 8 by default, but it can also be set to 16. By\ndefault, /compression-rounds/ is 2 and /finalization-rounds/ is 4.\n\nWhen making a Skein MAC, /block-length/ can be 32 (to use the Skein256\nhash function internally), 64 (to use Skein512) or 128 (to use\nSkein1024). /digest-length/ can be any length you want the computed\ndigest to be. By default, /block-length/ is 64 and /digest-length/\nis 64.\n\n\nMAC objects support ~reinitialize-instance~:\n\n#+BEGIN_SRC lisp\n(reinitialize-instance mac &rest initargs &key key &allow-other-keys) => mac\n#+END_SRC\n\nThe /:key/ argument is the secret key, as provided to [[make-mac][make-mac]].\n\n\n#+NAME: update-mac\n#+BEGIN_SRC lisp\n(update-mac mac thing &key &allow-other-keys) => (values)\n#+END_SRC\n\nUpdates the internal state of /mac/ with the contents of /thing/.\nThe exact method is determined by the type of /thing/.\n\nThere are several methods defined on this generic function that take\na particular MAC and a ~(simple-array (unsigned-byte 8) (*))~ as\nwell as the usual /start/ and /end/ keyword arguments. These methods\nupdate the state of /mac/ with the subsequence of the array\ndenoted by /start/ and /end/. They are not listed here because there's\none method for every type of MAC that Ironclad provides, and\nlisting them would get very tedious for no benefit. An example should\nsuffice.\n\n#+BEGIN_EXAMPLE\n(let* ((key (random-data 32))\n       (mac (ironclad:make-mac :hmac key :sha256))\n       (array (make-array 16 :element-type '(unsigned-byte 8) :initial-element 0)))\n  ;; Update with 16 zeroes.\n  (ironclad:update-mac mac array)\n  ;; Update with 8 ones.\n  (fill array 1 :start 2 :end 10)\n  (ironclad:update-mac mac array :start 2 :end 10))\n#+END_EXAMPLE\n\n\n#+NAME: produce-mac\n#+BEGIN_SRC lisp\n(produce-mac mac &key digest digest-start) => digest\n#+END_SRC\n\nReturn the digest of the data processed by /mac/ so far. The internal\nstate of /mac/ is not modified; this feature makes it possible to\ncompute a \"rolling MAC\" of a document.\n\nIf /digest/ is provided, the computed digest will be placed into\n/digest/ starting at /digest-start/. /digest/ must be a\n~(simple-array (unsigned-byte 8) (*))~. An [[insufficient-buffer-space][insufficient-buffer-space]]\nerror will be signaled if there is insufficient space in /digest/.\n\nThe length of the digest returned by [[produce-mac][produce-mac]] is determined by the\nkind of MAC and the extra arguments passed to [[make-mac][make-mac]]:\n - blake2-mac: from 1 to 64 bytes (64 by default)\n - blake2s-mac: from 1 to 32 bytes (32 by default)\n - cmac: [[block-length][block-length]] of the /cipher-name/ passed to [[make-mac][make-mac]]\n - gmac: 16 bytes\n - hmac: [[digest-length][digest-length]] of the /digest-name/ passed to [[make-mac][make-mac]]\n - poly1305: 16 bytes\n - siphash: /digest-length/ passed to [[make-mac][make-mac]] (8 by default)\n - skein-mac: /digest-length/ passed to [[make-mac][make-mac]] (64 by default)\n\n** Inquiry functions\n\n#+NAME: list-all-macs\n#+BEGIN_SRC lisp\n(list-all-macs) => list\n#+END_SRC\n\nReturns a list whose elements may be validly passed to [[make-mac][make-mac]].\n\n\n#+NAME: mac-supported-p\n#+BEGIN_SRC lisp\n(mac-supported-p name) => boolean\n#+END_SRC\n\nReturns ~t~ if /name/ would be in the list returned by [[list-all-macs][list-all-macs]],\n~nil~ otherwise.\n\n* Authenticated encryption\n  :PROPERTIES:\n  :CUSTOM_ID: authenticated-encryption\n  :END:\n\n#+NAME: make-authenticated-encryption-mode\n#+BEGIN_SRC lisp\n(make-authenticated-encryption-mode name &rest args) => mode\n#+END_SRC\n\nReturn an authenticated encryption object suitable for use for both encryption\nand decryption.\n\n/name/ denotes the mode to use. [[list-all-authenticated-encryption-modes][list-all-authenticated-encryption-modes]] will\ntell you the names of all the supported modes. They are:\n - eax (Encrypt then authenticate then translate)\n - etm (Encrypt then MAC)\n - gcm (Galois counter mode)\n\n/name/ can be a symbol in the ~keyword~  or ~ironclad~ packages.\n\n/args/ depends on the chosen authenticated encryption mode.\n\n#+BEGIN_EXAMPLE\n(make-authenticated-encryption-mode :eax &key tag cipher-name key initialization-vector)\n(make-authenticated-encryption-mode :etm &key tag cipher mac)\n(make-authenticated-encryption-mode :gcm &key tag cipher-name key initialization-vector)\n#+END_EXAMPLE\n\nIf /tag/ is specified, it will be used at the end of decryption (when the\n/handle-final-block/ flag is ~t~) to check the authenticity of the data.\nA ~bad-authentication-tag~ error will be signaled if the data is not authentic.\nIf you don't specify it, you will have to call [[produce-tag][produce-tag]] after decryption and\ncheck that the tags match (e.g. using [[constant-time-equal][constant-time-equal]]).\n\nWhen using EAX, /key/ must be a suitable key for the chosen /cipher-name/.\n\nWhen using ETM, /cipher/ must be a cipher object created by [[make-cipher][make-cipher]].\n/mac/ must be a mac object created by [[make-mac][make-mac]].\n\nWhen using GCM, /cipher-name/ must have a [[block-length][block-length]] of 16 bytes. /key/ must be a suitable key\nfor the chosen cipher.\n\n\n#+NAME: process-associated-data\n#+BEGIN_SRC lisp\n(process-associated-data mode data &key start end) => (values)\n#+END_SRC\n\nUpdate the internal state of /mode/ with the contents of /data/ between /start/\nand /end/ so that they are taken into consideration in the authentication tag.\n\n\nAn authenticated encryption object can be used with the [[encrypt][encrypt]], [[decrypt][decrypt]],\n[[encrypt-message][encrypt-message]] and [[decrypt-message][decrypt-message]] functions.\n\n#+BEGIN_EXAMPLE\n(encrypt mode plaintext ciphertext &key plaintext-start plaintext-end ciphertext-start handle-final-block)\n(decrypt mode ciphertext plaintext &key ciphertext-start ciphertext-end plaintext-start handle-final-block)\n(encrypt-message mode message &key start end associated-data associated-data-start associated-data-end)\n(decrypt-message mode message &key start end associated-data associated-data-start associated-data-end)\n#+END_EXAMPLE\n\n\n#+NAME: produce-tag\n#+BEGIN_SRC lisp\n(produce-tag mode &key tag tag-start) => tag\n#+END_SRC\n\nReturn the authentication tag of the data processed by /mode/ so far. If /tag/\nis provided, the computed tag will be placed into /tag/ starting at /tag-start/.\n/tag/ must be a ~(simple-array (unsigned-byte 8) (*))~. An\n[[insufficient-buffer-space][insufficient-buffer-space]] error will be signaled if there is insufficient space\nin /tag/.\n\n** Inquiry functions\n\n#+NAME: list-all-authenticated-encryption-modes\n#+BEGIN_SRC lisp\n(list-all-authenticated-encryption-modes) => list\n#+END_SRC\n\nReturns a list whose elements may be validly passed to\n[[make-authenticated-encryption-mode][make-authenticated-encryption-mode]].\n\n\n#+NAME: authenticated-encryption-mode-supported-p\n#+BEGIN_SRC lisp\n(authenticated-encryption-mode-supported-p name) => boolean\n#+END_SRC\n\nReturns ~t~ if /name/ would be in the list returned by\n[[list-all-authenticated-encryption-modes][list-all-authenticated-encryption-modes]] ~nil~ otherwise.\n\n* Key derivation functions\n  :PROPERTIES:\n  :CUSTOM_ID: key-derivation-functions\n  :END:\n\nIronclad comes with a few key derivation functions:\n - Argon2 (only Argon2d and Argon2i without parallelism are implemented)\n - Bcrypt\n - Bcrypt-pbkdf\n - PBKDF1\n - PBKDF2\n - Scrypt\n - HMAC\n\n\n#+NAME: derive-key\n#+BEGIN_SRC lisp\n(derive-key kdf passphrase salt iteration-count key-length) => digest\n#+END_SRC\n\nGiven a key derivation function object (produced by [[make-kdf][make-kdf]]),\na password and salt (both must be of type\n~(simple-array (unsigned-byte 8) (*))~), and number of iterations,\nreturns the password digest as a byte array of length /key-length/.\n\nFor bcrypt, the /salt/ must be 16 bytes long, the /iteration-count/ must be\na power of 2 between 2^4 and 2^31, and the /key-length/ must be 24.\nScrypt and HMAC ignore the /iteration-count/ parameter.\n\nFor bcrypt-pbkdf, the /key-length/ must be between 1 and 1024.\n\n\n#+NAME: make-kdf\n#+BEGIN_SRC lisp\n(make-kdf kind &key digest n r p block-count additional-key additional-data) => kdf\n#+END_SRC\n\nReturns a key derivation function instance.\n\n/kind/ denotes the key derivation function to use. They are:\n - argon2d\n - argon2i\n - bcrypt\n - bcrypt-pbkdf\n - pbkdf1\n - pbkdf2\n - scrypt-kdf\n - hmac-kdf\n\n/kind/ can be a symbol in the ~keyword~  or ~ironclad~ packages.\n\nThe Argon2 key derivations use the /block-count/, /additional-key/\nand /additional-data/ parameters (/block-count/ is the number of 1 KiB\nmemory blocks used by the function and it must be at least 8,\n/additional-key/ and /additional-data/ are optional).\nThe PBKDF algorithms use /digest/.\nThe Scrypt key derivation uses cost parameters /N/, /r/ and /p/ (/N/\nis a CPU cost parameter that must be a power of 2, /r/ and /p/ are\nmemory cost parameters that must be defined such that\n/r/ * /p/ <= 2^30).\n\nThe default Scrypt parameters are /N/ = 4096, /r/ = 8, and /p/ = 2.\nPlease note that depending on the values of /N/ and /r/,\n[[derive-key][derive-key]] may not be able to allocate sufficient space for its\ntemporary arrays.\n\nThe HMAC-KDF algorithm uses the /digest/ parameter to precise what\nhash function is used. It also optionally uses the /additional-data/\nto precise the ~info~ vector from the [[https://tools.ietf.org/html/rfc5869][RFC]].\n\n\n#+NAME: list-all-kdfs\n#+BEGIN_SRC lisp\n(list-all-kdfs) => list\n#+END_SRC\n\nReturns a list of KDF kinds that may be validly passed to [[make-kdf][make-kdf]].\n\n** PBKDF convenience functions\n\nIronclad comes with convenience functions for using PBKDF1 and PBKDF2\nto store passwords.\n\n\n#+NAME: pbkdf2-hash-password\n#+BEGIN_SRC lisp\n(pbkdf2-hash-password password &key salt digest iterations) => password\n#+END_SRC\n\nConvenience function for hashing passwords using the PBKDF2 algorithm.\nReturns the derived hash of the password, and the original salt, as\nbyte vectors.\n\n\n#+NAME: pbkdf2-hash-password-to-combined-string\n#+BEGIN_SRC lisp\n(pbkdf2-hash-password-to-combined-string password &key salt digest iterations) => password\n#+END_SRC\n\nConvenience function for hashing passwords using the PBKDF2 algorithm.\nReturns the derived hash of the password as a single string that\nencodes the given salt and PBKDF2 algorithm parameters.\n\n\n#+NAME: pbkdf2-check-password\n#+BEGIN_SRC lisp\n(pbkdf2-check-password password combined-salt-and-digest) => boolean\n#+END_SRC\n\nGiven a /password/ byte vector and a combined salt and digest string\nproduced by [[pbkdf2-hash-password-to-combined-string][pbkdf2-hash-password-to-combined-string]], checks whether\nthe password is valid.\n\n* Public key cryptography\n  :PROPERTIES:\n  :CUSTOM_ID: public-key-cryptography\n  :END:\n\nIronclad includes support for a few public key cryptography algorithms.\n\nEncryption algorithms:\n - Elgamal\n - RSA\n\nSignature algorithms:\n - DSA\n - Ed25519\n - Ed448\n - Elgamal\n - RSA\n - Secp256k1\n - Secp256r1 (a.k.a. NIST P-256)\n - Secp384r1 (a.k.a. NIST P-384)\n - Secp521r1 (a.k.a. NIST P-521)\n\nDiffie-Hellman key exchange:\n - Curve25519\n - Curve448\n - Elgamal\n - Secp256k1\n - Secp256r1 (a.k.a. NIST P-256)\n - Secp384r1 (a.k.a. NIST P-384)\n - Secp521r1 (a.k.a. NIST P-521)\n\n** Key pair generation\n\n#+NAME: generate-key-pair\n#+BEGIN_SRC lisp\n(generate-key-pair kind &key num-bits &allow-other-keys) => private-key, public-key\n#+END_SRC\n\nReturn a key pair according to /kind/. The generation of DSA, Elgamal\nand RSA key pairs can take some time. If /kind/ is ~:dsa~ or ~:rsa~,\nthe /num-bits/ key argument indicating the size of the keys to\ngenerate must be specified. If /kind/ is ~:elgamal~, /num-bits/ must\nbe specified unless /compatible-with-key/ is specified, in which case\nthe group parameters are taken from the specified key instead of being\ngenerated.\n\nFor example, if Alice wants to generate a key pair for\na Diffie-Hellman exchange with Bob's Elgamal key pair:\n#+BEGIN_EXAMPLE\n(generate-key-pair :elgamal :compatible-with-key bob-public-key)\n#+END_EXAMPLE\n\n\n#+NAME: list-all-key-pair-kinds\n#+BEGIN_SRC lisp\n(list-all-key-pair-kinds) => list\n#+END_SRC\n\nReturns a list of key pair kinds that may be validly passed to\n[[generate-key-pair][generate-key-pair]].\n\n*** Key construction\n\n#+NAME: make-public-key\n#+BEGIN_SRC lisp\n(make-public-key kind &key &allow-other-keys) => public-key\n#+END_SRC\n\nReturn a public key according to /kind/. The /&key/\narguments vary according to /kind/. The interesting bits are in the\nmethods that specialize on /kind/, below.\n\n#+BEGIN_EXAMPLE\n(make-public-key :curve25519 &key y) => public-key\n(make-public-key :curve448 &key y) => public-key\n(make-public-key :dsa &key p q g y) => public-key\n(make-public-key :ed25519 &key y) => public-key\n(make-public-key :ed448 &key y) => public-key\n(make-public-key :elgamal &key p g y) => public-key\n(make-public-key :rsa &key e n) => public-key\n(make-public-key :secp256k1 &key y) => public-key\n(make-public-key :secp256r1 &key y) => public-key\n(make-public-key :secp384r1 &key y) => public-key\n(make-public-key :secp521r1 &key y) => public-key\n#+END_EXAMPLE\n\n\n#+NAME: make-private-key\n#+BEGIN_SRC lisp\n(make-private-key kind &key &allow-other-keys) => private-key\n#+END_SRC\n\nReturn a private key according to /kind/. The /&key/ arguments vary\naccording to /kind/. The interesting bits are in the methods that\nspecialize on /kind/, below.\n\n#+BEGIN_EXAMPLE\n(make-private-key :curve25519 &key x y) => private-key\n(make-private-key :curve448 &key x y) => private-key\n(make-private-key :dsa &key p q g y x) => private-key\n(make-private-key :ed25519 &key x y) => private-key\n(make-private-key :ed448 &key x y) => private-key\n(make-private-key :elgamal &key p g y x) => private-key\n(make-private-key :rsa &key d n p q) => private-key\n(make-private-key :secp256k1 &key x y) => private-key\n(make-private-key :secp256r1 &key x y) => private-key\n(make-private-key :secp384r1 &key x y) => private-key\n(make-private-key :secp521r1 &key x y) => private-key\n#+END_EXAMPLE\n\n\nFor Curve25519, Curve448, Ed25519, Ed448 keys, Secp256k1, Secp256r1, Secp384r1\nand Secp521r1, the type of the parameters is\n~(simple-array (unsigned-byte 8) (*))~:\n - /x/, the secret key\n - /y/, the public key\n\nFor DSA and Elgamal keys, the type of the parameters is ~integer~:\n - /p/, the prime number defining the DL group\n - /q/, the prime number defining the DL sub-group\n - /g/, the generator\n - /y/, the public key\n - /x/, the private key\n\nFor RSA keys, the type of the parameters is ~integer~:\n - /n/, the modulus\n - /e/, the public key\n - /d/, the private key\n - /p/, the first prime factor of /n/\n - /q/, the second prime factor of /n/\n\n*** Key destructuring\n\nThe [[destructure-public-key][destructure-public-key]] and [[destructure-private-key][destructure-private-key]] functions can\nbe useful if you need to store keys somewhere for future use.\n\n#+NAME: destructure-public-key\n#+BEGIN_SRC lisp\n(destructure-public-key public-key) => plist\n#+END_SRC\n\nReturn the elements of a public key in a plist. The indicators of the\nplist match the /&key/ arguments of the [[make-public-key][make-public-key]] method.\n\n\n#+NAME: destructure-private-key\n#+BEGIN_SRC lisp\n(destructure-private-key private-key) => plist\n#+END_SRC\n\nReturn the elements of a private key in a plist. The indicators of the\nplist match the /&key/ arguments of the [[make-private-key][make-private-key]] method.\n\n** Digital signatures\n\n#+NAME: sign-message\n#+BEGIN_SRC lisp\n(sign-message key message &key start end &allow-other-keys) => signature\n#+END_SRC\n\nReturn a signature of /message/ between /start/ and /end/ signed with\n/key/; the class of /key/ determines the algorithm used to create the\n/signature/.\n\n_Note:_ The [[sign-message][sign-message]] does not perform the hashing of the data. You\nshould hash your data using your favorite hash function, and then use\nthis hash as the /message/ passed to [[sign-message][sign-message]].\n\n\n#+NAME: verify-signature\n#+BEGIN_SRC lisp\n(verify-signature key message signature &key start end &allow-other-keys) => boolean\n#+END_SRC\n\nVerify whether /signature/ is a valid signature of /message/ between\n/start/ and /end/ using /key/. Return ~t~ is the signature is valid\nand ~nil~ otherwise.\n\n*** Padding\n\nTo be secure, RSA signature requires the message to be padded.\nThe /pss/ key parameter is provided to pad (or unpad) the message\nduring signature (or verification) with the PSS scheme of PKCS-1.\nThe value of the /pss/ key parameter can be either a digest name\nor ~t~ (which will use the sha1 digest).\n\n#+BEGIN_EXAMPLE\n(sign-message rsa-private-key message :pss t) => signature\n(verify-signature rsa-public-key message signature :pss t) => boolean\n#+END_EXAMPLE\n\nThe functions /pss-encode/ and /pss-decode/ can also be used by hand if\nnecessary.\n\n*** Signature nonce\n\nDSA, Elgamal and ECDSA (Secp256k1, Secp256r1, Secp384r1 and Secp521r1)\nsignatures require the generation of a nonce. You must never sign two different\nmessages with the same key and the same nonce, or anyone having these two\nsignatures will be able compute your private key. Ironclad uses the\n[[generate-signature-nonce][generate-signature-nonce]] method which by default generates random nonces.\n\n#+NAME: generate-signature-nonce\n#+BEGIN_SRC lisp\n(generate-signature-nonce (key message &optional parameters)) => nonce\n#+END_SRC\n\nFor DSA, /parameters/ is /q/. For Elgamal, /parameters/ is /p/. For ECDSA,\n/parameters/ is ~nil~.\n\n\nIf instead of random nonces, you want to have deterministic nonces (e.g. like\nin RFC 6979), you will have to redefine [[generate-signature-nonce][generate-signature-nonce]]. For example,\nto have deterministic nonces for Secp256k1 ECDSA signatures, you could do\nsomething like:\n\n#+BEGIN_EXAMPLE\n(defmethod generate-signature-nonce ((key secp256k1-private-key) message &optional parameters)\n  (declare (ignore parameters))\n  (compute-deterministic-nonce key message))\n#+END_EXAMPLE\n\n*** Format of signatures\n\n[[sign-message][sign-message]] returns signatures as octet vectors. When the signature\ncontains several values (e.g. the R and S values of DSA signatures),\nthe octet vector is the concatenation of these values (e.g. the first\nhalf of the vector is the R value, the second half is the S value).\nYou can use the [[make-signature][make-signature]] and [[destructure-signature][destructure-signature]] functions if\nyou need access to the elements of a signature (e.g. to use\na different kind of serialization).\n\n\n#+NAME: make-signature\n#+BEGIN_SRC lisp\n(make-signature kind &key &allow-other-keys) => signature\n#+END_SRC\n\nReturn an octet vector representing a signature. The /&key/ arguments\nvary according to /kind/. The interesting bits are in the methods that\nspecialize on /kind/, below.\n\n#+BEGIN_EXAMPLE\n(make-signature :dsa &key r s n-bits) => signature\n(make-signature :ed25519 &key r s) => signature\n(make-signature :ed448 &key r s) => signature\n(make-signature :elgamal &key r s n-bits) => signature\n(make-signature :rsa &key s n-bits) => signature\n(make-signature :secp256k1 &key r s) => signature\n(make-signature :secp256r1 &key r s) => signature\n(make-signature :secp384r1 &key r s) => signature\n(make-signature :secp521r1 &key r s) => signature\n#+END_EXAMPLE\n\nFor Ed25519, Ed448, Secp256k1, Secp256r1, Secp384r1 and Secp521r1 signatures,\nthe type of the parameters /r/ and /s/ is\n~(simple-array (unsigned-byte 8) (*))~.\n\nFor DSA and Elgamal signatures, the type of the parameters /r/, /s/\nand /n-bits/ is ~integer~.\n\nFor RSA signatures, the type of the parameters /s/ and /n-bits/ is\n~integer~.\n\n\n#+NAME: destructure-signature\n#+BEGIN_SRC lisp\n(destructure-signature kind signature) => plist\n#+END_SRC\n\nReturn the elements of a signature in a plist. The indicators of the\nplist match the /&key/ arguments of the [[make-signature][make-signature]] method.\n\n** Encryption and decryption\n\n#+NAME: encrypt-message\n#+BEGIN_SRC lisp\n(encrypt-message key message &key start end &allow-other-keys) => encrypted-message\n#+END_SRC\n\nReturn the /message/ between /start/ and /end/ encrypted with the /key/;\nthe class of /key/ determines the algorithm used to encrypt the message.\n\n\n#+NAME: decrypt-message\n#+BEGIN_SRC lisp\n(decrypt-message key message &key start end n-bits &allow-other-keys) => decrypted-message\n#+END_SRC\n\nReturn the /message/ between /start/ and /end/ decrypted by the /key/;\nthe class of /key/ determines the algorithm used to decrypt the message.\n/n-bits/ can be used to indicate the expected size of the decrypted\nmessage (e.g. a small byte vector starting with zeros encrypted\nwithout padding, which is probably a bad idea, c.f. Padding section).\n\n*** Padding\n\nTo be secure, RSA encryption requires the message to be padded. The\n/oaep/ key parameter is provided to pad (or unpad) the message during\nencryption (or decryption) with the OAEP scheme of PKCS-1.\nThe value of the /oaep/ key parameter can be either a digest name\nor ~t~ (which will use the sha1 digest).\n\n#+BEGIN_EXAMPLE\n(encrypt-message rsa-public-key message :oaep t) => encrypted-message\n(decrypt-message rsa-private-key message :oaep t) => decrypted-message\n#+END_EXAMPLE\n\nThe functions /oaep-encode/ and /oaep-decode/ can also be used by hand if\nnecessary.\n\n*** Format of messages\n\n[[encrypt-message][encrypt-message]] returns encrypted messages as octet vectors. When the\nmessage contains several values (e.g. the C1 and C2 values of Elgamal\nmessages), the octet vector is the concatenation of these values (e.g.\nthe first half of the vector is the big-endian representation of the\nC1 value, the second half is the C2 value). You can use the\n[[make-message][make-message]] and [[destructure-message][destructure-message]] functions if you need access to\nthe elements of a message (e.g. to use a different kind of\nserialization).\n\n\n#+NAME: make-message\n#+BEGIN_SRC lisp\n(make-message kind &key &allow-other-keys) => message\n#+END_SRC\n\nReturn an octet vector representing a message. The /&key/ arguments\nvary according to /kind/. The interesting bits are in the methods that\nspecialize on /kind/, below.\n\n#+BEGIN_EXAMPLE\n(make-message :elgamal &key c1 c2 n-bits) => message\n(make-message :rsa &key m n-bits) => message\n#+END_EXAMPLE\n\nFor Elgamal messages, the type of the parameters /c1/, /c2/ and\n/n-bits/ is ~integer~.\n\nFor RSA signatures, the type of the parameters /m/ and /n-bits/ is\n~integer~.\n\n\n#+NAME: destructure-message\n#+BEGIN_SRC lisp\n(destructure-message kind message) => plist\n#+END_SRC\n\nReturn the elements of a message in a plist. The indicators of the\nplist match the /&key/ arguments of the [[make-message][make-message]] method.\n\n** Diffie-Hellman key exchange\n\n#+NAME: diffie-hellman\n#+BEGIN_SRC lisp\n(diffie-hellman private-key public-key) => bytes\n#+END_SRC\n\nReturn a secret shared by two users Alice and Bob, computed from\nAlice's private key and Bob's public key (these keys must be\ncompatible, i.e. have the same group parameters).\n\n* Pseudo-random number generation\n  :PROPERTIES:\n  :CUSTOM_ID: pseudo-random-number-generation\n  :END:\n\nThe =*prng*= special variable indicates which pseudo-random number\ngenerator is used by default by functions that need to generate some\nrandom data. It defaults to a sensible OS-specific value.\n\nThe vast, vast vast number of users should just use the default\n~os-prng~ (which uses =/dev/urandom= on Unix and ~CryptGenRandom~ on\nWindows). For users who need /deterministic/,\nhigh-quality-random-seeming numbers (e.g. for Monte Carlo\nsimulations), ~fortuna-generator~ is provided. Finally, if you're\nrunning on a platform without a decent PRNG (these are few and far\nbetween now), you may require the full ~fortuna-prng~. When in doubt,\nuse ~os-prng~, which is the default.\n\n\n#+NAME:make-prng\n#+BEGIN_SRC lisp\n(make-prng name &key seed) => prng\n#+END_SRC\n\nCreate a pseudo-random number generator.\n\n/name/ denotes the style of PRNG to use. [[list-all-prngs][list-all-prngs]] will tell you\nthe names of all supported PRNGs. Currently supported PRNGs are:\n - OS\n - Fortuna\n - Fortuna-generator\n\n/name/ can be a symbol in the ~keyword~ package or in the ~ironclad~\npackage.\n\n/seed/ is a *seed descriptor*. If ~nil~, the PRNG will not be seeded\n(which may prevent it from generating output until it is seeded,\ndepending on the PRNG in question). If ~:random~ then the PRNG will be\nseeded with the OS's cryptographically-secure PRNG. If ~:urandom~ then\nthe PRNG will be seeded with the OS's fast-but-potentially-less-secure\nPRNG, if available (if not, will fallback to ~:random~). If it is\na pathname indicator, a seed will be read from the indicated file,\nthen a new seed will be generated and written back to the file\n(over-writing the old seed). Finally, if it is a byte vector, it will\nbe used to seed the PRNG.\n\nIn single-threaded applications, you should very rarely need to call [[make-prng][make-prng]];\nthe default OS-provided PRNG should be appropriate in nearly all cases.\n\nIn multi-threaded applications, each thread that will use functions requiring\nrandom data must have its own PRNG, or several threads might generate the same\n\"random\" data. If the threads are created using the *bordeaux-threads* library\n(or by a library using *bordeaux-threads*, like *lparallel*), this is done\nautomatically. However, if you are using the threading functions of your Common\nLisp implementation directly, you have to bind the ~*prng*~ special variable to\na new PRNG in each thread. For example:\n\n#+BEGIN_EXAMPLE\n(make-thread (lambda ()\n               (let ((crypto:*prng* (crypto:make-prng :os)))\n                 (forms-for-thread-1))))\n\n(make-thread (lambda ()\n               (let ((crypto:*prng* (crypto:make-prng :os)))\n                 (forms-for-thread-2))))\n#+END_EXAMPLE\n\n\n#+NAME: list-all-prngs\n#+BEGIN_SRC lisp\n(list-all-prngs) => list\n#+END_SRC\n\nList all known PRNG types.\n\n\n#+NAME: random-data\n#+BEGIN_SRC lisp\n(random-data num-bytes &optional prng) => bytes\n#+END_SRC\n\nGenerate /num-bytes/ bytes of random data from /prng/. Updates the\nstate of the generator.\n\n\n#+NAME: random-bits\n#+BEGIN_SRC lisp\n(random-bits num-bits &optional prng) => integer\n#+END_SRC\n\nGenerate an integer with /num-bits/ bits.\n\n\n#+NAME: strong-random\n#+BEGIN_SRC lisp\n(strong-random limit &optional prng) => number\n#+END_SRC\n\nA drop-in replacement for ~common-lisp:random~, [[strong-random][strong-random]]\ngenerates a number (an integer if /limit/ is an integer and a float if\nit is a float) between 0 and /limit/ - 1 in an unbiased fashion.\n\n\n#+NAME: read-os-random-seed\n#+BEGIN_SRC lisp\n(read-os-random-seed source &optional prng) => reseed-count\n#+END_SRC\n\nRead an OS-provided random seed (from =/dev/urandom= or =/dev/random=\non Unix; ~CryptGenRandom~ on Windows) and reseed /prng/.\n\n/source/ may be ~:random~, which indicates =/dev/random= or\n~:urandom~, which indicates =/dev/urandom=. On Windows,\n~CryptGenRandom~ is always used.\n\n\n#+NAME: read-seed\n#+BEGIN_SRC lisp\n(read-seed path &optional prng) => t\n#+END_SRC\n\nRead enough bytes from /path/ to reseed /prng/, then generate\na pseudo-random seed and write it back to /path/. If /path/ doesn't\nexist, calls [[read-os-random-seed][read-os-random-seed]] to get a truly random seed from the\nOS. Note that reseeding does *not* reset the generator's state to the\nseed value; rather, it *combines* the generator's state with the seed\nto form a new state.\n\n\n#+NAME: write-seed\n#+BEGIN_SRC lisp\n(write-seed path &optional prng) => t\n#+END_SRC\n\nGenerate enough random data to reseed /prng/, then write it to /path/.\n\n** Example\n\n#+BEGIN_EXAMPLE\n(crypto:random-data 16)\n=> #(61 145 133 130 220 200 90 86 0 101 62 169 0 40 101 78)\n\n(crypto:strong-random 16)\n=> 3\n\n(crypto:random-bits 16)\n=> 41546\n#+END_EXAMPLE\n\n** Fortuna\n\nYou should only use the Fortuna PRNG if your OS does not provided\na sufficiently-good PRNG. If you use a Unix or Unix-like OS (e.g.\nLinux), macOS or Windows, it does. Only use the Fortuna PRNG if you\nknow for certain that you need it.\n\nFortuna is a cryptographically-secure random number presented by\nFerguson, Schneier and Kohno in /Cryptography Engineering/. It is\nbuilt around 32 entropy pools, which are used with decreasing\nfrequency for each reseed (e.g. pool 0 is used in each reseed, pool\n1 in every other reseed, pool 2 in every fourth reseed and so forth).\nPools are seeded with data from up to 256 sources.\n\nEach application should have one or more entropy sources (say, one for\neach OS random number source, one for the low bits of the current\ntime, one for the output of a particular command or group of commands\nand so forth). A source should be used to add randomness to each pool\nin order, so source 0 should top up pool 0, then pool 1, and so forth\nup to pool 31, then loop back to pool 1 again. Be very careful to\nspread entropy across all 32 pools.\n\nFortuna automatically feeds entropy from the pools back into its\nrandom state when [[random-data][random-data]] is called, using a method designed to\nmake it resistant to various avenues of attack; even in case of\ngenerator compromise it will return to a safe state within a bounded\ntime.\n\nFor purposes of reseeding, Fortuna will not reseed until the first\npool contains 128 bits of entropy; ~+min-pool-size+~ sets the number\nof bytes this is; it defaults to a very conservative 128, meaning that\nby default each byte of event is assumed to contain a single bit of\nrandomness.\n\nIt also will not reseed more than ten times per second.\n\n\n#+NAME: add-random-event\n#+BEGIN_SRC lisp\n(add-random-event source pool-id event &optional prng) => pool-length\n#+END_SRC\n\nAdd entropy to /prng/.\n\n/source/ is an integer in the range 0-255 specifiying the event's\napplication-defined source.\n\n/pool-id/ is an integer in the range 0-31 specifying the pool to top\nup.\n\n/event/ is up to 32 bytes of data (for longer events, hash them down\nor break them up into chunks).\n\n* Gray streams\n  :PROPERTIES:\n  :CUSTOM_ID: gray-streams\n  :END:\n\nIronclad includes support for several convenient stream abstractions\nbased on Gray streams. Gray streams support in Ironclad is included\nfor SBCL, CMUCL, OpenMCL/CCL, Lispworks, ABCL, ECL, Clisp and Allegro.\n\n** Octet streams\n\nOctet streams are very similar to Common Lisp's ~string-stream~ except\nthey deal in octets instead of characters.\n\n\n#+NAME: make-octet-input-stream\n#+BEGIN_SRC lisp\n(make-octet-input-stream buffer &optional start end) => octet-input-stream\n#+END_SRC\n\nAs ~make-string-input-stream~, only with octets instead of characters.\n\n\n#+NAME: make-octet-output-stream\n#+BEGIN_SRC lisp\n(make-octet-output-stream) => octet-output-stream\n#+END_SRC\n\nAs ~make-string-output-stream~, only with octets instead of characters.\n\n\n#+NAME: get-output-stream-octets\n#+BEGIN_SRC lisp\n(get-output-stream-octets stream) => octet-vector\n#+END_SRC\n\nAs ~get-output-stream-string~, only with an octet output-steam instead\nof a string output-stream.\n\n\n#+NAME: with-octet-input-stream\n#+BEGIN_SRC lisp\n(with-octet-input-stream ((var buffer &optional (start 0) end) &body body))\n#+END_SRC\n\nWithin /body/, /var/ is bound to an octet input stream. Reading from\n/var/ gives the bytes between the indexes /start/ and /end/ of\n/buffer/. The result of the last form of /body/ is returned.\n\n\n#+NAME: with-octet-output-stream\n#+BEGIN_SRC lisp\n(with-octet-output-stream ((var) &body body)) => bytes\n#+END_SRC\n\nWithin /body/, /var/ is bound to an octet output stream. After all the\nforms in /body/ have been executed, the data that has been written to\n/var/ (and that hasn't been consumed by a call to\n[[get-output-stream-octets][get-output-stream-octets]] within /body/) is returned.\n\n** Digest streams\n\nDigest streams compute a digest of the data written to them according\nto a specific digest algorithm.\n\nExample:\n#+BEGIN_EXAMPLE\n(defun frobbing-function (stream)\n  ;; We want to compute a digest of the data being written to STREAM\n  ;; without involving our callees in the process.\n  (let* ((digesting-stream (crypto:make-digesting-stream :sha1))\n         (stream (make-broadcast-stream stream digesting-stream)))\n    ;; Feed data to STREAM.\n    (frob-guts stream)\n    ;; Do something with the digest computed.\n    (... (crypto:produce-digest digesting-stream) ...)\n    ...))\n#+END_EXAMPLE\n\n\n#+NAME: make-digesting-stream\n#+BEGIN_SRC lisp\n(make-digesting-stream digest &rest args) => stream\n#+END_SRC\n\nMake a stream that computes a digest of the data written to it\naccording to the algorithm /digest/. The parameters that can be used\nby some algorithms can be specified as /args/.\n[[produce-digest][produce-digest]] may be used to obtain a digest of all the data written\nto the stream.\n\n_Note:_ Calling [[produce-digest][produce-digest]] on a digest stream does not alter\nthe internal state of the digest.\n\n\n#+NAME: with-digesting-stream\n#+BEGIN_SRC lisp\n(with-digesting-stream (var digest-name &rest args) &body body) => digest\n#+END_SRC\n\nWithin /body/, /var/ is bound to a digesting stream for the\n/digest-name/ algorithm. After all the forms in /body/ have been\nexecuted, the digest of the data that has been written to /var/ is\nreturned.\n\n** Cipher streams\n\nCipher streams encrypt or decrypt the data written to or read from\nthem according to a specific cipher algorithm.\n\n\n#+NAME: make-encrypting-stream\n#+BEGIN_SRC lisp\n(make-encrypting-stream stream cipher mode key &key initialization-vector direction) => stream\n#+END_SRC\n\nMake a stream wrapped around the binary stream /stream/ that encrypts\ndata according to the algorithm /cipher/ initialized with a /mode/,\na /key/ and an /initialization-vector/.\nIf /direction/ is ~:input~, the data read from the created input\nstream is the encryption of the data coming from /stream/.\nIf /direction/ is ~:output~, the data written to the created output\nstream is encrypted before being sent to /stream/.\n\n\n#+NAME: make-decrypting-stream\n#+BEGIN_SRC lisp\n(make-decrypting-stream stream cipher mode key &key initialization-vector direction) => stream\n#+END_SRC\n\nMake a stream wrapped around the binary stream /stream/ that decrypts\ndata according to the algorithm /cipher/ initialized with a /mode/,\na /key/ and an /initialization-vector/.\nIf /direction/ is ~:input~, the data read from the created input\nstream is the decryption of the data coming from /stream/.\nIf /direction/ is ~:output~, the data written to the created output\nstream is decrypted before being sent to /stream/.\n\n\n_Note:_ Only stream ciphers and block ciphers in CTR, CFB, CFB8 or OFB mode are\nsupported by [[make-encrypting-stream][make-encrypting-stream]] and [[make-decrypting-stream][make-decrypting-stream]].\n\n\n#+NAME: with-encrypting-stream\n#+BEGIN_SRC lisp\n(with-encrypting-stream ((var stream cipher mode key &key initialization-vector direction) &body body))\n#+END_SRC\n\nWithin /body/, /var/ is bound to an encrypting stream. The result of\nthe last form of /body/ is returned.\n\n\n#+NAME: with-decrypting-stream\n#+BEGIN_SRC lisp\n(with-decrypting-stream ((var stream cipher mode key &key initialization-vector direction) &body body))\n#+END_SRC\n\nWithin /body/, /var/ is bound to a decrypting stream. The result of\nthe last form of /body/ is returned.\n\n** MAC streams\n\nMAC streams compute a message authentication code of the data written\nto them according to a specific MAC algorithm.\n\n#+NAME: make-authenticating-stream\n#+BEGIN_SRC lisp\n(make-authenticating-stream mac key &rest args) => stream\n#+END_SRC\n\nMake a stream that computes a MAC of the data written to it according\nto the algorithm /mac/ initialized with a /key/. The parameters used\nto create the MAC can be specified as /args/.\n[[produce-mac][produce-mac]] may be used to obtain a MAC of all the data written to the\nstream.\n\n_Note:_ Calling [[produce-mac][produce-mac]] on a MAC stream does not alter the\ninternal state of the MAC.\n\n\nExample: encrypt some data and compute a MAC of the ciphertext\n#+BEGIN_EXAMPLE\n(let* ((data ...)\n       (output-stream ...)\n       (encryption-key ...)\n       (authentication-key ...)\n       (iv ...)\n       (mac-stream (make-authenticating-stream :hmac\n                                               authentication-key\n                                               :sha3))\n       (stream (make-broadcast-stream output-stream mac-stream))\n       (cipher-stream (make-encrypting-stream stream\n                                              :chacha\n                                              :stream\n                                              encryption-key\n                                              :initialization-vector iv)))\n  (write-sequence data cipher-stream)\n  ...\n  (let ((mac (produce-mac mac-stream)))\n    ...))\n#+END_EXAMPLE\n\n\n#+NAME: with-authenticating-stream\n#+BEGIN_SRC lisp\n(with-authenticating-stream (var mac-name key &rest args) &body body) => mac\n#+END_SRC\n\nWithin /body/, /var/ is bound to an authenticating stream for the\n/mac-name/ algorithm. After all the forms in /body/ have been\nexecuted, the message authentication code of the data that has been\nwritten to /var/ is returned.\n\n* Utility functions\n  :PROPERTIES:\n  :CUSTOM_ID: utility-functions\n  :END:\n\n#+NAME: ub-ref-le\n#+BEGIN_SRC lisp\n(ub16ref/le vector index) => value\n(ub32ref/le vector index) => value\n(ub64ref/le vector index) => value\n#+END_SRC\n\nThis family of functions accesses an unsigned 16-bit, 32-bit or 64-bit\nvalue stored in little-endian order starting at /index/ in /vector/.\n/vector/ must be a ~(simple-array (unsigned-byte 8) (*))~. These\nfunctions are SETFable.\n\n\n#+NAME: ub-ref-be\n#+BEGIN_SRC lisp\n(ub16ref/be vector index) => value\n(ub32ref/be vector index) => value\n(ub64ref/be vector index) => value\n#+END_SRC\n\nAs the above, only the value is stored in big-endian order.\n\n\n#+NAME: array-hex-string\n#+BEGIN_SRC lisp\n(byte-array-to-hex-string vector &key start end element-type) => string\n(hex-string-to-byte-array string &key start end) => string\n(ascii-string-to-byte-array string &key start end) => vector\n#+END_SRC\n\n[[array-hex-string][byte-array-to-hex-string]] converts the bytes of /vector/ between\n/start/ and /end/ into a hexadecimal string. It is useful for\nconverting digests to a more readable form. /element-type/ indicates\nthe element-type of the returned string.\n\n[[array-hex-string][hex-string-to-byte-array]] parses a substring of /string/ delimited\n/start/ and /end/ of hexadecimal digits into a byte array.\n\n[[array-hex-string][ascii-string-to-byte-array]] is provided as a quick and dirty way to\nconvert a string to a byte array suitable for feeding to [[update-digest][update-digest]]\nor [[encrypt][encrypt]]. Care should be taken to ensure that the provided string is\nactually an ASCII string. /start/ and /end/ have their usual\ninterpretations.\n\n\n#+NAME: octets-integer\n#+BEGIN_SRC lisp\n(octets-to-integer octet-vec &key start end big-endian n-bits) => number\n(integer-to-octets bignum &key n-bits big-endian) => vector\n#+END_SRC\n\n[[octets-integer][octets-to-integer]] converts the bytes of /octet-vec/ between /start/\nand /end/ to an integer as though the bytes denoted a number in\nbase 256. /big-endian/ is a boolean indicating whether the bytes are\nto be read in big-endian or little-endian order. /n-bits/ specifies\nhow many bits should be considered as significant in the resulting\nnumber.\n\n[[octets-integer][integer-to-octets]] is the reverse operation.\n\n\n#+NAME: expt-mod\n#+BEGIN_SRC lisp\n(expt-mod n exponent modulus) => number\n(expt-mod/unsafe n exponent modulus) => number\n#+END_SRC\n\nRaises /n/ to the /exponent/ power modulo /modulus/ in a more\nefficient fashion than ~(mod (expt n exponent) modulus)~.\n[[expt-mod][expt-mod]] is using the Montgomery ladder algorithm to be more robust\nagainst timing attacks.\n[[expt-mod][expt-mod/unsafe]] runs faster than [[expt-mod][expt-mod]] but is not safe against\ntiming attacks; don't use it on secret data.\n\n\n#+NAME: prime-p\n#+BEGIN_SRC lisp\n(prime-p n &optional prng) => boolean\n#+END_SRC\n\n[[prime-p][prime-p]] returns ~t~ if /n/ has a high probability of being a prime number, and\n~nil~ if it is a composite number. The probable primality is determined by\nfirst doing trial divisions with small primes, then running several\nMiller-Rabin tests with random bases, and finally doing a Lucas test. The\nnumber of Miller-Rabin tests can be configured using the\n~*number-of-miller-rabin-tests*~ variable. It is 64 by default, which makes the\nprobability of returning ~t~ for a composite number to be at most 1/2^128.\n\n\n#+NAME: make-random-salt\n#+BEGIN_SRC lisp\nmake-random-salt &optional size => bytes\n#+END_SRC\n\nGenerate a byte vector of /size/ (default 16) random bytes, suitable\nfor use as a password salt.\n\n\n#+NAME: constant-time-equal\n#+BEGIN_SRC lisp\nconstant-time-equal data1 data2 => boolean\n#+END_SRC\n\nCheck whether the contents of the byte arrays /data1/ and /data2/ are\nthe same. This function runs in constant time (for a given array\nlength) to prevent timing attacks. It can be used to compare passwords\nor MACs.\n\n* Conditions\n  :PROPERTIES:\n  :CUSTOM_ID: conditions\n  :END:\n\n#+NAME: ironclad-error\n#+BEGIN_SRC lisp\nironclad-error\n#+END_SRC\n\nAll errors signaled by Ironclad are of this type. This type is\na direct subtype of ~simple-error~ without any extra slots or options.\n\n\n#+NAME: initialization-vector-not-supplied\n#+BEGIN_SRC lisp\ninitialization-vector-not-supplied\n#+END_SRC\n\nThis error is signaled by [[make-cipher][make-cipher]] when an initialization vector is\nnot provided and the requested mode requires an initialization vector.\n\n\n#+NAME: invalid-initialization-vector\n#+BEGIN_SRC lisp\ninvalid-initialization-vector\n#+END_SRC\n\nThis error is signaled when an invalid initialization vector is\nsupplied to [[make-cipher][make-cipher]] (e.g. when the length of the initialization\nvector does not match the block length of the cipher).\n\n\n#+NAME: invalid-key-length\n#+BEGIN_SRC lisp\ninvalid-key-length\n#+END_SRC\n\nThis error is signaled when the key provided to [[make-cipher][make-cipher]] is not of\nan acceptable length for the requested cipher.\n\n\n#+NAME: unsupported-cipher\n#+BEGIN_SRC lisp\nunsupported-cipher\n#+END_SRC\n\nThis error is signaled when the /cipher-name/ provided to [[make-cipher][make-cipher]]\nis not [[cipher-supported-p][cipher-supported-p]].\n\n\n#+NAME: unsupported-mode\n#+BEGIN_SRC lisp\nunsupported-mode\n#+END_SRC\n\nThis error is signaled when the /mode/ provided to\n[[make-cipher][make-cipher]] is not /mode-supported-p/.\n\n\n#+NAME: unsupported-padding\n#+BEGIN_SRC lisp\nunsupported-padding\n#+END_SRC\n\nThis error is signaled when the /padding/ provided to [[make-cipher][make-cipher]] is not\nsupported.\n\n\n#+NAME: unsupported-digest\n#+BEGIN_SRC lisp\nunsupported-digest\n#+END_SRC\n\nThis error is signaled when the /digest-name/ provided to\n[[make-digest][make-digest]] is not [[digest-supported-p][digest-supported-p]].\n\n\n#+NAME: unsupported-mac\n#+BEGIN_SRC lisp\nunsupported-mac\n#+END_SRC\n\nThis error is signaled when the /mac-name/ provided to\n[[make-mac][make-mac]] is not [[mac-supported-p][mac-supported-p]].\n\n\n#+NAME: insufficient-buffer-space\n#+BEGIN_SRC lisp\ninsufficient-buffer-space\n#+END_SRC\n\nThis error is signaled when Ironclad needs to stuff some data into\na buffer (e.g. when the user provides /digest/ to [[produce-digest][produce-digest]] and\nthere is insufficient space).\n\n\n#+NAME: key-not-supplied\n#+BEGIN_SRC lisp\nkey-not-supplied\n#+END_SRC\n\nThis error is signaled when a /:key/ argument is not provided\nto [[make-cipher][make-cipher]].\n\n\n#+NAME: unsupported-kdf\n#+BEGIN_SRC lisp\nunsupported-kdf\n#+END_SRC\n\nThis error is signaled when an invalid KDF name is provided\nto [[make-kdf][make-kdf]].\n\n\n#+NAME: unsupported-scrypt-cost-factors\n#+BEGIN_SRC lisp\nunsupported-scrypt-cost-factors\n#+END_SRC\n\nThis error is signaled when invalid Scrypt cost factors are provided\nto [[make-kdf][make-kdf]].\n\n\n#+NAME: unsupported-argon2-cost-factors\n#+BEGIN_SRC lisp\nunsupported-argon2-cost-factors\n#+END_SRC\n\nThis error is signaled when invalid Argon2 parameters are provided\nto [[make-kdf][make-kdf]].\n\n\n#+NAME: invalid-padding\n#+BEGIN_SRC lisp\ninvalid-padding\n#+END_SRC\n\nThis error is signaled when padding in a block is determined to be\ninvalid.\n\n\n#+NAME: invalid-mac-parameter\n#+BEGIN_SRC lisp\ninvalid-mac-parameter\n#+END_SRC\n\nThis error is signaled when an invalid parameter is provided\nto [[make-mac][make-mac]].\n\n\n#+NAME: invalid-signature-length\n#+BEGIN_SRC lisp\ninvalid-signature-length\n#+END_SRC\n\nThis error is signaled when a signature with an invalid length is provided\nto [[verify-signature][verify-signature]] or [[destructure-signature][destructure-signature]].\n\n\n#+NAME: invalid-message-length\n#+BEGIN_SRC lisp\ninvalid-message-length\n#+END_SRC\n\nThis error is signaled when a message with an invalid length is provided\nto [[encrypt-message][encrypt-message]], [[decrypt-message][decrypt-message]] or [[destructure-message][destructure-message]].\n\n\n#+NAME: missing-key-parameter\n#+BEGIN_SRC lisp\nmissing-key-parameter\n#+END_SRC\n\nThis error is signaled when it is determined that a parameter is\nmissing in a call to [[make-public-key][make-public-key]] or [[make-private-key][make-private-key]].\n\n\n#+NAME: missing-message-parameter\n#+BEGIN_SRC lisp\nmissing-message-parameter\n#+END_SRC\n\nThis error is signaled when it is determined that a parameter is\nmissing in a call to [[make-message][make-message]].\n\n\n#+NAME: missing-signature-parameter\n#+BEGIN_SRC lisp\nmissing-signature-parameter\n#+END_SRC\n\nThis error is signaled when it is determined that a parameter is\nmissing in a call to [[make-signature][make-signature]].\n\n\n#+NAME: incompatible-keys\n#+BEGIN_SRC lisp\nincompatible-keys\n#+END_SRC\n\nThis error is signaled when incompatible keys are provided to\n[[diffie-hellman][diffie-hellman]].\n\n\n#+NAME: invalid-curve-point\n#+BEGIN_SRC lisp\ninvalid-curve-point\n#+END_SRC\n\nThis error is signaled when trying to use an invalid curve point.\n\n\n#+NAME: invalid-public-key-length\n#+BEGIN_SRC lisp\ninvalid-public-key-length\n#+END_SRC\n\nThis error is signaled when a public key with an invalid length is\nprovided to [[verify-signature][verify-signature]].\n\n\n#+NAME: oaep-decoding-error\n#+BEGIN_SRC lisp\noaep-decoding-error\n#+END_SRC\n\nThis error is signaled when the OAEP decoding of a message fails.\n\n\n#+NAME: unsupported-authenticated-encryption-mode\n#+BEGIN_SRC lisp\nunsupported-authenticated-encryption-mode\n#+END_SRC\n\nThis error is signaled when an invalid mode name is provided to\n[[make-authenticated-encryption-mode][make-authenticated-encryption-mode]].\n\n\n#+NAME: bad-authentication-tag\n#+BEGIN_SRC lisp\nbad-authentication-tag\n#+END_SRC\n\nThis error is signaled when the verification of authenticity of a message fails.\n\n* Subsystems (experimental)\n  :PROPERTIES:\n  :CUSTOM_ID: subsystems\n  :END:\n\nInstead of loading the complete Ironclad system, you can load only the\nsubsystems of the algorithms you need.\n\nFor example if you need only AES and SHA256:\n#+BEGIN_EXAMPLE\n(asdf:load-system \"ironclad/cipher/aes\")\n(asdf:load-system \"ironclad/digest/sha256\")\n#+END_EXAMPLE\n\n** Available subsystems\n\n- ironclad\n  - ironclad/core\n  - ironclad/ciphers\n    - ironclad/cipher/aes\n    - ironclad/cipher/arcfour\n    - ironclad/cipher/aria\n    - ironclad/cipher/blowfish\n    - ironclad/cipher/camellia\n    - ironclad/cipher/cast5\n    - ironclad/cipher/chacha\n    - ironclad/cipher/des\n    - ironclad/cipher/idea\n    - ironclad/cipher/kalyna\n    - ironclad/cipher/keystream\n    - ironclad/cipher/kuznyechik\n    - ironclad/cipher/misty1\n    - ironclad/cipher/rc2\n    - ironclad/cipher/rc5\n    - ironclad/cipher/rc6\n    - ironclad/cipher/salsa20\n    - ironclad/cipher/seed\n    - ironclad/cipher/serpent\n    - ironclad/cipher/sm4\n    - ironclad/cipher/sosemanuk\n    - ironclad/cipher/square\n    - ironclad/cipher/tea\n    - ironclad/cipher/threefish\n    - ironclad/cipher/twofish\n    - ironclad/cipher/xchacha\n    - ironclad/cipher/xor\n    - ironclad/cipher/xsalsa20\n    - ironclad/cipher/xtea\n  - ironclad/digests\n    - ironclad/digest/adler32\n    - ironclad/digest/blake2\n    - ironclad/digest/blake2s\n    - ironclad/digest/crc24\n    - ironclad/digest/crc32\n    - ironclad/digest/groestl\n    - ironclad/digest/jh\n    - ironclad/digest/kupyna\n    - ironclad/digest/md2\n    - ironclad/digest/md4\n    - ironclad/digest/md5\n    - ironclad/digest/ripemd-128\n    - ironclad/digest/ripemd-160\n    - ironclad/digest/sha1\n    - ironclad/digest/sha256\n    - ironclad/digest/sha3\n    - ironclad/digest/sha512\n    - ironclad/digest/skein\n    - ironclad/digest/sm3\n    - ironclad/digest/streebog\n    - ironclad/digest/toger\n    - ironclad/digest/tree-hash\n    - ironclad/digest/whirlpool\n  - ironclad/macs\n    - ironclad/mac/blake2-mac\n    - ironclad/mac/blake2s-mac\n    - ironclad/mac/cmac\n    - ironclad/mac/gmac\n    - ironclad/mac/hmac\n    - ironclad/mac/poly1305\n    - ironclad/mac/siphash\n    - ironclad/mac/skein-mac\n  - ironclad/prngs\n    - ironclad/prng/fortuna\n  - ironclad/aeads\n    - ironclad/aead/eax\n    - ironclad/aead/etm\n    - ironclad/aead/gcm\n  - ironclad/kdfs\n    - ironclad/kdf/argon2\n    - ironclad/kdf/bcrypt\n    - ironclad/kdf/hmac\n    - ironclad/kdf/password-hash\n    - ironclad/kdf/pkcs5\n    - ironclad/kdf/scrypt\n  - ironclad/public-keys\n    - ironclad/public-key/curve25519\n    - ironclad/public-key/curve448\n    - ironclad/public-key/dsa\n    - ironclad/public-key/ed25519\n    - ironclad/public-key/ed448\n    - ironclad/public-key/elgamal\n    - ironclad/public-key/rsa\n    - ironclad/public-key/secp256k1\n    - ironclad/public-key/secp256r1\n    - ironclad/public-key/secp384r1\n    - ironclad/public-key/secp521r1\n"
 },
 {
  "repo": "clovers-network/clovers-dapp",
  "language": "Vue",
  "readme_contents": "\n[![Netlify Status](https://api.netlify.com/api/v1/badges/aa024be6-94d0-4cba-bfd3-4f3997191972/deploy-status)](https://app.netlify.com/sites/clovers/deploys) [![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](code-of-conduct.md)\n\n# Clovers Network\n\n## Contributor guidelines\n### What do I need to know to help?\nIf you are looking to help to with a code contribution it's good to know that our front-end uses [vue.js](https://vuejs.org/), a javascript framework similar to react. We use [vuex](https://vuex.vuejs.org/) for state management (similar to react's redux) as well as [BassCSS](https://basscss.com) for styling. On the backend in the [api repository](https://github.com/clovers-network/clovers-api) we use [Express](https://expressjs.com/) and [rethinkdb](http://rethinkdb.com). Our blockchain component utilizes [Ethereum](https://ethereum.org) and is located in the [repository here](https://github.com/clovers-network/clovers-contracts). We use [truffle](http://truffleframework.com) for organizing, testing and deploying our Ethereum smart contracts written in [Solidity](https://solidity.readthedocs.io/en/v0.5.11/) with help from [web3.js](https://github.com/ethereum/web3.js) and [ethers.js](https://github.com/ethers-io/ethers.js/). If you don't feel ready to make a code contribution yet, no problem! You can also check out the documentation issues [here](https://github.com/clovers-network/clovers-dapp/labels/docs) or the design issues that we have [here](https://github.com/clovers-network/clovers-dapp/labels/design).\n\n*If you are looking for __Good First Issues__ check [here](https://github.com/clovers-network/clovers-dapp/labels/Good%20First%20Issue) \ud83d\udc40*\n\nIf you are interested in making a code contribution and would like to learn more about the technologies that we use, check out the list of tutorials below.\n\n* [Learn X in Y Minutes - Solidity](https://learnxinyminutes.com/docs/solidity/)\n* [The Majesty of Vue2](https://leanpub.com/vuejs2)\n* [Flexible & Upgradeable NFTs](https://kauri.io/collection/5d11f9f8a6afcc0001f621de/flexible-upgradeable-and-highly-available-nfts)\n\n### How do I make a contribution?\nNever made an open source contribution before? Wondering how contributions work in the in our project? Here's a quick rundown!\n\n1. Find an issue that you are interested in addressing or a feature that you would like to add.\n2. Fork the repository associated with the issue to your local GitHub organization. This means that you will have a copy of the repository under your-GitHub-username/repository-name.\n3. Clone the repository to your local machine using `git clone https://github.com/clovers-network/clovers-dapp.git`.\n4. Create a new branch for your fix using `git checkout -b branch-name-here`.\n5. Make the appropriate changes for the issue you are trying to address or the feature that you want to add.\n6. Use `git add insert-paths-of-changed-files-here` to add the file contents of the changed files to the \"snapshot\" git uses to manage the state of the project, also known as the index.\n7. Use `git commit -m \"Insert a short message of the changes made here\"` to store the contents of the index with a descriptive message.\n8. Push the changes to the remote repository using `git push origin branch-name-here`.\n9. Submit a pull request to the upstream repository.\n10. Title the pull request with a short description of the changes made and the issue or bug number associated with your change. For example, you can title an issue like so \"Added more log outputting to resolve #4352\".\n11. In the description of the pull request, explain the changes that you made, any issues you think exist with the pull request you made, and any questions you have for the maintainer. It's OK if your pull request is not perfect (no pull request is), the reviewer will be able to help you fix any problems and improve it!\n12. Wait for the pull request to be reviewed by a maintainer.\n13. Make changes to the pull request if the reviewing maintainer recommends them.\n14. Celebrate your success after your pull request is merged! \ud83c\udf89\n\n### Where can I go for help?\nIf you need help, you can ask questions on our [Telegram](https://t.me/cloversnetwork), our [Discord](https://discord.gg/tQkPbat) or our [Forum](https://forum.clovers.network).\n\n### What does the Code of Conduct mean for me?\nOur [Code of Conduct](https://github.com/clovers-network/clovers-dapp/blob/master/CODE_OF_CONDUCT.md) means that you are responsible for treating everyone on the project with respect and courtesy regardless of their identity. If you are the victim of any inappropriate behavior or comments as described in our Code of Conduct, we are here for you and will do the best to ensure that the abuser is reprimanded appropriately, per our code.\n\n---\n\nMaintained by [Bin Studio](https://bin.am)\n * [Alan Woo](https://github.com/alancwoo/)\n * [Billy Rennekamp](https://github.com/okwme/)\n * [Everett Williams](https://github.com/evvvritt)\n * [Nics Kort](https://github.com/n-kort/) \n \n---\n\n[White Paper (Work In Progress)](https://docs.google.com/document/d/1If-yoN-4cbIT0X_PSEfxVYqlZ7kgFRQapx8AR79mhME/edit?usp=sharing)\n"
 },
 {
  "repo": "Gozala/crypto",
  "language": "JavaScript",
  "readme_contents": "# crypto #\n\nJavaScript implementations of standard and secure cryptographic algorithms.\n\n## Install ##\n\n    npm install crypto\n\n"
 },
 {
  "repo": "BetterCrypto/Applied-Crypto-Hardening",
  "language": "TeX",
  "readme_contents": "# WARNING: This document has some outdated content and should be used with care.\n## There may be a new version of this document in the future. However at the moment the recommendations in this document do not in all cases reflect up to date crypto configuration examples and do include some recommendations that can weaken security.\n\nFirst off: you are welcome to help us! Every reviewer, committer and person interested in discussing our document and changes is a valuable addition to the project. Everybody is invited to work on this document and share their experience and expertise with us or ask questions if something isn't clear to them. Please read [CONTRIBUTING](CONTRIBUTING.md) document for more information.\n\n# HOW TO USE THIS\n\n## git.bettercrypto.org\nAnonymous (read-only) git cloning:\n\n`  $ git clone  https://git.bettercrypto.org/ach-master.git`\n\n\nAs a registered user:\n\n  `$ git clone  https://<myuser>@git.bettercrypto.org/ach-master.git`\n\nWhere `<myuser>` is your username on the server. Ask for write permissions if you need them.\n\n\nCommitting changes you made (from within repo-directory):\n\n\n```\n$ git commit -a\n$ git push origin master\n```\n\n\nReceive latest updates for a previously cloned repository (from within repo-directory):\n\n  `$ git pull`\n\n## GitHub\nFork and issue pull requests. Those will be reviewed and if accepted pushed to the main repository hosted on git.bettercrypto.org.\n\n## MacTeX\nMacTeX misses `mweights.sty` and may cause a compile error.\n\n```bash\nsudo tlmgr install mweights\n```\n\n## IRC\nchannel: #bettercrypto\nnetwork: freenode\n\n# IMPORTANT\n\n * If you reviewed the document and/or made some changes, please add your name to `src/acknowledgements.tex` (the list of names is sorted alphabetically by last name).\n * Send many smaller commits (pull requests) and not one big one! Big ones tend to be delayed. It's hard to process a huge commit. We need to review everything, please remember.\n * Please also read the [FAQ](FAQ.md)!!\n"
 },
 {
  "repo": "ashchan/bitcoin-ethereum-cryptography",
  "language": null,
  "readme_contents": "# \u6bd4\u7279\u5e01\u3001\u4ee5\u592a\u574a\u52a0\u5bc6\u6280\u672f\n\n2017\u5e745\u670821\u65e5\u5728\u4e1c\u4eac[\u4ebf\u5496\u5561](http://ecafe.tokyo)\u505a\u7684\u4e00\u4e2a\u5173\u4e8e\u6bd4\u7279\u5e01\u3001\u4ee5\u592a\u574a\u533a\u5757\u94fe\u52a0\u5bc6\u6280\u672f\u7684\u5206\u4eab\u3002\n\n\u4e3b\u8981\u9762\u5411\u5f00\u53d1\u4eba\u5458\uff0c\u4e0d\u8fc7\u4e5f\u5305\u542b\u4e00\u4e9b\u94b1\u5305\u683c\u5f0f\u3001\u79c1\u94a5\u4fdd\u62a4\u7b49\u65b9\u9762\u7684\u5185\u5bb9\u3002\n\n## Slide \u5de5\u5177\n\n\u6f14\u8bb2\u6750\u6599\u4f7f\u7528 Markdown \u683c\u5f0f\u7f16\u5199\uff0c\u7528 Deckset \u64ad\u653e\u3002\u5df2\u5bfc\u51fa\u7684 [PDF \u683c\u5f0f\u6587\u4ef6](https://github.com/ashchan/bitcoin-ethereum-cryptography/blob/master/Bitcoin%20Ethereum%20Cryptography.pdf)\u5728\u540c\u4e00\u76ee\u5f55\u4e0b\u3002\n\n\n[The MIT License](https://jameschen.mit-license.org/license.html)\n\nCopyright (c) 2017 [James Chen](https://ashchan.com/) ([@ashchan](https://twitter.com/ashchan))\n"
 },
 {
  "repo": "tfhe/tfhe",
  "language": "C++",
  "readme_contents": "# TFHE\nFast Fully Homomorphic Encryption Library over the Torus\n\nThis library is the original version of TFHE that implements the base arithmetic and functionalities (bootstrapped and leveled).\nIf you need an enhanced API with some additional and more recent features of TFHE, or numpy integration, you can consult the [<span>Concrete library</span>](https://github.com/zama-ai/concrete).\n\n**version 1.1** -- *Updated security parameters release date: 2020.02.21*\n\n**version 1.0** -- *first release date: 2017.05.02*\n\n**version 1.0-rc1** -- *first pre-release date: 2017.04.05*\n\n**version 0.1** -- *Proof of concept release date: 2016.08.18*\n\nTFHE is open-source software distributed under the terms of the Apache 2.0 license. \nThe scheme is described in the paper \"Faster fully homomorphic encryption: Bootstrapping in less than 0.1 seconds\" presented at the IACR conference Asiacrypt 2016 by Ilaria Chillotti, Nicolas Gama, Mariya Georgieva, Malika Izabach\u00e8ne.\n\n\n### Description \n\nThe TFHE library implements a very fast gate-by-gate bootstrapping, based on [CGGI16]. Namely, any binary \ngate is evaluated homomorphically in about 13 milliseconds on a single\ncore which improves [DM15] by a factor 50, and the mux gate takes about 26 CPU-ms (or 13ms on 2 cores). \n\nThe library implements a Ring-variant of the GSW [GSW13]\ncryptosystem and makes many optimizations described in [DM15] and [CGGI16]. \n\nIt also implements a dedicated Fast Fourier\nTransformation for the anticyclic ring R[X]/(X^N+1), and uses AVX, AVX2 and FMA assembly vectorization instructions. \nThe default parameter set achieves at least 110-bit of cryptographic security, based on ideal lattice assumptions.\n\nFrom the user point of view, the library can evaluate a net-list of binary gates homomorphically at a rate of about 50 gates per second per core, without decrypting its input. It suffices to provide the sequence of gates, as well as ciphertexts of the input bits. And the\nlibrary computes ciphertexts of the output bits.\n\nUnlike other libraries, TFHE has no restriction on the number of gates or on their composition. This makes the library usable with either\nmanually crafted circuits, or with the output of automated circuit generation tools. For TFHE, optimal circuits have the smallest possible number of gates, \nand to a lesser extent, the possibility to evaluate them in parallel. \n\n\n\n### Dependencies \n\n\nThe library interface can be used in a regular C code. However, to compile the core of the library you will need a standard C++11 compiler.\nCurrently, the project has been tested with the g++ >= 5.2 compiler and clang >=3.8 under Linux, as well as clang under MacOS. In the future, we plan to extend the compatibility to other compilers, platforms and operating systems.\n\nAt least one FFT processor is needed to run the project:\n\n* The default processor comes from Project Nayuki, who proposes two implementations of the fast Fourier transform - one in portable C, and the other using the AVX assembly instructions.\nThis component is licensed under the MIT license, and we added the code of the reverse FFT (both in C and in assembly). Original source: https://www.nayuki.io/page/fast-fourier-transform-in-x86-assembly\n* we provide another processor, named the spqlios processor, which is written in AVX and FMA assembly in the style of the nayuki processor, and which is dedicated to the ring R[X]/(X^N+1) for N a power of 2.\n* We also provide a connector for the FFTW3 library: http://www.fftw.org. With this library, the performance of the FFT is between 2 and 3 times faster than the default Nayuki implementation. However, you should keep in mind that the library FFTW is published under the GPL License. If you choose to use this library in a final product, this product may have to be released under GPL License as well (other commercial licenses are available on their web site)\n* We plan to add other connectors in the future (for instance the Intel\u2019s IPP Fourier Transform, which should be 1.5\u00d7 faster than FFTW for 1D real data)\n\n\n### Installation\n\nTo build the library with the default options, run ```make``` and ```make install``` from the top level directory of the TFHE project. This assumes that the standard tool cmake is already installed on the system, and an\nup-to-date c++ compiler (i.e. g++ >=5.2 or clang >= 3.8) as well.\nIt will compile the shared library in optimized mode, and install it to the ```/usr/local/lib``` folder.\n\nIf you want to choose additional compile options (i.e. other installation folder, debug mode, tests, fftw), you need to run cmake manually and pass the desired options:\n```\nmkdir build\ncd build\ncmake ../src -DENABLE_TESTS=on -DENABLE_FFTW=on -DCMAKE_BUILD_TYPE=debug\nmake\n```\nThe available options are the following:\n\n| Variable Name          | values           | \n|------------------------|-------|\n| CMAKE_INSTALL_PREFIX   | */usr/local* installation folder (libs go in lib/ and headers in include/) | \n| CMAKE_BUILD_TYPE       | <ul><li>*optim* enables compiler's optimization flags, including native architecture specific optimizations</li><li>*debug* disables any optimization and include all debugging info (-g3 -O0)</li> | \n| ENABLE_TESTS           | *on/off* compiles the library's unit tests and sample applications in the test/ folder. To enable this target, you first need to download google test sources: ```git submodule init; git submodule update``` (then, use ```ctest``` to run all unittests) | \n| ENABLE_FFTW            | *on/off* compiles libtfhe-fftw.a, using FFTW3 (GPL licence) for fast FFT computations |\n| ENABLE_NAYUKI_PORTABLE | *on/off* compiles libtfhe-nayuki-portable.a, using the fast C version of nayuki for FFT computations |\n| ENABLE_NAYUKI_AVX      | *on/off* compiles libtfhe-nayuki-avx.a, using the avx assembly version of nayuki for FFT computations |\n| ENABLE_SPQLIOS_AVX     | *on/off* compiles libtfhe-spqlios-avx.a, using tfhe's dedicated avx assembly version for FFT computations |\n| ENABLE_SPQLIOS_FMA     | *on/off* compiles libtfhe-spqlios-fma.a, using tfhe's dedicated fma assembly version for FFT computations |\n\n\n\n\n### Security estimates and parameter choices.\n\nThe current parameters implemented in the TFHE library have been updated from the ones proposend in the original TFHE paper [CGGI16], \naccording to the new estimates done in the JoC paper [CGGI19], and new attack models integrated in [<span>LWE estimator</span>](https://bitbucket.org/malb/lwe-estimator/src/master/){:target=\"_blank\"}. \nThe implementation uses two sets of keys on two different noise levels, both required to execute the gate bootstrapping. \n\n|                                 | ciphertext dimension `n`\t  | noise rate (stdev) `sd`      | security bits $\\lambda$ |\n| ------------------------------- | ------- | --------- | -------------- |\n| Key-Switching key (LWE)         | 630     | $2^{-15}$ | 128 bits     |\n| Bootstrapping key (Ring-LWE)    | 1024    | $2^{-25}$ | 130 bits\t |\n| **Overall security**            |         |           | 128 bits       |\n\nWith these parameters, the gate bootstrapping runs in about `10-20 ms`, depending on the machine: as instance, one bootstrapped binary gate takes about `13 ms` on a Intel i9-9900k CPU and about `17 ms` on an average i7 Xeon processor (single core).\n\nOur security estimates are made by using the [<span>LWE estimator</span>](https://bitbucket.org/malb/lwe-estimator/src/master/){:target=\"_blank\"}. \nThe estimates can change according to the new attacks proposed in the litterature and the updates of the estimator itself.\nIf you want to use safe parameters on the library in production, please double check the estimates and update your code with the new parameters.\n\nThe code to use in the LWE estimator to estimate hardness for the standard deviation `sd` ($2^{-25}$ in the example) and dimension `n` \n(1024 in the example) is provided below. We recommend to target at least 128-bits of security. \nIn our implementation, we use 32 bits integers (`q=2**32`) and binary keys. \nFor the choice of all the other TFHE parameters, please refer to the noise formulas in [CGGI19].\n\n\n_Note:_ we estimate the parameters by using some of the models listed in the [<span>Estimate all the LWE and NTRU schemes</span>](https://estimate-all-the-lwe-ntru-schemes.github.io/docs/){:target=\"_blank\"}.\nIn particular, we consider the classical cost of BKZ-beta on a lattice of dimension `d` to be `2^(0.292*beta + 16.4 + log(8*d,2))`.\nTo obtain more conservative parameters, we suggest using the core-SVP methodology using classical cost `2^(0.292*beta)` and quantum cost `2^(0.265*beta)`.\n\n\n\n#### ESTIMATOR CODE\n\n```python\n# To reproduce the estimate run this snippet on http://aleph.sagemath.org/\nfrom sage.all import load, sqrt, RR, ZZ, pi, oo\nload('https://bitbucket.org/malb/lwe-estimator/raw/HEAD/estimator.py')\n\nn = 1024                 # ciphertext dimension (also, key entropy)\nsd = 2**(-25)            # noise standard deviation\nalpha = sqrt(2*pi)*sd    # estimator defines noise rate = sqrt(2pi).stdev\nq = 2**32                # for compatibility only\nm = oo                   # the attacker can use as many samples he wishes \nsecret_distribution = (0,1)\nsuccess_probability = 0.99\n\n\n# Chosen cost model \n# BKZ cost models: CLASSICAL - 0.292*beta + 16.4 + log(8*d,2) - primal\n# i.e. BKZ.sieve =  lambda beta, d, B: ZZ(2)**RR(0.292*beta + 16.4 + log(8*d,2))\nprint(\"CLASSICAL PRIMAL\")\nprint(primal_usvp(n, alpha, q, secret_distribution=secret_distribution, m=m, success_probability=success_probability, reduction_cost_model=BKZ.sieve))\n# BKZ cost models: CLASSICAL - 0.292*beta + 16.4 + log(8*d,2) - dual\n# i.e. BKZ.sieve =  lambda beta, d, B: ZZ(2)**RR(0.292*beta + 16.4 + log(8*d,2))\nprint(\"CLASSICAL DUAL\")\nprint(dual_scale(n, alpha, q, secret_distribution=secret_distribution, m=m, success_probability=success_probability, reduction_cost_model=BKZ.sieve))\n\n\n# For more conservative parameters, both classical and quantum  \n# BKZ cost models: CLASSICAL - 0.292 beta - primal\nreduction_cost_model =  lambda beta, d, B: ZZ(2)**RR(0.292*beta)\nprint(\"CLASSICAL PRIMAL (conservative)\")\nprint(primal_usvp(n, alpha, q, secret_distribution=secret_distribution, m=m, success_probability=success_probability, reduction_cost_model=reduction_cost_model))\n# BKZ cost models: CLASSICAL - 0.292 beta - dual\nprint(\"CLASSICAL DUAL (conservative)\")\nprint(dual_scale(n, alpha, q, secret_distribution=secret_distribution, m=m, success_probability=success_probability, reduction_cost_model=reduction_cost_model))\n# BKZ cost models: QUANTUM - 0.265 beta - primal\nreduction_cost_model =  lambda beta, d, B: ZZ(2)**RR(0.265*beta)\nprint(\"QUANTUM PRIMAL (conservative)\")\nprint(primal_usvp(n, alpha, q, secret_distribution=secret_distribution, m=m, success_probability=success_probability, reduction_cost_model=reduction_cost_model))\n# BKZ cost models: QUANTUM - 0.265 beta - dual\nprint(\"QUANTUM DUAL (conservative)\")\nprint(dual_scale(n, alpha, q, secret_distribution=secret_distribution, m=m, success_probability=success_probability, reduction_cost_model=reduction_cost_model))\n```\n\n_We would like to thank [<span>Fernando Virdia</span>](https://fundamental.domains/){:target=\"_blank\"} for the help in the estimation of the security parameters._\n\n\n\n\n\n\n\n\n### References\n\n[CGGI19]: I. Chillotti, N. Gama, M. Georgieva, and M. Izabach\u00e8ne. TFHE: Fast Fully Homomorphic Encryptionover the Torus. In Journal of Cryptology, volume 33, pages 34\u201391 (2020). [<span>PDF</span>](https://eprint.iacr.org/2018/421.pdf){:target=\"_blank\"} \n\n[CGGI16]: I. Chillotti, N. Gama, M. Georgieva, and M. Izabach\u00e8ne. Faster fully homomorphic encryption: Bootstrapping in less than 0.1 seconds. In Asiacrypt 2016 (Best Paper), pages 3-33.  [<span>PDF</span>](https://eprint.iacr.org/2016/870.pdf){:target=\"_blank\"} [<span>Slides</span>](){:target=\"_blank\"}\n\n[DM15]:   L. Ducas and D. Micciancio.  FHEW: Bootstrapping homomorphic encryption in less than a second.  In Eurocrypt 2015, pages 617-640. [<span>PDF</span>](https://eprint.iacr.org/2014/816.pdf){:target=\"_blank\"}\n\n[GSW13]:  C. Gentry, A. Sahai, and B. Waters. Homomorphic encryption from learning with errors:  Conceptually-simpler,  asymptotically-faster,  attribute-based. In Crypto 2013, pages 75-92. [<span>PDF</span>](https://eprint.iacr.org/2013/340.pdf){:target=\"_blank\"}\n\n\n### Future releases based on\n\n[CGGI17]: I. Chillotti, N. Gama, M. Georgieva, and M. Izabach\u00e8ne. Faster Packed Homomorphic Operations and Efficient Circuit Bootstrapping for TFHE. ASIACRYPT (1) 2017: 377-408. [<span>PDF</span>](https://eprint.iacr.org/2017/430.pdf){:target=\"_blank\"} [<span>Slides</span>](){:target=\"_blank\"} \n\n[CGGI18]: I. Chillotti, N. Gama, M. Georgieva, and M. Izabach\u00e8ne. TFHE: Fast Fully Homomorphic Encryption over the Torus. IACR Cryptology ePrint Archive 2018: 421 (2018) (Invited JoC). [<span>PDF</span>](https://eprint.iacr.org/2018/421.pdf){:target=\"_blank\"} [<span>Slides</span>](){:target=\"_blank\"} \n\n[BGG18]: C. Boura, N. Gama, M. Georgieva: Chimera: a unified framework for B/FV, TFHE and HEAAN fully homomorphic encryption and predictions for deep learning. IACR Cryptology ePrint Archive 2018: 758 (2018). [<span>PDF</span>](https://eprint.iacr.org/2018/758.pdf){:target=\"_blank\"}\n[<span>Slides</span>](){:target=\"_blank\"} \n\n[CIM19]: S. Carpov, M. Izabach\u00e8ne, V. Mollimard: New Techniques for Multi-value Input Homomorphic Evaluation and Applications. CT-RSA 2019: 106-126. [<span>PDF</span>](https://eprint.iacr.org/2018/622.pdf){:target=\"_blank\"} \n\n\n### Applications and open source projects based on TFHE: \n\n[Google FHE]: Fully Homomorphic Encryption (FHE) [<span>github</span>](https://github.com/google/fully-homomorphic-encryption)\n  \n[Concrete]: Concrete Operates oN Ciphertexts Rapidly by Extending TfhE. [<span>github</span>](https://github.com/zama-ai/concrete)\n\n[Cingulata]: Compilation toolchain and run-time environment targeting TFHE [<span>github</span>](https://github.com/CEA-LIST/Cingulata)\n\n[CGGT-P19]:\tS. Carpov, N. Gama, M. Georgieva, J.R. Troncoso-Pastoriza: Privacy-preserving semi-parallel logistic regression training with Fully Homomorphic Encryption.(among the winners Idash 2018)  IACR Cryptology ePrint Archive 2019: 101 (2019) [<span>PDF</span>](https://eprint.iacr.org/2019/101.pdf){:target=\"_blank\"} [<span>Slides</span>](){:target=\"_blank\"} \n\n[CCS19]: H. Chen, I. Chillotti, Y. Song: Multi-Key Homomophic Encryption from TFHE. IACR Cryptology ePrint Archive 2019: 116 (2019). [<span>PDF</span>](https://eprint.iacr.org/2019/116.pdf){:target=\"_blank\"}\n\n[BMMP18]: F. Bourse, M. Minelli, M. Minihold, P. Paillier: Fast Homomorphic Evaluation of Deep Discretized Neural Networks. \nCRYPTO (3) 2018: 483-512. [<span>PDF</span>](https://eprint.iacr.org/2017/1114.pdf){:target=\"_blank\"}\n\n[CGGI16]: I. Chillotti, N. Gama, M. Georgieva, M. Izabach\u00e8ne: A Homomorphic LWE Based E-voting Scheme. PQCrypto 2016: 245-265. [<span>PDF</span>](https://ilachill.github.io/papers/CGGI16a-An_homomorphic_LWE_based_E-voting_Scheme.pdf){:target=\"_blank\"} \n[<span>Slides</span>](https://pqcrypto2016.jp/data/Chillotti-Gama_Georgieva_Izabachene-An_Homomorphic_LWE-based_E-voting_Scheme-less-pauses.pdf\n){:target=\"_blank\"} \n\n[cuFHE]: CUDA-accelerated Fully Homomorphic Encryption Library: [<span>PDF</span>](https://github.com/vernamlab/cuFHE){:target=\"_blank\"}\n\n_(Please contact us to add your work based on TFHE)_\n\n\n### Use of TFHE in the industry: \n* Inpher\n* CryptoExperts\n* NuCipher\n* Zama\n\n\n\n\n\n\n\n\n\n\n\n"
 },
 {
  "repo": "bungle/lua-resty-nettle",
  "language": "Lua",
  "readme_contents": "# lua-resty-nettle\n\nLuaJIT FFI bindings for [Nettle](http://www.lysator.liu.se/~nisse/nettle/nettle.html) (a low-level cryptographic library)\n\n## Requirements\n\nThe bindings require `libnettle`, and in some cases also `libhogweed` (comes with `libnettle`) and `gmp`.\nSupported Nettle version is 3.7.x. Nettle can be downloaded from here:\n[www.lysator.liu.se/~nisse/nettle/](https://www.lysator.liu.se/~nisse/nettle/).\n\nBindings are tested with Linux and macOS on x64 architecture, but I don't see any reason why they wouldn't work\nwith other platforms and architectures.\n\n\n## Synopsis\n\n```lua\nlocal require = require\nlocal print = print\nlocal gsub = string.gsub\nlocal byte = string.byte\nlocal format = string.format\nlocal ipairs = ipairs\nlocal concat = table.concat\n\nlocal function hex(str,spacer)\n  return (gsub(str,\"(.)\", function (c)\n    return format(\"%02X%s\", byte(c), spacer or \"\")\n  end))\nend\n\ndo\n  local md2 = require \"resty.nettle.md2\"\n  print(\"md2      \", #md2(\"\"), hex(md2(\"\")))\n  local hash = md2.new()\n  hash:update(\"\")\n  print(\"md2     \", #hash:digest(), hex(hash:digest()))\nend\n\ndo\n  local md4 = require \"resty.nettle.md4\"\n  print(\"md4      \", #md4(\"\"), hex(md4(\"\")))\n  local hash = md4.new()\n  hash:update(\"\")\n  print(\"md4      \", #hash:digest(), hex(hash:digest()))\nend\n\ndo\n  local md5 = require \"resty.nettle.md5\"\n  print(\"md5      \", #md5(\"\"), hex(md5(\"\")))\n  local hash = md5.new()\n  hash:update(\"\")\n  print(\"md5      \", #hash:digest(), hex(hash:digest()))\nend\n\ndo\n  local ripemd160 = require \"resty.nettle.ripemd160\"\n  local hash = ripemd160.new()\n  hash:update(\"\")\n  print(\"ripemd160\", #hash:digest(), hex(hash:digest()))\nend\n\ndo\n  local gosthash94 = require \"resty.nettle.gosthash94\"\n  local hash = gosthash94.new()\n  hash:update(\"\")\n  print(\"gosthash94\", #hash:digest(), hex(hash:digest()))\nend\n\ndo\n  local sha1 = require \"resty.nettle.sha1\"\n  print(\"sha1      \", #sha1(\"\"), hex(sha1(\"\")))\n  local hash = sha1.new()\n  hash:update(\"\")\n  print(\"sha1     \", #hash:digest(), hex(hash:digest()))\nend\n\ndo\n  local sha2 = require \"resty.nettle.sha2\"\n\n  local hash = sha2.sha224.new()\n  hash:update(\"\")\n  print(\"sha224      \", #hash:digest(), hex(hash:digest()))\n  print(\"sha224      \", #sha2.sha224(\"\"), hex(sha2.sha224(\"\")))\n\n  local hash = sha2.sha256.new()\n  hash:update(\"\")\n  print(\"sha256      \", #hash:digest(), hex(hash:digest()))\n  print(\"sha256      \", #sha2.sha256(\"\"), hex(sha2.sha256(\"\")))\n\n  local hash = sha2.sha384.new()\n  hash:update(\"\")\n  print(\"sha384      \", #hash:digest(), hex(hash:digest()))\n  print(\"sha384      \", #sha2.sha384(\"\"), hex(sha2.sha384(\"\")))\n\n  local hash = sha2.sha512.new()\n  hash:update(\"\")\n  print(\"sha512      \", #hash:digest(), hex(hash:digest()))\n  print(\"sha512      \", #sha2.sha512(\"\"), hex(sha2.sha512(\"\")))\n\n  local hash = sha2.sha512_224.new()\n  hash:update(\"\")\n  print(\"sha512_224\", #hash:digest(), hex(hash:digest()))\n  print(\"sha512_224\", #sha2.sha512_224(\"\"), hex(sha2.sha512_224(\"\")))\n\n  local hash = sha2.sha512_256.new()\n  hash:update(\"\")\n  print(\"sha512_256\", #hash:digest(), hex(hash:digest()))\n  print(\"sha512_256\", #sha2.sha512_256(\"\"), hex(sha2.sha512_256(\"\")))\nend\n\ndo\n  local sha3 = require \"resty.nettle.sha3\"\n\n  local hash = sha3.sha224.new()\n  hash:update(\"\")\n  print(\"sha3 224\", #hash:digest(), hex(hash:digest()))\n\n  local hash = sha3.sha256.new()\n  hash:update(\"\")\n  print(\"sha3 256\", #hash:digest(), hex(hash:digest()))\n\n  local hash = sha3.sha384.new()\n  hash:update(\"\")\n  print(\"sha3 384\", #hash:digest(), hex(hash:digest()))\n\n  local hash = sha3.sha512.new()\n  hash:update(\"\")\n  print(\"sha3 512\", #hash:digest(), hex(hash:digest()))\nend\n\ndo\n  local hmac = require \"resty.nettle.hmac\"\n  print(\"hmac md5\", #hmac(\"md5\", \"a\", \"a\"), hex(hmac(\"md5\", \"a\", \"a\")))\n  print(\"hmac md5\", #hmac.md5(\"a\", \"a\"), hex(hmac.md5(\"a\", \"a\")))\n  local hash = hmac.md5.new(\"a\")\n  hash:update(\"a\")\n  local dgst = hash:digest()\n  print(\"hmac md5\", #dgst, hex(dgst))\n\n  local hash = hmac.ripemd160.new(\"a\")\n  hash:update(\"a\")\n  local dgst = hash:digest()\n  print(\"hmac ripemd160\", #dgst, hex(dgst))\n\n  local hash = hmac.sha1.new(\"a\")\n  hash:update(\"a\")\n  local dgst = hash:digest()\n  print(\"hmac sha1\", #dgst, hex(dgst))\n\n  local hash = hmac.sha224.new(\"a\")\n  hash:update(\"a\")\n  local dgst = hash:digest()\n  print(\"hmac sha224\", #dgst, hex(dgst))\n\n  local hash = hmac.sha256.new(\"a\")\n  hash:update(\"a\")\n  local dgst = hash:digest()\n  print(\"hmac sha256\", #dgst, hex(dgst))\n\n  local hash = hmac.sha384.new(\"a\")\n  hash:update(\"a\")\n  local dgst = hash:digest()\n  print(\"hmac sha384\", #dgst, hex(dgst))\n\n  local hash = hmac.sha512.new(\"a\")\n  hash:update(\"a\")\n  local dgst = hash:digest()\n  print(\"hmac sha512\", #dgst, hex(dgst))\nend\n\ndo\n  local umac = require \"resty.nettle.umac\"\n  local hash = umac.umac32.new(\"umac32\")\n  hash:update(\"\")\n  local dgst = hash:digest()\n  print(\"umac32     \", #dgst, hex(dgst))\n\n  local hash = umac.umac64.new(\"umac64\")\n  hash:update(\"\")\n  local dgst = hash:digest()\n  print(\"umac64     \", #dgst, hex(dgst))\n\n  local hash = umac.umac96.new(\"umac96\")\n  hash:update(\"\")\n  local dgst = hash:digest()\n  print(\"umac96     \", #dgst, hex(dgst))\n\n  local hash = umac.umac128.new(\"umac128\")\n  hash:update(\"\")\n  local dgst = hash:digest()\n  print(\"umac128     \", #dgst, hex(dgst))\nend\n\ndo\n  local poly = require \"resty.nettle.poly1305\"\n  local hash = poly.new(\"poly\")\n  hash:update(\"\")\n  local dgst = hash:digest()\n  print(\"poly1305    \", #dgst, hex(dgst))\nend\n\ndo\n  local pbkdf2 = require \"resty.nettle.pbkdf2\"\n  local hmac = pbkdf2.hmac_sha1(\"password\", 1, \"salt\", 20)\n  print(\"pbkdf2 sha1\", #hmac, hex(hmac))\n  local hmac = pbkdf2.hmac_sha256(\"pass\\0word\", 4096, \"sa\\0lt\", 32)\n  print(\"pbkdf2 sha256\", #hmac, hex(hmac))\nend\n\nprint()\n\ndo\n  local aes = require \"resty.nettle.aes\"\n  local aes128 = aes.new(\"testtesttesttest\")\n  local ciphertext = aes128:encrypt(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n  print(\"aes128 encrypt\", #ciphertext, hex(ciphertext))\n  local aes128 = aes.new(\"testtesttesttest\")\n  local plaintext = aes128:decrypt(ciphertext)\n  print(\"aes128 decrypt\", #plaintext, plaintext)\n\n  print()\n\n  local aes128 = aes.new(\"testtesttesttest\", \"cbc\", \"testtesttesttest\")\n  local ciphertext = aes128:encrypt(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n  print(\"aes128 cbc enc\", #ciphertext, hex(ciphertext))\n  local aes128 = aes.new(\"testtesttesttest\", \"cbc\", \"testtesttesttest\")\n  local plaintext = aes128:decrypt(ciphertext)\n  print(\"aes128 cbc dec\", #plaintext, plaintext)\n\n  print()\n\n  local aes128 = aes.new(\"testtesttesttest\", \"ctr\", \"testtesttesttest\")\n  local ciphertext = aes128:encrypt(\"a\")\n  print(\"aes128 ctr enc\", #ciphertext, hex(ciphertext))\n  local aes128 = aes.new(\"testtesttesttest\", \"ctr\", \"testtesttesttest\")\n  local plaintext = aes128:decrypt(ciphertext)\n  print(\"aes128 ctr dec\", #plaintext, plaintext)\n\n  print()\n\n  local aes128 = aes.new(\"testtesttesttest\", \"eax\", \"testtesttest\")\n  local ciphertext, digest = aes128:encrypt(\"a\")\n  print(\"aes128 eax enc\", #ciphertext, hex(ciphertext))\n  print(\"aes128 eax dgst\", #digest, hex(digest))\n  local aes128 = aes.new(\"testtesttesttest\", \"eax\", \"testtesttest\")\n  local plaintext, digest = aes128:decrypt(ciphertext)\n  print(\"aes128 eax dec\", #plaintext, plaintext)\n  print(\"aes128 eax dgst\", #digest, hex(digest))\n\n  print()\n\n  local aes128 = aes.new(\"testtesttesttest\", \"gcm\", \"testtesttest\")\n  local ciphertext, digest = aes128:encrypt(\"a\")\n  print(\"aes128 gcm enc\", #ciphertext, hex(ciphertext))\n  print(\"aes128 gcm dgst\", #digest, hex(digest))\n  local aes128 = aes.new(\"testtesttesttest\", \"gcm\", \"testtesttest\")\n  local plaintext, digest = aes128:decrypt(ciphertext)\n  print(\"aes128 gcm dec\", #plaintext, plaintext)\n  print(\"aes128 gcm dgst\", #digest, hex(digest))\n\n  print()\n\n  local aes128 = aes.new(\"testtesttesttest\", \"ccm\", \"testtesttest\")\n  local ciphertext, digest = aes128:encrypt(\"a\")\n  print(\"aes128 ccm enc\", #ciphertext, hex(ciphertext))\n  print(\"aes128 ccm dgst\", #digest, hex(digest))\n  local aes128 = aes.new(\"testtesttesttest\", \"ccm\", \"testtesttest\")\n  local plaintext, digest = aes128:decrypt(ciphertext)\n  print(\"aes128 ccm dec\", #plaintext, plaintext)\n  print(\"aes128 ccm dgst\", #digest, hex(digest))\n\n  print()\n\n  local aes192 = aes.new(\"testtesttesttesttesttest\")\n  local ciphertext = aes192:encrypt(\"a\")\n  print(\"aes192 encrypt\", #ciphertext, hex(ciphertext))\n  local aes192 = aes.new(\"testtesttesttesttesttest\")\n  local plaintext = aes192:decrypt(ciphertext)\n  print(\"aes192 decrypt\", #plaintext, plaintext)\n\n  print()\n\n  local aes192 = aes.new(\"testtesttesttesttesttest\", \"cbc\", \"testtesttesttest\")\n  local ciphertext = aes192:encrypt(\"a\")\n  print(\"aes192 cbc enc\", #ciphertext, hex(ciphertext))\n  local aes192 = aes.new(\"testtesttesttesttesttest\", \"cbc\", \"testtesttesttest\")\n  local plaintext = aes192:decrypt(ciphertext)\n  print(\"aes192 cbc dec\", #plaintext, plaintext)\n\n  print()\n\n  local aes192 = aes.new(\"testtesttesttesttesttest\", \"ctr\", \"testtesttesttest\")\n  local ciphertext = aes192:encrypt(\"a\")\n  print(\"aes192 ctr enc\", #ciphertext, hex(ciphertext))\n  local aes192 = aes.new(\"testtesttesttesttesttest\", \"ctr\", \"testtesttesttest\")\n  local plaintext = aes192:decrypt(ciphertext)\n  print(\"aes192 ctr dec\", #plaintext, plaintext)\n\n  print()\n\n  local aes192 = aes.new(\"testtesttesttesttesttest\", \"gcm\", \"testtesttest\")\n  local ciphertext, digest = aes192:encrypt(\"a\")\n  print(\"aes192 gcm enc\", #ciphertext, hex(ciphertext))\n  print(\"aes192 gcm dgst\", #digest, hex(digest))\n  local aes192 = aes.new(\"testtesttesttesttesttest\", \"gcm\", \"testtesttest\")\n  local plaintext, digest = aes192:decrypt(ciphertext)\n  print(\"aes192 gcm dec\", #plaintext, plaintext)\n  print(\"aes192 gcm dgst\", #digest, hex(digest))\n\n  print()\n\n  local aes192 = aes.new(\"testtesttesttesttesttest\", \"ccm\", \"testtesttest\")\n  local ciphertext, digest = aes192:encrypt(\"a\")\n  print(\"aes192 ccm enc\", #ciphertext, hex(ciphertext))\n  print(\"aes192 ccm dgst\", #digest, hex(digest))\n  local aes192 = aes.new(\"testtesttesttesttesttest\", \"ccm\", \"testtesttest\")\n  local plaintext, digest = aes192:decrypt(ciphertext)\n  print(\"aes192 ccm dec\", #plaintext, plaintext)\n  print(\"aes192 ccm dgst\", #digest, hex(digest))\n\n  print()\n\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\")\n  local ciphertext = aes256:encrypt(\"a\")\n  print(\"aes256 encrypt\", #ciphertext, hex(ciphertext))\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\")\n  local plaintext = aes256:decrypt(ciphertext)\n  print(\"aes256 decrypt\", #plaintext, plaintext)\n\n  print()\n\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\", \"cbc\", \"testtesttesttest\")\n  local ciphertext = aes256:encrypt(\"a\")\n  print(\"aes256 cbc enc\", #ciphertext, hex(ciphertext))\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\", \"cbc\", \"testtesttesttest\")\n  local plaintext = aes256:decrypt(ciphertext)\n  print(\"aes256 cbc dec\", #plaintext, plaintext)\n\n  print()\n\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\", \"ctr\", \"testtesttesttest\")\n  local ciphertext = aes256:encrypt(\"a\")\n  print(\"aes256 ctr enc\", #ciphertext, hex(ciphertext))\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\", \"ctr\", \"testtesttesttest\")\n  local plaintext = aes256:decrypt(ciphertext)\n  print(\"aes256 ctr dec\", #plaintext, plaintext)\n\n  print()\n\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\", \"gcm\", \"testtesttest\", \"testtesttesttest1asdasdasdasdasdasdasdasdasdasdasdasdasdasdasd\")\n  local ciphertext, digest = aes256:encrypt(\"a\")\n  print(\"aes256 gcm enc\", #ciphertext, hex(ciphertext))\n  print(\"aes256 gcm dgst\", #digest, hex(digest))\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\", \"gcm\", \"testtesttest\", \"testtesttesttest1asdasdasdasdasdasdasdasdasdasdasdasdasdasdasd\")\n  local plaintext, digest = aes256:decrypt(ciphertext)\n  print(\"aes256 gcm dec\", #plaintext, plaintext)\n  print(\"aes256 gcm dgst\", #digest, hex(digest))\n\n  print()\n\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\", \"ccm\", \"testtesttest\", \"testtesttesttest1asdasdasdasdasdasdasdasdasdasdasdasdasdasdasd\")\n  local ciphertext, digest = aes256:encrypt(\"a\")\n  print(\"aes256 ccm enc\", #ciphertext, hex(ciphertext))\n  print(\"aes256 ccm dgst\", #digest, hex(digest))\n  local aes256 = aes.new(\"testtesttesttesttesttesttesttest\", \"ccm\", \"testtesttest\", \"testtesttesttest1asdasdasdasdasdasdasdasdasdasdasdasdasdasdasd\")\n  local plaintext, digest = aes256:decrypt(ciphertext)\n  print(\"aes256 ccm dec\", #plaintext, plaintext)\n  print(\"aes256 ccm dgst\", #digest, hex(digest))\nend\n\nprint()\n\ndo\n  local camellia = require \"resty.nettle.camellia\"\n  local camellia128 = camellia.new(\"testtesttesttest\")\n  local ciphertext = camellia128:encrypt(\"a\")\n  print(\"cam128 encrypt\", #ciphertext, hex(ciphertext))\n  local camellia128 = camellia.new(\"testtesttesttest\")\n  local plaintext = camellia128:decrypt(ciphertext)\n  print(\"cam128 decrypt\", #plaintext, plaintext)\n\n  print()\n\n  local camellia128 = camellia.new(\"testtesttesttest\", \"gcm\", \"testtesttest\")\n  local ciphertext, digest = camellia128:encrypt(\"a\")\n  print(\"cam128 gcm enc\", #ciphertext, hex(ciphertext))\n  print(\"cam128 gcm dgst\", #digest, hex(digest))\n  local camellia128 = camellia.new(\"testtesttesttest\", \"gcm\", \"testtesttest\")\n  local plaintext, digest = camellia128:decrypt(ciphertext)\n  print(\"cam128 gcm dec\", #plaintext, plaintext)\n  print(\"cam128 gcm dgst\", #digest, hex(digest))\n\n  print()\n\n  local camellia192 = camellia.new(\"testtesttesttesttesttest\")\n  local ciphertext = camellia192:encrypt(\"a\")\n  print(\"cam192 encrypt\", #ciphertext, hex(ciphertext))\n  local camellia192 = camellia.new(\"testtesttesttesttesttest\")\n  local plaintext = camellia192:decrypt(ciphertext)\n  print(\"cam192 decrypt\", #plaintext, plaintext)\n\n  print()\n\n  local camellia256 = camellia.new(\"testtesttesttesttesttesttesttest\")\n  local ciphertext = camellia256:encrypt(\"a\")\n  print(\"cam256 encrypt\", #ciphertext, hex(ciphertext))\n  local camellia256 = camellia.new(\"testtesttesttesttesttesttesttest\")\n  local plaintext = camellia256:decrypt(ciphertext)\n  print(\"cam256 decrypt\", #plaintext, plaintext)\n\n  print()\n\n  local camellia256 = camellia.new(\"testtesttesttesttesttesttesttest\", \"gcm\", \"testtesttest\", \"testtesttesttest1asdasdasdasdasdasdasdasdasdasdasdasdasdasdasd\")\n  local ciphertext, digest = camellia256:encrypt(\"a\")\n  print(\"cam256 gcm enc\", #ciphertext, hex(ciphertext))\n  print(\"cam256 gcm dgst\", #digest, hex(digest))\n  local camellia256 = camellia.new(\"testtesttesttesttesttesttesttest\", \"gcm\", \"testtesttest\", \"testtesttesttest1asdasdasdasdasdasdasdasdasdasdasdasdasdasdasd\")\n  local plaintext, digest = camellia256:decrypt(ciphertext)\n  print(\"cam256 gcm dec\", #plaintext, plaintext)\n  print(\"cam256 gcm dgst\", #digest, hex(digest))\nend\n\nprint()\n\ndo\n  local arcfour = require \"resty.nettle.arcfour\"\n  local af = arcfour.new(\"testtesttesttest\")\n  local ciphertext = af:encrypt(\"a\")\n  print(\"ARCFOUR encrypt\", #ciphertext, hex(ciphertext))\n  local af = arcfour.new(\"testtesttesttest\")\n  local plaintext = af:decrypt(ciphertext)\n  print(\"ARCFOUR decrypt\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local blowfish = require \"resty.nettle.blowfish\"\n  local bf = blowfish.new(\"testtesttesttest\")\n  local ciphertext = bf:encrypt(\"a\")\n  print(\"BLOWFISH enc\", #ciphertext, hex(ciphertext))\n  local bf = blowfish.new(\"testtesttesttest\")\n  local plaintext = bf:decrypt(ciphertext)\n  print(\"BLOWFISH dec\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local twofish = require \"resty.nettle.twofish\"\n  local tf = twofish.new(\"testtesttesttest\")\n  local ciphertext = tf:encrypt(\"a\")\n  print(\"TWOFISH enc\", #ciphertext, hex(ciphertext))\n  local tf = twofish.new(\"testtesttesttest\")\n  local plaintext = tf:decrypt(ciphertext)\n  print(\"TWOFISH dec\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local serpent = require \"resty.nettle.serpent\"\n  local sp = serpent.new(\"testtesttesttest\")\n  local ciphertext = sp:encrypt(\"a\")\n  print(\"SERPENT enc\", #ciphertext, hex(ciphertext))\n  local sp = serpent.new(\"testtesttesttest\")\n  local plaintext = sp:decrypt(ciphertext)\n  print(\"SERPENT dec\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local cast128 = require \"resty.nettle.cast128\"\n  local ct = cast128.new(\"testtesttesttest\")\n  local ciphertext = ct:encrypt(\"a\")\n  print(\"CAST128 enc\", #ciphertext, hex(ciphertext))\n  local ct = cast128.new(\"testtesttesttest\")\n  local plaintext = ct:decrypt(ciphertext)\n  print(\"CAST128 dec\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local chacha = require \"resty.nettle.chacha\"\n  local cc = chacha.new(\"testtesttesttesttesttesttesttest\", \"testtest\")\n  local ciphertext = cc:encrypt(\"a\")\n  print(\"ChaCha enc\", #ciphertext, hex(ciphertext))\n  local cc = chacha.new(\"testtesttesttesttesttesttesttest\", \"testtest\")\n  local plaintext = cc:decrypt(ciphertext)\n  print(\"ChaCha dec\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local salsa20 = require \"resty.nettle.salsa20\"\n  local ss = salsa20.new(\"testtesttesttest\", \"testtest\")\n  local ciphertext = ss:encrypt(\"a\")\n  print(\"Salsa20 128 enc\", #ciphertext, hex(ciphertext))\n  local ss = salsa20.new(\"testtesttesttest\", \"testtest\")\n  local plaintext = ss:decrypt(ciphertext)\n  print(\"Salsa20 128 dec\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local salsa20 = require \"resty.nettle.salsa20\"\n  local ss = salsa20.new(\"testtesttesttesttesttesttesttest\", \"testtest\")\n  local ciphertext = ss:encrypt(\"a\")\n  print(\"Salsa20 256 enc\", #ciphertext, hex(ciphertext))\n  local ss = salsa20.new(\"testtesttesttesttesttesttesttest\", \"testtest\")\n  local plaintext = ss:decrypt(ciphertext)\n  print(\"Salsa20 256 dec\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local salsa20 = require \"resty.nettle.salsa20\"\n  local ss = salsa20.new(\"testtesttesttest\", \"testtest\", 12)\n  local ciphertext = ss:encrypt(\"a\")\n  print(\"Sal20r12 128 e\", #ciphertext, hex(ciphertext))\n  local ss = salsa20.new(\"testtesttesttest\", \"testtest\", 12)\n  local plaintext = ss:decrypt(ciphertext)\n  print(\"Sal20r12 128 d\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local salsa20 = require \"resty.nettle.salsa20\"\n  local ss = salsa20.new(\"testtesttesttesttesttesttesttest\", \"testtest\", 12)\n  local ciphertext = ss:encrypt(\"a\")\n  print(\"Sal20r12 256 e\", #ciphertext, hex(ciphertext))\n  local ss = salsa20.new(\"testtesttesttesttesttesttesttest\", \"testtest\", 12)\n  local plaintext = ss:decrypt(ciphertext)\n  print(\"Sal20r12 256 d\", #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local chacha_poly1305 = require \"resty.nettle.chacha-poly1305\"\n  local cp = chacha_poly1305.new(\"testtesttesttesttesttesttesttest\", \"testtesttesttest\", \"testtest\")\n  local ciphertext, digest = cp:encrypt(\"a\")\n  print(\"cc-p1305 enc\", #ciphertext, hex(ciphertext))\n  print(\"cc-p1305 dgst\", #digest, hex(digest))\n  local cp = chacha_poly1305.new(\"testtesttesttesttesttesttesttest\", \"testtesttesttest\", \"testtest\")\n  local plaintext, digest = cp:decrypt(ciphertext)\n  print(\"cc-p1305 dec\", #plaintext, plaintext)\n  print(\"cc-p1305 dgst\", #digest, hex(digest))\nend\n\nprint()\n\ndo\n  local des = require \"resty.nettle.des\"\n  print(\"DES check   \", \"testtest\", des.check_parity(\"testtest\"))\n  print(\"DES fix     \", \"testtest\", des.fix_parity(\"testtest\"))\n  print(\"DES check   \", des.fix_parity(\"testtest\"), des.check_parity(des.fix_parity(\"testtest\")))\nend\n\nprint()\n\ndo\n  local des = require \"resty.nettle.des\"\n  local ds, wk = des.new(\"testtest\")\n  local ciphertext = ds:encrypt(\"a\")\n  print(\"DES enc     \", wk, #ciphertext, hex(ciphertext))\n  local ds, wk = des.new(\"testtest\")\n  local plaintext = ds:decrypt(ciphertext)\n  print(\"DES dec     \", wk, #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local des = require \"resty.nettle.des\"\n  local ds, wk = des.new(\"testtest\", \"cbc\", \"kalakala\")\n  local ciphertext = ds:encrypt(\"testtestkalakala\")\n  print(\"DES cbc enc \", wk, #ciphertext, hex(ciphertext))\n  local ds, wk = des.new(\"testtest\", \"cbc\", \"kalakala\")\n  local plaintext = ds:decrypt(ciphertext)\n  print(\"DES cbc dec \", wk, #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local des = require \"resty.nettle.des\"\n  local ds, wk = des.new(\"testtest\", \"ctr\", \"kalakala\")\n  local ciphertext = ds:encrypt(\"testtestkalakala\")\n  print(\"DES ctr enc \", wk, #ciphertext, hex(ciphertext))\n  local ds, wk = des.new(\"testtest\", \"ctr\", \"kalakala\")\n  local plaintext = ds:decrypt(ciphertext)\n  print(\"DES ctr dec \", wk, #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local des = require \"resty.nettle.des\"\n  print(\"DES3 check   \", \"testtestkalakalatesttest\", des.check_parity(\"testtestkalakalatesttest\"))\n  print(\"DES3 fix     \", \"testtestkalakalatesttest\", des.fix_parity(\"testtestkalakalatesttest\"))\n  print(\"DES3 check   \", des.fix_parity(\"testtestkalakalatesttest\"), des.check_parity(des.fix_parity(\"testtestkalakalatesttest\")))\nend\n\nprint()\n\ndo\n  local des = require \"resty.nettle.des\"\n  local ds, wk = des.new(\"testtestkalakalatesttest\")\n  local ciphertext = ds:encrypt(\"a\")\n  print(\"DES3 enc     \", wk, #ciphertext, hex(ciphertext))\n  local ds, wk = des.new(\"testtestkalakalatesttest\")\n  local plaintext = ds:decrypt(ciphertext)\n  print(\"DES3 dec     \", wk, #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local des = require \"resty.nettle.des\"\n  local ds, wk = des.new(\"testtestkalakalatesttest\", \"cbc\", \"kalakala\")\n  local ciphertext = ds:encrypt(\"testtestkalakala\")\n  print(\"DES3 cbc enc\", wk, #ciphertext, hex(ciphertext))\n  local ds, wk = des.new(\"testtestkalakalatesttest\", \"cbc\", \"kalakala\")\n  local plaintext = ds:decrypt(ciphertext)\n  print(\"DES3 cbc dec\", wk, #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local des = require \"resty.nettle.des\"\n  local ds, wk = des.new(\"testtestkalakalatesttest\", \"ctr\", \"kalakala\")\n  local ciphertext = ds:encrypt(\"testtestkalakala\")\n  print(\"DES3 ctr enc\", wk, #ciphertext, hex(ciphertext))\n  local ds, wk = des.new(\"testtestkalakalatesttest\", \"ctr\", \"kalakala\")\n  local plaintext = ds:decrypt(ciphertext)\n  print(\"DES3 ctr dec\", wk, #plaintext, plaintext)\nend\n\nprint()\n\ndo\n  local base64 = require \"resty.nettle.base64\"\n  local encoded = base64.encode(\"testtesttesttest\")\n  print(\"BASE64 enc\", #encoded, encoded)\n  local decoded = base64.decode(encoded)\n  print(\"BASE64 dec\", #decoded, decoded)\n\n  print()\n\n  local encoded = base64.encode(\"testtesttesttest+&\", true)\n  print(\"BASE64 enc-url\", #encoded, encoded)\n  local decoded = base64.decode(encoded, true)\n  print(\"BASE64 dec-url\", #decoded, decoded)\n\n  print()\n\n\n  local base64enc = base64.encoder.new()\n  print(base64enc:single(\"t\"))\n  print(base64enc:single(\"e\"))\n  print(base64enc:single(\"s\"))\n  print(base64enc:single(\"t\"))\n  print(base64enc:update(\"test\"))\n  print(base64enc:single(\"t\"))\n  print(base64enc:single(\"e\"))\n  print(base64enc:single(\"s\"))\n  print(base64enc:single(\"t\"))\n  print(base64enc:update(\"test\"))\n  print(base64enc:final())\n\n  print()\n\n  local base64dec = base64.decoder.new()\n  print(base64dec:single(\"d\"))\n  print(base64dec:single(\"G\"))\n  print(base64dec:single(\"V\"))\n  print(base64dec:single(\"z\"))\n  print(base64dec:single(\"d\"))\n  print(base64dec:update(\"HRlc3\"))\n  print(base64dec:single(\"R\"))\n  print(base64dec:single(\"0\"))\n  print(base64dec:single(\"Z\"))\n  print(base64dec:single(\"X\"))\n  print(base64dec:single(\"N\"))\n  print(base64dec:single(\"0\"))\n  print(base64dec:update(\"dGVzdA==\"))\n  print(base64dec:final())\nend\n\nprint()\n\ndo\n  local base16 = require \"resty.nettle.base16\"\n  local encoded = base16.encode(\"testtesttesttest\")\n  print(\"BASE16 enc\", #encoded, encoded)\n  local decoded = base16.decode(encoded)\n  print(\"BASE16 dec\", #decoded, decoded)\n\n  print()\n\n  local base16enc = base16.encoder.new()\n  print(base16enc:single(\"t\"))\n  print(base16enc:single(\"e\"))\n  print(base16enc:single(\"s\"))\n  print(base16enc:single(\"t\"))\n  print(base16enc:update(\"test\"))\n  print(base16enc:single(\"t\"))\n  print(base16enc:single(\"e\"))\n  print(base16enc:single(\"s\"))\n  print(base16enc:single(\"t\"))\n  print(base16enc:update(\"test\"))\n\n  print()\n\n  local base16dec = base16.decoder.new()\n  print(base16dec:single(\"7\"))\n  print(base16dec:single(\"4\"))\n  print(base16dec:single(\"6\"))\n  print(base16dec:single(\"5\"))\n  print(base16dec:single(\"7\"))\n  print(base16dec:single(\"3\"))\n  print(base16dec:single(\"7\"))\n  print(base16dec:single(\"4\"))\n  print(base16dec:update(\"74657374\"))\n  print(base16dec:single(\"7\"))\n  print(base16dec:single(\"4\"))\n  print(base16dec:single(\"6\"))\n  print(base16dec:single(\"5\"))\n  print(base16dec:single(\"7\"))\n  print(base16dec:single(\"3\"))\n  print(base16dec:single(\"7\"))\n  print(base16dec:single(\"4\"))\n  print(base16dec:update(\"74657374\"))\n  print(base16dec:final())\nend\n\nprint()\n\ndo\n  local yarrow = require \"resty.nettle.yarrow\"\n  local y = yarrow.new()\n  print(y.sources)\n  print(y.seeded)\n  y:seed(\"testtesttesttesttesttesttesttest\")\n  print(y.seeded)\n\n  print(hex(y:random(30)))\n  print(hex(y:random(30)))\n\n  y:fast_reseed()\n\n  print(hex(y:random(30)))\n\n  y:slow_reseed()\n  print(hex(y:random(30)))\nend\n\nprint()\n\ndo\n  local knuth = require \"resty.nettle.knuth-lfib\"\n  local k = knuth.new()\n  print(k:number())\n  print(k:number())\n  print(hex(k:random(10)))\n  local t = k:array(10)\n  print(concat(t, '|'))\nend\n\nprint()\n\ndo\n  local rsa = require \"resty.nettle.rsa\"\n  local r = rsa.new()\n  local gibb = r:encrypt(\"fish\")\n  print(hex(gibb))\n  local clear = r:decrypt(gibb)\n  print(clear)\nend\n\nprint()\n\ndo\n  local ed = require \"resty.nettle.ed25519-sha512\"\n  local pri = \"testtesttesttesttesttesttesttest\"\n  print(\"EdDSA25519 SHA-512 private key\", #pri, pri)\n  local pub = ed.public_key(pri)\n  print(\"EdDSA25519 SHA-512 public key\", #pub, hex(pub))\n  local msg = \"hello\"\n  print(\"EdDSA25519 SHA-512 message\", #msg, msg)\n  local sig = ed.sign(pub, pri, msg)\n  print(\"EdDSA25519 SHA-512 signature\", #sig, hex(sig))\n  local chk = ed.verify(pub, msg, sig)\n  print(\"EdDSA25519 SHA-512 verify (true)\", chk)\n  local err = \"error\"\n  local chk = ed.verify(pub, err, sig)\n  print(\"EdDSA25519 SHA-512 verify (false)\", chk)\nend\n```\n\nThe above should output this (randoms are different of course):\n\n```text\nmd2      \t16\t8350E5A3E24C153DF2275C9F80692773\nmd2     \t16\t8350E5A3E24C153DF2275C9F80692773\nmd4      \t16\t31D6CFE0D16AE931B73C59D7E0C089C0\nmd4      \t16\t31D6CFE0D16AE931B73C59D7E0C089C0\nmd5      \t16\tD41D8CD98F00B204E9800998ECF8427E\nmd5      \t16\tD41D8CD98F00B204E9800998ECF8427E\nripemd160\t20\t9C1185A5C5E9FC54612808977EE8F548B2258D31\ngosthash94\t32\tCE85B99CC46752FFFEE35CAB9A7B0278ABB4C2D2055CFF685AF4912C49490F8D\nsha1      \t20\tDA39A3EE5E6B4B0D3255BFEF95601890AFD80709\nsha1     \t20\tDA39A3EE5E6B4B0D3255BFEF95601890AFD80709\nsha224      \t28\tD14A028C2A3A2BC9476102BB288234C415A2B01F828EA62AC5B3E42F\nsha224      \t28\tD14A028C2A3A2BC9476102BB288234C415A2B01F828EA62AC5B3E42F\nsha256      \t32\tE3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855\nsha256      \t32\tE3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855\nsha384      \t48\t38B060A751AC96384CD9327EB1B1E36A21FDB71114BE07434C0CC7BF63F6E1DA274EDEBFE76F65FBD51AD2F14898B95B\nsha384      \t48\t38B060A751AC96384CD9327EB1B1E36A21FDB71114BE07434C0CC7BF63F6E1DA274EDEBFE76F65FBD51AD2F14898B95B\nsha512      \t64\tCF83E1357EEFB8BDF1542850D66D8007D620E4050B5715DC83F4A921D36CE9CE47D0D13C5D85F2B0FF8318D2877EEC2F63B931BD47417A81A538327AF927DA3E\nsha512      \t64\tCF83E1357EEFB8BDF1542850D66D8007D620E4050B5715DC83F4A921D36CE9CE47D0D13C5D85F2B0FF8318D2877EEC2F63B931BD47417A81A538327AF927DA3E\nsha512_224\t28\t6ED0DD02806FA89E25DE060C19D3AC86CABB87D6A0DDD05C333B84F4\nsha512_224\t28\t6ED0DD02806FA89E25DE060C19D3AC86CABB87D6A0DDD05C333B84F4\nsha512_256\t32\tC672B8D1EF56ED28AB87C3622C5114069BDD3AD7B8F9737498D0C01ECEF0967A\nsha512_256\t32\tC672B8D1EF56ED28AB87C3622C5114069BDD3AD7B8F9737498D0C01ECEF0967A\nsha3 224\t28\t6B4E03423667DBB73B6E15454F0EB1ABD4597F9A1B078E3F5B5A6BC7\nsha3 256\t32\tA7FFC6F8BF1ED76651C14756A061D662F580FF4DE43B49FA82D80A4B80F8434A\nsha3 384\t48\t0C63A75B845E4F7D01107D852E4C2485C51A50AAAA94FC61995E71BBEE983A2AC3713831264ADB47FB6BD1E058D5F004\nsha3 512\t64\tA69F73CCA23A9AC5C8B567DC185A756E97C982164FE25859E0D1DCC1475C80A615B2123AF1F5F94C11E3E9402C3AC558F500199D95B6D3E301758586281DCD26\nhmac md5\t16\t06F30DC9049F859EA0CCB39FDC8FD5C2\nhmac md5\t16\t06F30DC9049F859EA0CCB39FDC8FD5C2\nhmac md5\t16\t06F30DC9049F859EA0CCB39FDC8FD5C2\nhmac ripemd160\t20\tECB2E5CA0EEFFD84F5566B5DE1D037EF1F9689EF\nhmac sha1\t20\t3902ED847FF28930B5F141ABFA8B471681253673\nhmac sha224\t28\t7A5027C4F3A358A76D943D6D83A8242675FE96E2D30A526FE9E19629\nhmac sha256\t32\t3ECF5388E220DA9E0F919485DEB676D8BEE3AEC046A779353B463418511EE622\nhmac sha384\t48\t724C212553F366248BC76017E812C8ACC85B94FEC2F396C2A925BCC2571F7AB29FEDEE6B3B3013BBF9DE7B89549D5A69\nhmac sha512\t64\tFC8C80E6B943CD07ECCECF01BC6038BAE68EBB6FA2E1E62B44753D7C177AF7A46B089DF349A19F7622A22312C76906CA9C984E1446D3AB86A98FDFA1425341C5\numac32     \t4\tD262065C\numac64     \t8\tDA7E5EB7E37A27E6\numac96     \t12\t6B8FBA819AB2FEFA8A18F5AA\numac128     \t16\tD55988EE39924D7642FFB401A79BCE29\npoly1305    \t16\t879E865A98C8CDE7C899D9A3A243EDB9\npbkdf2 sha1\t20\t0C60C80F961F0E71F3A9B524AF6012062FE037A6\npbkdf2 sha256\t32\t89B69D0516F829893C696226650A86878C029AC13EE276509D5AE58B6466A724\n\naes128 encrypt\t32\t2EBEA9810D3056A2159BBE45A72429692EBEA9810D3056A2159BBE45A7242969\naes128 decrypt\t32\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\naes128 cbc enc\t32\tD3D069910C09DFC1675562A0EC9D8B204DD27DB3413D24D994F7300DD331135A\naes128 cbc dec\t32\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\naes128 ctr enc\t1\t64\naes128 ctr dec\t1\ta\n\naes128 eax enc\t1\t73\naes128 eax dgst\t16\tB4D34C46BFCA2E729FECC7638F9A6199\naes128 eax dec\t1\ta\naes128 eax dgst\t16\tB4D34C46BFCA2E729FECC7638F9A6199\n\naes128 gcm enc\t1\tBB\naes128 gcm dgst\t16\t18D5F5CCECB218322F21005BCBFF16E0\naes128 gcm dec\t1\ta\naes128 gcm dgst\t16\t18D5F5CCECB218322F21005BCBFF16E0\n\naes128 ccm enc\t1\t6E\naes128 ccm dgst\t16\t415B65935A4B546B9E81C988B9C68E53\naes128 ccm dec\t1\ta\naes128 ccm dgst\t16\t415B65935A4B546B9E81C988B9C68E53\n\naes192 encrypt\t16\tE21AE894602E835C9A21A6CBC5BDC030\naes192 decrypt\t16\ta\n\naes192 cbc enc\t16\t896A1B518F24B9FC5C5765BF102DB40A\naes192 cbc dec\t16\ta\n\naes192 ctr enc\t1\t98\naes192 ctr dec\t1\ta\n\naes192 gcm enc\t1\t1B\naes192 gcm dgst\t16\t8F616E7FF9A858FBDC2C1C4C302C4747\naes192 gcm dec\t1\ta\naes192 gcm dgst\t16\t8F616E7FF9A858FBDC2C1C4C302C4747\n\naes192 ccm enc\t1\tCD\naes192 ccm dgst\t16\t0D19B5B3D3B637D240B48BDE79395B94\naes192 ccm dec\t1\ta\naes192 ccm dgst\t16\t0D19B5B3D3B637D240B48BDE79395B94\n\naes256 encrypt\t16\tA18335BBBFFBA0996D6B7E36FBC8C0D4\naes256 decrypt\t16\ta\n\naes256 cbc enc\t16\t55A88E8F506DA90A694059A3A2F22E77\naes256 cbc dec\t16\ta\n\naes256 ctr enc\t1\t70\naes256 ctr dec\t1\ta\n\naes256 gcm enc\t1\t3B\naes256 gcm dgst\t16\tEFB12AF268F64A602779EAE2F8C2FA03\naes256 gcm dec\t1\ta\naes256 gcm dgst\t16\tEFB12AF268F64A602779EAE2F8C2FA03\n\naes256 ccm enc\t1\tA1\naes256 ccm dgst\t16\tB743659EF6F2FB95C77870FE3F9BD297\naes256 ccm dec\t1\ta\naes256 ccm dgst\t16\tB743659EF6F2FB95C77870FE3F9BD297\n\ncam128 encrypt\t16\tFE50E0F47DF41615C2C5DC042F75B1AC\ncam128 decrypt\t16\ta\n\ncam128 gcm enc\t1\tE0\ncam128 gcm dgst\t16\tAF2E1CC47D3D31CCC3EA63F417DF35DD\ncam128 gcm dec\t1\ta\ncam128 gcm dgst\t16\tAF2E1CC47D3D31CCC3EA63F417DF35DD\n\ncam192 encrypt\t16\t3870F36C308368F14B4EDFFF1C577811\ncam192 decrypt\t16\ta\n\ncam256 encrypt\t16\tB2572D8BFEF8199B241C0B1008D8506B\ncam256 decrypt\t16\ta\n\ncam256 gcm enc\t1\tA0\ncam256 gcm dgst\t16\t6B1891EE8E1F20FA49788E75A8F9447F\ncam256 gcm dec\t1\ta\ncam256 gcm dgst\t16\t6B1891EE8E1F20FA49788E75A8F9447F\n\nARCFOUR encrypt\t1\tCF\nARCFOUR decrypt\t1\ta\n\nBLOWFISH enc\t8\t821C2FA4533A2FD2\nBLOWFISH dec\t8\ta\n\nTWOFISH enc\t16\t6375B41B0C29E7446D217F79A909BB4B\nTWOFISH dec\t16\ta\n\nSERPENT enc\t16\t0F65C1891EA2BCCA60A1AA228A84B233\nSERPENT dec\t16\ta\n\nCAST128 enc\t8\tFA80BC104398019E\nCAST128 dec\t8\ta\n\nChaCha enc\t1\tE2\nChaCha dec\t1\ta\n\nSalsa20 128 enc\t1\t27\nSalsa20 128 dec\t1\ta\n\nSalsa20 256 enc\t1\t2B\nSalsa20 256 dec\t1\ta\n\nSal20r12 128 e\t1\tC1\nSal20r12 128 d\t1\ta\n\nSal20r12 256 e\t1\tE8\nSal20r12 256 d\t1\ta\n\ncc-p1305 enc\t1\t35\ncc-p1305 dgst\t16\t94BECC3FD052F18D657B4F18521C0409\ncc-p1305 dec\t1\ta\ncc-p1305 dgst\t16\t94BECC3FD052F18D657B4F18521C0409\n\nDES check   \ttesttest\tfalse\nDES fix     \ttesttest\tudsuudsu\nDES check   \tudsuudsu\ttrue\n\nDES enc     \tfalse\t8\t236BF47A8D784246\nDES dec     \tfalse\t8\ta\n\nDES cbc enc \tfalse\t16\t3840F08DBAD6CD6DE2AF46AF2656BE48\nDES cbc dec \tfalse\t16\ttesttestkalakala\n\nDES ctr enc \tfalse\t16\tAEC72E5671C9D82D343F9F721F668701\nDES ctr dec \tfalse\t16\ttesttestkalakala\n\nDES3 check   \ttesttestkalakalatesttest\tfalse\nDES3 fix     \ttesttestkalakalatesttest\tudsuudsukamakamaudsuudsu\nDES3 check   \tudsuudsukamakamaudsuudsu\ttrue\n\nDES3 enc     \tfalse\t8\t95D3D64AEA12A4B5\nDES3 dec     \tfalse\t8\ta\n\nDES3 cbc enc\tfalse\t16\tC668BD2F4C1154F638A5995EC10EF184\nDES3 cbc dec\tfalse\t16\ttesttestkalakala\n\nDES3 ctr enc\tfalse\t16\tBDD1394B141DE724ADB714DEC4D8E30F\nDES3 ctr dec\tfalse\t16\ttesttestkalakala\n\nBASE64 enc\t24\tdGVzdHRlc3R0ZXN0dGVzdA==\nBASE64 dec\t16\ttesttesttesttest\n\nBASE64 enc-url\t24\tdGVzdHRlc3R0ZXN0dGVzdCsm\nBASE64 dec-url\t18\ttesttesttesttest+&\n\nd\t1\nG\t1\nVz\t2\nd\t1\nHRlc3\t5\nR0\t2\nZ\t1\nX\t1\nN0\t2\ndGVzd\t5\nA==\t3\n\n\t0\nt\t1\ne\t1\ns\t1\n\t0\nttes\t4\nt\t1\nt\t1\n\t0\ne\t1\ns\t1\nt\t1\ntest\t4\ntrue\n\nBASE16 enc\t32\t74657374746573747465737474657374\nBASE16 dec\t16\ttesttesttesttest\n\n74\n65\n73\n74\n74657374\n74\n65\n73\n74\n74657374\n\n\t0\nt\t1\n\t0\ne\t1\n\t0\ns\t1\n\t0\nt\t1\ntest\t4\n\t0\nt\t1\n\t0\ne\t1\n\t0\ns\t1\n\t0\nt\t1\ntest\t4\ntrue\n\n2\nfalse\ntrue\n5DBE3C56BEDDA2608DD6D0924902271A7CE0A9C81EF955E396594329306A\n0D3CE56865CF002F7A53914C58D6C8037904C82E3D72ED1E5F09D0178A93\n5114614E5779289597D9DC54EF2716531A6543718ED8F26CE850632E4B46\n7D0D2C1F5D5C4D59F4C07115A5B0E0AED2BA6FF406AE9A85412EB62091E6\n\n1028764519\n765133839\nDC1424283A03BA0C01E9\n584484306|437203720|985724606|714176836|864733948|650443754|198142580|632065637|974210952|193718333\n\n411CFFB5C68DC3BA80CE5A72E127A5E06B1AEB7820BCEE14C738708DC048F8889CD3A86E16379F6E56DACF941C0841CA2C7B948D336CD5E529587383B2C03438C60B4BBE3BB2D3CF7CCB25BC9260FEA7C6117CC9E0D289DA0D85614CFBAEB33590AD43CF8C65802B794F160E04AFB98B883887E7A290AB3E2EFEF46D5D6D760E78904CAF3BBCE8ADC3C3B400012D06AB40032B2BB4689DF84A1AB0AB8CF72B89BDC8F1A572270B8A8A4C5C61DA01FADC1F5D9DCF70BD6E1C3A79990467295D32DF4182C8EC81A4C2050DFAB419102393886920D40FD5DE5AA6CC4E435F70A9341B849266B092E3C3C33623C34262C907A9FB92A1A480B87E6E375E9DE96D104CFF6A97800BD8B9F2C454FC99D9FF400865EFC8CE882F50BA9488DB47A071311EB0B1CC3F6D477A39098F2714F92229B4497AE78DC6477BBF1705071C58B459F907C3D7D82727A7FA87C3ECEA1EACE01B92341FC93499AC00C1473721E4EED81B39C7635BC810C516BDD0F184B19AE8C92BE4E025419E01DA5A2CA712375EA0BA9C3D9E35BC57AB24FA695B8685E5BE570BC8148CAF5BF0C3AFA74F588080E60DFDE821B1271FE7F111831DE64E39F12FF309298E57819D1B284A29349707DB5D7BD9604FA433FBF0B718CC9B15B02AB9AA34C53ECBBE759018AC9D3251EEEA8CE6CCAC56AA1402FB078A7A3E802554BEDACF8F7976CFC68EAC8DA06FD6FA4CE1\nfish\n\nEdDSA25519 SHA-512 private key\t32\ttesttesttesttesttesttesttesttest\nEdDSA25519 SHA-512 public key\t32\t06B77FC89D2B9785433DD37A9B98A3C8FA37F03DB2B2CC0E79BE76F87B223D21\nEdDSA25519 SHA-512 message\t5\thello\nEdDSA25519 SHA-512 signature\t64\t0E202379D19190BC1A933D3DD1753FF0B833393BEED1DC12469309F2A07094348E340C302069CDB7C7C54C21CCDA8891F21FA4588D63803C9538F2A513DA6E04\nEdDSA25519 SHA-512 verify (true)\ttrue\nEdDSA25519 SHA-512 verify (false)\tnil\n```\n\n## Installation\n\nJust place [`nettle.lua`](https://github.com/bungle/lua-resty-nettle/blob/master/lib/resty/nettle.lua) and [`nettle`](https://github.com/bungle/lua-resty-nettle/tree/master/lib/resty/nettle) directory somewhere in your `package.path`, under `resty` directory. If you are using OpenResty, the default location would be `/usr/local/openresty/lualib/resty`.\n\n### Using OpenResty Package Manager (opm)\n\n```Shell\n$ opm get bungle/lua-resty-nettle\n```\n\n### Using LuaRocks\n\n```Shell\n$ luarocks install lua-resty-nettle\n```\n\nLuaRocks repository for `lua-resty-nettle` is located at https://luarocks.org/modules/bungle/lua-resty-nettle.\n\n## Hash Functions\n\n#### SHA-224\n\n```lua\nlocal hash = require \"resty.nettle.sha2\"\nlocal dgst = hash(\"sha224\", \"test\")\n-- or\nlocal dgst = hash.sha224 \"test\"\n-- or\nlocal sha2 = hash.sha224..new()\nsha2:update \"te\"\nsha2:update \"st\"\nlocal dgst = sha2:digest()\n```\n\n#### SHA-256\n\n```lua\nlocal hash = require \"resty.nettle.sha2\"\nlocal dgst = hash(\"sha256\", \"test\")\n-- or\nlocal dgst = hash.sha256 \"test\"\n-- or\nlocal sha2 = hash.sha256.new()\nsha2:update \"te\"\nsha2:update \"st\"\nlocal dgst = sha2:digest()\n```\n\n#### SHA-384\n\n```lua\nlocal hash = require \"resty.nettle.sha2\"\nlocal dgst = hash(\"sha384\", \"test\")\n-- or\nlocal dgst = hash.sha384 \"test\"\n-- or\nlocal sha2 = hash.sha384.new()\nsha2:update \"te\"\nsha2:update \"st\"\nlocal dgst = sha2:digest()\n```\n\n#### SHA-512\n\n```lua\nlocal hash = require \"resty.nettle.sha2\"\nlocal dgst = hash(\"sha512\", \"test\")\n-- or\nlocal dgst = hash.sha512 \"test\"\n-- or\nlocal sha2 = hash.sha512.new()\nsha2:update \"te\"\nsha2:update \"st\"\nlocal dgst = sha2:digest()\n```\n\n#### SHA-512/224\n\n```lua\nlocal hash = require \"resty.nettle.sha2\"\nlocal dgst = hash(\"sha512_224\", \"test\")\n-- or\nlocal dgst = hash.sha512_224 \"test\"\n-- or\nlocal sha2 = hash.sha512_224.new()\nsha2:update \"te\"\nsha2:update \"st\"\nlocal dgst = sha2:digest()\n```\n\n#### SHA-512/256\n\n```lua\nlocal hash = require \"resty.nettle.sha2\"\nlocal dgst = hash(\"sha512_256\", \"test\")\n-- or\nlocal dgst = hash.sha512_256 \"test\"\n-- or\nlocal sha2 = hash.sha512_256.new()\nsha2:update \"te\"\nsha2:update \"st\"\nlocal dgst = sha2:digest()\n```\n\n#### SHA3-224\n\n```lua\nlocal hash = require \"resty.nettle.sha3\"\nlocal dgst = hash(224, \"test\")\n-- or\nlocal dgst = hash.sha224 \"test\"\n-- or\nlocal sha3 = hash.sha224.new()\nsha3:update \"te\"\nsha3:update \"st\"\nlocal dgst = sha3:digest()\n```\n\n#### SHA3-256\n\n```lua\nlocal hash = require \"resty.nettle.sha3\"\nlocal dgst = hash(256, \"test\")\n-- or\nlocal dgst = hash.sha256 \"test\"\n-- or\nlocal sha3 = hash.sha256.new()\nsha3:update \"te\"\nsha3:update \"st\"\nlocal dgst = sha3:digest()\n```\n\n#### SHA3-384\n\n```lua\nlocal hash = require \"resty.nettle.sha3\"\nlocal dgst = hash(384, \"test\")\n-- or\nlocal dgst = hash.sha384 \"test\"\n-- or\nlocal sha3 = hash.sha384.new()\nsha3:update \"te\"\nsha3:update \"st\"\nlocal dgst = sha3:digest()\n```\n\n#### SHA3-512\n\n```lua\nlocal hash = require \"resty.nettle.sha3\"\nlocal dgst = hash(512, \"test\")\n-- or\nlocal dgst = hash.sha512 \"test\"\n-- or\nlocal sha3 = hash.sha512.new()\nsha3:update \"te\"\nsha3:update \"st\"\nlocal dgst = sha3:digest()\n```\n\n#### MD2\n\n```lua\nlocal hash = require \"resty.nettle.md2\"\nlocal dgst = hash \"test\"\n-- or\nlocal md2 = hash.new()\nmd2:update \"te\"\nmd2:update \"st\"\nlocal dgst = md2:digest()\n```\n\n#### MD4\n\n```lua\nlocal hash = require \"resty.nettle.md4\"\nlocal dgst = hash \"test\"\n-- or\nlocal md4 = hash.new()\nmd4:update \"te\"\nmd4:update \"st\"\nlocal dgst = md4:digest()\n```\n\n#### MD5\n\n```lua\nlocal hash = require \"resty.nettle.md5\"\nlocal dgst = hash \"test\"\n-- or\nlocal md5 = hash.new()\nmd5:update \"te\"\nmd5:update \"st\"\nlocal dgst = md5:digest()\n```\n\n#### RIPEMD160\n\n```lua\nlocal hash = require \"resty.nettle.ripemd160\"\nlocal dgst = hash \"test\"\n-- or\nlocal ripe = hash.new()\nripe:update \"te\"\nripe:update \"st\"\nlocal dgst = ripe:digest()\n```\n\n#### SHA-1\n\n```lua\nlocal hash = require \"resty.nettle.sha1\"\nlocal dgst = hash \"test\"\n-- or\nlocal sha1 = hash.new()\nsha1:update \"te\"\nsha1:update \"st\"\nlocal dgst = sha1:digest()\n```\n\n#### GOSTHASH94\n\n```lua\nlocal hash = require \"resty.nettle.gosthash94\"\nlocal dgst = hash \"test\"\n-- or\nlocal gh94 = hash.new()\ngh94:update \"te\"\ngh94:update \"st\"\nlocal dgst = gh94:digest()\n```\n\n## Keyed Hash Functions\n\n#### HMAC-MD5\n#### HMAC-RIPEMD160\n#### HMAC-SHA1\n#### HMAC-SHA256\n#### HMAC-SHA512\n#### UMAC\n#### CMAC\n#### Poly1305\n\n## Key Derivation Functions\n\n#### HKDF\n#### PBKDF2-HMAC-SHA1\n#### PBKDF2-HMAC-SHA256\n\n## Cipher Functions\n\n#### AES\n#### ARCFOUR\n#### ARCTWO\n#### BLOWFISH\n#### Camellia\n#### CAST128\n#### ChaCha\n#### DES\n#### DES3\n#### Salsa20\n#### SERPENT\n#### TWOFISH\n\n## Cipher Modes\n\n#### Cipher Block Chaining (CBC)\n#### Counter Mode (CTR)\n#### Cipher Feedback Mode (CFB)\n#### XEX-based tweaked-codebook Mode with Ciphertext Stealing (XTS)\n\n## Authenticated Encryption with Associated Data\n\n#### EAX\n#### Galois Counter Mode (GCM)\n#### Counter with CBC-MAC Mode (CCM)\n#### ChaCha-Poly1305\n\n## Asymmentric Encryption (aka Public Key Encryption)\n\n#### RSA\n#### RSA PSS\n#### DSA\n#### ECDSA\n#### EdDSA\n\n## Randomness\n\n#### Yarrow\n#### Knuth LFIB (a \"lagged fibonacci\" pseudorandomness generator)\n\n## ASCII Encoding\n\n#### Base64\n#### Base16\n\n## Changes\n\nThe changes of every release of this module is recorded in [Changes.md](https://github.com/bungle/lua-resty-nettle/blob/master/Changes.md) file.\n\n## License\n\n`lua-resty-nettle` uses two clause BSD license.\n\n```\nCopyright (c) 2014 \u2013 2021, Aapo Talvensaari\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n"
 },
 {
  "repo": "SideChannelMarvels/Deadpool",
  "language": "C",
  "readme_contents": "# Deadpool\n*Our hero took the name Deadpool during the time he was experimented on:  \nThe guards had a dead pool and gambled on which test subject would die next...  \nBy the way, in the comics, the white boxes are Deadpool's crazy alternative inner voice.*\n\nDeadpool is a repository of various public white-box cryptographic implementations and their practical attacks.\n\n## Attacks\n\n### [Differential Computation Analysis](README_dca.md)\n\n### [Differential Fault Analysis](README_dfa.md)\n\n## White-box implementations\n\n### [Wyseur 2007 challenge](wbs_des_wyseur2007)\n\nA Linux binary implementing a DES.\n\n### [Hack.lu 2009 challenge](wbs_aes_hacklu2009)\n\nA Windows binary implementing an AES 128.\n\n### [Karroumi 2010 challenge](wbs_aes_karroumi2010)\n\nA Linux binary implementing an AES 128.\n\n### [SSTIC 2012 challenge](wbs_des_sstic2012)\n\nA Python serialized object implementing a DES.\n\n### [NoSuchCon 2013 challenge](wbs_aes_nsc2013)\n\nA Windows binary implementing an AES 128 with uncompensated external encodings.\n\n### [NoSuchCon 2013 variants](wbs_aes_nsc2013_variants)\n\nVariants of the NoSuchCon 2013 challenge, using the same white-box generator but compiled for Linux, without obfuscation and with compensated external encodings.\n\n### [PlaidCTF 2013 challenge](wbs_aes_plaidctf2013)\n\nA Linux binary implementing an AES 128.\n\n### [CHES 2015 challenge](wbs_aes_ches2015)\n\nA GameBoy ROM implementing an AES 128.\n\n### [OpenWhiteBox AES Chow](wbs_aes_openwhitebox_chow)\n\nAn implementation of Chow written in Go, implementing an AES 128.\n\n### [OpenWhiteBox AES Xiao-Lai](wbs_aes_openwhitebox_xiaolai)\n\nAn implementation of Xiao-Lai written in Go, implementing an AES 128.\n\n### [OpenWhiteBox AES Full](wbs_aes_openwhitebox_full)\n\nAn implementation of OpenWhiteBox paper written in Go, implementing an AES 128.\n\n### [CHES 2016 challenge](wbs_aes_ches2016)\n\nA Linux binary (and source) implementing an AES 128.\n\n### [Kryptologik challenge](wbs_aes_kryptologik)\n\nA JavaScript implementing an AES 256 with diversified round keys.\n\n### [Lee CASE1 challenge](wbs_aes_lee_case1)\n\nA Linux binary implementing an AES 128.\n\n### [RHME3 prequal whitebox challenge](wbs_aes_rhme3_prequal)\n\nA Linux binary implementing an AES 128.\n\n### [White Magic challenge](wbs_xxx_whitemagic)\n\nA linux binary implementing ... (CTF still open)\n\n## Misc\n\n### [RHME3 prequal SCA challenge](sca_aes_rhme3_prequal)\n"
 },
 {
  "repo": "SpinalHDL/SpinalCrypto",
  "language": "Scala",
  "readme_contents": "# SpinalCrypto\n\nThis repository contains cryptographic Spinal IPs. This work is currently in progress.  \n\n\n## IP available\n\n\n### Symmetric\n\n- Block Cipher Mode of Operation (BCMO) (ECB, CBC, CFB, OFB)\n- AESCore_Std (128/192/256-bit)\n- DESCore_Std\n- TripleDESCore_Std\n- TwofishCore_Std (128/192/256-bit)\n\n\n### Hash\n\n- MD5Core_Std\n- SHA2Core_Std\n- SHA3Core_Std\n\n\n### MAC\n\n- HMACCore_Std (tested with MD5)\n\n\n### Checksum\n\n- CRC (CRC8, CRC16, CRC32)\n\n\n### Misc\n\n- LFSR (Galois & Fibonacci)\n- Keccak\n\n\n\n## Documentation\n\nDocumentation is available on the [wiki](https://github.com/SpinalHDL/SpinalCrypto/wiki) page. \n\n"
 },
 {
  "repo": "jchook/uuid-random",
  "language": "JavaScript",
  "readme_contents": "# uuid-random\n\n[![MIT Licence](https://img.shields.io/badge/License-MIT-informational)](LICENSE.txt)\n[![Stable](https://img.shields.io/badge/Stable-1.3.0-brightgreen)](https://github.com/jchook/uuid-random/releases)\n\nGenerate RFC-4122 compliant [random UUIDs](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29) (version 4) with better [statistical dispersion](https://en.wikipedia.org/wiki/Statistical_dispersion) than `Math.random()`.\n\n\n\n## Install\n\n```sh\nnpm i uuid-random\n```\n\nOr download the [latest release](https://github.com/jchook/uuid-random/releases).\n\n## Features\n\n  * Tiny (0.6k minified + gzipped)\n  * Uses [cryptographic randomness](http://caniuse.com/#feat=getrandomvalues) when possible\n  * Very fast!\n\n\n## Compatibility\n\nCompatible with almost all versions of:\n\n- Node\n- Babel\n- TypeScript\n- Web browsers\n\n## Performance\n\nThe included `benchmark.js` as well as [independent benchmarks](https://github.com/aarondcohen/benchmark-guid) rank this library as the _fastest_ pure JS UUID v4 generator available with cryptographically secure PRNG\u2014 almost **20x faster** than the most popular library (using latest NodeJS).\n\n| npm package     | performance     |\n|-----------------|-----------------|\n| portable-uuid   | 354k ops/sec    |\n| uuid            | 474k ops/sec    |\n| id128           | 6.0M ops/sec    |\n| **uuid-random** <small>(this)</small> | **9.7M ops/sec**  |\n\n*Results above generated on a 4.20GHz Intel i7-7700K with Node v12.18.0*\n\n## Why use UUID?\n\n**U**niversally **U**nique **ID**entifiers transcend many constraints of traditional incremental integer IDs, especially in distributed systems. In UUID version 4, we essentially generate a random 128-bit value.\n\nWe do trade guaranteed uniqueness for __extremely__ probable uniqueness (you would need to do-loop `uuid()` at max speed for 73,067 years for a 50% chance of **one** collision). But for that slight cost, we may now generate valid, unique, persistent IDs on any node of a distributed system (e.g. intermittently offline or high-latency clients).\n\n_Note, if you plan to use UUIDs for a new project, depending on your requirements, you may consider a more recent standard that addresses some of the shortcomings of UUID, such as [flake-id](https://github.com/T-PWK/flake-idgen), [nanoid](https://github.com/ai/nanoid), [cuid](https://github.com/ericelliott/cuid), or [ulid](https://github.com/ulid/spec)._\n\n\n## Example Usage\n\n### Babel\n\n```javascript\nimport uuid from 'uuid-random';\nuuid(); // 'f32dc9ae-7ca8-44ca-8f25-f258f7331c55'\n```\n\n### Node\n\n```javascript\nvar uuid = require('uuid-random');\nuuid(); // '0b99b82f-62cf-4275-88b3-de039020f14e'\n```\n\n### Browser\n\n```html\n<script src=\"uuid-random.min.js\"></script>\n<script>\n  uuid(); // 'b96ab5e6-f1e8-4653-ab08-4dd82ea65778'\n</script>\n```\n\n### Validate a UUID v4 String\n\n```javascript\nuuid.test('0b99b82f-62cf-4275-88b3-de039020f14e'); // true\n```\n\n### Generate Binary UUIDs\n\n```javascript\nuuid.bin(); // <Buffer 41 db 10 54 b3 61 48 50 87 f1 2f 7b 08 a5 0f 06>\n```\n\n\n## Contributing\n\nFeel free to [open an issue](https://github.com/jchook/uuid-random/issues) or submit a [pull request](https://github.com/jchook/uuid-random/pulls).\n\n## License\n\nMIT.\n"
 },
 {
  "repo": "google-pay/payment-data-cryptography-dotnet",
  "language": "C#",
  "readme_contents": "# Google Pay - payment data cryptography in C#\n\n## Overview\n\n.NET idiomatic library that performs the steps outlined in [Payment data cryptography](https://developers.google.com/pay/api/web/guides/resources/payment-data-cryptography).\nIt allows you to decrypt and verify a `PaymentMethodToken` object generated by\nthe Google Pay API. It supports versions `ECv1` and `ECv2`.\n\nInternally, it relies on [Bouncy Castle C#](https://www.bouncycastle.org/csharp/index.html)\nand has no other external dependencies.\n\n## Sample use\n\n### Decrypt payment messages\n```csharp\n// To use INSTANCE_TEST, set the parameter to true\nvar keyProvider = new GooglePay.PaymentDataCryptography.GoogleKeyProvider(false);\nvar parser = new GooglePay.PaymentDataCryptography.PaymentMethodTokenRecipient(\"merchant:YOUR_MERCHANT_ID\", keyProvider);\nparser.AddPrivateKey(PrivateKey1);\nparser.AddPrivateKey(PrivateKey2);\nstring decryptedMessage = parser.Unseal(encryptedMessage);\n```\n\n### Validate Pass callbacks:\n```csharp\nvar passCallbackValidator = new PassCallbackValidator();\nvar innerMessage = passCallbackValidator.Verify(\"YOUR_ISSUER_ID\", receivedCallbackMessage);\n```\n\n## Disclaimer\n\nThis is not an official Google product.\n\n[Tink](https://github.com/google/tink) is the library actively maintained and\nsupported by the Google Pay team. Using Tink to perform payment data\ncryptography for Google Pay is highly recommended.\n"
 },
 {
  "repo": "kasundezoysa/PracticalCrypto",
  "language": "Java",
  "readme_contents": "# PracticalCrypto\nPractical Cryptography Class\n"
 },
 {
  "repo": "dart-lang/crypto",
  "language": "Dart",
  "readme_contents": "# Cryptographic hashing functions for Dart\n\nA set of cryptographic hashing functions implemented in pure Dart\n\nThe following hashing algorithms are supported:\n\n* SHA-1\n* SHA-224\n* SHA-256\n* SHA-384\n* SHA-512\n* SHA-512/224\n* SHA-512/256\n* MD5\n* HMAC (i.e. HMAC-MD5, HMAC-SHA1, HMAC-SHA256)\n\n## Usage\n\n### Digest on a single input\n\nTo hash a list of bytes, invoke the [`convert`][convert] method on the\n[`sha1`][sha1-obj], [`sha256`][sha256-obj] or [`md5`][md5-obj]\nobjects.\n\n```dart\nimport 'package:crypto/crypto.dart';\nimport 'dart:convert'; // for the utf8.encode method\n\nvoid main() {\n  var bytes = utf8.encode(\"foobar\"); // data being hashed\n\n  var digest = sha1.convert(bytes);\n\n  print(\"Digest as bytes: ${digest.bytes}\");\n  print(\"Digest as hex string: $digest\");\n}\n```\n\n### Digest on chunked input\n\nIf the input data is not available as a _single_ list of bytes, use\nthe chunked conversion approach.\n\nInvoke the [`startChunkedConversion`][startChunkedConversion] method\nto create a sink for the input data. On the sink, invoke the `add`\nmethod for each chunk of input data, and invoke the `close` method\nwhen all the chunks have been added. The digest can then be retrieved\nfrom the `Sink<Digest>` used to create the input data sink.\n\n```dart\nimport 'dart:convert';\nimport 'package:convert/convert.dart';\nimport 'package:crypto/crypto.dart';\n\nvoid main() {\n  var firstChunk = utf8.encode(\"foo\");\n  var secondChunk = utf8.encode(\"bar\");\n\n  var output = AccumulatorSink<Digest>();\n  var input = sha1.startChunkedConversion(output);\n  input.add(firstChunk);\n  input.add(secondChunk); // call `add` for every chunk of input data\n  input.close();\n  var digest = output.events.single;\n\n  print(\"Digest as bytes: ${digest.bytes}\");\n  print(\"Digest as hex string: $digest\");\n}\n```\n\nThe above example uses the `AccumulatorSink` class that comes with the\n_convert_ package. It is capable of accumulating multiple events, but\nin this usage only a single `Digest` is added to it when the data sink's\n`close` method is invoked.\n\n### HMAC\n\nCreate an instance of the [`Hmac`][Hmac] class with the hash function\nand secret key being used.  The object can then be used like the other\nhash calculating objects.\n\n```dart\nimport 'dart:convert';\nimport 'package:crypto/crypto.dart';\n\nvoid main() {\n  var key = utf8.encode('p@ssw0rd');\n  var bytes = utf8.encode(\"foobar\");\n\n  var hmacSha256 = Hmac(sha256, key); // HMAC-SHA256\n  var digest = hmacSha256.convert(bytes);\n\n  print(\"HMAC digest as bytes: ${digest.bytes}\");\n  print(\"HMAC digest as hex string: $digest\");\n}\n```\n\n## Disclaimer\n\nSupport for this library is given as _best effort_.\n\nThis library has not been reviewed or vetted by security professionals.\n\n[convert]: https://pub.dev/documentation/crypto/latest/crypto/Hash/convert.html\n[Digest]: https://pub.dev/documentation/crypto/latest/crypto/Digest-class.html\n[Hmac]: https://pub.dev/documentation/crypto/latest/crypto/Hmac-class.html\n[md5-obj]: https://pub.dev/documentation/crypto/latest/crypto/md5-constant.html\n[sha1-obj]: https://pub.dev/documentation/crypto/latest/crypto/sha1-constant.html\n[sha256-obj]: https://pub.dev/documentation/crypto/latest/crypto/sha256-constant.html\n[startChunkedConversion]: https://pub.dev/documentation/crypto/latest/crypto/Hash/startChunkedConversion.html\n"
 },
 {
  "repo": "dsprenkels/sss",
  "language": "C",
  "readme_contents": "# Shamir secret sharing library\n\n[![Build Status](https://travis-ci.org/dsprenkels/sss.svg?branch=master)](https://travis-ci.org/dsprenkels/sss)\n\n`sss` is a library that exposes an API to split secret data buffers into\na number of different _shares_. With the possession of some or all of these\nshares, the original secret can be restored. It is the schoolbook example of\na cryptographic _threshold scheme_. This library has a [command line\ninterface][sss-cli]. ([web demo])\n\n[sss-cli]: https://github.com/dsprenkels/sss-cli\n\n## Table of contents\n\n1. [Introduction](#introduction)\n2. [Download](#download)\n3. [Usage](#usage)\n\t1. [Example](#example)\n  \t2. [How to Run Program (above)](#How-to-Run-program-(above))\n4. [Bindings](#bindings)\n5. [Technical details](#technical-details)\n6. [Comparison of secret sharing libraries](#comparison-of-secret-sharing-libraries)\n7. [Questions](#questions)\n\n## Introduction\n\nAn example use case is a beer brewery which has a vault which contains their\nprecious super secret recipe. The 5 board members of this brewery do not trust\nall the others well enough that they won't secretly break into the vault and\nsell the recipe to a competitor. So they split the code into 5 shares, and\nallow 4 shares to restore the original code. Now they are sure that the\nmajority of the staff will know when the vault is opened, but they can still\nopen the vault when one of the staff members is abroad or sick at home.\n\nAs often with crypto libraries, there is a lot of Shamir secret sharing code\naround that *does not meet cryptographic standards* (a.k.a. is insecure).\nSome details\u2014like integrity checks and side-channel resistance\u2014are often\nforgotten. But these slip-ups can often fully compromise the security of the\nscheme.\nWith this in mind, I have made this library to:\n- Be side channel resistant (timing, branch, cache)\n- Secure the shared secret with a MAC\n- Use the platform (OS) randomness source\n\nIt should be safe to use this library in \"the real world\". I currently regard\nthe API as being stable. Should there be any breaking changes, then I will\nupdate the version number conforming to the [semantic versioning spec][semver].\n\n[semver]: http://semver.org/\n\n## Download\n\nI have released version 0.1.0 of this library, which can be downloaded from\nthe [releases](https://github.com/dsprenkels/sss/releases) page. However, I\nactually recommend cloning the library with git, to also get the necesarry\nsubmodules:\n\n```shell\ngit clone --recursive https://github.com/dsprenkels/sss.git\n```\n\nThe current version is version 0.1.0, which should be stable enough for now.\nThe functionality may still change before version 1.0.0, although I will\nstill fix any security issues before that.\n\n## Usage\n\nSecrets are provided as arrays of 64 bytes long. This should be big enough to\nstore generally small secrets. If you wish to split larger chunks of data, you\ncan use symmetric encryption and split the key instead. Shares are generated\nfrom secret data using `sss_create_shares` and shares can be combined again\nusing the `sss_combine_shares` functions. The shares are octet strings of\n113 bytes each.\n\nThis library is implemented in such a way that the maximum number of shares\nis 255.\n\nMoreover, every share includes an ID, which is implemented as a counter.\nThis ID is not considered a secret by the library, and an participants may be\nable to infer the amount of shares from these ids (for example, if I have a\nshare with ID=3, I expect that ID\u2208{1,2} will also exist.\nIf you require random share IDs, then you should generate 255 different\nshares, and randomly throw away the excess shares.\n\n### Example\n\n```c\n#include \"sss.h\"\n#include \"randombytes.h\"\n#include <assert.h>\n#include <string.h>\n\nint main()\n{\n\tuint8_t data[sss_MLEN], restored[sss_MLEN];\n\tsss_Share shares[5];\n\tsize_t idx;\n\tint tmp;\n\n\t// Read a message to be shared\n\tstrncpy(data, \"Tyler Durden isn't real.\", sizeof(data));\n\n\t// Split the secret into 5 shares (with a recombination theshold of 4)\n\tsss_create_shares(shares, data, 5, 4);\n\n\t// Combine some of the shares to restore the original secret\n\ttmp = sss_combine_shares(restored, shares, 4);\n\tassert(tmp == 0);\n\tassert(memcmp(restored, data, sss_MLEN) == 0);\n}\n```\n\n## How to Run program (above)\n\n1. clone from git by bellow command. (As It is recommended. If you clone make sure that file under subdirectory also came with it)\n```shell\ngit clone --recursive https://github.com/dsprenkels/sss.git\n```\n\n2. go inside sss directory and run make command\n```shell\nmake\n```\n\n3. copy the example provided in readme as above and save it as demo.c\n\n4. compile demo.c by running bellow commnad\n```shell\ngcc demo.c -o demo randombytes.o sss.o hazmat.o tweetnacl.o\n```\n\n5. execute program by bellow command\n```shell\n./demo\n```\n\n## Bindings\n\nI have currently written bindings for the following languages:\n\n- [Node.js](https://github.com/dsprenkels/sss-node)\n- [Go](https://github.com/dsprenkels/sss-go)\n- [Rust](https://github.com/dsprenkels/sss-rs)\n- [WASM](https://github.com/3box/sss-wasm)\n- [Android](https://github.com/dsprenkels/sss-android)\u00b9\n- [Haskell](https://github.com/dsprenkels/sss-hs)\u00b9\n- [Swift](https://github.com/dsprenkels/sss-swift)\u00b9\n> \u00b9 No releases yet.\n\nThere are also contributed bindings:\n\n- [Nim](https://github.com/markspanbroek/sss.nim)\n- [Erlang](https://github.com/arekinath/esss)\n\n## Technical details\n\nShamir secret sharing works by generating a polynomial (e.g. _33x\u00b3 + 8x\u00b2 + 29x +\n42_). The lowest term is the secret and is just filled in. All the\nother terms are generated randomly. Then we can pick points on the polynomial\nby filling in values for _x_. Each point is put in a share. Afterwards, with _k_\npoints we can use interpolation to restore a _k_-degree polynomial.\n\nIn practice there is a wrapper around the secret-sharing part (this is done\nbecause of crypto-technical reasons). This wrapper uses the XSalsa20/Poly1305\nauthenticated encryption scheme. Because of this, the shares are always a little\nbit larger than the original data.\n\nThis library uses a custom [`randombytes`][randombytes] function to generate a\nrandom encapsulation key, which talks directly to the operating system. When\nusing the high level API, you are not allowed to choose your own key. It _must_\nbe uniformly random, because regularities in shared secrets can be exploited.\n\nWith the low level API (`hazmat.h`) you _can_ choose to secret-share a piece of\ndata of exactly 32 bytes. This produces a set of shares that are much shorter\nthan the high-level shares (namely 33 bytes each). However, keep in mind that\nthis module is called `hazmat.h` (for \"hazardous materials\") for a reason.\nPlease only use this if you _really_ know what you are doing. Raw \"textbook\"\nShamir secret sharing is only safe when using a uniformly random secret (with\n128 bits of entropy). Note also that it is entirely insecure for integrity.\nPlease do not use the low-level API unless you _really_ have no other choice.\n\n## Comparison of secret-sharing libraries\n\nIf you would like your library to be added here, please open a pull request. :)\n\n| Library         | Side-channels | Tamper-resistant | Secret length |\n|-----------------|---------------|------------------|---------------|\n| [B. Poettering] | Insecure\u00b9     | Insecure         | 128 bytes     |\n| [libgfshare]    | Insecure\u00b2     | Insecure         | \u221e             |\n| [blockstack]    | ??\u00b3           | Insecure         | 160 bytes     |\n| [sssa-golang]   | Secure        | Secure\u2074          | \u221e             |\n| [sssa-ruby]     | ??\u00b3           | Secure\u2074          | \u221e             |\n| [snipsco]       | Secure        | Insecure         | Note\u2076         |\n| [c-sss]         | Insecure\u2077     | Insecure         | \u221e             |\n| [timtiemens]    | Insecure\u2078     | Note\u2079            | 512 bytes     |\n| [dsprenkels]    | Secure        | Secure\u2075          | 64 bytes      |\n\n### Notes\n\nIt is important to note that a limited secret length does not mean\nthat it is impossible to share longer secrets. The way this is done is\nby secret sharing a random key and using this key to encrypt the real\nsecret. This is a lot faster and the security is not reduced. (This is\nactually how [sss-cli] produces variable-length shares.)\n\n1. Uses the GNU gmp library.\n2. Uses lookup tables for GF(256) multiplication.\n3. This library is implemented in a high level scripting library which does not\n   guarantee that its basic operators execute in constant-time.\n4. Uses randomized *x*-coordinates.\n5. Uses randomized *y*-coordinates.\n6. When using the [snipsco] library you will have to specify your own prime.\n   Computation time is _O(p\u00b2)_, so on a normal computer you will be limited to\n   a secret size of ~1024 bytes.\n7. As mentioned by the [documentation](https://github.com/fletcher/c-sss#security-issues).\n8. Uses Java `BigInteger` class.\n9. Basic usage of this tool does not protect the integrity of the secrets.\n   However, the project's readme file advises the user to use a hybrid\n   encryption scheme and secret share the key. Through destroying the ephemeral\n   key, the example that is listed in the readme file protects prevents an\n   attacker from arbitrarily inserting a secret. However, inserting a garbled\n   secret is still possible. To prevent this the user should use a AEAD scheme\n   (like AES-GCM or ChaCha20-Poly1305) instead of AES-CBC.\n\n[B. Poettering]: http://point-at-infinity.org/ssss/\n[libgfshare]: https://github.com/jcushman/libgfshare\n[blockstack]: https://github.com/blockstack/secret-sharing\n[sssa-golang]: https://github.com/SSSaaS/sssa-golang\n[sssa-ruby]: https://github.com/SSSaaS/sssa-ruby\n[snipsco]: https://github.com/snipsco/rust-threshold-secret-sharing\n[c-sss]: https://github.com/fletcher/c-sss\n[timtiemens]: https://github.com/timtiemens/secretshare\n[dsprenkels]: https://github.com/dsprenkels/sss\n\n\n## Questions\n\n### I do not know a lot about secret sharing. Is Shamir secret sharing useful for me?\n\nIt depends. In the case of threshold schemes (that's what this is) there are\ntwo types:\n\n1. The share-holders _cannot_ verify that their shares are valid.\n2. The share-holders _can_ verify that their shares are valid.\n\nShamir's scheme is of the first type. This immediately implies that the dealer\ncould cheat. Indeed, they can distribute a number of shares which are just\nrandom strings. The only way the participants could know is by banding together\nand trying to restore the secret. This would show the secret, which would make\nthe scheme totally pointless.\n\n**Use Shamir secret sharing only if the dealer _and_ the participants have no\nreason to corrupt any shares.**\n\nExamples where this is _not_ the case:\n\n- When the secret hides something that is embarrasing for one of the\n  participants.\n- When the shared secret is something like a testament, and the participants\n  are the heirs. If one of the heirs inherits more wealth when the secret is\n  not disclosed, they can corrupt their share (and it would be impossible to\n  check this from the share alone).\n\nIn these cases, you will need a scheme of the second type. See the next\nquestion.\n\n### Wait, I need verifiable shares! What should I use instead?\n\nThere are two straightforward options:\n\n1. When the secret is fully random\u2014for example, a cryptographic key\u2014use\n   **Feldman verifiable secret sharing**.\n2. When the secret is not fully random\u2014it _could_ be a message, a number,\n   etc.\u2014use **Pedersen verifiable secret sharing**.\n\n### Other\n\nFor other questions, feel free to open an issue or send me an email on my Github\nassociated e-mail address.\n\n[web demo]: http://bakaoh.com/sss-wasm/\n[randombytes]: https://github.com/dsprenkels/randombytes\n"
 },
 {
  "repo": "guyoung/CaptfEncoder",
  "language": "JavaScript",
  "readme_contents": "<div align=\"center\">\n\n[![CaptfEncoder Logo](https://github.com/guyoung/CaptfEncoder/raw/master/images/captfencoder-log-1.png)](https://github.com/guyoung/CaptfEncoder)\n\n<h1 align=\"center\">CaptfEncoder</h1>\n\n[![GitHub release](https://img.shields.io/github/release/guyoung/CaptfEncoder.svg)](https://github.com/guyoung/CaptfEncoder/releases/latest)\n\n\n[English](https://github.com/guyoung/CaptfEncoder/blob/master/README.md) | [\u4e2d\u6587](https://github.com/guyoung/CaptfEncoder/blob/master/README-zh.md)\n\n\n</div>\n\n---\n\nCaptfEncoder \u662f\u4e00\u6b3e\u8de8\u5e73\u53f0\u7f51\u7edc\u5b89\u5168\u5de5\u5177\u5957\u4ef6\uff0c\u63d0\u4f9b\u7f51\u7edc\u5b89\u5168\u76f8\u5173\u7f16\u7801\u8f6c\u6362\u3001\u53e4\u5178\u5bc6\u7801\u3001\u5bc6\u7801\u5b66\u3001\u516c\u94a5\u52a0\u5bc6\u3001\u805a\u5408\u67e5\u8be2\u3001\u6742\u9879\u7b49\u591a\u79cd\u5b9e\u7528\u5de5\u5177\u3002\n\nCaptfEncoder V3 \u7248\u672c\u4f7f\u7528Rust\u5f00\u53d1\uff0c\u53ef\u6267\u884c\u7a0b\u5e8f\u4f53\u79ef\u5c0f\uff0c\u901f\u5ea6\u66f4\u5feb\u3001\u6027\u80fd\u66f4\u4f18\u3001\u529f\u80fd\u66f4\u5f3a\u3002 \n\n\n![CaptfEncoder screenshot](https://github.com/guyoung/CaptfEncoder/raw/master/images/captfencoder-v3-screenshot-1.png)\n\nCaptfEncoder V3 \u7248\u672c\u652f\u6301\u811a\u672c\u6269\u5c55\u3002\n\n![CaptfEncoder screenshot](https://github.com/guyoung/CaptfEncoder/raw/master/images/captfencoder-v3-scripts-creenshot-1.png)\n\n## \u652f\u6301\u64cd\u4f5c\u7cfb\u7edf\n\n * Windows\n * MacOS\n * Linux\uff08Centos\u3001Ubuntu\u7b49\uff09\n\n\n\nMac OS \u8fd0\u884c\u622a\u56fe\n\n![CaptfEncoder screenshot](https://github.com/guyoung/CaptfEncoder/raw/master/images/captfencoder-v3-screenshot-2.png)\n\n\nUbuntu 20 \u8fd0\u884c\u622a\u56fe\n\n![CaptfEncoder screenshot](https://github.com/guyoung/CaptfEncoder/raw/master/images/captfencoder-v3-screenshot-3.png)\n\nCentos 7 \u8fd0\u884c\u622a\u56fe\n\n![CaptfEncoder screenshot](https://github.com/guyoung/CaptfEncoder/raw/master/images/captfencoder-v3-screenshot-4.png)\n\n\n## \u4f7f\u7528\n\n### \u76f4\u63a5\u4e0b\u8f7d\u53ef\u6267\u884c\u7a0b\u5e8f\n\n * <https://github.com/guyoung/CaptfEncoder/releases>\n * \u767e\u5ea6\u7f51\u76d8 <https://pan.baidu.com/s/1q2N1w44bvYIXLe5gCI5oKA> \u5bc6\u7801\uff1ak5b9\n \n\n## \u529f\u80fd\u4ecb\u7ecd\n\n * \u7f16\u7801\u8f6c\u6362\n   * Ascii \u7f16\u7801\n   * Hex \u7f16\u7801\n   * Base64 \u7f16\u7801\n   * Base16 \u7f16\u7801\n   * Base32 \u7f16\u7801\n   * Base\u7cfb\u5217\u7f16\u7801(Base58,Base62,Base62,Base85,Base91,Base92)\n   * Url \u7f16\u7801  \n   * Html entity \u7f16\u7801\n   * Shellcode \u7f16\u7801 \n   * Unicode \u7f16\u7801   \n   * \u83ab\u5c14\u65af\u7535\u7801\n   * Punycode \u7f16\u7801\n   * Quoted-printable \u7f16\u7801\n   * Tap code \u7f16\u7801\n   * Uuencode \u7f16\u7801\n   * Brainfuck \u7f16\u7801\n\n\n * \u53e4\u5178\u5bc6\u7801\n   * ADFGX \u5bc6\u7801\n   * ADFGVX \u5bc6\u7801\n   * Affine(\u4eff\u5c04\u5bc6\u7801)\n   * Atbash(\u57c3\u7279\u5df4\u4ec0\u7801)\n   * Autokey(\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801)\n   * Baconian(\u57f9\u6839\u5bc6\u7801)\n   * Beaufort(\u535a\u798f\u7279\u5bc6\u7801)\n   * Caesar(\u51ef\u6492\u5bc6\u7801)\n   * Columnar Transposition(\u5217\u79fb\u4f4d\u5bc6\u7801)\n   * Four Square(\u56db\u65b9\u5bc6\u7801)\n   * Fractionated Morse(\u5206\u7ec4\u6469\u5c14\u65af\u66ff\u6362\u5bc6\u7801)\n   * Hill(\u5e0c\u5c14\u5bc6\u7801)\n   * Playfair(\u666e\u83b1\u83f2\u5c14\u5bc6\u7801)\n   * Polybius Square(\u6ce2\u5229\u6bd4\u5965\u65af\u65b9\u9635\u5bc6\u7801)\n   * Porta \u5bc6\u7801\n   * Rail-fence(\u6805\u680f\u5bc6\u7801)\n   * ROT13 \u5bc6\u7801\n   * Running Key(\u6eda\u52a8\u5bc6\u94a5\u5bc6\u7801)\n   * Scytale \u5bc6\u7801\n   * Simple Substitution(\u7b80\u5355\u66ff\u6362\u5bc6\u7801)   \n   * Vigenere(\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801)  \n\n * \u5bc6\u7801\u5b66  \n   * MD5\n   * MD2\n   * MD4\n   * RIPEMD\u7cfb\u5217(RIPEMD-128,RIPEMD-160,RIPEMD-256,RIPEMD-320)\n   * SHA 1\n   * SHA 256\n   * SHA \u7cfb\u5217(SHA 224,SHA384,SHA512,SHA3-224,SHA3-256,SHA3-384,SHA3-512)\n   * Whirlpool\n   * HMAC\n   * AES-128\n   * DES\n   * Blowfish \n   * RC2\n   * RC4  \n   * SM3\n   * SM4\n   * Bcrypt\n   * Scrypt\n\n * \u975e\u5bf9\u79f0\u52a0\u5bc6\n   * RSA \u751f\u6210\u5bc6\u94a5\n   * RSA \u52a0\u89e3\u5bc6 \n \n * \u805a\u5408\u67e5\u8be2(\u9700\u8054\u7f51) \n   * Factordb\n   * Whois\n   * crt.sh\n   * DNS Lookup\n   * DNS Dumpster\n   * GeoPing\n   * IP info\n   * IP Whois\n   * IP ASN\n   * BGP View\n   * Censys \n\n * \u6742\u9879\n   * \u6587\u4ef6 Hash\n   * \u6587\u4ef6\u7c7b\u578b\n   * \u56fe\u7247Exif\n   * Base64 \u56fe\u7247\u7f16\u7801/\u89e3\u7801\n   * QR Code(\u4e8c\u7ef4\u7801)\u7f16\u7801/\u89e3\u7801\n   * \u7f51\u7edc CIDR \u8ba1\u7b97\n   * Ping\n   * \u7aef\u53e3\u626b\u63cf    \n\n## \u65e7\u7248\u56de\u987e\n\n * CaptfEncoder V1(\u5df2\u5f00\u6e90) <https://github.com/guyoung/CaptfEncoder/tree/master/CaptfEncoder-V1>\n * CaptfEncoder V2 <https://github.com/guyoung/CaptfEncoder/tree/master/CaptfEncoder-V2>\n\n\n## \u9879\u76ee\u7f51\u7ad9\n\n * <https://github.com/guyoung/CaptfEncoder>\n\n## \u4e0b\u8f7d\u8f6f\u4ef6\n\n * <https://github.com/guyoung/CaptfEncoder/releases>\n * \u767e\u5ea6\u7f51\u76d8 <https://pan.baidu.com/s/1q2N1w44bvYIXLe5gCI5oKA> \u5bc6\u7801\uff1ak5b9\n\n\n------------------------------------------------\n\n**\u5173\u6ce8\u5fae\u4fe1\u516c\u4f17\u53f7\uff0c\u83b7\u53d6\u8f6f\u4ef6\u6700\u65b0\u6d88\u606f**\n\n![\u5fae\u4fe1\u516c\u4f17\u53f7](https://mmbiz.qlogo.cn/mmbiz_jpg/5IMiaY073fa7zxH6f5q5EticlwZPsYQtUnpYHspNiczmNyjtCXnR7LAmvpstK4EycfzIQkciboLh1qtWRcCibEPuDhA/0?wx_fmt=jpeg)\n"
 },
 {
  "repo": "Jwomers/many-time-pad-attack",
  "language": "Python",
  "readme_contents": "# Attacking A Many Time Pad - Cryptography\n\nThis code investigates the properties of the one time pad - specifically that it can easily be broken if the same key is used more than once!\n\nGiven 10 ciphertexts encrypted using the same key, we can break the encryption, and generate all the plaintexts\n\n# License\n\nMIT License\n\nCopyright (c) 2017 Justin Womersley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
 },
 {
  "repo": "mithi/simple-cryptography",
  "language": "Python",
  "readme_contents": "# [\ud83d\udc33](https://mithi.github.io/deep-blueberry) [\u2615\ufe0f](https://ko-fi.com/minimithi)\n\n# About\n- Python scripts that illustrate basic cryptography concepts based on Coursera Standford Cryptography I course and more\n- Each has tests, notes and detailed explanations in the hopes that you can clearly understand what's happening\n- The references section of this README links to awesome websites you can use for learning cryptography\n\n### 1. [Many Time Pad](./01-many-time-pad/)\n- This script will be able to decrypt a target ciphertext, given a bunch on intercepted ciphertexts encrypted with the same key (which may or may not have random errors). A stream cipher key should never be used more than once.\n\n### 2. [Block Ciphers](./02-block-ciphers/)\n- You'll be able to encrypt or decrypt a message given a key using two modes of block cipher operations; CBC mode and CTR mode.\n\n### 3. [Simple File Authentication System](./03-file-authentication/)\n- A simple file authentication system that simulate how you'd be able to authenticate and play video chunks as they are downloaded without having to wait for the entire file.\n\n### 4. [Padding Oracle Attack](./04-padding-oracle/)\n- This script illustrates how you'd be able to decrypt an intercepted ciphertext if the receiver reveals whether a sent ciphertext is of valid format or not.\n\n### 5.  [Meet In the Middle Attack](./05-meet-in-the-middle/)\n- The meet-in-the-middle attack (MITM) is a generic space\u2013time tradeoff cryptographic attack. We demonstrate the MITM attack by using it to solve a discrete log problem.\n\n### 6. [Factoring Challenges](./06-factoring/)\n- RSA can be broken when the public modulus `N` is generated incorrectly. These scripts illustrate how you'd be able to factor `N` when `p` and `q` are close to each other.\n\n### 7. [Basic RSA](./07-basic-rsa/)\n - An example pipeline that demonstrates basic RSA encryption and decryption.\n \n# References\n- [\u2764\ufe0f Crypto Hack](https://cryptohack.org/)\n- [Coursera Cryptography I, Stanford, Dan Boneh](https://www-origin.coursera.org/learn/crypto)\n- [A Graduate Course in Applied Cryptography by Dan Boneh and Victor Shoup](https://toc.cryptobook.us/)\n- [Crypto 101 by Laurens Van Houtven](https://www.crypto101.io/)\n- [Crypto Pals Crypto Challenges](https://cryptopals.com/)\n\n# [\ud83d\udc33](https://mithi.github.io/deep-blueberry) [\u2615\ufe0f](https://ko-fi.com/minimithi)\n"
 },
 {
  "repo": "ricmoo/GMEllipticCurveCrypto",
  "language": "Objective-C",
  "readme_contents": "Elliptic Curve Crypto\n=====================\n\nAn Objective-C library for Elliptic Curve Digital Signing Algorithm (ECDSA) and for Elliptic Curve Diffie-Hellman (ECDH).\n\nECDSA allows signatures to be generated using a private key and validated using a public key.\n\nECDH allows two identities to use their own private keys and each other's public key to generate a shared secret, which can then be used for encryption.\n\nThis library is largely based on the easy-ecc library (https://github.com/kmackay/easy-ecc).\n\n# Features\n\n* Supports: secp128r1, secp192r1, secp256r1, secp384r1\n* Automatically detects curve based on private or public key\n* Supports keys as raw bytes or as base64 encoded strings\n* BSD 2-clause license\n\n# API\n\n### Generate a new ECC key pair\n\n```objective-c\nGMEllipticCurveCrypto *crypto = [GMEllipticCurveCrypto generateKeyPairForCurve:\n                                                         GMEllipticCurveSecp192r1];\nNSLog(@\"Public Key: %@\", crypto.publicKeyBase64);\nNSLog(@\"Private Key: %@\", crypto.privateKeyBase64);\n```\n\n### Using keys\n\nKeys can be accessed and set interchangably in either raw bytes or as base64 encoded strings.\n\n```objective-c\ncrypto.publicKeyBase64 = @\"AtF8hCxh9h1zlExuOZutuw+tRzmk3zVdfA==\";\nNSLog(@\"Public Key: base64=%@, rawBinary=%@\", crypto.publicKeyBase64, crypto.publicKey);\n\nchar bytes[] = { 2, 209, 124, 132, 44, 97, 246, 29, 115, 148, 76, 110, 57, 155, 173, \n                 187, 15, 173, 71, 57, 164, 223, 53, 93, 124 };\ncrypto.publicKey = [NSData dataWithBytes:bytes length:25];\nNSLog(@\"Public Key: base64=%@, rawBinary=%@\", crypto.publicKeyBase64, crypto.publicKey);\n```\n\n\n### Generate a signature for a message\n\nThe signing operations require a message the same length as the curve; so generally, a hash algorithm is used to fix the original message's length.\n\nSignatures using ECDSA will be twice the curve size. So, the 192 bit curve will produce a signature that is 48 bytes (384 bits) long.\n\nAlso note that the signature is intentionally different each time because ECDSA uses a random _k_ value.\n\n```objective-c\n// The first 24 bytes of the SHA-256 hash for \"Hack the Planet!\"\nchar bytes[] = { 56, 164, 34, 250, 121, 21, 2, 18, 65, 4, 161, 90, 126, 145, 111, 204, \n                 151, 65, 181, 4, 231, 177, 117, 154 };\nNSData *messageHash = [NSData dataWithBytes:bytes length:24];\n        \nGMEllipticCurveCrypto *crypto = [GMEllipticCurveCrypto cryptoForCurve:\n                                                GMEllipticCurveSecp192r1];\ncrypto.privateKeyBase64 = @\"ENxb+5pCLAGT88vGmE6XLQRH1e8i/0rz\";\nNSData *signature = [crypto signatureForHash:messageHash];\nNSLog(@\"Signature: %@\", signature);\n```\n\n### Verify a signature\n\n```objective-c\n// messageHash and signature from above\n\ncrypto = [GMEllipticCurveCrypto cryptoForCurve:GMEllipticCurveSecp192r1];\ncrypto.publicKeyBase64 = @\"AtF8hCxh9h1zlExuOZutuw+tRzmk3zVdfA==\";;\nBOOL valid = [crypto verifySignature:signature forHash:messageHash];\nNSLog(@\"Valid Signature: %@\", (valid ? @\"YES\": @\"NO\"));\n```\n\n### Shared secret\n\nShared secrets using ECDH are the same length as the curve. So, the 192 bit curve will produce a shared secret that is 24 bytes (192 bits) long.\n\n```objective-c\nNSString *alicePublicKey = @\"A9N+XWIjLCYAwa8Hb7T6Rohttqo91CF8HQ==\";\nNSString *alicePrivateKey = @\"frs4puAKipcbevvwJb7l77xACgB/FyBv\";\n\nNSString *bobPublicKey = @\"A35aoteno4wnAdJgV8AXKKl1AfPVRrSZQA==\";\nNSString *bobPrivateKey = @\"LP83qv81MsXVyPOFV7V5jKVOoU4DKPUS\";\n\n\n// Alice performs...\nGMEllipticCurveCrypto *alice = [GMEllipticCurveCrypto cryptoForCurve:\n                                               GMEllipticCurveSecp192r1];\nalice.privateKeyBase64 = alicePrivateKey;\nNSData *aliceSharedSecret = [alice sharedSecretForPublicKeyBase64:bobPublicKey];\nNSLog(@\"Shared Secret Alice: %@\", aliceSharedSecret);\n\n// Bob performs...\nGMEllipticCurveCrypto *bob = [GMEllipticCurveCrypto cryptoForCurve:\n                                             GMEllipticCurveSecp192r1];\nbob.privateKeyBase64 = bobPrivateKey;\nNSData *bobSharedSecret = [bob sharedSecretForPublicKeyBase64:alicePublicKey];\nNSLog(@\"Shared Secret Bob: %@\", bobSharedSecret);\n\n// And now both parties have the same secret!\nNSLog(@\"Shared secrets equal? %d\", [aliceSharedSecret isEqualToData:bobSharedSecret]);\n\n```\n\n# Convenience functions\n\n### Automatically detects curve and sets up the private or public key\n\n```objective-c\n+ (GMEllipticCurveCrypto*)cryptoForKey: (NSData*)privateOrPublicKey;\n+ (GMEllipticCurveCrypto*)cryptoForKeyBase64: (NSString*)privateOrPublicKey;\n```\n\n\n### Automatically hash and compute the signature for a message\n\nInclude the `GMEllipticCurveCrypto+hash.h` category to hash data automatically before signing and verifying. The hash algorithm used must be at least the length of the curve. The hash will have the right-most bytes truncated, if necessary.\n\n```objective-c\n- (NSData*)hashSHA256AndSignData: (NSData*)data;\n- (BOOL)hashSHA256AndVerifySignature: (NSData*)signature forData: (NSData*)data;\n\n- (NSData*)hashSHA384AndSignData: (NSData*)data;\n- (BOOL)hashSHA384AndVerifySignature: (NSData*)signature forData: (NSData*)data;\n```\n\nWhy?\n----\n\nKenneth MacKay's easy-ecc is an awesome, simple-to-use implementation of essential Elliptic Curve Cryptographic functions, however, the curve used is specified as a compile-time constant, so it cannot be changed at runtime.\n\nThis library allows any and as many different curves to be used at once.\n\n\nDonations?\n----------\n\nSure! :-)\n\n_Bitcoin_  - `1LNdGsYtZXWeiKjGba7T997qvzrWqLXLma` \n\n"
 },
 {
  "repo": "rrohaill/Cryptography",
  "language": "Kotlin",
  "readme_contents": "# Cryptography\nAES Encryption and Decryption using Kotlin\n"
 },
 {
  "repo": "DigitalLeaves/AsymmetricCrypto",
  "language": "Swift",
  "readme_contents": "# AsymmetricCryptoManager\nAsymmetricCryptoManager is a Swift implementation of an asymmetric cryptography manager to facilitate the use of asymmetric cryptographic operations in Swift. Included is a sample view controller for testing purposes.\n\n![](http://digitalleaves.com/wp-content/uploads/2015/10/ezgif.com-optimize.gif)\n\n## Usage\n\nAsymmetricCryptoManager follows the Singleton pattern, thus it must be accessed by means of the sharedInstance variable.\n\n### Generating a key pair\n\n```swift\nAsymmetricCryptoManager.sharedInstance.createSecureKeyPair({ (success, error) -> Void in\n  if success {\n    // start using the key pair.\n  } else { \n    // handle the error\n  }\n})\n```\n\n### Encryption: \n\n```swift\nAsymmetricCryptoManager.sharedInstance.encryptMessageWithPublicKey(clearText) { (success, data, error) -> Void in\n  if success {\n    let b64encoded = data!.base64EncodedStringWithOptions([])\n    // transmit b64encoded encrypted string.\n  } else { \n    // handle the error ...\n  }\n}\n```\n\n### Decryption:\n\n```swift\nAsymmetricCryptoManager.sharedInstance.decryptMessageWithPrivateKey(encryptedData) { (success, result, error) -> Void in\n  if success {\n    // manage the resulting string.  \n  } else {\n    // manage the error\n  }\n```\n\n### Sign a message:\n\n```swift\nAsymmetricCryptoManager.sharedInstance.signMessageWithPrivateKey(clearText) { (success, data, error) -> Void in\n  if success {\n    let b64encoded = data!.base64EncodedStringWithOptions([])\n  } else {\n    // manage the error\n  }\n}\n```\n\n### Verify the signature:\n\n```swift\nAsymmetricCryptoManager.sharedInstance.verifySignaturePublicKey(rawData, signatureData: signatureData) { (success, error) -> Void in\n  if success {\n    // verification was successful\n  } else {\n    // verification failed.\n  }\n}\n```\n\n## LICENSE\n\nThe MIT License (MIT)\nCopyright (c) 2015 Ignacio Nieto Carvajal (http://digitalleaves.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
 },
 {
  "repo": "mitshell/CryptoMobile",
  "language": "Python",
  "readme_contents": "# CryptoMobile toolkit\n\n## Update 2019\nThe fork at [P1sec](https://github.com/P1sec/CryptoMobile) is going to be more actively maintained and extended than this project.\nDo not hesitate to clone it instead of this one.\n\n## About\nThis toolkit implements python wrappers around 3G and LTE encryption and \nintegrity protection algorithms, COMP128, Milenage and TUAK authentication \nalgorithms, and ECIES identity protection scheme.\n\n## Disclaimer\nThis is delivered for study only: beware that cryptographic material, \nespecially ciphering algorithms are always subject to national regulation.\nMoreover, use in real networks and equipments of some of the algorithms provided\nare subect to agreement / licensing by the GSMA and / or the ETSI:\nsee [GSMA](https://www.gsma.com/aboutus/leadership/committees-and-groups/working-groups/fraud-security-group/security-algorithms)\nand [ETSI](http://www.etsi.org/about/what-we-do/security-algorithms-and-codes/cellular-algorithm-licences).\n\n## Installation\nThe standard installation process is to use the CPython build environment to compile\nC files and install them together with the Python wrappers. The Milenage and EEA2/EIA2\nalgorithms moreover require one of the following Python cryptographic library to support\nAES:\n- [pycrypto](https://github.com/dlitz/pycrypto) or\n- [pycryprodomex](https://www.pycryptodome.org/en/latest/src/installation.html) or\n- [cryptography](https://cryptography.io/en/latest/) (the ECIES module requires it)\n\n\nThis library supports both Python 2 and 3 versions.\nAn installation script is available: it installs the library within your Python \npackage directory:\n\n```\npython setup.py install\n```\nor to make a system-wide install\n```\nsudo python setup.py install\n```\n\nIt is also possible to test the library before installing it:\n\n```\npython setup.py test\n```\n\nOr to simply build the library without installing it in the system:\n\n```\npython setup.py build\n```\n\nFor generic info on building C extensions on Windows, see the \n[Python wiki](https://wiki.python.org/moin/WindowsCompilers).\nWhen building on a Windows system using the MSVC compiler, the .c files will be automatically\nrenamed to .cc by the install script in order to get them compiled correctly by the MSVC compiler.\n\nTo be noted also that the library builds and runs fine with pypy3.\n\n### Installing the ctypes version instead of the CPython wrappers\nThere is still the possibility to install manually the historical version of the library which uses\nPython-only _ctypes_ source files. A *CM_ctypes.py* is available in the \\_ctypes directory \nfor this purpose.\n\n## Usage\nMost of the classes and methods have docstrings. Just read them to get information\non how to use and call them.\n\n\nWarning: most of the C reference implementations are using global or static variables,\nwhich are making them not thread-safe. Using them through Python is however OK thanks \nto the GIL, but beware in case you want to use them directly from C.\n\n### CMAC mode of operation\nThis is the CBC-MAC mode as defined by NIST. It works with any block cipher primitive,\nand returns MAC of any length in bits. This is written in pure Python.\n\nHere is an example on how to use it with AES:\n```\n>>> from CryptoMobile.CMAC import CMAC\n>>> help(CMAC)\n[...]\n>>> from CryptoMobile.AES import AES_ECB\n>>> key = 16*b'A'\n>>> cmac = CMAC(key, AES_ECB, Tlen=48)\n>>> cmac.cmac(200*b'test')\nb'\\xf7\\xad\\x89-j\\n'\n>>> cmac.cmac(200*b'test', (200*8)-2) # this is to not compute the MAC over the last 2 bits of the input\nb'\\xa7\\x7f\\xc4\\xbf\\xfc\\xf4'\n```\n\n### COMP128\nThis is the Python wrapper over the COMP128 v1, v2 and v3 algorithms. The C code\nhas been taken from the FreeRADIUS project.\n\nHere is an example on how to use it:\n```\n>>> from pycomp128 import *\n>>> help(comp128v1)\n[...]\n>>> key, rand = 16*b'A', 16*b'B'\n>>> comp128v1(key, rand)\n(b'#9\\x0b^', b\"\\x08\\xb6'\\xf36\\x80\\xec\\x00\")\n>>> comp128v2(key, rand)\n(b'\\x8a\\x9b\\xaaI', b']\\xdcPs\\xa6:\\x04\\x00')\n>>> comp128v3(key, rand)\n(b'\\x8a\\x9b\\xaaI', b']\\xdcPs\\xa6:\\x07\\xf9')\n```\n\n### Milenage\nThis is Python wrapper over the Milenage algorithm. The mode of operation is written\nin Python, and makes use of the AES function from one of the AES Python backend found.\n\nc1 to c5 and r1 to r5 constants are implemented as class attribute.\nThe class must be instantiated with the OP parameter.\n\nHere is an example on how to use it:\n```\n>>> from CryptoMobile.Milenage import Milenage\n>>> help(Milenage)\n[...]\n>>> Milenage.c1\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n>>> Milenage.c2\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01'\n>>> Milenage.r3\n32\n>>> OP = 16*b'F'\n>>> Mil = Milenage(OP)\n>>> key, rand = 16*b'A', 16*b'B'\n>>> help(Mil.f1)\n[...]\n>>> Mil.f1(key, rand, SQN=b'\\0\\0\\0\\0\\x12\\x34', AMF=b'\\0\\0')\nb'\\x18\\x92\\x97\\xa2\\xbb\\x08i\\xf0'\n>>> Mil.f1(key, rand, SQN=b'\\0\\0\\0\\0\\x12\\x34', AMF=b'\\0\\0', OP=16*b'G') # it is possible the use a different OP parameter\nb'E\\xf0\\xb4\\xef\\x0c\\xa6\\x95\\xe1'\n>>> help(Mil.f2345)\n[...]\n>>> Mil.f2345(key, rand)\n(b'\\xdd\\x0b\\x0f\\x95\\x92\\x06\\x1e\\xb9', b'~\\x8d\\xf5&\\xe37\\xc2\\xaf\\xe4\\x83\\xc5\\x802\\xf7\\x1fV', b'\\x82;\\xcfM\\xc5\\xfc{\\x06BM\\xd1\\xd6UZJ\\xa2', b'g\\xe8\\x85\\r\\x0b\\xd9')\n```\n\nThe defaut behaviour is to recompute the OPc at each method call. In order to save\nsome AES rounds in case you want to compute several authentication vectors for a given\nsubscriber, it is possible to set the OPc before calling the f methods.\n```\n>>> help(Mil.make_opc)\n[...]\n>>> from CryptoMobile.Milenage import make_OPc\n>>> Mil.set_opc(make_OPc(key, OP))\n>>> Mil.f1(key, rand, SQN=b'\\0\\0\\0\\0\\x12\\x35', AMF=b'\\0\\0')\nb'\\xf7~|\\x95\\x9e\\xbf\\xfb?'\n>>> Mil.f2345(key, rand)\n(b'\\xdd\\x0b\\x0f\\x95\\x92\\x06\\x1e\\xb9', b'~\\x8d\\xf5&\\xe37\\xc2\\xaf\\xe4\\x83\\xc5\\x802\\xf7\\x1fV', b'\\x82;\\xcfM\\xc5\\xfc{\\x06BM\\xd1\\xd6UZJ\\xa2', b'g\\xe8\\x85\\r\\x0b\\xd9')\n>>> Mil.unset_opc()\n```\n\nSome conversion functions are also provided in the Milenage module:\n- conv\\_C2, conv\\_C3, conv\\_C4 and conv\\_C5 for 2G / 3G authentication vectors conversion\n- conv\\_A2, conv\\_A3, conv\\_A4 and conv\\_A7 for LTE key derivation and 3G / LTE authentication \n   vectors conversion\n\n### TUAK\nThis is the Python wrapper over the TUAK algorithm. The mode of operation is written\nin Python, and makes use of the KeccakP-1600 permutation function. The C code for this\npermutation function has been taken from the 3GPP TS 35.231 specification.\n\nTUAK algorithm is to be used similarly as Milenage. TOP (TUAK-OP) is replacing OP\nand TOPc is replacing OPc. TOP, TOPc are 32 bytes, secret keys K can be 16 or 32 bytes.\nLength of outputs produced (MAC, RES, CK and IK) can be configured through the following\nclass attributes too: LEN\\_CK, LEN\\_IK, LEN\\_MAC, LEN\\_RES.\nMoreover, the algorithm can be personalized with 2 parameters, implemented as class \nattributes: ALGONAME and KeccakIterations. On the other side, there is no such constants \nas c1..c5 and r1..r5, as in Milenage.\n\nHere is an example on how to use it:\n```\n>>> from CryptoMobile.TUAK import TUAK\n>>> help(TUAK)\n[...]\n>>> TUAK.ALGONAME\nb'TUAK1.0'\n>>> TUAK.KeccakIterations\n1\n>>> TOP = 32*b'F'\n>>> Tuak = TUAK(TOP)\n>>> key, rand = 32*b'A', 16*b'B'\n>>> help(Tuak.f1)\n[...]\n>>> Tuak.f1(key, rand, SQN=b'\\0\\0\\0\\0\\x12\\x34', AMF=b'\\x80\\0')\nb'\\xdd\\xf1\\xc7w\\x11x\\xce\\xdb'\n>>> Tuak.f2345(key, rand)\n(b'}/\\xdc\\xd4\\xcb(qG', b'\\xa8\\x1dF\\x84\\x80\\xac\\t\\xab\\xe4\\xa3\\xf6\\xe1\\x8b\\x9b7\\xfe', b'g~=\\xaf1\\xfcy\\x9b\\x92\\xc6\\xd2M\\xfa\\xd0\\xed\\t', b'\\x83\\x1e\\xcbp\\xa6\"')\n```\n\nTOPc handling is similar as in Milenage and can be set explicitly through the set\\_topc() method\nbefore calling f1() and f2345() methods several times, then finally unset with unset\\_topc() method.\n \n\n### Kasumi-based encryption and integrity protection algorithms\nThis is a Python wrapper around the reference C code of Kasumi and its mode of operation\nfor 3G networks. Kasumi is a block cipher working with 64 bit blocks.\n\nHere is an example on how to use the Kasumi primitive:\n```\n>>> from pykasumi import *\n>>> help(kasumi_keyschedule)\n[...]\n>>> help(kasumi_kasumi)\n[...]\n>>> key, block_in = 16*b'A', 8*b'B'\n>>> kasumi_keyschedule(key)\n>>> kasumi_kasumi(block_in)\nb\"S\\xf6']\\x1c\\x1e\\xfd\\x00\"\n```\n\nAnd the Kasumi in F8 and F9 modes of operation:\n```\n>>> help(kasumi_f8)\n[...]\n>>> help(kasumi_f9)\n[...]\n>>> key, count, bearer, dir = 16*b'A', 107, 3, 0\n>>> kasumi_f8(key, count, bearer, dir, 10*b'test', 10*4*8)\nb'q\\xe9\\x86\\xdd\\xde\\xc1\\x14\\xb0=pv2|\\xe8\\\\Ib\\x84\\xa1\\xf9\\xc0\\x01=)\\xac!mV\\xe4\\xc15L\\t\\xf0\\x1f\\x1b\\x02\\xb8\\xf9l'\n>>> kasumi_f9(key, count, bearer, dir, 10*b'test', 10*4*8)\nb'\\x1c!j\\x0e'\n```\n\n### SNOW-3G-based encryption and integrity protection algorithms\nThis is a Python wrapper around the reference C code of SNOW-3G and its mode of operation\nfor 3G and LTE networks. SNOW-3G is a stream cipher working with 32 bit words.\n\nHere is an example on how to use the SNOW-3G primitive:\n```\n>>> from pysnow import *\n>>> help(snow_initialize)\n[...]\n>>> help(snow_generatekeystream)\n[...]\n>>> key, iv = 16*b'A', 16*b'B'\n>>> snow_initialize(key, iv)\n>>> snow_generatekeystream(6)\nb'\\\\^\\xff\\x98\\xad\\xa6\\x17\\xb8\\xa4e\\x03S\\x93T\\xbew\\xc7\\xd1gpr\\xf3\\x99\\xd9'\n```\n\nAnd the SNOW-3G in F8 and F9 modes of operation:\n```\n>>> help(snow_f8)\n[...]\n>>> help(snow_f9)\n[...]\n>>> key, count, bearer, dir = 16*b'A', 107, 3, 0\n>>> snow_f8(key, count, bearer, dir, 10*b'test', 10*4*8)\nb'{\\x98\\xa1\\x90\\x0c\\x9f\\xe9zNp3\\xba\\xdc\\xa6|-\\xfe\\x91\\xffk\\x99\\x9d\\xbc^\\xc3\\xe1n\\xbd\\x06U\\x98\\xfa\\x82 \\x1a\\xf2\\xf6\\x08\\xbb\\xe7'\n>>> snow_f9(key, count, bearer, dir, 10*b'test', 10*4*8)\nb'\\xe0\\x8e\\xde\\x85'\n```\n\nThe EEA1-128 and EIA1-128 modes of operation for LTE are similar to F8 and F9 for 3G\nnetworks.\n\n### ZUC-based encryption and integrity protection algorithms\nThis is a Python wrapper around the reference C code of ZUC and its mode of operation\nfor LTE networks. ZUC is a stream cipher working with 32 bit words.\n\nHere is an example on how to use the ZUC primitive:\n```\n>>> from pyzuc import *\n>>> help(zuc_initialization)\n[...]\n>>> help(zuc_generatekeystream)\n[...]\n>>> key, iv = 16*b'A', 16*b'B'\n>>> zuc_initialization(key, iv)\n>>> zuc_generatekeystream(4)\nb'\\xcf{\\x10P\\x1e\\xf3c\\x13\\x1c}\\x0c\\xc2\\x8c\\xd8\\x1a\\xae'\n```\n\nAnd the ZUC in EEA3 and EIA3 modes of operation:\n```\n>>> help(zuc_eea3)\n[...]\n>>> help(zuc_eia3)\n[...]\n>>> key, count, bearer, dir = 16*b'A', 107, 3, 0\n>>> zuc_eea3(key, count, bearer, dir, 10*4*8, 10*b'test')\nb'\\xda\\x9as,\\x97:\\x86)]\\xde\\x8b\\x14Qq\\x85\\x15cME$\\xc4)\\xe7\\x7f@\\xfe\\x10\\x1f\\xcd\\xb05G\\xa0\\x1d9\\x92\\x85L2 '\n>>> zuc_eia3(key, count, bearer, dir, 10*4*8, 10*b'test')\nb'X\\xcb\\xa1\\x9c'\n```\n\n### The CM module, gathering all 3G and LTE encryption and integrity protection algorithms in one place\nThe CM module implements each algorithm as a class, with its primitives and 3G and / or LTE\nmodes of operation as specific methods.\nFinally, UEA and UIA are aliases for the given UMTS encryption and integrity protection\nalgorithms, and EEA and EIA are aliases for the given LTE encryption and integrity\nprotection algorithms.\n\nHere is an example with the 2nd UMTS algorithm (SNOW-3G based) and the 2nd and 3rd \nLTE algorithms (AES-based and ZUC-based):\n```\n>>> from CryptoMobile.CM import *\n>>> dir()\n['AES_3GPP', 'EEA1', 'EEA2', 'EEA3', 'EIA1', 'EIA2', 'EIA3', 'KASUMI', 'SNOW3G', 'UEA1', 'UEA2', 'UIA1', 'UIA2', 'ZUC', '__builtins__', '__doc__', '__name__', '__package__']\n>>> help(UIA2)\n[...]\n>>> UIA2(key=16*b'\\xab', count=0x1234, fresh=0x986532ab, dir=0, data=100*b'nepascourirauborddelapiscine')\nb':\\xe5t:'\n>>> help(UEA2)\n[...]\n>>> UEA2(key=16*b'\\xab', count=0x1234, bearer=0x8, dir=0, data=100*b'nepascourirauborddelapiscine')\nb'\\x03Z\\xa0\\x83\\x14\\x198l\\x1b\\x91\\\\\\x94\\x18\\xfc\\xbd\\xecb-\\xdfs1\\xd6\\xbb1\\x88y\\xf0\\xc9\\xf5\\xec\\xc5\\x1b\\x7f\\xcc...'\n>>> UEA2(key=16*b'\\xab', count=0x1234, bearer=0x8, dir=0, data=_)\nb'nepascourirauborddelapiscinenepascourirauborddelapiscinenepascourirauborddelapiscinenepascourirauborddelapi...'\n\n>>> help(EEA2)\n[...]\n>>> EEA2(key=16*b'\\xc1', count=0x9955ab, bearer=0x16, dir=1, data=50*b'MonPantalonS\\'EstDecousu', bitlen=1149)\nb'-y\\xf1\\xee\\xb7\\xe4\\x0c\\xf2\\xdfz`\\xb04\"\\x8c\\xda\\xc8B!n\\x863V\"\\xaei\\x91\\x1b\\xc5\\xfc\\x1dx\\xb9l\\xe8\\x99q\\\\q\\x88\\x91\\xc8f\\r\\x05\\xdf\\x94S\\x97\\xc0\\x96\\xb75\\x00@\\...'\n>>> EEA2(key=16*b'\\xc1', count=0x9955ab, bearer=0x16, dir=1, data=_, bitlen=1149)\nb\"MonPantalonS'EstDecousuMonPantalonS'EstDecousuMonPantalonS'EstDecousuMonPantalonS'EstDecousuMonPantalonS'EstDecousuMonPantalonS'EstDecousuMonPah\"\n>>> help(EIA3)\n[...]\n>>> EIA3(key=16*b'\\xc1', count=0x9955ab, bearer=0x16, dir=1, data=50*'MonPantalonS\\'EstDecousu', bitlen=1149)\nb'\\xa9\\xc5h\\x9e'\n```\n\n### ECIES module to support 5G SUPI / SUCI protection scheme\nThe ECIES module, which relies on the python cryptography library, supports both\nECIES profiles A and B, as described in 3GPP TS 33.501, annex C.\n\nAt first a fixed Home-Network public / private keypair needs to be established. For this,\nthe module EC can be used:\n```\n>>> from CryptoMobile.EC import *\n>>> ec = X25519() # using Curve25519 elliptic curve, i.e. profile A\n>>> ec.generate_keypair()\n>>> hn_pubkey = ec.get_pubkey()\n>>> hn_pubkey\nb\"\\xd9-\\x98\\xc5\\x08\\xa7M\\x18\\x80bi\\x0b\\xfa-\\xd6[D\\xe9'\\xe4G|\\x1d\\xe1sRjXM[\\xc7;\"\n>>> hn_privkey = ec.get_privkey()\n>>> hn_privkey\nb'`y\\x06o\\xcf\\x9c\\xe0\\xa4\\x18\\xb1ks\\xe6\\x97\\xafB)\\xeftt2\\xcfX\\xe4\\x82\\xaf/\\x83[\\xcc\\xa7O'\n>>> ec = ECDH_SECP256R1() # using secp256r1 elliptic curve domain, i.e. profile B\n>>> ec.generate_keypair()\n>>> hn_pubkey = ec.get_pubkey()\n>>> hn_pubkey\nb'\\x03u\\xe82C\\xa3.\\x0e)\\xaf\\xd6\\xad\\n\\x01\\xafZ2\\xca\\xc9\\x95G\\\\xG\\x9d\\xdczU\\x91n\\x1d%m'\n>>> hn_privkey = ec.get_privkey()\n>>> hn_privkey # the private key for secp256r1 is longer as it is actually packed into a DER-encoded PKCS8 structure\nb\"0\\x81\\x87\\x02\\x01\\x000\\x13\\x06\\x07*\\x86H\\xce=[...]\\x86'\\x17\"\n```\n\nIn the principle, the public key of the home network needs to be setup in subscribers' SIM card, whereas\nthe private key needs to be securely stored within the home network. Take care as the current version\nof the EC module does not provide options to manage those generated private keys password-protected when\nexported / imported.\n\nThen, when a subscriber wants to encrypt its fixed identity (e.g. the MSIN part of its IMSI), \nto be then decrypted within the home network:\n```\n>>> ue_msin = b'\\x102Tv\\x98' # BCD-encoded value of the digit-string 0123456789\n>>> from CryptoMobile.ECIES import *\n>>> ue = ECIES_UE(profile='A')\n>>> ue.generate_sharedkey(hn_pubkey)\n>>> ue_pubkey, ue_ciphertext, ue_mac = ue.protect(ue_msin)\n>>> ue_pubkey, ue_ciphertext, ue_mac\n(b'\\xe1\\x1dBR\\x8e\\xcbd\\x05\\x94J\\xf2ka\\xee^\\xaa\\x96`\\x87X\\xe3\\x96R\\xd8w\\xcb\\xda\\x0e}\\xab\\x9f\\x01',\n b'\\x93I\\x95?8',\n b'\\xbc\\x91\\xe1\\x0cy\\xe2\\xf5\\xa6')\n>>> hn = ECIES_HN(hn_privkey, profile='A')\n>>> hn_msin = hn.unprotect(ue_pubkey, ue_ciphertext, ue_mac)\n>>> hn_msin == ue_msin\nTrue\n```\n\n### running Milenage, TUAK, ECIES, UMTS and LTE algorithms test vectors\nBy running the setup test (see installation), test vectors will all be run.\nYou can also run some performance test by hand:\n\n```\n$ python test/test_CM.py\n1000 full testsets in 7.393 seconds\n$ python test/test_Milenage.py\n1000 full testsets in 1.494 seconds\n$ python test/test_TUAK.py\n10000 full testsets in 2.215 seconds\n$ python test/test_ECIES.py\n1000 full testsets in 2.202 seconds\n```\n\n## Content\nThe library is structured into 3 main parts:\n- C\\_alg: provides C source codes for comp128, KeccakP-1600, Kasumi, SNOW 3G and ZUC\n- C\\_py: provides C source files wrapping those algorithms with CPython (for both \n  Python2 and Python3)\n- CryptoMobile: provides Python source files.\n\nAnd two additional folders:\n- test: provides files with test vectors.\n- \\_ctypes: provides the old CM module which uses ctypes binding to the C files\n  compiled as shared object.\n\nWithin the CryptoMobile directory, we have the following modules:\n- utils.py: provides common routine (eg log() and exception) for the library\n- AES.py: provides support for several AES Python backend\n- CMAC.py: provides a CMAC class which implement the CMAC mode of operation\n- CM.py: the main module providing classes KASUMI, SNOW3G, ZUC (making use of the\n  wrappers in C\\_py) and AES\\_3GPP (making use of the AES backend),\n  and functions UEA1, UIA1, UEA2, UIA2, EEA1, EIA1, EEA2, EIA2, EEA3 and EIA3. \n- Milenage.py: provides the Milenage algorithm and conversion functions to be used\n  for keys and authentication vectors conversion.\n- TUAK.py: provides the TUAK algorithm.\n- EC.py: provides both Curve25519 and secp256r1 elliptic curve modules for key exchange\n- ECIES.py: provides ECIES processing for 5G SUPI / SUCI protection scheme\n\n## Credits\n- ETSI / SAGE for providing public cryptographic specifications, together with\n  reference C source code\n- FreeRADIUS, Hacking projects, Sylvain Munaut, for the comp128.c source code\n- Developers and maintainers of pycrypto, pycryptodome and cryptography Python libraries \n\n"
 },
 {
  "repo": "mc2-project/delphi",
  "language": "Rust",
  "readme_contents": "<h1 align=\"center\">Delphi</h1>\n\n___Delphi___ is a Python, C++, and Rust library for **Secure Deep Neural Network Inference**\n\nThis library was initially developed as part of the paper *\"[Delphi: A Cryptographic Inference Service for Neural Networks][delphi]\"*, and is released under the MIT License and the Apache v2 License (see [License](#license)).\n\n**WARNING:** This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.\n\n## Overview\n\nThis library implements a cryptographic system for efficient inference on general convolutional neural networks.\n\nThe construction utilizes an array of multi-party computation and machine-learning techniques, as described in the [Delphi paper][delphi].\n\n## Directory structure\n\nThis repository contains several folders that implement the different building blocks of Delphi. The high-level structure of the repository is as follows.\n* [`python`](python): Example Python scripts for performing neural architecture search (NAS)\n\n* [`rust/algebra`](rust/algebra): Rust crate that provides finite fields\n\n* [`rust/crypto-primitives`](rust/crypto-primitives): Rust crate that implements some useful cryptographic primitives\n\n* [`rust/experiments`](rust/experiments): Rust crate for running latency, bandwidth, throughput, accuracy, and memory usage experiments\n\n* [`rust/neural-network`](rust/neural-network): Rust crate that implements generic neural networks\n\n* [`rust/protocols`](rust/protocols): Rust crate that implements cryptographic protocols\n\n* [`rust/protocols-sys`](rust/crypto-primitives): Rust crate that provides the C++ backend for Delphi's pre-processing phase and an FFI for the backend\n\nIn addition, there is a  [`rust/bench-utils`](rust/bench-utils) crate which contains infrastructure for benchmarking. This crate includes macros for timing code segments and is used for profiling the building blocks of Delphi.\n\n\n## Build guide\n\nThe library compiles on the `nightly` toolchain of the Rust compiler. To install the latest version of Rust, first install `rustup` by following the instructions [here](https://rustup.rs/), or via your platform's package manager. Once `rustup` is installed, install the Rust toolchain by invoking:\n```bash\nrustup install nightly\n```\n\nAfter that, use `cargo`, the standard Rust build tool, to build the library:\n```bash\ngit clone https://github.com/mc2-project/delphi\ncd delphi/rust\ncargo +nightly build --release\n```\n\nThis library comes with unit tests for each of the provided crates. Run the tests with:\n```bash\ncargo +nightly test\n``` \nBenchmarks are included for the following crates:\n- [`algebra`](algebra)\n- [`crypto-primitives`](algebra)\n- [`neural-network`](algebra)\n\nRun the benchmarks with:\n```bash\ncargo +nightly bench\n```\n\n## End-to-End Example \nLet's walk through a full example of using Delphi with the pretrained MiniONN model at `python/minionn/pretrained/relu/model`.\n\nUsing Python3.6/7, install the following packages:\n```bash\npip install ray[tune]==0.8.0 requests scipy tensorflow==1.15.0 \n```\nOptionally, visualizing results requires the `tensorboard` package:\n```bash\npip install tensorboard==1.15.0\n```\n### Model Preprocessing\nFor this step we will be working exclusively in the `python/` subdirectory:\n```bash\ncd python/\n```\n#### 1. Neural Architecture Search\nIn order to achieve optimal performance, we need to run NAS on our pretrained model to optimize which activation layers to approximate (see [Delphi paper][delphi] for more details).\n\nStart by running NAS on the total number of activation layers (`-a` flag), in this case 7, with the following command: \n```bash\npython minionn/minionn_cifar10.py -n 7_layers -d /tmp -a 7 -r minionn/pretrained/relu/model \n```\nAfter that has finished, we can review the results by running:\n```bash\ntensorboard --logdir=/tmp/7_layers\n```\nand visiting `localhost:6006` in a web browser.\n\n If the resulting networks don't have satisfactory accuracy, rerun the above command with a lower number of activation layers.\n\n#### 2. Serialization\n\nOnce a satisfactory network is trained (say at `/tmp/model`), we need to extract the model weights for use in the Rust cryptographic protocol. This can be done by running the following command.\n```bash\npython extract_keras_weights.py 0 -w /tmp/model -a {approx layers}\n```\nWhere `{approx layers}` is the list of layers being approximated. \n\nThis will output a `model.npy` file which is ready to be used by Delphi for secure inference.\n\nPassing the `-q` flag additionally quantizes the model for additional performance, but may lower accuracy. Additionally passing the `-t` flag will test accuracy of the original and quantized network in order for you to decide which is best. Currently, quantizing requires Tensorflow 2.0.\n\n### Performing inference with the model\nWe will now use this model to perform inference on an image using the code in `rust/experiments/src/inference`:\n```bash\ncd ../rust/experiments/src/inference\n```\nRun the following python script to generate a test image:\n```bash\npython3 generate_test_images.py\n```\nand perform inference on that image by running:\n```bash\ncargo +nightly run --release --bin minionn-inference /tmp/model.npy {num of approx layers}\n```\n\n## License\n\nDelphi is licensed under either of the following licenses, at your discretion.\n\n * Apache License Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nUnless you explicitly state otherwise, any contribution submitted for inclusion in Delphi by you shall be dual licensed as above (as defined in the Apache v2 License), without any additional terms or conditions.\n\n[delphi]: https://eprint.iacr.org/2020/050.pdf\n\n## Reference paper\n\n[_Delphi: A Cryptographic Inference Service for Neural Networks_][delphi]    \n[Pratyush Mishra](https://www.github.com/pratyush), [Ryan Lehmkuhl](https://www.github.com/ryanleh), Akshayaram Srinivasan, Wenting Zheng, and  Raluca Ada Popa    \n*Usenix Security Symposium 2020*\n\n## Acknowledgements\n\nThis work was supported by:\nthe National Science Foundation;\nand donations from Sloan Foundation, Bakar and Hellman Fellows Fund, Alibaba, Amazon Web Services, Ant Financial, Arm, Capital One, Ericsson, Facebook, Google, Intel, Microsoft, Scotiabank, Splunk and VMware\n\nSome parts of the finite field arithmetic infrastructure in the `algebra` crate have been adapted from code in the [`algebra`](https://github.com/scipr-lab/zexe) crate.\n"
 },
 {
  "repo": "ethereum/cryptography-research-website",
  "language": "TypeScript",
  "readme_contents": "[![Netlify Status](https://api.netlify.com/api/v1/badges/5d7b96c5-01cc-4feb-867f-109a2e2c9277/deploy-status)](https://app.netlify.com/sites/cryptography-research/deploys)\n\n<h1 align=\"center\">\n  Ethereum Foundation Cryptography Research\n</h1>\n\nThe Ethereum Foundation leads research into cryptographic protocols that are useful within\nthe greater Ethereum community and more generally. Cryptography is a key tool that enables\ngreater functionality, security, efficiency, and auditability in decentralized settings.\nWe are currently conducting research into verifiable delay functions, multiparty\ncomputation, vector commitments, and zero-knowledge proofs etc. We have a culture of open\nsource and no patents are put on any work that we produce.\n\nThis repository holds the codebase to our website, [crypto.ethereum.org](crypto.ethereum.org)\n\n## Stack\n\nThe main stack used in the project includes:\n\n- [Next.js](https://nextjs.org/).\n- [TypeScript](https://www.typescriptlang.org/).\n- [ChakraUI](https://chakra-ui.com/) as component library.\n- [KaTeX](https://katex.org/) to render LaTeX math syntax.\n\n## Local development\n\nThe project is bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app), with a custom scaffolding.\n\n### Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\n## Project Structure\n\nThe following list describes the main elements of the project structure:\n\n- `public`: contains static assets like fonts and images.\n- `src`: contains the source code.\n  - `components`: React components.\n    - components with state are directly located inside `/components`.\n    - `layout`: components used to contain and apply different layouts to different pages.\n    - `UI`: stateless (functional) components.\n  - `pages`: includes components that renders to pages and [NextJS API Routes](https://nextjs.org/docs/api-routes/introduction).\n  - `posts`: markdown blog posts.\n  - `styles`: css stylesheets.\n    - `global.css`: global stylesheet.\n  - `theme`: contains the [Chakra UI custom theme](https://chakra-ui.com/docs/styled-system/theming/customize-theme), organized in `foundations` and `components` for better scaling.\n  - `utils`: utilitary stuff.\n  - `constants.ts`: this is the _global_ constants file, containg URLs and lists of elements we use across the site.\n  - `types.ts`: contains the custom defined TypeScript types and interfaces.\n\n## Markdown & LaTex support on blog posts\n\n### Markdown\n\nSupport for [GitHub Flavored Markdown](https://github.github.com/gfm/), which is a superset of CommonMark and adds supports to other features like tables.\n\n### LaTeX\n\nThe site uses [KaTeX](https://katex.org) to render LaTeX/math and inside `/research` publications abstracts. LaTeX-rendering libs are not 100% compatible with LaTex yet, so please check the [support table](https://katex.org/docs/support_table.html) if you are having issues with some expression.\n\n## How to add a new blog post\n\nThe site supports both _internal_ and _external_ blog posts.\n\n- **Internal posts**: to add a new one, just create a new markdown (`.md`) file under `src/posts` (make sure first this directory exists, otherwise create it first, under `/src`). The name of the file should follow the [kebab case](https://www.theserverside.com/definition/Kebab-case) convention, as it will be used to generate the url to the post. You also have to add some [Front Matter](https://frontmatter.codes/docs/markdown) metadata, like the post `title`, `author(s)` and `date`, which are required.\n\nMetadata example:\n\n```\n---\ntitle: 'VDF Proving with SnarkPack'\ndescription 'Some awesome description for social media snippets, under 160 characters'\nauthor: 'Mary Maller'\ndate: '2022-03-16'\n---\n```\n\nPost titles should be under 60 characters. [Learn more on title tags](https://moz.com/learn/seo/title-tag).\n\nPost descriptions should be under 160 characters. [Learn more on meta descriptions](https://moz.com/learn/seo/meta-description).\n\n- **External posts**: you can also link to an external post from the `/blog` page by appending an object with the required data (`title`, `date`, `link`) to the `externalLinks` list from the `src/pages/blog/index.tsx` file. See the example below:\n\n```\nconst externalLinks = [\n  {\n    title: 'Ethereum Merge: Run the majority client at your own peril!',\n    date: '2022-03-24',\n    link: 'https://dankradfeist.de/ethereum/2022/03/24/run-the-majority-client-at-your-own-peril.html'\n  }\n];\n```\n\n### How to add images to a local post\n\nImage files should be placed inside `/public/images/` and the path to the image will be referenced as `/images/${filename}`. For example, we can insert the EF logo in a post by using\n\n```\n![EF logo](/images/ef-logo-bg-white.png \"EF logo\")\n```\n\nTake into account that images are automatically centered, no need to add extra HTML.\n\n## How to deploy changes succesfully\n\n- **Locally**: **Make sure the site builds** locally, otherwise the build will break and the new version of the site (e.g.: adding a new post) will not be generated. To be sure of this, run the `yarn build` command locally and check that you get no errors.\n- **On GitHub**: check that the `Deploy Preview` passes succesfully.\n\n## Bounties pages\n\nThe source files (`.md`) for the bounties pages are located at `/src/bounties-data-source`. If you need to update the content from a certain bounty, just modify the corresponding file. LaTeX/math is also supported here.\n\nFor a better organization, images used in bounties pages are placed inside `/public/images/bounties/` and the path to the image have to be referenced as `/images/bounties/${filename}` (check `/src/bounties-data-source/rsa/assumptions.md` as example).\n\n### Notes\n\n- Dates should follow the `yyyy-mm-dd` format (for both internal and external posts), like `date: '2022-03-16'`\n- Blog posts are sorted automatically by date, regardless the order of insertion.\n- Check the current sample posts on `src/posts`.\n\n## Tutorials\n\n### Learning NextJS\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\n### Adding ChakraUI to a NextJS project\n\n[This](https://chakra-ui.com/guides/getting-started/nextjs-guide) is a very clear and step-by-step guide on it.\n\n### Learning ChakraUI\n\nWe recommend checking the [official docs](https://chakra-ui.com/docs/getting-started).\n"
 },
 {
  "repo": "michelp/pgsodium",
  "language": "C",
  "readme_contents": "[![Tests](https://github.com/michelp/pgsodium/actions/workflows/test.yml/badge.svg)](https://github.com/michelp/pgsodium/actions/workflows/test.yml)\n\n# pgsodium\n\npgsodium is an encryption library extension for\n[PostgreSQL](https://www.postgresql.org/) using the\n[libsodium](https://download.libsodium.org/doc/) library for high\nlevel cryptographic algorithms.\n\npgsodium can be used a straight interface to libsodium, but it can\nalso use a powerful feature called [Server Key\nManagement](#server-key-management) where pgsodium loads an external\nsecret key into memory that is never accessible to SQL.  This\ninaccessible root key can then be used to derive sub-keys and keypairs\n*by key id*.  This id (type `bigint`) can then be stored *instead of\nthe derived key*.\n\npgsodium provides some convenience roles that can be used to enforce\naccess to polymorphic functions for encrypting either with a bytekey\nor a key id.  For example, as a database superuser (or if you have the\n`pgsodium_keyholder` role) you can see derived sub-keys and use them\ndirectly in encryption functions:\n\n```sql\npostgres=# select derive_key(42);\n                             derive_key\n--------------------------------------------------------------------\n \\xdf2d989f7ca632b3165813a4e960749a207eab16926d792be7484aff9cfde322\n(1 row)\n\npostgres=# select crypto_aead_det_encrypt('sekret message', 'additional data', derive_key(42));\n                                    crypto_aead_det_encrypt\n------------------------------------------------------------------------------------------------\n \\xe7fa66d918654e70ff0fc9a87e2144a31cdf34526cf7f2846b321f47af8c87de02d925ad2343058c12bbb254ac3a\n(1 row)\n```\n\nBut this means the sub-key `42` can be seen in SQL or logged (but\nnever the root key!).  In order to remove the ability for users to\naccess raw byte keys *at all*, use the `pgsodium_keyiduser` role that\ncan never derive or use raw keys, only key ids:\n\n```sql\npostgres=# set role pgsodium_keyiduser ;\nSET\n\npostgres=> select derive_key(42);\nERROR:  permission denied for function derive_key\n\npostgres=> select crypto_aead_det_encrypt('sekret message', 'additional data', 42);\n                                    crypto_aead_det_encrypt\n------------------------------------------------------------------------------------------------\n \\xe7fa66d918654e70ff0fc9a87e2144a31cdf34526cf7f2846b321f47af8c87de02d925ad2343058c12bbb254ac3a\n(1 row)\n```\n\nNotice in the second form using the restricted `pgsodium_keyiduser`\nrole, `derive_key` is not permitted, but the same encryption function\ncan be called directly with the integer `42`.  Permission to call the\nform of `crypto_aead_det_encrypt` with a raw byte key is revoked from\nthe `pgsodium_keyiduser` role.\n\n# Table of Contents\n\n   * [pgsodium](#pgsodium)\n      * [Installation](#installation)\n   * [Usage](#usage)\n   * [Server Key Management](#server-key-management)\n   * [Server Key Derivation](#server-key-derivation)\n   * [Security Roles](#security-roles)\n   * [Encrypting Columns](#encrypting-columns)\n   * [Simple public key encryption with crypto_box()](#simple-public-key-encryption-with-crypto_box)\n   * [Avoid secret logging](#avoid-secret-logging)\n   * [API Reference](#api-reference)\n      * [Generating Random Data](#generating-random-data)\n      * [Secret key cryptography](#secret-key-cryptography)\n         * [Authenticated encryption](#authenticated-encryption)\n         * [Authentication](#authentication)\n      * [Public key cryptography](#public-key-cryptography)\n         * [Authenticated encryption](#authenticated-encryption-1)\n         * [Public key signatures](#public-key-signatures)\n         * [Sealed boxes](#sealed-boxes)\n      * [Hashing](#hashing)\n      * [Password hashing](#password-hashing)\n      * [Key Derivation](#key-derivation)\n      * [Key Exchange](#key-exchange)\n      * [HMAC512](#hmac512)\n      * [Advanced Stream API](#stream)\n      * [XChaCha20-SIV](#xchacha20-siv)\n      * [Signcryption](#signcryption)\n\n## Installation\n\npgsodium requires libsodium >= 1.0.18.  In addition to the libsodium\nlibrary and it's development headers, you may also need the PostgreSQL\nheader files typically in the '-dev' packages to build the extension.\n\nAfter installing the dependencies, clone the repo and run `sudo make\ninstall`.\n\npgTAP tests can be run with `sudo -u postgres pg_prove test.sql` or\nthey can be run in a self-contained Docker image.  Run `./test.sh` if\nyou have docker installed to run all tests.  Note that this will run\nthe tests against and download docker images for five different major\nversions of PostgreSQL (10, 11, 12, 13, 14), so it takes a while and\nrequires a lot of network bandwidth the first time you run it.\n\n# Usage\n\npgsodium arguments and return values for content and keys are of type\n`bytea`.  If you wish to use `text` or `varchar` values for general\ncontent, you must make sure they are encoded correctly.  The\n[`encode() and decode()` and\n`convert_to()/convert_from()`](https://www.postgresql.org/docs/12/functions-binarystring.html)\nbinary string functions can convert from `text` to `bytea`.  Simple\nascii `text` strings without escape or unicode characters will be cast\nby the database implicitly, and this is how it is done in the tests to\nsave time, but you should really be explicitly converting your `text`\ncontent if you wish to use pgsodium without conversion errors.\n\nMost of the libsodium API is available as SQL functions.  Keys that\nare generated in pairs are returned as a record type, for example:\n\n```\npostgres=# SELECT * FROM crypto_box_new_keypair();\n                               public                               |                               secret\n--------------------------------------------------------------------+--------------------------------------------------------------------\n \\xa55f5d40b814ae4a5c7e170cd6dc0493305e3872290741d3be24a1b2f508ab31 | \\x4a0d2036e4829b2da172fea575a568a74a9740e86a7fc4195fe34c6dcac99976\n(1 row)\n```\n\npgsodium is careful to use memory cleanup callbacks to zero out all\nallocated memory used when freed.  In general it is a bad idea to\nstore secrets in the database itself, although this can be done\ncarefully it has a higher risk.  To help with this problem, pgsodium\nhas an optional Server Key Management function that can load a hidden\nserver key at boot that other keys are *derived* from.\n\n# Server Key Management\n\nIf you add pgsodium to your\n[`shared_preload_libraries`](https://www.postgresql.org/docs/12/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-PRELOAD)\nconfiguration and place a special script in your postgres shared\nextension directory, the server can preload a libsodium key on server\nstart. **This root secret key cannot be accessed from SQL**.  The only\nway to use the server secret key is to derive other keys from it using\n`derive_key()` or use the key_id variants of the API that take key ids\nand contexts instead of raw `bytea` keys.\n\nServer managed keys are completely optional, pgsodium can still be\nused without putting it in `shared_preload_libraries`, but you will\nneed to provide your own key management.  Skip ahead to the API usage\nsection if you choose not to use server managed keys.\n\nSee the file\n[`getkey_scripts/pgsodium_getkey_urandom.sh`](./pgsodium_getkey_urandom.sh)\nfor an example script that returns a libsodium key using the linux\n`/dev/urandom` CSPRNG.\n\npgsodium also comes with example scripts for:\n\n  - [Amazon Web Service's Key Management\n    Service](getkey_scripts/pgsodium_getkey_aws.sh).\n\n  - [Google Cloud's Cloud Key\n    Management](getkey_scripts/pgsodium_getkey_gcp.sh).\n\n  - [Zymbit Zymkey 4i Hardware Security\n    Module](getkey_scripts/pgsodium_getkey_zmk.sh).\n\nNext place `pgsodium` in your `shared_preload_libraries`.  For docker\ncontainers, you can append this after the run:\n\n    docker run -d ... -c 'shared_preload_libraries=pgsodium'\n\nWhen the server starts, it will load the secret key into memory, but\nthis key is *never* accessible to SQL.  It's possible that a\nsufficiently clever malicious superuser can access the key by\ninvoking external programs, causing core dumps, looking in swap space,\nor other attack paths beyond the scope of pgsodium.  Databases that\nwork with encryption and keys should be extra cautious and use as many\nprotection mitigations as possible.\n\nIt is up to you to edit the get key script to get or generate the key\nhowever you want.  pgsodium can be used to generate a new random key\nwith `select encode(randombytes_buf(32), 'hex')`.  Other common\npatterns including prompting for the key on boot, fetching it from an\nssh server or managed cloud secret system, or using a command line\ntool to get it from a hardware security module.\n\n# Server Key Derivation\n\nNew keys are derived from the primary server secret key by id and an\noptional context using the [libsodium Key Derivation\nFunctions](https://doc.libsodium.org/key_derivation).  Key id are just\n`bigint` integers.  If you know the key id, key length (default 32\nbytes) and the context (default 'pgsodium'), you can deterministicly\ngenerate a derived key.\n\nDerived keys can be used to encrypt data or as a seed for\ndeterministicly generating keypairs using `crypto_sign_seed_keypair()`\nor `crypto_box_seed_keypair()`.  It is wise not to store these secrets\nbut only store or infer the key id, length and context.  If an\nattacker steals your database image, they cannot generate the key even\nif they know the key id, length and context because they will not have\nthe server secret key.\n\nThe key id, key length and context can be secret or not, if you store\nthem then possibly logged in database users can generate the key if\nthey have permission to call the `derive_key()` function.\nKeeping the key id and/or length context secret to a client avoid this\npossibility and make sure to set your [database security\nmodel](https://www.postgresql.org/docs/12/sql-grant.html) correctly so\nthat only the minimum permission possible is given to users that\ninteract with the encryption API.\n\nKey rotation is up to you, whatever strategy you want to go from one\nkey to the next.  A simple strategy is incrementing the key id and\nre-encrypting from N to N+1.  Newer keys will have increasing ids, you\ncan always tell the order in which keys are superceded.\n\nA derivation context is an 8 byte `bytea`. The same key id in\ndifferent contexts generate different keys.  The default context is\nthe ascii encoded bytes `pgsodium`.  You are free to use any 8 byte\ncontext to scope your keys, but remember it must be a valid 8 byte\n`bytea` which automatically cast correctly for simple ascii string.\nFor encoding other characters, see the [`encode() and decode()` and\n`convert_to()/convert_from()`](https://www.postgresql.org/docs/12/functions-binarystring.html)\nbinary string functions.  The derivable keyspace is huge given one\n`bigint` keyspace per context and 2^64 contexts.\n\nTo derive a key:\n\n    # select derive_key(1);\n                              derive_key\n    --------------------------------------------------------------------\n     \\x84fa0487750d27386ad6235fc0c4bf3a9aa2c3ccb0e32b405b66e69d5021247b\n\n    # select derive_key(1, 64);\n                                                              derive_key\n    ------------------------------------------------------------------------------------------------------------------------------------\n     \\xc58cbe0522ac4875707722251e53c0f0cfd8e8b76b133f399e2c64c9999f01cb1216d2ccfe9448ed8c225c8ba5db9b093ff5c1beb2d1fd612a38f40e362073fb\n\n    # select derive_key(1, 32, '__auth__');\n                              derive_key\n    --------------------------------------------------------------------\n     \\xa9aadb2331324f399fb58576c69f51727901c651c970f3ef6cff47066ea92e95\n\nThe default keysize is `32` and the default context is `'pgsodium'`.\n\nDerived keys can be used either directly in `crypto_secretbox_*`\nfunctions for \"symmetric\" encryption or as seeds for generating other\nkeypairs using for example `crypto_box_seed_new_keypair()` and\n`crypto_sign_seed_new_keypair()`.\n\n    # select * from crypto_box_seed_new_keypair(derive_key(1));\n                                   public                               |                               secret\n    --------------------------------------------------------------------+--------------------------------------------------------------------\n     \\x01d0e0ec4b1fa9cc8dede88e0b43083f7e9cd33be4f91f0b25aa54d70f562278 | \\x066ec431741a9d39f38c909de4a143ed39b09834ca37b6dd2ba3d015206f14ca\n\n# Security Roles\n\nThe pgsodium API has three nested layers of security roles:\n\n  - `pgsodium_keyiduser` Is the least privileged role, it cannot\n    create or use raw `bytea` keys, it can only create\n    `crypto_secretkey` nonces and access the `crypto_secretkey`,\n    `crypto_auth` and `crypto_aead` API functions that accept key ids\n    only.  This role can also access the `randombytes` API.  This is\n    the role you would typically give to a user facing application.\n\n  - `pgsodium_keyholder` Is the next more privileged layer, it can do\n    everything `pgsodium_keyiduser` can do, but it can also use, but\n    not create, raw `bytea` encryption keys.  This role can use public\n    key APIs like `crypto_box` and `crypto_sign`, but it cannot create\n    keypairs.  This role is useful for when keys come from external\n    sources and must be passed as `bytea` to API functions.\n\n  - `pgsodium_keymaker` is the most privileged role, it can do\n    everything the previous roles can do, but it can also create keys,\n    keypairs and key seeds and derive keys from key ids.  Be very\n    careful how you grant access to this role, as it can create valid\n    secret keys derived from the root key.\n\nNote that public key apis like `crypto_box` and `crypto_sign` do not\nhave \"key id\" variants, because they work with a combination of four\nkeys, two keypairs for each of two parties.\n\nAs the point of public key encryption is for each party to keep their\nsecrets and for that secret to not be centrally derivable.  You can\ncertainly call something like `SELECT * FROM\ncrypto_box_seed_new_keypair(derive_key(1))` and make deterministic\nkeypairs, but then if an attacker steals your root key they can derive\nall keypair secrets, so this approach is not recommended.\n\n# Encrypting Columns\n\nHere's an example script that encrypts a column in a table and\nprovides a view that does on the fly decryption.  Each row's stores\nthe nonce and key id used to encrypt the column.  Note how no keys are\nused in this example, only key ids, so this code can be run by the\nleast privileged `pgsodium_keyiduser` role:\n\n    CREATE SCHEMA pgsodium;\n    CREATE EXTENSION pgsodium WITH SCHEMA pgsodium;\n\n    CREATE TABLE test (\n        id bigserial primary key,\n        key_id bigint not null default 1,\n        nonce bytea not null,\n        data bytea\n        );\n\n    CREATE VIEW test_view AS\n        SELECT id,\n        convert_from(pgsodium.crypto_secretbox_open(\n                 data,\n                 nonce,\n                 key_id),\n        'utf8') AS data FROM test;\n\n    CREATE OR REPLACE FUNCTION test_encrypt() RETURNS trigger\n        language plpgsql AS\n    $$\n    DECLARE\n        new_nonce bytea = pgsodium.crypto_secretbox_noncegen();\n        test_id bigint;\n    BEGIN\n\n        insert into test (nonce) values (new_nonce) returning id into test_id;\n        update test set data = pgsodium.crypto_secretbox(\n            convert_to(new.data, 'utf8'),\n            new_nonce,\n            key_id)\n        where id = test_id;\n        RETURN new;\n    END;\n    $$;\n\n    CREATE TRIGGER test_encrypt_trigger\n        INSTEAD OF INSERT ON test_view\n        FOR EACH ROW\n        EXECUTE FUNCTION test_encrypt();\n\nUse the view as if it were a normal table, but the underlying table is\nencrypted.  Again, no keys are stored or even available to this code,\nonly [derived keys](#server-key-management) based on a key id are\nused.\n\nThe trigger `test_encrypt_trigger` is fired `INSTEAD OF INSERT ON` the\nwrapper `test_view`, newly inserted rows are encrypted with a key\nderived from the stored key_id which defaults to 1.\n\n    # insert into test_view (data) values ('this is one'), ('this is two');\n\n    # select * from test;\n     id | key_id |                       nonce                        |                           data\n    ----+--------+----------------------------------------------------+----------------------------------------------------------\n      3 |      1 | \\xa6b9c4bfbfe194541faa21f2d31565babff1a250a010fa79 | \\xb1d0432b173eb7fbef315ba5dd961454a4e2eef1332f9847eaef68\n      4 |      1 | \\x0ad82e537d5422966c110ed65f60c6bada57c0be73476950 | \\x8c29b12778b6bb5873c9f7fa123c4f105d6eb16e0c54dfae93da10\n\n    # select * from test_view;\n     id |    data\n    ----+-------------\n      3 | this is one\n      4 | this is two\n\nKey rotation can be done with a rotation function that will re-encrypt\na row with a new key id.  This function also requires no access to\nkeys, it works only by key id and thus can be run by the least\nprivileged `pgsodium_keyiduser`:\n\n    CREATE OR REPLACE FUNCTION rotate_key(test_id bigint, new_key bigint)\n        RETURNS void LANGUAGE plpgsql AS $$\n    DECLARE\n        new_nonce bytea;\n    BEGIN\n        new_nonce = pgsodium.crypto_secretbox_noncegen();\n        UPDATE test SET\n        nonce = new_nonce,\n        key_id = new_key,\n        data = pgsodium.crypto_secretbox(\n            pgsodium.crypto_secretbox_open(\n                 test.data,\n                 test.nonce,\n                 test.key_id),\n            new_nonce,\n            new_key)\n        WHERE test.id = test_id;\n        RETURN;\n    END;\n    $$;\n\nCall the rotation function by passing a row id and a new key id.  The\nold row will be decrypted with the old derived key, then encrypted\nwith the new derived key.\n\n    # select rotate_key(3, 2);\n     rotate_key\n    ------------\n\n\n    # select * from test;\n     id | key_id |                       nonce                        |                           data\n    ----+--------+----------------------------------------------------+----------------------------------------------------------\n      4 |      1 | \\x0ad82e537d5422966c110ed65f60c6bada57c0be73476950 | \\x8c29b12778b6bb5873c9f7fa123c4f105d6eb16e0c54dfae93da10\n      3 |      2 | \\x775f6b2fb01195f8646656d7588e581856ea44353332068e | \\x27da7b96f4eb611a0c8ad8e4cee0988714d14e830a9aaf8f282c2a\n\n    # select * from test_view;\n     id |    data\n    ----+-------------\n      4 | this is two\n      3 | this is one\n\n\nIf an attacker acquires a dump of the table or database, they will not\nbe able to derive the keys used encrypt the data since they will not\nhave the root server managed key, which is never revealed to SQL See\nthe [example file for more details](./example/encrypted_table.sql).\n\n# Simple public key encryption with `crypto_box()`\n\nHere's an example usage from the test.sql that uses command-line\n[`psql`](https://www.postgresql.org/docs/12/app-psql.html) client\ncommands (which begin with a backslash) to create keypairs and encrypt\na message from Alice to Bob.\n\n    -- Generate public and secret keypairs for bob and alice\n    -- \\gset [prefix] is a psql command that will create local\n    -- script variables\n\n    SELECT public, secret FROM crypto_box_new_keypair() \\gset bob_\n    SELECT public, secret FROM crypto_box_new_keypair() \\gset alice_\n\n    -- Create a boxnonce\n\n    SELECT crypto_box_noncegen() boxnonce \\gset\n\n    -- Alice encrypts the box for bob using her secret key, the nonce and his public key\n\n    SELECT crypto_box('bob is your uncle', :'boxnonce', :'bob_public', :'alice_secret') box \\gset\n\n    -- Bob decrypts the box using his secret key, the nonce, and Alice's public key\n\n    SELECT crypto_box_open(:'box', :'boxnonce', :'alice_public', :'bob_secret');\n\nNote in the above example, no secrets are *stored* in the db, but they\nare *interpolated* into the sql by the psql client that is sent to the\nserver, so it's possible they can show up in the database logs.  You\ncan avoid this by using derived keys.\n\n# Avoid secret logging\n\nIf you choose to work with your own keys and not restrict yourself to\nthe `pgsodium_keyiduser` role, a useful approach is to keep keys in an\nexternal storage and disables logging while injecting the keys into\nlocal variables with [`SET\nLOCAL`](https://www.postgresql.org/docs/12/sql-set.html). If the\nimages of database are hacked or stolen, the keys will not be\navailable to the attacker.\n\nTo disable logging of the key injections, `SET LOCAL` is also used to\ndisable\n[`log_statements`](https://www.postgresql.org/docs/12/runtime-config-logging.html#RUNTIME-CONFIG-LOGGING-WHAT)\nand then re-enable normal logging afterwards. as shown below. Setting\n`log_statement` requires superuser privileges:\n\n    -- SET LOCAL must be done in a transaction block\n    BEGIN;\n\n    -- Generate a boxnonce, and public and secret keypairs for bob and alice\n    -- This creates secrets that are sent back to the client but not stored\n    -- or logged.  Make sure you're using an encrypted database connection!\n\n    SELECT crypto_box_noncegen() boxnonce \\gset\n    SELECT public, secret FROM crypto_box_new_keypair() \\gset bob_\n    SELECT public, secret FROM crypto_box_new_keypair() \\gset alice_\n\n    -- Turn off logging and inject secrets\n    -- into session with set local, then resume logging.\n\n    SET LOCAL log_statement = 'none';\n    SET LOCAL app.bob_secret = :'bob_secret';\n    SET LOCAL app.alice_secret = :'alice_secret';\n    RESET log_statement;\n\n    -- Now call the `current_setting()` function to get the secrets, these are not\n    -- stored in the db but only in session memory, when the session is closed they are no longer\n    -- accessible.\n\n    -- Alice encrypts the box for bob using her secret key and his public key\n\n    SELECT crypto_box('bob is your uncle', :'boxnonce', :'bob_public',\n                      current_setting('app.alice_secret')::bytea) box \\gset\n\n    -- Bob decrypts the box using his secret key and Alice's public key.\n\n    SELECT crypto_box_open(:'box', :'boxnonce', :'alice_public',\n                              current_setting('app.bob_secret')::bytea);\n\n    COMMIT;\n\nFor additional paranoia you can use a function to check that the\nconnection being used is secure or a unix domain socket.\n\n    CREATE FUNCTION is_ssl_or_domain_socket() RETURNS bool\n    LANGUAGE plpgsql AS $$\n    DECLARE\n        addr text;\n\t    ssl text;\n    BEGIN\n        SELECT inet_client_addr() INTO addr;\n        SELECT current_setting('ssl', true) INTO ssl;\n        IF NOT FOUND OR ((ssl IS NULL OR ssl != 'on')\n            AND (addr IS NOT NULL OR length(addr) != 0))\n        THEN\n            RETURN false;\n        END IF;\n        RETURN true;\n    END;\n    $$;\n\nThis doesn't guarantee the secret won't leak out in some way of\ncourse, but it can useful if you never store secrets and send them\nonly through secure channels back to the client, for example using the\n`psql` client `\\gset` command shown above, or by only storing a\nderived key id and context.\n\n# API Reference\n\nThe reference below is adapted from and uses some of the same language\nfound at the [libsodium C API\nDocumentation](https://doc.libsodium.org/).  Refer to those documents\nfor details on algorithms and other libsodium specific details.\n\nThe libsodium documentation is Copyright (c) 2014-2018, Frank Denis\n<github@pureftpd.org> and released under [The ISC\nLicense](https://github.com/jedisct1/libsodium-doc/blob/master/LICENSE).\n\n## Generating Random Data\n\nFunctions:\n```\n    randombytes_random() -> integer\n\n    randombytes_uniform(upper_bound integer) -> integer\n\n    randombytes_buf(size integer) -> bytea\n\n```\n\nThe library provides a set of functions to generate unpredictable\ndata, suitable for creating secret keys.\n\n    # select randombytes_random();\n     randombytes_random\n    --------------------\n             1229887405\n    (1 row)\n\nThe `randombytes_random()` function returns an unpredictable value\nbetween 0 and 0xffffffff (included).\n\n    # select randombytes_uniform(42);\n     randombytes_uniform\n    ---------------------\n                      23\n    (1 row)\n\nThe `randombytes_uniform()` function returns an unpredictable value\nbetween `0` and `upper_bound` (excluded). Unlike `randombytes_random() %\nupper_bound`, it guarantees a uniform distribution of the possible\noutput values even when `upper_bound` is not a power of 2. Note that an\n`upper_bound < 2` leaves only a single element to be chosen, namely 0.\n\n    # select randombytes_buf(42);\n                                        randombytes_buf\n    ----------------------------------------------------------------------------------------\n     \\x27cec8d2c3de16317074b57acba2109e43b5623e1fb7cae12e8806daa21a72f058430f22ec993986fcb2\n    (1 row)\n\nThe `randombytes_buf()` function returns a `bytea` with an\nunpredictable sequence of bytes.\n\n    # select randombytes_new_seed() bufseed \\gset\n    # select randombytes_buf_deterministic(42, :'bufseed');\n                                 randombytes_buf_deterministic\n    ----------------------------------------------------------------------------------------\n     \\xa183e8d4acd68119ab2cacd9e46317ec3a00a6a8820b00339072f7c24554d496086209d7911c3744b110\n    (1 row)\n\nThe `randombytes_buf_deterministic()` returns a `size` bytea\ncontaining bytes indistinguishable from random bytes without knowing\nthe seed.  For a given seed, this function will always output the same\nsequence. size can be up to 2^38 (256 GB).\n\n[C API\nDocumentation](https://doc.libsodium.org/generating_random_data)\n\n## Secret key cryptography\n\n\n[C API\nDocumentation](https://doc.libsodium.org/secret-key_cryptography)\n\n### Authenticated encryption\n\nFunctions:\n```\n    crypto_secretbox_keygen() -> bytea\n\n    crypto_secretbox_noncegen() -> bytea\n\n    crypto_secretbox(message bytea, nonce bytea, key bytea) -> bytea\n\n    crypto_secretbox_open(ciphertext bytea, nonce bytea, key bytea) -> bytea\n```\n\n`crypto_secretbox_keygen()` generates a random secret key which can be\nused to encrypt and decrypt messages.\n\n`crypto_secretbox_noncegen()` generates a random nonce which will be\nused when encrypting messages.  For security, each nonce must be used\nonly once, though it is not a secret.  The purpose of the nonce is to\nadd randomness to the message so that the same message encrypted\nmultiple times with the same key will produce different ciphertexts.\n\n`crypto_secretbox()` encrypts a message using a previously generated\nnonce and secret key or key id.  The encrypted message can be\ndecrypted using `crypto_secretbox_open()` Note that in order to\ndecrypt the message, the original nonce will be needed.\n\n`crypto_secretbox_open()` decrypts a message encrypted by\n`crypto_secretbox()`.\n\n[C API\nDocumentation](https://doc.libsodium.org/secret-key_cryptography/secretbox)\n\n### Authentication\n\nFunctions:\n```\n    crypto_auth_keygen() -> bytea\n\n    crypto_auth(message bytea, key bytea) -> bytea\n\n    crypto_auth_verify(mac bytea, message bytea, key bytea) -> boolean\n```\n\n`crypto_auth_keygen()` generates a message-signing key for use by\n`crypto_auth()`.\n\n`crypto_auth()` generates an authentication tag (mac) for a\ncombination of message and secret key.  This does not encrypt the\nmessage; it simply provides a means to prove that the message has not\nbeen tampered with.  To verify a message tagged in this way, use\n`crypto_auth_verify()`.  This function is deterministic: for a given\nmessage and key, the generated mac will always be the same.\n\nNote that this requires access to the secret\nkey, which is not something that should normally be shared.  If\nmany users need to verify message it is usually better to use\n[Public Key Signatures](#user-content-public-key-signatures) rather\nthan sharing secret keys.\n\n`crypto_auth_verify()` verifies that the given mac (authentication\ntag) matches the supplied message and key.  This tells us that the\noriginal message has not been tampered with.\n\n[C API\nDocumentation](https://doc.libsodium.org/secret-key_cryptography/secret-key_authentication)\n## Public key cryptography\n\n[C API\nDocumentation](https://doc.libsodium.org/public-key_cryptography)\n\n### Authenticated encryption\n\nFunctions:\n```\n    crypto_box_new_keypair() -> crypto_box_keypair\n\n    crypto_box_noncegen() -> bytea\n\n    crypto_box(message bytea, nonce bytea,\n               public bytea, secret bytea) -> bytea\n\n    crypto_box_open(ciphertext bytea, nonce bytea,\n                    public bytea, secret bytea) -> bytea\n```\n\n`crypto_box_new_keypair()` returns a new, randomly generated, pair of\nkeys for public key encryption.  The public key can be shared with\nanyone.  The secret key must never be shared.\n\n`crypto_box_noncegen()` generates a random nonce which will be used\nwhen encrypting messages.  For security, each nonce must be used only\nonce, though it is not a secret.  The purpose of the nonce is to add\nrandomness to the message so that the same message encrypted multiple\ntimes with the same key will produce different ciphertexts.\n\n`crypto_box()` encrypts a message using a nonce, the intended\nrecipient's public key and the sender's secret key.  The resulting\nciphertext can only be decrypted by the intended recipient using their\nsecret key.  The nonce must be sent along with the ciphertext.\n\n`crypto_box_open()` decrypts a ciphertext encrypted using\n`crypto_box()`.  It takes the ciphertext, nonce, the sender's public\nkey and the recipient's secret key as parameters, and returns the\noriginal message.  Note that the recipient should ensure that the\npublic key belongs to the sender.\n\n[C API\nDocumentation](https://doc.libsodium.org/public-key_cryptography/authenticated_encryption)\n\n### Public key signatures\n\n\nFunctions:\n```\n    crypto_sign_new_keypair() -> crypto_sign_keypair\n\n  combined mode functions:\n\n    crypto_sign(message bytea, key bytea) -> bytea\n\n    crypto_sign_open(signed_message bytea, key bytea) -> bytea\n\n  detached mode functions:\n\n    crypto_sign_detached(message bytea, key bytea) -> bytea\n\n    crypto_sign_verify_detached(sig bytea, message bytea, key bytea) -> boolean\n\n  multi-part message functions:\n\n    crypto_sign_init() -> bytea\n\n    crypto_sign_update(state bytea, message bytea) -> bytea\n\n    crypto_sign_final_create(state bytea, key bytea) -> bytea\n\n    crypto_sign_final_verify(state bytea, signature bytea, key bytea) -> boolean\n```\n\nAggregates:\n```\n    crypto_sign_update_agg(message bytea) -> bytea\n\n    crypto_sign_update_agg(state, bytea message bytea) -> bytea\n```\n\nThese functions are used to authenticate that messages have have come\nfrom a specific originator (the holder of the secret key for which you\nhave the public key), and have not been tampered with.\n\n`crypto_sign_new_keypair()` returns a new, randomly generated, pair of\nkeys for public key signatures.  The public key can be shared with\nanyone.  The secret key must never be shared.\n\n`crypto_sign()` and `crypto_sign_verify()` operate in combined mode.\nIn this mode the message that is being signed is combined with its\nsignature as a single unit.\n\n`crypto_sign()` creates a signature, using the signer's secret key,\nwhich it prepends to the message.  The result can be authenticated\nusing `crypto_sign_open()`.\n\n`crypto_sign_open()` takes a signed message created by\n`crypto_sign()`, checks its validity using the sender's public key and\nreturns the original message if it is valid, otherwise raises a data\nexception.\n\n`crypto_sign_detached()` and `crypto_sign_verify_detached()` operate\nin detached mode.   In this mode the message is kept independent from\nits signature.  This can be useful when wishing to sign objects that\nhave already been stored, or where multiple signatures are desired for\nan object.\n\n`crypto_sign_detached()` generates a signature for message using the\nsigner's secret key.  The result is a signature which exists\nindependently of the message, which can be verified using\n`crypto_sign_verify_detached()`.\n\n`crypto_sign_verify_detached()` is used to verify a signature\ngenerated by `crypto_sign_detached()`.  It takes the generated\nsignature, the original message, and the signer's public key and\nreturns true if the signature matches the message and key, and false\notherwise.\n\n`crypto_sign_init()`, `crypto_sign_update()`,\n`crypto_sign_final_create()`, `crypto_sign_final_verify()`, and the\naggregates `crypto_sign_update_agg()` handle signatures for\nmulti-part messages.  To create or verify a signature for a multi-part\nmessage `crypto_sign_init()` is used to start the process, and then each\nmessage-part is passed to `crypto_sign_update()` or\n`crypto_sign_update_agg()`.  Finally the signature is generated using\n`crypto_sign_final_update()` or verified using\n`crypto_sign_final_verify()`.\n\n`crypto_sign_init()` creates an initial state value which will be\npassed to `crypto_sign_update()` or `crypto_sign_update_agg()`.\n\n`crypto_sign_update()` or `crypto_sign_update_agg()` will be used to\nupdate the state for each part of the multi-part message.\n`crypto_sign_update()` takes as a parameter the state returned from\n`crypto_sign_init()` or the preceding call to `crypto_sign_update()`\nor `crypto_sign_update_agg()`.  `crypto_sign_update_agg()` has two\nvariants: one takes a previous state value, allowing multiple\naggregates to be processed sequentially, and one takes no state\nparameter, initialising the state itself.  Note that the order in\nwhich the parts of a multi-part message are processed is critical.\nThey must be processed in the same order for signing and verifying.\n\n`crypto_sign_final_update()` takes the state returned from the last\ncall to `crypto_sign_update()` or `crypto_sign_update_agg()` and the\nsigner's secret key and produces the final signature.  This can be\nchecked using `crypto_sign_final_verify()`.\n\n`crypto_sign_final_verify()` is used to verify a multi-part message\nsignature created by `crypto_sign_final_update()`.  It must be\npreceded by the same set of calls to `crypto_sign_update()` or\n`crypto_sign_update_agg()` (with the same message-parts, in the same\norder) that were used to create the signature.  It takes the state\nreturned from the last such call, along with the signature and the\nsigner's public key and returns true if the messages, key and\nsignature all match.\n\nTo sign or verify multi-part messages in SQL, CTE (Common Table\nExpression) queries are particularly effective.  For example to sign a\nmessage consisting of a timestamp and several message_parts:\n\n```.sql\nwith init as\n  (\n    select crypto_sign_init() as state\n  ),\ntimestamp_part as\n  (\n    select crypto_sign_update(i.state, m.timestamp::bytea) as state\n      from init i\n     cross join messages m\n     where m.message_id = 42\n  ),\nremaining_parts as\n  (\n    select crypto_sign_update(t.state, p.message_part::bytea) as state\n      from timestamp_part t\n     cross join (\n       select message_part\n         from message_parts\n        where message_id = 42\n        order by message_part_num) p\n  )\nselect crypto_sign_final_create(r.state, k.secret_key) as sig\n  from remaining_parts r\n cross join keys k\n where k.key_name = 'xyzzy';\n```\n\nNote that storing secret keys in a table, as is done in the example\nabove, is a bad practice unless you have effective row-level security\nin place.\n\n[C API\nDocumentation](https://doc.libsodium.org/public-key_cryptography/public-key_signatures)\n\n### Sealed boxes\n\nSealed boxes are designed to anonymously send messages to a recipient\ngiven its public key.  Only the recipient can decrypt these messages,\nusing its private key. While the recipient can verify the integrity of\nthe message, it cannot verify the identity of the sender.\n\n    SELECT public, secret FROM crypto_box_new_keypair() \\gset bob_\n\n    SELECT crypto_box_seal('bob is your uncle', :'bob_public') sealed \\gset\n\nThe `sealed` psql variable is now the encrypted sealed box.  To unseal\nit, bob needs his public and secret key:\n\n    SELECT is(crypto_box_seal_open(:'sealed', :'bob_public', :'bob_secret'),\n              'bob is your uncle', 'crypto_box_seal/open');\n\n\n[C API Documentation](https://doc.libsodium.org/public-key_cryptography/sealed_boxes)\n\n## Hashing\n\nThis API computes a fixed-length fingerprint for an arbitrary long message.\nSample use cases:\n\n  - File integrity checking\n  - Creating unique identifiers to index arbitrary long data\n\nThe `crypto_generichash` and `crypto_shorthash` functions can be used\nto generate hashes.  `crypto_generichash` takes an optional hash key\nargument which can be NULL. In this case, a message will always have\nthe same fingerprint, similar to the MD5 or SHA-1 functions for which\ncrypto_generichash() is a faster and more secure alternative.\n\nBut a key can also be specified. A message will always have the same\nfingerprint for a given key, but different keys used to hash the same\nmessage are very likely to produce distinct fingerprints.  In\nparticular, the key can be used to make sure that different\napplications generate different fingerprints even if they process the\nsame data.\n\n    SELECT is(crypto_generichash('bob is your uncle'),\n              '\\x6c80c5f772572423c3910a9561710313e4b6e74abc0d65f577a8ac1583673657',\n              'crypto_generichash');\n\n    SELECT is(crypto_generichash('bob is your uncle', NULL),\n              '\\x6c80c5f772572423c3910a9561710313e4b6e74abc0d65f577a8ac1583673657',\n              'crypto_generichash NULL key');\n\n    SELECT is(crypto_generichash('bob is your uncle', 'super sekret key'),\n              '\\xe8e9e180d918ea9afe0bf44d1945ec356b2b6845e9a4c31acc6c02d826036e41',\n              'crypto_generichash with key');\n\nMany applications and programming language implementations were\nrecently found to be vulnerable to denial-of-service attacks when a\nhash function with weak security guarantees, such as Murmurhash 3, was\nused to construct a hash table .\n\nIn order to address this, Sodium provides the crypto_shorthash()\nfunction, which outputs short but unpredictable (without knowing the\nsecret key) values suitable for picking a list in a hash table for a\ngiven key.  This function is optimized for short inputs.  The output\nof this function is only 64 bits. Therefore, it should not be\nconsidered collision-resistant.\n\nUse cases:\n\n- Hash tables Probabilistic\n- data structures such as Bloom filters\n- Integrity checking in interactive protocols\n\nExample:\n\n    SELECT is(crypto_shorthash('bob is your uncle', 'super sekret key'),\n              '\\xe080614efb824a15',\n              'crypto_shorthash');\n\n\n[C API Documentation](https://doc.libsodium.org/hashing)\n\n## Password hashing\n\n    SELECT lives_ok($$SELECT crypto_pwhash_saltgen()$$, 'crypto_pwhash_saltgen');\n\n    SELECT is(crypto_pwhash('Correct Horse Battery Staple', '\\xccfe2b51d426f88f6f8f18c24635616b'),\n            '\\x77d029a9b3035c88f186ed0f69f58386ad0bd5252851b4e89f0d7057b5081342',\n            'crypto_pwhash');\n\n    SELECT ok(crypto_pwhash_str_verify(crypto_pwhash_str('Correct Horse Battery Staple'),\n              'Correct Horse Battery Staple'),\n              'crypto_pwhash_str_verify');\n\n\n[C API Documentation](https://doc.libsodium.org/password_hashing)\n\n## Key Derivation\n\nMultiple secret subkeys can be derived from a single primary key.\nGiven the primary key and a key identifier, a subkey can be\ndeterministically computed. However, given a subkey, an attacker\ncannot compute the primary key nor any other subkeys.\n\n    SELECT crypto_kdf_keygen() kdfkey \\gset\n    SELECT length(crypto_kdf_derive_from_key(64, 1, '__auth__', :'kdfkey')) kdfsubkeylen \\gset\n    SELECT is(:kdfsubkeylen, 64, 'kdf byte derived subkey');\n\n    SELECT length(crypto_kdf_derive_from_key(32, 1, '__auth__', :'kdfkey')) kdfsubkeylen \\gset\n    SELECT is(:kdfsubkeylen, 32, 'kdf 32 byte derived subkey');\n\n    SELECT is(crypto_kdf_derive_from_key(32, 2, '__auth__', :'kdfkey'),\n        crypto_kdf_derive_from_key(32, 2, '__auth__', :'kdfkey'), 'kdf subkeys are deterministic.');\n\n[C API Documentation](https://doc.libsodium.org/key_derivation)\n\n## Key Exchange\n\nUsing the key exchange API, two parties can securely compute a set of\nshared keys using their peer's public key and their own secret key.\n\n    SELECT crypto_kx_new_seed() kxseed \\gset\n\n    SELECT public, secret FROM crypto_kx_seed_new_keypair(:'kxseed') \\gset seed_bob_\n    SELECT public, secret FROM crypto_kx_seed_new_keypair(:'kxseed') \\gset seed_alice_\n\n    SELECT tx, rx FROM crypto_kx_client_session_keys(\n        :'seed_bob_public', :'seed_bob_secret',\n        :'seed_alice_public') \\gset session_bob_\n\n    SELECT tx, rx FROM crypto_kx_server_session_keys(\n        :'seed_alice_public', :'seed_alice_secret',\n        :'seed_bob_public') \\gset session_alice_\n\n    SELECT crypto_secretbox('hello alice', :'secretboxnonce', :'session_bob_tx') bob_to_alice \\gset\n\n    SELECT is(crypto_secretbox_open(:'bob_to_alice', :'secretboxnonce', :'session_alice_rx'),\n              'hello alice', 'secretbox_open session key');\n\n    SELECT crypto_secretbox('hello bob', :'secretboxnonce', :'session_alice_tx') alice_to_bob \\gset\n\n    SELECT is(crypto_secretbox_open(:'alice_to_bob', :'secretboxnonce', :'session_bob_rx'),\n              'hello bob', 'secretbox_open session key');\n\n\n[C API Documentation](https://doc.libsodium.org/key_exchange)\n\n## HMAC512/256\n\n[https://en.wikipedia.org/wiki/HMAC]\n\nIn cryptography, an HMAC (sometimes expanded as either keyed-hash\nmessage authentication code or hash-based message authentication code)\nis a specific type of message authentication code (MAC) involving a\ncryptographic hash function and a secret cryptographic key. As with\nany MAC, it may be used to simultaneously verify both the data\nintegrity and authenticity of a message.\n\n    select crypto_auth_hmacsha512_keygen() hmac512key \\gset\n    select crypto_auth_hmacsha512('food', :'hmac512key') hmac512 \\gset\n\n    select is(crypto_auth_hmacsha512_verify(:'hmac512', 'food', :'hmac512key'), true, 'hmac512 verified');\n    select is(crypto_auth_hmacsha512_verify(:'hmac512', 'fo0d', :'hmac512key'), false, 'hmac512 not verified');\n\n[C API Documentation](https://doc.libsodium.org/advanced/hmac-sha2)\n\n## Advanced Stream API (XChaCha20)\n\nThe stream API is for advanced users only and only provide low level\nencryption without authentication.\n\n[C API Documentation](https://doc.libsodium.org/advanced/stream_ciphers/xchacha20)\n\n## XChaCha20-SIV\n\nDeterministic/nonce-reuse resistant authenticated encryption scheme\nusing XChaCha20.\n\n[C API Documentation](https://github.com/jedisct1/libsodium-xchacha20-siv)\n\n## SignCryption\n\nTraditional authenticated encryption with a shared key allows two or\nmore parties to decrypt a ciphertext and verify that it was created by\na member of the group knowing that secret key.\n\nHowever, [it doesn't allow\nverification](https://theworld.com/~dtd/sign_encrypt/sign_encrypt7.html)\nof who in a group originally created a message.\n\nIn order to do so, authenticated encryption has to be combined with\nsignatures.\n\nThe Toorani-Beheshti signcryption scheme achieves this using a single\nkey pair per device, with forward security and public verifiability.\n\n[C API Documentation](https://github.com/jedisct1/libsodium-signcryption)\n"
 },
 {
  "repo": "jlopp/lopp.net",
  "language": "HTML",
  "readme_contents": "# lopp.net\n\nPull requests are welcome; most contributors will be interested in modifying files in the `/bitcoin-information` directory or `lightning-information.html` which are my lists of educational resources.\n\nJudgement criteria for submission of new resources is completely arbitrary based upon my own whims, but in general:\n\n* Resources that are highly similar to existing resources need to be substantially better in some way.\n* Resources that are clearly built as referral revenue mechanisms will be rejected.\n* Services that are new and have the potential to be scams will be held indefinitely until they have proven their reputation.\n\n<img src=\"/images/resources.png\" />"
 },
 {
  "repo": "timkurvers/as3-crypto",
  "language": "ActionScript",
  "readme_contents": "# ActionScript 3 Cryptography Library\n\n[![Seeking new maintainer(s)](https://img.shields.io/badge/%E2%9A%A0-seeking_new_maintainer%28s%29-red.svg?style=flat)](https://github.com/timkurvers/as3-crypto/issues/21)\n\nCopyright (c) 2007 Henri Torgemane  \nModifications (c) 2011-2013 Tim Kurvers and various other contributors\n\nA cryptography library written in ActionScript 3 that provides several common algorithms. This version also introduces a TLS engine, more commonly known as SSL.\n\nLicensed under the **BSD** license. Includes several derivative works from Java, C and JavaScript sources. See LICENSE for more information and a list of contributors.\n\n\n## Original & GitHub-fork\n\nThe original project can be found at [http://code.google.com/p/as3crypto/](http://code.google.com/p/as3crypto/)\n\nAlthough unofficial, this GitHub-fork includes community fixes and patches.\n\nConsult the CHANGELOG for implemented fixes and contributors.\n\n\n## Usage\n\nThe binary can be found in `/deploy/as3crypto.swc`\n\nCopy to your library folder, add it to your class-path and off you go.\n\n\n## Features\n\n* Protocols: TLS 1.0 support (partial)\n* Certificates: X.509 Certificate parsing and validation, built-in Root CAs.\n* Public Key Encryption: RSA (encrypt/decrypt, sign/verify)\n* Secret Key Encryption: AES, DES, 3DES, BlowFish, XTEA, RC4\n* Confidentiality Modes: ECB, CBC, CFB, CFB8, OFB, CTR\n* Hashing Algorithms: MD2, MD5, SHA-1, SHA-224, SHA-256\n* Paddings available: PKCS#5, PKCS#1 type 1 and 2\n* Other Useful Stuff: HMAC, Random, TLS-PRF, some ASN-1/DER parsing\n"
 },
 {
  "repo": "EOSIO/eosjs-ecc",
  "language": "JavaScript",
  "readme_contents": "[![NPM](https://img.shields.io/npm/v/eosjs-ecc.svg)](https://www.npmjs.org/package/eosjs-ecc)\n[![Build Status](https://travis-ci.org/EOSIO/eosjs-ecc.svg?branch=master)](https://travis-ci.org/EOSIO/eosjs-ecc)\n\n# Elliptic curve cryptography functions (ECC)\n\nPrivate Key, Public Key, Signature, AES, Encryption / Decryption\n\n# Import\n\n```js\nimport ecc from 'eosjs-ecc'\n// or\nconst ecc = require('eosjs-ecc')\n```\n\n# Include\n\n-   Install with: `yarn add eosjs-ecc`\n-   Html script tag, see [releases](https://github.com/EOSIO/eosjs-ecc/releases) for the correct **version** and its matching script **integrity** hash.\n\n```html\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <!--\n  sha512-cL+IQQaQ586s9DrXfGtDheRpj5iDKh2M+xlpfwbhNjRIp4BGQ1fkM/vB4Ta8mc+f51YBW9sJiPcyMDIreJe6gQ== lib/eosjs-ecc.js\n  sha512-dYFDmK/d9r3/NCp6toLtfkwOjSMRBaEzaGAx1tfRItC0nsI0hVLERk05iNBQR7uDNI7ludYhcBI4vUiFHdjsTQ== lib/eosjs-ecc.min.js\n  sha512-eq1SCoSe38uR1UVuQMwR73VgY8qKTBDc87n2nIiC5WLhn1o2y1U6c5wY8lrigVX7INM8fM0PxDlMX5WvpghKig== lib/eosjs-ecc.min.js.map\n  -->\n  <script src=\"https://cdn.jsdelivr.net/npm/eosjs-ecc@4.0.4/lib/eosjs-ecc.min.js\"\n    integrity=\"sha512-dYFDmK/d9r3/NCp6toLtfkwOjSMRBaEzaGAx1tfRItC0nsI0hVLERk05iNBQR7uDNI7ludYhcBI4vUiFHdjsTQ==\"\n    crossorigin=\"anonymous\"></script>\n\n</head>\n<body>\n  See console object: eosjs_ecc\n</body>\n</html>\n```\n\n# Common API\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n### Table of Contents\n\n-   [wif](#wif)\n-   [ecc](#ecc)\n    -   [initialize](#initialize)\n    -   [unsafeRandomKey](#unsaferandomkey)\n    -   [randomKey](#randomkey)\n        -   [Parameters](#parameters)\n        -   [Examples](#examples)\n    -   [seedPrivate](#seedprivate)\n        -   [Parameters](#parameters-1)\n        -   [Examples](#examples-1)\n    -   [privateToPublic](#privatetopublic)\n        -   [Parameters](#parameters-2)\n        -   [Examples](#examples-2)\n    -   [isValidPublic](#isvalidpublic)\n        -   [Parameters](#parameters-3)\n        -   [Examples](#examples-3)\n    -   [isValidPrivate](#isvalidprivate)\n        -   [Parameters](#parameters-4)\n        -   [Examples](#examples-4)\n    -   [sign](#sign)\n        -   [Parameters](#parameters-5)\n        -   [Examples](#examples-5)\n    -   [signHash](#signhash)\n        -   [Parameters](#parameters-6)\n    -   [verify](#verify)\n        -   [Parameters](#parameters-7)\n        -   [Examples](#examples-6)\n    -   [recover](#recover)\n        -   [Parameters](#parameters-8)\n        -   [Examples](#examples-7)\n    -   [recoverHash](#recoverhash)\n        -   [Parameters](#parameters-9)\n    -   [sha256](#sha256)\n        -   [Parameters](#parameters-10)\n        -   [Examples](#examples-8)\n-   [pubkey](#pubkey)\n\n## wif\n\n[Wallet Import Format](https://en.bitcoin.it/wiki/Wallet_import_format)\n\nType: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n## ecc\n\n### initialize\n\nInitialize by running some self-checking code.  This should take a\nsecond to gather additional CPU entropy used during private key\ngeneration.\n\nInitialization happens once even if called multiple times.\n\nReturns **[Promise](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)** \n\n### unsafeRandomKey\n\nDoes not pause to gather CPU entropy.\n\nReturns **[Promise](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;PrivateKey>** test key\n\n### randomKey\n\n#### Parameters\n\n-   `cpuEntropyBits` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** gather additional entropy\n    from a CPU mining algorithm.  This will already happen once by\n    default. (optional, default `0`)\n\n#### Examples\n\n```javascript\necc.randomKey().then(privateKey => {\nconsole.log('Private Key:\\t', privateKey) // wif\nconsole.log('Public Key:\\t', ecc.privateToPublic(privateKey)) // EOSkey...\n})\n```\n\nReturns **[Promise](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[wif](#wif)>** \n\n### seedPrivate\n\n#### Parameters\n\n-   `seed` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** any length string.  This is private.  The same\n    seed produces the same private key every time.  At least 128 random\n    bits should be used to produce a good private key.\n\n#### Examples\n\n```javascript\necc.seedPrivate('secret') === wif\n```\n\nReturns **[wif](#wif)** \n\n### privateToPublic\n\n#### Parameters\n\n-   `wif` **[wif](#wif)** \n-   `pubkey_prefix` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** public key prefix (optional, default `'EOS'`)\n\n#### Examples\n\n```javascript\necc.privateToPublic(wif) === pubkey\n```\n\nReturns **[pubkey](#pubkey)** \n\n### isValidPublic\n\n#### Parameters\n\n-   `pubkey` **[pubkey](#pubkey)** like EOSKey..\n-   `pubkey_prefix` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)**  (optional, default `'EOS'`)\n\n#### Examples\n\n```javascript\necc.isValidPublic(pubkey) === true\n```\n\nReturns **[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** valid\n\n### isValidPrivate\n\n#### Parameters\n\n-   `wif` **[wif](#wif)** \n\n#### Examples\n\n```javascript\necc.isValidPrivate(wif) === true\n```\n\nReturns **[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** valid\n\n### sign\n\nCreate a signature using data or a hash.\n\n#### Parameters\n\n-   `data` **([string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** \n-   `privateKey` **([wif](#wif) | PrivateKey)** \n-   `encoding` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** data encoding (if string) (optional, default `'utf8'`)\n\n#### Examples\n\n```javascript\necc.sign('I am alive', wif)\n```\n\nReturns **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** string signature\n\n### signHash\n\n#### Parameters\n\n-   `dataSha256` **([String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** sha256 hash 32 byte buffer or string\n-   `privateKey` **([wif](#wif) | PrivateKey)** \n-   `encoding` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** dataSha256 encoding (if string) (optional, default `'hex'`)\n\nReturns **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** string signature\n\n### verify\n\nVerify signed data.\n\n#### Parameters\n\n-   `signature` **([string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** buffer or hex string\n-   `data` **([string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** \n-   `pubkey` **([pubkey](#pubkey) | PublicKey)** \n-   `encoding`   (optional, default `'utf8'`)\n-   `hashData` **[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** sha256 hash data before verify (optional, default `true`)\n\n#### Examples\n\n```javascript\necc.verify(signature, 'I am alive', pubkey) === true\n```\n\nReturns **[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** \n\n### recover\n\nRecover the public key used to create the signature.\n\n#### Parameters\n\n-   `signature` **([String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** (EOSbase58sig.., Hex, Buffer)\n-   `data` **([String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** full data\n-   `encoding` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** data encoding (if data is a string) (optional, default `'utf8'`)\n\n#### Examples\n\n```javascript\necc.recover(signature, 'I am alive') === pubkey\n```\n\nReturns **[pubkey](#pubkey)** \n\n### recoverHash\n\n#### Parameters\n\n-   `signature` **([String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** (EOSbase58sig.., Hex, Buffer)\n-   `dataSha256` **([String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** sha256 hash 32 byte buffer or hex string\n-   `encoding` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** dataSha256 encoding (if dataSha256 is a string) (optional, default `'hex'`)\n\nReturns **PublicKey** \n\n### sha256\n\n#### Parameters\n\n-   `data` **([string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** always binary, you may need Buffer.from(data, 'hex')\n-   `resultEncoding`   (optional, default `'hex'`)\n-   `encoding` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** result encoding 'hex', 'binary' or 'base64' (optional, default `'hex'`)\n\n#### Examples\n\n```javascript\necc.sha256('hashme') === '02208b..'\n```\n\n```javascript\necc.sha256(Buffer.from('02208b', 'hex')) === '29a23..'\n```\n\nReturns **([string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Buffer](https://nodejs.org/api/buffer.html))** Buffer when encoding is null, or string\n\n## pubkey\n\nEOSKey..\n\nType: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n# Usage (Object API)\n\n```js\nlet {PrivateKey, PublicKey, Signature, Aes, key_utils, config} = require('eosjs-ecc')\n\n// Create a new random private key\nlet privateWif\nPrivateKey.randomKey().then(privateKey => privateWif = privateKey.toWif())\n\n// Convert to a public key\npubkey = PrivateKey.fromString(privateWif).toPublic().toString()\n```\n\n-   [PrivateKey](./src/key_private.js)\n-   [PublicKey](./src/key_public.js)\n-   [Signature](./src/signature.js)\n-   [Aes](./src/aes.js)\n-   [key_utils](./src/key_utils.js)\n-   [config](./src/config.js)\n\n# Browser\n\n```bash\ngit clone https://github.com/EOSIO/eosjs-ecc.git\ncd eosjs-ecc\nyarn\nyarn build_browser\n# builds: ./dist/eosjs-ecc.js\n# Verify release hash\n```\n\n```html\n<script src=eosjs-ecc.js></script>\n```\n\n```js\nvar ecc = eosjs_ecc\n\necc.randomKey().then(privateWif =>  {\n  var pubkey = ecc.privateToPublic(privateWif)\n  console.log(pubkey)\n})\n```\n"
 },
 {
  "repo": "soreatu/Cryptography",
  "language": "Python",
  "readme_contents": "# Introduction\nImplementation of cryptographic algorithms in *Python* & *SageMath*.\n\n\n## List\n- Symmetric Ciphers\n  - Shift Cipher\n  - Vigenere Cipher\n  - Affine Cipher\n  - Enigma Machine Cipher\n  - Stream Cipher\n  - TEA (A Tiny Encryption Algorithm)\n  - DES (Data Encryption Standard)\n  - AES (Advanced Encryption Standarad)\n  - Modes of AES\n      1. ECB (Electronic Code Book mode)\n      2. CBC (Cipher Block Chaining mode)\n      3. CFB (Cipher Feedback mode)\n      4. OFB (Output Feedback mode)\n      5. CTR (Counter mode)\n      6. GCM (Galois Counter Mode)\n  - SM3\n  - SM4\n- Asymmetric Ciphers\n  - RSA\n  - Elgamal\n  - ECC\n  - NTRUEncrypt (broken implementation)\n  - GGH\n- Attacks & Algorithms\n  - Index of Coincidence & Chi-squared Statistic\n  - Shank's Babystep-Giantstep Algorithm\n  - Pollard's rho Method\n  - Gram-Schmidt Algorithm\n  - Babai's Algorithm\n  - The LLL Lattice Reduction Algorithm\n\n\n## Reference\n- [*Understanding Cryptography*](http://www.crypto-textbook.com/)\n- [Introduction to Cryptography by Christof Paar (lectures)](https://www.youtube.com/channel/UC1usFRN4LCMcfIV7UjHNuQg/videos).\n- [*An Introduction to Mathematical Cryptography*](https://www.springer.com/gp/book/9781441926746)"
 },
 {
  "repo": "iCHAIT/Elliptical-Curve-Cryptography",
  "language": "Python",
  "readme_contents": "## Elliptical Curve Cryptography\n\n\nElliptic Curve Cryptography (ECC) is a **public key cryptography**. \n\n![ScreenShot](/images/publickey.png)\n\nIn public key cryptography each user or the device taking part in the communication generally have a pair of keys, a **public key** and a **private key**, and a set of operations associated with the keys to do the cryptographic operations. Only the particular user knows the private key whereas the public key is distributed to all users taking part in the communication.\n\nThe public key is a point on the curve and the private key is a random number. The public key is obtained by multiplying the private key with a generator point G in the curve.\n\nThe mathematical operations of ECC is defined over the elliptic curve **y^2 = x^3 + ax + b**, where **4a^3 + 27b^2 =\u0338 0**. Each value of the \u2018a\u2019 and \u2018b\u2019 gives a different elliptic curve.\n\nOne main **advantage** of ECC is its **small key size**. A 160-bit key in ECC is considered to be as secured as 1024-bit key in RSA.\n\n\n## Point Multiplication\n\nIn point multiplication a point P on the elliptic curve is multiplied with a **scalar k** using elliptic curve equation to obtain another point Q on the same elliptic curve.\n\ni.e. **kP=Q**\n\nPoint multiplication is achieved by two basic elliptic curve operations\n*  **Point addition**, adding two points J and K to obtain another point L, i.e  **(L = J + K)**\n* **Point doubling**, adding a point J to itself to obtain another point L, i.e **(L = 2J)**\n\n\n### Point Addition\n\nPoint addition is the addition of two points J and K on an elliptic curve to obtain another point L on the same elliptic curve.\n\n![ScreenShot](/images/pointadd.png)\n\nConsider two points J and K on an elliptic curve as shown in the above figure. If K =\u0338 -J then a line drawn through the points J and K will intersect the elliptic curve at exactly one more point \u2013L. The reflection of the point \u2013L with respect to x-axis gives the point L, which is the result of addition of points J and K.\n\nThus on an **elliptic curve L = J + K**.\n\n\n### Point Doubling\n\nPoint doubling is the addition of a point J on the elliptic curve to itself to obtain another point L on the same elliptic curve.\n\n![ScreenShot](/images/pointmult.png)\n\nTo double a point J to get L, i.e. to find L = 2J, consider a point J on an elliptic curve as shown in the above figure. If y coordinate of the point J is not zero then the tangent line at J will intersect the elliptic curve at exactly one more point \u2013L. The reflection of the point \u2013L with respect to x-axis gives the point L, which is the result of doubling the point J.\n\nThus **L = 2J**.\n\n\n## ElGamal Encryption\n\nIn cryptography, the ElGamal encryption system is an **asymmetric key encryption** algorithm for **public-key** cryptography which is based on the **Diffie\u2013Hellman key exchange**. It was described by Taher Elgamal in 1985.\n\nElGamal has the **disadvantage** that the ciphertext is twice as long as the plaintext.\n\nIt has the **advantage** the same plaintext gives a different ciphertext (with near certainty) each time it is encrypted\n\nElGamal encryption consists of three components -\n\n* **The key generator**\n* **The encryption algorithm**\n* **The decryption algorithm**\n\n\n### Key Generation\n\nThe key generator works as follows -\n\n* Alice generates an efficient description of a cyclic group G, of order q with generator g.\n* Alice chooses a random x, from {1,.........., q-1}.\n* Alice computes h = g^x.\n* Alice publishes h, along with the description of G, q, g as her public key. Alice retains x as her private key which must be kept secret.\n\n\n### Encryption\n\nThe encryption algorithm works as follows - to encrypt a message m, to Alice under her public key (G,q,g,h)\n\n* Bob chooses a random y, from {1,............, q-1}, then calculates c1=g^y.\n* Bob calculates the shared secret s=h^y.\n* Bob converts his secret message m, into an element m' of G.\n* Bob calculates c2=m'*s.\n* Bob sends the ciphertext (c1,c2)=(g^y, m'*h^y)=(g^y, m'*(g^x)^y), to Alice.\n\nNote that one can easily find h^y, if one knows m'.\nTherefore, a new y, is generated for every message to improve security. For this reason, y, is also called an **ephemeral key**.\n\n\n### Decryption\n\nThe decryption algorithm works as follows: to decrypt a ciphertext (c1,c2) with her private key x,\n\n* Alice calculates the shared secret s=c1^x,\n* and then computes m'=c2*(s^(-1)), which she then converts back into the plaintext message m, where s^(-1) is the inverse of s in the group G.\nThe decryption algorithm produces the intended message, since\n\n**c2*(s^(-1)) = m'*h^y*(g^{xy})^(-1) = m'*g^{xy}*g^{-xy} = m'.**\n\n\n### Security\n\nThe security of the ElGamal scheme depends on the properties of the underlying group G as well as any padding scheme used on the messages.\n\nIf the **computational Diffie\u2013Hellman assumption (CDH)** holds in the underlying cyclic group G, then the encryption function is **one-way**.\n\nIf the **decisional Diffie\u2013Hellman assumption (DDH)** holds in G, then ElGamal achieves **semantic security**.\n\nElGamal encryption is unconditionally malleable, and therefore is not secure under chosen ciphertext attack. For example, given an encryption (c1, c2) of some (possibly unknown) message m, one can easily construct a valid encryption (c1, 2c2) of the message 2m.\n\nTo achieve chosen-ciphertext security, the scheme must be further modified, or an appropriate padding scheme must be used.\n\n\n\n![ScreenShot](/images/elgamal.png)\n\n\n\n## ECDSA(Elliptic Curve Digital Signature Algorithm)\n\nSignature algorithm is used for authenticating a device or a message sent by the device. For example consider two devices A and B. To authenticate a message sent by A, the device A **signs the message using its private key**. The device A sends the message and the signature to the device B. This signature can be **verified only by using the public key** of device A. Since the device B knows A\u2019s public key, it can verify whether the message is indeed send by A or not.\n\nECDSA is a variant of the **Digital Signature Algorithm (DSA)** that operates on elliptic curve groups. For sending a signed message from A to B, both have to agree up on **Elliptic Curve domain parameters**. Sender \u2018A\u2019 have a key pair consisting of a private key dA (a randomly selected integer less than n, where n is the order of the curve, an elliptic curve domain parameter) and a public key QA = dA * G (G is the generator point, an elliptic curve domain parameter). An overview of ECDSA process is defined below.\n\nECDSA has three phases -\n* **key generation**\n* **signature generation**\n* **signature verification**\n\n\n### ECDSA Key Generation\n\nAn entity A\u2019s key pair is associated with a particular set of EC domain parameters D= (q, FR, a, b, G, n, h). E is an elliptic curve defined over Fq , and P is a point of prime order n in E(Fq), q is a prime. Each entity A does the following -\n\n1. Select a random integer d in the interval [1, n- 1]. \n2. Compute Q = dP.\n3. A\u2019s public key is Q, A\u2019s private key is d.\n\n\n### ECDSA Signature Generation\n\nTo sign a message m, an entity A with domain parameters D= (q,\nFR, a, b, G, n, h) does the following -\n\n1. Select a random or pseudorandom integer k in the interval [1, n-1].\n2. Compute kP =x1, y1 and r= x1 mod(n) (where x1 is regarded as an integer between 0 and q-1). If r= 0 then go back to step 1.\n3. Compute k^(-1) mod(n).\n4. Compute s= k^(-1) {h(m)+ dr} mod(n), where h is the Secure Hash Algorithm (SHA-1). If s = 0, then go back to step 1.\n5. The signature for the message m is the pair of integers (r, s).\n\n\n\n![ScreenShot](/images/siggen.png)\n\n\n\n### ECDSA Signature Verification\n\nTo verify A\u2019s signature (r, s) on m, B obtains an authenticated copy of A\u2019s domain parameters D = (q, FR, a, b, G, n, h) and public key Q and do the following -\n\n1. Verify that r and s are integers in the interval [1, n-1].\n2. Compute w = s^(-1)mod(n) and h(m)\n3. Compute u1 =h(m)w mod(n) and u2 =rw mod(n).\n4. Compute u1P + u2Q =(x0, y0) and v= x0 mod(n).\n5. Accept the signature if and only if v = r\n\n\n\n![ScreenShot](/images/sigver.png)\n\n\n\n## ECDH(Elliptic curve Diffie\u2013Hellman)\n\nElliptic curve Diffie\u2013Hellman (ECDH) is an anonymous **key agreement protocol**that allows two parties, each having an elliptic curve **public\u2013private key pair**, to establish a **shared secret** over an insecure channel.\nThis shared secret may be directly used as a key, or to derive another key which can then be used to encrypt subsequent communications using a symmetric key cipher.\n\nBoth parties exchange some public information to each other. Using this public data and their own private data these parties calculates the shared secret. Any third party, who doesn\u2019t have access to the private details of each device, will not be able to calculate the shared secret from the available public information.\n\nAn overview of ECDH process is defined below -\n\nFor generating a shared secret between A and B using ECDH, both have to agree up on Elliptic Curve domain parameters. Both end have a key pair consisting of a **private key d** (a randomly selected integer less than n, where n is the order of the curve, an elliptic curve domain parameter) and a **public key Q = d * G** (G is the generator point, an elliptic curve domain parameter). Let **(dA, QA)** be the private key - public key pair of A and **(dB, QB)** be the private key - public key pair of B.\n\n1. The end A computes K = (xK,yK) = dA *QB\n2. The end B computes L = (xL,yL) = dB *QA\n3. Since dA*QB = dA*dB*G = dB*dA*G = dB*QA. Therefore K = L and hence xK = xL\n4. Hence the shared secret is xK\n\nSince it is practically impossible to find the private key dA or dB from the public key K or L, its not possible to obtain the shared secret for a third party.\n\n\n\n![ScreenShot](/images/ecdh.png)"
 },
 {
  "repo": "XRPLF/rippled",
  "language": "C++",
  "readme_contents": "# The XRP Ledger\n\nThe [XRP Ledger](https://xrpl.org/) is a decentralized cryptographic ledger powered by a network of peer-to-peer nodes. The XRP Ledger uses a novel Byzantine Fault Tolerant consensus algorithm to settle and record transactions in a secure distributed database without a central operator.\n\n## XRP\n[XRP](https://xrpl.org/xrp.html) is a public, counterparty-free asset native to the XRP Ledger, and is designed to bridge the many different currencies in use worldwide. XRP is traded on the open-market and is available for anyone to access. The XRP Ledger was created in 2012 with a finite supply of 100 billion units of XRP. Its creators gifted 80 billion XRP to a company, now called [Ripple](https://ripple.com/), to develop the XRP Ledger and its ecosystem. Ripple uses XRP to help build the Internet of Value, ushering in a world in which money moves as fast and efficiently as information does today.\n\n## rippled\nThe server software that powers the XRP Ledger is called `rippled` and is available in this repository under the permissive [ISC open-source license](LICENSE.md). The `rippled` server software is written primarily in C++ and runs on a variety of platforms. The `rippled` server software can run in several modes depending on its [configuration](https://xrpl.org/rippled-server-modes.html).  \n\n### Build from Source\n\n* [Linux](Builds/linux/README.md)\n* [Mac](Builds/macos/README.md) (Not recommended for production)\n* [Windows](Builds/VisualStudio2017/README.md) (Not recommended for production)\n\n## Key Features of the XRP Ledger\n\n- **[Censorship-Resistant Transaction Processing][]:** No single party decides which transactions succeed or fail, and no one can \"roll back\" a transaction after it completes. As long as those who choose to participate in the network keep it healthy, they can settle transactions in seconds.\n- **[Fast, Efficient Consensus Algorithm][]:** The XRP Ledger's consensus algorithm settles transactions in 4 to 5 seconds, processing at a throughput of up to 1500 transactions per second. These properties put XRP at least an order of magnitude ahead of other top digital assets.\n- **[Finite XRP Supply][]:** When the XRP Ledger began, 100 billion XRP were created, and no more XRP will ever be created. The available supply of XRP decreases slowly over time as small amounts are destroyed to pay transaction costs.\n- **[Responsible Software Governance][]:** A team of full-time, world-class developers at Ripple maintain and continually improve the XRP Ledger's underlying software with contributions from the open-source community. Ripple acts as a steward for the technology and an advocate for its interests, and builds constructive relationships with governments and financial institutions worldwide.\n- **[Secure, Adaptable Cryptography][]:** The XRP Ledger relies on industry standard digital signature systems like ECDSA (the same scheme used by Bitcoin) but also supports modern, efficient algorithms like Ed25519. The extensible nature of the XRP Ledger's software makes it possible to add and disable algorithms as the state of the art in cryptography advances.\n- **[Modern Features for Smart Contracts][]:** Features like Escrow, Checks, and Payment Channels support cutting-edge financial applications including the [Interledger Protocol](https://interledger.org/). This toolbox of advanced features comes with safety features like a process for amending the network and separate checks against invariant constraints.\n- **[On-Ledger Decentralized Exchange][]:** In addition to all the features that make XRP useful on its own, the XRP Ledger also has a fully-functional accounting system for tracking and trading obligations denominated in any way users want, and an exchange built into the protocol. The XRP Ledger can settle long, cross-currency payment paths and exchanges of multiple currencies in atomic transactions, bridging gaps of trust with XRP.\n\n[Censorship-Resistant Transaction Processing]: https://xrpl.org/xrp-ledger-overview.html#censorship-resistant-transaction-processing\n[Fast, Efficient Consensus Algorithm]: https://xrpl.org/xrp-ledger-overview.html#fast-efficient-consensus-algorithm\n[Finite XRP Supply]: https://xrpl.org/xrp-ledger-overview.html#finite-xrp-supply\n[Responsible Software Governance]: https://xrpl.org/xrp-ledger-overview.html#responsible-software-governance\n[Secure, Adaptable Cryptography]: https://xrpl.org/xrp-ledger-overview.html#secure-adaptable-cryptography\n[Modern Features for Smart Contracts]: https://xrpl.org/xrp-ledger-overview.html#modern-features-for-smart-contracts\n[On-Ledger Decentralized Exchange]: https://xrpl.org/xrp-ledger-overview.html#on-ledger-decentralized-exchange\n\n\n## Source Code\n[![travis-ci.com: Build Status](https://travis-ci.com/ripple/rippled.svg?branch=develop)](https://travis-ci.com/ripple/rippled)\n[![codecov.io: Code Coverage](https://codecov.io/gh/ripple/rippled/branch/develop/graph/badge.svg)](https://codecov.io/gh/ripple/rippled)\n\n### Repository Contents\n\n| Folder     | Contents                                         |\n|:-----------|:-------------------------------------------------|\n| `./bin`    | Scripts and data files for Ripple integrators.   |\n| `./Builds` | Platform-specific guides for building `rippled`. |\n| `./docs`   | Source documentation files and doxygen config.   |\n| `./cfg`    | Example configuration files.                     |\n| `./src`    | Source code.                                     |\n\nSome of the directories under `src` are external repositories included using\ngit-subtree. See those directories' README files for more details.\n\n\n## See Also\n\n* [XRP Ledger Dev Portal](https://xrpl.org/)\n* [Setup and Installation](https://xrpl.org/install-rippled.html)\n* [Source Documentation (Doxygen)](https://ripple.github.io/rippled)\n* [Learn more about the XRP Ledger (YouTube)](https://www.youtube.com/playlist?list=PLJQ55Tj1hIVZtJ_JdTvSum2qMTsedWkNi)\n"
 },
 {
  "repo": "TurboPack/LockBox3",
  "language": "Pascal",
  "readme_contents": "# TurboPack LockBox3\r\n\r\nUpdated for **10.3 Rio** / VER330 / PKG 260\r\n\r\nYou can still access [10.2 Tokyo](https://github.com/TurboPack/LockBox3/releases/tag/102Tokyo) and [10.1 Berlin](https://github.com/TurboPack/LockBox3/releases/tag/101Berlin) versions too.\r\n\r\n## Table of contents\r\n\r\n1.  Introduction\r\n2.  Package names\r\n3.  Installation\r\n\r\n## 1. Introduction\r\n\r\nLockBox3 is a Delphi library for cryptography.  \r\nIt provides support for AES, DES, 3DES, Blowfish, Twofish, SHA, MD5, a variety \r\nof chaining modes, RSA digital signature and verific...\r\n\r\nThis is a source-only release of TurboPack LockBox3. It includes\r\ndesigntime and runtime packages for Delphi and C++Builder and supports \r\nVCL, FMX, Win32, Win64, macOS, iOS, and Android.\r\n\r\n## 2. Package names\r\n\r\nTurboPack LockBox3 package names have the following form:\r\n\r\n### Delphi\r\n* LockBox3DR.bpl (Delphi Runtime)\r\n* LockBox3DD.bpl (Delphi Designtime)\r\n\r\n### C++Builder\r\n* LockBox3CR.bpl (C++Builder Runtime)\r\n* LockBox3CD.bpl (C++Builder Designtime)\r\n\r\n## 3. Installation\r\n\r\nTurboPack LockBox3 is available via the [GetIt Package Manager](http://docwiki.embarcadero.com/RADStudio/en/Installing_a_Package_Using_GetIt_Package_Manager) where you can quickly and easily install and uninstall it.\r\n\r\nTo manually install TurboPack LockBox3 into your IDE, take the following\r\nsteps:\r\n\r\n1. Unzip the release files into a directory (e.g., `d:\\lockBox3`).\r\n\r\n2. Start RAD Studio.\r\n\r\n3. Add the source directory (e.g. `d:\\lockBox3\\run` and all the \r\n     subdirectories) to the IDE's library path. For C++Builder, \r\n     add the hpp subdirectory (e.g., `d:\\lockBox3\\source\\hpp\\Win32\\Release`) to the \r\n     IDE's system include path.\r\n\r\n4. Open & install the designtime package specific to the IDE being\r\n     used. The IDE should notify you the components have been\r\n     installed.\r\n"
 },
 {
  "repo": "replicon/Replicon.Cryptography.SCrypt",
  "language": "C#",
  "readme_contents": "Replicon.Cryptography.SCrypt\n----------------------------\n\nThis library is a wrapper for the scrypt key-deriviation function (http://www.tarsnap.com/scrypt.html) created by\nColin Percival.  The core of the library is a copy of the scrypt KDF routines written in C and distributed by Colin.\nWe've added a .NET wrapper class and done a bit of work to compile this into a mixed-mode .NET assembly.\n\nDownload Binaries\n~~~~~~~~~~~~~~~~~\n\nPre-compiled binaries are available for download:\n\n`scrypt-net35-1.1.6.13.zip <https://dl.dropbox.com/s/53a4a6efl6hnb45/scrypt-net35-1.1.6.13.zip?dl=1>`_\n    Binary build of version 1.1.6.13 for .NET 3.5.\n\n`scrypt-net40-1.1.6.13.zip <https://dl.dropbox.com/s/kppdambw3wz6xix/scrypt-net40-1.1.6.13.zip?dl=1>`_\n    Binary build of version 1.1.6.13 for .NET 4.0.\n\nPlease note that the usage of these assemblies requires the Microsoft Visual C++ 2010 runtime.  Normally this\nis already installed on a development machine along with Visual Studio, but may not be installed on all\nmachines that you are using this library on (eg. production servers).  The required dependencies can be\ndownloaded from Microsoft (x86_ or x64_).\n\n.. _x86: http://www.microsoft.com/en-us/download/details.aspx?id=8328\n.. _x64: http://www.microsoft.com/en-ca/download/details.aspx?id=13523\n\nWhy the weird mixed-mode assembly, and C++/CLI stuff?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWell, a few reasons:\n\n* I don't want to write the scrypt algorithm myself to port it to another language.  This release directly\n  incorporates Colin Percival's scrypt implementation, and can be easily updated when he releases updates.\n\n* It's fast.  At the time of writing, it executes the scrypt KDF is about 1/12th the execution time of a\n  pure C# implementation (namely, CryptSharp's).  That's a pretty significant time difference.\n\n* Even with an ideal C# implementation, you couldn't use SIMD (eg. SSE) instructions.\n\n* A mixed-mode assembly is easier than PInvoke when you want to dynamically load either a Win32 or\n  x64 native library.\n\nSo, all those reasons combine to create this library in this form.  I would eventually like to make the backend\nimplementation dynamically selected so that a C# implementation could be used in environments where native\nis not possible (eg. Mono), but I think that the mixed-mode approach will probably stick around as the fastest\nimplementation.\n\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nAPI description::\n\n    namespace Replicon.Cryptography.SCrypt\n    {\n        // Summary:\n        //     A .NET wrapper for a native implementation of the scrypt key-derivation function.\n        //     In addition to exposing the raw key-derivation function (DerivePassword),\n        //     SCrypt also contains helper functions for a common use-case of scrypt as\n        //     a password hashing algorithm.\n        public static class SCrypt\n        {\n            // Summary:\n            //     Default value for N used by parameterless GenerateSalt, currently 2^14.\n            public static readonly ulong Default_N;\n\n            // Summary:\n            //     Default value for p used by parameterless GenerateSalt, currently 1.\n            public static readonly uint Default_p;\n\n            // Summary:\n            //     Default value for r used by parameterless GenerateSalt, currently 8.\n            public static readonly uint Default_r;\n\n            // Summary:\n            //     Default value for hashLengthBytes used by parameterless GenerateSalt, currently\n            //     32 bytes.\n            public static readonly uint DefaultHashLengthBytes;\n\n            // Summary:\n            //     Default value for saltLengthBytes used by parameterless GenerateSalt, currently\n            //     16 bytes.\n            public static readonly uint DefaultSaltLengthBytes;\n\n            // Summary:\n            //     The 'raw' scrypt key-derivation function.\n            //\n            // Parameters:\n            //   password:\n            //     The password bytes to generate the key based upon.\n            //\n            //   salt:\n            //     Random salt bytes to make the derived key unique.\n            //\n            //   N:\n            //     CPU/memory cost parameter. Must be a value 2^N. 2^14 (16384) causes a calculation\n            //     time of approximately 50-70ms on 2010 era hardware; each successive value\n            //     (eg. 2^15, 2^16, ...) should double the amount of CPU time and memory required.\n            //\n            //   r:\n            //     scrypt 'r' tuning parameter\n            //\n            //   p:\n            //     scrypt 'p' tuning parameter (parallelization parameter); a large value of\n            //     p can increase computational cost of scrypt without increasing the memory\n            //     usage.\n            //\n            //   derivedKeyLengthBytes:\n            //     The number of bytes of key to derive.\n            public static byte[] DeriveKey(byte[] password, byte[] salt, ulong N, uint r, uint p, uint derivedKeyLengthBytes);\n\n            // Summary:\n            //     Generate a salt for use with HashPassword, selecting reasonable default values\n            //     for scrypt parameters that are appropriate for an interactive login verification\n            //     workflow.\n            //\n            // Remarks:\n            //     Uses the default values in DefaultSaltLengthBytes, Default_N, Default_r,\n            //     Default_r, and DefaultHashLengthBytes.\n            public static string GenerateSalt();\n\n            // Summary:\n            //     Generate a random salt for use with HashPassword. In addition to the random\n            //     salt, the salt value also contains the tuning parameters to use with the\n            //     scrypt algorithm, as well as the size of the password hash to generate.\n            //\n            // Parameters:\n            //   saltLengthBytes:\n            //     The number of bytes of random salt to generate. The goal for the salt is\n            //     to be unique. 16 bytes gives a 2^128 possible salt options, and roughly an\n            //     N in 2^64 chance of a salt collision for N salts, which seems reasonable.\n            //     A larger salt requires more storage space, but doesn't affect the scrypt\n            //     performance significantly.\n            //\n            //   N:\n            //     CPU/memory cost parameter. Must be a value 2^N. 2^14 (16384) causes a calculation\n            //     time of approximately 50-70ms on 2010 era hardware; each successive value\n            //     (eg. 2^15, 2^16, ...) should double the amount of CPU time and memory required.\n            //\n            //   r:\n            //     scrypt 'r' tuning parameter\n            //\n            //   p:\n            //     scrypt 'p' tuning parameter (parallelization parameter); a large value of\n            //     p can increase computational cost of scrypt without increasing the memory\n            //     usage.\n            //\n            //   hashLengthBytes:\n            //     The number of bytes to store the password hash in.\n            public static string GenerateSalt(uint saltLengthBytes, ulong N, uint r, uint p, uint hashLengthBytes);\n\n            // Summary:\n            //     Generate a password hash using a newly generated salt, with default salt\n            //     parameters.\n            //\n            // Parameters:\n            //   password:\n            //     A password to hash.\n            public static string HashPassword(string password);\n\n            // Summary:\n            //     Generate a password hash using a specific password salt.\n            //\n            // Parameters:\n            //   password:\n            //     A password to hash.\n            //\n            //   salt:\n            //     Salt to hash the password with. This is often a password hash from a previous\n            //     HashPassword call, which contains the salt of the original password call;\n            //     in that case, the returned hash will be identical to the salt parameter if\n            //     the password is the same password as the original.\n            public static string HashPassword(string password, string salt);\n\n            // Summary:\n            //     Parse the salt component of a salt or password and return the tuning parameters\n            //     embedded in the salt.\n            //\n            // Parameters:\n            //   salt:\n            //     Salt or hashed password to parse.\n            //\n            //   saltBytes:\n            //     The randomly generated salt data. The length will match saltLengthBytes from\n            //     GenerateSalt.\n            //\n            //   N:\n            //     Matching value for GenerateSalt's N parameter.\n            //\n            //   r:\n            //     Matching value for GenerateSalt's r parameter.\n            //\n            //   p:\n            //     Matching value for GenerateSalt's p parameter.\n            //\n            //   hashLengthBytes:\n            //     The number of bytes to store the password hash in.\n            //\n            // Exceptions:\n            //   Replicon.Cryptography.SCrypt.SaltParseException:\n            //     Throws SaltParseException if an error occurs while parsing the salt.\n            public static void ParseSalt(string salt, out byte[] saltBytes, out ulong N, out uint r, out uint p, out uint hashLengthBytes);\n\n            // Summary:\n            //     Attempt to parse the salt component of a salt or password and return the\n            //     tuning parameters embedded in the salt.\n            //\n            // Parameters:\n            //   salt:\n            //     Salt or hashed password to parse.\n            //\n            //   saltBytes:\n            //     The randomly generated salt data. The length will match saltLengthBytes from\n            //     GenerateSalt.\n            //\n            //   N:\n            //     Matching value for GenerateSalt's N parameter.\n            //\n            //   r:\n            //     Matching value for GenerateSalt's r parameter.\n            //\n            //   p:\n            //     Matching value for GenerateSalt's p parameter.\n            //\n            //   hashLengthBytes:\n            //     The number of bytes to store the password hash in.\n            //\n            // Returns:\n            //     True if the parsing was successful, false otherwise.\n            public static bool TryParseSalt(string salt, out byte[] saltBytes, out ulong N, out uint r, out uint p, out uint hashLengthBytes);\n\n            // Summary:\n            //     Verify that a given password matches a given hash.\n            public static bool Verify(string password, string hash);\n        }\n    }\n"
 },
 {
  "repo": "google/conscrypt",
  "language": "Java",
  "readme_contents": "Conscrypt - A Java Security Provider\n========================================\n\nConscrypt is a Java Security Provider (JSP) that implements parts of the Java\nCryptography Extension (JCE) and Java Secure Socket Extension (JSSE).  It uses\nBoringSSL to provide cryptographic primitives and Transport Layer Security (TLS)\nfor Java applications on Android and OpenJDK.  See [the capabilities\ndocumentation](CAPABILITIES.md) for detailed information on what is provided.\n\nThe core SSL engine has borrowed liberally from the [Netty](http://netty.io/) project and their\nwork on [netty-tcnative](http://netty.io/wiki/forked-tomcat-native.html), giving `Conscrypt`\nsimilar performance.\n\n<table>\n  <tr>\n    <td><b>Homepage:</b></td>\n    <td>\n      <a href=\"https://conscrypt.org/\">conscrypt.org</a>\n    </td>\n  </tr>\n  <tr>\n    <td><b>Mailing List:</b></td>\n    <td>\n      <a href=\"https://groups.google.com/forum/#!forum/conscrypt\">conscrypt@googlegroups.com</a>\n    </td>\n  </tr>\n</table>\n\nDownload\n-------------\nConscrypt supports **Java 7** or later on OpenJDK and **Gingerbread (API Level\n9)** or later on Android.  The build artifacts are available on Maven Central.\n\n### Download JARs\nYou can download\n[the JARs](http://search.maven.org/#search%7Cga%7C1%7Cg:%22org.conscrypt%22)\ndirectly from the Maven repositories.\n\n### OpenJDK (i.e. non-Android)\n\n#### Native Classifiers\n\nThe OpenJDK artifacts are platform-dependent since each embeds a native library for a particular\nplatform. We publish artifacts to Maven Central for the following platforms:\n\nClassifier | OS | Architecture\n-----------| ------- | ---------------- |\nlinux-x86_64 | Linux | x86_64 (64-bit)\nosx-x86_64 | Mac | x86_64 (64-bit)\nwindows-x86 | Windows | x86 (32-bit)\nwindows-x86_64 | Windows | x86_64 (64-bit)\n\n#### Maven\n\nUse the [os-maven-plugin](https://github.com/trustin/os-maven-plugin) to add the dependency:\n\n```xml\n<build>\n  <extensions>\n    <extension>\n      <groupId>kr.motd.maven</groupId>\n      <artifactId>os-maven-plugin</artifactId>\n      <version>1.4.1.Final</version>\n    </extension>\n  </extensions>\n</build>\n\n<dependency>\n  <groupId>org.conscrypt</groupId>\n  <artifactId>conscrypt-openjdk</artifactId>\n  <version>2.5.2</version>\n  <classifier>${os.detected.classifier}</classifier>\n</dependency>\n```\n\n#### Gradle\nUse the [osdetector-gradle-plugin](https://github.com/google/osdetector-gradle-plugin)\n(which is a wrapper around the os-maven-plugin) to add the dependency:\n\n```gradle\nbuildscript {\n  repositories {\n    mavenCentral()\n  }\n  dependencies {\n    classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'\n  }\n}\n\n// Use the osdetector-gradle-plugin\napply plugin: \"com.google.osdetector\"\n\ndependencies {\n  compile 'org.conscrypt:conscrypt-openjdk:2.5.2:' + osdetector.classifier\n}\n```\n\n#### Uber JAR\n\nFor convenience, we also publish an Uber JAR to Maven Central that contains the shared\nlibraries for all of the published platforms. While the overall size of the JAR is\nlarger than depending on a platform-specific artifact, it greatly simplifies the task of\ndependency management for most platforms.\n\nTo depend on the uber jar, simply use the `conscrypt-openjdk-uber` artifacts.\n\n##### Maven\n```xml\n<dependency>\n  <groupId>org.conscrypt</groupId>\n  <artifactId>conscrypt-openjdk-uber</artifactId>\n  <version>2.5.2</version>\n</dependency>\n```\n\n##### Gradle\n```gradle\ndependencies {\n  compile 'org.conscrypt:conscrypt-openjdk-uber:2.5.2'\n}\n```\n\n### Android\n\nThe Android AAR file contains native libraries for x86, x86_64, armeabi-v7a, and\narm64-v8a.\n\n#### Gradle\n\n```gradle\ndependencies {\n  implementation 'org.conscrypt:conscrypt-android:2.5.2'\n}\n```\n\n\nHow to Build\n------------\n\nIf you are making changes to Conscrypt, see the [building\ninstructions](BUILDING.md).\n"
 },
 {
  "repo": "zademn/EverythingCrypto",
  "language": "Jupyter Notebook",
  "readme_contents": "# Hello there!\r\n\r\nIn this repository I collect my adventures in the Cryptography world.\r\nWhat to expect?\r\n- Medium-Highly detailed explanations of algorithms / concepts\r\n- Implementations in Python / Sage (Every notebook is self contained up to prerequisites which you'll still find here)\r\n- Common libraries for solving the problems\r\n- Everything is full of resources (from Youtube videos with intuitive explanations to detailed papers on the subject)\r\n\r\n# IMPORTANT NOTE\r\nI **HIGHLY** recommend using nbviewer if you're reading these online: https://nbviewer.jupyter.org/github/zademn/EverythingCrypto/tree/master/\r\n- Github doesn't render the all mathematics inside the notebooks\r\n- Github doesn't render images properly inside the notebooks \r\n\r\nIf **nbviewer** is down for some reason download them locally and run them on your machine and everything will render normally.\r\n\r\n## Disclaimer\r\n- This whole repository is for educational purposes\r\n- DO NOT USE ANY OF THE ALGORITHMS IN REAL WORLD APPLICATIONS\r\n\r\n# Structure?\r\n\r\n## Notebooks\r\n- For educational and \"ease to follow\" purposes I decided to work in notebooks. Notebook are structured as follows:\r\n    - Prerequisites = list of subjects/notebooks that you need to cover before attempting the subject\r\n    - Theory = Mathematical explanation + intuitions\r\n    - Code = Python,Sage or other library\r\n    - Resources = List of resources for further reading\r\n ## PDF's\r\n- Some basic theory in the form of pdf's here and there\r\n    \r\n## Directories\r\n\r\nDirectories are organized by categories (S = Symmetric, P = Public, E = Extra)\r\n\r\n### Extra \r\n- Books\r\n    - A collection of books I went through and found helpful\r\n- Security theory \r\n    - Basic definitions and what to expect (Start with this)\r\n- Mathematics = Here you will find the basic structures(groups, curves, etc) and algorithms that I studied\r\n    - Number theory - Start with this\r\n    - Abstract algebra - Groups, Rings, Fields, Polynomials\r\n    - Elliptic Curves - Theory\r\n    - Discrete Logarithm Problem \r\n    - Elliptic Curve Discrete Logarithm Problem \r\n    - Factorizations \r\n    - Lattices\r\n    - Primes and primality tests\r\n- Secret sharing schemes\r\n    - General Idea and SSSS\r\n\r\n### Public\r\n- Public Key = Each cryptosystem will have an introduction and a folder with vulnerabilities (NOTE: mathematical vulnerabilities (Ex: factorizations, dlp) will not be covered to avoid monotony. I assume you can connect the dots) \r\n    - RSA + vulnerabilities\r\n    - Diffie Hellman + vulnerabilities\r\n    - Elgamal\r\n- Digital signatures\r\n    - ECDSA + vulnerabilities\r\n    - RSADSA + vulnerabilities\r\n\r\n### Symmetric\r\n- PRNG's\r\n    - Pseudorandom generators, pseudorandom functions, \r\n    - Implementations: chacha20, LFSRs, Geffe (Correlation attack)\r\n- Block Ciphers\r\n    - AES, DES\r\n    - Block ciphers modes of operation - pdf\r\n    - Cryptanalysis methods\r\n- Message Integrity\r\n    - MACs and hashes theory - pdf\r\n    - Constructions - Merkle damgard and sponge\r\n    - Length Extension attack\r\n    - HMAC\r\n- Authenticated Encryption\r\n    - AE and AEAD - pdf\r\n    - GCM and the the forbidden attack\r\n    \r\nEach directory will have a README.md that will contain the MY difficulty ranking of different subjects, attacks etc.\r\n\r\n# How to tackle this repository?\r\nWhatever fits your needs (Start with the security theory folder though to know what to expect)\r\n1. Follow along with a book (There is a book directory)\r\n2. Depth-first fashion (for people that have good foundations):\r\n    - Pick a bigger subject\r\n    - Study it thoroughly (from the lowest difficulty to the highest)\r\n3. Breadth-first fashion (for starters):\r\n    - Go through every topic at the lowest difficulty\r\n    - Raise the difficulty and start again\r\n4. My Take\r\n- Security theory dir -> Symmetric / Public \r\n- Symmetric encryption\r\n    - PRGNG -> Block ciphers -> Message Integrity -> Authenticated Encryption\r\n- Public Encryption\r\n    - Maths/Number Theory -> Public Key Encryption -> Digital Signatures\r\n    - Maths when needed\r\n\r\n# TODO\r\nNot necessarily in this order   \r\n(As of 26 jan 21)\r\n- [x] Hashes - 26 Dec 20\r\n- [x] Authenticated Encryption - 1 Jan 21\r\n- [x] RC4 and FMS\r\n- [ ] Code for DES and Feistel ciphers\r\n- [x] Block cipher design + Linear cryptanalysis - 27 jun 21\r\n- [x] Differential cryptanalysis - 29 jun 21\r\n- [x] Lattice theory - 26 Jan 21\r\n- [x] SIS, LWE - 4 Feb 21\r\n- [x] Lattice Cryptosystems\r\n- [ ] Homomorphic encryption\r\n- [x] Public key theory - 6 Jan 21\r\n- [ ] Zero knowledge proofs\r\n- [ ] Protocols (might make another repo)\r\n- [ ] Reductions\r\n- [ ] Add test vectors for algorithms\r\n"
 },
 {
  "repo": "oconnor663/sha256_project",
  "language": "Python",
  "readme_contents": "# The SHA-256 Project\n\n> This project was originally assigned in NYU Tandon's CS-GY 6903 Applied\nCryptography course, Fall 2021. Here's the [original course\nrepo](https://github.com/oconnor663/applied_crypto_2021_fall) with all the\nother problem sets.\n\nIn this project we're going to implement SHA-256 ourselves, and then we'll use\nour implementation to demonstrate a \"length extension attack\". To get a sense\nof scale, take a look at the [SHA-256 pseudocode on\nWikipedia](https://en.wikipedia.org/wiki/SHA-2#Pseudocode). That pseudocode\nwill be one of our references, and there will be several direct quotes from it\nbelow. The [animations in this video](https://youtu.be/f9EbD6iY9zI) might also\nhelp you get a big-picture sense of what the algorithm is doing.\n\nImplementing that pseudocode takes less than a hundred lines of Python, which\nmight not seem like a lot. But there are lots of little details in those lines,\nand the nature of the \"avalanche effect\" is such that a tiny mistake will\ntotally mess up your output, usually without giving you any useful feedback\nabout what you did wrong. So we'll move slowly, piece by piece, making sure to\ntest each piece before we move on to the next. Read and reread each problem\ncarefully, *two or three times through,* and then follow the instructions\n*exactly* as you write your code. If the instructions are unclear, ask for help\nand avoid the temptation to guess. Mistakes will be difficult to debug, which\nmakes this project challenging.\n\nSo...what's the point of such a challenging project? If we almost never\nimplement hash functions ourselves in the real world, why are we going to spend\nour precious time on it now? Two reasons:\n\nConcretely, as long as SHA-2 remains widely used, length extension attacks will\nremain a common pitfall. You need to know about them to use SHA-2 safely, and\nto help others use it safely. As with most attacks, the best way to understand\nthe length extension attack is to do it yourself, which means we need to get\nour hands on the inner workings of SHA-2.\n\nMore broadly, there are just so many black boxes in cryptography that we almost\nnever look inside, especially our block ciphers, stream ciphers, and hash\nfunctions. No one has enough time to learn the details of all of them, not even\nprofessional cryptographers. But these algorithms are not magic, and this class\nwould be doing you a disservice if we never opened up any black boxes. Our goal\nisn't to memorize all the details, but to build up the sort of practical\nintuition that can only come from having seen the details before. And I want\nyou to come away from this class with the confidence that you can handle this\nlevel of detail for any algorithm, if and when you need to.\n\nSo this is it. This is where we're going to open one of the black boxes and get\nall the way to the bottom of it. This is SHA-256.\n\n## Contents\n\n* [Workflow](#workflow)\n* [Example input](#example-input)\n* [Example output](#example-output)\n* [Building blocks](#building-blocks)\n   * [Problem 1: addition modulo 2<sup>32</sup>](#problem-1-addition-modulo-232)\n   * [Problem 2: bitwise right rotation](#problem-2-bitwise-right-rotation)\n* [The Message Schedule](#the-message-schedule)\n   * [Problem 3: `little_sigma0()`](#problem-3-little_sigma0)\n   * [Problem 4: `little_sigma1()`](#problem-4-little_sigma1)\n   * [Problem 5: the message schedule](#problem-5-the-message-schedule)\n* [The Round Function](#the-round-function)\n   * [Problem 6: `big_sigma0()`](#problem-6-big_sigma0)\n   * [Problem 7: `big_sigma1()`](#problem-7-big_sigma1)\n   * [Problem 8: `choice()`](#problem-8-choice)\n   * [Problem 9: `majority()`](#problem-9-majority)\n   * [Problem 10: the round function](#problem-10-the-round-function)\n* [The Compression Function](#the-compression-function)\n   * [Problem 11: the compression function](#problem-11-the-compression-function)\n* [Padding](#padding)\n   * [Problem 12: padding](#problem-12-padding)\n* [The Hash Function](#the-hash-function)\n   * [Problem 13: the hash function](#problem-13-the-hash-function)\n* [The Length Extension Attack](#the-length-extension-attack)\n   * [Problem 14: modeling the extended input](#problem-14-modeling-the-extended-input)\n   * [Problem 15: recovering the state](#problem-15-recovering-the-state)\n   * [Problem 16: the length extension attack](#problem-16-the-length-extension-attack)\n* [Conclusion](#conclusion)\n\n## Workflow\n\nThis project was originally assigned in NYU Tandon's CS-GY 6903 Applied\nCryptography course. It's intended to be JSON-in-JSON-out and autograded. A\nsimplified [`grade.py`](grade.py) script is provided in this repo, but if you\nprefer you can also just visually compare the output of your solution to the\nexample output provided. The original class was taught in Python, and some of\nthe problems below include example Python code, but feel free to code in\nwhatever language you like. Example solutions are provided in both\n[Python](solution_py) and [Rust](solution_rs).\n\nHere's a bare minimum example of parsing JSON input and producing JSON output\nusing Python:\n\n```python\nimport json\nimport sys\n\ninputs = json.load(sys.stdin)\noutputs = {}\n\noutputs[\"problem1\"] = [\"your\", \"answer\", \"here\"]\n\njson.dump(outputs, sys.stdout)\n```\n\nTo run that directly with [`example_input.json`](example_input.json), you'd\nsave it to a file like `my_solution.py` and then run this in the terminal:\n\n```\n$ python3 my_solution.py < example_input.json\n{\"problem1\": [\"your\", \"answer\", \"here\"]}\n```\n\nTo grade it, you'd run this in the terminal:\n\n```\n$ ./grade.py python3 my_solution.py\nproblem1 incorrect\nrandomized input:\n    [[1, 2], [4294967295, 1], [3148047433, 2995627551]]\nexpected output:\n    [3, 0, 1848707688]\nyour output:\n    ['your', 'answer', 'here']\nproblem2 missing\nproblem3 missing\nproblem4 missing\nproblem5 missing\nproblem6 missing\nproblem7 missing\nproblem8 missing\nproblem9 missing\nproblem10 missing\nproblem11 missing\nproblem12 missing\nproblem13 missing\nproblem14 missing\nproblem15 missing\nproblem16 missing\n```\n\nAs you can see there, the grading script generates random inputs every time you\nrun it. So a complete solution should read input values from the JSON input\nevery time, rather than just hardcoding the example inputs.\n\nHere's a common pitfall for folks who haven't worked with JSON and stdin/stdout\nbefore: If you print anything extra to stdout (like with the regular Python\n`print()` function) that will mess up your JSON output, and the grading script\nwill give you an error message like \"Your solution isn't valid JSON.\" If you\nsee that error, make sure to comment out your print statements.\n\n## Example input\n\n```json\n{\n  \"problem1\": [\n    [1, 2],\n    [4294967295, 1],\n    [3050487260, 3710144918]\n  ],\n  \"problem2\": [\n    [2, 1],\n    [1, 1],\n    [2919882184, 31]\n  ],\n  \"problem3\": 1114723206,\n  \"problem4\": 1232674167,\n  \"problem5\": \"iguana wombat dog kangaroo llama turkey yak unicorn sheep xenoce\",\n  \"problem6\": 3536071395,\n  \"problem7\": 651015076,\n  \"problem8\": [2749825547, 776049372, 1213590135],\n  \"problem9\": [3758166654, 2821345890, 1850678816],\n  \"problem10\": {\n    \"state\": [\n        2739944672, 3126690193, 4191866847, 1163785745,\n        3714074692, 1172792371, 283469062,   826169706\n    ],\n    \"round_constant\": 961987163,\n    \"schedule_word\": 3221900128\n  },\n  \"problem11\": {\n    \"state\": [\n      2918946378, 1679978889, 1678006433,  650957219,\n       379281712, 2112907926, 1775216060, 2152648190\n    ],\n    \"block\": \"manatee fox unicorn octopus dog fox fox llama vulture jaguar xen\"\n  },\n  \"problem12\": [0, 1, 55, 56, 64, 492022654431536432],\n  \"problem13\": [\n    \"\",\n    \"hello world\",\n    \"aardvark zebra yak pig jaguar aardvark rhinoceros butte\",\n    \"narwhal dog llama llama giraffe narwhal octopus dog xeno\",\n    \"John Jacob Jingleheimer Schmidt! His name is my name too. Whenever we go out the people always shout there goes John Jacob Jingleheimer Schmidt! Nanananananana...\"\n  ],\n  \"problem14\": {\n    \"original_input\": \"fox elephant dog\",\n    \"chosen_suffix\": \"pig jaguar iguana\"\n  },\n  \"problem15\": \"bacb15aef84802baa0f530845013a98ee1eede664b914f8ebc2a520e69049a09\",\n  \"problem16\": {\n    \"original_hash\": \"27b82abe296f3ecd5174b6e6168ea683cd8ef94306d9abd9f81807f2fa587d2a\",\n    \"original_len\": 41,\n    \"chosen_suffix\": \"manatee jaguar zebra zebra dog\"\n  }\n}\n```\n\n## Example output\n\n```json\n{\n  \"problem1\": [3, 0, 2465664882],\n  \"problem2\": [1, 2147483648, 1544797073],\n  \"problem3\": 1345017931,\n  \"problem4\": 2902922196,\n  \"problem5\": [\n    1768387937, 1851859063, 1869439585, 1948279919, 1730177889, 1852268914, 1869553772, 1818324321,\n     544503154, 1801812256, 2036427552, 1970170211, 1869770272, 1936221541, 1881176165, 1852793701,\n    3002878561, 3711121932, 1520676164, 3002441970, 2935068969, 1610329529, 1904580351, 3219988740,\n    2337695268,  263015313, 2120931855,  131203777, 3818546915,   19163115, 3479924161, 2154860703,\n    1790169326,  516580487, 2414737634,  909025701, 2241053595, 1237268359, 3797503938, 1773623028,\n    2840671725, 2299292186, 1933596460, 2279513616,  514132674, 3245155609, 1753922983, 2241450350,\n    2449659630,  262239956,  773552098, 3253131632, 3863807927,  879696536, 3143654396, 3973063648,\n     509015903,  270850193, 1893431553,  719566283, 2310657204,  365781698, 3761063438, 1007484868\n  ],\n  \"problem6\": 3003388882,\n  \"problem7\": 2194029931,\n  \"problem8\": 1783753340,\n  \"problem9\": 3893039714,\n  \"problem10\": [\n    1724514418, 2739944672, 3126690193, 4191866847,\n    1638715774, 3714074692, 1172792371, 283469062\n  ],\n  \"problem11\": [\n    1251501988, 1663226031, 2877128394, 4050467288,\n    2375501075, 1434687977, 2625842981, 650253644\n  ],\n  \"problem12\": [\n    \"80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008\",\n    \"8000000000000001b8\",\n    \"8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0\",\n    \"80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200\",\n    \"800000000000000036a01ffa96b12980\"\n  ],\n  \"problem13\": [\n    \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n    \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n    \"4b45e1bec21185865d1628a8a502eed789193a3c253a529983e4bc17fa65f32b\",\n    \"99069f1eba4c874aba649c17136a253e1dd504cda936ab77cf189c2cf9eb88ff\",\n    \"68b74d91364475247c10bfee2621eaa13bcabb033ed1dee58b74c05e7944489a\"\n  ],\n  \"problem14\": \"666f7820656c657068616e7420646f67800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080706967206a616775617220696775616e61\",\n  \"problem15\": [\n    3133871534, 4165468858, 2700423300, 1343465870,\n    3790528102, 1267814286, 3156890126, 1761909257\n  ],\n  \"problem16\": \"50417b93404facb1b481990a7bf6ac963b1e1ee0ccced8b2a5938caa28b52b41\"\n}\n```\n\n## Building blocks\n\nWe'll start with the smallest details at the very bottom of the box. As a first\nstep, we need to build a couple of math operations that Python doesn't give us\ndirectly: modular addition and bitwise right-rotation.\n\n### Problem 1: addition modulo 2<sup>32</sup>\n\nIf you've learned a language like C or Java before, you might know that modular\naddition is what many languages do with integers by default. In these\nlanguages, integers have some fixed size, like 32 bits, and any math operation\nthat would normally give a result \u22652<sup>32</sup> instead \"overflows\" and\nstarts counting up from 0 again. These fixed-size integer operations are very\nefficient in hardware, so they're common in CPU instruction sets and in\nalgorithms like SHA-256. However, integers in Python have no fixed size, and\nmath operations in Python never overflow. If you want to see this in action,\nask Python for the value of 2<sup>1,000,000</sup>. This property is lovely for\nour intuition as programmers, because it means Python integers work like the\nregular math we're used to. But alas, it's not how addition is done in SHA-256,\nso we'll need to give ourselves a helper function for this.\n\nDefine a function like `add32(x, y)`. (I'll suggest names for your functions\nthroughout this project, but you can name them whatever you like.) It should\nadd its two arguments and then take the result modulo 2<sup>32</sup>, i.e. the\nremainder when the result is divided by 2<sup>32</sup>. Remember that `%` is\nthe \"modulo\" or \"remainder\" operator in Python, and `**` is the exponentiation\noperator.\n\n**Input:** a list of `(x, y)` pairs\n\n**Output:** a list of results from calling `add32` on each pair\n\n### Problem 2: bitwise right rotation\n\nThe other building block we need is bitwise rotation. Most programming\nlanguages including Python provide a very similar operation called bit\n_shifting_, usually written `<<` (left shift) or `>>` (right shift). A bit\nrotation is like bit shift, but instead of \"falling off the end\" of the number,\nthe bits rotate around to the other end. This is nice for cryptographic\nfunctions that need to do a lot of mixing, because it moves bits around without\nlosing any information. For example, consider this 32-bit number:\n\n```\n00000000000000000000000000001111\n```\n\nIf we right-*shift* that number by two places, we get:\n\n```\n00000000000000000000000000000011\n```\n\nBut if we right-*rotate* that number by two places, we get:\n\n```\n11000000000000000000000000000011\n```\n\nPython doesn't have a built-in bit rotation operator, but we can accomplish the\nsame thing by combining the results of two shifts. If you enjoy bit twiddling\npuzzles, figure out how to do this before reading further. If not, it's ok to\njust copy the following function, but make sure you take a few moments to walk\nthrough the example above and see how it does the right thing.\n\n```python\ndef rightrotate32(x, n):\n    assert x < 2 ** 32, \"x is too large. Did you use + instead of add32 somewhere?\"\n    right_part = x >> n\n    left_part = x << (32 - n)\n    return add32(left_part, right_part)\n```\n\n**Input:** a list of `(x, n)` pairs\n\n**Output:** a list of results from calling `rightrotate32` on each pair\n\nUsing these helper functions and Python's other built-in operations, we're\ngoing to do a lot of math using 32-bit integers. As a shorthand, we'll refer to\nthese integers as \"words\". A \"word\" is just another way of saying \"an integer\nof the size that we prefer to / are able to work with\". The size of a word\ndepends on context, but **in the context of SHA-256, a \"word\" means a 32-bit\nunsigned integer.**\n\n## The Message Schedule\n\nWith those two building blocks in place, we're ready to implement the first\nmajor moving part of our hash function, the \"message schedule\". Here the\n\"message\" means the hash function's input. In each round of its compression\nfunction, SHA-256 mixes in one word from the message. (Make sure you read the\ndefinition of a \"word\" above.) The \"message schedule\" defines exactly what\nthose words are and the order in which they're used.\n\nA SHA-256 message block is 64 bytes long, and a word is 4 bytes long, so one\nblock contains exactly 16 words. SHA-256 has 64 rounds, and the first 16 of\nthose rounds use those 16 message words directly. The subsequent 48 rounds mix\ndifferent message words together using a formula. We're about to implement that\nformula. First we need a couple more small helpers, which we'll call\n`little_sigma0` and `little_sigma1`.\n\n### Problem 3: `little_sigma0()`\n\nGiven a word `x`, we define `little_sigma0(x)` to be the value:\n\n```python\nrightrotate32(x, 7) ^ rightrotate32(x, 18) ^ (x >> 3)\n```\n\nImplement this function in Python. You can copy the line above if you like.\n\n**Inputs:** an integer `x`\n\n**Outputs:** the value `little_sigma0(x)`\n\nBased on [this paper](https://arxiv.org/pdf/1402.1314.pdf), I'm pretty sure the\nname \"sigma\" (Greek lowercase \u03c3 and uppercase \u03a3) refers to the \"S-boxes\" or\n\"substitution boxes\" that we're familiar with from block ciphers. See p. 57 of\n*Serious Cryptography*.\n\n### Problem 4: `little_sigma1()`\n\nSimilarly, given a word `x`, we define `little_sigma1(x)` to be the value:\n\n```python\nrightrotate32(x, 17) ^ rightrotate32(x, 19) ^ (x >> 10)\n```\n\nImplement this function in Python too. Again, you can copy the line above if\nyou like.\n\n**Inputs:** an integer `x`\n\n**Outputs:** the value `little_sigma1(x)`\n\n### Problem 5: the message schedule\n\nNow we're ready to compute the full 64-**word** message schedule array, which\nis usually called `W` (for \"words\"). As we said above, the block size of\nSHA-256 is 64 **bytes**, so for this process you start off with a 64-byte block\nof input. Convert these 64 bytes into 16 words, by converting each 4-byte group\ninto an integer using a **big-endian** conversion like\n[`int.from_bytes(..., \"big\")`](https://docs.python.org/3/library/stdtypes.html#int.from_bytes).\n(Using the wrong endianness here will be a *common mistake*.) This gives you\nthe first 16 elements of `W`. For each of the remaining 48 elements \u2014 that is,\nfor each index from 16 to 63 \u2014 use the following formula:\n\n```\nW[i] := W[i-16] + little_sigma0(W[i-15]) + W[i-7] + little_sigma1(W[i-2])\n```\n\nNote that in this case the formula is pseudocode, not Python. The `:=` symbol\nmeans \"is defined to be\", similar to `=` in Python. Importantly, the `+` symbol\nin SHA-256 pseudocode does *not* mean Python's `+`, but rather the `add32()`\nfunction that we defined back in Problem&nbsp;1. (Implementing pseudocode using\nregular Python addition rather than `add32` will be a *common mistake*\nthroughout this project.) Depending on how you structure your Python code, you\nmight also want to use the\n[`.append()`](https://docs.python.org/3/tutorial/datastructures.html) method on\nlists.\n\nDefine a function like `message_schedule(block)` which takes a 64-byte block\nand returns a 64-word list, according to the formula described above. Your\ninput for this problem is an ASCII string of length 64. Convert it to bytes,\nand use your `message_schedule()` function to construct message schedule for\nthat block. Your output should be the resulting list.\n\n**Input:** an ASCII string of length 64, which represents a block of input for the compression function\n\n**Output:** the resulting message schedule, a list of 64 words (integers)\n\nAs you work on this part of the algorithm, it might be helpful or interesting\nto compare notes with how different sources describe it. Here's how *Serious\nCryptography* describes it, on p. 119:\n\n<kbd><img alt=\"message schedule code from the book\" src=\"images/book_message_schedule.png\" width=\"700px\"></kbd>\n\nAnd here's how [the pseudocode on\nWikipedia](https://en.wikipedia.org/wiki/SHA-2#Pseudocode) describes it:\n\n```\ncreate a 64-entry message schedule array w[0..63] of 32-bit words\n(The initial values in w[0..63] don't matter, so many implementations zero them here)\ncopy chunk into first 16 words w[0..15] of the message schedule array\n\nExtend the first 16 words into the remaining 48 words w[16..63] of the message schedule array:\nfor i from 16 to 63\n    s0 := (w[i-15] rightrotate  7) xor (w[i-15] rightrotate 18) xor (w[i-15] rightshift  3)\n    s1 := (w[i- 2] rightrotate 17) xor (w[i- 2] rightrotate 19) xor (w[i- 2] rightshift 10)\n    w[i] := w[i-16] + s0 + w[i-7] + s1\n```\n\nAnd finally, here's how it's described in the official standard that defines\nSHA-256, p. 22 of [FIPS\n180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf):\n\n<kbd><img alt=\"message schedule formula from the standard\" src=\"images/standard_message_schedule.png\" width=\"640px\"></kbd>\n\nThese are all different ways of describing the same message schedule.\n\nOnce you've got the message schedule implemented correctly, you've reached the\nfirst major milestone of the project. Well done! We'll need to set it aside for\na moment to focus on another big moving part, but don't worry: we'll come back\nand make use of it before long.\n\n## The Round Function\n\nAs we said above, the SHA-256 compression function does 64 rounds of mixing.\nWe're about to implement the operation that's done for each round. To get\nstarted, we're going to need four more small helper functions:\n\n### Problem 6: `big_sigma0()`\n\nGiven a word `x`, we define `big_sigma0(x)` to be the value:\n\n```python\nrightrotate32(x, 2) ^ rightrotate32(x, 13) ^ rightrotate32(x, 22)\n```\n\nImplement this function in Python. You can copy the line above if you like.\n\n**Inputs:** an integer `x`\n\n**Outputs:** the value `big_sigma0(x)`\n\n### Problem 7: `big_sigma1()`\n\nGiven a word `x`, we define `big_sigma1(x)` to be the value:\n\n```python\nrightrotate32(x, 6) ^ rightrotate32(x, 11) ^ rightrotate32(x, 25)\n```\n\nImplement this function in Python too. Again, you can copy the line above if\nyou like.\n\n**Inputs:** an integer `x`\n\n**Outputs:** the value `big_sigma1(x)`\n\n### Problem 8: `choice()`\n\nGiven three words, `x`, `y`, and `z`, we define `choice(x, y, z)` to be the value:\n\n```python\n(x & y) ^ (~x & z)\n```\n\nImplement this function in Python too. Again, you can copy the line above if\nyou like.\n\nNote that the `~` symbol in Python means \"bitwise-not\", i.e. turn all the\n0-bits into 1's and all the 1-bits into 0's. This isn't an operation we need\nvery often, but it's nice that it's built-in. The fact that Python integers are\nboth signed and also variably-sized means that the behavior of `~` is subtler\nthan it might seem at first glance. Because of the rules of [\"two's complement\"\nsigned arithmetic](https://en.wikipedia.org/wiki/Two%27s_complement), it tends\nto give us negative numbers. Luckily, all the little details work out in the\nend, and we can use `~` here without worrying about it. You can just trust me\non that and copy the line of code above, or you can explore how `~` works\nin Python as an exercise.\n\n**Inputs:** a list of three integers, `[x, y, z]`\n\n**Outputs:** the value `choice(x, y, z)`\n\nBefore you move on from this function, take a moment to stare at it. Can you\ntell why it's called \"choice\"?\n\n### Problem 9: `majority()`\n\nThe last helper for the round function. Given three words, `x`, `y`, and `z`,\nwe define `majority(x, y, z)` to be the value:\n\n```python\n(x & y) ^ (x & z) ^ (y & z)\n```\n\nImplement this function in Python too. Again, you can copy the line above if\nyou like.\n\n**Inputs:** a list of three integers, `[x, y, z]`\n\n**Outputs:** the value `majority(x, y, z)`\n\nSame follow-up question as above: Can you tell why this function is called\n\"majority\"? This one's a little trickier. Three bits put together have\n2<sup>3</sup> = 8 possible values, and the easiest way to see this one is to\njust make a table and calculate what happens in each case.\n\n### Problem 10: the round function\n\nAlright, we're ready to implement the next big moving part of SHA-256, the\nround function. The round function takes three arguments. The most important of\nthese is the **state**, a list of 8 words. Recall the diagram of the\nMerkle\u2013Damg\u00e5rd construction from p. 112 of *Serious Cryptography*:\n\n<kbd><img alt=\"Merkle\u2013Damg\u00e5rd diagram\" src=\"images/merkle-damgard.png\"></kbd>\n\nThe values H<sub>0</sub>, H<sub>1</sub>, and H<sub>2</sub> represent this\n8-word state as it's transformed by each call to the compression function. At\nthis point we're working on the round function, which is _inside_ the\ncompression function (i.e. inside the trapezoids in that diagram), but it's the\nsame state that we're talking about.\n\nThe other two inputs to the round function are the **round constant** and the\n**schedule word**, each of which is one word (an integer). As you might guess,\nthe schedule word is ultimately going to come from the message schedule, which\nwe implemented in Problem&nbsp;5, but for now we'll just take it as an\nargument.\n\nDefine a function like `round(state, round_constant, schedule_word)`. This\nfunction starts by computing several values, using the helper functions defined\nabove:\n\n```\nch    := choice(state[4], state[5], state[6])\ntemp1 := state[7] + big_sigma1(state[4]) + ch + round_constant + schedule_word\nmaj   := majority(state[0], state[1], state[2])\ntemp2 := big_sigma0(state[0]) + maj\n```\n\nAs in Problem&nbsp;5, these formulas are pseudocode, and the `+` symbol means\n`add32()`. Finally, the round function assembles a new state:\n\n```\nnew_state := [\n    temp1 + temp2,\n    state[0],\n    state[1],\n    state[2],\n    state[3] + temp1,\n    state[4],\n    state[5],\n    state[6],\n]\n```\n\nThis `new_state` is the return value of `round()`.\n\nYour input for this problem is an object with three fields, `\"state\"`\ncontaining a list of 8 integers, `\"round_constant\"` containing one integer, and\n`\"schedule_word\"` containing one integer. Call your `round()` function with\nthese three arguments. Your output should be the resulting new state.\n\n**Input:** an object with three fields, `\"state\"`, `\"round_constant\"`, and `\"schedule_word\"`\n\n**Output:** a list of 8 words (integers), the new state returned by `round()`\n\nAs we did in Problem&nbsp;5, we can compare how different sources describe the\nsame part of the algorithm. *Serious Cryptography* doesn't include the SHA-256\nround function in detail, describing it only as \"more complex than that of\nSHA-1\" on p. 119.\n\n[The pseudocode on Wikipedia](https://en.wikipedia.org/wiki/SHA-2#Pseudocode)\nuses the variables `a`, `b`, `c`, `d`, `e`, `f`, `g`, and `h` to refer to the 8\nelements of the state array. Here's how it describes the round function:\n\n```\nS1 := (e rightrotate 6) xor (e rightrotate 11) xor (e rightrotate 25)\nch := (e and f) xor ((not e) and g)\ntemp1 := h + S1 + ch + k[i] + w[i]\nS0 := (a rightrotate 2) xor (a rightrotate 13) xor (a rightrotate 22)\nmaj := (a and b) xor (a and c) xor (b and c)\ntemp2 := S0 + maj\n\nh := g\ng := f\nf := e\ne := d + temp1\nd := c\nc := b\nb := a\na := temp1 + temp2\n```\n\nP. 23 of the [FIPS\n180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf) standard\ndescribes the round function using uses the same 8 variables:\n\n<kbd><img alt=\"the round function formulas from the standard\" src=\"images/standard_round_function.png\" width=\"480\"></kbd>\n\nOnce you've got the round function working, you've reached the second major\nmilestone of the project. Very well done! Most of the little details are behind\nus now, and the pieces we've built are about to start fitting together.\n\n## The Compression Function\n\n### Problem 11: the compression function\n\nFinally, we've arrived at a piece big enough that we've actually heard of it\nbefore. The compression function is the trapezoid from the Merkle\u2013Damg\u00e5rd\ndiagram above. This is where we're going to write the \"round loop\" that\nexecutes the round function 64 times, once for each of the 64 rounds of\nSHA-256.\n\nWe saw the `round_constant` argument above. We need to start by copying the\narray of values that we'll use for this argument. Paste the following into your\nPython code as a global variable:\n\n```python\nROUND_CONSTANTS = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n]\n```\n\nYou'll see the same array near the top of the [Wikipedia\npseudocode](https://en.wikipedia.org/wiki/SHA-2#Pseudocode). In effect, these\nare just some hardcoded, random-looking numbers that we add to the mix. In\nfact, they do actually come from a formula, something to do with the cube roots\nof the first 64 prime numbers. But the details of the formula don't matter to\nus. These are just [\"nothing-up-my-sleeve\nnumbers\"](https://en.wikipedia.org/wiki/Nothing-up-my-sleeve_number).\n\nNow, define a function like `compress(input_state, block)`, where `input_state`\nis an 8-word list, and `block` is a 64-byte block of the hash function's input.\nThis function combines the message schedule from Problem&nbsp;5 with the round\nfunction from Problem&nbsp;10, like this:\n\n```\nW := message_schedule(block)\n\nstate := input_state\nfor i in 0, 1, ..., 63\n    state = round(state, ROUND_CONSTANTS[i], W[i])\n\nstate = [\n    input_state[0] + state[0],\n    input_state[1] + state[1],\n    input_state[2] + state[2],\n    input_state[3] + state[3],\n    input_state[4] + state[4],\n    input_state[5] + state[5],\n    input_state[6] + state[6],\n    input_state[7] + state[7],\n]\n```\n\nAs in Problem&nbsp;5, these formulas are pseudocode, and the `+` symbol means\n`add32()`. The final value of `state` is the return value of `compress()`. Note\nthat the value of `input_state` gets used again at the end, so `input_state`\nand `state` do need to be two different variables.\n\nYour input for this problem is an object with two fields, `\"state\"` containing\na list of 8 integers and `\"block\"` containing an ASCII string of length 64.\nConvert the block to bytes and then call your `compress()` function with those\narguments. Your output should be the resulting new state.\n\n**Input:** an object with two fields, `\"state\"` and `\"block\"`\n\n**Output:** a list of 8 words (integers), the new state returned by `compress()`\n\nBefore you move on, think about the loop you just wrote. It's probably just two\nor three lines of code. But 64 rounds is actually quite a lot of work for the\ncomputer. This little loop, plus all the code inside of `round()`, is where the\nmagic happens. This is the mixing loop. When cryptographers study SHA-256 and\ntry to develop attacks, this little loop is what they're attacking. That makes\nthe number 64 a very careful tradeoff between speed and security. Is 64 rounds\nenough mixing to guarantee collision resistance and all the other security\nproperties? It seems to be enough today, but what about ten or twenty years\nfrom now? Will SHA-256 be able to withstand another generation of clever\nattacks and faster computers? Maybe some of you will have a hand in that\nresearch...\n\nIn any case, for now we have our secure compression function. With this\nworking, we've turned onto the home stretch. The full hash function is in\nsight.\n\n## Padding\n\n### Problem 12: padding\n\nSHA-256 takes a \"message\" of any length as input, but the compression function\nworks with 64-byte blocks at a time, so we need to pad the message to be an\nexact multiple of the block size. This is very similar to what we did with\nblock ciphers in Chapter&nbsp;4 and Problem&nbsp;Set&nbsp;3. As with block\nciphers, a naive padding scheme like \"just fill the remainder of the last block\nwith zeros\" isn't going to work. This time it's because of collision\nresistance: If two different messages looked the same after padding, then their\nhashes would be the same too, which is never supposed to happen. That means we\nneed a proper, unambiguous padding scheme.\n\nIt would be nice if we could reuse our PCKS#7 code from Problem Set 3, but alas\nSHA-256 does something different. On the bright side, because this is hashing\nand not encryption, at least we don't need to write any code for unpadding.\n\nThe SHA-256 padding scheme is originally defined in terms of bits, not bytes. I\nthink it's a little clearer in those terms, so let's start there. Remember that\nthere are 8 bits in a byte, so a block size of 64 bytes is the same as 512\nbits. Here's the padding scheme as it's originally defined:\n\n1. Start the padding bitstring with a single 1-bit.\n2. Then append some 0-bits after that. We'll define how many in step 4 below.\n3. Finally, append the bit-length of the message, encoded as a 64-bit unsigned\n   big-endian number with\n   [`.to_bytes(8, \"big\")`](https://docs.python.org/3/library/stdtypes.html#int.to_bytes).\n4. Choose the number of 0-bits for step 2 to be the smallest number such that\n   the total bit-length of the message plus the padding is an exact multiple of\n   512.\n\nA side note: You might notice that step 3 there isn't actually necessary for\nmaking the padding unambiguous. Steps 1 and 2 are sufficient for that. The goal\nof step 3 is to make it harder to find collisions, by including the message\nlength in the mix.\n\nDefining the padding scheme in terms of bits like this is pretty\nstraightforward, but in practice our programming languages and our computer\nhardware don't usually talk about individual bits directly. We need to\ntranslate that definition into bytes. So here's the exact same padding scheme,\nredescribed in terms of bytes, the way we'll actually implement it:\n\n1. Start the padding bytestring with a single 0x80 byte (decimal 128, binary\n   0b10000000). As you can see in the binary representation, this is a single\n   1-bit followed by seven 0-bits.\n2. Then append some 0x00 bytes after that. We'll define how many in step 4\n   below.\n3. Finally, append **8 times** the byte-length of the message, encoded as an\n   8-byte unsigned big-endian number with\n   [`.to_bytes(8, \"big\")`](https://docs.python.org/3/library/stdtypes.html#int.to_bytes).\n   (Forgetting to multiply the `len()` by 8 here is a *common mistake*.)\n4. Choose the number of 0x00 bytes for step 2 to be the smallest number such\n   that the total byte-length of the message plus the padding is an exact\n   multiple of 64.\n\nThat translation made things a little less elegant. The first byte is less\nobvious, and the multiply-by-8 step is easy to forget. But we'll manage.\n\nHow do we determine the number of 0x00 bytes in step 4? If you like little\narithmetic puzzles, this is another good one to think about on your own before\nreading further. Otherwise, feel free to copy the following three lines of\nPython:\n\n```python\nremainder_bytes = (message_length + 8) % 64  # number of bytes in the final block, including the appended length\nfiller_bytes = 64 - remainder_bytes          # number of bytes we need to add, including the initial 0x80 byte\nzero_bytes = filler_bytes - 1                # number of 0x00 bytes we need to add\n```\n\nTake a minute or two to review that logic and convince yourself it's correct.\nThen write a function like `padding(message_length)`, which takes the original\n**byte-length** of a message and returns the padding **bytestring** for that\nmessage. Your input for this problem is a list of message byte-lengths. For\neach of these, call your `padding()` function with that length as an argument\nand hex-encode the resulting padding bytes. (There are no message bytes to\nconcatenate in this problem, just the padding bytes themselves.) Your output\nfor this problem should be the resulting list of hex-encoded padding strings.\n\nI recommend that you have your `padding()` function return raw bytes, and that\nyou call it like `padding(...).hex()` for this problem. If you prefer to have\nyour `padding()` function do hex-encoding internally, that's ok too, but then\nyou'll need to remember to hex-decode its output in the following problems.\n\n**Input:** a list of message lengths, counted in bytes\n\n**Output:** a list of SHA-256 padding bytestrings, each hex-encoded\n\nThis padding function was our last big moving part. All we have to do now is\nput the padding function and the compression function together.\n\n## The Hash Function\n\n### Problem 13: the hash function\n\nNow we're ready to assemble the complete hash function. The genuine article.\nOnce you finish this problem, you can test your code against Python's `hashlib`\nor against any other SHA-256 implementation in the world, and your output will\nbe exactly the same. Knock on wood.\n\nAs we did with block ciphers, we're going to pad the message and split it up\ninto blocks. Let's look at that Merkle\u2013Damg\u00e5rd diagram again:\n\n<kbd><img alt=\"Merkle\u2013Damg\u00e5rd diagram\" src=\"images/merkle-damgard.png\"></kbd>\n\nM<sub>1</sub>, M<sub>2</sub>, and so on represent 64-byte blocks of the padded\nmessage. There are as many M blocks as needed, depending on the padded message\nlength. The output state (\"chaining value\") returned by each call to the\ncompression function (H<sub>1</sub>, H<sub>2</sub>, and so on) becomes the\ninput state for the following call. And the final chaining value returned by\nthe last call to the compression function is the SHA-256 hash of the message.\n\nYou might've noticed one last missing detail: Where do we get H<sub>0</sub>,\nthe input state for the first call to the compression function? We'll use a\nconstant for this. As in CBC mode, we'll call this constant the \"initialization\nvector\", or IV for short. Unlike CBC mode, where the IV needs to be uniformly\nrandom every time, the SHA-256 IV never changes. It's baked into the standard.\nThis is the other set of constants at the top of the [Wikipedia\npseudocode](https://en.wikipedia.org/wiki/SHA-2#Pseudocode). Paste the\nfollowing into your Python code as another global variable:\n\n```python\nIV = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]\n```\n\nNow, write a function like\n[`sha256(message)`](https://youtu.be/6v5VahaEL7s?t=438). Inside it, use your\n`padding()` function to generate padding bytes, and then append them to the\nmessage bytes. Note that nothing should be hex-encoded at this point. (Using\nhex-encoded padding here is a _common mistake_.) Create a `state` variable,\nwhose starting value is `IV`. Then split the padded message up into 64-byte\nblocks and loop over the blocks, calling your `compress()` function on each\none. For each call to `compress()`, use the current `state` value as input and\nassign the return value back to `state`. Double check that your argument types\nfor `compress()` are the same as they were in Problem&nbsp;11. (Calling\n`compress()` with block bytes here but block words there is another _common\nmistake_.) Once the block loop is finished, convert the final value of `state`\ninto 32 bytes by encoding each of the 8 state words as a 4-byte **big endian**\ninteger and concatenating them. Those 32 bytes are the return value of\n`sha256()`.\n\n> Debugging tips: Even if you've passed tests for all the previous problems,\n> and your `sha256()` function looks good, sometimes you can still get the\n> wrong answer here. Look carefully for the common mistakes described above.\n> Also look for accidental global variables in your functions, which might\n> refer to input from a previous problem. If you get stuck, put print\n> statements everywhere, and compare what you see to these [known-good debug\n> printouts for\n> `sha256(b\"\")`](https://gist.github.com/oconnor663/27804bb33542bbf398aab16e102d8594).\n\nYour input for this problem is a list of ASCII strings. Convert each string to\nbytes and hash it with your `sha256()` function. Your output should be a list\nof the resulting SHA-256 hashes, each encoded as hex.\n\n**Input:** a list of ASCII strings\n\n**Output:** a list of the hex-encoded SHA-256 hashes of those strings\n\n<a href=\"https://youtu.be/LUDEjulbqzk?t=123\">\n  <img alt=\"I have made fire!\" src=\"images/i_have_made_fire.jpg\" width=\"400px\">\n</a>\n\n## The Length Extension Attack\n\nIf we were to stop here, all our blood, sweat, and tears would not have been\nwasted. Implementing SHA-256 is an accomplishment in itself, and the intuition\nyou've gained along the way will hopefully be useful to you whenever you see a\nhash function from now on. But besides that broad intuition, you've also\nlearned some very specific tricks: Now you know how to invoke the SHA-256\ncompression and padding functions directly, which isn't something that most\nlibrary implementations will let you do. It turns out that you can use these\ntricks to pull off an important attack, and the best time to learn this attack\nis while the tricks are still fresh in your mind. Strike while the iron is hot,\nas they say.\n\nSHA-256 has a flaw. Although its collision resistance and other security\nproperties remain unbroken so far, it does *not* behave like a true [\"random\noracle\"](https://en.wikipedia.org/wiki/Random_oracle). Some SHA-256 outputs are\n_related_ to each other, in a way that you can detect or exploit even when you\ndon't know the input. This exploit is called a \"length extension attack\".\n\nRemember how the \"chaining values\" worked in Problem&nbsp;13. The output from\neach call to the compression function became the input for the next call. But\nthe final output, well, it just became the hash. We didn't do anything special\nto it; we just returned it. That means that if you look at a SHA-256 hash,\nyou're looking at the same state that _would have been used_ to call the\ncompression function again _if there had been more input._\n\nThis was a design mistake. (The designers actually knew about this issue at the\ntime but didn't consider it important.) Here's the problem: Suppose you're an\nattacker, and you're looking at a hash that I've published. Let's say you don't\nknow what input I used, maybe because I included a secret key or something like\nthat. Because of this mistake, even though you don't know my input, you can\nconstruct a _new_ hash, which matches a _different_ input, one which starts\nwith the _same bytes as mine_ but then has some extra bytes of your choosing\nadded to the end. If SHA-256 hashes were truly independent of each other, this\nwouldn't be possible, but they aren't, and it is possible.\n\nThere's one thing standing between you and this attack: the padding. I didn't\ndo anything special to the last chaining value, but I did pad my input. Those\npadding bytes went into the state that you're looking at, and there's no way\nfor you to unmix them. But you can live with that, by making a clever\ncompromise:\n\n*Pretend that my padding bytes are part of your chosen suffix.*\n\nThat is to say, you can't extend my input with a totally arbitrary suffix, but\nyou can choose any suffix that starts with my padding bytes. That's an\nimportant limitation, but it still allows for quite a lot of mischief.\n\nIf you're reading through this project before we've covered Chapter 7 of\n*Serious Cryptography*, it might not yet be clear why this attack is important.\nThe short answer is, this attack is why we need an algorithm called\n[HMAC](https://en.wikipedia.org/wiki/HMAC) for keyed hashing, and programmers\nwho don't know about HMAC often misuse hash functions in ways that are\nvulnerable to this attack. We'll get to HMAC in class shortly, if we haven't\nalready. For now, let's see the length extension attack in action.\n\n### Problem 14: modeling the extended input\n\nLet's say my original input is 55 bytes long. I've chosen that length because\nit's the most that still fits in one 64-byte block after padding is added.\nWhat's the padding in this case? Let's use our `padding()` function to see it:\n\n```\n>>> padding(55)\nb'\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xb8'\n>>> padding(55).hex()\n'8000000000000001b8'\n```\n\nWe can recognize the pieces there. One 0x80 byte at the front, no extra 0x00\nbytes in this case, and an 8-byte big-endian integer encoding the value\n0x01b8&nbsp;=&nbsp;440&nbsp;=&nbsp;8&nbsp;*&nbsp;55, which is my input length\nin bits. My original 55 bytes and these 9 bytes of padding are 64 bytes put\ntogether, exactly one block. Clear so far?\n\nNow put your attacker hat back on. You're going to pretend that those padding\nbytes are actually the start of your chosen suffix. Then you're going to add\nany number of additional suffix bytes of your choosing. The resulting\n\"synthetic\" input, which you're ultimately going to compute the hash of, will\nbe equivalent to my original, plus my padding, plus the rest of your chosen\nsuffix. Let's say my original input was fifty-five `0xaa` bytes, and you chose\nthree `0xff` bytes for your suffix. In that case the synthetic message,\nrepresented here as a hex-encoded string that I've split over a few lines,\nwould be:\n\n```\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa    <-- the first 32-byte half of the first block\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000001b8    <-- the second 32-byte half of the first block\nffffff                                                              <-- the second block, 3 bytes *before* padding\n```\n\nTo be clear, we won't construct this complete synthetic string ourselves when\nwe perform the length extension attack. In fact, we can't. All those `0xaa`\nbytes in my original input are hidden from the attacker. But this synthetic\nstring is what our final length-extended hash will *represent*, and we want to\nmodel it in this problem.\n\nYour input for this problem is an object with two fields, `\"original_input\"`\ncontaining an ASCII string that we want to extend, and `\"chosen_suffix\"`\ncontaining the ASCII string that we want to extend it with. Convert these\nstrings to bytes, and construct the synthetic message with padding in the\nmiddle that a length extension attack would compute the hash of. Your output\nshould be this synthetic string, encoded as hex.\n\n**Input:** an object with two fields, `\"original_input\"` and `\"chosen_suffix\"`\n\n**Output:** the synthetic message, encoded as hex\n\n### Problem 15: recovering the state\n\nThe length extension attack will reuse a hash as a chaining value, feeding it\ninto additional calls to the compression function. However, you might remember\nthat there was a conversion step we did when we returned the hash. We converted\nit from 8 words to 32 bytes. We need to undo that and recover the words.\n\nYour input for this problem is a 32-byte hash, encoded as hex. Hex-decode it\ninto bytes. Then convert it back into a list of 8 words, by breaking it into\ngroups of 4 bytes and parsing each 4-byte group as a **big-endian** integer.\nYour output should be that list.\n\n**Input:** a 32-byte hash, encoded as hex\n\n**Output:** the list of 8 state words recovered from the hash\n\n### Problem 16: the length extension attack\n\nWe're ready to perform the attack. Your input for this problem will be an\nobject with three fields, `\"original_hash\"`, `\"original_len\"`, and\n`\"chosen_suffix\"`. Hex-decode the original hash and convert the chosen suffix\nto ASCII bytes. Recover the list of 8 state words from the original hash, as\nyou did in Problem&nbsp;15 above.\n\nNow, to begin the attack, _re-pad_ the chosen suffix, like you padded the\nregular message in Problem&nbsp;13. However, instead of calling your\n`padding()` function with the length of the suffix itself, call it with the\n*total length of the synthetic message*. That is, the original input length,\nplus the length of the original input's padding, plus the length of the suffix.\n(This makes your padding bytes different, but it doesn't change _how many_\npadding bytes you get. Can you see why?)\n\nNext, hash the padded suffix by looping over its blocks and calling\n`compress()` on each of them, again as you did in Problem&nbsp;13. However,\ninstead of using `IV` for your initial state, use the state words that you\nrecovered from the original hash.\n\nOnce you've compressed all the resulting blocks, the attack is finished.\nConvert your list of 8 state words back into 32 bytes, using the same method as\nin Problem&nbsp;13. Your output for this problem should be the resulting hash,\nencoded as hex.\n\nThe input for the `\"original_hash\"` given in `example_input.json` was `elephant\njaguar vulture octopus butterfly`. You don't need to know that to extend it,\nbut if you like, you can check that the output is indeed a valid extension of\nthat original string as an exercise.\n\n**Input:** an object with three fields, `\"original_hash\"`, `\"original_len\"`, and `\"chosen_suffix\"`\n\n**Output:** the length-extended hash, encoded as hex\n\n<a href=\"https://youtu.be/Vy7RaQUmOzE?t=201\">\n  <img alt=\"he is the one\" src=\"images/matrix.jpg\" width=\"400px\">\n</a>\n\n## Conclusion\n\nThe project is finished, and there are no more questions. If you've made it\nthis far, then you know more about the insides of a hash function than many\ncryptographers do. That's something to be proud of, and I hope you'll find that\nit was worth the trouble.\n\nIf you're tired of hashing and ready for a break, no need to read any further.\nBut if you found all this very interesting and you're eager to learn more,\nthere are many different avenues to explore. Here are a few:\n\n- In Problem&nbsp;13, we implemented \"all-at-once\" hashing. That is, the entire\n  input string was provided as an argument. In practice however, most hash\n  functions are designed to work incrementally, piece-by-piece. When the input\n  is very large, they read smaller chunks of it in a loop, so that the\n  application doesn't need to allocate lots of memory for a large string.\n  Python's `hashlib` module provides the\n  [`.update()`](https://docs.python.org/3/library/hashlib.html#hashlib.hash.update)\n  method for this. You can try refactoring your own SHA-256 code to support\n  some sort of \"update\" function, which can be called multiple times. You'll\n  need to think about how to \"buffer\" input when what you're given isn't an\n  exact multiple of 64 bytes.\n\n- More recent designs like SHA-3, BLAKE2, and BLAKE3 prevent length extension\n  attacks by making sure that their chaining values and their published hashes\n  are different from each other in some way. This prevents an attacker from\n  looking at a hash and recovering the chaining value that would have been used\n  to compress more input, like we did in Problems 15 and 16. Think about ways\n  you might modify SHA-256 to prevent this. What if the compression function\n  was implemented in hardware, and you weren't allowed to change it?\n\n- The Merkle\u2013Damg\u00e5rd contruction is very common, but there are other ways to\n  organize things. SHA-3 uses a \"sponge construction\" (p. 115), and BLAKE3 uses\n  a \"Merkle tree\" (named after the same Ralph Merkle). These different\n  structures can have a variety of different benefits. You might compare and\n  contrast your SHA-256 code with [this Python implementation of\n  SHA-3](https://github.com/coruus/py-keccak/blob/master/fips202/keccak.py),\n  especially the part where they use `permute()` instead of `compress()`.\n\n- Some use cases, particularly hash tables (dictionaries in Python), can\n  tolerate collisions. For these cases, it's common to use a faster hash\n  function with a smaller state and a shorter output. See for example\n  [SipHash](https://en.wikipedia.org/wiki/SipHash), also designed by J.P.\n  Aumasson, the author of [our textbook](https://nostarch.com/seriouscrypto).\n  SipHash is used by default in the Rust\n  [`HashMap`](https://doc.rust-lang.org/std/collections/struct.HashMap.html),\n  for example. But note that even though hash tables/maps don't need collision\n  resistance per se, they often do need some related security properties,\n  because they can be [vulnerable to DOS\n  attacks](https://www.anchor.com.au/blog/2012/12/how-to-explain-hash-dos-to-your-parents-by-using-cats/)\n  if an attacker is able to produce too many collisions.\n\n- Some applications need a hash function with more exotic properties. For\n  example, you might be familiar with the `rsync` command for copying files\n  over a network. Rsync uses a [\"rolling\n  hash\"](https://en.wikipedia.org/wiki/Rolling_hash) to efficiently detect\n  blocks that are the same between two different versions of a file. Rolling\n  hashes look quite different from cryptographic hash functions, and they\n  usually don't make strong security guarantees. If you have access to a remote\n  server, you can play with making a tiny change to a large file, and see how\n  long it takes Rsync to pick up the change.\n\nHappy hashing.\n"
 },
 {
  "repo": "RubyCrypto/rbnacl",
  "language": "Ruby",
  "readme_contents": "![RbNaCl](https://raw.github.com/RubyCrypto/rbnacl/master/images/logo.png)\n======\n[![Gem Version](https://badge.fury.io/rb/rbnacl.svg)](http://badge.fury.io/rb/rbnacl)\n[![Build Status](https://github.com/RubyCrypto/rbnacl/actions/workflows/ci.yml/badge.svg)](https://github.com/RubyCrypto/rbnacl/actions/workflows/ci.yml)\n[![Coverage Status](https://coveralls.io/repos/RubyCrypto/rbnacl/badge.svg?branch=master)](https://coveralls.io/r/RubyCrypto/rbnacl)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/RubyCrypto/rbnacl/blob/master/LICENSE.txt)\n\nRuby binding for [libsodium], a fork of the [Networking and Cryptography][NaCl]\nlibrary.\n\n[libsodium]: https://libsodium.org\n[NaCl]:  http://nacl.cr.yp.to/\n\n## Why libsodium/NaCl?\n\nNaCl is a different kind of cryptographic library. In the past crypto\nlibraries were kitchen sinks of little bits and pieces, like ciphers,\nMACs, signature algorithms, and hash functions. To accomplish anything\nyou had to make a lot of decisions about which specific pieces to use,\nand if any of your decisions were wrong, the result was an insecure\nsystem. The choices are also not easy: EAX? GCM? CCM? AES-CTR? CMAC?\nOMAC1? AEAD? NIST? CBC? CFB? CTR? ECB? OMGWTFBBQ!\n\nNaCl puts cryptography on Rails! Instead of making you choose which\ncryptographic primitives to use, NaCl provides convention over configuration\nin the form of expertly-assembled high-level cryptographic APIs that ensure\nnot only the confidentiality of your data, but also detect tampering.\nThese high-level, easy-to-use APIs are designed to be hard to attack by\ndefault in ways primitives exposed by libraries like OpenSSL are not.\n\nThis approach makes NaCl a lot closer to a system like GPG than it is\nto the cryptographic primitive APIs in a library like OpenSSL. In addition,\nNaCl also uses state-of-the-art encryption, including Curve25519 elliptic\ncurves and the XSalsa20 stream cipher. This means with NaCl you not only get\na system which is designed to be secure-by-default, you also get one which\nis extremely fast with comparatively small cryptographic keys.\n\n### Is it any good?\n\n[Yes.](http://news.ycombinator.com/item?id=3067434)\n\n## Supported platforms\n\nYou can use RbNaCl on platforms libsodium is supported (see below).\n\nThis library aims to support and is [tested against][travis] the following Ruby\nversions:\n\n* Ruby 2.5\n* Ruby 2.6\n* Ruby 2.7\n* JRuby 9.2\n\nIf something doesn't work on one of these versions, it's a bug.\n\n[travis]: http://travis-ci.org/RubyCrypto/rbnacl\n\n## Installation\n\nNote: [Windows installation instructions are available](https://github.com/RubyCrypto/rbnacl/wiki/Installing-libsodium#windows).\n\n### libsodium\n\nTo use RbNaCl, you will need to install libsodium:\n\nhttps://github.com/jedisct1/libsodium\n\nAt least version `1.0.0` is required.\n\nFor OS X users, libsodium is available via homebrew and can be installed with:\n\n    brew install libsodium\n\nFor FreeBSD users, libsodium is available both via pkgng and ports.  To install\na binary package:\n\n    pkg install libsodium\n\nTo install from ports on FreeBSD, use your favorite ports front end (e.g.\nportmaster or portupgrade), or use make as follows:\n\n    cd /usr/ports/security/libsodium; make install clean\n\n### RbNaCl gem\n\nOnce you have libsodium installed, add this line to your application's Gemfile:\n\n    gem 'rbnacl'\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install rbnacl\n\nInside of your Ruby program do:\n\n    require 'rbnacl'\n\n...to pull it in as a dependency.\n\n## Documentation\n\nRbNaCl's documentation can be found [in the Wiki][wiki]. The following features\nare supported:\n\n* [SimpleBox]: easy-to-use public-key or secret-key encryption \"on Rails\"\n* [Secret-key Encryption][secretkey]: authenticated symmetric encryption using a\n  single key shared among parties\n* [Public-key Encryption][publickey]: securely send messages to a given public\n  key which can only be decrypted by a secret key\n* [Digital Signatures][signatures]: sign messages with a private key which can\n  be verified by a public one\n* [Authenticators][macs]: create codes which can be used to check the\n  authenticity of messages\n* [Hash Functions][hashes]: compute a secure, fixed-length code from a message\n  which does not reveal the contents of the message\n\nAdditional power-user features are available. Please see the Wiki for further\ninformation.\n\n[YARD API documentation][yard] is also available.\n\n[wiki]: https://github.com/RubyCrypto/rbnacl/wiki\n[simplebox]: https://github.com/RubyCrypto/rbnacl/wiki/SimpleBox\n[secretkey]: https://github.com/RubyCrypto/rbnacl/wiki/Secret-Key-Encryption\n[publickey]: https://github.com/RubyCrypto/rbnacl/wiki/Public-Key-Encryption\n[signatures]: https://github.com/RubyCrypto/rbnacl/wiki/Digital-Signatures\n[macs]: https://github.com/RubyCrypto/rbnacl/wiki/HMAC\n[hashes]: https://github.com/RubyCrypto/rbnacl/wiki/Hash-Functions\n[yard]: http://www.rubydoc.info/gems/rbnacl\n\n## Learn More\n\nWhile NaCl has designed to be easier-than-usual to use for a crypto\nlibrary, cryptography is an incredibly difficult subject and it's\nalways helpful to know as much as you can about it before applying\nit to a particular use case. That said, the creator of NaCl, Dan\nBernstein, has published a number of papers about NaCl. If you are\ninterested in learning more about how NaCl works, it's recommended\nthat you read them:\n\n* [Cryptography in NaCl](http://cr.yp.to/highspeed/naclcrypto-20090310.pdf)\n* [Salsa20 Design](https://cr.yp.to/snuffle/design.pdf)\n* [Curve25519: new Diffie-Hellman speed records](http://cr.yp.to/ecdh/curve25519-20060209.pdf)\n* [Ed25519: High-speed high-security signatures](http://ed25519.cr.yp.to/ed25519-20110926.pdf)\n\nFor more information on libsodium, please check out the\n[Introducing Sodium blog post](http://labs.umbrella.com/2013/03/06/announcing-sodium-a-new-cryptographic-library/)\n\nHave a general interest in cryptography? Check out the free course\nCoursera offers from Stanford University Professor Dan Boneh:\n\n[http://crypto-class.org](http://crypto-class.org)\n\n## Important Questions\n\n### Is it \"Military Grade\u2122\"?\n\nOnly if your military understands twisted Edwards curves\n\n### Is it \"Bank Grade\u2122\"?\n\nNo, that means 3DES, which this library doesn't support, sorry\n\n### Does it have a lock with a checkmark?\n\nSure, here you go:\n\n![Checkmarked Lock](http://i.imgur.com/dwA0Ffi.png)\n\n## Contributing\n\n* Fork this repository on Github\n* Make your changes and send a pull request\n* If your changes look good, we'll merge 'em\n\n## License\n\nCopyright (c) 2012-2018 Tony Arcieri, Jonathan Stott. Distributed under the MIT License.\nSee [LICENSE.txt] for further details.\n\n[LICENSE.txt]: https://github.com/RubyCrypto/rbnacl/blob/master/LICENSE.txt\n"
 },
 {
  "repo": "cornelltech/CS6831-Spring2019",
  "language": "TeX",
  "readme_contents": "# Syllabus for CS 6831\n\nWelcome to CS 6831, Designing Secure Cryptography. We will be learning about\nthe modern theory and practice of the cryptographic tools deployed to protect\ncontemporary computing systems. In addition to learning more about the types of\ncryptographic tools currently used, we will be focusing on understanding the\nprocesses that, ideally, lead to secure tools.  Topics include formulation of\nsecurity definitions, reduction-based concrete security analysis, evaluation of\nreal-world implementations, common pitfalls, and attacks. Active research topics\nwill be highlighted throughout. \n\n\nInstructor: Tom Ristenpart (https://rist.tech.cornell.edu)\n\nTime: 1:55pm-3:10pm M/W\n\nNYC classroom: Bloomberg 091\n\nIthaca classroom: Gates 405\n\nVideo recordings:\n[Available here](https://cornell.mediasite.com/Mediasite/Catalog/Full/01abe090c34c4419894e68d9cbdb7eef21)  (Cornell login required)\n\n### Pre-requisites\n\nBy the end of the class you should have the ability to design and argue the\nsecurity of new cryptographic tools, at the level of quality of new publishable\nresearch results. This will be a fast-paced course.\n\nStudents will be expected to have taken courses or otherwise have substantial\nbackground on computer security; have knowledge of basic cryptographic concepts\n(encryption, hashing); and experience doing formal math (proofs, etc.).  \n\nThe class is for PhD students, and will assume a lot of shared background\nmaterial. Cornell Tech masters students should only consider the class if they\nare comfortable with probability theory, discrete mathematics, computational\ncomplexity, and computer security.  You might refer to the Bellare-Rogaway\nnotes, Section 1.5.  For a taste of what they mean by mathematical maturity,\nrefer to the Boneh-Shoup book Section 2.4. If that material doesn't look\nfamiliar, or you spent a lot of time struggling to understand it, then that may\nsuggest you'll have a hard time getting much out of the class.  The first time I\ntook a PhD class of this form, I spent innumerable hours a week on it, and had\nthe freedom to do so as a PhD student with few other responsibilities. \n\nIt is really important to note that this does not mean *you are not capable of\nmastering cryptography*, and I don't want to discourage you from the field.\nRather, there's a bit of a jargon and concept barrier that must be filled in,\nand doing so would unfairly sacrifice content from the PhD students.  Usually we\nteach a masters level course that covers a subset of this material at a more\nsuitable pace, but unfortunately that's not possible this year. \n\nWith that set of warnings in place, Cornell Tech students should talk to me if\nthey want to take the class after the first lecture.  Be prepared to answer some\nquestions about your understanding of Boneh-Shoup Section 2.4.\n\n\n### Requirements\n\nThe class will involve two main deliverables. One will be scribe notes. The goal\nwill be to have a complete set of notes for future reference. We will figure out\nearly on the scribing schedule. Each student will be responsible for\ndelivering one or more complete writeups of lecture topic(s).  This will notably\ninclude finished, precise proofs that may be only covered at a high level in\nclass, accompanied by beautiful English prose.  See new section added below.\n\nSecond will be a semester project, the aspirational goal being a\npublication-worthy result in applied cryptography. The project deliverable will\nbe a short report together with a one-on-one oral discussion (possibly over\nZoom) with the me about the result. A paper worked on with others can substitute\nfor the short report, though you will need to identify your specific\ncontributions.  The one-on-one discussion will allow you to gain practice\ndescribing your work in a professional setting, allow me to assess what you've\nlearned from the class, and help determine your final grade. More details\nwill be forthcoming. \n\nI may also point out problems or omitted proofs that you will want to work on to\nsolidify your understanding of material. These will be ungraded, but I can give\nyou feedback if you desire. \n\nGrades will be assigned according to the following breakdown:\n\n* Participation: 20%\n* Scribe notes :  40% \n* Project:  40% \n\n### Scribing\n\nI will send out a spreadsheet with a tentativie scribing schedule.  PhD students\nwill be doing scribing.  There will be one scribe and two proofreaders for each\nlecture. The scribe will write up an initial draft of the notes for the lecture,\nand the proofreaders will provide technical and editorial feedback before I take\na look. The scribe and proofreaders are, together, also responsible for coming\nup with three self-study questions (i.e., homework problems) that speak to the\nmaterial. These should not be questions that require regurgitating something,\nbut rather that make people think deeply about the material.  Feel free to\nborrow problems from public sources (e.g., Boneh-Shoup book), but be very clear\nabout attribution (even if it was just used for inspiration) and include the\nattribution in the notes. \nInitial draft is due a week after lecture, and proof-read finald raft 1.5 weeks\nafter lecture. If there's going to be some reason for a delay, let me know.\n\nThe masters students will be responsible for testing out (a reasonable subset)\nof these questions by working out candidate solutions individually. We'll group\nthings into ~6-lecture chunks, and assign a problem from each. So masters\nstudents can expect 3 problem sets, finishing 3/4 of the way through the\nclass to minimize problem set and end-of-term project overlaps. If the problems\nare too hard, we'll adjust accordingly how many students need to solve.  These\nwill be peer-graded by the PhD student(s) who first conceived the problem with\nmy oversight and final approval of grading.  The involved PhD students and\nmasters students will determine the worst solution, and the responsible student\nwill get the honor of typesetting a correct solution for inclusion in an\nappendix in the notes. They can use as reference all the solutions, and work\nwith whomever can help them out to do so. For the masters students the 40\\% of\nclass grade will be associated to performance on problem sets. Of course, MS\nstudents can help out with proof-reading and embellishments to scribe notes via\npull requests (see below), and this will positively count towards your\nparticipation and scribe grades.\n\nI have added the notes to the git repository. You can therefore fork this\nrepository, work in a local copy, and then submit a pull request to me once the\nnotes are ready for my review. They should already be proofread by both\nproofreaders before a PR comes in. Let me know if this workflow doesn't work out\nfor you. \n\nThe end result should be an open-source set of notes that others can use as they\nexplore this topic. Everyone who finishes the class will get appropriate credit\nfor contributing. \n\nAll this will require some good will and coordination among students. If anyone\nhas any concerns or problems, don't hesitate to talk to me.\n\n\n### Project\n\nWe will partition semester project into two milestones. The first is a proposal,\ndue on March 6, via email. It should be no more than one page, and be a brief\ndescription of the proposed project. It is ok to have groups, but the level of\nwork should scale in the size of the group. The final deliverable will be a\nproject report due at end of semester, exact date to be determined. \n\nThe project should have a well-defined goal that is on the cutting edge of\ncryptography, the litmus being some publishable result (not necessarily a whole\npaper, but a result within a publishable paper would be fine). You can propose \nan ongoing research project as your class project, but make sure I know who is\ninvolved, what your contribution will be. Similarly the writeup can be\ndovetailed with a research paper in preparation, with the same requirement that\nyour writing contribution should be identifiable.\n\nTime allowing we'll have either group presentations at the end of the semester,\nor meetings with just me to go over the project and other topics. \n\n### Background reading\n\nOne of the goals of the course will be to produce lecture notes on this content\nuseful for others. The following excellent references will be useful throughout the course,\nparticularly the Boneh-Shoup book and Bellare-Rogaway notes. \n\n* [A Graduate Course in Cryptography](https://crypto.stanford.edu/~dabo/cryptobook/BonehShoup_0_4.pdf).\n   Boneh-Shoup book. A mixture of asymptotic and concrete security.\n\n* [Bellare and Rogaway lecture notes](http://web.cs.ucdavis.edu/~rogaway/classes/227/spring05/book/main.pdf).\n  A somewhat dated set of lecture notes. Focuses on concrete security approach.\n\n\n* [Bellare lecture slides](https://cseweb.ucsd.edu/~mihir/cse207/classnotes.html). Slides from\n  Mihir Bellare's graduate course in cryptography, based in large part on the notes.\n  \n\n* [Modern Cryptography by Katz and Lindell](http://www.cs.umd.edu/~jkatz/imc.html). Katz-Lindell book focuses on\n asymptotic definitions. \n\n\n\n## Lecture schedule\n\nA very preliminary and aspirational schedule is below to give a taste of the scope of\nwhat we're hoping to cover.  \n\n\n| Date |  Topic  |  Slides | Notes |\n|------|---------|---------|-------|\n| Jan 23 | Intro |  [Slides](slides/intro-lec1.pdf) | |\n| Jan 28 | Block ciphers, PRPs, PRFs | [Slides](slides/ciphers-lec2.pdf) | |\n| Jan 30 | PRP/PRF Switching lemma, Luby-Rackoff, Shuffling | [Slides](slides/ciphers2-lec3-markup.pptx) | |\n| Feb 4 |  Block ciphers, cryptanalysis  | [Slides](slides/cryptanalysis-lec4.pptx) | |\n| Feb 6 |   Frequency analysis, tweakable block ciphers |[Slides](slides/tweakciphers-lec5.pptx) | |\n| Feb 11 | Tweakable block ciphers, randomized encryption | [Slides](slides/tweakciphers-lec6-markup.pptx) | |\n| Feb 13 | Randomized encryption | [Slides](slides/randomized-lec7_markup.pptx)  | |\n| Feb 18 | Authenticated encryption  | [Slides](slides/activeattacks-lec8-markup.pptx)  | |\n| Feb 20 | Message authentication | [Slides](slides/unforgeability-lec9.pptx)  | |\n| Feb 25 | No Lecture (February break) | |\n| Feb 27 | AE in practice and theory | [Slides](slides/advancedAE-lec10.pptx) | |\n| Mar 4  | Class cancelled |  | |\n| Mar 6  | Hash functions  |[Slides](slides/hashfunctions-lec11.pptx)  | |\n| Mar 11 | Hash functions 2 | [Slides](slides/hashfunctions-lec12.pptx) | |\n| Mar 13 | Hash functions 3 | [Slides](slides/hashfunctions-lec13.pptx) | |\n| Mar 18 | Public key encryption / RSA | [Slides](slides/pke.pptx)| |\n| Mar 20 | Public-key encryption / El Gamal  | [Slides](slides/pke2.pptx)  | |\n| Mar 25 | ECC |  [Slides](slides/ecc.pptx) | |\n| Mar 27 | Chosen-ciphertext attacks  | [Slides](slides/pke-cca.pptx) | |\n| Apr 1  | No lecture (Spring Break) |  | |\n| Apr 3  | No lecture (Spring Break) |  | |\n| Apr 8  | RSA signatures | [Slides](slides/digsigs.pptx) | |\n| Apr 10 | RSA (part 2) and Schnorr signatures | [Slides](slides/digsigs2.pptx)| |\n| Apr 15 | Schnorr, ID protocols, Fiat-Shamir | [Slides](slides/idprots.pptx) | |\n| Apr 17 | Signatures wrap-up and PKI | [Slides](slides/digsigs3.pptx) | |\n| Apr 22 | Zero-knowledge proofs | [Slides](slides/zk.pptx) | |\n| Apr 24 | Class cancelled |  |\n| Apr 29 |  Pairing-based crypto | [Slides](slides/bilinear.pptx) |\n| May 1  | Lattice-based crypto | [Slides](slides/lattices.pptx)|\n| May 6  | TBA |  | |\n\n"
 },
 {
  "repo": "erikrose/peep",
  "language": "Python",
  "readme_contents": ".. image:: https://travis-ci.org/erikrose/peep.svg?branch=master\n    :target: https://travis-ci.org/erikrose/peep\n\n.. note::\n\n    Peep is deprecated, as we have `merged its functionality into pip 8\n    <https://pip.readthedocs.org/en/stable/reference/pip_install/#hash-checking\n    -mode>`_. This brings myriad improvements, including support for caching,\n    detection of omitted dependencies, and better handling of errors and corner\n    cases. To switch to pip 8's hash-checking without hitting any race\n    conditions...\n\n    1. Upgrade to peep 3.0 (which exists mainly as a stopgap to support\n       race-free upgrades like this).\n    2. Upgrade to pip 8.\n    3. Atomically, switch the format of your requirements files using ``peep\n       port`` (described below), and start calling pip instead of peep.\n    4. Delete peep from your project.\n\n    Thank you for using peep! Your early support helped establish hash\n    verification as a feature worth uplifting, and now the package ecosystem is\n    safer for everyone.\n\n    Here are some `more detailed upgrade instructions\n    <https://github.com/erikrose/peep/wiki/UpgradeToPip8>`_ in case you need\n    them.\n\n====\nPeep\n====\n\nDeploying Python projects has long been a source of frustration for the\nsecurity-conscious: a compromise of PyPI or its third-party CDN could get\nyou a package different from the one you signed up for. To guarantee\nknown-good dependencies for your deployments, you had to run a local package\nindex, manually uploading packages as you vetted them, maintaining a set of\nACLs for that server, and trying to somehow keep an audit trail of who did\nwhat. Alternatively, you could check everything into a vendor library, but that\nmeant a lot of fooling around with your VCS (or maintaining custom tooling) to\ndo upgrades.\n\nPeep fixes all that.\n\nVet your packages, and put hashes of the PyPI-sourced tarballs into\n``requirements.txt``, like this::\n\n    # sha256: L9XU_-gfdi3So-WEctaQoNu6N2Z3ZQYAOu4-16qor-8\n    Flask==0.9\n\n    # sha256: qF4YU3XbdcEJ-Z7N49VUFfA15waKgiUs9PFsZnrDj0k\n    Jinja2==2.6\n\nThen, use ``peep install`` instead of ``pip install``, and let the crypto do\nthe rest. If a downloaded package doesn't match the expected hash, Peep will\nfreak out, and installation will go no further.\n\nThere are no servers to maintain, no enormous vendor libs to wrestle, and no\nneed to trust a package author's key management practices. With the addition\nof a few hashes to your requirements file, you can know that your chain of\ntrust is safely rooted in your own source tree.\n\n\nSwitching to Peep\n=================\n\n1. Install Peep::\n\n    pip install peep\n\n   (Or, better, embed ``peep.py`` into your codebase as described in the\n   Embedding section below. That eliminates having to trust an unauthenticated\n   PyPI download, assuming you manually vet ``peep.py`` itself the first time.)\n2. Use Peep to install your project once::\n\n        cd yourproject\n        peep install -r requirements.txt\n\n   You'll get output like this::\n\n    <a bunch of pip output>\n\n    The following packages had no hashes specified in the requirements file,\n    which leaves them open to tampering. Vet these packages to your\n    satisfaction, then add these \"sha256\" lines like so:\n\n    # sha256: L9XU_-gfdi3So-WEctaQoNu6N2Z3ZQYAOu4-16qor-8\n    Flask==0.9\n\n    # sha256: qF4YU3XbdcEJ-Z7N49VUFfA15waKgiUs9PFsZnrDj0k\n    Jinja2==2.6\n\n    # sha256: u_8C3DCeUoRt2WPSlIOnKV_MAhYkc40zNZxDlxCA-as\n    Pygments==1.4\n\n    # sha256: A1gwhyCNozcxug18_9RjJTmJQa1rctOt-AnP7_yR0PM\n    https://github.com/jsocol/commonware/archive/b5544185b2d24adc1eb512735990752400ce9cbd.zip#egg=commonware\n\n    -------------------------------\n    Not proceeding to installation.\n3. Vet the packages coming off PyPI in whatever way you typically do. For\n   instance, read them, or compare them with known-good local copies.\n4. Add the recommended hash lines to your ``requirements.txt``, each one\n   directly above the requirement it applies to. (The hashes are of the\n   original, compressed tarballs from PyPI.)\n5. In the future, always use ``peep install`` to install your requirements. You\n   are now cryptographically safe!\n\n.. warning::\n\n    Be careful not to nullify all your work when you install your actual\n    project. If you use ``python setup.py install``, setuptools will happily go\n    out and download, unchecked, any requirements you missed in\n    ``requirements.txt`` (and it's easy to miss some as your project evolves).\n    One way to be safe is to pack up your project and then install that using\n    pip and ``--no-deps``::\n\n        python setup.py sdist\n        pip install --no-deps dist/yourproject-1.0.tar.gz\n\n\nThe Fearsome Warning\n====================\n\nIf, during installation, a hash doesn't match, Peep will say something like\nthis::\n\n    THE FOLLOWING PACKAGES DIDN'T MATCH THE HASHES SPECIFIED IN THE\n    REQUIREMENTS FILE. If you have updated the package versions, update the\n    hashes. If not, freak out, because someone has tampered with the packages.\n\n        requests: expected FWvz7Ce6nsfgz4--AoCHGAmdIY3kA-tkpxTXO6GimrE\n                       got YhddA1kUpMLVODNbhIgHfQn88vioPHLwayTyqwOJEgY\n\nIt will then exit with a status of 1. Freak out appropriately.\n\n\nOther Features\n==============\n\n* Peep implicitly turns on pip's ``--no-deps`` option so unverified\n  dependencies of your requirements can't sneak through.\n* All non-install commands just fall through to pip, so you can use Peep\n  all the time if you want. This comes in handy for existing scripts that have\n  a big ``$PIP=/path/to/pip`` at the top.\n* Peep-compatible requirements files remain entirely usable with ``pip``,\n  because the hashes are just comments, after all.\n* Have a manually downloaded package you've vetted? Run ``peep hash`` on its\n  tarball (the original, from PyPI--be sure to keep it around) to get its hash\n  line::\n\n    % peep hash nose-1.3.0.tar.gz\n    # sha256: TmPMMyXedc-Y_61AvnL6aXU96CRpUXMXj3TANP5PUmA\n* If a package is already present--which might be the case if you're installing\n  into a non-empty virtualenv--Peep doesn't bother downloading or building it\n  again. It assumes you installed it with Peep in a previous invocation and\n  thus trusts it. The only exception to this is for URL-specified requirements where the\n  URL contains a SHA-like filename (eg https://github.com/foo/bar/archive/<SHA>.zip),\n  since the package version number is typically not incremented for every commit, so\n  Peep cannot be sure the contents have not changed. \n  Note: Re-using a virtualenv during deployment can really speed things up, but you will\n  need to manually remove dependencies that are no longer in the requirements file.\n* ``peep port`` converts a peep-savvy requirements file to one compatible with\n  `pip 8's new hashing functionality\n  <https://pip.pypa.io/en/latest/reference/pip_install/#hash-checking-mode>`_::\n\n    % peep port requirements.txt\n    certifi==2015.04.28 \\\n        --hash=sha256:268fa00c27de756d71663dd61f73a4a8d8727569bb1b474b2ce6020553826872 \\\n        --hash=sha256:99785e6cf715cdcde59dee05a676e99f04835a71e7ced201ca317401c322ba96\n    click==4.0 --hash=sha256:9ab1d313f99b209f8f71a629f36833030c8d7c72282cf7756834baf567dca662\n\n  Note that comments and URLs don't make it through, but the hard part\u2014hash\n  format conversion\u2014is taken care of for you.\n\n\nEmbedding\n=========\n\nPeep was designed for unsupervised continuous deployment scenarios. In such\nscenarios, manual ahead-of-time preparation on the deployment machine is a\nliability: one more thing to go wrong. To relieve you of having to install (and\nupgrade) Peep by hand on your server or build box, we've made Peep\nembeddable. You can copy the ``peep.py`` file directly into your project's\nsource tree and call it from there in your deployment script. This also gives\nyou an obvious starting point for your chain of trust: however you trust your\nsource code is how you trust your copy of Peep, and Peep verifies\neverything else via hashes. (Equivalent would be if your OS provided Peep as a\npackage--presumably you trust your OS packages already--but this is not yet\ncommon.)\n\n\nSecurity and Insecurity\n=======================\n\nHere's what you get for free with Peep--and what you don't.\n\n**You get repeatability.** If you ``peep install`` package ``Foo==1.2.3``,\nevery subsequent install of ``Foo==1.2.3`` will be the same as the original\n(or Peep will complain).\n\n**Peep does not magically vet your packages.** Peep is not a substitute for\ncombing through your packages for malicious code or comparing them with\nknown-good versions. If you don't vet them, they are not vetted.\n\n**Peep does not make authors or indices trustworthy.** All Peep does is\nguarantee that subsequent downloads of ``Foo==1.2.3`` are the same as the\nfirst one. It doesn't guarantee the author of that package is trustworthy. It\ndoesn't guarantee that the author of that package is the one who released that\npackage. It doesn't guarantee that the package index is trustworthy.\n\n\nTroubleshooting\n===============\n\nMultiple Hashes: Architecture-Specific Packages and Old Versions of PyPI\n------------------------------------------------------------------------\n\nAre you suddenly getting the Fearsome Warning? Maybe you're really in trouble,\nbut maybe something more innocuous is happening.\n\nIf your packages install from wheels or other potentially architecture-specific\nsources, their hashes will obviously differ across platforms. If you deploy on\nmore than one, you'll need more than one hash.\n\nAlso, some packages offer downloads in multiple formats: for example, zips and\ntarballs, or zips and wheels. Which version gets downloaded can vary based on\nyour version of pip, meaning some packages may effectively have more than one\nvalid hash.\n\nTo support these scenarios, you can stack up multiple known-good hashes above a\nrequirement, as long as they are within a contiguous block of commented lines::\n\n    # Tarball:\n    # sha256: lvpN706AIAvoJ8P1EUfdez-ohzuSB-MyXUe6Rb8ppcE\n    #\n    # And the zip file:\n    # sha256: 6QTt-5DahBKcBiUs06BfkLTuvBu1uF7pblb_bPaUONU\n    mock==0.8.0\n\nIf you don't want to wait until you're bitten by this surprise, use the ``peep\nhash`` command to find hashes of each equivalent archive for a package. I like\nto vet one of them (say, the tarball), then download the others and use a file\ncomparison tool to verify that they have identical contents. Then I run ``peep\nhash`` over both original archives, like so, and add the result to my\n``requirements.txt``::\n\n    % peep hash mock-0.8.0.tar.gz mock-0.8.0.zip\n    # sha256: lvpN706AIAvoJ8P1EUfdez-ohzuSB-MyXUe6Rb8ppcE\n    # sha256: 6QTt-5DahBKcBiUs06BfkLTuvBu1uF7pblb_bPaUONU\n\nUpgrading Wheels with Old Versions of pip\n-----------------------------------------\n\nIf you're reusing a virtualenv and using Peep with pip <6.0, then you should\navoid using wheels. Otherwise, the old version of a package will not be entirely\nremoved before the new one is installed, due to\nhttps://github.com/pypa/pip/issues/1825.\n\nIf you're using pip 1.4, don't pass the ``--use-wheel`` argument.\n\nIf you're using pip 1.5, pass the ``--no-use-wheel`` argument.\n\n\nVersion History\n===============\n\n3.1.2\n  * Fix compatibility with pip 8.1.2. (abbeyj)\n\n3.1.1\n  * The \"peep had a problem\" traceback is no longer output for several cases\n    of pip installation errors that were not peep's fault: for instance, the\n    specified package version or requirements file not existing.\n  * ``peep port`` now emits URLs for URL-based requirements, if you're using\n    pip 6.1.0 or greater. (jotes)\n\n3.1\n  * Print the name each new requirements file we encounter during ``peep\n    port``. This helps untangle the mess if your files use includes. (pmac)\n  * Always put hashes on their own lines, even if there's only one. (pmac)\n\n3.0\n  * Add support for pip 8.x.\n  * Drop support for the ``--allow-external``, ``--allow-unverified`` and\n    ``--allow-all-external`` arguments (for compatibility with pip 8).\n  * Drop support for Python 3.1/3.2.\n\n2.5\n  * Support pip 7.x, through the currently latest 7.1.2, working around its\n    buggy line counting. (kouk)\n  * Add ``peep port`` command to facilitate the transition to `pip 8's hashing\n    <https://pip.pypa.io/en/latest/reference/pip_install/#hash-checking-mode>`_.\n  * Fix bug in which the right way to call ``parse_requirements()`` would not\n    be autodetected.\n\n2.4.1\n  * Tolerate pip.__version__ being missing, which can apparently happen in\n    arcane situations during error handling, obscuring informative tracebacks.\n  * Fix flake8 warnings again, and add flake8 to Travis runs.\n\n2.4\n  * Add support for flags in the requirements file, pip-style, such as\n    specifying alternative indices with ``-i``.\n  * Remove a duplicate ``#egg=`` segment from an error message.\n\n2.3\n  * Copy the operative portion of the MIT license into peep.py so embedding it\n    doesn't break the license.\n  * Fix flake8 linter warnings.\n  * Make peep compatible with pip v6.1.0+.\n  * Add tests against pip 6.0.8, 6.1.0, and 6.1.1 to the tox config.\n  * Run full set of tox tests on Travis.\n\n2.2\n  * Add progress indication while downloading. Used with pip 6.0 and above, we\n    show a nice progress bar. Before that, we just mention the packages as we\n    download them.\n  * Remove extra skipped lines from the output.\n  * Add tests against pip 6.0.7 to the tox config.\n\n2.1.2\n  * Get rid of repetition of explanatory messages at the end of a run when one\n    applies to multiple packages.\n\n2.1.1\n  * Fix bug in which peep would not upgrade a package expressed in terms of a\n    GitHub-dwelling zip file if its version had not changed.\n  * Add tests against pip 6.0.4, 6.0.5, and 6.0.6 to the tox config.\n\n2.1\n  * Support pip 6.x.\n  * Make error reporting friendly, emitting a bug reporting URL and\n    environment info along with the traceback.\n\n2.0\n  * Fix major security hole in which a package's setup.py would be executed\n    after download, regardless of whether the package's archive matched a hash.\n    Specifically, stop relying on pip for downloading packages, as it likes to\n    run setup.py to extract metadata. Implement our own downloading using\n    what's available everywhere: urllib2. As a result, HTTP proxies,\n    basic auth, and ``--download-cache`` are unsupported at the moment.\n  * Refactor significantly for comprehensibility.\n  * Drastically improve test coverage.\n  * Note that HTTPS certs are no longer checked. This shouldn't matter, given\n    our hash checks.\n\n1.4\n  * Allow partial-line comments.\n  * Add the beginnings of a test suite.\n  * Treat package names in requirements files as case-insensitive, like pip.\n\n1.3\n  * Pass through most args to the invocation of ``pip install`` that actually\n    installs the downloaded archive. This means you can use things like\n    ``--install-options`` fruitfully.\n  * Add Python 3.4 support by correcting an import.\n  * Install a second peep script named after the active Python version, e.g.\n    peep-2.7. This is a convenience for those using multiple versions of\n    Python and not using virtualenvs.\n\n1.2\n  * Support GitHub-style tarballs (that is, ones whose filenames don't contain\n    the distro name or version and whose version numbers aren't reliable) in\n    requirements files. (Will Kahn-Greene)\n  * Warn when a URL-based requirement lacks ``#egg=``. (Chris Adams)\n\n1.1\n  * Support Python 3. (Keryn Knight)\n\n1.0.2\n  * Add support for .tar.bz2 archives. (Paul McLanahan)\n\n1.0.1\n  * Fix error (which failed safe) installing packages whose distro names\n    contain underscores. (Chris Ladd)\n\n1.0\n  * Add wheel support. Peep will now work fine when pip decides to download a\n    wheel file. (Paul McLanahan)\n\n0.9.1\n  * Don't crash when trying to report a missing hash on a package that's\n    already installed.\n\n0.9\n  * Put the operative parts of peep into a single module rather than a package,\n    and make it directly executable. (Brian Warner)\n\n0.8\n  * Support installing into non-empty virtualenvs, for speed. We do this by\n    trusting any already-installed package which satisfies a requirement. This\n    means you no longer have to rebuild ``lxml``, for instance, each time you\n    deploy.\n  * Wrap text output to 80 columns for nicer word wrap.\n\n0.7\n  Make some practical tweaks for projects which bootstrap their trust chains by\n  checking a tarball of peep into their source trees.\n\n  * Start supporting versions of pip back to 0.6.2 (released in January 2010).\n    This way, you can deploy trustworthily on old versions of RHEL just by\n    checking a tarball of peep into your source tree and pip-installing it; you\n    don't have to check in pip itself or go to the bother of unpacking the peep\n    tarball and running ``python setup.py install`` from your deploy script.\n  * Remove the explicit dependency on pip. This is so a blithe call to\n    ``pip install peep.tar.gz`` without ``--no-deps`` doesn't go out and pull\n    an untrusted package from PyPI. Instead, we scream at runtime if pip is\n    absent or too old. Fail safe.\n\n0.6\n  * Add ``peep hash`` subcommand.\n  * Require pip>=1.2, as lower versions have a bug that causes a crash on\n    ``peep install``.\n\n0.5\n  * Allow multiple acceptable hashes for a package. This works around PyPI's\n    non-stable handling of packages like mock, which provide equivalent\n    zips and tarballs:\n    https://bitbucket.org/pypa/pypi/issue/64/order-of-archives-on-index-page-is-not.\n\n0.4\n  * Rework how peep downloads files and determines versions so we can tolerate\n    PEP-386-noncompliant package version numbers. This amounted to a minor\n    rewrite.\n  * Remove indentation from hash output so you don't have to dedent it after\n    pasting it into ``requirements.txt``.\n\n0.3\n  * Support Windows and other non-Unix OSes.\n  * The hash output now includes the actual version numbers of packages, so you\n    can just paste it straight into your ``requirements.txt``.\n\n0.2.1\n  * Add a shebang line so you can actually run ``peep`` after doing ``pip\n    install peep``. Sorry, folks, I was doing ``setup.py develop`` on my own\n    box.\n\n0.2\n  * Fix repeated-logging bug.\n  * Fix spurious error message about not having any requirements files.\n  * Pass pip's exit code through to the outside for calls to non-``install``\n    subcommands.\n  * Improve spacing in the final output.\n\n0.1\n  * Proof of concept. Does all the crypto stuff. Should be secure. Some rough\n    edges in the UI.\n"
 },
 {
  "repo": "pvasa/EasyCrypt",
  "language": "Kotlin",
  "readme_contents": "[![CircleCI](https://img.shields.io/circleci/project/github/pvasa/EasyCrypt.svg)](https://circleci.com/gh/pvasa/EasyCrypt)\n[![Bintray](https://img.shields.io/github/release/pvasa/easycrypt.svg)](https://github.com/pvasa/EasyCrypt/releases)\n[![License](https://img.shields.io/github/license/pvasa/easycrypt.svg)](LICENSE)\n[![GitHub issues](https://img.shields.io/github/issues/pvasa/easycrypt.svg)](https://github.com/pvasa/EasyCrypt/issues)\n\n# EasyCrypt\nSecure and efficient cryptography library for Android. (Auto fix SecureRandom bugs in API 18 and below.)\n\n***Note:** EasyCrypt uses only secure implementations and all the known Crypto bugs are already dealt with properly. [More information here.](https://github.com/pvasa/EasyCrypt/issues/6)*\n\n## Features\n* AES-256 encryption algorithm\n* CBC/CTR mode of operations\n* Block padding with PKCS7 (only with CBC)\n* Computationally secure random salt (of cipher block size)\n* Password stretching with PBKDF2\n* Random IV generated on each encryption (16 bytes)\n* Supports MD5, SHA1, and SHA2 hash functions\n* Generate secure keys with SecureRandom or random.org\n* Asymmetric encryption with RSA\n* Auto handle large data by using hybrid asymmetric encryption\n* Asymmetric RSA signing and verification\n* Supported RSA key sizes are 2048 bits and 4096 bits\n* Password analysis for strength, crack times, weakness, etc using [nulab's zxcvbn4j library](https://github.com/nulab/zxcvbn4j)\n\n## Sample app\nDownload the sample app from [play store](https://play.google.com/store/apps/details?id=com.pvryan.easycryptsample).\n\n## Install\nAdd in your app's build.gradle\n```gradle\ndependencies {\n    ..\n    implementation \"com.pvryan.easycrypt:easycrypt:1.3.3\"\n}\n```\n\n## Usage\n```kotlin\nval eCryptSymmetric = ECSymmetric()\nval eCryptAsymmetric = ECAsymmetric()\nval eCryptHash = ECHash()\nval eCryptPass = ECPasswords()\n```\n\n### Symmetric key encryption\n#### Encrypt data\n```kotlin\neCryptSymmetric.encrypt (input, password,\n    object : ECResultListener {\n\n        // Optional\n        override fun onProgress(newBytes: Int, bytesProcessed: Long, totalBytes: Long) {\n\n        }\n\n        override fun <T> onSuccess(result: T) {\n\n        }\n\n        override fun onFailure(message: String, e: Exception) {\n\n        }\n    },\n    outputFile // Optional\n)\n```\n\n#### Decrypt data\n```kotlin\neCryptSymmetric.decrypt(input, password,\n        object : ECResultListener {\n\n            // Optional\n            override fun onProgress(newBytes: Int, bytesProcessed: Long, totalBytes: Long) {\n\n            }\n\n            override fun <T> onSuccess(result: T) {\n\n            }\n\n            override fun onFailure(message: String, e: Exception) {\n\n            }\n        },\n        outputFile // Optional\n)\n```\n\n### Asymmetric key encryption\n#### Encrypt data\n```kotlin\neCryptAsymmetric.generateKeyPair(object : ECRSAKeyPairListener {\n\n     override fun onSuccess(keyPair: KeyPair) {\n         privateKey = keyPair.private as RSAPrivateKey // Save private key\n         eCryptAsymmetric.encrypt(input, keyPair.public as RSAPublicKey,\n                 object : ECResultListener {\n\n                     // Optional\n                     override fun onProgress(newBytes: Int, bytesProcessed: Long, totalBytes: Long) {\n\n                     }\n\n                     override fun <T> onSuccess(result: T) {\n\n                     }\n\n                     override fun onFailure(message: String, e: Exception) {\n\n                     }\n                 },\n                 outputFile // Optional\n         )\n     }\n\n     override fun onFailure(message: String, e: Exception) {\n         e.printStackTrace()\n     }\n\n }, keySize = eCryptAsymmetric.KeySizes._4096)\n```\n\n#### Decrypt data\n```kotlin\neCryptAsymmetric.decrypt(input, privateKey,\n        object : ECResultListener {\n\n            // Optional\n            override fun onProgress(newBytes: Int, bytesProcessed: Long, totalBytes: Long) {\n\n            }\n\n            override fun <T> onSuccess(result: T) {\n\n            }\n\n            override fun onFailure(message: String, e: Exception) {\n\n            }\n        },\n        outputFile // Optional\n)\n```\n\n#### Sign data\n```kotlin\neCryptKeys.genRSAKeyPair(object : ECRSAKeyPairListener {\n\n    override fun onGenerated(keyPair: KeyPair) {\n\n        publicKey = keyPair.public as RSAPublicKey\n\n        eCryptAsymmetric.sign(input,\n                keyPair.private as RSAPrivateKey,\n                object : ECResultListener {\n\n                    // Optional\n                    override fun onProgress(newBytes: Int, bytesProcessed: Long, totalBytes: Long) {\n\n                    }\n\n                    override fun <T> onSuccess(result: T) {\n\n                    }\n\n                    override fun onFailure(message: String, e: Exception) {\n\n                    }\n                },\n                signatureOutputFile)\n    }\n\n    override fun onFailure(message: String, e: Exception) {\n\n    }\n})\n```\n\n#### Verify data\n```kotlin\neCryptAsymmetric.verify(input, publicKey, signatureFile,\n        object : ECVerifiedListener {\n            override fun onSuccess(verified: Boolean) {\n\n            }\n\n            override fun onFailure(message: String, e: Exception) {\n\n            }\n        }\n)\n```\n\n#### Hash data\n```kotlin\neCryptHash.calculate(input, hashAlgorithm, // from ECHashAlgorithms\n        object : ECResultListener {\n\n            // Optional\n            override fun onProgress(newBytes: Int, bytesProcessed: Long, totalBytes: Long) {\n\n            }\n\n            override fun <T> onSuccess(result: T) {\n\n            }\n\n            override fun onFailure(message: String, e: Exception) {\n\n            }\n        },\n        outputFile // Optional\n)\n```\n\n#### Analyze password\n```kotlin\nval analysis: ECPasswordAnalysis = ECPasswordAnalyzer.analyze(\"thisismypassword\")\n```\n\n--------------------------------------------------------------\n| Input                 | Output                             |\n|-----------------------|------------------------------------|\n| File                  | outputFile                         |\n| FileInputStream       | outputFile                         |\n| ByteArray             | String or outputFile (if provided) |\n| ByteArrayInputStream  | String or outputFile (if provided) |\n| String                | String or outputFile (if provided) |\n| CharSequence          | String or outputFile (if provided) |\n| Anything else         | InvalidParameterException          |\n\n#### Generate key with SecureRandom (pseudo-random)\n```kotlin\nval password = eCryptPass.genSecureRandomPassword(length, charArrayOf(/*symbols to be used in password*/))\n```\n\n#### Generate key with Random.org (true random)\nFor sample to work enter your API key in FragmentPasswords\n```kotlin\neCryptPass.genRandomOrgPassword(\n        length,\n        \"random-org-api-key\", //TODO: Replace with your random.org api key\n        new ECPasswordListener() {\n\n            @Override\n            public void onFailure(@NonNull String message, @NonNull Exception e) {\n\n            }\n\n            @Override\n            public void onSuccess(@NonNull String password) {\n\n            }\n        });\n```\n\n## License\n```\nCopyright 2018 Priyank Vasa\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
 },
 {
  "repo": "Oryx-Embedded/CycloneCRYPTO",
  "language": "C",
  "readme_contents": "# CycloneCrypto\nCryptographic Library\n"
 },
 {
  "repo": "aerogear-attic/aerogear-ios-crypto",
  "language": "Objective-C",
  "readme_contents": "# aerogear-ios-crypto\n\n![Maintenance](https://img.shields.io/maintenance/yes/2017.svg)\n[![circle-ci](https://img.shields.io/circleci/project/github/aerogear/aerogear-ios-crypto/master.svg)](https://circleci.com/gh/aerogear/aerogear-ios-crypto)\n[![License](https://img.shields.io/badge/-Apache%202.0-blue.svg)](https://opensource.org/s/Apache-2.0)\n[![GitHub release](https://img.shields.io/github/release/aerogear/aerogear-ios-crypto.svg)](https://github.com/aerogear/aerogear-ios-crypto/releases)\n[![CocoaPods](https://img.shields.io/cocoapods/v/AeroGearCrypto.svg)](https://cocoapods.org/pods/AeroGearCrypto)\n[![Platform](https://img.shields.io/cocoapods/p/AeroGearCrypto.svg)](https://cocoapods.org/pods/AeroGearCrypto)\n\nCryptographic services library\n\n|                 | Project Info                                 |\n| --------------- | -------------------------------------------- |\n| License:        | Apache License, Version 2.0                  |\n| Build:          | CocoaPods                                    |\n| Languague:      | Objective-C                                  |\n| Documentation:  | http://aerogear.org/ios/                     |\n| Issue tracker:  | https://issues.jboss.org/browse/AGIOS        |\n| Mailing lists:  | [aerogear-users](http://aerogear-users.1116366.n5.nabble.com/) ([subscribe](https://lists.jboss.org/mailman/listinfo/aerogear-users))                            |\n|                 | [aerogear-dev](http://aerogear-dev.1069024.n5.nabble.com/) ([subscribe](https://lists.jboss.org/mailman/listinfo/aerogear-dev))     \n\n## Table of Content\n\n* [Features](#features)\n* [Installation](#installation)\n  * [CocoaPods](#cocoapods)\n* [Usage](#usage)\n  * [Password based key derivation](#password-based-key-derivation)\n  * [Symmetric encryption](#symmetric-encryption)\n  * [Asymmetric encryption](#asymmetric-encryption)\n  * [Hashing functions](#hashing-functions)\n  * [Digital Signatures](#digital-signatures)\n  * [Generation of Cryptographically secure Random Numbers](#generation-of-cryptographically-secure-random-numbers)\n* [Documentation](#documentation)\n* [Demo apps](#demo-apps)\n* [Development](#development)\n* [Questions?](#questions)\n* [Found a bug?](#found-a-bug)\n\n\n## Features\n\n* A [Symmetric encryption](http://nacl.cr.yp.to/secretbox.html) interface\n* An [Asymmetric encryption interface](http://nacl.cr.yp.to/box.html)\n* Password based key generation using [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2)\n* Generation of Cryptographically secure [random numbers](http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator).\n* [Digital signatures](http://ed25519.cr.yp.to) support interface \n* [Hashing functions](http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf) interface\n\n## Installation\n\n### CocoaPods\n\nIn your `Podfile` add:\n\n```bash\npod 'AeroGearCrypto'\n```\n\nand then:\n\n```bash\npod install\n```\n\nto install your dependencies\n\n## Usage\n\n### Password based key derivation\n\n```ObjC\nAGPBKDF2 *pbkdf2 = [[AGPBKDF2 alloc] init];\nNSData *rawKey = [pbkdf2 deriveKey:@\"passphrase\"];\n```\n\n### Symmetric encryption\n\n```ObjC\n//Generate the key\nAGPBKDF2 *pbkdf2 = [[AGPBKDF2 alloc] init];\nNSData *privateKey = [pbkdf2 deriveKey:@\"passphrase\"];\n\n//Initializes the secret box\nAGSecretBox *secretBox = [[AGSecretBox alloc] initWithKey:privateKey];\n\n//Encryption\nNSData *nonce = [AGRandomGenerator randomBytes:32];\nNSData *dataToEncrypt = [@\"My bonnie lies over the ocean\" dataUsingEncoding:NSUTF8StringEncoding];\n\nNSData *cipherData = [secretBox encrypt:dataToEncrypt nonce:nonce];\n\n//Decryption\nAGSecretBox *pandora = [[AGSecretBox alloc] initWithKey:privateKey];\nNSData *message = [secretBox decrypt:cipherData nonce:nonce];\n```\n\n### Asymmetric encryption\n\n```ObjC\n//Create a new key pair\nAGKeyPair *keyPairBob = [[AGKeyPair alloc] init];\nAGKeyPair *keyPairAlice = [[AGKeyPair alloc] init];\n\n//Initializes the crypto box\nAGCryptoBox *cryptoBox = [[AGCryptoBox alloc] initWithKey:keyPairAlice.publicKey privateKey:keyPairBob.privateKey];\n\nNSData *nonce = [AGRandomGenerator randomBytes:32];\nNSData *dataToEncrypt = [@\"My bonnie lies over the ocean\" dataUsingEncoding:NSUTF8StringEncoding];\n\nNSData *cipherData = [cryptoBox encrypt:dataToEncrypt nonce:nonce];\n\n//Create a new box to test end to end asymmetric encryption\nAGCryptoBox *pandora = [[AGCryptoBox alloc] initWithKey:keyPairBob.publicKey privateKey:keyPairAlice.privateKey];\n\nNSData *message = [pandora decrypt:cipherData nonce:nonce];\n```\n\n### Hashing functions\n\n```ObjC\n// create an SHA256 hash\nAGHash *agHash = [[AGHash alloc] init:CC_SHA256_DIGEST_LENGTH];\nNSData *rawPassword = [agHash digest:@\"My bonnie lies over the ocean\"];\n\n// create an SHA512 hash\nAGHash *agHash = [[AGHash alloc] init:CC_SHA512_DIGEST_LENGTH];\nNSData *rawPassword = [agHash digest:@\"My bonnie lies over the ocean\"];\n```\n\n### Digital Signatures\n\n```ObjC\nNSData *message = [@\"My bonnie lies over the ocean\" dataUsingEncoding:NSUTF8StringEncoding];\n    \nAGSigningKey *signingKey = [[AGSigningKey alloc] init];\nAGVerifyKey *verifyKey = [[AGVerifyKey alloc] initWithKey:signingKey.publicKey];\n// sign the message\nNSData *signedMessage = [signingKey sign:message];\n\n// should detect corrupted signature\nNSMutableData *corruptedSignature = [NSMutableData dataWithLength:64];\nBOOL isValid = [verifyKey verify:message signature:signedMessage];\n   \n// isValid should be YES\nBOOL isValid = [verifyKey verify:message signature:corruptedSignature];\n// isValid should be NO\n```\n\n### Generation of Cryptographically secure Random Numbers\n```ObjC\nNSData *random = [AGRandomGenerator randomBytes:<length>];\n```\n\t\n## Documentation\n\nFor more details about that please consult [our documentation](http://aerogear.org/ios/).\n\n## Demo apps\n\nTake a look in our demo apps:\n\n* [CryptoPassword](https://github.com/aerogear/aerogear-ios-cookbook/tree/master/CryptoPassword)\n\n## Development\n\nIf you would like to help develop AeroGear you can join our [developer's mailing list](https://lists.jboss.org/mailman/listinfo/aerogear-dev), join #aerogear on Freenode, or shout at us on Twitter @aerogears.\n\nAlso takes some time and skim the [contributor guide](http://aerogear.org/docs/guides/Contributing/)\n\n## Questions?\n\nJoin our [user mailing list](https://lists.jboss.org/mailman/listinfo/aerogear-users) for any questions or help! We really hope you enjoy app development with AeroGear!\n\n## Found a bug?\n\nIf you found a bug please create a ticket for us on [Jira](https://issues.jboss.org/browse/AGIOS) with some steps to reproduce it.\n"
 },
 {
  "repo": "auth0/magic",
  "language": "JavaScript",
  "readme_contents": "# magic\n[![Build Status](https://www.travis-ci.org/auth0/magic.svg?branch=master)](https://travis-ci.org/auth0/magic)\n\n`magic` is a lightweight wrapper around the `crypto` interface to OpenSSL and the `libsodium` library which provides a standard cryptography API for internal use, consistent with best current practices recommended by the product security team at Auth0. Named not for what it is intended to do, but for [what it is intended to prevent](https://en.wikipedia.org/wiki/Magic_(cryptography)).\n\nAll public functions support both callbacks and promises (and therefore async/await), allowing easy integration into any preexisting codebase. All constructions requiring secret keys will generate them as necessary if they are not supplied, and return them for future use.\n\nSupported Node versions: >= 12\n\n## Why use magic\nMost libraries offering a cryptography toolkit allow for a variety of configuration. Usually the reasoning behind this is to empower the developer to configure the cryptography functions as they like. At the same time however this requires developers to be knowledgable of what the different parameters are for and how they affect the security of the function output. Bad choices in parameters can lead to insecure cryptography with disastrous results.\n\nmagic is a library that supports as little configuration as possible allowing developers to use a cryptography library without needing expert knowledge. Secure configuration is embedded in the library following best current practices recommended by the Product Security team at Auth0. \n\n## Install\n```\nnpm install auth0-magic\n```\n\n## Usage\n\nmagic offers a variety of functions for the following cases:\n* [Encryption](/docs/encryption)\n  * [Symmetric Authenticated Encryption](/docs/encryption.md#magicencryptaead--magicdecryptaead)\n  * [Asymmetric Authenticated Encryption](/docs/encryption.md#magicencryptpki--magicdecryptpki)\n  * [Streams Symmetric Authenticated Encryption](/docs/encryption.md#magicencryptstream--magicdecryptstream)\n* [Authentication](/docs/authentication)\n  * [Signing using PKI](/docs/authentication.md#magicauthsign--magicverifysign)\n  * [HMAC](https://github.com/auth0/magic/blob/master/docs/authentication.md#magicauthmac--magicverifymac)\n* [Password hashing](/docs/passwordHashing)\n  * [argon2](/docs/passwordHashing.md#magicpasswordhash--magicverifypassword)\n  * [bcrypt](/docs/passwordHashing.md#magicaltpasswordbcrypt--magicaltverifybcrypt)\n\nmagic also offers a variety of [utility functions](/docs/utils): \n * [RSA key pair generation](/docs/utils.md#magicutilrsakeypairgen)\n * [Time safe comparison](/docs/utils.md#magicutiltimingsafecompare)\n * [UID generation](/docs/utils.md#magicutiluid)\n * [Random bytes generation](/docs/utils.md#magicutilrand)\n * [Hashing](/docs/utils.md#magicutilhash)\n\nMagic implements a core and and alt API. The core api implements the recommended algorithms for each cryptographic operation. When in doubt, please use them. The alt api implements alternative algorithms for each cryptographic operation. They should only be used over the core api when required by an external specification or interoperability concerns.\n\nDetailed documentation on the supported API can be found in the [/docs](/docs) folder \n\n\n### Recommended input type\nIt is recommended that `magic` is always used with [node.js buffers](https://nodejs.org/api/buffer.html) for all (non-boolean) inputs, with the exception of passwords. \n\nDue to the variety of tasks to which it may be put, the library attempts to be as unopinionated about encoding as it is opinionated about algorithms. There is minimal decoding functionality, which will attempt to break down any plaintext input as `utf-8` and any cryptographic input (keys, ciphertexts, macs, signatures, etc.) as `hex`. If as a consumer of this library you decide to depend on this builtin decoder it is recommended that you extensively test it to make sure your inputs are being parsed appropriately. When in doubt, it is always safer to parse them yourself and pass in binary data.\n"
 },
 {
  "repo": "arkworks-rs/snark",
  "language": "Rust",
  "readme_contents": "<h1 align=\"center\">SNARK and Relation Traits</h1>\n\n<p align=\"center\">\n    <img src=\"https://github.com/arkworks-rs/algebra/workflows/CI/badge.svg?branch=master\">\n    <a href=\"https://github.com/arkworks-rs/algebra/blob/master/LICENSE-APACHE\"><img src=\"https://img.shields.io/badge/license-APACHE-blue.svg\"></a>\n    <a href=\"https://github.com/arkworks-rs/algebra/blob/master/LICENSE-MIT\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n    <a href=\"https://deps.rs/repo/github/arkworks-rs/algebra\"><img src=\"https://deps.rs/repo/github/arkworks-rs/algebra/status.svg\"></a>\n</p>\n\nThe arkworks ecosystem consists of Rust libraries for designing and working with __zero knowledge succinct non-interactive arguments (zkSNARKs)__. This repository contains efficient libraries that describe interfaces for zkSNARKs, as well as interfaces for programming them.\n\nThis library is released under the MIT License and the Apache v2 License (see [License](#license)).\n\n**WARNING:** This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.\n\n## Directory structure\n\nThis repository contains two Rust crates:\n\n* [`ark-snark`](snark): Provides generic traits for zkSNARKs\n* [`ark-relations`](relations): Provides generic traits for NP relations used in programming zkSNARKs, such as R1CS\n\n## Overview\n\nThis repository provides the core infrastucture for using the succinct argument systems that arkworks provides. Users who want to produce arguments about various problems of interest will first reduce those problems to an NP relation, various examples of which are defined in the `ark-relations` crate. Then a SNARK system defined over that relation is used to produce a succinct argument. The `ark-snark` crate defines a `SNARK` trait that encapsulates the general functionality, as well as specific traits for various types of SNARK (those with transparent and universal setup, for instance). Different repositories within the arkworks ecosystem implement this trait for various specific SNARK constructions, such as [Groth16](https://github.com/arkworks-rs/groth16), [GM17](https://github.com/arkworks-rs/gm17), and [Marlin](https://github.com/arkworks-rs/marlin).\n\n## Build guide\n\nThe library compiles on the `stable` toolchain of the Rust compiler. To install the latest version of Rust, first install `rustup` by following the instructions [here](https://rustup.rs/), or via your platform's package manager. Once `rustup` is installed, install the Rust toolchain by invoking:\n```bash\nrustup install stable\n```\n\nAfter that, use `cargo`, the standard Rust build tool, to build the libraries:\n```bash\ngit clone https://github.com/arkworks-rs/snark.git\ncd snark\ncargo build --release\n```\n\n## Tests\nThis library comes with comprehensive unit and integration tests for each of the provided crates. Run the tests with:\n```bash\ncargo test --all\n```\n\n## License\n\nThe crates in this repo are licensed under either of the following licenses, at your discretion.\n\n * Apache License Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nUnless you explicitly state otherwise, any contribution submitted for inclusion in this library by you shall be dual licensed as above (as defined in the Apache v2 License), without any additional terms or conditions.\n\n[zexe]: https://ia.cr/2018/962\n\n## Acknowledgements\n\nThis work was supported by:\na Google Faculty Award;\nthe National Science Foundation;\nthe UC Berkeley Center for Long-Term Cybersecurity;\nand donations from the Ethereum Foundation, the Interchain Foundation, and Qtum.\n\nAn earlier version of this library was developed as part of the paper *\"[ZEXE: Enabling Decentralized Private Computation][zexe]\"*.\n"
 },
 {
  "repo": "tari-project/tari-crypto",
  "language": "Rust",
  "readme_contents": "# Tari Crypto\n\n![](https://github.com/tari-project/tari-crypto/workflows/Security%20audit/badge.svg)\n![](https://github.com/tari-project/tari-crypto/workflows/Clippy/badge.svg)\n[![Coverage Status](https://coveralls.io/repos/github/tari-project/tari-crypto/badge.svg?branch=main)](https://coveralls.io/github/tari-project/tari-crypto?branch=main)\n\nThis crate is part of the [Tari Cryptocurrency](https://tari.com) project.\n\nMajor features of this library include:\n\n- Pedersen commitments\n- Schnorr Signatures\n- Generic Public and Secret Keys\n- [Musig!](https://blockstream.com/2018/01/23/musig-key-aggregation-schnorr-signatures/) **NOT PRODUCTION READY**\n\nThe `tari_crypto` crate makes heavy use of the excellent [Dalek](https://github.com/dalek-cryptography/curve25519-dalek)\nlibraries. The default implementation for Tari ECC is the [Ristretto255 curve](https://ristretto.group).\n\n# Compiling to WebAssembly\n\nTo build the WebAssembly module, the `wasm` feature must be enabled:\n\n    $ wasm-pack build . -- --features \"wasm\"\n\nTo generate a module for use in node.js, use this command:\n\n    $ wasm-pack build --target nodejs -d tari_js . -- --features \"wasm\"\n\nTo run the wasm bindings unit tests, use this command:\n\n    $ wasm-pack test --node --features wasm\n\nNote: Node v10+ is needed for the WASM\n\n## Example (Node.js)\n\n```js\nconst keys = KeyRing.new();\n\n// Create new keypair\nkeys.new_key(\"Alice\");\nkeys.new_key(\"Bob\");\nconsole.log(`${keys.len()} keys in ring`); // 2\nconsole.log(\"kA = \", keys.private_key(\"Alice\"));\nconsole.log(\"PB = \", keys.public_key(\"Bob\"));\nkeys.free();\n```\n\n# Benchmarks\n\nTo run the benchmarks:\n\n    $ cargo bench\n\nThe benchmarks use Criterion and will produce nice graphs (if you have gnuplot installed)\n\nTo run the benchmarks with SIMD instructions:\n\n    $ cargo bench --features \"avx2\"\n\n# Building the C FFI module\n\nTo build the C bindings, you can run\n\n    make ffi\n\nTo build the release version (recommended):\n\n    make ffi-release\n\nTo run the small demo:\n\n    make demo\n    ./bin/demo\n"
 },
 {
  "repo": "unboundsecurity/blockchain-crypto-mpc",
  "language": "C",
  "readme_contents": "# IMPORTANT NOTE\n \n**As of September 1, 2021, this repository will be converted to read only and support will end.**\n \nTherefore, starting on September 1, 2021, the following changes will occur:\n1. Unbound will stop maintenance for this repo.\n1. Unbound will not release any future versions of this repo.\n1. Unbound will not provide any security updates or hotfixes (should an issue arise).\n1. Unbound will stop support for this repo.\n \nThis library was originally created to enable users to experiment with MPC functionality using a subset of the functionality provided in Unbound products.\n \nUsers are encouraged to explore the new Unbound CORE offerings found in the [Unbound Security website](https://www.unboundsecurity.com/).\n \n\n# 1. Introduction to *blockchain-crypto-mpc*\n\n**blockchain-crypto-mpc** is an open source library released by [Unbound\nSecurity](https://www.unboundsecurity.com) that provides the\ncryptographic foundation to resolve one of the hardest challenges\nassociated with crypto asset and blockchain applications: **The\nprotection of cryptographic signing keys and seed secrets**.\n\n\n\nUnbound leverages [secure multiparty computation\n(MPC)](https://www.unboundsecurity.com/blog/secure-multiparty-computation-mpc/)\nfor the protection and management of cryptographic keys and secrets, and\nprovides industry-grade MPC-based solutions for key management, key\nprotection and additional applications. The protocols were designed by\n[Prof. Yehuda Lindell](https://en.wikipedia.org/wiki/Yehuda_Lindell) and\nDr. Samuel Ranellucci, who also reviewed and approved the code and the\nimplementation.\n\nSee the [Unbound Cryptocurrency Wallet Library White Paper](./docs/Unbound_Cryptocurrency_Wallet_Library_White_Paper.md) for more detailed information about the protocols.\n\nThis readme includes an overview of this library, why it is important,\nwhat it allows you to achieve, sample use cases, and how to use the\nlibrary (high level description).\n\n\n# 2. Who Should Use it? \n\n**Blockchain Crypto MPC provides 100% of the cryptography needed for\nstrongly securing crypto asset and blockchain wallets -- while being as\nor more secure than dedicated cryptographic hardware -- for free**. If\nyou're developing a wallet or a platform for custody/exchanging of\ncrypto assets -- you're in the right place!\n\nLeveraging MPC for the protection of cryptographic keys and secrets,\n**blockchain-crypto-mpc** provides the security benefits of no single\npoint of compromise and shared responsibility (like Multi-Sig), but with\na single signature and without any dependency on the ledger. More\nspecifically, it provides three critical security properties:\n\n1.  Sensitive keys and secrets are split into two random shares, which\n    are stored on separate, segregated machines ('machine' stands for\n    any computing device). Each of these shares by itself reveals\n    nothing whatsoever about the key material.\n\n2.  All cryptographic operations performed throughout the key lifecycle\n    are performed without ever combining these 2 shares together. This\n    includes signing, derivation and even generation. **Bottom line --\n    there is no complete key material or secret in the memory, ever**.\n    **It is proven mathematically that obtaining the key material\n    requires access to both key shares,** **and therefore requires\n    compromising both machines.** A single machine, even if completely\n    compromised and controlled by an attacker, reveals nothing about the\n    key material -- simply because the key material **never** resides in\n    any single machine.\n\n3.  Key shares refresh: The key shares are continually modified without\n    modifying the key itself. It is computationally efficient and can be\n    performed very frequently -- thus forcing the attacker to compromise\n    both machines at virtually the same time in order to obtain key\n    material.\n\n![Key Shares](docs/images/os-key-shares.png)\n\n**blockchain-crypto-mpc** includes a secure MPC implementation of 100%\nof the functionality required to strongly secure crypto asset and\nblockchain wallets. It's pure software, open-source and free to use.\n\nIt is highly recommended for developers of wallets and blockchain\napplications that deal with key management.\n\n**We are delighted to make this contribution to the open source\ncommunity, with hopes that it will enable secure, convenient, and easy\nto use blockchain applications for all.**\n\n# 3. What's Included?\n\n\n**blockchain-crypto-mpc** includes a secure MPC implementation of the\nfollowing algorithms:\n\n-   2-party ECDSA secp256k1: generation and signing\n-   2-party EdDSA ed25519: generation and signing\n-   2-party BIP32 (based on the [BIP32 specification](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)): generation, hard\n    derivation, and normal derivation\n-   Key share refresh\n-   Zero-knowledge backup\n\nThe source code is written in C++ and the external API in C. Detailed\ndocumentation including a whitepaper and security proofs will be\navailable online soon.\n\nIt can be compiled on virtually any platform. The only dependency is\nOpenSSL, which is available on most platforms. Instructions on how to\nremove this dependency will be included in future documentation.\n\nThe compiled binary is a cryptographic library that has to be deployed\non two or more separate machines to provide strong security.\n\n# 4. What are the Typical Use Cases?\n\n\n**blockchain-crypto-mpc** can be used to provide security in any blockchain\napp. In this section we describe typical use cases that are relevant to\nmany applications.\n\n## 4.1 Endpoint/Server Use Case \n\n\nThis use case is common for wallet service providers. The user has a\nmobile wallet on their endpoint device, typically their mobile phone or\nlaptop. The wallet application communicates with a server application.\n\n### 4.1.1 Suggested setup:\n\nThe BIP32 seed and all signing keys are always split between the end\nuser's device (participant 1) and the service provider (participant 2).\nPerforming any cryptographic operation on the seed or private key\nrequires cooperation of both participants (and communication between\nthem).\n\n![Endpoint/Server Use Case](docs/images/use-case-endpoint-server.png)\n\n### 4.1.2 Use Case Properties\n\n-   Guaranteed non-repudiation; the application server cannot sign any\n    transaction without cooperation from the endpoint device.\n-   No single point of compromise: Compromising the seed or key material\n    requires the attacker to compromise both the server and the endpoint\n    simultaneously.\n-   No key or seed material ever appears in the clear throughout its\n    lifecycle, including while in use and during generation.\n-   Resilient to side-channel attacks.\n-   A model that empowers a crypto service provider to create an\n    excellent user experience by delivering a wallet service while\n    maintaining a very high security level and granting the users full\n    control of their crypto assets.\n\n## 4.2 Mobile/Laptop Use Case\n\n\nThis is a use case involving two end-user devices that typically belong\nto the same user. For example, a mobile phone and a laptop. Each device\nruns an app and both participants collaborate to create a secure\nblockchain wallet and sign transactions.\n\n### 4.2.1 Suggested Setup\n\nThe BIP32 seed and all signing keys are always split between the mobile\ndevice (participant 1) and the laptop (participant 2). Performing any\ncryptographic operation on the seed or private key requires cooperation\nof both participants (and communication between them).\n\n![Mobile/Laptop Use Case](docs/images/use-case-mobile-laptop.png)\n\n### 4.2.2 Use Case Properties\n\n-   Both devices must collaborate and approve any transaction. No single\n    device can approve a transaction.\n-   No single point of compromise: Compromising the seed or key material\n    requires the attacker to compromise both the laptop and the mobile\n    device simultaneously.\n-   No key or seed material ever appears in the clear throughout its\n    lifecycle, including while in use and during generation.\n-   Resilient to side-channel attacks.\n-   A model that empowers a wallet provider to create an excellent\n    user experience while maintaining a very high security level and\n    granting the users full control of their crypto assets.\n\n## 4.3 Backup\n\n\nBackup is one of the most challenging aspects of crypto asset key\nmanagement. This section briefly describes the backup functionality of\n**blockchain-crypto-mpc** and two potential usage scenarios.\n\n**blockchain-crypto-mpc** includes a unique backup mechanism that introduces\nzero-knowledge backup: an encrypted cold backup that allows public\nverifiability. This property is significant, as it allows both\nparticipants to verify the correctness of the backup at any point in\ntime without decrypting it. It therefore makes this verification secure\nand prevents a situation where a wrong backup was generated and stored.\n\n### 4.3.1 Backup Use Case 1: User-Managed\n\nThis is a common form of backup, with the role of backup management\nmostly on the end-user. An encrypted backup of the wallet can be stored\nin multiple locations for redundancy (for example, it can be stored by\nthe service provider as described in the Endpoint/Server use case). The\nprivate key for this backup should be in the user's sole possession,\npreferably in a cold backup. The backup recovery process should be used\nonly for disaster recovery.\n\n### 4.3.2 Backup Use Case 2: Managed Backup\n\nThe following scenario is an expansion of the Endpoint/Server use case\nthat includes a 3rd party trustee service. The trustee service is used\nonly when either the user's device and/or the service provider have lost\ntheir respective key shares.\n\n![Backup Use Case 2: Managed Backup](docs/images/use-case-managed-backup.png)\n\nThis model creates a user-transparent backup, effectively similar to a\n2-of-3 scenario: each quorum containing 2 of the 3 participants noted\nabove would suffice to perform a cryptographic operation. This is\nperformed by creating three different random share pairs upon wallet and\nseed generation. In the diagram, key share A is used by\nthe user's device and the Trustee Service, key share B is used by the user's device and the Wallet Service Provider, and key share C is used by the Wallet Service Provider and the Trustee Service.\nIt's important to highlight that each of these pairs is completely\nindependent, each is effectively a backup of the same seed.\n\n# 5. Benchmarking and Performance\n\nThis repository includes a two different tools for benchmarking the **blockchain-crypto-mpc** library. \n\n1. MPC Crypto Bench - a tool written C++. See [mpc_crypto_bench](https://github.com/unboundsecurity/blockchain-crypto-mpc/blob/master/bench/README.md) in the [bench](./bench) folder for more information.\n2. MPC Crypto Python script. See [mpc_crypto](https://github.com/unboundsecurity/blockchain-crypto-mpc/blob/master/python/README.md) in the [Python](./python) folder for more information.\n\nMPC Crypto Bench tests the raw protocols, with no networking involved, while the MPC Crypto Python script is uses a client and server with actual networking.\n \nUsing the Python script, each command was run for 20 iterations and resulted in the following performance numbers:\n\n| Algorithm | Command  | Time (seconds) |\n|-----------|----------|:--------------:|\n| ECDSA     | Generate | 0.945          |\n| ECDSA     | Sign     | 0.015          |\n| EdDSA     | Generate | 0.003          |\n| EdDSA     | Sign     | 0.003          |\n\nThe tests were run on a server with an Intel Xeon E5-2686 v4 (2.30 GHz) with 32 GB RAM.\n\n\n# 6. Technical Overview and Usage Guidelines\n\n\nUnbound's Blockchain Crypto MPC open source library provides functions\nthat enable you to create, sign, and refresh encryption keys, without\nthe whole key ever existing in any location.\n\nThis library can be used to create system with two peers for the\nmanagement of the keys. Each peer uses the library to create and process\nmessages that are sent between the peers. Note that the actual\ncommunication between peers is not included in this library.\n\n![blockchain-crypto-mpc system](docs/images/os-system.png)\n## 6.1 Definitions\n\n\nBlockchain Crypto MPC utilizes the following three structures:\n\n1.  **Key share** -- Encryption keys never exist as complete keys in any\n    phase of the process or in any location at any time. A key share is\n    a piece of a key, which can be used by Unbound's MPC technology to\n    sign transactions.\n2.  **Message** -- Data that is passed to the other peer. The message\n    contains information about the action in progress.\n3.  **Context** -- Since each action, such as signing with a key,\n    involves multiple messages between the two peers, the status of the\n    action is preserved in a context.\n\nThe **key share**, **message**, and **context** contain varying amounts\nof information depending on the type action, and therefore they are\nstructures.\n\n## 6.2 Actions\n\n\nThe library provides the following actions:\n\n-   2-party ECDSA secp256k1: generation and signing\n-   2-party EdDSA ed25519: generation and signing\n-   2-party BIP32 (based on the [BIP32 specification](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)): generation, hard\n    derivation, and normal derivation\n-   Key share refresh\n-   Zero-knowledge backup\n\nThe library also provides mechanisms to handle serialization,\ndeserialization, and memory management for the key share, message, and\ncontext structures.\n\n## 6.3 System Flow\n\n\nThe system flow is shown in the following figure:\n\n![Flow](docs/images/os-flow.png)\n\nThe first step is initialization. During this step you provide the\nlibrary with all the relevant information required to complete the\ndesired action. This step takes that information and creates a\n**context**. Each peer does its own initialization.\n\nThe context is then passed through a series of steps. Each of these\nsteps takes an **input message**, does some manipulation, and then\ncreates an **output message**. You then transfer this output message to\nthe other peer. The other peer receives the message and associates it\nwith a context. It then knows how to handle the incoming message based\non the context.\n\nWhen the peer is done with the last step it sets a finished flag. The\npeer can then do any necessary cleanup, such as freeing memory, or\ncopying an updated key share to storage.\n\n\n### 6.3.1 Peer Roles\n\nPeer roles are determined by which peer initiates key generation. This peer must be used for any subsequent key operations, such as signing, derivation, and backup. For example, if peer A generates a key and then peer B wants to initiate a signing process, it should make a request to the peer A to start the process. When complete, the peer A can send the result to peer B. Peer B can verify this result with the *verify* function.\n\n### 6.3.2 Detailed Flow\n\nA detailed flow is described in the following procedure:\n\n1. Peer A calls the relevant initialization function.\n1. Peer A calls the step function, with a null **input message**, and gets an **output message**.\n1. Peer A sends the **operation details** and its **output message** to peer B.\n    - Note that the **operation details** are sent in this step. This information enables peer B to run the initialization function. Alternatively, this information can be sent any time before the next step.\n1. Peer B verifies the **operation details** and consents to execute it.\n1. Peer B calls the initialization function.\n1. Peer B calls the **step** function with the message it received from peer A as **input message**.\n1. Peer B sends the **output message** back to peer A.\n1. Each peer alternates calling the **step** function with the **input message** from the other peer and then sending the **output message** to the other peer.\n1. This ping-pong process continues until both peers are finished, which is determined by output flags from the **step** function. \n\t- The *mpc_protocol_finished* flag denotes that it was the last step on this peer.\n\t- If it also includes the *mpc_share_changed* flag then the local key share  changed, such as with a *refresh* action. The key share needs to retrieved from the context using the **getShare** function and stored for future use.\n\t- If the output message from the last step is not empty it must be sent to the other peer.\n\t- One or both peers may need to call the **getResult** function based on the type of operation. For example, a *sign* action only has a result for one peer, but a *refresh* action has a new key share for both peers.\n\n\t\nThroughout the entire process the same context should be used. If the context needs to be stored, you can use the **serialization** function, and then read it back in using the **deserialization** function.\n\n\n\n### 6.3.3 Example Action\n\nAn example of an ECDSA signing action is shown in the following figure.\n\n![Flow](docs/images/os-flow-example.png)\n\nEach peer starts by calling the **MPCCrypto_initEcdsaSign()** function \nfor initialization. After initialization, each peer calls the \n**MPCCrypto_step()** function a number of times until the peer is \nfinished with the signing process. The signature, which is the result of \nthe signing process, is received by calling the final function, \n**MPCCrypto_finalEcdsaSign()**, after which the signing process is done.\n"
 },
 {
  "repo": "pyca/pyopenssl",
  "language": "Python",
  "readme_contents": "========================================================\npyOpenSSL -- A Python wrapper around the OpenSSL library\n========================================================\n\n.. image:: https://readthedocs.org/projects/pyopenssl/badge/?version=stable\n   :target: https://pyopenssl.org/en/stable/\n   :alt: Stable Docs\n\n.. image:: https://github.com/pyca/pyopenssl/workflows/CI/badge.svg?branch=main\n   :target: https://github.com/pyca/pyopenssl/actions?query=workflow%3ACI+branch%3Amain\n\n.. image:: https://codecov.io/github/pyca/pyopenssl/branch/main/graph/badge.svg\n   :target: https://codecov.io/github/pyca/pyopenssl\n   :alt: Test coverage\n\n**Note:** The Python Cryptographic Authority **strongly suggests** the use of `pyca/cryptography`_\nwhere possible. If you are using pyOpenSSL for anything other than making a TLS connection\n**you should move to cryptography and drop your pyOpenSSL dependency**.\n\nHigh-level wrapper around a subset of the OpenSSL library. Includes\n\n* ``SSL.Connection`` objects, wrapping the methods of Python's portable sockets\n* Callbacks written in Python\n* Extensive error-handling mechanism, mirroring OpenSSL's error codes\n\n... and much more.\n\nYou can find more information in the documentation_.\nDevelopment takes place on GitHub_.\n\n\nDiscussion\n==========\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nWe maintain a cryptography-dev_ mailing list for both user and development discussions.\n\nYou can also join ``#pyca`` on ``irc.libera.chat`` to ask questions or get involved.\n\n\n.. _documentation: https://pyopenssl.org/\n.. _`issue tracker`: https://github.com/pyca/pyopenssl/issues\n.. _cryptography-dev: https://mail.python.org/mailman/listinfo/cryptography-dev\n.. _GitHub: https://github.com/pyca/pyopenssl\n.. _`pyca/cryptography`: https://github.com/pyca/cryptography\n"
 },
 {
  "repo": "vault12/zax",
  "language": "Ruby",
  "readme_contents": "# Zax\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/1370944/126783800-df5bcc0f-11c1-45c5-8e62-a960e787b111.jpg\"\n    alt=\"Zax\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.com/vault12/zax\">\n    <img src=\"https://travis-ci.com/vault12/zax.svg?branch=master\" alt=\"Travis Build Status\" />\n  </a>\n  <a href=\"https://vault12.github.io/zax-dashboard/\">\n    <img src=\"https://img.shields.io/badge/demo-online-orange\" alt=\"Demo Online\" />\n  </a>\n  <a href=\"https://opensource.org/licenses/MIT\">\n    <img src=\"https://img.shields.io/badge/License-MIT-blue.svg\" alt=\"MIT License\" />\n  </a>\n  <a href=\"http://makeapullrequest.com\">\n    <img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\" alt=\"PRs welcome\" />\n  </a>\n  <a href=\"https://twitter.com/_Vault12_\">\n    <img src=\"https://img.shields.io/twitter/follow/_Vault12_?label=Follow&style=social\" alt=\"Follow\" />\n  </a>\n</p>\n\nZax is a [NaCl-based Cryptographic Relay](https://s3-us-west-1.amazonaws.com/vault12/zax_infogfx.jpg), easily accessed via the [Glow](https://github.com/vault12/glow.ts) library. You can read the full [technical specification here](http://bit.ly/nacl_relay_spec).\nZax relay nodes are asyncronous \"dead drops\" for mobile communications. Relays are intended to be multiplied for reliability and form a distributed network. Individual devices send messages to a mutually determenistic subset of relays and check the same for response traffic.\n\n**Zax v2.0 Update** summary is [here](#-version-20-updates).\n\n![Zax Infographics](https://bit.ly/zax_relay)\n\n## Features\n- **Universal**: All Zax Relay nodes are mutually interchangeable and operate in a global address space. Any mobile device can contact any node to pass private messages to any other mobile device without a pre-existing setup or registration with that Relay.\n- **Encrypted end-to-end**: It is cryptographically impossible for a Zax Relay node to decrypt the traffic passing though it between endpoint devices even if the Relay is taken over by an external agency.\n- **Ephemeral**: Zax Relay nodes do not store anything in permanent storage, and operate only with *memory-based* ephemeral storage. The Relay acts as an encrypted memory cache shared between mobile devices. Key information is kept in memory only and erased within minutes after completing the session. Encrypted messages are kept in memory for future collection and are erased after a few days if not collected by the target device.\n- **Well-known relays**: A deployed Zax Relay node's URL/identity should be well known and proven by a TLS certificate. Applications might implement certificate pinning for well-known relays of their choosing. A mobile app could keep a list of geographically dispersed relays and use a deterministic subset of them to send & receive asynchronous messages to/from another mobile device.\n- **Identification privacy**: After establishing temporary keys for each session, a Zax Relay node never stores long-term identity keys of the endpoint devices. When the protocol requires the verification of public key ownership, these operations happen in memory only and are immediately erased afterward. In the future, we're planning on leveraging Zero Knowledge Proofs to eliminate disclosure of long term public keys (and therefore device identity) to a Zax Relay server completely.\n- **Resilient**: Relays are reasonably resilient to external takeover and network traffic intercept. Such a takeover, if successful, only exposes message metadata, but not the content of any messages. Minor mis-configurations of a relay node, (such as leaking log files, etc.), during deployment by more casual users do not lead to a catastrophic breakdown of message privacy.\n- **Private nodes**: Power users have the option to deploy their own personal relay nodes and have the ability to add them into the configuration of mobile applications that are reliant on this kind of p2p network.\n\n## Test Dashboard\nEach Zax deployment includes (via `/public`) a test [Dashboard](https://github.com/vault12/zax-dashboard) app, that uses [Glow](https://github.com/vault12/glow.ts) client library to provide user-friend access point to given relay internal mailboxes. We maintain live [Test Server](https://zt.vault12.com) that runs our latest build. For testing purposes expiration on that relay is set for 30 minutes.\n\n### Device-to-Device Messaging\nAny device can communicate with any other device via Zax relays. The address space is global, and each device uses a hash of a long-term identity public key as the \u201caddress\u201d in the global network of relays. Devices can generate as many keys as they need and implement [communication ratchet](https://github.com/vault12/glow/blob/master/src/rachetbox.coffee) protocols on the client level.\n\nClients start by sending a POST request to `/start_session` with a random token. The relay responds with a simple proof of work challenge based on that token. If the relay is configured for dynamic difficulty adjustment, the proof of work function will increase in difficulty as the relay experiences heavier load (thus increasing the client time required for a new session handshake and reducing load).\n\nAfter answering the challenge to `/verify_session`, clients receive temporary session keys, and can start posting commands to `/command`. The command to relay is encrypted with session keys, while payload of command is usually encrypted with recipient public key, and is inaccessible to the relay. Using `upload`, `messageStatus`, `download` and `delete` commands, client devices can start sending end-to-end encrypted messages to each other.\n\nDetails of the protocol can be found in the [full technical spec](http://bit.ly/nacl_relay_spec). The full client library for messaging commands is implemented in the [Glow](https://github.com/vault12/glow.ts) library.\n\n\n## <a name=\u201czax20\u201d></a> Version 2.0 Updates\nIn Zax 2.0 we provide numerous stability and performance updates to the core codebase, and introduced new functionality of extending the Zax \u201cdead drop\u201d style communications to include file exchange.\n\n- Codebase upgraded to `Ruby 2.4.1` and `Rails 5.1.3`\n- New set of [commands](https://github.com/vault12/zax/wiki/Zax-2.0-File-Commands) for device-to-device exchange of large files\n- Dynamic throttling option: when on, the relay session handshake \u201cproof of work\u201d function will grow harder with increased server load\n- The companion [Glow](https://github.com/vault12/glow.ts) library detects failing relays and will pause connecting to them for a few hours\n- Restart time window: optionally config time periods when supporting services are restarting, all workers will sleep during that window\n- Improvements and optimizing for multi-worker/multi-threading access to Redis\n- New logging details and easier to read color-coded logs\n- Many performance improvements and bug fixes\n\n#### <a name=\u201czax21\u201d></a> 2.1 Updates\n\n- *h2()* hash function zero-pad prefix increased to 64 bytes to match sha256 block\n- Double JSON encoding removed in file commands\n- Default session timeout increased to 20 minutes\n- [Glow](https://github.com/vault12/glow) now supports command line interface:\n\n```\nglow clean <relay_url> <guest_public_key>                delete all files in mailbox on the relay\nglow count <relay_url> <guest_public_key> [options]      show number of pending files on the relay\nglow download <relay_url> <guest_public_key> [options]   download file(s) from the relay\nglow key [options]                                       show public key or h2(pk), set/update private key\nglow help [cmd]                                          display help for [cmd]\n```\n\n### File Exchange Cryptography\n[File commands](https://github.com/vault12/zax/wiki/Zax-2.0-File-Commands) API leverages the existing anonymous message exchange mechanism of Zax relays to bootstrap file exchange metadata and key exchange. After parties have exchanged information about the file, new commands allow for the bulk content of an encrypted file to be exchanged.\n\nSending a file from Alice to Bob follows the following protocol:\n\n- **Bootstrap**: Alice and Bob have to exchange their long term identity keys as the usual messaging bootstrap before communications via Zax relays. The Glow library [contains a sketch](https://github.com/vault12/glow/blob/master/tests/specs/07.invites.coffee) showing how such device-to-device initial key exchange might be implemented in client apps. Read [technical specification](http://bit.ly/nacl_relay_spec) for the full details of that process. Before a file exchange takes place, we assume that Alice and Bob have already exchanged long term identity keys (`pkA` and `pkB`). The relay doesn\u2019t store these public keys, and identifies Alice and Bob by the hash of public key as `hpkA` and `hpkB`.\n-  **Upload init**: Alice issues a `startFileUpload` command that contains the `hpk_to` address of Bob in a command data block. The data block also includes the metadata encrypted `pkA => pkB` using NaCl `crypto_box`, so the whole metadata block is inaccessible to the Zax relay. That metadata block also includes the NaCl symmetric key for `crypto_secretbox` that will be used later to encrypt the file contents.\n-  `startFileUpload` generates a regular Alice => Bob message on the relay, and can be downloaded by Bob with a regular `download` command. Alice receives the unique `uploadID` from the relay that is used for all subsequent commands about the given file. The relay response data block includes the maximum size of file chunk that clients can upload at once. Default is set to 100kb, but clients can modify that value in config, which will require appropriate changes to the size of the maximum POST command in the web server configuration.\n-   Internally, the relay stores `uploadID` only in that initial `startFileUpload` message, stored in Bob\u2019s mailbox (`hpk_to`) as a message from Alice (`hpk_from`). Once Bob or Alice deletes that message via the `delete` command or it expires as a part of the regular Redis expiration timeout, the relay will have no record of `uploadID` generated for the file. The relay uses either `secret_seed.txt` in `shared/uploads` or a config value to associate the `uploadID` given to clients and `storage_id` used by the relay to derive storage file names. If `secret_seed.txt` is deleted, there is no way to recover an association between files on the relay and client commands.\n-   **Upload**: using the `uploadID` obtained from the relay, Alice can now issue the `uploadFileChunk` command, that requires that `uploadID`. In the command datablock, Alice provides the `nonce` used to encrypt this file chunk using the symmetric NaCl key for `crypto_secretbox`. Outside of the command datablock (encrypted as usual with Alice => Relay session key), the encrypted file contents produced by `secretbox` are posted as additional POST lines to the `uploadFileChunk` command.\n-   The relay stores encrypted file chunks as local files in `shared/uploads` and derives a storage name from the `uploadID` and the local `secret_seed.txt` file. The nonce for each chunk is stored in Redis and subject to the usual time expiration rules.\n-   **Download**: Bob receives the `uploadID` and secret key for this file when it gets the initial `startFileUpload` message (by downloading it via the messaging family `download` command). Bob uses `uploadID` to issue `downloadFileChunk` commands to download the file chunk by chunk. It contains in its datablock (encrypted to Bob) the nonce of the given chunk, and the symmetrically encrypted chunk itself is the last line of the POST response to `downloadFileChunk` command.\n-   **Status**: Either party can check information about files currently on the relay using their `uploadID` and `fileStatus` command. If the relay deletes or refreshes `secret_seed.txt` present during initial `startFileUpload`, all requests for the old `uploadID` will fail.\n-   **Delete**: Either party can delete the file using `uploadID` and the `deleteFile` command.\n-   **Data pruning**: All Redis information about the files expires, with the default set to one week. If a file is not removed with the `deleteFile` command, after Redis expiration, the relay will delete old files via a cleanup job. The cleanup job will also delete files that have lost association with their storage id, which is the case if the `secret_seed.txt` is changed or deleted.\nThe full client library of [file commands](https://github.com/vault12/zax/wiki/Zax-2.0-File-Commands) is implemented in the [Glow](https://github.com/vault12/glow.ts) library.\n\n## Getting Started\n#### Redis\nZax requires [Redis](http://redis.io/) to run.\n- via Brew: `brew install redis` and run `redis-server`\nor\n- [Download](https://redis.io/download) Redis\n- [Build](https://github.com/antirez/redis#building-redis) Redis\n- [Run](https://github.com/antirez/redis#running-redis) Redis\n\n#### Sodium\n- brew install libsodium\n\n#### RVM\nWe suggest that you use the [Ruby Version Manager (RVM)](https://rvm.io/) to install Ruby and to build and install the gems you need to run Zax.\n\nIf you don't already have RVM installed, install it from [here](https://rvm.io).\n\n#### Ruby\nZax requires at least version 2.7.2 of [Ruby](https://www.ruby-lang.org/) and version 1.29.10 of RVM to run.\n\nTo check your Ruby version, type the following in a terminal:\n\n```Shell\nruby -v\n```\n\nIf you do not have version 2.7.2 or higher, then type the following in a terminal:\n```Shell\nrvm install 2.7.2\n```\n\n#### Installation\nIn a terminal, navigate to the directory in which you'd like to install Zax and type the following:\n\n```Shell\n# get the source\ngit clone git@github.com:vault12/zax.git\n\n# create the gemset\ncd zax\nrvm use ruby-2.7.2\nrvm gemset create zax\nrvm gemset use zax\n\n# run the installation script\ngem install bundler\nbundle install\nmkdir -p shared/log\nmkdir -p shared/pids\nmkdir -p shared/sockets\n```\n\nIf `bundle install` command fails with a message for libxml2 or Nokogiri, see the [Troubleshooting](#troubleshooting) section.\n\n#### Running Zax\n\nTo bring up Zax run this command:\n\n```Shell\nrails s -p 8080\n```\n\nTo make Zax accept connections from all hosts:\n\n```Shell\nrails s -p 8080 --binding=0.0.0.0\n```\n\n#### Testing Zax\n\nTo test groups of tests you can run any of these commands:\n\n```Shell\nrake test\nrake test -v\n\nrake test:controllers\nrake test:integration\n```\n\nTo run individual tests\n\n```Shell\nrake test test/integration/command_test.rb\nrake test test/integration/command_test.rb -v\n```\n\n#### Troubleshooting\n\nZax uses [Nokogiri](http://www.nokogiri.org/tutorials/installing_nokogiri.html) which uses libxml2.\nHere is an example installation via Brew on an OSX system:\n\n```Shell\nbrew install libxml2\nbundle config build.nokogiri --use-system-libraries\n```\n\nFor other platforms than OS X, please consult [Installing Nokogiri](http://www.nokogiri.org/tutorials/installing_nokogiri.html) for further instructions.\n\n#### Example Command Line Utilities\n\n```Shell\ncd zax\nmkdir tools\necho \"*\" > tools/.gitignore\necho \"rvm gemset use zax\" > tools/init\necho \"# empty; prevent saving to disk\" > tools/redis.conf\necho \"redis-server ./tools/redis.conf\" > tools/redis\necho \"rails s -p 8080 --binding=0.0.0.0\" > tools/relay\n```\n\nThen you can do e.g.:\n```Shell\ncd zax\n. tools/init\n. tools/relay\n. tools/redis # new console window\n```\n\n## Demo\nTo see Glow and Zax in action, check out the [Live Demo](https://zt.vault12.com). This is a test project included in Zax called [Zax Dashboard](https://github.com/vault12/zax-dashboard).\n\n## Contributing\nWe encourage you to contribute to Zax using [pull requests](https://github.com/vault12/zax/pulls)! Please check out the [Contributing to Zax Guide](CONTRIBUTING.md) for guidelines about how to proceed.\n\n## Ecosystem\n\nProject | Description\n--- | ---\n[Glow](https://github.com/vault12/glow.ts) | Client library for interacting with Zax Cryptographic Relay\n[Zax Dashboard](https://github.com/vault12/zax-dashboard) | Sample dashboard app for Zax Cryptographic Relay\n[TrueEntropy](https://github.com/vault12/TrueEntropy) | High volume thermal entropy generator\n\n## Telegram Community\nWe've set up a public Telegram community [Vault12 Dwellers](https://t.me/Vault12).\n\n## License\nZax is released under the [MIT License](http://opensource.org/licenses/MIT).\n\n## Legal Reminder\nExporting/importing and/or use of strong cryptography software, providing cryptography hooks, or even just communicating technical details about cryptography software is illegal in some parts of the world. If you import this software to your country, re-distribute it from there or even just email technical suggestions or provide source patches to the authors or other people you are strongly advised to pay close attention to any laws or regulations which apply to you. The authors of this software are not liable for any violations you make - it is your responsibility to be aware of and comply with any laws or regulations which apply to you.\n"
 },
 {
  "repo": "usnistgov/Lightweight-Cryptography-Benchmarking",
  "language": "C",
  "readme_contents": "# Benchmarking of Lightweight Cryptographic Algorithms on Microcontrollers\n\nThis repository hosts the benchmarking framework used to evaluate the software performance of the candidates of the NIST Lightweight Cryptography Standardization Project on microcontrollers.\n\n - `src`: benchmarking framework source code and the build scripts used to perform the experiments\n - `implementations`: implementations of the **Round 2 Candidates** gathered from public sources\n - `benchmarks`: benchmark results\n\n# Implementations\n\nMore information on implementations can be found [here](implementations/).\n\n# Platforms\n\nCurrently, the benchmarking is being performed on the following development boards:\n\n - [Arduino Uno R3 (AVR ATmega328P)](https://store.arduino.cc/usa/arduino-uno-rev3)\n - [Arduino Nano Every (AVR ATmega4809)](https://store.arduino.cc/usa/nano-every)\n - [Arduino MKR Zero (ARM Cortex-M0+)](https://store.arduino.cc/usa/arduino-mkrzero)\n - [Arduino Nano 33 BLE (ARM Cortex-M4F)](https://store.arduino.cc/usa/nano-33-ble)\n - [Digilent uC32 (PIC32MX340F512H)](https://store.digilentinc.com/uc32-arduino-programmable-pic32-microcontroller-board-limited-time/)\n - [Espressif ESP8266 (Tensilica L106)](https://www.espressif.com/en/products/socs/esp8266)\n\n# Results\n\nThe latest benchmarks results can be found [here](benchmarks/).\n\n# Contact\n\n[Lightweight Cryptography Project Webpage](https://csrc.nist.gov/projects/lightweight-cryptography)\n\n[E-mail](mailto:lightweight-crypto@nist.gov)\n\n# Disclaimer\n\nCommercial equipment and software referred to in this website are identified for informational purposes only and does not imply\nrecommendation of or endorsement by the National Institute of Standards and Technology, nor does it imply that the products so identified\nare necessarily the best available for the purpose.\n"
 },
 {
  "repo": "jedisct1/swift-sodium",
  "language": "C",
  "readme_contents": "# Swift-Sodium [![Build Status](https://travis-ci.com/jedisct1/swift-sodium.svg?branch=master)](https://travis-ci.com/jedisct1/swift-sodium)\n\nSwift-Sodium provides a safe and easy to use interface to perform common cryptographic operations on macOS, iOS, tvOS and watchOS.\n\nIt leverages the [Sodium](https://download.libsodium.org/doc/) library, and although Swift is the primary target, the framework can also be used in Objective-C applications.\n\n## Please help!\n\nThe current Swift-Sodium documentation is not great. Your help to improve it and make it awesome would be very appreciated!\n\n## Usage\n\nTo add Swift-Sodium as dependency to your Xcode project, select `File` > `Swift Packages` > `Add Package Dependency`, enter its repository URL: `https://github.com/jedisct1/swift-sodium.git` and import `Sodium` as well as `Clibsodium`.\n\nThen, to use it in your source code, add:\n\n```swift\nimport Sodium\n```\n\nThe Sodium library itself doesn't have to be installed on the system: the repository already includes a precompiled library for armv7, armv7s, arm64, as well as for the iOS simulator, WatchOS and Catalyst.\n\nThe `Clibsodium.xcframework` framework has been generated by the\n[dist-build/apple-xcframework.sh](https://github.com/jedisct1/libsodium/blob/master/dist-build/apple-xcframework.sh)\nscript.\n\nRunning this script on Xcode 13.3 (`13E113`) on the revision `7389bf7f2968be75520e932704f18f038c29e581` of libsodium generates files identical to the ones present in this repository.\n\n## Secret-key cryptography\n\nMessages are encrypted and decrypted using the same secret key, this is also known as symmetric cryptography.\n\nA key can be generated using the `key()` method, derived from a password using the Password Hashing API, or computed using a secret key and the peer's public key utilising the Key Exchange API.\n\n### Authenticated encryption for a sequence of messages\n\n```swift\nlet sodium = Sodium()\nlet message1 = \"Message 1\".bytes\nlet message2 = \"Message 2\".bytes\nlet message3 = \"Message 3\".bytes\n\nlet secretkey = sodium.secretStream.xchacha20poly1305.key()\n\n/* stream encryption */\n\nlet stream_enc = sodium.secretStream.xchacha20poly1305.initPush(secretKey: secretkey)!\nlet header = stream_enc.header()\nlet encrypted1 = stream_enc.push(message: message1)!\nlet encrypted2 = stream_enc.push(message: message2)!\nlet encrypted3 = stream_enc.push(message: message3, tag: .FINAL)!\n\n/* stream decryption */\n\nlet stream_dec = sodium.secretStream.xchacha20poly1305.initPull(secretKey: secretkey, header: header)!\nlet (message1_dec, tag1) = stream_dec.pull(cipherText: encrypted1)!\nlet (message2_dec, tag2) = stream_dec.pull(cipherText: encrypted2)!\nlet (message3_dec, tag3) = stream_dec.pull(cipherText: encrypted3)!\n```\n\nA stream is a sequence of messages, that will be encrypted as they depart, and, decrypted as they arrive. The encrypted messages are expected to be received in the same order as they were sent.\n\nStreams can be arbitrarily long. This API can thus be used for file encryption, by splitting files into small chunks, so that the whole file doesn't need to reside in memory concurrently.\n\nIt can also be used to exchange a sequence of messages between two peers.\n\nThe decryption function automatically checks that chunks have been received without modification, and truncation or reordering.\n\nA tag is attached to each message, and can be used to signal the end of a sub-sequence (`PUSH`), or the end of the string (`FINAL`).\n\n### Authenticated encryption for single messages\n\n```swift\nlet sodium = Sodium()\nlet message = \"My Test Message\".bytes\nlet secretKey = sodium.secretBox.key()\nlet encrypted: Bytes = sodium.secretBox.seal(message: message, secretKey: secretKey)!\nif let decrypted = sodium.secretBox.open(nonceAndAuthenticatedCipherText: encrypted, secretKey: secretKey) {\n    // authenticator is valid, decrypted contains the original message\n}\n```\n\nThis API encrypts a message. The decryption process will check that the messages haven't been tampered with before decrypting them.\n\nMessages encrypted this way are independent: if multiple messages are sent this way, the recipient cannot detect if some messages have been duplicated, deleted or reordered without the sender including additional data with each message.\n\nOptionally, `SecretBox` provides the ability to utilize a user-defined nonce via `seal(message: secretKey: nonce:)`.\n\n## Public-key Cryptography\n\nWith public-key cryptography, each peer has two keys: a secret (private) key, that has to remain secret, and a public key that anyone can use to send an encrypted message to that peer. That public key can be only be used to encrypt a message. The corresponding secret is required to decrypt it.\n\n### Authenticated Encryption\n\n```swift\nlet sodium = Sodium()\nlet aliceKeyPair = sodium.box.keyPair()!\nlet bobKeyPair = sodium.box.keyPair()!\nlet message = \"My Test Message\".bytes\n\nlet encryptedMessageFromAliceToBob: Bytes =\n    sodium.box.seal(message: message,\n                    recipientPublicKey: bobKeyPair.publicKey,\n                    senderSecretKey: aliceKeyPair.secretKey)!\n\nlet messageVerifiedAndDecryptedByBob =\n    sodium.box.open(nonceAndAuthenticatedCipherText: encryptedMessageFromAliceToBob,\n                    senderPublicKey: aliceKeyPair.publicKey,\n                    recipientSecretKey: bobKeyPair.secretKey)\n```\n\nThis operation encrypts and sends a message to someone using their public key.\n\nThe recipient has to know the sender's public key as well, and will reject a message that doesn't appear to be valid for the expected public key.\n\n`seal()` automatically generates a nonce and prepends it to the ciphertext. `open()` extracts the nonce and decrypts the ciphertext.\n\nOptionally, `Box` provides the ability to utilize a user-defined nonce via `seal(message: recipientPublicKey: senderSecretKey: nonce:)`.\n\nThe `Box` class also provides alternative functions and parameters to deterministically generate key pairs, to retrieve the nonce and/or the authenticator, and to detach them from the original message.\n\n## Anonymous Encryption (Sealed Boxes)\n\n```swift\nlet sodium = Sodium()\nlet bobKeyPair = sodium.box.keyPair()!\nlet message = \"My Test Message\".bytes\n\nlet encryptedMessageToBob =\n    sodium.box.seal(message: message, recipientPublicKey: bobKeyPair.publicKey)!\n\nlet messageDecryptedByBob =\n    sodium.box.open(anonymousCipherText: encryptedMessageToBob,\n                    recipientPublicKey: bobKeyPair.publicKey,\n                    recipientSecretKey: bobKeyPair.secretKey)\n```\n\n`seal()` generates an ephemeral keypair, uses the ephemeral secret key in the encryption process, combines the ephemeral public key with the ciphertext, then destroys the keypair.\n\nThe sender cannot decrypt the resulting ciphertext. `open()` extracts the public key and decrypts using the recipient's secret key. Message integrity is verified, but the sender's identity cannot be correlated to the ciphertext.\n\n## Key exchange\n\n```swift\nlet sodium = Sodium()\nlet aliceKeyPair = sodium.keyExchange.keyPair()!\nlet bobKeyPair = sodium.keyExchange.keyPair()!\n\nlet sessionKeyPairForAlice = sodium.keyExchange.sessionKeyPair(publicKey: aliceKeyPair.publicKey,\n    secretKey: aliceKeyPair.secretKey, otherPublicKey: bobKeyPair.publicKey, side: .CLIENT)!\nlet sessionKeyPairForBob = sodium.keyExchange.sessionKeyPair(publicKey: bobKeyPair.publicKey,\n    secretKey: bobKeyPair.secretKey, otherPublicKey: aliceKeyPair.publicKey, side: .SERVER)!\n\nlet aliceToBobKeyEquality = sodium.utils.equals(sessionKeyPairForAlice.tx, sessionKeyPairForBob.rx) // true\nlet bobToAliceKeyEquality = sodium.utils.equals(sessionKeyPairForAlice.rx, sessionKeyPairForBob.tx) // true\n```\n\n## Public-key signatures\n\nSignatures allow multiple parties to verify the authenticity of a public message, using the public key of the author's message.\n\nThis can be especially useful to sign software updates.\n\n### Detached signatures\n\nThe signature is generated separately to the original message.\n\n```swift\nlet sodium = Sodium()\nlet message = \"My Test Message\".bytes\nlet keyPair = sodium.sign.keyPair()!\nlet signature = sodium.sign.signature(message: message, secretKey: keyPair.secretKey)!\nif sodium.sign.verify(message: message,\n                      publicKey: keyPair.publicKey,\n                      signature: signature) {\n    // signature is valid\n}\n```\n\n### Attached signatures\n\nThe signature is generated and prepended to the original message.\n\n```swift\nlet sodium = Sodium()\nlet message = \"My Test Message\".bytes\nlet keyPair = sodium.sign.keyPair()!\nlet signedMessage = sodium.sign.sign(message: message, secretKey: keyPair.secretKey)!\nif let unsignedMessage = sodium.sign.open(signedMessage: signedMessage, publicKey: keyPair.publicKey) {\n    // signature is valid\n}\n```\n\n## Hashing\n\n### Deterministic hashing\n\nHashing effectively \"fingerprints\" input data, no matter what its size, and returns a fixed length \"digest\".\n\nThe digest length can be configured as required, from 16 to 64 bytes.\n\n```swift\nlet sodium = Sodium()\nlet message = \"My Test Message\".bytes\nlet hash = sodium.genericHash.hash(message: message)\nlet hashOfSize32Bytes = sodium.genericHash.hash(message: message, outputLength: 32)\n```\n\n### Keyed hashing\n\n```swift\nlet sodium = Sodium()\nlet message = \"My Test Message\".bytes\nlet key = \"Secret key\".bytes\nlet h = sodium.genericHash.hash(message: message, key: key)\n```\n\n### Streaming\n\n```swift\nlet sodium = Sodium()\nlet message1 = \"My Test \".bytes\nlet message2 = \"Message\".bytes\nlet key = \"Secret key\".bytes\nlet stream = sodium.genericHash.initStream(key: key)!\nstream.update(input: message1)\nstream.update(input: message2)\nlet h = stream.final()\n```\n\n### Short-output hashing (SipHash)\n\n```swift\nlet sodium = Sodium()\nlet message = \"My Test Message\".bytes\nlet key = sodium.randomBytes.buf(length: sodium.shortHash.KeyBytes)!\nlet h = sodium.shortHash.hash(message: message, key: key)\n```\n\n## Random numbers generation\n\nRandom number generation produces cryptographically secure pseudorandom numbers suitable as key material.\n\n```swift\nlet sodium = Sodium()\nlet randomBytes = sodium.randomBytes.buf(length: 1000)!\nlet seed = \"0123456789abcdef0123456789abcdef\".bytes\nlet stream = sodium.randomBytes.deterministic(length: 1000, seed: seed)!\n```\n\nUse `RandomBytes.Generator` as a generator to produce cryptographically secure pseudorandom numbers.\n\n```swift\nvar rng = RandomBytes.Generator()\nlet randomUInt32 = UInt32.random(in: 0...10, using: &rng)\nlet randomUInt64 = UInt64.random(in: 0...10, using: &rng)\nlet randomInt = Int.random(in: 0...10, using: &rng)\nlet randomDouble = Double.random(in: 0...1, using: &rng)\n```\n\n## Password hashing\n\nPassword hashing provides the ability to derive key material from a low-entropy password. Password hashing functions are designed to be expensive to hamper brute force attacks, thus the computational and memory parameters may be user-defined.\n\n```swift\nlet sodium = Sodium()\nlet password = \"Correct Horse Battery Staple\".bytes\nlet hashedStr = sodium.pwHash.str(passwd: password,\n                                  opsLimit: sodium.pwHash.OpsLimitInteractive,\n                                  memLimit: sodium.pwHash.MemLimitInteractive)!\n\nif sodium.pwHash.strVerify(hash: hashedStr, passwd: password) {\n    // Password matches the given hash string\n} else {\n    // Password doesn't match the given hash string\n}\n\nif sodium.pwHash.strNeedsRehash(hash: hashedStr,\n                                opsLimit: sodium.pwHash.OpsLimitInteractive,\n                                memLimit: sodium.pwHash.MemLimitInteractive) {\n    // Previously hashed password should be recomputed because the way it was\n    // hashed doesn't match the current algorithm and the given parameters.\n}\n```\n\n## Authentication tags\n\nThe `sodium.auth.tag()` function computes an authentication tag (HMAC) using a message and a key. Parties knowing the key can then verify the authenticity of the message using the same parameters and the `sodium.auth.verify()` function.\n\nAuthentication tags are not signatures: the same key is used both for computing and verifying a tag. Therefore, verifiers can also compute tags for arbitrary messages.\n\n```swift\nlet sodium = Sodium()\nlet input = \"test\".bytes\nlet key = sodium.auth.key()\nlet tag = sodium.auth.tag(message: input, secretKey: key)!\nlet tagIsValid = sodium.auth.verify(message: input, secretKey: key, tag: tag)\n```\n\n## Key derivation\n\nThe `sodium.keyDerivation.derive()` function generates a subkey using an input (master) key, an index, and a 8 bytes string identifying the context. Up to (2^64) - 1 subkeys can be generated for each context, by incrementing the index.\n\n```swift\nlet sodium = Sodium()\nlet secretKey = sodium.keyDerivation.keygen()!\n\nlet subKey1 = sodium.keyDerivation.derive(secretKey: secretKey,\n                                          index: 0, length: 32,\n                                          context: \"Context!\")\nlet subKey2 = sodium.keyDerivation.derive(secretKey: secretKey,\n                                          index: 1, length: 32,\n                                          context: \"Context!\")\n```\n\n## Utilities\n\n### Zeroing memory\n\n```swift\nlet sodium = Sodium()\nvar dataToZero = \"Message\".bytes\nsodium.utils.zero(&dataToZero)\n```\n\n### Constant-time comparison\n\n```swift\nlet sodium = Sodium()\nlet secret1 = \"Secret key\".bytes\nlet secret2 = \"Secret key\".bytes\nlet equality = sodium.utils.equals(secret1, secret2)\n```\n\n### Padding\n\n```swift\nlet sodium = Sodium()\nvar bytes = \"test\".bytes\n\n// make bytes.count a multiple of 16\nsodium.utils.pad(bytes: &bytes, blockSize: 16)!\n\n// restore original size\nsodium.utils.unpad(bytes: &bytes, blockSize: 16)!\n```\n\nPadding can be useful to hide the length of a message before it is encrypted.\n\n### Constant-time hexadecimal encoding\n\n```swift\nlet sodium = Sodium()\nlet bytes = \"Secret key\".bytes\nlet hex = sodium.utils.bin2hex(bytes)\n```\n\n### Hexadecimal decoding\n\n```swift\nlet sodium = Sodium()\nlet data1 = sodium.utils.hex2bin(\"deadbeef\")\nlet data2 = sodium.utils.hex2bin(\"de:ad be:ef\", ignore: \" :\")\n```\n\n### Constant-time base64 encoding\n\n```swift\nlet sodium = Sodium()\nlet b64 = sodium.utils.bin2base64(\"data\".bytes)!\nlet b64_2 = sodium.utils.bin2base64(\"data\".bytes, variant: .URLSAFE_NO_PADDING)!\n```\n\n### Base64 decoding\n\n```swift\nlet data1 = sodium.utils.base642bin(b64)\nlet data2 = sodium.utils.base642bin(b64, ignore: \" \\n\")\nlet data3 = sodium.utils.base642bin(b64_2, variant: .URLSAFE_NO_PADDING, ignore: \" \\n\")\n```\n\n## Helpers to build custom constructions\n\nOnly use the functions below if you know that you absolutely need them, and know how to use them correctly.\n\n## Unauthenticated encryption\n\nThe `sodium.stream.xor()` function combines (using the XOR operation) an arbitrary-long input with the output of a deterministic key stream derived from a key and a nonce. The same operation applied twice produces the original input.\n\nNo authentication tag is added to the output. The data can be tampered with; an adversary can flip arbitrary bits.\n\nIn order to encrypt data using a secret key, the `SecretBox` class is likely to be what you are looking for.\n\nIn order to generate a deterministic stream out of a seed, the `RandomBytes.deterministic_rand()` function is likely to be what you need.\n\n```swift\nlet sodium = Sodium()\nlet input = \"test\".bytes\nlet key = sodium.stream.key()\nlet (output, nonce) = sodium.stream.xor(input: input, secretKey: key)!\nlet twice = sodium.stream.xor(input: output, nonce: nonce, secretKey: key)!\n\nXCTAssertEqual(input, twice)\n```\n\n## Algorithms\n\n* Stream ciphers: XChaCha20, XSalsa20\n* MACs: Poly1305, HMAC-SHA512/256\n* Hash function: BLAKE2B\n* Key exchange: X25519\n* Signatures: Ed25519\n"
 },
 {
  "repo": "sindresorhus/fnv1a",
  "language": "JavaScript",
  "readme_contents": "# fnv1a\n\n> [FNV-1a](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non-cryptographic hash function\n\n[FNV-1a has outstanding distribution and collisions are rare.](https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed/145633#145633)\n\nFNV hashes are designed to be fast while maintaining a low collision rate. The FNV speed allows one to quickly hash lots of data while maintaining a reasonable collision rate. The high dispersion of the FNV hashes makes them well suited for hashing nearly identical strings such as URLs, hostnames, filenames, text, IP addresses, etc.\n\n## Install\n\n```sh\nnpm install @sindresorhus/fnv1a\n```\n\n## Usage\n\n```js\nimport fnv1a from '@sindresorhus/fnv1a';\n\nfnv1a('\ud83e\udd84\ud83c\udf08', {size: 32});\n//=> 2868248295n\n\nfnv1a('\ud83e\udd84\ud83c\udf08', {size: 128});\n//=> 13487074350300261116944693128525960095n\n\nNumber(fnv1a('\ud83e\udd84\ud83c\udf08', {size: 32}));\n//=> 2868248295\n```\n\n## API\n\n### fnv1a(string, options?)\n\nReturns the hash as a positive `BigInt`.\n\nIf you need it as a `number`, use `32` as `size` and wrap the return value in `Number(\u2026)`.\n\n#### options\n\nType: `object`\n\n##### size\n\nType: `number`\\\nValues: `32 | 64 | 128 | 256 | 512 | 1024`\\\nDefault: `32`\n\nThe bit size of the hash.\n\n## Related\n\n- [djb2a](https://github.com/sindresorhus/djb2a) - DJB2a non-cryptographic hash function\n- [sdbm](https://github.com/sindresorhus/sdbm) - SDBM non-cryptographic hash function\n"
 },
 {
  "repo": "RustCrypto/formats",
  "language": "Rust",
  "readme_contents": "# RustCrypto: Formats [![Project Chat][chat-image]][chat-link] [![dependency status][deps-image]][deps-link]\n\nCryptography-related format encoders/decoders (e.g. PKCS, PKIX)\n\n## Crates\n\n| Name          | crates.io                                                                                             | Docs                                                                                   | Description                                                                                                                                |\n|---------------|-------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n| `base16ct`    | [![crates.io](https://img.shields.io/crates/v/base16ct.svg)](https://crates.io/crates/base16ct)       | [![Documentation](https://docs.rs/base16ct/badge.svg)](https://docs.rs/base16ct)       | Constant-time hexadecimal encoder/decoder                                                                                                  |\n| `base64ct`    | [![crates.io](https://img.shields.io/crates/v/base64ct.svg)](https://crates.io/crates/base64ct)       | [![Documentation](https://docs.rs/base64ct/badge.svg)](https://docs.rs/base64ct)       | Constant-time Base64 encoder/decoder with support for several variants                                                                     |\n| `const\u2011oid`   | [![crates.io](https://img.shields.io/crates/v/const-oid.svg)](https://crates.io/crates/const-oid)     | [![Documentation](https://docs.rs/const-oid/badge.svg)](https://docs.rs/const-oid)     | Const-friendly implementation of the ISO/IEC Object Identifier (OID) standard as defined in [ITU X.660]                                    |\n| `der`         | [![crates.io](https://img.shields.io/crates/v/der.svg)](https://crates.io/crates/der)                 | [![Documentation](https://docs.rs/der/badge.svg)](https://docs.rs/der)                 | Decoder and encoder of the Distinguished Encoding Rules (DER) for Abstract Syntax Notation One (ASN.1) as described in [ITU X.690]         |\n| `pem\u2011rfc7468` | [![crates.io](https://img.shields.io/crates/v/pem-rfc7468.svg)](https://crates.io/crates/pem-rfc7468) | [![Documentation](https://docs.rs/pem-rfc7468/badge.svg)](https://docs.rs/pem-rfc7468) | Strict PEM encoding for PKIX/PKCS/CMS objects                                                                                              |\n| `pkcs1`       | [![crates.io](https://img.shields.io/crates/v/pkcs1.svg)](https://crates.io/crates/pkcs1)             | [![Documentation](https://docs.rs/pkcs1/badge.svg)](https://docs.rs/pkcs1)             | Implementation of PKCS#1: RSA Cryptography Specifications Version 2.2 ([RFC 8017])                                                         |\n| `pkcs5`       | [![crates.io](https://img.shields.io/crates/v/pkcs5.svg)](https://crates.io/crates/pkcs5)             | [![Documentation](https://docs.rs/pkcs5/badge.svg)](https://docs.rs/pkcs5)             | Implementation of PKCS#5: Password-Based Cryptography Specification Version 2.1 ([RFC 8018])                                               |\n| `pkcs7`       | [![crates.io](https://img.shields.io/crates/v/pkcs7.svg)](https://crates.io/crates/pkcs7)             | [![Documentation](https://docs.rs/pkcs7/badge.svg)](https://docs.rs/pkcs7)             | Implementation of PKCS#7: Cryptographic Message Syntax v1.5 ([RFC 5652] and [RFC 8933])                                                    |\n| `pkcs8`       | [![crates.io](https://img.shields.io/crates/v/pkcs8.svg)](https://crates.io/crates/pkcs8)             | [![Documentation](https://docs.rs/pkcs8/badge.svg)](https://docs.rs/pkcs8)             | Implementation of PKCS#8(v2): Private-Key Information Syntax Specification ([RFC 5208]) and asymmetric key packages ([RFC 5958])           |\n| `pkcs10`      | [![crates.io](https://img.shields.io/crates/v/pkcs10.svg)](https://crates.io/crates/pkcs10)           | [![Documentation](https://docs.rs/pkcs10/badge.svg)](https://docs.rs/pkcs10)           | Implementation of PKCS#10: Certification Request Syntax Specification ([RFC 2986])                                                         |\n| `sec1`        | [![crates.io](https://img.shields.io/crates/v/sec1.svg)](https://crates.io/crates/sec1)               | [![Documentation](https://docs.rs/sec1/badge.svg)](https://docs.rs/sec1)               | [SEC1: Elliptic Curve Cryptography] encoding formats                                                                                       |\n| `spki`        | [![crates.io](https://img.shields.io/crates/v/spki.svg)](https://crates.io/crates/spki)               | [![Documentation](https://docs.rs/spki/badge.svg)](https://docs.rs/spki)               | X.509 Subject Public Key Info ([RFC 5280 Section 4.1]) describing public keys as well as their associated AlgorithmIdentifiers (i.e. OIDs) |\n| `ssh-key`     | [![crates.io](https://img.shields.io/crates/v/ssh-key.svg)](https://crates.io/crates/ssh-key)         | [![Documentation](https://docs.rs/ssh-key/badge.svg)](https://docs.rs/ssh-key)         | SSH key file formats as described in [RFC 4251] and [RFC 4253]                                                                             |\n| `tai64`       | [![crates.io](https://img.shields.io/crates/v/tai64.svg)](https://crates.io/crates/tai64)             | [![Documentation](https://docs.rs/tai64/badge.svg)](https://docs.rs/tai64)             | TAI64(N) Timestamps                                                                                                                        |\n| `tls_codec`   | [![crates.io](https://img.shields.io/crates/v/tls_codec.svg)](https://crates.io/crates/tls_codec)     | [![Documentation](https://docs.rs/tls_codec/badge.svg)](https://docs.rs/tls_codec)     | TLS codec as defined in [RFC 8446 Section 3] as well as some extensions required by MLS.                                                   |\n| `x509-cert`   | [![crates.io](https://img.shields.io/crates/v/x509-cert.svg)](https://crates.io/crates/x509-cert)     | [![Documentation](https://docs.rs/x509-cert/badge.svg)](https://docs.rs/x509-cert)     | X.509 Public Key Infrastructure Certificate format as described in [RFC 5280]                                                              |\n\n## License\n\nAll crates licensed under either of\n\n- [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n- [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # \"badges\"\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/300570-formats\n[deps-image]: https://deps.rs/repo/github/RustCrypto/formats/status.svg\n[deps-link]: https://deps.rs/repo/github/RustCrypto/formats\n\n[//]: # \"links\"\n[itu x.660]: https://www.itu.int/rec/T-REC-X.660\n[itu x.690]: https://www.itu.int/rec/T-REC-X.690\n[rfc 2986]: https://datatracker.ietf.org/doc/html/rfc2986\n[rfc 4251]: https://datatracker.ietf.org/doc/html/rfc4251\n[rfc 4253]: https://datatracker.ietf.org/doc/html/rfc4253\n[rfc 5208]: https://datatracker.ietf.org/doc/html/rfc5208\n[rfc 5280 section 4.1]: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1\n[rfc 5280]: https://datatracker.ietf.org/doc/html/rfc5280\n[rfc 5652]: https://datatracker.ietf.org/doc/html/rfc5652\n[rfc 5958]: https://datatracker.ietf.org/doc/html/rfc5958\n[rfc 8017]: https://datatracker.ietf.org/doc/html/rfc8017\n[rfc 8018]: https://datatracker.ietf.org/doc/html/rfc8018\n[rfc 8933]: https://datatracker.ietf.org/doc/html/rfc8933\n[rfc 8446 section 3]: https://datatracker.ietf.org/doc/html/rfc8446#section-3\n[sec1: elliptic curve cryptography]: https://www.secg.org/sec1-v2.pdf\n"
 },
 {
  "repo": "google/webcrypto.dart",
  "language": "Dart",
  "readme_contents": "Cross-Platform Web Cryptography Implemenation\n=============================================\nThis package provides a cross-platform implementation of the\n[Web Cryptograph API][webcrypto-spec].\n\n**Disclaimer:** This is not an officially supported Google product.\n\nThis packages provides an implementation of the\n[Web Cryptograph API][webcrypto-spec] across multiple platforms. Outside the\nbrowser, this package features a native implementation embedding\n[BoringSSL][boringssl-src] using [`dart:ffi`][dart-ffi]. When used inside a\nweb browser this package wraps the [`window.crypto`][window-crypto] APIs and\nproviding the same Dart API as the native implementation.\n\nThis way, `package:webcrypto` provides the same crypto API on multiple\nplatforms. Initially targeting Flutter for **Android**, **iOS** and **Web**,\nwith other platforms following as soon as the build system allows.\n\n**Example**\n```dart\nimport 'dart:convert' show base64, utf8;\nimport 'package:webcrypto/webcrypto.dart';\n\nFuture<void> main() async {\n  final digest = await Hash.sha256.digestBytes(utf8.encode('Hello World'));\n  print(base.encode(digest));\n}\n```\n\n**Features:**\n * Get random bytes\n * Digest (sha-1/sha-256/sha-384/sha-512)\n * HMAC (sign/verify)\n * RSASSA-PKCS1-v1_5 (sign/verify)\n * RSA-PSS (sign/verify)\n * ECDSA (sign/verify)\n * RSA-OAEP\t(encrypt/decrypt)\n * AES-CTR, AES-CBC, AES-GCM (encrypt/decrypt)\n * ECDH (deriveBits)\n * HKDF (deriveBits)\n * PBKDF2\t(deriveBits)\n * BoringSSL, Chrome and Firefox implementations pass the same test cases.\n\n**Missing:**\n * Exceptions and errors thrown for invalid input is not tested yet.\n * The native implementation executes on the main-thread, however, all expensive\n   APIs are asynchronous, so they can be offloaded in the future.\n\nFor a discussion of the API design of this package,\nsee `doc/design-rationale-md`.\n\n## Use with `flutter test`\n\nUnlike most plugins it is possible to run code that uses `package:webcrypto`\nwith `flutter test`. For this to work the native library must be built in the\napplication folder where `flutter test` is called. This can be done with:\n\n```bash\n# Only necessary when package:webcrypto is used from 'flutter test'\n# This is not necessary for development with 'flutter run' and hot-reload\n$ flutter pub run webcrypto:setup\n\n# Now it's possible to run tests that uses package:webcrypto\n$ flutter test test/my_test_file_using_webcrypto.dart\n```\n\nThis requires:\n * `cmake`\n * a C compiler (like `gcc` or `clang`)\n * Linux or Mac.\n\nThe native library will be stored in `.dart_tool/webcrypto/` which should\n_not_ be under source control.\n\nIt is also possible to run tests with Flutter Web using\n`flutter test -p chrome`, this does not require any additional setup steps.\n\n## Limitations\nThis package has a few limitations compared to the\n[Web Cryptograph API][webcrypto-spec]. For a discussion of parity with\nWeb Cryptography APIs see `doc/webcrypto-parity.md`.\n\n * `deriveKey` is not supported, however, keys can always be created from\n    `derivedBits` which is supported.\n * `wrapKey` is not supported, however, keys can be exported an encrypted.\n * `unwrapKey` is not supported, however, keys can be decrypted and imported.\n * `AES-KW` is not supported because it does not support `encrypt`/`decrypt`.\n\n## Compatibility notes\nThis package has many tests cases to asses compatibility across the native\nimplementation using BoringSSL and various browser implementations of the\nWeb Cryptography APIs.\n\nAt the moment **compatibility testing is limited** to native implementation,\nChrome, Firefox and Safari.\n\n**Known Issues:**\n * Chrome and BoringSSL does not support valid ECDH spki-formatted keys exported\n   by Firefox prior to version 72.\n * Firefox does not support PKCS8 import/export for ECDSA and ECDH keys.\n * Firefox does not handle counter wrap around for `AES-CTR`.\n * Safari does not support P-521 for ECDSA and ECDH.\n * The browser implementation of streaming methods for _encryption_,\n   _decryption_, _signing_ and _verification_ buffers the entire input, because\n   `window.crypto` does not expose a streaming API. However, the native\n   implementation using BoringSSL does support streaming.\n\n## References\n\n * [Web Cryptograpy Specification][webcrypto-spec].\n * [MDN Web Crypto API][webcrypto-mdn].\n * [Chromium Web Crypto Source][chrome-src].\n * [BoringSSL Source][boringssl-src].\n * [BoringSSL Documentation][boringssl-docs].\n\n\n[window-crypto]: webcrypto-mdn\n[webcrypto-spec]: https://www.w3.org/TR/WebCryptoAPI/\n[boringssl-src]: https://boringssl.googlesource.com/boringssl/\n[boringssl-docs]: https://commondatastorage.googleapis.com/chromium-boringssl-docs/headers.html\n[dart-ffi]: https://api.dart.dev/stable/2.8.4/dart-ffi/dart-ffi-library.html\n[chrome-src]: https://chromium.googlesource.com/chromium/src/+/master/components/webcrypto\n[webcrypto-mdn]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API\n"
 },
 {
  "repo": "JHUISI/charm",
  "language": "C",
  "readme_contents": "Charm\n=====\n\n| Branch      | Status                                                                                                          |\n| ----------- | --------------------------------------------------------------------------------------------------------------- |\n| `dev`       | [![Build Status](https://travis-ci.org/JHUISI/charm.svg?branch=dev)](https://travis-ci.org/JHUISI/charm)        |\n| `dev-2.7`   | [![Build Status](https://travis-ci.org/JHUISI/charm.svg?branch=2.7-dev)](https://travis-ci.org/JHUISI/charm)    |\n\nCharm is a framework for rapidly prototyping advanced cryptosystems.  Based on the Python language, it was designed from the ground up to minimize development time and code complexity while promoting the reuse of components.\n\nCharm uses a hybrid design: performance intensive mathematical operations are implemented in native C modules, while cryptosystems themselves are written in a readable, high-level language.  Charm additionally provides a number of new components to facilitate the rapid development of new schemes and protocols.\n\nFeatures of Charm include:\n* Support for various mathematical settings, including integer rings/fields, bilinear and non-bilinear Elliptic Curve groups\n* Base crypto library, including symmetric encryption schemes, hash functions, PRNGs   \n* Standard APIs for constructions such as digital signature, encryption, commitments\n* A \u201cprotocol engine\u201d to simplify the process of implementing multi-party protocols\n* An integrated compiler for interactive and non-interactive ZK proofs\n* Integrated benchmarking capability\n\nDocumentation\n=============\nFor complete install, see our [documentation](https://jhuisi.github.io/charm/install_source.html). \n\nPull Requests\n=============\n\nWe welcome and encourage scheme contributions. If you'd like your scheme implementation included in the Charm distribution, please note a few things.\nSchemes in the dev branch are Python 3.x only and ones in the 2.7-dev branch are Python 2.x. For your scheme to be included in unit tests (`make test`), you must include a doctest at a minimum (see schemes in the charm/schemes directory). \n\nSchemes\n=======\nWe have provided several cryptographic scheme [examples](https://jhuisi.github.io/charm/schemes.html) to get you going. If this doesn't help, then feel free to reach us for questions and/or comments at support@charm-crypto.com.\n\nIf you're using Charm to implement schemes, we want to know what your experience is with our framework. Your feedback is very valuable to us! \n\nQuick Install & Test\n====================\nInstalling Charm from source is straightforward. First, verify that you have installed the following dependencies:\n* [GMP 5.x](http://gmplib.org/)\n* [PBC](http://crypto.stanford.edu/pbc/download.html) \n* [OPENSSL](http://www.openssl.org/source/)\n\nAfter that, you may proceed to install a basic configuration of Charm as follows:\n\n* `./configure.sh` (include `--enable-darwin` if running Mac OS X)\n* `make install` (may require super-user privileges)\n* `make test` (may also require super-user privileges)\n\nIf most (or all) Python tests pass, then the Charm installation was successful. Enjoy!\n\nLicensing\n=========\n\nCharm is released under an LGPL version 3 license due to libraries that we build on. See the `LICENSE.txt` for details.\n"
 },
 {
  "repo": "zhu-xb/AES-Cryptography",
  "language": "C#",
  "readme_contents": "# AES-Cryptography\nJAVA AES\u52a0\u89e3\u5bc6\u548c.NET AES\u52a0\u89e3\u5bc6\u5bf9\u6bd4\n\u6211\u4eec\u5728\u63a5\u6536JAVA\u53d1\u9001\u7684AES\u52a0\u5bc6\u5b57\u7b26\u4e32\u540e\uff0c\u5728.NET\u6ca1\u6709\u5bf9\u5e94\u7684KeyGenerator \u548c SecureRandom\u53bb\u751f\u6210AES \u7684 KEY\u503c\uff0c\u5bfc\u81f4\u65e0\u6cd5\u76f4\u63a5\u89e3\u5bc6\u3002\n\u5229\u7528IKVM\u7c7b\u5e93\uff0c\u5728.NET\u4e2d\u5bf9JAVA\u7684AES\u52a0\u5bc6\u5b57\u7b26\u4e32\u8fdb\u884c\u89e3\u5bc6\u5904\u7406\u3002\n"
 },
 {
  "repo": "google/fully-homomorphic-encryption",
  "language": "C++",
  "readme_contents": "# Fully Homomorphic Encryption (FHE)\n\nThis repository contains open-source libraries and tools to perform fully\nhomomorphic encryption (FHE) operations on an encrypted data set.\n\n**About Fully Homomorphic Encryption**\n\nFully Homomorphic Encryption (FHE) is an emerging cryptographic technique that\nallows developers to perform computations on encrypted data. This represents a\nparadigm shift in how data processing and data privacy relate to each other.\n\nPreviously, if an application had to perform some computation on data that was\nencrypted, this application would necessarily need to decrypt the data first,\nperform the desired computations on the clear data, and then re-encrypt the\ndata. FHE, on the other hand, simply removes the need for this\ndecryption-encryption steps by the application, all at once.\n\nIn practice, for an application that needs to perform some computation F on data\nthat is encrypted, the FHE scheme would provide some alternative computation F'\nwhich when applied directly over the encrypted data will result in the\nencryption of the application of F over the data in the clear. More formally:\nF(unencrypted_data) = Decrypt(F'(encrypted_data)).\n\nAs a result, FHE can have an enormous impact to our society. It can change the\nway computations are performed by preserving end-to-end privacy. For example,\nusers would be able to offload expensive computations to cloud providers in a\nway that cloud providers will not have access to the users' data at all.\n\nThe main hindrance for the adoption of FHE has been its very poor performance.\nDespite significant scientific improvements, performing computations on\nencrypted data using FHE is still orders of magnitude slower than performing the\ncomputation on the plaintext. On top of that, converting a program that operates\non unencrypted data to one that FHE-operates on encrypted data is far from being\na trivial translation. If not properly done, this translation can significantly\nincrease the performance gap between computing on unencrypted data and the \nFHE-computation on encrypted data, thus precluding wide FHE adoption.\n\n## FHE C++ Transpiler\n\nThe FHE C++ Transpiler is a general purpose library that converts C++ into\nFHE-C++ that works on encrypted input.\n\nThe transpiler has a modular architecture that allows varying the underlying FHE\nlibrary, the high-level program description and the output language as well. We\nhope that this flexibility will allow researchers from different fields to work\ntogether on this exciting goal of making FHE more efficient and broadly\napplicable.\n\nThe code, examples, and more information is in the [`transpiler`](./transpiler/)\nsubdirectory.\n\n## Support\n\nWe will continue to publish updates and improvements to the FHE library. We are\nnot yet accepting external contributions to this project. We will respond to\nissues filed in this project. If we ever intend to stop publishing improvements\nand responding to issues we will publish notice here at least 3 months in\nadvance.\n\n## Support disclaimer\n\nThis is not an officially supported Google product.\n\n## License\n\nApache License 2.0. See [`LICENSE`](./LICENSE).\n\n## Contact information\n\nWe are committed to open-sourcing our work to support your use cases. We want to\nknow how you use this library and what problems it helps you to solve. We have\ntwo communication channels for you to contact us:\n\n* A [public discussion group](https://groups.google.com/g/fhe-open-source-users)\nwhere we will also share our preliminary roadmap, updates, events, and more.\n\n* A private email alias at\n[fhe-open-source@google.com](mailto:fhe-open-source@google.com)\nwhere you can reach out to us directly about your use cases and what more we can\ndo to help and improve the library.\n\nPlease refrain from sending any sensitive or confidential information. If you\nwish to delete a message you've previously sent, please contact us.\n\n## Contributors\n\nThe contributors to this project are (sorted by last name):\n\n- [Eric Astor](https://github.com/ericastor)\n- [Damien Desfontaines](https://desfontain.es/serious.html)\n- Christoph Dibak\n- [Alain Forget](https://people.scs.carleton.ca/~aforget/)\n- [Bryant Gipson](https://www.linkedin.com/in/bryant-gipson-33478419)\n- [Shruthi Gorantala](https://github.com/code-perspective) (Lead)\n- [Miguel Guevara](https://www.linkedin.com/in/miguel-guevara-8a5a332a)\n- [Aishwarya Krishnamurthy](https://www.linkedin.com/in/aishe-k)\n- Sasha Kulankhina\n- [William Lam](https://www.linkedin.com/in/william-m-lam)\n- [David Marn](http://dmarn.org)\n- [Rafael Misoczki](https://www.linkedin.com/in/rafael-misoczki-phd-24b33013)\n- Bernat Guill\u00e9n Pegueroles\n- [Milinda Perera](https://milinda-perera.com)\n- [Sean Purser-Haskell](https://www.linkedin.com/in/sean-purser-haskell-30b5268)\n- [Sam Ruth](https://www.linkedin.com/in/samuelruth)\n- [Rob Springer](https://github.com/RobSpringer)\n- [Yurii Sushko](https://www.linkedin.com/in/midnighter)\n- [Cameron Tew](https://github.com/cam2337)\n- [Royce Wilson](https://research.google/people/RoyceJWilson)\n- [Xinyu Ye](https://github.com/xinyuye)\n- [Itai Zukerman](https://github.com/izuk)\n- [Iliyan Malchev](https://github.com/malchev)\n"
 },
 {
  "repo": "frankmorgner/openpace",
  "language": "C",
  "readme_contents": "# OpenPACE *- Cryptographic library for EAC version 2*\n\nOpenPACE implements Extended Access Control (EAC) version 2 as specified in\nBSI TR-03110. OpenPACE comprises support for the following protocols:\n\n- **Password Authenticated Connection Establishment (PACE)** Establish a secure\n  channel with a strong key between two parties that only share a weak secret.\n- **Terminal Authentication (TA)** Verify/prove the terminal's certificate (or\n  rather certificate chain) and secret key.\n- **Chip Authentication (CA)** Establish a secure channel based on the chip's\n  static key pair proving its authenticy.\n\nFurthermore, OpenPACE also supports Card Verifiable Certificates (CV\nCertificates) as well as easy to use wrappers for using the established secure\nchannels.\n\nThe handlers for looking up trust anchors during TA and CA (i.e. the CVCA\nand the CSCA certificates) can be customized. By default, the appropriate\ncertificates will be looked up in the file system.\n\nOpenPACE supports all variants of PACE (DH/ECDH, GM/IM), TA\n(RSASSA-PKCS1-v1_5/RSASSA-PSS/ECDSA), CA (DH/ECDH) and all standardized\ndomain parameters (GFP/ECP).\n   \n\nOpenPACE is implemented as C-library and comes with native language wrappers\nfor:\n\n- Python\n- Ruby\n- Javascript\n- Java\n- Go\n\n[![GitHub Ubuntu CI status](https://img.shields.io/github/workflow/status/frankmorgner/openpace/Ubuntu%20CI/master?label=Ubuntu&logo=github)](https://github.com/frankmorgner/openpace/actions/workflows/ubuntu.yml?branch=master) [![GitHub macOS CI status](https://img.shields.io/github/workflow/status/frankmorgner/openpace/macOS%20CI/master?label=macOS&logo=github)](https://github.com/frankmorgner/openpace/actions/workflows/macos.yml?branch=master) [![AppVeyor Windows CI status](https://img.shields.io/appveyor/ci/frankmorgner/openpace/master.svg?label=Windows&logo=appveyor)](https://ci.appveyor.com/project/frankmorgner/openpace) [![Coverity Scan CI Status](https://img.shields.io/coverity/scan/1789.svg?label=Coverity%20Scan)](https://scan.coverity.com/projects/1789) [![LGTM CI status](https://img.shields.io/lgtm/grade/cpp/github/frankmorgner/openpace?logo=lgtm)](https://lgtm.com/projects/g/frankmorgner/openpace/context:cpp)\n\nPlease refer to [our project's website](http://frankmorgner.github.io/openpace/) for more information.\n\n## License\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](http://www.gnu.org/licenses/gpl-3.0)\n\n## Tested Platforms\n\n- Windows\n- Linux (Debian, Ubuntu, SUSE, OpenMoko)\n- FreeBSD\n- Mac OS\n- Solaris\n- Android\n- Javascript\n"
 },
 {
  "repo": "mimblewimble/grin",
  "language": "Rust",
  "readme_contents": "[![Build Status](https://dev.azure.com/mimblewimble/grin/_apis/build/status/mimblewimble.grin?branchName=master)](https://dev.azure.com/mimblewimble/grin/_build/latest?definitionId=1&branchName=master)\n[![Coverage Status](https://img.shields.io/codecov/c/github/mimblewimble/grin/master.svg)](https://codecov.io/gh/mimblewimble/grin)\n[![Chat](https://img.shields.io/gitter/room/grin_community/Lobby.svg)](https://gitter.im/grin_community/Lobby)\n[![Support](https://img.shields.io/badge/support-on%20gitter-brightgreen.svg)](https://gitter.im/grin_community/support)\n[![Documentation Wiki](https://img.shields.io/badge/doc-wiki-blue.svg)](https://github.com/mimblewimble/docs/wiki)\n[![Release Version](https://img.shields.io/github/release/mimblewimble/grin.svg)](https://github.com/mimblewimble/grin/releases)\n[![License](https://img.shields.io/github/license/mimblewimble/grin.svg)](https://github.com/mimblewimble/grin/blob/master/LICENSE)\n\n# Grin\n\nGrin is an in-progress implementation of the Mimblewimble protocol. Many characteristics are still undefined but the following constitutes a first set of choices:\n\n  * Clean and minimal implementation, and aiming to stay as such.\n  * Follows the Mimblewimble protocol, which provides hidden amounts and scaling advantages.\n  * Cuckoo Cycle proof of work in two variants named Cuckaroo (ASIC-resistant) and Cuckatoo (ASIC-targeted).\n  * Relatively fast block time: one minute.\n  * Fixed block reward over time with a decreasing dilution.\n  * Transaction fees are based on the number of Outputs created/destroyed and total transaction size.\n  * Smooth curve for difficulty adjustments.\n\nTo learn more, read our [introduction to Mimblewimble and Grin](doc/intro.md).\n\n## Status\n\nGrin is live with mainnet. Still, much is left to be done and [contributions](CONTRIBUTING.md) are welcome (see below). Check our [mailing list archives](https://lists.launchpad.net/mimblewimble/) for the latest status.\n\n## Contributing\n\nTo get involved, read our [contributing docs](CONTRIBUTING.md).\n\nFind us:\n\n* Chat: [Keybase](https://keybase.io/team/grincoin), more instructions on how to join [here](https://grin.mw/community).\n* Mailing list: join the [~Mimblewimble team](https://launchpad.net/~mimblewimble) and subscribe on Launchpad.\n* Twitter for the Grin council: [@grincouncil](https://twitter.com/grincouncil)\n\n## Getting Started\n\nTo learn more about the technology, read our [introduction](doc/intro.md).\n\nTo build and try out Grin, see the [build docs](doc/build.md).\n\n## Philosophy\n\nGrin likes itself small and easy on the eyes. It wants to be inclusive and welcoming for all walks of life, without judgement. Grin is terribly ambitious, but not at the detriment of others, rather to further us all. It may have strong opinions to stay in line with its objectives, which doesn't mean disrespect of others' ideas.\n\nWe believe in pull requests, data and scientific research. We do not believe in unfounded beliefs.\n\n## Credits\n\nTom Elvis Jedusor for the first formulation of Mimblewimble.\n\nAndrew Poelstra for his related work and improvements.\n\nJohn Tromp for the Cuckoo Cycle proof of work.\n\n## License\n\nApache License v2.0.\n"
 },
 {
  "repo": "MrChrisJ/World-Citizenship",
  "language": "Standard ML",
  "readme_contents": "# World Citizenship - Creating Affordable Decentralised Passport Services Using Available Cryptographic Tools\n\n**Disclaimer**:  \n*Due to recent press coverage I\u2019d like to remind everyone that this project* ***is an experiment and learning exercise*** *for experts in the field of cryptography. Remember blockchains are distributed, immutable databases. Don\u2019t put anything in to them that you wouldn\u2019t want to last forever*. ***Please use these tools your own risk and read [Issues section](https://github.com/MrChrisJ/World-Citizenship/issues) before trying anything yourself.***  \n\n**[Proof of Initial Publication 17th October 2014](http://www.cryptograffiti.info/?txnr=1247)**\n\n**Donations**  \nIf you want to donate to the expenses address:  \n[1B9c5V8Fc89qCKKznWUGh1vAxDh3RstqgC](https://blockchain.info/address/1B9c5V8Fc89qCKKznWUGh1vAxDh3RstqgC)  \n*It only needs topping up now and then, just 20mBTC or so would be lovely*  \n\nIf you want to donate to me personally I\u2019d be very grateful and it will go towards my coffee addiction:  \n[13U4gmroMmFwHAwd2Sukn4fE2WvHG6hP8e](https://blockchain.info/address/13U4gmroMmFwHAwd2Sukn4fE2WvHG6hP8e)   \n\n## Goal\n\nThe goal of this project is to learn and layout a simple process for anyone in the world to create their own Private Passport Service that can be used to validate and prove the existence of other persons using nothing but available tools.\n\nWe will prefer open source where available and we will draw on the cryptographic tools like \"Pretty Good Privacy\" (PGP) which utilizes public key cryptography, and blockchain technology in the form of Bitcoin.\n\nBy doing this we aim to give people across the world the ability to grant one another World Citizenship by virtue of their being witnessed in space and in time. This witnessing can be documented with photography and video, that content can be signed with PGP signatures, hashed and timestamped. It can then be joined with Social Network Validation services like [Onename.io](https://onename.io) & [Keybase.io](https://keybase.io/)\u00a0before being plugged in to more dynamic reputation systems.\n\nFirst and foremost this is a learning exercise to discover whether the currently available open source cryptographic tools are up to the task of a global social network.\n\n**What this is *not***  \nThis is not a Web of Trust or an attempt to build a dynamic reputation system. The aim with this project is to do one thing really well; to create an affordable ID Card that makes an unfalsifiable claim as to the existence of person. We will take a modular approach when scaling out in to areas such as identity management and smart contracts. This cannot prove that a person does not have multiple identities, but simply that they existed at a certain point in time.\n\n## Apparatus\n\n1. Laptop x2 (one belongs to organisers and the other to our new citizen)\n2. Webcam\n3. PGP Software [Mac](https://gpgtools.org/) | [Windows](http://www.gpg4win.org/)\n4. [Bitcoin wallet](https://bitcoin.org/en/choose-your-wallet)\n5. Printer\n6. Laminator\n7. Cool looking [World Citizen Passport design](https://github.com/MrChrisJ/World-Citizenship/blob/master/Prototyping/20141024_BitNation_Meetup_London/Prototype_03/BN_PASSPORT_TEMPLATE_2.png)\n8. Commercial Venue\n\n## Method\n\n### Step 1 - Precognition\nA determined group of forward thinking cypherpunks arrange a meet-up in their local area using a service like [meetup.com](http://www.meetup.com/) or [Eventbrite](https://www.eventbrite.co.uk/).  \n\nThe key responsibility of the organisers is to create an ID Document according to the protocol laid out here. A successful Blockchain ID Card is one that adheres to the protocol by leaving an unfalsifiable claim as to the existence of another.  \n\nWe achieve this by embedding a trail of evidence that are immutable and unfalsifiable. They are:\n- The Merkle Root presented on the ID Card\n- The PGP Signature and corresponding SHA-256 digests\n- The publishing of the on the blockchain\n\nNo fraud or even a committee of liars is able to make untrue claims about any of the three variables above. \n\nThe event page should layout the following:   \n\n1. The purpose of the meet-up and why you should care (give people a reason to turn up)\n2. Lots of learning material clearly laid out like this video series from [Khan Academy](https://www.khanacademy.org/computing/computer-science/informationtheory/info-theory/v/intro-information-theory)\n  1. An industrious group may wish to join a wiki in which they can share resources and feedback with a global network of events.  \n3. Clearly communicate what is expected of any potential participants and put them at ease; if it\u2019s their first time they can choose to just watch and be a witness.  \n\n### Step 2 - Finding a Venue  \nWe recommend the use of commercial venues so that we can prove our existence in place and space without infringing on an individual\u2019s privacy. Because the venue is commercial it will have a vested interest in advertising its location.  \n\n![Ace Hotel](https://github.com/MrChrisJ/World-Citizenship/blob/master/Media/Ace-Hotel-Exterior-450px.jpg)\n\nLook for established businesses with good reputations and that are well known in the surrounding area.  \n\n**Good examples of venues:**  \n\n* Hotels\n* Bars, especially ones that are popular among locals\n* Town Halls & Community Centres\n* Co-Working spaces owned by reputable franchise e.g. Google Campus\n* Law Firms\n* Passport Offices (why not ask an official to sign your PGP Key along with a scan of your government ID card?)  \n* Airports with public WIFI\n\n**Businesses and venues to avoid:**  \n\n* Industrial estates (businesses in these areas are often not well known and smaller units have high turnover)\n* Companies using serviced offices\n* Retailers in shopping malls \n\nAvoid any business that doesn\u2019t have firm roots within the local community. This is important because once the ID is issued its origin must be subject to scrutiny.  \n\nThe business also needs to be willing for you to publish their IP Address on the blockchain. There shouldn\u2019t be any reason why they are not okay with this but you must ask. \n\n#### Step 2a - Registering the Venue - Optional\nFor added security they can also have the proprietor of the venue sign up for a Blockchain ID and have them sign a message on social media enclosing their IP Address, like so:\n<pre>\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nMy name is Bob and I am the manager of the Crypto Kings Hotel Ltd\n\nCheckout our business on Google Maps:\nhttps://plus.google.com/100282243006931582046/posts/8UisBzgLTMi\n(Post contains a copy of signed message with same key)\n\nThis is our IP Address: 127.0.0.1\nhttp://www.ipligence.com/geolocation\n-----BEGIN PGP SIGNATURE-----\nVersion: Keybase OpenPGP v1.1.3\nComment: https://keybase.io/crypto\n\nwsBcBAABCgAGBQJUXCQeAAoJEOw2pfEsR+bQUrUH/Rz4n/TCeMB82l8FciY143t5\n8aa1FpwUtCn1BWgjhdM+EDnaoxY1KF0kA2mwBkjmhWFAfwgvsjevJfEWeXWC2exO\nT9xBo8kp2Y4tgRjNCEF9bpZFHQcu8Feihi41COUp7gY5FbAsUp0HgOm/M5t8dlE0\nolkvAT53EldI6kz6El5POF1SbqIYgsN+IJ3NySHFIgiK+ht15F6aofRUuMInmjmO\nrROJ/uje3fjXNoUacfyDgWFfEh+kr64Od7IUDEp87+I4FASNLRasmgls+5vKB2lw\n3xbJtDTH2yBkG58Y8J3XKWnm01Tz4ez03NKsajYVPq8vJkhQI0hEREs8GkUPN9Q=\n=H9SY\n-----END PGP SIGNATURE-----  \n</pre>\nThe IP address can then be verified using services like [ipligence.com](http://www.ipligence.com/geolocation) and corroborated with the address as advertised on Google Maps and other classifieds even at a distance. Note that the more public reviews and brand presence the business has the more robust the Identity Cards will be.\n\nSee [point-of-presence](http://en.wikipedia.org/wiki/Point_of_presence) and a [post by @Patcon](https://github.com/MrChrisJ/World-Citizenship/issues/11#issuecomment-62050481) in the Issues Section for more information on this topic.  \n\n### Step 3 - The Day of the Meet-up\nA group of soon-to-be World Citizens and onlookers arrive the venue bringing with them their laptop and an eagerness to learn.  \n\nThe atmosphere should be relaxed but formal with an emphasis on the exchange of knowledge about the tools and how to use them.   \n\n### Step 4 - Tutorial on Operational Security\n*This can also be hosted as a separate event*  \n\nBefore the IDs are made there should be a brief tutorial in operational security, best practice like how to manage keys and demonstrations of [Password Managers](https://lastpass.com/) etc.  \n\nThe content should be engaging and inspire the audience to learn more for themselves rather than making them dependent on experts in the future. Make use of available resources like this:  \n\n![Correct Horse XKCD](http://imgs.xkcd.com/comics/password_strength.png)\n[*Image courtesy of XKCD*](http://xkcd.com/936/)  \n*The more interesting and relevant the material the better*\n\nFacilitate discussion breakouts among the group, encourage them to help one another understand especially if one person is struggling to keep up. Often another student only one rung higher is better able to lift someone up than someone at the top of the ladder.   \n\nShow them interactive tools like [How Big Is Your Haystack](https://www.grc.com/haystack.htm) and [How Secure is My Password?](https://howsecureismypassword.net/) so they can get a sense of what makes a good password and understand the concepts like randomness versus unpredictability. \n\nOther suggestions:  \n- Invite students to take part in a \u2018password competition\u2019 where students have to submit hard passwords.\n- Show techniques hackers use to crack passwords using [rainbow lists](http://en.wikipedia.org/wiki/Rainbow_table)\n- Teach principles like: the more you change the harder it will be to manipulate your data\n\nThe last point being important to understand. The majority of security breaches are a result of human failure and the tendency to fall in to a routine. The more predictable we are the easier it is for an adversary to break in to our private data stores.  \n\nTheir laptop can be also given a security audit also if they wish. \n\nVideos will have been made available to them before the meet up see [Step 1](https://github.com/MrChrisJ/World-Citizenship#step-1) but **it\u2019s important for the organisers to get a sense of how the students  understand the concepts so that they go in to the ID generation process with their eyes open**. If a student does not appear to understand what they are about to do they should be refused an ID card be advised to a witness at the event only.  \n\n### Step 4 - Making a New PGP Key\nAttendees then go to a private location with their laptop and generate a new PGP Key that is preferably air gapped. Products like the [Crypto-Stick](https://www.crypto-stick.com/) or [YubiKey Neo](https://www.yubico.com/2012/12/yubikey-neo-openpgp/) can be offered for sale.  \n\nIf someone attends with an existing PGP Key that has long been in use they should be advised to set up a new one and simply sign the old key with the one generated at the event <sup>[[1](https://github.com/MrChrisJ/World-Citizenship#1)]</sup>\n\n### Step 5 - Taking the Photograph - Optional\n*For further discussion on use of Biometrics see [Issue #22](https://github.com/MrChrisJ/World-Citizenship/issues/22)*  \n*Remember Blockchain IDs are voluntary. People should not be forced to have their photo taken. Additional options like reading the PGP Fingerprint in to a good quality sound recorder should also be offered.*  \n\nAttendees participate in a group photo that can be cropped down to make each individual passport photo.  \n\nFor added traceability and verification the merkle root<sup>[[2](https://github.com/MrChrisJ/World-Citizenship#2)]</sup> of the latest Bitcoin block can be written down on a sheet of paper and be held up by one of the members of the group.  \n\nThe exact location and direction in which the group photo is taken may display the most uniquely identifiable element(s) of the environment in which the meet-up takes place (landmarks, buildings, etc.) to provide a additional reference to the geographical location.  \n\n**Photograph Guidelines**  \nMake sure the light is even and the subjects in the photo are facing directly towards the camera. You can observe [existing guidelines](https://www.gov.uk/photos-for-passports) on passport photo poses to make sure people are recognisable.\n\n![Ace Hotel](https://github.com/MrChrisJ/World-Citizenship/blob/master/Media/Example-Portrait.jpg)\n\nIf using an SLR Camera it is advised to use JPG format with medium compression at the highest resolution. Do not use Camera RAW or Tiff file types <sup>[[3](https://github.com/MrChrisJ/World-Citizenship#3)]</sup>.  \n\n### Step 6 - Preparing the ID Document\n*Please follow these steps carefully to ensure making a secure ID Card*  \n\nThe contents of the ID Card are laid out in an  XML or JSON<sup>[4](https://github.com/MrChrisJ/World-Citizenship#4)</sup>  document. If the content is placed inside of a JSON file the binary data of the JPG image can also be added making the signing process in the next step easier.   \n\nThe contents is listed here in the order of importance:  \n\n1. PGP Fingerprint - *A 64-bit fingerprint looks like this: 8181 3268 159E 51D1*\n2. Merkle Root of the latest Bitcoin block *which can be obtained from [Blockchain.info](https://blockchain.info/) or [Bitpay](https://insight.bitpay.com/)*\n3. Block number that corresponds to the merkle root above *for convenience in cases of manual lookup*\n4. Timestamp using [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) *yyyy-mm-dd\u2014hhmm* \n5. Name or pseudonym<sup>[5](https://github.com/MrChrisJ/World-Citizenship#5)</sup> of the owner of the key \n6. Photograph *optional*\n7. PGP Key technical details\n8. Link to Social Media Authentification Service e.g. [Keybase](https://keybase.io/)\n9. The name of the venue and the IP Address\n10. QR Code placeholder *a QR code will be added later with a link to the blockchain reference for the hashes to the document*\n\nNote only items 1 and 2 are necessary to achieve verification of the document. The event itself can have its own identifier, organisers can use the url of the meet up page if they wish but this should be permalink so consider the likely longevity of the site.  \n\nThe document could look something like this one laid out using CSS or a graphic design software like [GIMP](http://www.gimp.org/):  \n\n![Blockchain Passport](https://github.com/MrChrisJ/World-Citizenship/blob/master/Media/Passport-Layout-01.png)\n\n### Step 7 - Proof of Publication\nThe PGP key of the organiser and the new key holding world citizen is then used to publicly sign the completed XML or JSON document and its corresponding image/media files.  \n\nWe then produce [SHA-256](http://en.wikipedia.org/wiki/Secure_Hash_Algorithm) hashes of the following files:\n\n1. JSON/XML file\n2. JPG file cropped of individual\n3. JPG of Group Photo\n4. PGP Detached Signature file\n\nWe can do this in Terminal using the following command using [OpenSSL](http://perso.crans.org/~raffo/docs/openssl-qref.pdf):  \n\n    openssl dgst -sha256 filename.jpg  \n\nThis will produce text to enter the blockchain it should look something like this:\n\n<pre>\n3b2a836fa09d22f549016febb8dbf163ee7cf5b0f945e8f940a9d9d3d0e6f37c\nb115a8912e005bac4e19705efbe33ed5d83dbfbb4c27dea3899d037263188f67\n2431f992fb40ff124a8e1070b33627088ed51ff33ca7e03e1fe0f39d93c856f0\nIP\u00a0127.0.0.0\nCrypto King Hotel\n</pre>\n\nWe then use a blockchain notary service called [CryptoGraffiti](http://www.cryptograffiti.info/)  also consider [Viacoin](http://viacoin.org/) and [Namecoin](http://namecoin.info/).\n\n**We do NOT recommend putting personal identifiable information of the attendants in to the blockchain**. Remember that you are dealing with a distributed database that is permanent and unchangeable.\n\n### Step 8 - Printing the Document\nThe document is printed out and presented in a cool Passport Design. Because the document is headless the data in the interchange format such as the JSON file can be branded as BitNation, World Crypto Network or anyway the new citizen wishes it to be. \n\nThe person is recognised as a World Citizen by the adherence to the protocol not by the branding of the passport which will be a stylistic choice like where you get your coffee.\n\n### Finishing Up - Key Signing Party & Dynamic Reputation Systems\nYou have now made a claim to the wider network of non attendants that you have proved the existence of a new world citizen at this point in space and time. For the documents to be honoured their PGP keys have to mature. Your responsibility as the organiser is to leave clear traceability and evidence so that actors at a distance can independently verify the existence for themselves. We start with Key Signing\u2026\n\nParticipants are encouraged to sign other people\u2019s PGP Keys like at a regular [key signing party](http://en.wikipedia.org/wiki/Key_signing_party). This is to confirm that they Keys and their Fingerprints were shared face to face. Signing someone\u2019s key is not a claim on their personal character or reputation. Only that they are a person in control of the key being signed.  \n\nKey holders can also create accounts with a Social Network Authentication services. We suggest:   \n- [Onename.io](https://onename.io/) - which uses tight integration with the [Namecoin Blockchain](http://namecha.in/name/u/chrisellis) out of the box.\n- [Keybase](https://keybase.io/)  - which has better PGP integration\n\nThere\u2019s no reason why both cannot be used. Services like these validate social media identities of the participants and plug their new key in to more dynamic reputation systems.  \n\n## Overview  - The Sciency Bit\n*Let\u2019s take a look at what we\u2019ve just done*  \n\n1. By including the Merkle Root of the latest block in to the ID Card we prove that the document cannot have been created in this state any time prior to the latest block.\n2. By signing the Passport with a PGP key we bind the state of the document to its cryptographic signature preventing us from changing its contents without detection.\n3. By stamping the SHA-256 digest of the resulting ID Card in to the blockchain we prove that it existed in this state at no time later than the latest block.\n  - The ID card is now locked in creation timeframe of approximately 20 to 40 minutes between the two blocks being discovered in steps 1 and 3.\n5. By publishing the venue\u2019s Bitcoin IP addresses we prove that it was created in this place<sup>[6](https://github.com/MrChrisJ/World-Citizenship#6)</sup>.  \n\nNote: we do not use GPS data, it is read only and can easily be spoofed.\n\nBecause Bitcoin nodes collect IP data in the debug.log file it should be possible for local nodes to confirm the transaction\u2019s IP Address although this data is not commonly shared and opens up potential security risks. More work is being done on this see [Issue #11](https://github.com/MrChrisJ/World-Citizenship/issues/11#issuecomment-62050481).\n\n## Similar Projects\nIt has been brought to my attention that this project is similar to other attempts in the past. What is important is that this idea be allowed to emerge without the need for ownership from one group.\n\n##### [CheapID - State In A Box - Identity Services Architecture](http://guptaoption.com/4.SIAB-ISA.php)\n*Proposed by Vinay Gupta*  \n\n##### [Bitcoin Web of Trust](http://bitcoin-otc.com/trust.php)\nA functioning web of trust used in Over the Counter (OTP) bitcoin trading using PGP.  \n\n##### [New Bitcoin Deed System Launches](http://qntra.net/2014/11/new-bitcoin-deed-system-launches/)\nThis project proposes combining PGP with Blockchain technologies in a similar way.  \n\n##### [IDCoin](https://github.com/IDCoin/IDCoin)\nIDCoin by David Duccini fleshes out a Web of Trust model alluded to in the [Finishing Up section](https://github.com/MrChrisJ/World-Citizenship/blob/master/ReadMe.md#finishing-up).\n\n## Criticisms and Feedback\n\nAs a proof of concept we need to look at both the appropriateness of the current tools and also the ethics of this project. First thoughts are as follows:\n\n1. The brave new world citizens must fully understand what they are involving themselves in and must be educated such that they can make a voluntary decision about such an open and public gesture. This may not be right for many people who risk personal safety by being so exposed. The benefit of Public Private Key Cryptography of course is that we do have granularity when it comes to the revealing of the cryptographic digests and their corresponding contents but more needs to be done.  \n  1. When putting this together the radical shift in public behaviour in recent years on social network would indicate that people are happy to publish pictures of themselves and for that personal identifiable content to be domiciled on third party servers owned by private corporations. Consideration should be given to whether the public are \n2. The \u201cWorld Passport\u201d only contains the name which can be a pseudonym and a photo of the individual for future offline verification and not their Date of Birth or Gender as I am trying to keep this as simple and elegant as possible. Any \u2018rich data\u2019 which is more social in its nature should be placed in to the social networking sphere and the reputation systems which should be tailored to voluntary agreements between community members. In fact the person\u2019s legal identity may not even be necessary and they could be given a name based on the randomness of the Merkle Root for example or the Fingerprint.\n3. An Expiry Date is included as a feature and should be thought carefully about. It is possible that someone could have their PGP key stolen and it\u2019s important that the right intervals of time are chosen so that they can \u201ccheck-in\u201d to such meet ups on a regular enough basis that they can publicly revoke old keys. The hope is that by bringing down the cost of providing such a service all over the world registering yourself will become effortless.\n4. We should think carefully before thinking about how biometrics can be used. It would not be wise to leave biometric data out in the open in plain text as it could be used by another. However if it could be salted or hashed with another string and if it can only be implemented at certain times and places according to protocol then it could be used as a kind of Seed which could generate other identities.\n5. The citizens could also use the meet up as an opportunity to prove other identities like BitMessage addresses in case they are a journalist for example and want to prove that this secure drop for whistle blowers is going to send content to where they say it will.\n6. One person multiple identities may also be an issue but not if we accept this as a feature of the system and do not misattribute what we are using these passports for. It is already possible to have multiple passports even from the same country if you know what to do.\n7. **Also published here:** [https://docs.google.com/a/chrisellis.me/document/d/1hq52GT0sQ8mJBZ3_qr-LIpZTBFqIDA2WV8vb_1m8i4U/edit#bookmark=id.tukd0op21duu](https://docs.google.com/a/chrisellis.me/document/d/1hq52GT0sQ8mJBZ3_qr-LIpZTBFqIDA2WV8vb_1m8i4U/edit#bookmark=id.tukd0op21duu) - This project was forked and first used by [BitNation](http://www.bitnation.co/).  \n\n## Footnotes\n###### 1\nThis is because we want to deter the theft of keys (someone could steal someone\u2019s Blockchain ID PGP Key and try to reuse the same key with their identity.\n\n###### 2\nThe Merkle Root is a highly uncertain number produced in every bitcoin block, it is generated by sum that combines the strict sequence of transactions. It not only contains psuedorandomness from the block hashes but also the human economic activity throughout the network.  \n\nBy displaying the merkle root in any media you are proving you have knowledge of a highly entropic event which confirms the media cannot have existed in that form any time prior.  \n\nLearn more about the Merkle Root here: [Bitcoin 101](https://www.youtube.com/watch?v=gUwXCt1qkBU) and on the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page).\n\n###### 3\nThis is because even though RAW files are read only they are subject to manipulation at the byte level that is hard to detect. As a research topic we should consider the unique signature created by Camera\u2019s CCD chips which can be used as an extra proof. In addition if the image is taken in JPG format we can employ [Error Level Analysis](http://fotoforensics.com/tutorial-ela.php) to [detect any post production](http://29a.ch/sandbox/2012/imageerrorlevelanalysis/) as lossy compression will add additional artefacts to the image content.\n\n###### 4\nThe preferred use of JSON has been talked about in [Issue #15](https://github.com/MrChrisJ/World-Citizenship/issues/15)\n\n###### 5\nThe Blockchain ID is a voluntary system. The trust of a PGP Key is backed not by the legal identity, birth name of the individual or their ethnic origin but rather by the ability to build a reputation over time that will be verifiable by the key.\n\n###### 6\nIn this proposal we recommend proving a place in order to get to the space. This means we distinguish the two. Put simply space is the same in every direction, it\u2019s undifferentiated and allows room for the movement of life. Space is often represented using a grid with co-ordination tools like GPS.  \n\nPlace in contrast is differentiated and contextual, two places are not equivalent in the same way space is. A place is a site that people can attach memories to <sup>[see Proust](http://en.wikipedia.org/wiki/In_Search_of_Lost_Time#Memory)</sup> and find meaning in. [Learn more](http://www.sscnet.ucla.edu/geog/downloads/856/416.pdf).  \n\n\n\n## Licence\nThis work is licensed under a [Creative Commons  CC0 1.0 Universal](http://creativecommons.org/publicdomain/zero/1.0/). \n\n"
 },
 {
  "repo": "rtyler/PyECC",
  "language": "C",
  "readme_contents": "PyECC: Python Elliptical Curve Cryptography\n============================================\n\nPyECC is a Python module wrapped around the ``libseccure`` library which itself is \nbased off of code developed originally for the `seccure(1) utility <http://point-at-infinity.org/seccure/>`_.\n\nBuild and Install\n-----------------\n\nSince PyECC uses `setuptools <http://pypi.python.org/pypi/setuptools>`_ to build and \ninstall the PyECC module and corresponding library, you need to run:: \n    \n    % sudo python setup.py install\n\n\nAuthor(s)\n---------\n\nPyECC was developed by R. Tyler Ballance (``tyler@slide.com``) at `Slide, Inc. <http://slide.com>`_. \nThe original seccure(1) binary however was developed by B. Poettering.\n"
 },
 {
  "repo": "windard/sm4",
  "language": "JavaScript",
  "readme_contents": "\n## \u56fd\u5bc6\u7b97\u6cd5\n\n\u56e0\u6700\u8fd1\u4e00\u4e2a\u9879\u76ee\u9700\u8981\u7528\u5230\u56fd\u5bc6\u7b97\u6cd5\uff0c\u6240\u4ee5\u5728\u7f51\u4e0a\u627e\u4e86\u4e00\u4e0b\u56fd\u5bc6\u7b97\u6cd5\u7684\u76f8\u5173\u8d44\u6599\u3002\u56fd\u5bc6\u7b97\u6cd5\u5e76\u4e0d\u662f\u7279\u6307\u4e00\u79cd\u7b97\u6cd5\uff0c\u800c\u662f\u6307\u56fd\u5bb6\u5bc6\u7801\u5c40\u8ba4\u5b9a\u7684\u56fd\u4ea7\u5bc6\u7801\u7b97\u6cd5\u3002\u5b83\u5305\u62ec SM2,SM3,SM4 \u7956\u51b2\u4e4b\u7b97\u6cd5\u7b49\u4e00\u7cfb\u5217\u7b97\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003~~[\u8fd9\u7bc7\u516c\u544a](http://www.oscca.gov.cn/News/201204/News_1228.htm)~~\uff0c[\u56fd\u5bb6\u5bc6\u7801\u7ba1\u7406\u5c40\u5173\u4e8e\u53d1\u5e03\n\u300a\u7956\u51b2\u4e4b\u5e8f\u5217\u5bc6\u7801\u7b97\u6cd5\u300b\u7b496\u9879\u5bc6\u7801\u884c\u4e1a\u6807\u51c6\u516c\u544a](http://www.sca.gov.cn/sca/xwdt/2012-03/21/content_1002392.shtml)\u8bf4\u660e\u3002\n\n> \u5efa\u8bae\u5148\u9605\u8bfb\u4e86\u89e3\u4e00\u4e0b\u5173\u4e8e\u73b0\u4ee3\u5bc6\u7801\u7684\u57fa\u7840\u77e5\u8bc6\u3002[\u5bc6\u7801\u53d1\u5c55\u53f2\u4e4b\u8fd1\u73b0\u4ee3\u5bc6\u7801](http://www.sca.gov.cn/sca/zxfw/2017-04/24/content_1011711.shtml)\n\n\u5728\u7f51\u4e0a\u4e5f\u6709\u4e0d\u5c11\u56fd\u5bc6\u7b97\u6cd5\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u8bf4 \u5317\u4eac\u5927\u5b66\u4fe1\u606f\u5b89\u5168\u5b9e\u9a8c\u5ba4 \u5f00\u53d1\u548c\u7ef4\u62a4\u7684 [GmSSL](http://gmssl.org/) \uff0c\u5b83\u662f\u652f\u6301\u56fd\u5bc6\u7b97\u6cd5\u548c\u6807\u51c6\u7684 openSSL \u5206\u652f\uff0c\u5176\u4ee3\u7801\u6258\u7ba1\u5728 [https://github.com/guanzhi/GmSSL](https://github.com/guanzhi/GmSSL) \u4e0a\u3002\n\n### sm2\n\n\u56fd\u5bc6\u7b97\u6cd5 SM2 \u662f\u516c\u94a5\u7b97\u6cd5\uff0c\u5373\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\uff0c\u7c7b\u4f3c\u4e8e RSA\uff0c\u4e0d\u8fc7 RSA \u662f\u57fa\u4e8e\u5927\u7d20\u6570\u5206\u89e3\u95ee\u9898\uff0cSM2 \u662f\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u95ee\u9898\u3002\n\n[\u56fd\u5bb6\u5bc6\u7801\u7ba1\u7406\u5c40\u5173\u4e8e\u53d1\u5e03\n\u300aSM2\u692d\u5706\u66f2\u7ebf\u516c\u94a5\u5bc6\u7801\u7b97\u6cd5\u300b\u516c\u544a](http://www.oscca.gov.cn/sca/xxgk/2010-12/17/content_1002386.shtml)\n\n### sm3\n\nSM3 \u662f\u6d88\u606f\u6458\u8981\u7b97\u6cd5\uff0c\u7c7b\u4f3c\u4e8e md5 \u6216 SHA-1 \u7b97\u6cd5\uff0c\u4e0d\u8fc7 md5 \u548c SHA-1 \u90fd\u5728 2005 \u5e74\u88ab\u4e2d\u56fd\u5c71\u4e1c\u5927\u5b66\u7684 \u738b\u5c0f\u4e91 \u6559\u6388\u7834\u89e3\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002\n\n[\u56fd\u5bb6\u5bc6\u7801\u7ba1\u7406\u5c40\u5173\u4e8e\u53d1\u5e03\u300aSM3\u5bc6\u7801\u6742\u51d1\u7b97\u6cd5\u300b\u516c\u544a](http://www.oscca.gov.cn/sca/xxgk/2010-12/17/content_1002389.shtml)\n\n### sm4\n\nSM4 \u662f\u4f20\u7edf\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\uff0c \u91c7\u7528\u5206\u7ec4\u52a0\u5bc6\uff0c\u7c7b\u4f3c\u4e8e DES \u6216 AES\u3002\n\n\u53ef\u4ee5\u5728~~[\u8fd9\u7bc7\u6587\u7ae0](http://www.wtoutiao.com/a/844743.html)~~\u91cc\u770b\u5230\u8fd9\u4e9b\u7b97\u6cd5\u4e4b\u95f4\u7684\u7b80\u5355\u6bd4\u8f83\uff0c\u66f4\u52a0\u6df1\u5165\u7684\u7814\u7a76\u8bf7\u53c2\u8003\u8bba\u6587\u3002\n\n\u7f51\u4e0a\u5df2\u6709 JavaScript \u5b9e\u73b0\u7684 [SM2 \u7b97\u6cd5](http://www.jonllen.com/jonllen/js/178.aspx)\uff0c\u5176\u53c2\u8003\u5f15\u7528\u4e86\u5f88\u591a [jsrsasign](http://kjur.github.io/jsrsasign/) \u7684\u5b9e\u73b0\uff0c\u8fd9\u662f\u4e00\u4e2a\u7528 JavaScript \u505a\u52a0\u5bc6\u89e3\u5bc6\u7684\u5e93\uff0c\u5b9e\u73b0\u4e86\u5f88\u591a\u7684\u52a0\u5bc6\u89e3\u5bc6\u7b97\u6cd5\u3002\n\nJavaScript \u672c\u8eab\u662f\u6709\u5f88\u591a\u7f3a\u9677\u7684\uff0c\u6570\u5b57\u53ea\u6709 int \u7c7b\u578b\uff0c\u867d\u7136\u8bf4\u662f 64 \u4f4d\u7684\uff0c\u4f46\u662f\u5728\u505a\u79fb\u4f4d\u8fd0\u7b97\u7684\u65f6\u5019\u5b83\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3a 32 \u4f4d\uff0c\u8fd9\u5c31\u5f88\u5c34\u5c2c\uff0c32 \u4f4d\u7684\u79fb\u4f4d\u8fd0\u7b97\uff0c\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u8d8a\u754c\u4e86\uff0c\u800c\u4e14\u79fb\u4f4d\u4e5f\u53ea\u6709\u5de6\u79fb\uff0c\u800c\u6ca1\u6709\u5faa\u73af\u79fb\u4f4d\u3002\u867d\u7136\u8bf4 Python \u4e5f\u662f\u53ea\u6709 int \u578b\uff0c\u4e0d\u8fc7\u5b83\u662f\u771f\u771f\u768464 \u4f4d\uff0c\u4e0d\u4f1a\u7f3a\u65a4\u5c11\u4e24\uff0c\u7f51\u4e0a\u4e5f\u6709\u6587\u7ae0\u8be6\u7ec6\u7684\u63d0\u5230 JavaScript \u7684[\u79fb\u4f4d\u64cd\u4f5c\u7684\u7f3a\u9677](http://jerryzou.com/posts/do-you-really-want-use-bit-operators-in-JavaScript/)\u3002\n\nJavaScript \u6ca1\u6709\u5faa\u73af\u5de6\u79fb\uff0c\u53ea\u6709\u5de6\u79fb\uff0c\u53f3\u79fb\u548c\u65e0\u7b26\u53f7\u4f4d\u53f3\u79fb\u3002JavaScript \u7684\u590d\u6570\u7684\u503c\u7b49\u4e8e - \uff08\u503c\u7684\u9006 + 1\uff09\uff0c\u6bd4\u5982\u8bf4 -977410425 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a `11000101101111011110011010000111` \uff0c\u5b83\u7684\u9006\u4e3a `00111010010000100001100101111000` ,\u5b83\u7684\u503c\u7684\u9006\u52a01\u4e3a `00111010010000100001100101111001` \uff0c\u6240\u4ee5\u5728 JavaScript \u4e2d\u5c31\u4f1a\u8868\u793a\u4e3a `-111010010000100001100101111001`\uff0c\u5373 `x = -(~x + 1)`\n\n```\na=-977410425\n-977410425\na.toString(2)\n\"-111010010000100001100101111001\"\n(a>>0).toString(2)\n\"-111010010000100001100101111001\"\n(a>>>0).toString(2)\n\"11000101101111011110011010000111\"\n```\n\n\u5173\u4e8e SM4 \u7b97\u6cd5\u6d41\u7a0b\uff0c\u56fd\u5bb6\u5bc6\u7801\u5c40\u662f\u5df2\u7ecf\u516c\u5f00\u4e86\u7684\uff0c\u53ef\u4ee5\u627e\u5230\u4e00\u4efd PDF \u6587\u6863\uff0c\u5199\u7684\u6e05\u6e05\u695a\u695a\uff0c\u660e\u660e\u767d\u767d\uff0c\u6bd4\u6211\u60f3\u8c61\u7684\u8981\u7b80\u5355\u4e00\u4e9b\uff0c\u8fd9\u91cc\u5c31\u5c55\u793a\u4e00\u4e0b\u6211\u81ea\u5df1\u5b9e\u73b0\u7684 \u5faa\u73af\u5de6\u79fb \u4e4b\u7c7b\u7684\u51fd\u6570\uff0c\u4e3a\u4ec0\u4e48\u4e00\u76f4\u5728\u63d0\u5faa\u73af\u5de6\u79fb\u5462\uff1f\u80af\u5b9a\u662f\u56e0\u4e3a\u7b97\u6cd5\u91cc\u9762\u4f1a\u7528\u5230\u7684\u5416\u3002\n\n<object data=\"/software/sm4.pdf\" height=\"525\" type=\"application/pdf\" width=\"680\" internalinstanceid=\"7\">\n    <embed src=\"/software/sm4.pdf\"><br>\n</object>\n\n\n[\u70b9\u51fb\u4e0b\u8f7d](/software/sm4.pdf)\n\n\nJavaScript \u7248\n\n```\nfunction leftshift(a, n, size=32) {\n    n = n % size\n    return (a << n) | (a >>> (size - n))\n}\n```\n\nPyhton \u7248\n\n```\ndef leftshift(a, n, size=32):\n    n = n % size\n    return (a << n) | (a >> (size - n))\n```\n\n\u6216\u8bb8\u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e9b\u4e0d\u4f18\u96c5\u7684\u4ee3\u7801\uff0c\u4f7f\u5f97\u4ee3\u7801\u7684\u6267\u884c\u6548\u7387\u4e0d\u9ad8\uff0c\u6216\u8005\u8bf4\u975e\u5e38\u4f4e\uff0c\u5728\u5b98\u65b9\u6587\u6863\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a 1000000 \u904d\u7684\u52a0\u5bc6\u6837\u4f8b\uff0c\u7136\u800c\u6211\u7684 JavaScript 10000 \u904d\u5c31\u9700\u8981\u8fd1\u4e00\u5206\u949f\uff0cPython 10000 \u904d\u8fd1 10 \u79d2\uff0c\u8fd9\u6837\u4e0b\u6765\u5c31\u9700\u8981\u4e00\u4e2a\u591a\u5c0f\u65f6\u4e86\uff0c\u53ef\u662f\u7f51\u4e0a\u627e\u5230\u7684 C\u8bed\u8a00 \u548c Java \u5b9e\u73b0\u7684 SM4 \u5bf9 1000000 \u904d\u52a0\u5bc6\u53ea\u9700\u8981\u8fd1\u4e00\u79d2\u949f\u5373\u53ef\uff0c\u6216\u8bb8\u8ddf\u4ee3\u7801\u8d28\u91cf\u4e5f\u6709\u5173\u5427\uff0c\u4f46\u8fd8\u662f\u53ef\u6015\u7684\u6027\u80fd\u5dee\u5f02\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u5730\u65b9\u662f S \u76d2\u4ee3\u6362\u7684\u90e8\u5206\uff0c\u4e5f\u6539\u8fdb\u4e86\u4e00\u4e0b\uff0c\u901f\u5ea6\u7565\u6709\u63d0\u5347\uff0c\u4f46\u662f\u5dee\u8ddd\u8f83\u5927\u3002\n\nJavaScript \u7248\n\n```\nfunction sm4Sbox(a) {\n    var b1 = SboxTable[(a & 0xf0000000) >>> 28][(a & 0x0f000000) >>> 24]\n    var b2 = SboxTable[(a & 0x00f00000) >>> 20][(a & 0x000f0000) >>> 16]\n    var b3 = SboxTable[(a & 0x0000f000) >>> 12][(a & 0x00000f00) >>>  8]\n    var b4 = SboxTable[(a & 0x000000f0) >>>  4][(a & 0x0000000f) >>>  0]\n    return (b1 << 24) | (b2 << 16) | (b3 << 8) | (b4 << 0)\n}\n```\n\npython \u7248\n\n```\ndef sm4Sbox(a):\n    b1 = SboxTable[(a & 0xf0000000) >> 28][(a & 0x0f000000) >> 24]\n    b2 = SboxTable[(a & 0x00f00000) >> 20][(a & 0x000f0000) >> 16]\n    b3 = SboxTable[(a & 0x0000f000) >> 12][(a & 0x00000f00) >>  8]\n    b4 = SboxTable[(a & 0x000000f0) >>  4][(a & 0x0000000f) >>  0]\n    return (b1 << 24) | (b2 << 16) | (b3 << 8) | (b4 << 0)\n\n```\n\n\u4ee3\u7801\u90fd\u5728 [https://github.com/windard/sm4](https://github.com/windard/sm4) \u4e86\uff0c\u6253\u5305\u4e0b\u8f7d\u5728[\u8fd9\u91cc](https://github.com/windard/sm4/archive/master.zip)\u3002\n\n## \u6027\u80fd\n\n\u6216\u8bb8\u662f\u81ea\u5df1\u7684\u4ee3\u7801\u592a\u6e23\uff0c\u5b9e\u73b0\u7684 sm4 \u6027\u80fd\u4e0d\u592a\u884c\u3002\n\n\u5728 `/JavaScript/demo` \u4e2d\u6709\u6027\u80fd\u6d4b\u8bd5\u3002\n\n![performance](/JavaScript/demo/performance.jpg)\n"
 },
 {
  "repo": "anvilresearch/webcrypto",
  "language": "JavaScript",
  "readme_contents": "# NOTICE\n\nWe\u2019re archiving Anvil Connect and all related packages. This code is entirely MIT Licensed. You\u2019re free to do with it what you want. That said, we are recommending _**against**_ using it, due to the potential for security issues arising from unmaintained software. For more information, see the announcement at [anvil.io](https://anvil.io).\n\n# W3C Web Cryptography API _(@trust/webcrypto)_\n\n[![standard-readme compliant](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![Build Status](https://travis-ci.org/anvilresearch/webcrypto.svg?branch=master)](https://travis-ci.org/anvilresearch/webcrypto)\n\n> W3C Web Cryptography API for Node.js\n\nW3C's [Web Cryptography API][webcrypto] defines a standard interface for performing\ncryptographic operations in JavaScript, such as key generation, hashing, signing, and\nencryption. This package implements the API for Node.js, in order to support universal\ncrypto-dependent code required by protocols such as [JOSE][jose] and\n[OpenID Connect][oidc].\n\n[webcrypto]: https://www.w3.org/TR/WebCryptoAPI/\n[jose]: https://datatracker.ietf.org/wg/jose/documents/\n[oidc]: http://openid.net/connect/\n\n## Table of Contents\n\n* [Security](#security)\n* [Background](#background)\n* [Install](#install)\n* [Usage](#usage)\n* [Develop](#develop)\n* [Supported Algorithms](#supported-algorithms)\n* [API](#api)\n* [Contribute](#contribute)\n* [MIT License](#mit-license)\n\n## Security\n\nTBD\n\n## Background\n\nThe purpose of this package is to enable development of universal JavaScript\nlibraries that depend on the availability of cryptographic primitives in order\nto implement cryptographic protocols. The long term goal of the project is to\nencourage or provide a [native, if not core][wtf] Web Cryptography module.\n\n[wtf]: https://github.com/nodejs/node/issues/2833\n\n## Install\n\n`@trust/webcrypto` requires recent versions of [node][node] and [npm][npm] to run. For key generation operations, it also requires [OpenSSL][openssl] to be installed on the system.\n\n[node]: https://nodejs.org\n[npm]: https://www.npmjs.com/\n[openssl]: https://www.openssl.org/\n\n\n```bash\n$ npm install @trust/webcrypto --save\n```\n\n### Not for use in Webpack\n\nThis library is not for use in Webpack.\n\nThe whole point of this library is that it's an exact duplicate of the browser's WebCrypto API,\nfor the server side.\n\nFor Webpacked web applications,\nyou don't need it (and can't use it).\nIf this module is transitively included by another dependency,\nyou have to exclude it by adding it to the [`externals` section in the Webpack config](https://webpack.js.org/configuration/externals/),\nsuch as this:\n\n```\nexternals: {\n  '@trust/webcrypto': 'crypto'\n}\n```\n\n## Usage\n\n```javascript\nconst crypto = require('@trust/webcrypto')\n```\n\n## Develop\n\n### Install\n\n```bash\n$ git clone git@github.com:anvilresearch/webcrypto.git\n$ cd webcrypto\n$ npm install\n```\n\n### Test\n\n```bash\n$ npm test\n```\n\n## Supported Algorithms\n\n| Algorithm name | encrypt | decrypt | sign | verify | digest | generateKey | deriveKey | deriveBits | importKey | exportKey | wrapKey | unwrapKey |\n|------------------|---|---|---|---|---|---|---|---|---|---|---|---|\n|RSASSA-PKCS1-v1_5 |   |   | \u2714 | \u2714 |   | \u2714 |   |   | \u2714 | \u2714 |   |   |\n|RSA-PSS           |   |   | \u2714 | \u2714 |   | \u2714 |   |   | \u2714 | \u2714 |   |   |\n|RSA-OAEP          | \u2714 | \u2714 |   |   |   | \u2714 |   |   | \u2714 | \u2714 | \u2714 | \u2714 |\n|ECDSA             |   |   | \u2690 | \u2690 |   | \u2690 |   |   | \u2714 | \u2714 |   |   |\n|EDDSA             |   |   | \u2690 | \u2690 |   | \u2690 |   |   | \u2714 | \u2714 |   |   |\n|ECDH              |   |   |   |   |   | _ | _ | _ | _ | _ |   |   |\n|AES-CTR           | \u2690 | \u2690 |   |   |   | \u2714 |   |   | \u2714 | \u2714 | \u2714 | \u2714 |\n|AES-CBC           | \u2714 | \u2714 |   |   |   | \u2714 |   |   | \u2714 | \u2714 | \u2714 | \u2714 |\n|AES-GCM           | \u2714 | \u2714 |   |   |   | \u2714 |   |   | \u2714 | \u2714 | \u2714 | \u2714 |\n|AES-KW            |   |   |   |   |   | \u2714 |   |   | \u2714 | \u2714 | \u2714 | \u2714 |\n|HMAC              |   |   | \u2714 | \u2714 |   | \u2714 |   |   | \u2714 | \u2714 |   |   |\n|SHA-1             |   |   |   |   | \u2714 |   |   |   |   |   |   |   |\n|SHA-256           |   |   |   |   | \u2714 |   |   |   |   |   |   |   |\n|SHA-384           |   |   |   |   | \u2714 |   |   |   |   |   |   |   |\n|SHA-512           |   |   |   |   | \u2714 |   |   |   |   |   |   |   |\n|HKDF              |   |   |   |   |   |   | _ | _ | _ |   |   |   |\n|PBKDF2            |   |   |   |   |   |   | _ | _ | _ |   |   |   |\n\nKey:\n\n` \u2714 ` Implemented\n` _ ` Currently not implemented\n` \u2690 ` Partially implemented, only certain paramaters supported.\n\n## Partial Support\nOnly the following paramaters are supported for the corresponding algorithm.\n\n| Algorithm name | Supported paramater |\n| -------------- | ------------------- |\n| ECDSA          | `K-256 (secp256k1)`, `P-256`, `P-384`, `P-512` |\n| EDDSA          | `ed25519`           |\n| AES-CTR        | `sha-1`             |\n\n\n## API\n\nSee [W3C Web Cryptography API][webcrypto] specification and diafygi's [webcrypto-examples][examples].\n\n[examples]: https://github.com/diafygi/webcrypto-examples\n\n## Contribute\n\n### Issues\n\n* Please file [issues](https://github.com/anvilresearch/webcrypto/issues) :)\n* When writing a bug report, include relevant details such as platform, version, relevant data, and stack traces\n* Ensure to check for existing issues before opening new ones\n* Read the documentation before asking questions\n* It is strongly recommended to open an issue before hacking and submitting a PR\n* We reserve the right to close an issue for excessive bikeshedding\n\n### Pull requests\n\n#### Policy\n\n* We're not presently accepting *unsolicited* pull requests\n* Create an issue to discuss proposed features before submitting a pull request\n* Create an issue to propose changes of code style or introduce new tooling\n* Ensure your work is harmonious with the overall direction of the project\n* Ensure your work does not duplicate existing effort\n* Keep the scope compact; avoid PRs with more than one feature or fix\n* Code review with maintainers is required before any merging of pull requests\n* New code must respect the style guide and overall architecture of the project\n* Be prepared to defend your work\n\n#### Style guide\n\n* ES6\n* Standard JavaScript\n* jsdocs\n\n#### Code reviews\n\n* required before merging PRs\n* reviewers MUST run and test the code under review\n\n### Collaborating\n\n#### Weekly project meeting\n\n* Thursdays from 1:00 PM to 2:00 Eastern US time at [TBD]\n* Join remotely with Google Hangouts\n\n#### Pair programming\n\n* Required for new contributors\n* Work directly with one or more members of the core development team\n\n### Code of conduct\n\n* @trust/webcrypto follows the [Contributor Covenant](http://contributor-covenant.org/version/1/3/0/) Code of Conduct.\n\n### Contributors\n\n* Christian Smith [@christiansmith](https://github.com/christiansmith)\n* Dmitri Zagidulin [@dmitrizagidulin](https://github.com/dmitrizagidulin)\n* Greg Linklater [@EternalDeiwos](https://github.com/EternalDeiwos)\n* JC Bailey [@thelunararmy](https://github.com/thelunararmy)\n* Ioan Budea [@johnny90](https://github.com/johnny90)\n* Abdulrahman Alotaibi [@adminq80](https://github.com/adminq80)\n* Linus Unneb\u00e4ck [@LinusU](https://github.com/LinusU)\n* Len Boyette [@kevlened](https://github.com/kevlened)\n* Tom Bonner [@Glitch0011](https://github.com/Glitch0011)\n## MIT License\n\nCopyright (c) 2016 Anvil Research, Inc.\n"
 },
 {
  "repo": "data61/python-paillier",
  "language": "Python",
  "readme_contents": "python-paillier  |release|\n==========================\n\n+---------------------+\n|      |ciTest|       |\n+---------------------+\n|      |rtdM|         |\n+---------------------+\n|      |reqM|         |\n+---------------------+\n\nA Python 3 library implementing the Paillier Partially Homomorphic Encryption.\n\nThe homomorphic properties of the paillier crypto system are:\n\n-  Encrypted numbers can be multiplied by a non encrypted scalar.\n-  Encrypted numbers can be added together.\n-  Encrypted numbers can be added to non encrypted scalars.\n\nCiting\n======\n\n`python-paillier` is designed, developed and supported by `CSIRO's Data61 <https://www.data61.csiro.au/>`__. If\nyou use any part of this library in your research, please cite it using the following BibTex entry::\n\n    @misc{PythonPaillier,\n      author = {CSIRO's Data61},\n      title = {Python Paillier Library},\n      year = {2013},\n      publisher = {GitHub},\n      journal = {GitHub Repository},\n      howpublished = {\\url{https://github.com/data61/python-paillier}},\n    }\n\n\nRunning unit tests\n------------------\n\n::\n\n   python setup.py test\n\nOr use nose::\n\n   nosetests\n\n\nNote related to gmpy2\n---------------------\n\n`gmpy2` is not required to use the library, but is preferred. A pure Python implementation is available but \n`gmpy2` drastically improves performances. As indication on a laptop not dedicated to benchmarking, running the example\n`examples/federated_learning_with_encryption.py` provided in the library took:\n- 4.5s with `gmpy2` installed\n- 35.7s without `gmpy2` installed\n\nHowever, `gmpy2` is a requirement to run the tests.\n\nCode History\n------------\n\nDeveloped at `Data61 | CSIRO <http://data61.csiro.au>`_.\n\nParts derived from the Apache licensed Google project:\nhttps://code.google.com/p/encrypted-bigquery-client/\n\n\n.. |release| image:: https://img.shields.io/pypi/v/phe.svg\n    :target: https://pypi.python.org/pypi/phe/\n    :alt: Latest released version on PyPi\n\n.. |ciTest| image:: https://github.com/data61/python-paillier/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/data61/python-paillier/actions/workflows/test.yml\n    :alt: CI Status\n\n.. |reqM| image:: https://requires.io/github/data61/python-paillier/requirements.svg?branch=master\n    :target: https://requires.io/github/data61/python-paillier/requirements/?branch=master\n    :alt: Requirements Status of master\n\n.. |rtdM| image:: https://readthedocs.org/projects/python-paillier/badge/?version=stable\n   :target: http://python-paillier.readthedocs.org/en/latest/?badge=stable\n   :alt: Documentation Status\n\n"
 },
 {
  "repo": "elsehow/signal-protocol",
  "language": "JavaScript",
  "readme_contents": "# signal-protocol\n\n[![Build Status](https://travis-ci.org/elsehow/signal-protocol.svg?branch=master)](https://travis-ci.org/elsehow/signal-protocol)\n[![Dependencies](https://david-dm.org/elsehow/signal-protocol/status.svg)](https://david-dm.org/elsehow/signal-protocol)\n[![DevDependencies](https://david-dm.org/elsehow/signal-protocol/dev-status.svg)](https://david-dm.org/elsehow/signal-protocol?type=dev)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/elsehow.svg)](https://saucelabs.com/u/elsehow)\n\n\nA ratcheting forward secrecy protocol that works in synchronous and\nasynchronous messaging environments.\n\n# THIS MODULE IS DEPRICATED\n\nI recommend you use [@wireapp/proteus](https://www.npmjs.com/package/@wireapp/proteus).\n\n*All code in this repository is FOR RESEARCH PURPOSES ONLY!*\n\n---\n\nThis repository is forked from WhisperSystem's own [libsignal-protocol-javascript](https://github.com/WhisperSystems/libsignal-protocol-javascript) by **[@liliakai](https://github.com/liliakai)**, modified to support node and the browser. I use [node-webcrypto-ossl](https://github.com/PeculiarVentures/node-webcrypto-ossl) as a drop-in native replacement for WebCrypto API.\n\n**WARNING: This code has NOT been reviewed by an experienced cryptographer. IT IS FOR RESEARCH ONLY!!!!!**\n\nYou can read more about the signal protocol \n(formerly /axolotl/ for its self-healing abilities)\n[here](https://whispersystems.org/blog/advanced-ratcheting/).\n\n## Install\n\n```sh\nnpm install signal-protocol\n```\n\n## Usage\n\nThere are two ways to use this package.\n\nYou can require with your front-end bundler of choice (e.g. browserify, webpack):\n\n```js\nvar signal = require('signal-protocol')\n```\n\n**IMPT NOTE!!!** If you intend to call this from the browser, have your bundler exclude `src/node_polyfills.js`. You won't need that file for your browser bundles, and it could crash your bundler. (Even at best, it will add tons of useless junk to your bundled js file).\n\nOr, you can include the prebundled `dist/libsignal.js` in your HTML file.\n\nThe following steps will walk you through the lifecycle of the signal protocol\n\n### Generate an indentity + PreKeys\n\nThis protocol uses a concept called 'PreKeys'. A PreKey is an ECPublicKey and\nan associated unique ID which are stored together by a server. PreKeys can also\nbe signed.\n\nAt install time, clients generate a single signed PreKey, as well as a large\nlist of unsigned PreKeys, and transmit all of them to the server.\n\n```js\nvar signal = require('signal-protocol')\nvar KeyHelper = signal.KeyHelper;\n\nvar registrationId = KeyHelper.generateRegistrationId();\n// Store registrationId somewhere durable and safe.\n\nKeyHelper.generateIdentityKeyPair().then(function(identityKeyPair) {\n    // keyPair -> { pubKey: ArrayBuffer, privKey: ArrayBuffer }\n    // Store identityKeyPair somewhere durable and safe.\n});\n\nKeyHelper.generatePreKey(keyId).then(function(preKey) {\n    store.storePreKey(preKey.keyId, preKey.keyPair);\n});\n\nKeyHelper.generateSignedPreKey(identityKeyPair, keyId).then(function(signedPreKey) {\n    store.storeSignedPreKey(signedPreKey.keyId, signedPreKey.keyPair);\n});\n\n// Register preKeys and signedPreKey with the server\n```\n\n### Build a session\n\nSignal Protocol is session-oriented. Clients establish a \"session,\" which is\nthen used for all subsequent encrypt/decrypt operations. There is no need to\never tear down a session once one has been established.\n\nSessions are established in one of two ways:\n\n1. PreKeyBundles. A client that wishes to send a message to a recipient can\n   establish a session by retrieving a PreKeyBundle for that recipient from the\n   server.\n1. PreKeySignalMessages. A client can receive a PreKeySignalMessage from a\n   recipient and use it to establish a session.\n\n#### A note on state\n\nAn established session encapsulates a lot of state between two clients. That\nstate is maintained in durable records which need to be kept for the life of\nthe session.\n\nState is kept in the following places:\n\n* Identity State. Clients will need to maintain the state of their own identity\n  key pair, as well as identity keys received from other clients.\n* PreKey State. Clients will need to maintain the state of their generated\n  PreKeys.\n* Signed PreKey States. Clients will need to maintain the state of their signed\n  PreKeys.\n* Session State. Clients will need to maintain the state of the sessions they\n  have established.\n\nA signal client needs to implement a storage interface that will manage\nloading and storing of identity, prekeys, signed prekeys, and session state.\nSee `test/InMemorySignalProtocolStore.js` for an example.\n\n#### Building a session\n\nOnce your storage interface is implemented, building a session is fairly straightforward:\n\n```js\nvar store   = new MySignalProtocolStore();\nvar address = new signal.SignalProtocolAddress(recipientId, deviceId);\n\n// Instantiate a SessionBuilder for a remote recipientId + deviceId tuple.\nvar sessionBuilder = new signal.SessionBuilder(store, address);\n\n// Process a prekey fetched from the server. Returns a promise that resolves\n// once a session is created and saved in the store, or rejects if the\n// identityKey differs from a previously seen identity for this address.\nvar promise = sessionBuilder.processPreKey({\n    registrationId: <Number>,\n    identityKey: <ArrayBuffer>,\n    signedPreKey: {\n        keyId     : <Number>,\n        publicKey : <ArrayBuffer>,\n        signature : <ArrayBuffer>\n    },\n    preKey: {\n        keyId     : <Number>,\n        publicKey : <ArrayBuffer>\n    }\n});\n\npromise.then(function onsuccess() {\n  // encrypt messages\n});\n\npromise.catch(function onerror(error) {\n  // handle identity key conflict\n});\n```\n\n\n### Encrypting\n\nOnce you have a session established with an address, you can encrypt messages\nusing SessionCipher.\n\n```js\nvar plaintext = \"Hello world\";\nvar sessionCipher = new signal.SessionCipher(store, address);\nsessionCipher.encrypt(plaintext).then(function(ciphertext) {\n    // ciphertext -> { type: <Number>, body: <string> }\n    handle(ciphertext.type, ciphertext.body);\n});\n```\n\n### Decrypting\n\nCiphertexts come in two flavors: WhisperMessage and PreKeyWhisperMessage.\n\n```js\nvar address = new signal.SignalProtocolAddress(recipientId, deviceId);\nvar sessionCipher = new signal.SessionCipher(store, address);\n\n// Decrypt a PreKeyWhisperMessage by first establishing a new session.\n// Returns a promise that resolves when the message is decrypted or\n// rejects if the identityKey differs from a previously seen identity for this\n// address.\nsessionCipher.decryptPreKeyWhisperMessage(ciphertext).then(function(plaintext) {\n    // handle plaintext ArrayBuffer\n}).catch(function(error) {\n    // handle identity key conflict\n});\n\n// Decrypt a normal message using an existing session\nvar sessionCipher = new signal.SessionCipher(store, address);\nsessionCipher.decryptWhisperMessage(ciphertext).then(function(plaintext) {\n    // handle plaintext ArrayBuffer\n});\n```\n\n## Cryptography Notice\n\n A number of nations restrict the use or export of cryptography. If you are potentially subject to such restrictions you should seek competent professional legal advice before attempting to develop or distribute cryptographic code.\n\n## License\n\nI (elsehow) release copyright to\nCopyright 2015-2016 Open Whisper Systems \nunder the GPLv3: http://www.gnu.org/licenses/gpl-3.0.html\n"
 },
 {
  "repo": "SebastiaAgramunt/Cryptography",
  "language": "Jupyter Notebook",
  "readme_contents": "# Tutorial on Cryptogarphy and Multiparty Computation\n\nThis is a quick introduction to cryptography based on the books [An introduction to mathematical cryptograpy](https://www.springer.com/gp/book/9781441926746) by Hoffstein, Pipher and Silverman and [Introduction to modern cryptography](https://www.crcpress.com/Introduction-to-Modern-Cryptography/Katz-Lindell/p/book/9781466570269) by Katz and [Lindell](https://u.cs.biu.ac.il/~lindell/). \n\nThe main objective of this repository is to show from first principles some of the mathematical foundations underlying modern cryptography. At the same time implementing some algorithms to achieve a certain degree of security. \n\nOnce some concepts on cryptography are clear we show more complex concepts like mulitparty computation.\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine. \n\n### Prerequisites\n\nMake sure you have installed [Docker](https://www.docker.com/get-started) in your computer. Try to get your docker version on the command line\n\n```sh \ndocker --version\n```\nIt's been tested on  ```Docker version 19.03.5``` but upper versions may work as well.\n\n\n### Running\n\nIn the main folder run\n\n```sh\nmake build-run\n```\n\nThis will create the image and run the container. By default image name is *cryptography* and container name *crypt* (you can change this in the Makefile).\n\n## Accessing the notebooks\n\nAfter making the *build-run* you should have a docker container named *crypt* running. To access the notebooks just open in your browser\n\n```\nhttp://localhost:8888/\n```\n\nyou can stop, run and delete the image by typing\n\n```\nmake stop\nmake run\nmake delete\n```\n\ndelete command will erase both, the docker image and the container."
 },
 {
  "repo": "leocavalcante/encrypt",
  "language": "Dart",
  "readme_contents": "# encrypt\n\n[![Pub Package](https://img.shields.io/pub/v/encrypt.svg)](https://pub.dartlang.org/packages/encrypt)\n[![Build Status](https://travis-ci.org/leocavalcante/encrypt.svg?branch=master)](https://travis-ci.org/leocavalcante/encrypt)\n[![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=E4F45BFVMFVQW)\n\nA set of high-level APIs over PointyCastle for two-way cryptography.\n\n> Looking for password hashing? Please, visit [password](https://github.com/leocavalcante/password-dart).\n\n### Secure random\n\nYou can generate cryptographically secure random keys and IVs for you project.\n\nActivate the encrypt package:\n\n```bash\npub global activate encrypt\n```\n\nThen use the `secure-random` command-line tool:\n\n```bash\n$ secure-random\nCBoaDQIQAgceGg8dFAkMDBEOECEZCxgMBiAUFQwKFhg=\n```\n\nYou can set the length and the base output.\n\n```bash\n$ secure-random --help\n-l, --length       The length of the bytes\n                   (defaults to \"32\")\n\n-b, --base         Bytes represented as base 64 or base 16 (Hexdecimal)\n                   (defaults to \"64\")\n\n-h, --[no-]help    Show this help message\n```\n\n## Algorithms\n\nCurrent status is:\n\n- AES with PKCS7 padding\n- RSA with PKCS1 and OAEP encoding\n- Salsa20\n\n### Signing\n\n- SHA256 with RSA\n\n## Usage\n\n### Symmetric\n\n#### AES\n\n```dart\nimport 'package:encrypt/encrypt.dart';\n\nvoid main() {\n  final plainText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit';\n  final key = Key.fromUtf8('my 32 length key................');\n  final iv = IV.fromLength(16);\n\n  final encrypter = Encrypter(AES(key));\n\n  final encrypted = encrypter.encrypt(plainText, iv: iv);\n  final decrypted = encrypter.decrypt(encrypted, iv: iv);\n\n  print(decrypted); // Lorem ipsum dolor sit amet, consectetur adipiscing elit\n  print(encrypted.base64); // R4PxiU3h8YoIRqVowBXm36ZcCeNeZ4s1OvVBTfFlZRdmohQqOpPQqD1YecJeZMAop/hZ4OxqgC1WtwvX/hP9mw==\n}\n```\n\n##### Modes of operation\n\nDefault mode is SIC `AESMode.sic`, you can override it using the `mode` named parameter:\n\n```dart\nfinal encrypter = Encrypter(AES(key, mode: AESMode.cbc));\n```\n\n###### Supported modes are:\n\n- CBC `AESMode.cbc`\n- CFB-64 `AESMode.cfb64`\n- CTR `AESMode.ctr`\n- ECB `AESMode.ecb`\n- OFB-64/GCTR `AESMode.ofb64Gctr`\n- OFB-64 `AESMode.ofb64`\n- SIC `AESMode.sic`\n\n##### No/zero padding\n\nTo remove padding, pass `null` to the `padding` named parameter on the constructor:\n\n```dart\nfinal encrypter = Encrypter(AES(key, mode: AESMode.cbc, padding: null));\n```\n\n#### Salsa20\n\n```dart\nimport 'package:encrypt/encrypt.dart';\n\nvoid main() {\n  final plainText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit';\n  final key = Key.fromLength(32);\n  final iv = IV.fromLength(8);\n  final encrypter = Encrypter(Salsa20(key));\n\n  final encrypted = encrypter.encrypt(plainText, iv: iv);\n  final decrypted = encrypter.decrypt(encrypted, iv: iv);\n\n  print(decrypted); // Lorem ipsum dolor sit amet, consectetur adipiscing elit\n  print(encrypted.base64); // CR+IAWBEx3sA/dLkkFM/orYr9KftrGa7lIFSAAmVPbKIOLDOzGwEi9ohstDBqDLIaXMEeulwXQ==\n}\n```\n\n#### [Fernet](https://github.com/fernet/spec/blob/master/Spec.md)\n\n```dart\nimport 'package:encrypt/encrypt.dart';\nimport 'dart:convert';\n\nvoid main() {\n  final plainText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit';\n  final key = Key.fromUtf8('my32lengthsupersecretnooneknows1');\n\n  final b64key = Key.fromUtf8(base64Url.encode(key.bytes).substring(0,32));\n  // if you need to use the ttl feature, you'll need to use APIs in the algorithm itself\n  final fernet = Fernet(b64key);\n  final encrypter = Encrypter(fernet);\n\n  final encrypted = encrypter.encrypt(plainText);\n  final decrypted = encrypter.decrypt(encrypted);\n\n  print(decrypted); // Lorem ipsum dolor sit amet, consectetur adipiscing elit\n  print(encrypted.base64); // random cipher text\n  print(fernet.extractTimestamp(encrypted.bytes)); // unix timestamp\n}\n```\n\n### Asymmetric\n\n#### RSA\n\n```dart\nimport 'dart:io';\nimport 'package:encrypt/encrypt.dart';\nimport 'package:pointycastle/asymmetric/api.dart';\n\nvoid main() {\n  final publicKey = await parseKeyFromFile<RSAPublicKey>('test/public.pem');\n  final privKey = await parseKeyFromFile<RSAPrivateKey>('test/private.pem');\n\n  final plainText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit';\n  final encrypter = Encrypter(RSA(publicKey: publicKey, privateKey: privKey));\n\n  final encrypted = encrypter.encrypt(plainText);\n  final decrypted = encrypter.decrypt(encrypted);\n\n  print(decrypted); // Lorem ipsum dolor sit amet, consectetur adipiscing elit\n  print(encrypted.base64); // kO9EbgbrSwiq0EYz0aBdljHSC/rci2854Qa+nugbhKjidlezNplsEqOxR+pr1RtICZGAtv0YGevJBaRaHS17eHuj7GXo1CM3PR6pjGxrorcwR5Q7/bVEePESsimMbhHWF+AkDIX4v0CwKx9lgaTBgC8/yJKiLmQkyDCj64J3JSE=\n}\n```\n\n### Signature and verification\n\n#### RSA\n\n```dart\n final publicKey = await parseKeyFromFile<RSAPublicKey>('test/public.pem');\n final privateKey = await parseKeyFromFile<RSAPrivateKey>('test/private.pem');\n final signer = Signer(RSASigner(RSASignDigest.SHA256, publicKey: publicKey, privateKey: privateKey));\n\n print(signer.sign('hello world').base64);\n print(signer.verify64('hello world', 'jfMhNM2v6hauQr6w3ji0xNOxGInHbeIH3DHlpf2W3vmSMyAuwGHG0KLcunggG4XtZrZPAib7oHaKEAdkHaSIGXAtEqaAvocq138oJ7BEznA4KVYuMcW9c8bRy5E4tUpikTpoO+okHdHr5YLc9y908CAQBVsfhbt0W9NClvDWegs='));\n```\n"
 },
 {
  "repo": "gost-engine/engine",
  "language": "C",
  "readme_contents": "OPENSSL GOST ENGINE\n\nAn implementation of Russian cryptography standards for OpenSSL.\n\nSince v.0.9.6 OpenSSL provides facilities for creating external dynamically\nloaded cryptographic engines (OpenSSL should be built with dynamic engine\nsupport to be able to use it). Since v 1.0 it became possible to provide\ndigital signature algorithms via engines.\n\nThis engine provides an implementation of various Russian cryptographic\nalgorithms, known generally as GOST cryptographic algorithms (see detailed list\nbelow). These algorithms can be used both via OpenSSL command line tools and\nvia high-level libopenssl calls.\n\nOpenSSL GOST Engine also includes 'gostsum' and 'gost12sum' command line tools\nfor generating and checking GOST R34.11-94 and GOST R34.11-2012 hashsums.\nThey have the same purposes and behavior as the well-known sha1sum and md5sum\nutilities. These utilities can be used independently from OpenSSL.\n\nALGORITHMS SUPPORTED\n\nGOST R 34.10-2001 and GOST R 34.10-2012 - digital signature algorithms.\n   Also support key exchange based on public keys. See RFC 4357 for\n   details of VKO key exchange algorithm. These algorithms use\n   256 bit private keys for GOST 2001, 256/512 bits for GOST 2012. \n\t Public keys are 512 bit for GOST 2001 and 512/1024 for GOST 2012. \n\t Key exchange algorithms (VKO R 34.10) are supported on these keys too.\n  \nGOST R 34.11-94  Message digest algorithm. 256-bit hash value.\n\nGOST R 34.11-2012  Message digest algorithm. 256- and 512-bit hash values.\n\nGOST 28147-89 - Symmetric cipher with 256-bit key. Various modes are\n   defined in the standard, but only CBC, CFB and CNT modes are implemented\n   in the engine. To make statistical analysis more difficult, key\n   meshing is supported (see RFC 4357).\n\nGOST 28147-89 MAC mode. Message authentication code. While a lot of MAC\n  algorithms out there are based on hash functions using HMAC algorithm, \n\tthis algoritm is based on symmetric cipher. \n\tIt has 256-bit symmetric key and 8-64 (default 32) bits of MAC value\n\t(while HMAC has same key size and value size). \n\tIt is implemented as combination of EVP_PKEY type and EVP_MD type.\n\nGOST R 34.13\u20132015 - Symmetric cypher Grasshopper (\"Kuznechik\")\n\nUSAGE OF GOST ALGORITHMS\n\nThis engine is designed to allow usage of this algorithms in the high-level\nopenssl functions, such as PKI, S/MIME and TLS. All the necessary constants are\nadded to the main source tree of OpenSSL.\n\nSee RFC 4490 for S/MIME with GOST algorithms and RFC 4491 for PKI.  TLS support\nis implemented according IETF draft-chudov-cryptopro-cptls-03.txt and is\ncompatible with CryptoPro CSP 3.0+.\n\nTo use the engine you have to load it via openssl configuration\nfile. Applications should read openssl configuration file or provide\ntheir own means to load engines. Also, applications which operate with\nprivate keys, should use generic EVP_PKEY API instead of using RSA or\nother algorithm-specific API.\n\nUSAGE WITH COMMAND LINE openssl UTILITY\n\n1. Generation of private key\n\n\topenssl genpkey -algorithm gost2001 -pkeyopt paramset:A -out seckey.pem\n\n  Use -algorithm option to specify algorithm.\n  Use -pkeyopt option to pass paramset to algorithm. The following paramsets\n  are supported by \n\tgost2001:     0,A,B,C,XA,XB\n\tgost2012_256: 0,A,B,C,XA,XB,TCA,TCB,TCC,TCD\n\tgost2012_512:   A,B,C\n  You can also use numeric representation of OID as to destinate\n  paramset.\n\n  Paramsets starting with X are intended to use for key exchange keys.\n  Paramsets without X are for digital signature keys.\n\n  Paramset for both algorithms 0 is the test paramset which should be used\n  only for test purposes.\n\nThere are no algorithm-specific things with generation of certificate\nrequest once you have a private key.\n\n2. Generation of certificate request along with private/public keypar\n\n   openssl req -newkey gost2001 -pkeyopt paramset:A\n\n   Syntax of -pkeyopt parameter is identical with genpkey command.\n\n   You can also use oldstyle syntax -newkey gost2001:paramfile, but in\n   this case you should create parameter file first. \n\n   It can be created with\n\n   openssl genpkey -genparam -algorithm gost2001 -pkeyopt paramset:A\\\n      -out paramfile.\n\n3. S/MIME operations\n\nIf you want to send encrypted mail using GOST algorithms, don't forget\nto specify -gost89 as encryption algorithm for OpenSSL smime command.\nWhile OpenSSL is clever enough to find out that GOST R 34.11-94 digest\nmust be used for digital signing with GOST private key, it have no way\nto derive symmetric encryption algorithm from key exchange keys.\n\n4. TLS operations\n\nOpenSSL supports all four ciphersuites defined in the IETF draft.\nOnce you've loaded GOST key and certificate into your TLS server,\nciphersuites which use GOST 28147-89 encryption are enabled.\n\nCiphersuites with NULL encryption should be enabled explicitely if\nneeded.\n\nGOST2001-GOST89-GOST89 Uses GOST R 34.10-2001 for auth and key exchange,\n\t\tGOST 28147-89 for encryption and GOST 28147-89 MAC\nGOST2001-NULL-GOST94 Uses GOST R 34.10-2001 for auth and key exchange,\n    no encryption and HMAC, based on GOST R 34.11-94\nGOST2012-GOST8912-GOST8912 Uses GOST R 34.10-2001 or 2012 for auth and key exchange,\n\t\tGOST 28147-89 with paramset Z for encryption and GOST 28147-89 MAC with paramset Z\nGOST2012-NULL-GOST1 Uses GOST R 34.10-2001 or 2012 for auth and key exchange,\n    no encryption and HMAC, based on GOST R 34.11-2012 256-bit.\n\nRSA, DSA and EC keys can be used simultaneously with GOST keys, if\nserver implementation supports loading more than two private\nkey/certificate pairs. In this case ciphersuites which use any of loaded\nkeys would be supported and clients can negotiate ones they wish.\n\nThis allows creation of TLS servers which use GOST ciphersuites for\nRussian clients and RSA/DSA ciphersuites for foreign clients.\n\n5. Calculation of digests and symmetric encryption\n OpenSSL provides specific commands (like sha1, aes etc) for calculation\n of digests and symmetric encryption. Since such commands cannot be\n added dynamically, no such commands are provided for GOST algorithms.\n Use generic commands 'dgst' and 'enc'.\n\n Calculation of GOST R 34.11-94 message digest\n\n openssl dgst -md_gost94 datafile\n\n Note that GOST R 34.11-94 specifies that digest value should be\n interpreted as little-endian number, but OpenSSL outputs just hex dump\n of digest value.\n\n So, to obtain correct digest value, such as produced by gostsum utility\n included in the engine distribution, bytes of output should be\n reversed.\n \n Calculation of HMAC based on GOST R 34.11-94\n\n openssl dgst -md_gost94 -hmac <32 bytes of key> datafile\n  \n  (or use hexkey if key contain NUL bytes)\n Calculation of GOST 28147 MAC\n\n openssl dgst -mac gost-mac -macopt key:<32 bytes of key> datafile\n\n Note absence of an option that specifies digest algorithm. gost-mac\n algorithm supports only one digest (which is actually part of\n implementation of this mac) and OpenSSL is clever enough to find out\n this.\n\n Following mac options are supported:\n\n key:(32 bytes of key)\n\n hexkey:(64 hexadecimal digits of key)\n\n Engine support calculation of mac with size different from default 32\n bits. You can set mac size to any value from 1 to 8 bytes using\n\n -sigopt size:(number from 1 to 8 - mac size in bytes)\n\n (dgst command uses different EVP_PKEY_CTX for initialization and for\n  finalization of MAC. Option of first are set via -macopt, and for\n  second via -sigopt. Key should be set during initialization and size\n  during finalization. If you use API functions\n  EVP_DigestSignInit/EVP_DigestSignFinal, you can set both options at\n  the same time).\n\n Encryption with GOST 28147 CFB mode\n openssl enc -gost89 -out encrypted-file -in plain-text-file -k <passphrase>  \n Encryption with GOST 28147 CNT mode\n openssl enc -gost89-cnt -out encrypted-file -in plain-text-file -k <passphrase>\n Encryption with GOST 28147 CBC mode\n openssl enc -gost89-cbc -out encrypted-file -in plain-text-file -k <passphrase>\n\n6. Encrypting private keys and PKCS12\n\nTo produce PKCS12 files compatible with MagPro CSP, you need to use\nGOST algorithm for encryption of PKCS12 file and also GOST R 34.11-94\nhash to derive key from password.\n\nopenssl pksc12 -export -inkey gost.pem -in gost_cert.pem -keypbe gost89\\\n   -certpbe gost89 -macalg md_gost94\n \n7. Testing speed of symmetric ciphers.\n   \nTo test performance of GOST symmetric ciphers you should use -evp switch\nof the openssl speed command. Engine-provided ciphers couldn't be\naccessed by cipher-specific functions, only via generic evp interface\n\n openssl speed -evp gost89\n openssl speed -evp gost89-cnt\n openssl speed -evp gost89-cbc\n\n\nPROGRAMMING INTERFACES DETAILS\n\nApplications never should access engine directly. They only use provided\nEVP_PKEY API. But there are some details, which should be taken into\naccount.\n\nEVP provides two kinds of API for key exchange:\n\n1. EVP_PKEY_encrypt/EVP_PKEY_decrypt functions, intended to use with\n\tRSA-like public key encryption algorithms\n\n2. EVP_PKEY_derive, intended to use with Diffie-Hellman-like shared key\ncomputing algorithms.\n\nAlthough VKO R 34.10 algorithms, described in the RFC 4357 are\ndefinitely second case, engine provides BOTH API for GOST R 34.10 keys.\n\nEVP_PKEY_derive just invokes appropriate VKO algorithm and computes\n256 bit shared key. VKO R 34.10-2001 requires 64 bits of random user key\nmaterial (UKM). This UKM should be transmitted to other party, so it is\nnot generated inside derive function.\n\nIt should be set by EVP_PKEY_CTX_ctrl function using\nEVP_PKEY_CTRL_SET_IV command after call of EVP_PKEY_derive_init, but\nbefore EVP_PKEY_derive.\n\tunsigned char ukm[8];\n\tRAND_bytes(ukm,8);\n   EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_DERIVE, 8, ukm)\n\nEVP_PKEY_encrypt encrypts provided session key with VKO shared key and\npacks it into GOST key transport structure, described in the RFC 4490.\n\nIt typically uses ephemeral key pair to compute shared key and packs its\npublic part along with encrypted key. So, for most cases use of \nEVP_PKEY_encrypt/EVP_PKEY_decrypt with GOST keys is almost same as with\nRSA.\n\nHowever, if peerkey field in the EVP_PKEY_CTX structure is set (using\nEVP_PKEY_derive_set_peerkey function) to EVP_PKEY structure which has private\nkey and uses same parameters as the public key from which this EVP_PKEY_CTX is\ncreated, EVP_PKEY_encrypt will use this private key to compute shared key and\nset ephemeral key in the GOST_key_transport structure to NULL. In this case\npkey and peerkey fields in the EVP_PKEY_CTX are used upside-down.\n\nIf EVP_PKEY_decrypt encounters GOST_key_transport structure with NULL\npublic key field, it tries to use peerkey field from the context to\ncompute shared key. In this case peerkey field should really contain\npeer public key.\n\nEncrypt operation supports EVP_PKEY_CTRL_SET_IV operation as well.\nIt can be used when some specific restriction on UKM are imposed by\nhigher level protocol. For instance, description of GOST ciphersuites\nrequires UKM to be derived from shared secret. \n\nIf UKM is not set by this control command, encrypt operation would\ngenerate random UKM.\n"
 },
 {
  "repo": "rakeshsukla53/Cryptography",
  "language": "Python",
  "readme_contents": "\nWEBSITE - **`http://www.asecuritysite.com/encryption`**\n\n# Cryptography\n\n[Hard Core Predicate](#hard-core-predicate)\n\n[Euclidean Algorithm](#euclidean-algorithm)\n\n[One time Pad](#one-time-pad)\n\n[Public Key Crptography](#public-key-crytography)\n\n[Diffie-Hellman](#Diffie-Hellman)\n\n[Elliptic Curve](#elliptic-curve)\n \n[Randomness and pseudo randomness](#randomness-pseudo-randomness)\n\n[Art of Problem](#fundamental-theorem-arithmetic)\n\n[Symmetric Key Encryption](#symmetric-crytography)\n\n[substitution/permutation networks](#substitution-permutation-networks)\n\n[Block Ciphers](#block-cipher)\n\n[Feistel Networks](#feistel-networks)\n\n[Modes of Operation ECB, CBC, CFB, OFB](#modes-of-operation)\n\n[Homomorphic Encryption](#homomorphic-encryption)\n\n[Elgamal Encryption](#elgamal-encryption)\n\n[Merkle-Hellman](#merkle-hellman)\n\n[Discrete Logarthimic Problem](#discrete-logarthimic-problem)\n\n[Collision Resistant Hashing](#collision-resistant-hashing)\n\n[Public-Key-Infrastructures](#public-key-infrastructures)\n\n[HMAC](#hmac)\n\n[Quantum Cryptography](#quantum-cryptography)\n\n[Identity Based Encryption](#identity-based-encryption)\n\n[Lamport Scheme](#lamport-Scheme)\n\n[Secure Online Purchasing](#secure-online-purchasing)\n\n[Hybrid Encryption](#hybrid-encryption)\n\n[chosen-plaintext attack](#choosen-plaintext-attack)\n\n[choosen cipher text attack](#choosen-cipher-attack)\n\n- - -\n\n## Choosen Cipher Attack\n\n\n\n\n\n\n\n## Choosen Plaintext Attack\n\n\n\n\n\n\n## Hybrid Encryption \n\nHybrid encryption is a mode of encryption that merges two or more encryption systems. It incorporates a combination of asymmetric and symmetric encryption to benefit from the strengths of each form of encryption. These strengths are respectively defined as speed and security.\n\nHybrid encryption is considered a highly secure type of encryption as long as the public and private keys are fully secure.\n\n## Secure Online Purchashing\n\nYou enter your credit card numbers online, click \u201cOK\u201d and wait with bated breath for your CD to arrive the next day \u2026 but what about that lingering question of how secure you really are?\n\nCryptography, the process of encoding information, has been around since Julius Caesar\u2019s day. In fact, the technology is so solid, a method that was revolutionary 30 years ago is still used today. It\u2019s called public key cryptography, and despite being decades old, it makes secure Internet commerce easier.\n\nPublic key cryptography allows anyone to scramble a message (like credit card information) to an intended party, but it lets only that party unscramble it. It also plays a role in authentication (Is that really Amazon I\u2019m ordering from?).\n\n\n## Lamport Scheme\n\nIn cryptography, a Lamport signature or Lamport one-time signature scheme is a method for constructing a digital signature. Lamport signatures can be built from any cryptographically secure one-way function; usually a cryptographic hash function is used.\n\nAlthough the potential development of quantum computers threatens the security of many common forms of cryptography such as RSA, it is believed that Lamport signatures with large hash functions would still be secure in that event. Unfortunately, each Lamport key can only be used to sign a single message. However, combined with hash trees, a single key could be used for many messages, making this a fairly efficient digital signature scheme.\n\n\n\n\n\n## Identity Based Encryption\n\n## Quantum Cryptography \n \nIn Quantum Cryptography, keys are exchanged through `quantum signals` if you see the below image!\n\n![link](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Quantum%20Cryptography/Selection_001.png)\n\nIf eve tries to extract the signals then `Quantum Bubbles` will be destroyed. Quantum signals will be destroyed like bubbles. \n\n![link](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Quantum%20Cryptography/Selection_002.png)\n\nEves dropping is almost impossible with Quantum Cryptography. \n\nNew keys are generated in less than a minute here.\n\n![links](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Quantum%20Cryptography/Selection_003.png)\n\nQuantum cryptography is the science of exploiting quantum mechanical properties to perform cryptographic tasks. The best known example of quantum cryptography is quantum key distribution which offers an information-theoretically secure solution to the key exchange problem. Currently used popular public-key encryption and signature schemes (e.g., RSA and ElGamal) can be broken by quantum adversaries. The advantage of quantum cryptography lies in the fact that it allows the completion of various cryptographic tasks that are proven or conjectured to be impossible using only classical (i.e. non-quantum) communication (see below for examples). For example, It is impossible to copy data encoded in a quantum state and the very act of reading data encoded in a quantum state changes the state.\n\n## HMAC \n\nHMAC stands for `Keyed-Hash Message Authentication Code`\n\nWhy we need HMAC? Because we want to know the integrity of the information transferred. HMAC ensures that the integrity of the message is not broken.\n\nGenerating HMAC is super easy!\n\nFrom the `SENDER SIDE`\n\n![HMAC](https://github.com/rakeshsukla53/Cryptography/blob/master/images/HMAC/Selection_001.png)\n\nFrom the `RECEIVER SIDE`\n\n![REC](https://github.com/rakeshsukla53/Cryptography/blob/master/images/HMAC/Selection_002.png)\n\nWhy we use `HMAC`not `MAC`?\n\n![HMAC](https://github.com/rakeshsukla53/Cryptography/blob/master/images/HMAC/Selection_003.png)\n\nAdvantage of `HMAC` over `MAC`\n \n![Advantage of HMAC](https://github.com/rakeshsukla53/Cryptography/blob/master/images/HMAC/Selection_004.png)\n\nHMAC SPECIFICATION \n\n![HMAC SPECIFICATION](https://github.com/rakeshsukla53/Cryptography/blob/master/images/HMAC/Selection_005.png)\n\nWhole `Algorithm`\n\n![Algorithm](https://github.com/rakeshsukla53/Cryptography/blob/master/images/HMAC/Selection_006.png)\n\n\n## Public-Key-Infrastructures\n\nPKI is a two key Asymmetric Cryptosystem.  Its the same asymmetric algorithm but here `confidentiality` `integrity` and `authenticity` are extremely important.\n\n![PKI](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Public-Key-Infrastructures/Selection_002.png)\n\nIn PKI, it is important to know whether the party sending us the public key is a genuine or not? Because anyone can send his/her public key, but how do you verify the party is real!\n\nFor verifying your identity you have digital signatures, that can be initially shared to ensure the person is real not some intruder. \n\n`Public Key` is associated with each `digital signature` \n\n![KEY](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Public-Key-Infrastructures/Selection_005.png)\n\nYou need to first share the digital signature and then send messages. \n\n![Digital Signature](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Public-Key-Infrastructures/Selection_006.png)\n\n## Collision Resistant Hashing\n\nHash algorithms are often used for computing digital signatures. The signer of a message runs the original message through a hash algorithm to produce a digest value, then encrypts the digest to produce a signature. Someone verifying the signature will run the message through the same hash algorithm, and will decrypt the attached signature value to ensure the digest it contains matches the one they computed.\n\nIf collisions are easy to find, they allow an attacker to take an authentic digitally signed message, find a different message that produces the same digest (the collision), then substitute the fake message for the real one while keeping the same signature value. Someone trying to validate the signature won't be able to tell the difference. This destroys the value of digital signatures.\n\nTesting is difficult. You can apply chi-squared tests and look for uneven digest bit distributions over a wide number of single- and multi- bit changes, but that's not proof. Most of the strength relies on the algorithm's resulting digest size being large enough to mask any undiscovered weaknesses.\n\nthere is no such thing as `collision-free` hash function \n\n\n## Discrete Logarthimic Problem\n\nEasy to calculate one way but extremely difficult to do the reverse\n\n![link](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Discrete-Mathematics/Selection_001.png)\n\nHere my modulus operator is a small prime number(17). If the number is extremely large then it is almost impossible to calculate the reverse!\n\n`3^17 mpd 33979348237924720430274729462704702794729705824927408232324342323232` \n\nNow the reverse calculation is now impossible!\n\n![Modulus Operator](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Discrete-Mathematics/Selection_002.png)\n\n## Merkle Hellman\n\nAgain this is very similar to Diffie Hellman\n\nWatch this 2 min video [Merkle Hellman](https://www.youtube.com/watch?v=wLFztjQDdzI)\n\n## Elgamal-Encryption\n\nSimilar to Diffie Hellman method, \n\nThe below image describes everything:\n\n![link](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Elgamal-Encryption/Selection_003.png)\n\nCheck out this link for more [Link](http://www.asecuritysite.com/encryption/elgamal)\n\n## Homomorphic Encryption\n \nHomomorphic encryption is a form of encryption that allows computations to be carried out on ciphertext, thus generating an encrypted result which, when decrypted, matches the result of operations performed on the plaintext.\n\nThis is sometimes a desirable feature in modern communication system architectures. Homomorphic encryption would allow the chaining together of different services without exposing the data to each of those services. For example, a chain of different services from different companies could calculate 1) the tax 2) the currency exchange rate 3) shipping, on a transaction without exposing the unencrypted data to each of those services.[1] Homomorphic encryption schemes are malleable by design. This enables their use in cloud computing environment for ensuring the confidentiality of processed data. In addition the homomorphic property of various cryptosystems can be used to create many other secure systems, for example secure voting systems,[2] collision-resistant hash functions, private information retrieval schemes, and many more. \n\n`Partially homomorphic cryptosystems` - ElGamal, Paillier\n\n`fully homomorphic encryption` - The examples listed above allow homomorphic computation of some operations on ciphertexts (e.g., additions, multiplications, quadratic functions, etc.). A cryptosystem that supports arbitrary computation on ciphertexts is known as fully homomorphic encryption (FHE) and is far more powerful.\n\nSuch a scheme enables the construction of programs for any desirable functionality, which can be run on encrypted inputs to produce an encryption of the result. Since such a program need never decrypt its inputs, it can be run by an untrusted party without revealing its inputs and internal state. The existence of an efficient and fully homomorphic cryptosystem would have great practical implications in the outsourcing of private computations, for instance, in the context of cloud computing.\n\n![Link](https://github.com/rakeshsukla53/Cryptography/blob/master/images/%20homomorphic%20encryption/Selection_001.png)\n\n## Modes of Operation\n\nWhat is the difference between ECB, CBC, OFB? \n\nHow many different modes of operation?\n\n![Modes](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Modes%20of%20Operation/Selection_001.png)\n\nWhat all different hashing and cryptographic techniques? \n\n![Crypto](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Modes%20of%20Operation/Selection_002.png)\n\nHow digital signatures work?\n\nDigital signatures captures both the public and private key!\n\n![Digital Signatures](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Modes%20of%20Operation/Selection_003.png)\n\n`ECB` \n\nThis technique is very weak since the same cipher text appears for same block\n\n![ECB](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Modes%20of%20Operation/Selection_004.png)\n\nFor example if your input is repeating like the example below:\n\n![ECB](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Modes%20of%20Operation/Selection_007.png)\n\n`CBC` \n\nBlocks of chaining are used!\n\n![CBC](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Modes%20of%20Operation/Selection_005.png)\n\n\n`OFB` Output Feedback\n\nFeedback of first block goes into the other block!\n\n![OFB](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Modes%20of%20Operation/Selection_009.png)\n\n\n`CFB` Cipher Feedback\n\nCipher feedback goes into the other block!\n\n![CFB](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Modes%20of%20Operation/Selection_009.png)\n\n\n## Feistel Networks\n\nIn cryptography, a Feistel cipher is a symmetric structure used in the construction of block ciphers. \n\nFor each round i =0,1,\\dots,n, compute\n\n    L_{i+1} = R_i\\,\n    R_{i+1}= L_i \\oplus {\\rm F}(R_i, K_i).\n\nThen the ciphertext is (R_{n+1}, L_{n+1}).\n\nDecryption of a ciphertext (R_{n+1}, L_{n+1}) is accomplished by computing for i=n,n-1,\\ldots,0\n\n    R_{i} = L_{i+1}\\,\n    L_{i} = R_{i+1} \\oplus {\\rm F}(L_{i+1}, K_{i}).\n\nThen (L_0,R_0) is the plaintext again.\n\n>> One advantage of the Feistel model compared to a substitution-permutation network is that the round function {\\rm F} does not have to be invertible.\n\nSome more properties of Block Cipher\n\n![Block Cipher](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Feistal%20Networks/Selection_001.png)\n\nEncryption in Feistel Model\n\n![Feistal Mode](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Feistal%20Networks/Selection_002.png)\n\nDecryption in Feistel Model\n\n![Decrpytion](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Feistal%20Networks/Selection_003.png)\n\n\n\n## Block Cipher\n\nBlock Cipher is made of up two algorithms: Encryption and Decryption\n\nCan we use any function as block cipher function ? NO there are certain rules for function.\n\nSome of the properties of block ciphers:\n\n![Properties](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Block%20Cipher/Selection_010.png)\n\nBlock Ciphers should be defined in such a way that it is reversible\n\n![Block Ciphers](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Block%20Cipher/Selection_011.png)\n\nIn block cipher, you have a `plaintext` `key` and `ciphertext`\n\n![BC](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Block%20Cipher/Selection_012.png)\n\nTwo rules of `Block Ciphers` \n\n![Rules](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Block%20Cipher/Selection_013.png)\n\n\n## Substitution Permutation Networks\n\nIn cryptography, an SP-network, or substitution-permutation network (SPN), is a series of linked mathematical operations used in block cipher algorithms such as AES (Rijndael). Other ciphers that use SPNs are 3-Way, SAFER, SHARK, and Square.\n\nSuch a network takes a block of the plaintext and the key as inputs, and applies several alternating \"rounds\" or \"layers\" of substitution boxes (S-boxes) and permutation boxes (P-boxes) to produce the ciphertext block. The S-boxes and P-boxes transform (sub-)blocks of input bits into output bits. It is common for these transformations to be operations that are efficient to perform in hardware, such as exclusive or (XOR) and bitwise rotation. The key is introduced in each round, usually in the form of \"round keys\" derived from it. (In some designs, the S-boxes themselves depend on the key.)\n\nDecryption is done by simply reversing the process (using the inverses of the S-boxes and P-boxes and applying the round keys in reversed order).\n\nTypically `XOR` operation is performed here.\n\nThis is how the substitution cipher works like:\n\n![SPN](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Substitution%20Permutation%20Networks/Selection_001.png)\n\n\n## Symmetric Crytography \n\nHere we are using the same key to encrypt and decrypt data. Even though it is very fast, but the key must be stored securely. \n\n![Symmetric Crytography](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Symmetric%20Crypography/Selection_001.png)\n\n\n\n\n\n## Fundamental Theorem Arithmetic\n\nEvery number can be imagined like a lock and keys are the prime numbers(Factors)\n\nEach number can be represented as a multiplication of prime numbers\n\n`15 = 5*3`\n`20 = 5*2*2`\n`21 = 7*3`\n`22 = 2*11`\n\nYou can't find any other prime numbers whose multiplication will give you the same result, and thats why the factors are also known as key. Think of each number as a `LOCK` now\n\n![LOCK](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Art%20of%20Problems/Selection_001.png)\n\nKeys are the prime numbers whose addition and multiplication will give you the number\n\n![KEYS](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Art%20of%20Problems/Selection_002.png)\n\n\n## Randomness Pseudo Randomness \n\n`Pseudo random generator` must repeat themselves. If the size of the seed is small, then after 1000 numbers it will start to repeat. Depending on the size of seed the repeating interval is decided.\n\n>> What is possible, What is possible in reasonable amount of time is all about Crytography.\n \n**With pseudo random generators the security increases as the length of the seed increases.**\n\nThe blue parts show pseudo random generator which is repeating. The white part shows random generator which is truly random\n\n![Pseudo Random Generator](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Pseduo%20Random%20Generator/Selection_001.png)\n\n\n## Elliptic Curve \n\nElliptic curve cryptography (ECC) is an approach to public-key cryptography based on the algebraic structure of elliptic curves over finite fields. ECC requires smaller keys compared to non-ECC cryptography (based on plain Galois fields) to provide equivalent security.\n\nElliptic curves are applicable for encryption, digital signatures, pseudo-random generators and other tasks. They are also used in several integer factorization algorithms that have applications in cryptography.\n\n>> Public-key cryptography is based on the intractability of certain mathematical problems. Early public-key systems are secure assuming that it is difficult to factor a large integer composed of two or more large prime factors. For elliptic-curve-based protocols, it is assumed that finding the discrete logarithm of a random elliptic curve element with respect to a publicly known base point is infeasible: this is the **\"elliptic curve discrete logarithm problem\"**\n\nElliptic curves are generally in the form:\n\n![Elliptic Curves](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Elliptic%20Curve/Selection_001.png)\n\nAddition in Elliptic Curves:\n\nThe way addition and multiplication are performed for Elliptic Curves is shown here:\n\n![addition](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Elliptic%20Curve/Selection_002.png)\n\nThe reason for Elliptic Curves will work for finite field is because we need to make sure that if there are two points on the curve, and there is a infinite line drawn to connect two points should also cut a third point. \n\nResult for addition we get by drawing a vertical line as shown below:\n\nMultiplication is `n * addition` addition is calculated in a really different way in `Elliptic Curves` which means multiplication so powerful!! **\"elliptic curve discrete logarithm problem\"**\n\n![Addition Result](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Elliptic%20Curve/Selection_003.png)\n\nNow the ECC is applied for Diffie Hellman Crytography. They agree on certain parameters, and share a public key just like normal Diffie Hellman!\n\n![Diffie Hellman Parameters](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Elliptic%20Curve/Selection_004.png)\n\nWhat each parameters mean here \n\n![ECC](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Elliptic%20Curve/Selection_005.png)\n\nAlice and Bob calculate their private key by multiplying with `G` which is also known as `Generator Sequence` \n\n![ECC](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Elliptic%20Curve/Selection_006.png)\n\nResult of Diffie Hellman! Algorithm \n\n![DF](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Elliptic%20Curve/Selection_007.png)\n\n\n## Diffie Hellman\n\nThere is a problem with symmetric key cryptography \n\nThere are lots of computer on internet which wants to send messages but don't have the shared key, then how will they send the messages?\n\n![Problems](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Diffie%20Hellman/Selection_001.png)\n\n1- First they choose the `blue` color\n2- The alice will choose `orange` color, and Bob will choose `green` colors. Not send this over the network\n3- Mix the color\n4- See the other images for more clarity \n\nUsing colors to understand how diffie hellman algorithm works \n\n![Colors](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Diffie%20Hellman/Selection_002.png)\n\nNow they will exchange their colors \n\n![Mix](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Diffie%20Hellman/Selection_003.png)\n\nThe final result after mixing should be also be same, as you can see in the above image.\n\nMathematics Behind `D-H`\n\nStep 1:\n\n![Step1](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Diffie%20Hellman/Selection_004.png)\n\nStep 2:\n\n![Step2](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Diffie%20Hellman/Selection_005.png)\n\n\nStep 3:\n\nAlice and Bob both will compute the final value of `s` which should be equal\n\n![Step3](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Diffie%20Hellman/Selection_006.png)\n\nStep 4:\n\nThis is a `Discrete Logarithm Problem` \n\n![Step4](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Diffie%20Hellman/Selection_007.png)\n\n## Public Key Crptography\n\nIt is also known as `Asymmetric Scheme` since you are using two keys Public and Private\n\nA cryptographic system that uses two keys -- a public key known to everyone and a private or secret key known only to the recipient of the message. When John wants to send a secure message to Jane, he uses Jane's public key to encrypt the message. Jane then uses her private key to decrypt it.\n\nAn important element to the public key system is that the public and private keys are related in such a way that only the public key can be used to encrypt messages and only the corresponding private key can be used to decrypt them. Moreover, it is virtually impossible to deduce the private key if you know the public key.\n\nPublic-key systems, such as Pretty Good Privacy (PGP), are becoming popular for transmitting information via the Internet. They are extremely secure and relatively simple to use. The only difficulty with public-key systems is that you need to know the recipient's public key to encrypt a message for him or her. What's needed, therefore, is a global registry of public keys, which is one of the promises of the new LDAP technology.\nPublic key cryptography was invented in 1976 by Whitfield Diffie and Martin Hellman. For this reason, it is sometime called Diffie-Hellman encryption. It is also called asymmetric encryption because it uses two keys instead of one key (symmetric encryption).\n\n![Public Key Cryptography](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Public%20Key%20Cryptography/Selection_001.png)\n\nBoth ways we can achieve this. Either using private keys to first encrypt, and then decrypt or vice versa.\n\n![Public Key Cryptography](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Public%20Key%20Cryptography/Selection_001.png) \n\n\n\n## One Time Pad\n\nIn cryptography, the one-time pad (OTP) is an encryption technique that cannot be cracked if used correctly. In this technique, a plaintext is paired with a random secret key (also referred to as a one-time pad). Then, each bit or character of the plaintext is encrypted by combining it with the corresponding bit or character from the pad using **modular addition**. If the key is truly random, is at least as long as the plaintext, is never reused in whole or in part, and is kept completely secret, then the resulting ciphertext will be impossible to decrypt or break.It has also been proven that any cipher with the perfect secrecy property must use keys with effectively the same requirements as OTP keys.\n\nGilbert S. Vernam for the XOR operation used for the encryption of a one-time pad.\n\n`Some of the properties of one time pad`\n\n![One time pad](https://github.com/rakeshsukla53/Cryptography/blob/master/images/One-time-pad/Selection_001.png)\n\n`How one time pad works`\n\n![One time pad](https://github.com/rakeshsukla53/Cryptography/blob/master/images/One-time-pad/Selection_002.png)\n\nSince the letters cannot be added we first need to convert into decimal or binary. Here we converting into decimal and then adding them. If the keys are of same size as of plaintext, and it is truly random then it is almost impossible to decrypt it.\n\n![Modular Addition](https://github.com/rakeshsukla53/Cryptography/blob/master/images/One-time-pad/Selection_002.png)\n\n\n## Euclidean Algorithm\n\nIn mathematics, the Euclidean algorithm[a], or Euclid's algorithm, is an efficient method for computing the greatest common divisor (GCD) of two numbers, the largest number that divides both of them without leaving a remainder\n\n[Euclid Algorithm](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Euclidean%20Algorithm/Selection_002.png)\n\nApplication of Euclid Algorithm \n\nThe Euclidean algorithm has many theoretical and practical applications. It is used for reducing fractions to their simplest form and for performing division in modular arithmetic. Computations using this algorithm form part of the cryptographic protocols that are used to secure internet communications, and in methods for breaking these cryptosystems by factoring large composite numbers. The Euclidean algorithm may be used to solve Diophantine equations, such as finding numbers that satisfy multiple congruences according to the Chinese remainder theorem, to construct continued fractions, and to find accurate rational approximations to real numbers. Finally, it is a basic tool for proving theorems in number theory such as Lagrange's four-square theorem and the uniqueness of prime factorizations. The original algorithm was described only for natural numbers and geometric lengths (real numbers), but the algorithm was generalized in the 19th century to other types of numbers, such as Gaussian integers and polynomials of one variable. This led to modern abstract algebraic notions such as Euclidean domains.\n\n  \n## Hard Core Predicate \n\nIn cryptography, a hard-core predicate of a one-way function f is a predicate b (i.e., a function whose output is a single bit) which is easy to compute given x but is hard to compute given f(x). In formal terms, there is no probabilistic polynomial-time algorithm that computes b(x) from f(x) with probability significantly greater than one half over random choice of x.\n\n`RSA` is implemented on the same principal\n\n![RSA](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Hard_Core_Predicate/14.png)\n\n`RSA` is also known as one way TRAP door function which means that there is no way to undue the encryption unless there you have the `private key`. \n\n![Easy to Predict](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Hard_Core_Predicate/9.png)\n\n![Hard to Predict](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Hard_Core_Predicate/8.png)\n\n`private key` is represented by `d` in the below images\n\n`n` is the trap door here. Because of prime factorization it is extremely difficult to find n \n\n`number` which is greater than 1 can be represented exactly one way as the product of two prime numbers\n\n`15 = 3*5`\n \n`255 = 3*5*17`\n\n`n` knowing the factors of n is the trapdoor function \n\n![Real Life Public Key](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Hard_Core_Predicate/13.png)\n\n[![RSA Video](https://github.com/rakeshsukla53/Cryptography/blob/master/images/Hard_Core_Predicate/1.png)](https://www.youtube.com/watch?v=Z8M2BTscoD4)\n\nSo hard core predicate is basically a boolean value which can tell whether the inverse of any function can be done or not in `True` or `False`\n\nThere is a difference between `One way function` and `Trap Door Function`. RSA is basically a `Trap Door Function` \n\n`Hard Core Bit` Predict `easy to compute` given x but `hard to guess` given f(x)\n\n\n\n\n\n\n\n\n"
 },
 {
  "repo": "openssh/openssh-portable",
  "language": "C",
  "readme_contents": "See https://www.openssh.com/releasenotes.html#9.0p1 for the release notes.\n\nPlease read https://www.openssh.com/report.html for bug reporting\ninstructions and note that we do not use Github for bug reporting or\npatch/pull-request management.\n\nThis is the port of OpenBSD's excellent OpenSSH[0] to Linux and other\nUnices.\n\nOpenSSH is based on the last free version of Tatu Ylonen's sample\nimplementation with all patent-encumbered algorithms removed (to\nexternal libraries), all known security bugs fixed, new features\nreintroduced and many other clean-ups.  OpenSSH has been created by\nAaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo de Raadt,\nand Dug Song. It has a homepage at https://www.openssh.com/\n\nThis port consists of the re-introduction of autoconf support, PAM\nsupport, EGD/PRNGD support and replacements for OpenBSD library\nfunctions that are (regrettably) absent from other unices. This port\nhas been best tested on AIX, Cygwin, HP-UX, Linux, MacOS/X,\nFreeBSD, NetBSD, OpenBSD, OpenServer, Solaris and UnixWare.\n\nThis version actively tracks changes in the OpenBSD CVS repository.\n\nThe PAM support is now more functional than the popular packages of\ncommercial ssh-1.2.x. It checks \"account\" and \"session\" modules for\nall logins, not just when using password authentication.\n\nThere is now several mailing lists for this port of OpenSSH. Please\nrefer to https://www.openssh.com/list.html for details on how to join.\n\nPlease send bug reports and patches to https://bugzilla.mindrot.org or\nthe mailing list openssh-unix-dev@mindrot.org.  To mitigate spam, the\nlist only allows posting from subscribed addresses.  Code contribution\nare welcomed, but please follow the OpenBSD style guidelines[1].\n\nPlease refer to the INSTALL document for information on dependencies and\nhow to install OpenSSH on your system.\n\nDamien Miller <djm@mindrot.org>\n\nMiscellania -\n\nThis version of OpenSSH is based upon code retrieved from the OpenBSD CVS\nrepository which in turn was based on the last free sample implementation\nreleased by Tatu Ylonen.\n\nReferences -\n\n[0] https://www.openssh.com/\n[1] https://man.openbsd.org/style.9\n\n"
 },
 {
  "repo": "TorgoTorgo/ghidra-findcrypt",
  "language": "Java",
  "readme_contents": "# Ghidra FindCrypt\n![Bug eyed Ghidra looks at complex algorithms](docs/findcrypt_logo.png)\n\n[![Github status](https://github.com/TorgoTorgo/ghidra-findcrypt/actions/workflows/main.yml/badge.svg)](https://github.com/TorgoTorgo/ghidra-findcrypt/actions/workflows/main.yml)\n[![Gitlab status](https://gitlab.com/Torgo/ghidra_findcrypt/badges/master/pipeline.svg)](https://gitlab.com/Torgo/ghidra_findcrypt/pipelines/master/latest)\n\nThis is a re-write of another [Ghidra FindCrypt](https://github.com/d3v1l401/FindCrypt-Ghidra/) script\nas an auto analysis module. It also takes better advantage of the Ghidra\nAPI to label found constants.\n\n## Building\n\nFindCrypt builds like a standard Ghidra module:\n\n```bash\ncd FindCrypt\nGHIDRA_INSTALL_DIR=/path/to/Ghidra_PUBLIC... gradle\n```\n\nThis will output a zip in the `FindCrypt/dist/` directory.\n\nNote: Ghidra FindCrypt no longer supports Ghidra versions prior to 9.2 as they\nlack the Gson JSON library.\n\n## Installing\n\nYou can either build it yourself (see above) or download\na zip from the [Github releases](https://github.com/TorgoTorgo/ghidra-findcrypt/releases) or [GitLab releases](https://gitlab.com/Torgo/ghidra_findcrypt/-/releases)\n\nThe extension can be installed into Ghidra like so:\n- Extract the zip if downloaded from the release page\n- From the Project window hit `File` -> `Install extensions...`\n- Click the green plus icon on the top right\n- In the file browser that opens, select the zip. In case of the released zip the final zip is inside  `FindCrypt/dist.\n- Click OK and restart Ghidra\n\n## Using\n\nOnce the script is installed, a new Analysis is added to the Auto Analyze window\ncalled \"Find Crypt\", it's enabled by default and it's safe to re-run. If you have\nan existing file, open the \"Analysis\" menu in the CodeBrowser tool and click\n\"Auto Analyze\". Select the \"Find Crypt\" analysis from the list and click Analyze.\n\nOnce the analysis is complete, any found crypt constants will be labeled with\nthe algorithm they're associated with. You can find these labels in the \"Labels\"\nfolder in the Symbol Tree window. The labels are prefixed with `CRYPT_` to group\nthem together.\n\nThe analysis will also try to set the datatype for the found constants, but if\na datatype has been applied by another analysis module that other module will\ntake precedence.\n\nA comment is always placed when a crypt constant is found to tell you the type\nand the size of the constant, just in case the datatype wasn't applied.\n\n"
 },
 {
  "repo": "perlin-network/noise",
  "language": "Go",
  "readme_contents": "# noise\n\n[![GoDoc][1]][2] [![Discord][7]][8] [![MIT licensed][5]][6] ![Build Status][9] [![Go Report Card][11]][12] [![Coverage Status][13]][14]\n\n[1]: https://godoc.org/github.com/perlin-network/noise?status.svg\n[2]: https://godoc.org/github.com/perlin-network/noise\n[5]: https://img.shields.io/badge/license-MIT-blue.svg\n[6]: LICENSE\n[7]: https://img.shields.io/discord/458332417909063682.svg\n[8]: https://discord.gg/dMYfDPM\n[9]: https://github.com/perlin-network/noise/workflows/CI/badge.svg\n[11]: https://goreportcard.com/badge/github.com/perlin-network/noise\n[12]: https://goreportcard.com/report/github.com/perlin-network/noise\n[13]: https://codecov.io/gh/perlin-network/noise/branch/master/graph/badge.svg\n[14]: https://codecov.io/gh/perlin-network/noise\n\n**noise** is an opinionated, easy-to-use P2P network stack for decentralized applications, and cryptographic protocols written in Go.\n\n**noise** is made to be minimal, robust, developer-friendly, performant, secure, and cross-platform across multitudes of devices by making use of a small amount of well-tested, production-grade dependencies.\n\n## Features\n\n- Listen for incoming peers, query peers, and ping peers.\n- Request for/respond to messages, fire-and-forget messages, and optionally automatically serialize/deserialize messages across peers.\n- Optionally cancel/timeout pinging peers, sending messages to peers, receiving messages from peers, or requesting messages from peers via `context` support.\n- Fine-grained control over a node and peers lifecycle and goroutines and resources (synchronously/asynchronously/gracefully start listening for new peers, stop listening for new peers, send messages to a peer, disconnect an existing peer, wait for a peer to be ready, wait for a peer to have disconnected).\n- Limit resource consumption by pooling connections and specifying the max number of inbound/outbound connections allowed at any given time.\n- Reclaim resources exhaustively by timing out idle peers with a configurable timeout.\n- Establish a shared secret by performing an Elliptic-Curve Diffie-Hellman Handshake over Curve25519.\n- Establish an encrypted session amongst a pair of peers via authenticated-encryption-with-associated-data (AEAD). Built-in support for AES 256-bit Galois Counter Mode (GCM).\n- Peer-to-peer routing, discovery, identities, and handshake protocol via Kademlia overlay network protocol.\n\n## Defaults\n\n- No logs are printed by default. Set a logger via `noise.WithNodeLogger(*zap.Logger)`.\n- A random Ed25519 key pair is generated for a new node.\n- Peers attempt to be dialed at most three times.\n- A total of 128 outbound connections are allowed at any time.\n- A total of 128 inbound connections are allowed at any time.\n- Peers may send in a single message, at most, 4MB worth of data.\n- Connections timeout after 10 seconds if no reads/writes occur.\n\n## Dependencies\n\n- Logging is handled by [uber-go/zap](https://github.com/uber-go/zap).\n- Unit tests are handled by [stretchr/testify](https://github.com/stretchr/testify).\n- X25519 handshaking and Curve25519 encryption/decryption and Ed25519 signatures are handled by [oasislabs/ed25519](https://github.com/oasislabs/ed25519).\n\n## Setup\n\n**noise** was intended to be used in Go projects that utilize Go modules. You may incorporate noise into your project as a library dependency by executing the following:\n\n```shell\n% go get -u github.com/perlin-network/noise\n```\n \n## Example\n\n```go\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/perlin-network/noise\"\n)\n\nfunc check(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\n\n// This example demonstrates how to send/handle RPC requests across peers, how to listen for incoming\n// peers, how to check if a message received is a request or not, how to reply to a RPC request, and\n// how to cleanup node instances after you are done using them.\nfunc main() { \n    // Let there be nodes Alice and Bob.\n\n    alice, err := noise.NewNode()\n    check(err)\n\n    bob, err := noise.NewNode()\n    check(err)\n\n    // Gracefully release resources for Alice and Bob at the end of the example.\n\n    defer alice.Close()\n    defer bob.Close()\n\n    // When Bob gets a message from Alice, print it out and respond to Alice with 'Hi Alice!'\n\n    bob.Handle(func(ctx noise.HandlerContext) error {\n        if !ctx.IsRequest() {\n            return nil\n        }\n\n        fmt.Printf(\"Got a message from Alice: '%s'\\n\", string(ctx.Data()))\n\n        return ctx.Send([]byte(\"Hi Alice!\"))\n    })\n\n    // Have Alice and Bob start listening for new peers.\n\n    check(alice.Listen())\n    check(bob.Listen())\n\n    // Have Alice send Bob a request with the message 'Hi Bob!'\n\n    res, err := alice.Request(context.TODO(), bob.Addr(), []byte(\"Hi Bob!\"))\n    check(err)\n\n    // Print out the response Bob got from Alice.\n\n    fmt.Printf(\"Got a message from Bob: '%s'\\n\", string(res))\n\n    // Output:\n    // Got a message from Alice: 'Hi Bob!'\n    // Got a message from Bob: 'Hi Alice!'\n}\n```\n\nFor documentation and more examples, refer to noise's godoc [here](https://godoc.org/github.com/perlin-network/noise).\n\n## Benchmarks\n\nBenchmarks measure CPU time and allocations of a single node sending messages, requests, and responses to/from itself over 8 logical cores on a loopback adapter.\n\nTake these benchmark numbers with a grain of salt.\n\n```shell\n% cat /proc/cpuinfo | grep 'model name' | uniq\nmodel name : Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz\n\n% go test -bench=. -benchtime=30s -benchmem\ngoos: linux\ngoarch: amd64\npkg: github.com/perlin-network/noise\nBenchmarkRPC-8           4074007              9967 ns/op             272 B/op          7 allocs/op\nBenchmarkSend-8         31161464              1051 ns/op              13 B/op          2 allocs/op\nPASS\nok      github.com/perlin-network/noise 84.481s\n```\n\n## Versioning\n\n**noise** is currently in its initial development phase and therefore does not promise that subsequent releases will not comprise of breaking changes. Be aware of this should you choose to utilize Noise for projects that are in production.\n\nReleases are marked with a version number formatted as MAJOR.MINOR.PATCH. Major breaking changes involve a bump in MAJOR, minor backward-compatible changes involve a bump in MINOR, and patches and bug fixes involve a bump in PATCH starting from v2.0.0.\n\nTherefore, **noise** _mostly_ respects semantic versioning.\n\nThe rationale behind this is due to improper tagging of prior releases (v0.1.0, v1.0.0, v1.1.0, and v1.1.1), which has caused for the improper caching of module information on _proxy.golang.org_ and _sum.golang.org_.\n\nAs a result, _noise's initial development phase starts from v1.1.2_. Until Noise's API is stable, subsequent releases will only comprise of bumps in MINOR and PATCH.\n\n## License\n\n**noise**, and all of its source code is released under the MIT [License](https://github.com/perlin-network/noise/blob/master/LICENSE).\n"
 },
 {
  "repo": "cryptomator/cryptomator",
  "language": "Java",
  "readme_contents": "[![cryptomator](cryptomator.png)](https://cryptomator.org/)\n\n[![Build](https://github.com/cryptomator/cryptomator/workflows/Build/badge.svg)](https://github.com/cryptomator/cryptomator/actions?query=workflow%3ABuild)\n[![Known Vulnerabilities](https://snyk.io/test/github/cryptomator/cryptomator/badge.svg)](https://snyk.io/test/github/cryptomator/cryptomator)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=cryptomator_cryptomator&metric=alert_status)](https://sonarcloud.io/dashboard?id=cryptomator_cryptomator)\n[![Twitter](https://img.shields.io/badge/twitter-@Cryptomator-blue.svg?style=flat)](http://twitter.com/Cryptomator)\n[![Crowdin](https://badges.crowdin.net/cryptomator/localized.svg)](https://translate.cryptomator.org/)\n[![Latest Release](https://img.shields.io/github/release/cryptomator/cryptomator.svg)](https://github.com/cryptomator/cryptomator/releases/latest)\n[![Community](https://img.shields.io/badge/help-Community-orange.svg)](https://community.cryptomator.org)\n\n## Supporting Cryptomator\n\nCryptomator is provided free of charge as an open-source project despite the high development effort and is therefore dependent on donations. If you are also interested in further development, we offer you the opportunity to support us:\n\n- [One-time or recurring donation via Cryptomator's website.](https://cryptomator.org/#donate)\n- [Become a sponsor via Cryptomator's sponsors website.](https://cryptomator.org/sponsors/)\n\n### Gold Sponsors\n\n<table>\n  <tbody>\n    <tr>\n      <td><a href=\"https://www.gee-whiz.de/\"><img src=\"https://cryptomator.org/img/sponsors/geewhiz.svg\" alt=\"gee-whiz\" height=\"80\"></a></td>\n      <td><a href=\"https://proxy-hub.com/\"><img src=\"https://cryptomator.org/img/sponsors/proxyhub.svg\" alt=\"Proxy-Hub\" height=\"80\"></a></td>\n    </tr>\n  </tbody>\n</table>\n\n### Silver Sponsors\n\n<table>\n  <tbody>\n    <tr>\n      <td><a href=\"https://mowcapital.com/\"><img src=\"https://cryptomator.org/img/sponsors/mowcapital.svg\" alt=\"Mow Capital\" height=\"40\"></a></td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n## Introduction\n\nCryptomator offers multi-platform transparent client-side encryption of your files in the cloud.\n\nDownload native binaries of Cryptomator on [cryptomator.org](https://cryptomator.org/) or clone and build Cryptomator using Maven (instructions below).\n\n## Features\n\n- Works with Dropbox, Google Drive, OneDrive, MEGA, pCloud, ownCloud, Nextcloud and any other cloud storage service which synchronizes with a local directory\n- Open Source means: No backdoors, control is better than trust\n- Client-side: No accounts, no data shared with any online service\n- Totally transparent: Just work on the virtual drive as if it were a USB flash drive\n- AES encryption with 256-bit key length\n- File names get encrypted\n- Folder structure gets obfuscated\n- Use as many vaults in your Dropbox as you want, each having individual passwords\n- Three thousand commits for the security of your data!! :tada:\n\n### Privacy\n\n- 256-bit keys (unlimited strength policy bundled with native binaries)\n- Scrypt key derivation\n- Cryptographically secure random numbers for salts, IVs and the masterkey of course\n- Sensitive data is wiped from the heap asap\n- Lightweight: [Complexity kills security](https://www.schneier.com/essays/archives/1999/11/a_plea_for_simplicit.html)\n\n### Consistency\n\n- HMAC over file contents to recognize changed ciphertext before decryption\n- I/O operations are transactional and atomic, if the filesystems support it\n- Each file contains all information needed for decryption (except for the key of course), no common metadata means no [SPOF](http://en.wikipedia.org/wiki/Single_point_of_failure)\n\n### Security Architecture\n\nFor more information on the security details visit [cryptomator.org](https://docs.cryptomator.org/en/latest/security/architecture/).\n\n## Building\n\n### Dependencies\n\n* JDK 17 (e.g. temurin)\n* Maven 3\n\n### Run Maven\n\n```\nmvn clean install\n# or mvn clean install -Pwindows\n# or mvn clean install -Pmac\n# or mvn clean install -Plinux\n```\n\nThis will build all the jars and bundle them together with their OS-specific dependencies under `target`. This can now be used to build native packages.\n\n### Start Cryptomator\n\nIf you unzip the buildkit for your OS, you will find a launcher script with some basic settings. You might want to adjust these to your needs. To start Cryptomator, simply execute the launcher script from a terminal, e.g. `launcher-linux.sh`, if you're on a Linux system.\n\n## License\n\nThis project is dual-licensed under the GPLv3 for FOSS projects as well as a commercial license for independent software vendors and resellers. If you want to modify this application under different conditions, feel free to contact our support team.\n"
 },
 {
  "repo": "bitpay/java-bitpay-client",
  "language": "HTML",
  "readme_contents": "<img src=\"https://bitpay.com/_nuxt/img/bitpay-logo-blue.1c0494b.svg\" width=\"150\">\n\n# BitPay Java client\n[![License](https://img.shields.io/github/license/bitpay/java-bitpay-client.svg?style=for-the-badge&logo=github)](https://raw.githubusercontent.com/bitpay/java-bitpay-client/master/LICENSE)\n\nFull implementation of the BitPay Payment Gateway. This library implements BitPay's [Cryptographically Secure RESTful API](https://bitpay.com/api).\n\n## Getting Started\n\nTo get up and running with our Java library quickly, follow [The GUIDE](https://github.com/bitpay/java-bitpay-client/blob/master/GUIDE.md)\n\n## Support\n\n* https://github.com/bitpay/java-bitpay-client/issues\n* https://support.bitpay.com\n\n## Contribute\n\nTo contribute to this project, please fork and submit a pull request.\n\n## License\n\nMIT License\n\nCopyright (c) 2019 BitPay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
 },
 {
  "repo": "cosmos/iavl",
  "language": "Go",
  "readme_contents": "# IAVL+ Tree \n\n\n[![version](https://img.shields.io/github/tag/cosmos/iavl.svg)](https://github.com/cosmos/iavl/releases/latest)\n[![license](https://img.shields.io/github/license/cosmos/iavl.svg)](https://github.com/cosmos/iavl/blob/master/LICENSE)\n[![API Reference](https://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667)](https://pkg.go.dev/github.com/cosmos/iavl)\n[![codecov](https://codecov.io/gh/cosmos/iavl/branch/master/graph/badge.svg)](https://codecov.io/gh/cosmos/iavl)\n![Lint](https://github.com/cosmos/iavl/workflows/Lint/badge.svg?branch=master)\n![Test](https://github.com/cosmos/iavl/workflows/Test/badge.svg?branch=master)\n[![Discord chat](https://img.shields.io/discord/669268347736686612.svg)](https://discord.gg/AzefAFd)\n\n**Note: Requires Go 1.17+**\n\nA versioned, snapshottable (immutable) AVL+ tree for persistent data.\n\nThe purpose of this data structure is to provide persistent storage for key-value pairs (say to store account balances) such that a deterministic merkle root hash can be computed. The tree is balanced using a variant of the [AVL algorithm](http://en.wikipedia.org/wiki/AVL_tree) so all operations are O(log(n)).\n\nNodes of this tree are immutable and indexed by their hash. Thus any node serves as an immutable snapshot which lets us stage uncommitted transactions from the mempool cheaply, and we can instantly roll back to the last committed state to process transactions of a newly committed block (which may not be the same set of transactions as those from the mempool).\n\nIn an AVL tree, the heights of the two child subtrees of any node differ by at most one. Whenever this condition is violated upon an update, the tree is rebalanced by creating O(log(n)) new nodes that point to unmodified nodes of the old tree. In the original AVL algorithm, inner nodes can also hold key-value pairs. The AVL+ algorithm (note the plus) modifies the AVL algorithm to keep all values on leaf nodes, while only using branch-nodes to store keys. This simplifies the algorithm while keeping the merkle hash trail short.\n\nIn Ethereum, the analog is [Patricia tries](http://en.wikipedia.org/wiki/Radix_tree). There are tradeoffs. Keys do not need to be hashed prior to insertion in IAVL+ trees, so this provides faster iteration in the key space which may benefit some applications. The logic is simpler to implement, requiring only two types of nodes -- inner nodes and leaf nodes. On the other hand, while IAVL+ trees provide a deterministic merkle root hash, it depends on the order of transactions. In practice this shouldn't be a problem, since you can efficiently encode the tree structure when serializing the tree contents.\n"
 },
 {
  "repo": "rugbyprof/CMPS-Cryptography",
  "language": "Python",
  "readme_contents": "# CMPS-Cryptography\nIntroductory course in cryptography\n\n\n"
 },
 {
  "repo": "meganz/jodid25519",
  "language": "JavaScript",
  "readme_contents": "Jodid25519 [![Build Status](https://secure.travis-ci.org/meganz/jodid25519.png)](https://travis-ci.org/meganz/jodid25519)\n===================================================================================================================================\n\n**Note:** I (Guy Kloss) now recommend to use TweetNaCl.js (a TweetNaCl port to JavaScript) rather than this implementation, which is more likely to perform in constant time and has likely seen more eyes for review/audits.\n\nJavascript implementation of the Curve25519 and Ed25519 elliptic cryptography functions by Daniel J. Bernstein.\n\nFor the API, please consult the generated documentation under doc/ (you can run `make` to generate it).\n\nTo run the tests do the following on the console from the project's root directory:\n\n    $ npm install\n    $ make test\n\n\nContributors\n------------\n\nIf you are one of the contributors and want to add yourself or change the information here, please do submit a pull request.   Contributors appear in no particular order.\n\n### For the Curve25519 submodule\n\n* [Graydon Hoare](https://github.com/graydon): suggested clamping the private key by default for increased safety and uniformity with other implementations.\n* [liliakai](https://github.com/liliakai): spotted an unused argument in some of the functions\n* [RyanC](https://github.com/ryancdotorg): removed dependency of a function to the Javascript Math library\n* [Guy Kloss](https://github.com/pohutukawa): performance improvements through bit-shift operations, performance and conformance testing, documentation, compatibility with the npm package ecosystem, and more\n* [Michele Bini](https://github.com/rev22): originally wrote the Javascript implementation\n\n\nCopyright and MIT licensing\n---------------------------\n\n* Copyright (c) 2012 Ron Garret\n* Copyright (c) 2007, 2013, 2014 Michele Bini <michele.bini@gmail.com>\n* Copyright (c) 2014 Mega Limited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
 },
 {
  "repo": "EasonWang01/Introduction-to-cryptography",
  "language": null,
  "readme_contents": "# \u76ee\u9304\n* [\u76f8\u95dc\u5bc6\u78bc\u5b78\u4ecb\u7d39](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/0.%20%E7%9B%B8%E9%97%9C%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%8B%E7%B4%B9.md)\n* [\u6709\u95dc\u96dc\u6e4a](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/1.%20%E6%9C%89%E9%97%9C%E9%9B%9C%E6%B9%8A.md)\\\n 1.1 [Bcrypt\u3001PBKDF2\u3001Scrypt\u3001Argon2](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/1.1%20Bcrypt%E3%80%81PBKDF2%E3%80%81Scrypt%E3%80%81Argon2.md)\\\n 1.2 [SHA](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/1.2%20SHA.md)\\\n 1.3 [RIPEMD.md](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/1.3%20RIPEMD.md)\n* [\u5c0d\u7a31\u5f0f\u52a0\u5bc6](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/2.%20%E5%B0%8D%E7%A8%B1%E5%BC%8F%E5%8A%A0%E5%AF%86.md)\\\n 2.1 [AES](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/2.1%20AES.md)\\\n 2.2 [Triple-DES](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/2.2%20Triple-DES.md)\\\n 2.3 [IDEA](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/2.3%20IDEA.md)\\\n 2.4 [BlowFIsh\u3001TwoFish](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/2.4%20BlowFIsh%E3%80%81TwoFish.md)\\\n 2.5 [RC](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/2.5%20RC.md)\n* [\u975e\u5c0d\u7a31\u5f0f\u52a0\u5bc6](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/3.%20%E9%9D%9E%E5%B0%8D%E7%A8%B1%E5%BC%8F%E5%8A%A0%E5%AF%86.md)\\\n 3.1 [RSA](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/3.1%20RSA.md)\\\n 3.2 [DSA](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/3.2%20DSA.md)\\\n 3.3 [ECDSA](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/3.3%20ECDSA.md)\\\n 3.4 [Diffie\u2013Hellman](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/3.4%20Diffie%E2%80%93Hellman.md)\\\n 3.5 [ECDH](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/3.5%20ECDH.md)\\\n 3.6 [ECIES](https://github.com/EasonWang01/Introduction-to-cryptography/blob/master/3.6%20ECIES.md)\n"
 },
 {
  "repo": "pytorch/csprng",
  "language": "Batchfile",
  "readme_contents": "# PyTorch/CSPRNG\n\n[![CircleCI](https://circleci.com/gh/pytorch/csprng.svg?style=shield&circle-token=64701692dd7f13f31019612289f0200fdb661dc2)](https://circleci.com/gh/pytorch/csprng)\n\ntorchcsprng is a [PyTorch C++/CUDA extension](https://pytorch.org/tutorials/advanced/cpp_extension.html) that provides:\n\n- [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) 128-bit encryption/decryption in two modes: [ECB](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_(ECB)) and [CTR](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR)) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/pytorch/csprng/blob/master/examples/encrypt_decrypt.ipynb)\n- [cryptographically secure pseudorandom number generators](https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator) for PyTorch. [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/pytorch/csprng/blob/master/examples/csprng.ipynb)\n\n## Design\n\ntorchcsprng generates a random 128-bit key on CPU using one of its generators and runs\n[AES128](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) in [CTR mode](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR))\n either on CPU or on GPU using CUDA to generate a random 128 bit state and apply a transformation function to map it to target tensor values.\nThis approach is based on [Parallel Random Numbers: As Easy as 1, 2, 3(John K. Salmon, Mark A. Moraes, Ron O. Dror, and David E. Shaw, D. E. Shaw Research)](http://www.thesalmons.org/john/random123/papers/random123sc11.pdf).\nIt makes torchcsprng both crypto-secure and parallel on CUDA and CPU.\n\n![CSPRNG architecture](.github/csprng_architecture.png)\n\nAdvantages:\n\n- The user can choose either seed-based(for testing) or random device based(fully crypto-secure) generators\n- One generator instance for both CPU and CUDA tensors(because the encryption key is always generated on CPU)\n- CPU random number generation is also parallel(unlike the default PyTorch CPU generator)\n\n## Features\n\ntorchcsprng 0.2.0 exposes new API for tensor encryption/decryption. Tensor encryption/decryption API is dtype agnostic, so a tensor of any dtype can be encrypted and the result can be stored to a tensor of any dtype. An encryption key also can be a tensor of any dtype. Currently torchcsprng supports [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) cipher with 128-bit key in two modes: [ECB](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_(ECB)) and [CTR](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR)).\n\n* `torchcsprng.encrypt(input: Tensor, output: Tensor, key: Tensor, cipher: string, mode: string)`\n\n> - `input` tensor can be any CPU or CUDA tensor of any dtype and size in bytes(zero-padding is used to make its size in bytes divisible by block size in bytes)\n> - `output` tensor can have any dtype and the same device as `input` tensor and the size in bytes rounded up to the block size in bytes(16 bytes for AES 128)\n> - `key` tensor can have any dtype and the same device as `input` tensor and size in bytes equal to 16 for AES 128\n> - `cipher` currently can be only one supported value `\"aes128\"`\n> - `mode` currently can be either [`\"ecb\"`](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_(ECB)) or [`\"ctr\"`](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR))\n\n* `torchcsprng.decrypt(input: Tensor, output: Tensor, key: Tensor, cipher: string, mode: string)`\n\n> - `input` tensor can be any CPU or CUDA tensor of any dtype with size in bytes divisible by the block size in bytes(16 bytes for AES 128)\n> - `output` tensor can have any dtype but the same device as `input` tensor and the same size in bytes as `input` tensor\n> - `key` tensor can have any dtype and the same device as `input` tensor and size in bytes equal to 16 for AES 128\n> - `cipher` currently can be only one supported value `\"aes128\"`\n> - `mode` currently can be either [`\"ecb\"`](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_(ECB)) or [`\"ctr\"`](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR))\n\ntorchcsprng exposes two methods to create crypto-secure and non-crypto-secure PRNGs:\n\n| Method to create PRNG                              | Is crypto-secure? | Has seed? | Underlying implementation |\n|----------------------------------------------------|-------------------|-----------|---------------------------|\n| create_random_device_generator(token: string=None) |         yes       |    no     | See [std::random_device](https://en.cppreference.com/w/cpp/numeric/random/random_device) and [its constructor](https://en.cppreference.com/w/cpp/numeric/random/random_device/random_device). The implementation in libstdc++ expects token to name the source of random bytes. Possible token values include \"default\", \"rand_s\", \"rdseed\", \"rdrand\", \"rdrnd\", \"/dev/urandom\", \"/dev/random\", \"mt19937\", and integer string specifying the seed of the mt19937 engine. (Token values other than \"default\" are only valid for certain targets.) If token=None then constructs a new std::random_device object with an implementation-defined token. |\n| create_mt19937_generator(seed: int=None)           |         no        |    yes    | See [std::mt19937](https://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine) and [its constructor](https://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/mersenne_twister_engine). Constructs a mersenne_twister_engine object, and initializes its internal state sequence to pseudo-random values. If seed=None then seeds the engine with default_seed.|\n\nThe following list of methods supports all forementioned PRNGs:\n\n| Kernel                 | CUDA | CPU |\n|------------------------|------|-----|\n| random_()              | yes  | yes |\n| random_(to)            | yes  | yes |\n| random_(from, to)      | yes  | yes |\n| uniform_(from, to)     | yes  | yes |\n| normal_(mean, std)     | yes  | yes |\n| cauchy_(median, sigma) | yes  | yes |\n| log_normal_(mean, std) | yes  | yes |\n| geometric_(p)          | yes  | yes |\n| exponential_(lambda)   | yes  | yes |\n| randperm(n)            | yes* | yes |\n\n* the calculations are done on CPU and the result is copied to CUDA\n\n## Installation\n\nCSPRNG works with Python 3.6-3.9 on the following operating systems and can be used with PyTorch tensors on the following devices:\n\n| Tensor Device Type | Linux     | macOS         | MS Window      |\n|--------------------|-----------|---------------|----------------| \n| CPU                | Supported | Supported     | Supported      |\n| CUDA               | Supported | Not Supported | Supported since 0.2.0 |\n\nThe following is the corresponding CSPRNG versions and supported Python versions.\n\n| PyTorch | CSPRNG | Python   | CUDA             |\n|---------|--------|----------|------------------|\n| 1.8.0   | 0.2.0  | 3.7-3.9  | 10.1, 10.2, 11.1 |\n| 1.7.1   | 0.1.4  | 3.6-3.8  | 9.2, 10.1, 10.2  |\n| 1.7.0   | 0.1.3  | 3.6-3.8  | 9.2, 10.1, 10.2  |\n| 1.6.0   | 0.1.2  | 3.6-3.8  | 9.2, 10.1, 10.2  |\n\n\n### Binary Installation\n\nAnaconda:\n\n| OS            | CUDA                                           |                                                                                                                                                                                                                                                                                                       |\n|---------------|------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Linux/Windows | 10.1<br/><br/>10.2<br/><br/>11.1<br/><br/>None | conda install torchcsprng cudatoolkit=10.1 -c pytorch -c conda-forge<br/><br/>conda install torchcsprng cudatoolkit=10.2 -c pytorch -c conda-forge<br/><br/>conda install torchcsprng cudatoolkit=11.1 -c pytorch -c conda-forge<br/><br/>conda install torchcsprng cpuonly -c pytorch -c conda-forge |\n| macOS         | None                                           | conda install torchcsprng -c pytorch                                                                                                                                                                                                                                                          |\n\npip:\n\n| OS            | CUDA                                           |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n|---------------|------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Linux/Windows | 10.1<br/><br/>10.2<br/><br/>11.1<br/><br/>None | pip install torchcsprng==0.2.0+cu101 torch==1.8.0+cu101 -f https://download.pytorch.org/whl/cu101/torch_stable.html <br/><br/>pip install torchcsprng==0.2.0 torch==1.8.0 -f https://download.pytorch.org/whl/cu102/torch_stable.html <br/><br/>pip install torchcsprng==0.2.0+cu111 torch==1.8.0+cu111 -f https://download.pytorch.org/whl/cu111/torch_stable.html <br/><br/>pip install torchcsprng==0.2.0+cpu torch==1.8.0+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html |\n| macOS         | None                                           | pip install torchcsprng torch                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n\n### Nightly builds:\n\nAnaconda:\n\n| OS            | CUDA                                           |                                                                                                                                                                                                                                                                                                                                       |\n|---------------|------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Linux/Windows | 10.1<br/><br/>10.2<br/><br/>11.1<br/><br/>None | conda install torchcsprng cudatoolkit=10.1 -c pytorch-nightly -c conda-forge<br/><br/>conda install torchcsprng cudatoolkit=10.2 -c pytorch-nightly -c conda-forge<br/><br/>conda install torchcsprng cudatoolkit=11.1 -c pytorch-nightly -c conda-forge<br/><br/>conda install torchcsprng cpuonly -c pytorch-nightly -c conda-forge |\n| macOS         | None                                           | conda install torchcsprng -c pytorch-nightly                                                                                                                                                                                                                                                                                          |\n\npip:\n\n| OS            | CUDA                                           |                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n|---------------|------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Linux/Windows | 10.1<br/><br/>10.2<br/><br/>11.1<br/><br/>None | pip install --pre torchcsprng -f https://download.pytorch.org/whl/nightly/cu101/torch_nightly.html <br/><br/> pip install --pre torchcsprng -f https://download.pytorch.org/whl/nightly/cu102/torch_nightly.html <br/><br/> pip install --pre torchcsprng -f https://download.pytorch.org/whl/nightly/cu111/torch_nightly.html <br/><br/> pip install --pre torchcsprng -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html |\n| macOS         | None                                           | pip install --pre torchcsprng -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html                                                                                                                                                                                                                                                                                                                                           |\n\n### From Source\n\ntorchcsprng is a Python C++/CUDA extension that depends on PyTorch. In order to build CSPRNG from source it is required to have Python(>=3.7) with PyTorch(>=1.8.0) installed and C++ compiler(gcc/clang for Linux, XCode for macOS, Visual Studio for MS Windows).\nTo build torchcsprng you can run the following:\n```console\npython setup.py install\n```\nBy default, GPU support is built if CUDA is found and torch.cuda.is_available() is True. Additionally, it is possible to force building GPU support by setting the FORCE_CUDA=1 environment variable, which is useful when building a docker image.\n\n## Getting Started\n\nThe torchcsprng API is available in `torchcsprng` module:\n```python\nimport torch\nimport torchcsprng as csprng\n```\nCreate crypto-secure PRNG from /dev/urandom:\n```python\nurandom_gen = csprng.create_random_device_generator('/dev/urandom')\n```\n\nCreate empty boolean tensor on CUDA and initialize it with random values from urandom_gen:\n```python\ntorch.empty(10, dtype=torch.bool, device='cuda').random_(generator=urandom_gen)\n```\n```\ntensor([ True, False, False,  True, False, False, False,  True, False, False],\n       device='cuda:0')\n```\n\nCreate empty int16 tensor on CUDA and initialize it with random values in range [0, 100) from urandom_gen:\n```python\ntorch.empty(10, dtype=torch.int16, device='cuda').random_(100, generator=urandom_gen)\n```\n```\ntensor([59, 20, 68, 51, 18, 37,  7, 54, 74, 85], device='cuda:0',\n       dtype=torch.int16)\n```\n\nCreate non-crypto-secure MT19937 PRNG:\n```python\nmt19937_gen = csprng.create_mt19937_generator()\ntorch.empty(10, dtype=torch.int64, device='cuda').random_(torch.iinfo(torch.int64).min, to=None, generator=mt19937_gen)\n```\n```\ntensor([-7584783661268263470,  2477984957619728163, -3472586837228887516,\n        -5174704429717287072,  4125764479102447192, -4763846282056057972,\n         -182922600982469112,  -498242863868415842,   728545841957750221,\n         7740902737283645074], device='cuda:0')\n```\n\nCreate crypto-secure PRNG from default random device:\n```python\ndefault_device_gen = csprng.create_random_device_generator()\ntorch.randn(10, device='cuda', generator=default_device_gen)\n```\n```\ntensor([ 1.2885,  0.3240, -1.1813,  0.8629,  0.5714,  2.3720, -0.5627, -0.5551,\n        -0.6304,  0.1090], device='cuda:0')\n```\n\nCreate non-crypto-secure MT19937 PRNG with seed:\n```python\nmt19937_gen = csprng.create_mt19937_generator(42)\ntorch.empty(10, device='cuda').geometric_(p=0.2, generator=mt19937_gen)\n```\n```\ntensor([ 7.,  1.,  8.,  1., 11.,  3.,  1.,  1.,  5., 10.], device='cuda:0')\n```\n\nRecreate MT19937 PRNG with the same seed:\n```python\nmt19937_gen = csprng.create_mt19937_generator(42)\ntorch.empty(10, device='cuda').geometric_(p=0.2, generator=mt19937_gen)\n```\n```\ntensor([ 7.,  1.,  8.,  1., 11.,  3.,  1.,  1.,  5., 10.], device='cuda:0')\n```\n\n## Contributing\nWe appreciate all contributions. If you are planning to contribute back bug-fixes, please do so without any further discussion. If you plan to contribute new features, utility functions or extensions, please first open an issue and discuss the feature with us.\n\n\n\n## License\n\ntorchcsprng is BSD 3-clause licensed. See the license file [here](https://github.com/pytorch/csprng/blob/master/LICENSE)\n\n## [Terms of Use](https://opensource.facebook.com/legal/terms)\n\n## [Privacy Policy](https://opensource.facebook.com/legal/privacy)\n\nCopyright \u00a9 2020 Meta Platforms, Inc\n"
 },
 {
  "repo": "bnb-chain/tss-lib",
  "language": "Go",
  "readme_contents": "# Multi-Party Threshold Signature Scheme\n[![MIT licensed][1]][2] [![GoDoc][3]][4] [![Go Report Card][5]][6]\n\n[1]: https://img.shields.io/badge/license-MIT-blue.svg\n[2]: LICENSE\n[3]: https://godoc.org/github.com/bnb-chain/tss-lib?status.svg\n[4]: https://godoc.org/github.com/bnb-chain/tss-lib\n[5]: https://goreportcard.com/badge/github.com/bnb-chain/tss-lib\n[6]: https://goreportcard.com/report/github.com/bnb-chain/tss-lib\n\nPermissively MIT Licensed.\n\nNote! This is a library for developers. You may find a TSS tool that you can use with the Binance Chain CLI [here](https://docs.binance.org/tss.html).\n\n## Introduction\nThis is an implementation of multi-party {t,n}-threshold ECDSA (Elliptic Curve Digital Signature Algorithm) based on Gennaro and Goldfeder CCS 2018 [1] and EdDSA (Edwards-curve Digital Signature Algorithm) following a similar approach.\n\nThis library includes three protocols:\n\n* Key Generation for creating secret shares with no trusted dealer (\"keygen\").\n* Signing for using the secret shares to generate a signature (\"signing\").\n* Dynamic Groups to change the group of participants while keeping the secret (\"resharing\").\n\n\u26a0\ufe0f Do not miss [these important notes](#how-to-use-this-securely) on implementing this library securely\n\n## Rationale\nECDSA is used extensively for crypto-currencies such as Bitcoin, Ethereum (secp256k1 curve), NEO (NIST P-256 curve) and many more. \n\nEdDSA is used extensively for crypto-currencies such as Cardano, Aeternity, Stellar Lumens and many more.\n\nFor such currencies this technique may be used to create crypto wallets where multiple parties must collaborate to sign transactions. See [MultiSig Use Cases](https://en.bitcoin.it/wiki/Multisignature#Multisignature_Applications)\n\nOne secret share per key/address is stored locally by each participant and these are kept safe by the protocol \u2013 they are never revealed to others at any time. Moreover, there is no trusted dealer of the shares.\n\nIn contrast to MultiSig solutions, transactions produced by TSS preserve the privacy of the signers by not revealing which `t+1` participants were involved in their signing.\n\nThere is also a performance bonus in that blockchain nodes may check the validity of a signature without any extra MultiSig logic or processing.\n\n## Usage\nYou should start by creating an instance of a `LocalParty` and giving it the arguments that it needs.\n\nThe `LocalParty` that you use should be from the `keygen`, `signing` or `resharing` package depending on what you want to do.\n\n### Setup\n```go\n// Set up elliptic curve\n// use ECDSA, which is used by default\ntss.SetCurve(s256k1.S256()) \n// or use EdDSA\n// tss.SetCurve(edwards.Edwards()) \n\n// When using the keygen party it is recommended that you pre-compute the \"safe primes\" and Paillier secret beforehand because this can take some time.\n// This code will generate those parameters using a concurrency limit equal to the number of available CPU cores.\npreParams, _ := keygen.GeneratePreParams(1 * time.Minute)\n\n// Create a `*PartyID` for each participating peer on the network (you should call `tss.NewPartyID` for each one)\nparties := tss.SortPartyIDs(getParticipantPartyIDs())\n\n// Set up the parameters\n// Note: The `id` and `moniker` fields are for convenience to allow you to easily track participants.\n// The `id` should be a unique string representing this party in the network and `moniker` can be anything (even left blank).\n// The `uniqueKey` is a unique identifying key for this peer (such as its p2p public key) as a big.Int.\nthisParty := tss.NewPartyID(id, moniker, uniqueKey)\nctx := tss.NewPeerContext(parties)\nparams := tss.NewParameters(ctx, thisParty, len(parties), threshold)\n\n// You should keep a local mapping of `id` strings to `*PartyID` instances so that an incoming message can have its origin party's `*PartyID` recovered for passing to `UpdateFromBytes` (see below)\npartyIDMap := make(map[string]*PartyID)\nfor _, id := range parties {\n    partyIDMap[id.Id] = id\n}\n```\n\n### Keygen\nUse the `keygen.LocalParty` for the keygen protocol. The save data you receive through the `endCh` upon completion of the protocol should be persisted to secure storage.\n\n```go\nparty := keygen.NewLocalParty(params, outCh, endCh, preParams) // Omit the last arg to compute the pre-params in round 1\ngo func() {\n    err := party.Start()\n    // handle err ...\n}()\n```\n\n### Signing\nUse the `signing.LocalParty` for signing and provide it with a `message` to sign. It requires the key data obtained from the keygen protocol. The signature will be sent through the `endCh` once completed.\n\nPlease note that `t+1` signers are required to sign a message and for optimal usage no more than this should be involved. Each signer should have the same view of who the `t+1` signers are.\n\n```go\nparty := signing.NewLocalParty(message, params, ourKeyData, outCh, endCh)\ngo func() {\n    err := party.Start()\n    // handle err ...\n}()\n```\n\n### Re-Sharing\nUse the `resharing.LocalParty` to re-distribute the secret shares. The save data received through the `endCh` should overwrite the existing key data in storage, or write new data if the party is receiving a new share.\n\nPlease note that `ReSharingParameters` is used to give this Party more context about the re-sharing that should be carried out.\n\n```go\nparty := resharing.NewLocalParty(params, ourKeyData, outCh, endCh)\ngo func() {\n    err := party.Start()\n    // handle err ...\n}()\n```\n\n\u26a0\ufe0f During re-sharing the key data may be modified during the rounds. Do not ever overwrite any data saved on disk until the final struct has been received through the `end` channel.\n\n## Messaging\nIn these examples the `outCh` will collect outgoing messages from the party and the `endCh` will receive save data or a signature when the protocol is complete.\n\nDuring the protocol you should provide the party with updates received from other participating parties on the network.\n\nA `Party` has two thread-safe methods on it for receiving updates.\n```go\n// The main entry point when updating a party's state from the wire\nUpdateFromBytes(wireBytes []byte, from *tss.PartyID, isBroadcast bool) (ok bool, err *tss.Error)\n// You may use this entry point to update a party's state when running locally or in tests\nUpdate(msg tss.ParsedMessage) (ok bool, err *tss.Error)\n```\n\nAnd a `tss.Message` has the following two methods for converting messages to data for the wire:\n```go\n// Returns the encoded message bytes to send over the wire along with routing information\nWireBytes() ([]byte, *tss.MessageRouting, error)\n// Returns the protobuf wrapper message struct, used only in some exceptional scenarios (i.e. mobile apps)\nWireMsg() *tss.MessageWrapper\n```\n\nIn a typical use case, it is expected that a transport implementation will consume message bytes via the `out` channel of the local `Party`, send them to the destination(s) specified in the result of `msg.GetTo()`, and pass them to `UpdateFromBytes` on the receiving end.\n\nThis way there is no need to deal with Marshal/Unmarshalling Protocol Buffers to implement a transport.\n\n## How to use this securely\n\n\u26a0\ufe0f This section is important. Be sure to read it!\n\nThe transport for messaging is left to the application layer and is not provided by this library. Each one of the following paragraphs should be read and followed carefully as it is crucial that you implement a secure transport to ensure safety of the protocol.\n\nWhen you build a transport, it should offer a broadcast channel as well as point-to-point channels connecting every pair of parties. Your transport should also employ suitable end-to-end encryption (TLS with an [AEAD cipher](https://en.wikipedia.org/wiki/Authenticated_encryption#Authenticated_encryption_with_associated_data_(AEAD)) is recommended) between parties to ensure that a party can only read the messages sent to it.\n\nWithin your transport, each message should be wrapped with a **session ID** that is unique to a single run of the keygen, signing or re-sharing rounds. This session ID should be agreed upon out-of-band and known only by the participating parties before the rounds begin. Upon receiving any message, your program should make sure that the received session ID matches the one that was agreed upon at the start.\n\nAdditionally, there should be a mechanism in your transport to allow for \"reliable broadcasts\", meaning parties can broadcast a message to other parties such that it's guaranteed that each one receives the same message. There are several examples of algorithms online that do this by sharing and comparing hashes of received messages.\n\nTimeouts and errors should be handled by your application. The method `WaitingFor` may be called on a `Party` to get the set of other parties that it is still waiting for messages from. You may also get the set of culprit parties that caused an error from a `*tss.Error`.\n\n## Security Audit\nA full review of this library was carried out by Kudelski Security and their final report was made available in October, 2019. A copy of this report [`audit-binance-tss-lib-final-20191018.pdf`](https://github.com/bnb-chain/tss-lib/releases/download/v1.0.0/audit-binance-tss-lib-final-20191018.pdf) may be found in the v1.0.0 release notes of this repository.\n\n## References\n\\[1\\] https://eprint.iacr.org/2019/114.pdf\n\n"
 },
 {
  "repo": "p2k/ecoinpool",
  "language": "Erlang",
  "readme_contents": "\necoinpool\n=========\n\nA pool mining software written in Erlang for cryptographic currencies.\n\nBeta Release\n------------\n\nThis is the first release of ecoinpool and denotes the beta phase of the project.\nA quite large piece of work has been done to get this from zero to a full-fledged\ncoin pool software, yet not everything is 100% solid and waterproof and some\nfeatures are missing in this version. Nevertheless, everything you need to get\nstarted and give it a try is there.\n\necoinpool supports Bitcoin, Bitcoin+Namecoin (merged), Litecoin and Fairbrix.\n\nContact\n-------\n\necoinpool is written and maintained by Patrick \"p2k\" Schneider.\n\n* Jabber/XMPP: p2k@jabber.p2k-network.org\n* IRC: #ecoinpool on Freenode - my nick is `mega_p2k` there\n* [Message via GitHub](https://github.com/inbox/new/p2k)\n\nInstalling\n----------\n\nFollow this guide to install your instance of ecoinpool. The software has been\ntested on Linux and MacOS X but should also work on Windows. If you really want\nto use this on Windows, the console instructions might be a bit different; you\nare on your own there.\n\n### Dependencies ###\n\necoinpool only has a few dependencies you have to install yourself. The required\nErlang applications are downloaded and compiled later with the help of\n[rebar](https://github.com/basho/rebar), the build-tool of my choice, which\ncomes bundled with ecoinpool.\n\nFor the following software, you have to consult your operating system's package\nmanager or get a binary release or compile from source.\n\n* [GIT](http://git-scm.com/download) - not only to download this project, but\n  also for getting the Erlang dependencies\n* [Erlang/OTP](http://www.erlang.org/download.html) - **at least R14B is required**;\n  ecoinpool also works on the newly released R15B\n* [CouchDB](http://couchdb.apache.org/downloads.html) - **minimum is 1.1.1**;\n  tests on newer releases like 1.2.0 and 1.3.0 (latest from the GIT repository)\n  have been successful too\n* C compiler - preferably GCC; required to build external modules for the hash\n  algorithms and for some speedup\n\n### Bootstrapping ###\n\nFirst time installation instructions:\n\n1. Get ecoinpool's source code by cloning the GIT repository into a folder of\n   your choice.\n2. Open a console, cd into the source folder and run `./rebar get-deps` - this\n   will take care of all the Erlang dependencies required by ecoinpool. They\n   will be installed into the \"deps\" folder which will be created if it doesn't\n   exist.\n3. Run `./rebar compile` - this will compile all dependencies and the main\n   applications.\n4. Find and open CouchDB's local config file, usually at /etc/couchdb/local.ini.\n5. Within the `[httpd]` section, add a line `bind_address = 0.0.0.0` in order to\n   allow access from the internet (required if you want to expose the built-in\n   web frontend to your users). Also make sure port 5984 can be reached. If you\n   installed CouchDB from source, you have to allow write access to that ini\n   file from CouchDB's process.\n5. Start CouchDB and browse to its local web frontend at\n   `http://<your domain>:5984/_utils/`\n6. On the lower right corner it'll say \"Welcome to Admin Party!\".\n   Click \"Fix this\" and create an admin account for ecoinpool with a password of\n   your choice. Note it down for later. Optionally create another admin account\n   for yourself.\n\nConfiguring and Starting\n------------------------\n\nBefore you can start ecoinpool, you have to configure the CouchDB connection. To\ndo that, copy `test_launch.config.example` to `test_launch.config`, open it in\nyour favorite text editor and follow the instructions. Ignore the section about\nthe MySQL Replicator for now (full documentation for that has not been written\nyet).\n\nIn case you wonder where to configure the aspects of a pool server, this is done\ncompletely through CouchDB and/or the web frontend of ecoinpool. We'll get to\nthis right now.\n\nStart up ecoinpool with `./test_launch.sh` - if everything's alright you should\nsee a welcome banner. The software does not daemonize in this beta version. If\nyou want to be able to close your console and keep the server running, you might\nwant to try [GNU Screen](http://www.gnu.org/software/screen/) like this:\n`screen -D -R -S ecoinpool_test ./test_launch.sh`\n\n> It might be worth knowing that you are on an Erlang console now. You can\n> enter some commands and evaluate expressions (not covered in this readme).\n> All console commands end with a period followed by a newline.\n\nIf you like to stop ecoinpool, you can quit via Ctrl+G and entering \"q\" at the\nprompt. Alternatively you can hit Ctrl+C and enter \"a\" or simply kill the\nprocess. There is no shutdown procedure required to be run, it's perfectly safe\nto kill the process at any time. This is called \"crash-only design\". If you\nstill want to exit ecoinpool gracefully (which, as a little motivation, will\nsend \"Server Terminating\" as an error message to connected clients) enter `q().`\nat the console.\n\n> At this point you might want to configure ebitcoin first. ebitcoin is the\n> block chain monitor/explorer which comes with ecoinpool as an add-on. It\n> enables ecoinpool to listen for block changes instead of polling for the\n> block number five times per second. See the section about \"ebitcoin\" below.\n\nAfter you started ecoinpool, head over to the main site at\n`http://<your domain>:5984/ecoinpool/_design/site/_show/home`. It should say\n\"This server has been freshly installed and is not configured yet. Fix this.\". In\ncase you're no longer logged in on CouchDB (ecoinpool uses CouchDB's user and\nauthentication system), do so by clicking \"Login\" on the lower right corner. The\n\"Fix this\" link will only appear for an admin user. Click it now and you will\nsee the Subpool configuration page.\n\nFirst, choose the chain type for your pool, then enter a database name e.g.\n\"btc-pool\". Make sure to use a different database name than you used for ebitcoin.\nNext, you can optionally enter a display name which will be shown on the \"Home\"\npage instead of the database name.\n\nThe \"Port\" setting denotes the port to which the miners should connect to;\necoinpool will start listening for RPC requests on this port once the Subpool is\nactivated. Set it to 8888 if you don't know which port to choose.\n\nThe \"Round\" setting controls if a round number should be stored along with the\nshares. On every candidate share (i.e. a share which potentially solves the\nblock) the round number is increased, if enabled. Enter a start value into the\ntext field if you want to use this feature.\n\nThe next two fields control ebitcoin's work caching behaviour. If you're just in\nfor a quick test, a cache size of 5 is enough. In other cases, the default value\nof 20 usually fits all needs for heavy load. ecoinpool is constantly trying to\nrefill the cache as fast as possible and even when the cache runs empty or is\ndisabled it will stay fairly responsive. Be aware that the cache is completely\ndiscarded on a block change and subsequently refilled, so don't set this value\ntoo high. You can examine the server.log if you want to find an optimal value\nyourself. Remember, the cache is just a way to deal with simultanous requests.\nThe maximum work age is the time in seconds until cached work will be discarded\n(this is _not_ the time a miner has to send in valid work). Usually the default\nis fine, if you're running a pool this won't happen that often anyway.\n\nNext is the CoinDaemon configuration. The options you can set here depend on the\nselected chain type. Daemons which support local work creation through the\n`getmemorypool` call will have two extra fields \"Pay To\" and \"Tag\". The former\nwill override the default payout address on block solves; if you leave it\nempty, ecoinpool will create an account called \"ecoinpool\" via RPC call and use\nthis one for payout. The other field allows you to add an arbitrary string to\nthe coinbase (max. 20 characters) which will be appended to \"eco@\". E.g. if you\nset it to \"ozco.in\", the coinbase will start with \"eco@ozco.in\" (greetings fly\nout to Graet and his team). If you leave it empty, the coinbase will start with\njust \"eco\" as a default.\n\nWhen the Daemon also supports the ebitcoin add-on, another field\n\"ebitcoin Client\" will be displayed. It allows to choose from a list of\nappropriate clients, identified by their database name.\n\nFollowing the CoinDaemon configuration are the Aux Pool settings. These are used\nfor merged mining (only for Bitcoin), choose the desired chain from the list\n(currently only NameCoin) and fill out the other fields just like for the main\npool. The AuxDaemon configuration panel also behaves in the same way as for the\nCoinDaemon.\n\nHit \"Save Configuration\" above when you're finished with everything. Finally\nclick \"Activate Subpool\" after the page reloaded and your pool is running.\nReward yourself with cake and a hot beverage of your choice for reading this\nfar and getting the thing to run.\n\nCreating Accounts And Workers\n-----------------------------\n\nAccounts can be created by clicking \"Signup\" on the lower right corner (when not\nlogged in, of course). Regular users cannot change the pool configuration and\ninactive Subpools are hidden too. This is enforced by CouchDB's authentication\nmechanism.\n\nAfter choosing a Subpool, the \"My Workers\" page will show up and new Workers can\nbe created by clicking \"Add Worker\" on the top left corner. A default worker\nwith the same name as the user is created the first time the button is clicked.\nAfter that, more workers of the form `username_suffix` can be created. Passwords\nare ignored in this beta version, any password will be accepted.\n\nThe \"My Workers\" page will also act as a live monitoring page, one of the most\nexciting features of ecoinpool.\n\nUpdating\n--------\n\nThe hot code reloading feature is not avaliable during this beta release. For\nnow, it is easier to just restart the server quickly. Just pull the latest\nchanges from the repository, kill the server and launch it again. All changed\nmodules will be recompiled automatically if you use the `test_launch.sh` script.\n\nebitcoin\n--------\n\necoinpool comes bundled with ebitcoin, a block monitor and mini block explorer\nfor bitcoin chains. ebitcoin is configured in the same way as ecoinpool, using\na built-in web frontend.\n\nThe main site for ebitcoin is at\n`http://<your domain>:5984/ebitcoin/_design/site/_show/home`. You will also find\na link to ebitcoin within the sidebar of ecoinpool below \"Other\". If you visit\nthe site for the first time, it should say \"This server has been freshly\ninstalled and is not configured yet. Fix this.\", just like for ecoinpool. Again,\nyou must be logged in to access the configuration.\n\nAfter clicking the link, you will see the Client configuration page. Choose one\nof the supported block chains and enter a database name for that chain. You need\nonly one client per chain, so choose a generic name like \"btc-chain\"; make sure\nnot to use the database name of an existing Subpool. After that, you can\noptionally enter a display name which will be shown on the \"Home\" page instead\nof the database name. Lastly, you can change the host and port of the daemon to\nwhich ebitcoin will connect to, but for most cases, the defaults will do.\n\n> Be aware that ebitcoin wants to connect to the peer-to-peer port of your\n> daemon, not the RPC port. Also, ebitcoin will \"believe\" everything the\n> daemon throws at it, no verification is done. That's why it has to be a\n> trusted daemon preferably running on localhost.\n\nHit \"Save Configuration\" when you're finished. Finally click \"Activate Client\"\nafter the page reloaded and ebitcoin will start loading the block chain into\nits own database. This will take some minutes depending on the chain size. You\ncan follow the process on the console or by looking at the logfiles. Note that\nblock monitoring will not function correctly until the complete chain has been\nsynchronized.\n\nTo use a client with ecoinpool, open the Subpool via ecoinpool's web interface.\nOn the configuration tab you can select an ebitcoin client from within the\nCoinDaemon and the AuxDaemon configuration panel. Only compatible clients will\nbe displayed.\n\nTechnical information: In the current implementation, ebitcoin will only store\nblock headers (for Namecoin, this includes the aux proof-of-work).\n\nTroubleshooting: Too Many Open Files (Linux)\n--------------------------------------------\n\nWhile testing the software on a larger pool (big thanks to WKNiGHT of Elitist\nJerks) both CouchDB and ecoinpool were pushed beyond the system limits of open\nfile descriptors, resulting in crashes about `{error,emfile}`. This happens\nbecause one file descriptor is required per connection and the default setting\nis 1024. You can check this, assuming your shell is bash, by running `ulimit -n`.\nAdditionally, there is a kernel-level limit of file descriptors which you can\nsee with `cat /proc/sys/fs/file-max`.\n\nTo temporarily increase the number of descriptors on the kernel-level you could\nrun `echo 65535 > /proc/sys/fs/file-max` as root (increasing the limit to 65535\nin this example). To make the change survive across reboots, edit\n`/etc/sysctl.conf` and add a line `fs.file-max = 65535`. You may want to set\nthis number even higher, depending on your server load.\n\nFor increasing the number of descriptors for the CouchDB and ecoinpool user,\nyou have to edit `/etc/security/limits.conf` or `/etc/limits.conf`, depending on\nyour linux distribution. You can either add a line `* - nofile 65535` to set\nthis globally for all linux users or add a line for each user replacing the `*`\nwith a username, e.g. `couchdb - nofile 65535` and `p2k - nofile 65535`. To\nmake these changes take effect, you have to logout and login again. If couchdb\nwas running, restart it too.\n\nCompaction\n----------\n\nebitcoin's block header databases and ecoinpool's share databases can become\nquite large over time. To leverage the problem of running out of disk space,\nCouchDB offers a compaction feature which can greatly reduce the needed disk\nspace per database. You can manually trigger the compaction through CouchDB's\nweb frontend by opening the database as admin, clicking \"Compact & Cleanup...\"\non the toolbar, choosing \"Compact Database\" and clicking \"Run\". You can watch\nthe compaction process on the status page (within the sidebar menu).\n\nTo trigger compaction via a cronjob during off-peak hours, you can use curl\nlike this:\n\n    curl -H \"Content-Type: application/json\" -X POST http://<username>:<password>@localhost:5984/<database name>/_compact\n\nDo this for each block chain or pool database. It is also recommended to run a\ncompaction once ebitcoin has downloaded all block headers of a block chain for\nthe first time.\n\nCompaction can also be triggered by CouchDB itself. Read default.ini on how to\ndo this. This involves copying some sections to local.ini as it is not\nrecommended to change default.ini directly.\n\nLogfiles\n--------\n\necoinpool keeps a set of logfiles in a folder called \"log\". They are divided in\ncategories. Each file will auto-rotate if its exceeds reaches 1MB. Some messages\nare also written to stdout. All logging aspects can be configured in\n`apps/ecoinpool/priv/log4erl.conf` and `apps/ebitcoin/priv/log4erl.conf`.\n\nLicense\n-------\n\necoinpool is licensed under the GNU General Public License.\nSee the LICENSE file for details.\n"
 },
 {
  "repo": "google/openrtb-doubleclick",
  "language": "Java",
  "readme_contents": "Google DoubleClick Libraries\n----------------------------------------------------------------------\n\nThis library supports RTB development for DoubleClick Ad Exchange\nin Java. The doubleclick-core module includes DoubleClick's RTB model\nand associated facilities such as crypto and metadata.  The second\nmodule, doubleclick-openrtb, provides client-side mapping between\nDoubleClick's model/protocol and OpenRTB, and validation support.\n\nSee our [wiki](https://github.com/google/openrtb-doubleclick/wiki)\nto get started! Use the Github issue tracker for bugs, RFEs or any\nsupport. Check the [changelog](CHANGELOG.md) for detailed release notes.\n\n\nBUILDING NOTES\n----------------------------------------------------------------------\n\nYou need: JDK 8, Maven 3.2, Protocol buffers (protoc) 3.5.1.\nBuilding is supported from the command line with Maven and\nfrom any IDE that can load Maven projects.\n\nOn Eclipse, the latest m2e is recommended but it can't run the code\ngeneration step, so you need to run a \"mvn install\" from the command\nline after checkout or after any mvn clean.\n"
 },
 {
  "repo": "HouariZegai/Cryptography",
  "language": "Java",
  "readme_contents": "#  Cryptography Algorithms\n\n[![License MIT](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\n## What is cryptography ?\nCryptography is a method of protecting information and communications through the use of codes so that only those for whom the information is intended can read and process it. The pre-fix \"crypt\" means \"hidden\" or \"vault\" and the suffix \"graphy\" stands for \"writing.\"\n\n### Symmetric algorithms\n* [CBC](src/com/houarizegai/cryptography/symmetric/CBC.java)\n* [CFB](src/com/houarizegai/cryptography/symmetric/CFB.java)\n* [ECB](src/com/houarizegai/cryptography/symmetric/ECB.java)\n* [OFB](src/com/houarizegai/cryptography/symmetric/OFB.java)\n* [Feistel](src/com/houarizegai/cryptography/symmetric/Feistel.java)\n* Problem solving\n  * [Problem 1](src/com/houarizegai/cryptography/symmetric/crypto_algo1)\n\n## Installation\n1. Press the **Fork** button (top right the page) to save copy of this project on your account.\n2. Download the repository files (project) from the download section or clone this project by typing in the bash the following command:\n\n       git clone https://github.com/HouariZegai/Cryptography.git\n2. Import it in any IDE (like Intellij IDEA).\n3. Run the application :D\n\n## Contributing \ud83d\udca1\nIf you want to contribute to this project and make it better with new ideas or algorithms, your pull request is very welcomed.\nIf you find any issue just put it in the repository issue section, thank you.\n"
 },
 {
  "repo": "tleonhardt/practical_cryptography_engineering",
  "language": "C",
  "readme_contents": "Practical Cryptography Engineering\n==================================\nThis repository contains some practical code examples of using the following cryptography libraries:\n* [libsodium](https://github.com/jedisct1/libsodium)\n    * A modern, portable, easy to use crypto library written in C with a small number of high quality primitives\n    * Focuses on making it easy to use cryptography correctly\n* [mbedTLS](https://github.com/ARMmbed/mbedtls)\n    * An ultra-portable crypto library written in C which should build anywhere\n    * Provides a wide range of the most common cryptographic primitives and associated infrastructure\n* [cryptography](https://github.com/pyca/cryptography)\n    * Python's \"standard\" cryptographic library which is a wrapper around [OpenSSL](https://www.openssl.org)\n    * Provides almost all cryptographic primitives you would want in Python\n* [PyNaCl](https://github.com/pyca/pynacl)\n    * Python bindings for libsodium (very partial wrapper around libsodium)\n    * Provides a few nice cryptographic primitives not currently available in the cryptography module\n\n\nFile Contents\n=============\n\nBuild-related and Miscellaneous\n-------------------------------\n* CMakeLists.txt\n    * CMake file for building the mbedTLS C code projects\n* mbedtls\n    * Directory containing the mbedTLS C code\n* sodium\n    * Directory containing libsodium examples, headers, and Windows pre-compiled library\n    * See the Readme.md in this directory for more info on these examples\n    \nSymmetric Encryption\n--------------------\nThese code examples use an [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) block cipher with a 256-bit \nkey in [Galois Counter Mode](https://en.wikipedia.org/wiki/Galois/Counter_Mode) (GCM).  The C code examples use the \nmbedTLS library, while the Python examples use the cryptography module.\n\n* aes_gcm.c\n    * Simple self-contained C code example of using AES-256 in Galois Counter Mode (GCM) using hard-coded everything\n* aes_gcm_cryptography.py\n    * Simple self-contained Python code example identical to the above\n* aesgcm_file.c\n    * C code example of file-based AES-256 GCM, works with aesgcm_file.py\n    * Takes arguments on command line and produces output to file\n* aesgcm_file.py\n    * Python code example of file-based AES-256 GCM, works with aesgcm_file.c\n\nThe following example uses the PyNaCl wrapper around libsodium along with the **SecretBox** authenticated\nencryption API.\n* nacl_symmetric_gen.py\n    * Generates a random 256-bit (32-byte) secret symmetric key and saves it to a file\n    * Then uses it to encrypt a fixed message and verify that it can decrypt it and get the same message\n    \nKey Exchange\n------------\nThese code examples use an Elliptic-curve Diffie-Hellman [ECDH](https://en.wikipedia.org/wiki/Elliptic-curve_Diffie\u2013Hellman)\nkey agreement protocol to establish a shared secret over an insecure channel.  The C code examples use the mbedTLS \nlibrary, while the Python examples use the cryptography module.\n\n* ecdh.c\n    * Elliptic Curve Diffie-Hellman key exchange C code example\n* ecdh.py\n    * Elliptic Curve Diffie-Hellman key exchange Python code example\n    \nKey Derivation\n--------------\nThese code examples demonstrate how to use a Key Derivation Function [KDF](https://en.wikipedia.org/wiki/Key_derivation_function)\nto derive one or more shared keys from a shared secret.\n\n* kdf.c\n    * Key Derivation Function (KDF) C code example\n* kdf.py\n    * Key Derivation Function (KDF) Python code example\n    \nDigital Signatures\n------------------\nThese examples use the PyNaCl wrapper around libsodium to support public-key digital signatures using the Ed25519 algorithm.\n\n* nacl_genkey.py\n    * Generates a random ed25519 SigningKey/VerifyingKey key pair for use with a digital signature system \n* nacl_sign.py\n    * Uses PyNaCl to sign a message using ed25519 digital signature algorithm\n* nacl_verify.py\n    * Uses PyNaCl  to verify an ed25519 signature for a given message\n\nThese examples use RSA-PSS digital signatures.  The C code examples use the mbedTLS library, while the Python examples \nuse the cryptography module.\n* rsa_signature.c\n    * RSA Signature C code example\n* rsa_signature.py\n    * RSA Signature Python code example\n\n\nBuilding\n========\n\nlibsodium C examples\n--------------------\n\nThe [libsodium](https://download.libsodium.org/doc/) C code examples are all in the **sodium** directory and can be \nbuilt using the [Cmake](https://cmake.org) cross-platform build tool along with your platform default C compiler\ninstalled on Windows, macOS, or Linux.\n\nThe first stage of building is the same on all platforms:\n\n```bash\ncd sodium\nrm -rf build\nmkdir build\ncd build\ncmake ..\n```\n\nThe second stage of building is platform dependent and will create the following executable files:\n\n* hello_sodium\n* nacl_keygen\n* nacl_sign\n* nacl_verify\n* symmetric_decrypt\n* symmetric_encrypt\n* symmetric_keygen\n* test_ed25519\n* test_pynacl_compatibility\n\n### Linux or macOS\n```bash\nmake\n```\n\nThis produces the  executable files directly in the **build** directory.\n\n### Windows\n```bash\ndevenv hello_sodium.sln /build Debug\n```\nThis creates the executable files under the **build\\Debug** directory.\n\nPython examples\n---------------\n\nThe Python examples are located in the root directory and should work with Python 3.4 or newer.  The Python examples \nrequire a mix of the following Python packages:\n\n* [cryptography](https://cryptography.io/en/latest/) - high-level wrapper around [OpenSSL](https://www.openssl.org)\n* [pynacl](https://pynacl.readthedocs.io/en/stable/) - Python binding to [libsodium](https://libsodium.org)\n* [colorama](https://github.com/tartley/colorama) - cross-platform colored terminal text\n\nThe required dependencies can easily be installed using [Pipenv](https://github.com/pypa/pipenv):\n```shell script\npipenv install\n```\n\nThen a shell using the underlying virtual environment can be entered with:\n```shell script\npipenv shell\n```\n\nInside that Pipenv shell, any of the examples can be ran directly. e.g.:\n```shell script\npython ./aes_gcm_cryptography.py\n```\n\nThe Python examples are intended to interoperate with either the libsodium or mbedTLS C code examples.  Thus encryption\nor signing can be done in C and decryption or verifying can be done in Python or vice versa.\n\nmbedtls C examples\n------------------\nThe [mbedTLS](https://github.com/ARMmbed/mbedtls) C code examples are located in the root directory and build mbedTLS\nfrom source from the **mbedtls** directory.\n\nBuild requires CMake and platform default C compiler installed and works on both Windows, macOS, and Linux.\n\nThe first stage of building is the same on all platforms:\n\n```bash\nrm -rf build\nmkdir build\ncd build\ncmake ..\n```\n\nThe second stage of building is platform dependent ...\n\n### Linux or macOS\n```bash\nmake\n```\n\nThis produces the following executable files directly in the **build** directory:\n\n* aes_gcm\n* aesgcm_file\n* ecdh\n* kdf\n* rsa_signature\n\n### Windows\n```bash\ndevenv mbed_AES.sln /build Debug\n```\nThis creates the following executable files under the **build\\Debug** directory:\n\n* aes_gcm.exe\n* aesgcm_file.exe\n* ecdh.exe\n* kdf.exe\n* rsa_signature.exe\n\n\nWhere to learn more about cryptography\n======================================\n\nBooks\n-----\n\n* [Cryptography Engineering](https://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246)\nby Niels Ferguson, Bruce Schneier, and Tadayoshi Kohno\n    * Extremely well written and easy to understand\n    * Focuses on the practical aspects that often result in weak crypto when used incorrectly\n    * Discusses how to build an entire cryptographic system from the ground up\n* [Understanding Cryptography](https://www.amazon.com/Understanding-Cryptography-Textbook-Students-Practitioners/dp/3642041000)\nby Christof Paar, Jan Pelzl, and Bart Preneel\n    * Amazing book which makes it relatively easy to teach yourself cryptography\n    * [Website](http://www.crypto-textbook.com)\n    * YouTube lecture [videos](https://www.youtube.com/watch?v=2aHkqB2-46k&list=PL6N5qY2nvvJE8X75VkXglSrVhLv1tVcfy)\n    * [Solutions](http://wiki.crypto.rub.de/Buch/en/download/Understanding_Cryptography_Odd_Solutions.pdf) Manual,\n    Lecture [Slides](http://wiki.crypto.rub.de/Buch/en/slides.php)\n    \nOnline Courses    \n--------------\n\n* [Cryptography I](https://www.coursera.org/learn/crypto)\n    * Taught by Stanford University professor Dan Boneh\n    * Available for free on Coursera\n* [Applied Cryptography](https://www.udacity.com/course/applied-cryptography--cs387)\n    * Taught by University of Virginia professor Dave Evans\n    * Available for free on Udacity\n    \n   \nPresentation\n------------\nThis repository includes the following basic intro presentation:\n* [Practical Cryptography Engineering](https://github.com/tleonhardt/practical_cryptography_engineering/blob/master/Practical_Cryptography_Engineering.pdf)\n    \n    \nDisclaimer\n==========\nI am not an expert in cryptography.  I am just a software developer who wanted to learn more about how to use \ncryptography effectively.  If anyone looking at this **is** an expert in cryptography and happens to notice any \nweaknesses, inaccuracies, or mistakes and/or has constructive feedback for how to improve the examples then Pull \nRequests or Issues would be sincerely appreciated.\n\n"
 },
 {
  "repo": "RustCrypto/asm-hashes",
  "language": "Assembly",
  "readme_contents": "# RustCrypto: ASM hashes ![Rust Version][rustc-image] [![Project Chat][chat-image]][chat-link] [![dependency status][deps-image]][deps-link]\n\nAssembly implementations of hash functions core functionality based on code from\n[Project Nayuki](https://www.nayuki.io/).\n\nCrates in this repository provide only core compression functions, for full hash\nfunctionality please refer to the crates from\n[RustCrypto/hashes](https://github.com/RustCrypto/hashes) repository. With\nenabled `asm` feature `md5`, `sha-1`, `sha2` and `whirlpool` crates will use\ncode from this repository.\n\n## Supported Platforms\n\nAll crates are tested on the following platforms:\n\n- Linux (32-bit and 64-bit x86)\n- Windows (64-bit x86, GNU only)\n- ARM64 (except `md5`, which is x86 only)\n\nWindows MSVC builds are known to be broken. See [#17].\n\n## Minimum Supported Rust Version\n\nAll crates in this repository support **Rust 1.43** or higher.\n\nIn the future when the minimum supported Rust version is changed,\nit will be accompanied by a minor version bump.\n\n## License\n\nAll crates licensed under the [MIT license](http://opensource.org/licenses/MIT).\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[rustc-image]: https://img.shields.io/badge/rustc-1.43+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[deps-image]: https://deps.rs/repo/github/RustCrypto/asm-hashes/status.svg\n[deps-link]: https://deps.rs/repo/github/RustCrypto/asm-hashes\n\n[//]: # (general links)\n\n[#17]: https://github.com/RustCrypto/asm-hashes/issues/17\n"
 },
 {
  "repo": "shivang8/Secure-File-Storage-Using-Hybrid-Cryptography",
  "language": "Python",
  "readme_contents": "# Secure-File-Storage-Using-Hybrid-Cryptography\n\n## Objective: To Achieve a secure plateform for storing of files on Cloud using Hybrid Cryptography.</br>\n\n# Methodology\n\nTo achieve the above goal, the following methodology needs to be followed:</br>\n1. Load the file on the server.</br>\n2. Dividing the uploaded file into N parts.</br>\n3. Encrypting all the parts of the file using any one of the selected algorithms (Algorithm is changed with every part in round robin fashion).</br>\n4. The keys for cryptography algorithms is then secured using a different algorithm and the key for this algorithm is provided to the user as public key.</br>\n\nAfter the above 4 steps you will have a N files which are in encrypted form which are stored on the server and a key which is downloaded as public key for decrypting the file and downloading it.</br>\n\nTo restore the file, follow the following steps:</br>\n1. Load the key on the server.</br>\n2. Decrypt the keys of the algorithms.</br>\n3. Decrypt all the N parts of the file using the same algorithms which were used to encrypt them.</br>\n4. Combine all the N parts to form the original file and provide it to the user for downloading.</br>\n\n# How to Run\n\n**NOTE:** The project is based on Python 2.7.15 plateform running it on any other plateform might create some issues.</br>\n\nStep 1: Install Requirements</br>\n`pip install -r requirements.txt`</br>\n\nStep 2: Run the application</br>\n`python app.py`</br>\n\nStep 3: Visit the localhost from your browser</br>\n\nStep 4: Enjoy :)\n \n[//]: <> (*IF YOU ENCOUNTER ANY BUGS OR FOR ANY SUGGESTIONS REGARDING THE IMPROVEMENT OF THE PROJECT FEEL FREE TO CONTACT ME :**)\n\n**THE PROJECT HAS ENCOUNTERED A BUG BECAUSE OF THE CRYPTOGRAPHY LIBRARY BEING UPDATED. IF YOU ARE INTRESTED IN COLLABORATING TO IMPROVE THIS PROJECT FEEL FREE TO CONTACT ME :**\n\nShivang Srivastava\t-\tshivang.8@geu.ac.in<br/>\n"
 },
 {
  "repo": "kienme/CryptographyTools",
  "language": "C++",
  "readme_contents": ""
 },
 {
  "repo": "dchest/blake2s-js",
  "language": "JavaScript",
  "readme_contents": "BLAKE2s implementation in JavaScript\n====================================\n\nBLAKE2 is a fast and secure cryptographic hash function.\n\nThis is a pure JavaScript public domain implementation of its BLAKE2s flavor\n(currently without tree mode support).\n\n* [BLAKE2s-js Demo](https://dchest.github.io/blake2s-js/)\n* [BLAKE2 Website](https://blake2.net)\n\n[![Build Status](https://travis-ci.org/dchest/blake2s-js.svg?branch=master)\n](https://travis-ci.org/dchest/blake2s-js)\n\n**This implementation is maintained, but will not receive new features. If you're looking for a full implementation of BLAKE2s, BLAKE2Xs and BLAKE2b, see my packages from [StableLib](https://github.com/StableLib/stablelib): `@stablelib/blake2s`, `@stablelib/blake2xs`, and `@stablelib/blake2b`.**\n\nInstallation\n------------\n\nVia NPM:\n\n    $ npm install blake2s-js\n\nor just download `blake2s.min.js`.\n\n\nUsage\n-----\n\n### new BLAKE2s(digestLength, key)\n### new BLAKE2s(digestLength, config)\n\nCreates a new instance of BLAKE2s hash with the given length of digest (default\nand maximum 32) and an optional secret key (a `Uint8Array` or `Array` of\nbytes) or config object in the following format:\n\n    {\n        salt: // 8-byte Uint8Array or Array of bytes\n        personalization: // 8-byte Uint8Array or Array of bytes\n        key: // 0-32-byte Uint8Array or Array of bytes\n    }\n\nAll keys in config are optional.\n\n\n#### .update(data[, offset, length])\n\nUpdates the hash with data (a `Uint8Array` or `Array` of bytes).  starting at\nthe given `offset` (optional, defaults to 0) and consuming the given `length`\n(optional, defaults to the length of `data` minus `offset`).\n\nReturns this instance to enable method chaining.\n\n\n#### .digest()\n\nReturns a `Uint8Array` with the digest of consumed data. Further updates will\nthrow error. Repeat calls of `digest()` will return the same digest.\n\n\n#### .hexDigest()\n\nLike `digest()`, but returns a hex-encoded string.\n\n\n#### BLAKE2s.digestLength = 32\n\nMaximum digest length.\n\n\n#### BLAKE2s.blockLength = 64\n\nBlock size of the hash function.\n\n\n#### BLAKE2s.keyLength = 32\n\nMaximum key length.\n\n#### BLAKE2s.personalizationLength = 8\n\nLength of personalization parameter.\n\n#### BLAKE2s.saltLength = 8\n\nLength of salt parameter.\n\n\nExample\n-------\n\n```javascript\nvar h = new BLAKE2s(32);\nh.update(new Uint8Array([1,2,3]));\nh.hexDigest();  // returns string with hex digest\nh.digest();     // returns Uint8Array\n\n// Keyed:\nvar key = new Uint8Array(BLAKE2s.keyLength);\nwindow.crypto.getRandomValues(key);\nvar h = new BLAKE2s(32, key);\n...\n\n// Keyed and salted:\nvar key = new Uint8Array(BLAKE2s.keyLength);\nvar salt = new Uint8Array(BLAKE2s.saltLength);\nwindow.crypto.getRandomValues(key);\nwindow.crypto.getRandomValues(salt);\nvar h = new BLAKE2s(32, { key: key, salt: salt });\n...\n\n// Personalized:\nvar data = new Uint8Array([1, 2, 3]);\nvar pers1 = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0]);\nvar h1 = new BLAKE2s(32, { personalization: pers1 });\nh1.update(data);\n\nvar pers2 = new Uint8Array([2, 0, 0, 0, 0, 0, 0, 0]);\nvar h2 = new BLAKE2s(32, { personalization: pers2 });\nh2.update(data);\n\nh1.hexDigest() !== h2.hexDigest() // true\n\n```\n"
 },
 {
  "repo": "The-DevX-Initiative/RCIG_Coordination_Repo",
  "language": "HTML",
  "readme_contents": "# Rust Cryptography Interest Group (RCIG) [![Zulip Chat][chat-img]][Zulip Chat]\n\n<img width=\"100px\"\nsrc=\"https://raw.githubusercontent.com/The-DevX-Initiative/RCIG_Coordination_Repo/main/mascot.png\">\n<img align = \"right\" width=\"170px\"\nsrc=\"https://raw.githubusercontent.com/The-DevX-Initiative/RCIG_Coordination_Repo/main/RCIG_Mascot3.png\">\n\nThis repository is the central [issue tracker] used by the RCIG in order to\ncoordinate efforts towards promoting cryptography in Rust.\n\n## Join in!\n\nCome talk with us via [Zulip Chat] or by [opening an issue].\n\n## Projects\n\n- [Awesome Rust Cryptography][cryptography.rs] (a.k.a. [cryptography.rs]):\n  curated list of  actively maintained, high-quality Rust cryptography libraries.\n\n## About\n\nThis repository is where the Rust Cryptography Interest Group stores the following:\n\n- meeting  minutes from Sync-Up calls\n- open issues based on ongoing discussions\n- suggest follow  up topics of discussion for future sync-up calls\n- be a place where the community  coordinates.\n\nThe aim will be for this repo to evolve an archive and a place\nwhere actionable items can be\npicked up easily by members of the RCIG community.\n\n## Mission\n\nOur mission is to foster a robust Rust cryptography ecosystem:\n\n- Create a focal point for discussion and work on Rust cryptography in general\n- Provide overall direction for cryptography in Rust by forstering\n  collaboration on an interoperable cryptographic ecosystem\n- Act as a resource for answering questions about the use of cryptography\n  in Rust projects\n\nNote that this is a new group and figuring out its exact purpose is a work-in-progress.\nAs we figure out a governance process we will be revising our mission statement and\nhopefully publishing a [vision document].\n\n[issue tracker]: https://github.com/The-DevX-Initiative/RCIG_Coordination_Repo/issues\n[opening an issue]: https://github.com/The-DevX-Initiative/RCIG_Coordination_Repo/issues/new/choose\n[vision document]: https://github.com/The-DevX-Initiative/RCIG_Coordination_Repo/issues/4\n[Zulip Chat]: https://rcig.zulipchat.com/\n[chat-img]: https://img.shields.io/badge/zulip-join_chat-blue.svg?logo=zulip\n[cryptography.rs]: https://cryptography.rs\n"
 },
 {
  "repo": "TurboPack/LockBox",
  "language": "Pascal",
  "readme_contents": "# TurboPack LockBox\r\n\r\nUpdated for **10.3 Rio** / VER330 / PKG 260\r\n\r\nYou can still access [10.2 Tokyo](https://github.com/TurboPack/LockBox/releases/tag/102Toykeo) and [10.1 Berlin](https://github.com/TurboPack/LockBox/releases/tag/101Berlin) versions too.\r\n\r\nAlso see the new updated [LockBox 3](https://github.com/TurboPack/LockBox3) version\r\n\r\n-----\r\n\r\n## 1. Introduction\r\n\r\n\r\nLockBox is a Delphi & C++Builder library for cryptography.  \r\nIt provides support for AES, DES, 3DES, Blowfish, Twofish, SHA, MD5, a variety \r\nof chaining modes, RSA digital signature and verific...\r\n\r\nThis is a source-only release of TurboPack LockBox. It includes\r\ndesigntime and runtime packages for Delphi and C++Builder and supports \r\nWin32, Win64, OSX, iOS and Android.\r\n\r\n-----\r\n\r\n## 2. Package names\r\n\r\n\r\nTurboPack LockBox package names have the following form:\r\n\r\nLockBoxDR.bpl (Delphi Runtime)\r\nLockBoxVCLDD.bpl (Delphi VCL Designtime)\r\nLockBoxFMXDD.bpl (Delphi FMX Designtime)\r\n\r\nLockBoxCR.bpl (C++Builder Runtime)\r\nLockBoxVCLCD.bpl (C++Builder VCL Designtime)\r\nLockBoxFMXCD.bpl (C++Builder FMX Designtime)\r\n\r\n-----\r\n\r\n## 3. Installation\r\n\r\nTurboPack LockBox is available via the [GetIt Package Manager](http://docwiki.embarcadero.com/RADStudio/en/Installing_a_Package_Using_GetIt_Package_Manager) where you can quickly and easily install and uninstall it.\r\n\r\nTo manually install TurboPack LockBox into your IDE, take the following\r\nsteps:\r\n\r\n1. Unzip the release files into a directory (e.g., d:\\lockBox).\r\n\r\n2. Start RAD Studio.\r\n\r\n3. Add the source subdirectory (e.g., d:\\lockBox\\source) to the\r\n     IDE's library path. For C++Builder, add the hpp subdirectory\r\n     (e.g., d:\\lockBox\\source\\hpp) to the IDE's system include path.\r\n\r\n4. Open & install the designtime packages specific to the IDE being\r\n     used. The IDE should notify you the components have been\r\n     installed.\r\n"
 },
 {
  "repo": "KDE/qca",
  "language": "C++",
  "readme_contents": "Qt Cryptographic Architecture (QCA)\n-----------------------------------\n\nDescription\n-----------\n\n  QCA is a library that provides an easy API for a range of cryptographic\n  features, including SSL/TLS, X.509 certificates, SASL, OpenPGP, smartcards,\n  and much more.\n\n  Functionality is supplied via plugins.  This is useful for avoiding\n  dependence on a particular crypto library and makes upgrading easier,\n  as there is no need to recompile your application when adding or\n  upgrading a crypto plugin.\n\n  In order for QCA to be of much use, you'll want to install some plugins.\n\n\nInstall\n-------\n  For installation or compiling instructions, see the INSTALL file.\n\n\nLicense\n-------\n  This library is licensed under the Lesser GNU General Public License.  See\n  the COPYING file for more information.\n\n\nHistory\n-------\n\nQCA was originally created to support the security needs of the\nPsi XMPP/Jabber client project ( http://psi-im.org/ ).\n\n\nOld Changes list\n----------------\n\n  New in 2.1.0\n  - Ported to Qt5 (Qt4 also supported)\n  - New building system. CMake instead of qmake\n  - Added CTR symetric cipher support to qca core\n  - Added no padding encryption algorithm to qca core\n  - qcatool2 renamed to qcatool\n  - fixed crash in qcatool when only options provided on command line without any commands\n  - Use plugins installation path as hard-coded runtime plugins search path\n  - Added new functiion pluginPaths\n  - Added functions to get runtime QCA version\n  - Fixed 'no watch file' warnings in FileWatch\n  - Added EME_PKCS1v15_SSL Encryption Algorithm\n  - New implementation of SafeTimer to prevent crashes\n  - Updated certificates for unittests\n  - RSA Keys are permutable, can encrypt with private and decrypt with public\n  - Add unloadProvider() function for symmetry with insertProvider()\n  - Overloaded \"makeKey\" to derive a password depending on a time factor\n  - Remove pointer to deinit() routine from QCoreApplication at deinitialization\n  - Fix a couple of crashes where all plugins might not be available\n  - Fix operating on keys with unrelated expired subkeys\n  - Fixed timers in Synchronizer class\n  - Dropped randomunittest\n  - Fixed many unittests\n  - qca-gnupg: internal refactoring\n  - qca-gnupg: try both gpg and gpg2 to find gnupg executable\n  - qca-gnupg: fixed some encodings problem\n  - qca-ossl: no DSA_* dl groups in FIPS specification\n  - qca-ossl: added missed signatures to CRLContext\n  - qca-ossl: fixed certs time zone\n  - qca-nss: fixed KeyLenght for Cipher\n  - qca-botan: fixed getting result size for ciphers\n\n  New in 2.0.3\n  - Bugfix release, forward and backward compatible with 2.0.x\n  - Fix compilation when using Qt/Windows SDK\n\n  New in 2.0.2\n  - Bugfix release, forward and backward compatible with 2.0.x\n  - Fix compatibility with Qt 4.5 when QCA::Initializer appears before QApp\n  - Don't convert to secure memory when Hash::update(QByteArray) is used\n  - Use configure.exe instead of configwin.bat\n\n  New in 2.0.1\n  - Bugfix release, forward and backward compatible with 2.0.x\n  - Ability to build as a Mac framework (and build this way by default)\n  - On non-Mac Unix, the pkgconfig file is always qca2.pc, even in debug mode\n  - Certificates containing wildcards are now matched properly\n  - DirWatch/FileWatch now work\n  - Keystore writes now work\n  - Don't delete objects in their event handler (prevents Qt 4.4 warnings)\n  - Fix potential hang with TLS in server mode\n  - Windows version can be configured/installed using paths with spaces\n\n\nOld Developer list\n------------------\n\nProject Lead/Maintainer (2003-2012):\n  Justin Karneges <justin@affinix.com>\n  (March 2007 - August 2007 under Barracuda Networks employment)\n\nDevelopment, Documentation, Unittests (2004-2009):\n  Brad Hards <bradh@frogmouth.net>\n\nDevelopment (2013-2017)\n  Ivan Romanov <drizt@land.ru>\n\nSpecial Thanks:\n  Portugal Telecom (SAPO division), for sponsorship\n  Alon Bar-Lev, for smart card and design assistance\n  Jack Lloyd, for Botan and X.509 mentoring\n  L. Peter Deutsch, for the public domain MD5 implementation\n  Steve Reid, for the public domain SHA1 implementation\n  Jason Kim, for the CMS Signer graphics\n"
 },
 {
  "repo": "rstudio/rscrypt",
  "language": "C",
  "readme_contents": "# rscrypt\n\n[![Build Status](https://travis-ci.org/rstudio/rscrypt.png?branch=master)](https://travis-ci.org/rstudio/rscrypt)\n\nrscrypt is an R package for a collection of scrypt cryptographic functions. Scrypt is a\npassword-based key derivation function created by Colin Percival. The algorithm was specifically\ndesigned to make it costly to perform large-scale custom hardware attacks by requiring large\namounts of memory.\n\n## Requirements\n\nThis package makes use of native code, you will need to have a R package development \nenvironment installed on your system:\n\n__Windows:__ RTools for building packages\n__Mac OSX:__ XCode Command Line Tools for building packages\n\n## Installation\n\nTo install directly from GitHub, run this:\n\n```\nif (!require(\"devtools\"))\n    install.packages(\"devtools\")\ndevtools::install_github(\"rstudio/rscrypt\")\n```\n\n## Usage\n\nHash a password:\n```\nhashed <- scrypt::hashPassword(\"good password\")\n```\n\nVerify a hashed password:\n```\nscrypt::verifyPassword(hashed, \"bad bassword\")\n[1] FALSE\n\nscrypt::verifyPassword(hashed, \"good password\")\n[1] TRUE\n```\n\nKey derivation function\n```\npassword <- charToRaw(\"my password\")\nsalt <- sample(1:10, 32, replace=TRUE)\nscrypt::scrypt(password, salt, 65536, 8, 1)\n```\n\n## Password Hashing\n\nThe `hashPassword` and `verifyPassword` functions are designed be compatible with the\nnode.js scrypt package. The output from `hashPassword` is a base64 encoded string\ncontaining multiple pieces of information that are required to verify the hash later on.\nIncluded in this output are the n, r and p parameters for the scrypt function, as well as\na checksum and HMAC for verifying the integrity of the hash. Below is the format the hash.\n\n\n### Hash Format\n```\noffset\tlength\n0\t6\t\"scrypt\"\n6\t1\tscrypt data file version number (0)\n7\t1\tlog2(n) (big-endian must be between 1 and 63 inclusive)\n8\t4\tr (big-endian integer; must satisfy r * p < 2^30)\n12\t4\tp (big-endian integer; must satisfy r * p < 2^30)\n16\t32\tsalt\n48\t16\tfirst 16 bytes of SHA256(bytes 0 .. 47)\n64\t32\tHMAC-SHA256(bytes 0 .. 63)\n```\n\n"
 },
 {
  "repo": "somdoron/NaCl.net",
  "language": "C#",
  "readme_contents": "# NaCl.net\n\nNaCl.net (pronounced \"salt dotnet\") is C# port of Box (Curve25519XSalsa20Poly1305), SecretBox (XSalsa20Poly1305), XSalsa20 and Poly1305 from [NaCl](http://nacl.cr.yp.to/) by Daniel J. Bernstein.\n\n## Package\n\nhttps://www.nuget.org/packages/NaCl.Net/\n\n## How to use\n\n### Curve25519XSalsa20Poly1305 - Public-key Authenticated Encryption\n\nUsing public-key authenticated encryption, Bob can encrypt a confidential message specifically for Alice, using Alice's public key.\n\nUsing Bob's public key, Alice can compute a shared secret key. Using Alice's public key and his secret key, Bob can compute the exact same shared secret key. That shared secret key can be used to verify that the encrypted message was not tampered with, before eventually decrypting it.\n\nAlice only needs Bob's public key, the nonce and the ciphertext. Bob should never ever share his secret key, even with Alice.\nAnd in order to send messages to Alice, Bob only needs Alice's public key. Alice should never ever share her secret key either, even with Bob.\n\nAlice can reply to Bob using the same system, without having to generate a distinct key pair.\nThe nonce doesn't have to be confidential, but it should be used with just one invocation of crypto_box_easy() for a particular pair of public and secret keys.\n\nOne easy way to generate a nonce is to use [RandonNumberGenerator](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=netframework-4.8), considering the size of the nonces the risk of any random collisions is negligible. For some applications, if you wish to use nonces to detect missing messages or to ignore replayed messages, it is also acceptable to use a simple incrementing counter as a nonce.\nWhen doing so you must ensure that the same value can never be re-used (for example you may have multiple threads or even hosts generating messages using the same key pairs).\nAs stated above, senders can decrypt their own messages, and compute a valid authentication tag for any messages encrypted with a given shared secret key. This is generally not an issue for online protocols.\n\nExample:\n\n```\nusing var rng = RandomNumberGenerator.Create();\n\nCurve25519XSalsa20Poly1305.KeyPair(out var aliceSecretKey, out var alicePublicKey);\nCurve25519XSalsa20Poly1305.KeyPair(out var bobSecretKey, out var bobPublicKey);\n\nCurve25519XSalsa20Poly1305 aliceBox = new Curve25519XSalsa20Poly1305(aliceSecretKey, bobPublicKey);\nCurve25519XSalsa20Poly1305 bobBox = new Curve25519XSalsa20Poly1305(bobSecretKey, alicePublicKey);\n\n// Generating random nonce\nbyte[] nonce = new byte[Curve25519XSalsa20Poly1305.NonceLength];\nrng.GetBytes(nonce);\n\n// Plaintext message\nbyte[] message = Encoding.UTF8.GetBytes(\"Hey Bob\");\n\n// Prepare the buffer for the ciphertext, must be message length and extra 16 bytes for the authentication tag\nbyte[] cipher = new byte[message.Length + Curve25519XSalsa20Poly1305.TagLength];\n\n// Encrypting using alice box\naliceBox.Encrypt(cipher, message, nonce);\n\n// Decrypting using bob box\nbyte[] plain = new byte[cipher.Length - Curve25519XSalsa20Poly1305.TagLength];\nbool isVerified = bobBox.TryDecrypt(plain, cipher, nonce);\n\nConsole.WriteLine(\"Verified: {0}\", isVerified);\nConsole.WriteLine(\"Message: {0}\", Encoding.UTF8.GetString(plain));\n```\n\n\n### XSalsa20Poly1305\n\n## License\nNaCl.net is using MPLv2, you can read more at the [FAQ](http://www.mozilla.org/MPL/2.0/FAQ.html) file.\n"
 },
 {
  "repo": "haltingstate/secp256k1-go",
  "language": "Go",
  "readme_contents": "# secp256k1-go\n\ngolang secp256k1 library\n\nImplements cryptographic operations for the secp256k1 ECDSA curve used by Bitcoin.\n\n## Installing\n\nYou need to have installed [gmp](https://gmplib.org/) in your system.\n\n\tsudo apt-get install gmp-dev\n\n### Ubuntu 12.04\n\n\tsudo apt-get update\n\tsudo apt-get install libgmp-dev\n\n### OSX 10.9\n\n\tcurl -O https://ftp.gnu.org/gnu/gmp/gmp-6.0.0a.tar.xz\n\ttar xfvz gmp-6.0.0a.tar.xz\n\tcd gmp-6.0.0a.tar.xz\n\t./configure\n\tmake\n\tsudo make install\n\tmake check # just in case\n\n## Test\n\nTo run tests do\n\n\tgo test\n"
 },
 {
  "repo": "pharo-contributions/Cryptography",
  "language": "Smalltalk",
  "readme_contents": "# Cryptography\n\n[![Build Status](https://travis-ci.org/pharo-contributions/Cryptography.svg?branch=master)](https://travis-ci.org/pharo-contributions/Cryptography)\n\n## Quick Start \n\n```Smalltalk\nMetacello new\n  baseline: 'Cryptography';\n  repository: 'github://pharo-contributions/Cryptography';\n  load.\n```\n"
 },
 {
  "repo": "SSSaaS/sssa-golang",
  "language": "Go",
  "readme_contents": "# sssa-golang\n[![Build Status](https://travis-ci.org/SSSaaS/sssa-golang.svg?branch=master)](https://travis-ci.org/SSSaaS/sssa-golang)\n\nAn implementation of Shamir's Secret Sharing Algorithm in Go  \n\n    Copyright (C) 2015 Alexander Scheel, Joel May, Matthew Burket  \n    See Contributors.md for a complete list of contributors.  \n    Licensed under the MIT License.  \n\n## Usage\nNote: this library is for a pure implementation of SSS in Go;\nif you are looking for the API Library for SSSaaS, look [here](https://github.com/SSSAAS/sssaas-golang).\n\n    sssa.Create(minimum int, shares int, raw string) - creates a set of shares\n\n    sssa.Combine(shares []string) - combines shares into secret\n\nFor more detailed documentation, check out docs/sssa.md.\n\n## Contributing\nWe welcome pull requests, issues, security advice on this library, or other contributions you feel are necessary. Feel free to open an issue to discuss any questions you have about this library.\n\nThis is the reference implementation for all other SSSA projects. Please make\nsure all tests pass before submitting a pull request. In particular, `go test`\nwill run all internal tests and the [go-libtest](https://github.com/SSSAAS/go-libtest)\nsuite's tests should be run against the changes before submission.\n\nFor security issues, send a GPG-encrypted email to <alexander.m.scheel@gmail.com> with public key [0xBDC5F518A973035E](https://pgp.mit.edu/pks/lookup?op=vindex&search=0xBDC5F518A973035E).\n"
 },
 {
  "repo": "rweather/lightweight-crypto",
  "language": "C",
  "readme_contents": "\nLightweight Cryptography Primitives\n===================================\n\n*Note:* The 10 finalists of the NIST lightweight cryptography competition\nwere announced in March 2021.  I have forked this repository to create a new\n[repository](https://github.com/rweather/lwc-finalists) for the\nfinalists and further improvements.  This repository is now archived.\n\nThis repository contains implementations of many of the second round\nsubmissions to the [NIST lightweight cryptography competition](https://csrc.nist.gov/projects/lightweight-cryptography/round-2-candidates).\n\nThe [documentation](https://rweather.github.io/lightweight-crypto/index.html)\ncontains more information on the algorithms and their performance.\n\nContact\n-------\n\nFor more information on this code, to report bugs, or to suggest\nimprovements, please contact the author Rhys Weatherley via\n[email](mailto:rhys.weatherley@gmail.com).\n"
 },
 {
  "repo": "morsuning/cryptography-gui-tool",
  "language": "Python",
  "readme_contents": "# cryptography-gui-tool\n\n## \u9879\u76ee\u7b80\u4ecb\n\n\u4e00\u4e2a\u5e26\u6709 GUI \u754c\u9762\u7684\u5bc6\u7801\u5b66\u5de5\u5177\n\n## \u529f\u80fd\u7279\u6027\n\n- \u5b9e\u73b0\u4e86 11 \u79cd\u53e4\u5178\u5bc6\u7801\u30012 \u79cd\u6d41\u5bc6\u7801\u30012 \u79cd\u5206\u7ec4\u5bc6\u7801\u30012 \u79cd\u516c\u94a5\u5bc6\u7801\u3001\u548c 1 \u79cd\u54c8\u5e0c\u7b97\u6cd5\u3002\u53ef\u5bf9\u5b57\u7b26\u4e32\u548c\u6587\u4ef6\u8fdb\u884c\u52a0\u5bc6\u548c\u89e3\u5bc6\u3002\n- \u9644\u5e26 PyQt \u5b9e\u73b0\u7684 GUI \u754c\u9762\n- \u5bc6\u7801\u5e93\u4e0e GUI \u754c\u9762\u4ee3\u7801\u5206\u79bb\uff0c\u53ef\u4ee5\u5f53\u505a\u5355\u72ec\u7684\u5bc6\u7801\u5e93\u4f7f\u7528\n\n\u5177\u4f53\u5b9e\u73b0\u7684\u5bc6\u7801\u5982\u4e0b\n\n\u53e4\u5178\u5bc6\u7801\uff08\u53ef\u5bf9\u5b57\u7b26\u4e32\u52a0\u89e3\u5bc6\uff09\n\n1. \u5355\u8868\u66ff\u4ee3\u5bc6\u7801\uff1a\n\n* Caesar Cipher\n* Keyword Cipher\n* Affine Cipher\n* Multilateral Cipher\n\n2. \u591a\u8868\u66ff\u4ee3\u5bc6\u7801\uff1a\n\n* Vigenere Cipher\n* Autokey Ciphertext\n* Autokey Plaintext\n\n3. \u591a\u56fe\u66ff\u4ee3\u5bc6\u7801\uff1a\n\n* Playfair Cipher\n\n4. \u7f6e\u6362\u5bc6\u7801\uff1a\n\n* Permutation Cipher\n* Column Permutation Cipher\n* Double-Transposition Cipher\n\n\u6d41\u5bc6\u7801\uff08\u53ef\u5bf9\u5b57\u7b26\u4e32\u548c\u6587\u4ef6\u52a0\u89e3\u5bc6\uff09\n\n* RC4\n* CA\n\n\u5206\u7ec4\u5bc6\u7801\uff08\u53ef\u5bf9\u5b57\u7b26\u4e32\u548c\u6587\u4ef6\u52a0\u89e3\u5bc6\uff09\n\n* DES-64\n* AES-64\n\n\u516c\u94a5\u5bc6\u7801\uff08\u53ef\u751f\u6210\u5bc6\u94a5\u5bf9\uff0c\u80fd\u5bf9\u5b57\u7b26\u4e32\u548c\u6587\u4ef6\u52a0\u89e3\u5bc6\uff09\n\n* RSA\n* ECC\n\n\u54c8\u5e0c\u7b97\u6cd5\uff08\u53ef\u7528\u4e8e\u5b57\u7b26\u4e32\u548c\u6587\u4ef6\uff09\n\n* MD5\n\n## \u73af\u5883\u4f9d\u8d56\n\n\u89c1 requirement.txt , \u7531 pip freeze \u91ca\u51fa\n\n## \u90e8\u7f72\u6b65\u9aa4\n\n\u4f7f\u7528 virtualenv \u521b\u5efa Python \u73af\u5883\n\n\u5728\u521b\u5efa\u597d\u7684 Python \u73af\u5883\u4e2d\uff0c\u4f9d\u6b21\u8fd0\u884c\n\n```bash\npip install -r requirements.txt\npython3 start.py\n```\n\n## \u76ee\u5f55\u7ed3\u6784\u63cf\u8ff0\n\n.\\\n\u251c\u2500\u2500 algorithm \u5bc6\u7801\u7b97\u6cd5\u5b9e\u73b0\\\n\u2502 \u251c\u2500\u2500 block_cipher\\\n\u2502 \u2502 \u2514\u2500\u2500 aes\\\n\u2502 \u251c\u2500\u2500 classical_cipher\\\n\u2502 \u251c\u2500\u2500 hash_algorithm\\\n\u2502 \u251c\u2500\u2500 public_cipher\\\n\u2502 \u2502 \u251c\u2500\u2500 ecc\\\n\u2502 \u2502 \u2514\u2500\u2500 rsa\\\n\u2502 \u2514\u2500\u2500 stream_cipher\\\n\u2502 \u2514\u2500\u2500 ca\\\n\u251c\u2500\u2500 assets QSS \u914d\u7f6e\\\n\u2502 \u251c\u2500\u2500 icons\\\n\u2502 \u251c\u2500\u2500 python\\\n\u2502 \u2514\u2500\u2500 qss\\\n\u251c\u2500\u2500 event GUI \u4e8b\u4ef6\u7ed1\u5b9a\\\n\u2514\u2500\u2500 ui GUI \u754c\u9762\u5b9a\u4e49\n\n## \u7248\u672c\u5185\u5bb9\u66f4\u65b0\n\n1.0 \u66f4\u65b0\u6587\u6863\n\n1.1 \u66f4\u65b0\u4ee3\u7801\u89c4\u8303\n\n## \u58f0\u660e\n\n\u516c\u5f00\u4f7f\u7528\u8be5\u4ee3\u7801\u8bf7\u6ce8\u660e\u4f5c\u8005 Kaoso\n\n## \u534f\u8bae\n\n[Mozilla Public License 2.0](https://github.com/6nosis/cryptography-GUItool/blob/master/LICENSE)\n\n[![Stargazers over time](https://starchart.cc/morsuning/cryptography-GUItool.svg)](https://starchart.cc/morsuning/cryptography-GUItool)\n"
 },
 {
  "repo": "idris-hackers/idris-crypto",
  "language": "Idris",
  "readme_contents": "idris-crypto\n============\n\n[![Join the chat at https://gitter.im/idris-hackers/idris-crypto](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/idris-hackers/idris-crypto?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThis project looks to develop cryptographic primitives using the general purpose functional language [Idris](http://www.idris-lang.org).\n\nIt is important to note that the Idris language is first and foremost a research project, and thus the tooling provided by `idris-crypto` should not necessarily be seen as production ready nor for industrial use.\n\n## Motivation\n\nCryptography is something that is important to get right. It is also difficult to get right. Most languages make it too easy to shoot yourself in the foot ([buffer overflows](http://heartbleed.com), [gotos](https://www.imperialviolet.org/2014/02/22/applebug.html), etc.) and even those that don\u2019t offer limited help, but some languages make it possible to _prove_ arbitrary properties of a program and this ability can give you more confidence that your program is doing what it should. However, a cryptography library also needs to be readily usable by other software, hopefully not tied to code written in its implementation language.\n\nIdris is a win on both sides here. On the one hand, it allows us to prove things about the code, but unlike other proof assistants has [LLVM](http://en.wikipedia.org/wiki/LLVM) and JS backends, which means that it can be linked to very much like a C library, and can also be used by JS, on both the server and client side. It is in a relatively unique position that is ideal for crypto.\n\n## Note on Security\n\nThe security of cryptographic software libraries and implementations is a tricky thing to get right.\nThe notion of what makes a cryptographic software library secure can be a highly contested subject.\nIt is not _good enough_ that a crypto software library is _just_ functionally correct, and contains no coding errors.\nA secure cryptographic software library needs to be resitant to many types of attack for instance:\n\n* Software bugs\n* Lack of adherence to a specification\n* Use of a poor specification\n* Use of poor primitives\n* Side Channel Attacks\n* Using unproven math\n* Use of provably secure crypto\n* the list goes on and on and on.\n\nA language that is safer than `C` only gets you so far.\nHowever, the use of a __general purpose language__ that supports:\n\n* full dependent types,\n* totality checking,\n* tactic based theorem proving,\n* code generation to other languages\n\narguably provides an really interesting development environment in which to explore the development of possibly _provably secure_ and _demonstrably correct_ cryptographic primitives.\n\n## Which primitives\n\nThe list of supported primitives will be summarised here.\n\n### Encryption\n* DES **insecure**\n* Triple DES\n* ARC4 **insecure**\n\n### MAC / cryptographic hash\n* SHA-1 (and the rest of the SHS functions \u2013 SHA-256, SHA-512, etc.)\n\n## Usage\n\nThe easiest way to use the library is simply using encrypt/decrypt. You can pass it either a stream cipher, or a pair of a block cypher and encryption mode:\n\n```\n> the String (encrypt (ARC4 key) \"some message\")\n\"cuhrclh,.urch,.lih.ulchu\" : String\n> the String (decrypt (TDEA1 [key, key, key], CFB iv) \"t893gy'c.,aihntebgl'\"\n\"some message\" : String\n```\n\nIf you already have lists of bytes, try encryptMessage/decryptMessage instead.\n\nThe other useful pair of operations is specific to stream ciphers:\n\n```\n> decryptStream (ARC4 key) stream\n? : Stream\n```\n\nand now you\u2019re pipelining!\n\n## Plans / Notes\n\n* Get a couple of the more common primitives for each type of function\n* work on getting something that is easily usable via an FFI\n* prove interesting properties about various primitives (look in papers for these)\n* start building up higher-level components / protocols\n* MOAR PRIMITIVES\n\n* would be nice to require that insecure primitives run inside of some monad, but need some restricted escape mechanism so, EG, TDEA can be secure while DEA isn\u2019t.\n* for DSA, implement it deterministically, both to avoid bad pRNGs (which we should do in general), but also just because determinism is nice\n\n## Contributions\n\nEvery contribution is appreciated \u2013 from documentation, to fixing typos, to adding one little function to a data structure. Even if you\u2019re just touching Idris, dependent types, etc. for the first time. [Join in!](CONTRIBUTING.md)\n"
 },
 {
  "repo": "certbot/josepy",
  "language": "Python",
  "readme_contents": "JOSE protocol implementation in Python using cryptography\n\n.. image:: https://github.com/certbot/josepy/actions/workflows/check.yaml/badge.svg\n  :target: https://github.com/certbot/josepy/actions/workflows/check.yaml\n\n.. image:: https://codecov.io/gh/certbot/josepy/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/certbot/josepy\n\n.. image:: https://readthedocs.org/projects/josepy/badge/?version=latest\n  :target: http://josepy.readthedocs.io/en/latest/?badge=latest\n\nOriginally developed as part of the ACME_ protocol implementation.\n\n.. _ACME: https://pypi.python.org/pypi/acme\n"
 },
 {
  "repo": "MPC-SoK/frameworks",
  "language": "C++",
  "readme_contents": "This repository contains a collection of sample programs for a variety of multi-party computation (MPC) frameworks. For ease of examination, we have set up each framework in a Docker container. This minimizes the effort required to test framework functionality. \n\nThe goal of this project is to make it easier for researchers (and other users) to experiment with MPC software frameworks. These software tools are suitable for prototyping applications, testing current capabilities, measuring rough benchmark performances, and other similar tasks. Many of these frameworks are not suitable for use in production environments! \n\nThere are two main contributions of this repository. One is the code above. The other is extended documentation, including READMEs, comments in the code, and extended notes in the [wiki](https://github.com/mpc-sok/frameworks/wiki) pages. \nWe welcome contributions in any of these areas: if you have used a framework, optimized the compilation scripts, or made observations about its usability or quirks, please consider writing a note about your experiences and submitting it as a pull request (or an email).\n\nThis repository accompanies the paper <a href=\"http://marcellahastings.com/static/mpcsok.pdf\">SoK: General-Purpose Compilers for Secure Multi-party Computation</a>, which includes a thorough evaluation of each framework across usability and architectural criteria. For a gentler introduction to secure computation and this project, please read the [layperson's guide](https://github.com/MPC-SoK/frameworks/wiki/A-Layperson%27s-Guide).\n\n## Frameworks \nWe include a complete build environment and three sample programs for each framework. Additional documentation of some framework can be found in the [wiki](https://github.com/mpc-sok/frameworks/wiki) pages). \nEach framework directory includes a `Dockerfile` and one or more `install.sh` scripts. There is a `README` that describes some relevant architecture along with instructions to compile, run, and modify examples. The `source` directory holds the sample programs and any additional code (including patches, vim syntax highlighting, and input generation scripts).\n\nFor more information about using Docker, see the [Docker documentation](https://github.com/MPC-SoK/frameworks/wiki/Docker).\n\n## About Sample Programs\nWe implemented three sample programs for each framework. These are small unit tests and are not intended to exhaustively test framework functionality. We used them to learn about the architecture and set-up requirements of each framework. They illustrate a variety of common functionality requirements.\n\n`mult3`: This multiplies three numbers together. It either takes input from three different parties (if supported) or takes three _secret shared_ inputs from two parties. Some frameworks provide built-in tools for secret-sharing input; others required us to manually share inputs to two parties. It tests basic numeric capabilities, integer I/O, and basic computation. \n\n`innerprod`: This computes an inner product (aka scalar product, aka dot product) on two integer vectors. It takes two vectors as input and computes the pairwise product of their elements. It requires support for input, access, and iteration over secret-valued arrays. \n\n`xtabs`: This computes a crosstabulation, a database operation that computes averages (or sums) by category. The category table and value table share a primary key but are owned by different parties. This tests output and modification of arrays and requires conditionals on secret data. We used a brute-force algorithm to solve this problem, and return a list of sums by category (rather than averages).\n\n## Contributions and Citations\nThis software is offered as-is. It may not be up-to-date with the latest versions of each framework. **We welcome pull requests** for compatibility with new software versions, corrections to sample programs, and new frameworks.\n\nIf you maintain a software tool that belongs here, please contact us. New frameworks are first added as branches then merged with the main repository. \n\nQuestions and commentary should be raised publicly in the [Issue Tracker](https://github.com/MPC-SoK/frameworks/issues). \n\nIf you use this work for an academic project, please cite:\n```latex\n    @inproceedings{mpc-sok,\n       author = {Marcella Hastings and Brett Hemenway and Daniel Noble and Steve Zdancewic},\n       title = {{SoK:} General-Purpose Compilers for Secure Multi-Party Computation},\n       booktitle = {2019 IEEE Symposium on Security and Privacy (SP)},\n       year = {2019},\n    }\n```\n\n"
 },
 {
  "repo": "FredericJacobs/Cryptography-Stanford-Notes",
  "language": null,
  "readme_contents": "Cryptography-Stanford-Notes\n===========================\n\nNotes and exercices from the Cryptography class on Coursera\n"
 },
 {
  "repo": "bitpay/csharp-bitpay-client",
  "language": "C#",
  "readme_contents": "<img src=\"https://bitpay.com/_nuxt/img/1c0494b.svg\" width=\"150\">\n\n# BitPay .NET client\n[![NuGet version (BitPay.Light)](https://img.shields.io/nuget/v/BitPay.svg?style=for-the-badge&logo=nuget)](https://www.nuget.org/packages/BitPay/)\n[![License](https://img.shields.io/github/license/bitpay/csharp-bitpay-client.svg?style=for-the-badge&logo=github)](https://raw.githubusercontent.com/bitpay/csharp-bitpay-client/master/LICENSE)\n\nFull implementation of the BitPay Payment Gateway. This library implements BitPay's [Cryptographically Secure RESTful API](https://bitpay.com/api).\n\n## Getting Started\n\nTo get up and running with our C# library quickly, follow [The GUIDE](https://github.com/bitpay/csharp-bitpay-client/blob/master/GUIDE.md)\n\n## Support\n\n* https://github.com/bitpay/csharp-bitpay-client/issues\n* https://support.bitpay.com\n\n## Contribute\n\nTo contribute to this project, please fork and submit a pull request.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2019 BitPay, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
 },
 {
  "repo": "pyrogram/tgcrypto",
  "language": "C",
  "readme_contents": "# TgCrypto\n\n> Fast and Portable Cryptography Extension Library for Pyrogram\n\n**TgCrypto** is a Cryptography Library written in C as a Python extension. It is designed to be portable, fast,\neasy to install and use. TgCrypto is intended for [Pyrogram](https://github.com/pyrogram/pyrogram) and implements the\ncryptographic algorithms Telegram requires, namely:\n\n- **`AES-256-IGE`** - used in [MTProto v2.0](https://core.telegram.org/mtproto).\n- **`AES-256-CTR`** - used for [CDN encrypted files](https://core.telegram.org/cdn).\n- **`AES-256-CBC`** - used for [encrypted passport credentials](https://core.telegram.org/passport).\n\n## Requirements\n\n- Python 3.6 or higher.\n\n## Installation\n\n``` bash\n$ pip3 install -U tgcrypto\n```\n\n## API\n\nTgCrypto API consists of these six methods:\n\n```python\ndef ige256_encrypt(data: bytes, key: bytes, iv: bytes) -> bytes: ...\ndef ige256_decrypt(data: bytes, key: bytes, iv: bytes) -> bytes: ...\n\ndef ctr256_encrypt(data: bytes, key: bytes, iv: bytes, state: bytes) -> bytes: ...\ndef ctr256_decrypt(data: bytes, key: bytes, iv: bytes, state: bytes) -> bytes: ...\n\ndef cbc256_encrypt(data: bytes, key: bytes, iv: bytes) -> bytes: ...\ndef cbc256_decrypt(data: bytes, key: bytes, iv: bytes) -> bytes: ...\n```\n\n## Usage\n\n### IGE Mode\n\n**Note**: Data must be padded to match a multiple of the block size (16 bytes).\n\n``` python\nimport os\n\nimport tgcrypto\n\ndata = os.urandom(10 * 1024 * 1024 + 7)  # 10 MB of random data + 7 bytes to show padding\nkey = os.urandom(32)  # Random Key\niv = os.urandom(32)  # Random IV\n\n# Pad with zeroes: -7 % 16 = 9\ndata += bytes(-len(data) % 16)\n\nige_encrypted = tgcrypto.ige256_encrypt(data, key, iv)\nige_decrypted = tgcrypto.ige256_decrypt(ige_encrypted, key, iv)\n\nprint(data == ige_decrypted)  # True\n```\n    \n### CTR Mode (single chunk)\n\n``` python\nimport os\n\nimport tgcrypto\n\ndata = os.urandom(10 * 1024 * 1024)  # 10 MB of random data\n\nkey = os.urandom(32)  # Random Key\n\nenc_iv = bytearray(os.urandom(16))  # Random IV\ndec_iv = enc_iv.copy()  # Keep a copy for decryption\n\nctr_encrypted = tgcrypto.ctr256_encrypt(data, key, enc_iv, bytes(1))\nctr_decrypted = tgcrypto.ctr256_decrypt(ctr_encrypted, key, dec_iv, bytes(1))\n\nprint(data == ctr_decrypted)  # True\n```\n\n### CTR Mode (stream)\n\n``` python\nimport os\nfrom io import BytesIO\n\nimport tgcrypto\n\ndata = BytesIO(os.urandom(10 * 1024 * 1024))  # 10 MB of random data\n\nkey = os.urandom(32)  # Random Key\n\nenc_iv = bytearray(os.urandom(16))  # Random IV\ndec_iv = enc_iv.copy()  # Keep a copy for decryption\n\nenc_state = bytes(1)  # Encryption state, starts from 0\ndec_state = bytes(1)  # Decryption state, starts from 0\n\nencrypted_data = BytesIO()  # Encrypted data buffer\ndecrypted_data = BytesIO()  # Decrypted data buffer\n\nwhile True:\n    chunk = data.read(1024)\n\n    if not chunk:\n        break\n\n    # Write 1K encrypted bytes into the encrypted data buffer\n    encrypted_data.write(tgcrypto.ctr256_encrypt(chunk, key, enc_iv, enc_state))\n\n# Reset position. We need to read it now\nencrypted_data.seek(0)\n\nwhile True:\n    chunk = encrypted_data.read(1024)\n\n    if not chunk:\n        break\n\n    # Write 1K decrypted bytes into the decrypted data buffer\n    decrypted_data.write(tgcrypto.ctr256_decrypt(chunk, key, dec_iv, dec_state))\n\nprint(data.getvalue() == decrypted_data.getvalue())  # True\n```\n\n### CBC Mode\n\n**Note**: Data must be padded to match a multiple of the block size (16 bytes).\n\n``` python\nimport os\n\nimport tgcrypto\n\ndata = os.urandom(10 * 1024 * 1024 + 7)  # 10 MB of random data + 7 bytes to show padding\nkey = os.urandom(32)  # Random Key\n\nenc_iv = bytearray(os.urandom(16))  # Random IV\ndec_iv = enc_iv.copy()  # Keep a copy for decryption\n\n# Pad with zeroes: -7 % 16 = 9\ndata += bytes(-len(data) % 16)\n\ncbc_encrypted = tgcrypto.cbc256_encrypt(data, key, enc_iv)\ncbc_decrypted = tgcrypto.cbc256_decrypt(cbc_encrypted, key, dec_iv)\n\nprint(data == cbc_decrypted)  # True\n```\n\n## Testing\n\n1. Clone this repository: `git clone https://github.com/pyrogram/tgcrypto`.\n2. Enter the directory: `cd tgcrypto`.\n3. Install `tox`: `pip3 install tox`\n4. Run tests: `tox`.\n\n## License\n\n[LGPLv3+](COPYING.lesser) \u00a9 2017-present [Dan](https://github.com/delivrance)\n"
 },
 {
  "repo": "zcash/zips",
  "language": "HTML",
  "readme_contents": ".. Title: Specifications and Zcash Improvement Proposals\n\n\nWhat are ZIPs?\n--------------\n\nZcash Improvement Proposals (ZIPs) are the way to:\n\n* propose new features for the `Zcash cryptocurrency <https://z.cash/>`__ and their rationale,\n* specify the implementation details of the feature,\n* collect community input on the proposal, and\n* document design decisions.\n\n\nContributing\n------------\n\nThe authors of a ZIP are responsible for building consensus within the community\nand documenting / addressing dissenting opinions.\n\nAnyone can write a ZIP! We encourage community contributions and decentralization\nof work on the Zcash protocol. If you\u2019d like to bounce ideas off people before formally\nwriting a ZIP, we encourage it! Visit the `ZcashCommunity Discord chat <https://discord.gg/kdjfvps>`__\nto talk about your idea.\n\nParticipation in the Zcash project is subject to a `Code of\nConduct <https://github.com/zcash/zcash/blob/master/code_of_conduct.md>`__.\n\nThe Zcash protocol is documented in its `Protocol Specification <protocol/protocol.pdf>`__.\n\nTo start contributing, first read `ZIP 0 <zip-0000.rst>`__ which documents the ZIP process.\nThen clone `this repo <https://github.com/zcash/zips>`__ from GitHub, and start adding\nyour draft ZIP, formatted either as reStructuredText or as Markdown.\n\nFor example, if using reStructuredText, use a filename matching ``draft-*.rst``.\nUse ``make`` to check that you are using correct\n`reStructuredText <https://docutils.sourceforge.io/rst.html>`__ or\n`Markdown <https://pandoc.org/MANUAL.html#pandocs-markdown>`__ syntax,\nand double-check the generated ``draft-*.html`` file before filing a Pull Request.\n\n\nNU5 ZIPs\n--------\n\nThis is the list of ZIPs relevant to the NU5 Upgrade, which `activated on 31st May 2022 <https://z.cash/upgrade/nu5/>`__:\n\n- `ZIP 32: Shielded Hierarchical Deterministic Wallets <zip-0032.rst>`__ (updated)\n- `ZIP 203: Transaction Expiry <zip-0203.rst>`__ (updated)\n- `ZIP 209: Prohibit Negative Shielded Chain Value Pool Balances <zip-0209.rst>`__ (updated)\n- `ZIP 212: Allow Recipient to Derive Ephemeral Secret from Note Plaintext <zip-0212.rst>`__ (updated)\n- `ZIP 213: Shielded Coinbase <zip-0213.rst>`__ (updated)\n- `ZIP 216: Require Canonical Jubjub Point Encodings <zip-0216.rst>`__\n- `ZIP 221: FlyClient - Consensus-Layer Changes <zip-0221.rst>`__ (updated)\n- `ZIP 224: Orchard Shielded Protocol <zip-0224.rst>`__\n- `ZIP 225: Version 5 Transaction Format <zip-0225.rst>`__\n- `ZIP 239: Relay of Version 5 Transactions <zip-0239.rst>`__\n- `ZIP 244: Transaction Identifier Non-Malleability <zip-0244.rst>`__\n- `ZIP 252: Deployment of the NU5 Network Upgrade <zip-0252.rst>`__\n- `ZIP 316: Unified Addresses and Unified Viewing Keys <zip-0316.rst>`__\n- `ZIP 401: Addressing Mempool Denial-of-Service <zip-0401.rst>`__ (clarified)\n\n\nLicense\n-------\n\nUnless otherwise stated in this repository\u2019s individual files, the\ncontents of this repository are released under the terms of the MIT\nlicense. See `COPYING <COPYING.rst>`__ for more information or see\nhttps://opensource.org/licenses/MIT .\n\nIndex of ZIPs\n-------------\n\n.. raw:: html\n\n  <embed><table>\n    <tr> <th>ZIP</th> <th>Title</th> <th>Status</th> </tr>\n    <tr> <td>0</td> <td class=\"left\"><a href=\"zip-0000.rst\">ZIP Process</a></td> <td>Active</td>\n    <tr> <td><span class=\"reserved\">1</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0001.rst\">Network Upgrade Policy and Scheduling</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">2</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0002.rst\">Design Considerations for Network Upgrades</a></td> <td>Reserved</td>\n    <tr> <td>32</td> <td class=\"left\"><a href=\"zip-0032.rst\">Shielded Hierarchical Deterministic Wallets</a></td> <td>Final</td>\n    <tr> <td><span class=\"reserved\">76</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0076.rst\">Transaction Signature Validation before Overwinter</a></td> <td>Reserved</td>\n    <tr> <td>143</td> <td class=\"left\"><a href=\"zip-0143.rst\">Transaction Signature Validation for Overwinter</a></td> <td>Final</td>\n    <tr> <td>155</td> <td class=\"left\"><a href=\"zip-0155.rst\">addrv2 message</a></td> <td>Proposed</td>\n    <tr> <td>173</td> <td class=\"left\"><a href=\"zip-0173.rst\">Bech32 Format</a></td> <td>Final</td>\n    <tr> <td>200</td> <td class=\"left\"><a href=\"zip-0200.rst\">Network Upgrade Mechanism</a></td> <td>Final</td>\n    <tr> <td>201</td> <td class=\"left\"><a href=\"zip-0201.rst\">Network Peer Management for Overwinter</a></td> <td>Final</td>\n    <tr> <td>202</td> <td class=\"left\"><a href=\"zip-0202.rst\">Version 3 Transaction Format for Overwinter</a></td> <td>Final</td>\n    <tr> <td>203</td> <td class=\"left\"><a href=\"zip-0203.rst\">Transaction Expiry</a></td> <td>Final</td>\n    <tr> <td><span class=\"reserved\">204</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0204.rst\">Zcash P2P Network Protocol</a></td> <td>Reserved</td>\n    <tr> <td>205</td> <td class=\"left\"><a href=\"zip-0205.rst\">Deployment of the Sapling Network Upgrade</a></td> <td>Final</td>\n    <tr> <td>206</td> <td class=\"left\"><a href=\"zip-0206.rst\">Deployment of the Blossom Network Upgrade</a></td> <td>Final</td>\n    <tr> <td>207</td> <td class=\"left\"><a href=\"zip-0207.rst\">Funding Streams</a></td> <td>Final</td>\n    <tr> <td>208</td> <td class=\"left\"><a href=\"zip-0208.rst\">Shorter Block Target Spacing</a></td> <td>Final</td>\n    <tr> <td>209</td> <td class=\"left\"><a href=\"zip-0209.rst\">Prohibit Negative Shielded Chain Value Pool Balances</a></td> <td>Final</td>\n    <tr> <td><strike>210</strike></td> <td class=\"left\"><strike><a href=\"zip-0210.rst\">Sapling Anchor Deduplication within Transactions</a></strike></td> <td>Withdrawn</td>\n    <tr> <td>211</td> <td class=\"left\"><a href=\"zip-0211.rst\">Disabling Addition of New Value to the Sprout Chain Value Pool</a></td> <td>Final</td>\n    <tr> <td>212</td> <td class=\"left\"><a href=\"zip-0212.rst\">Allow Recipient to Derive Ephemeral Secret from Note Plaintext</a></td> <td>Final</td>\n    <tr> <td>213</td> <td class=\"left\"><a href=\"zip-0213.rst\">Shielded Coinbase</a></td> <td>Final</td>\n    <tr> <td>214</td> <td class=\"left\"><a href=\"zip-0214.rst\">Consensus rules for a Zcash Development Fund</a></td> <td>Final</td>\n    <tr> <td>215</td> <td class=\"left\"><a href=\"zip-0215.rst\">Explicitly Defining and Modifying Ed25519 Validation Rules</a></td> <td>Final</td>\n    <tr> <td>216</td> <td class=\"left\"><a href=\"zip-0216.rst\">Require Canonical Jubjub Point Encodings</a></td> <td>Final</td>\n    <tr> <td><span class=\"reserved\">217</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0217.rst\">Aggregate Signatures</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">219</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0219.rst\">Disabling Addition of New Value to the Sapling Chain Value Pool</a></td> <td>Reserved</td>\n    <tr> <td><strike>220</strike></td> <td class=\"left\"><strike><a href=\"zip-0220.rst\">Zcash Shielded Assets</a></strike></td> <td>Withdrawn</td>\n    <tr> <td>221</td> <td class=\"left\"><a href=\"zip-0221.rst\">FlyClient - Consensus-Layer Changes</a></td> <td>Final</td>\n    <tr> <td>222</td> <td class=\"left\"><a href=\"zip-0222.rst\">Transparent Zcash Extensions</a></td> <td>Draft</td>\n    <tr> <td>224</td> <td class=\"left\"><a href=\"zip-0224.rst\">Orchard Shielded Protocol</a></td> <td>Final</td>\n    <tr> <td>225</td> <td class=\"left\"><a href=\"zip-0225.rst\">Version 5 Transaction Format</a></td> <td>Final</td>\n    <tr> <td><span class=\"reserved\">226</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0226.rst\">Zcash Shielded Assets - Transfers and Burns</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">227</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0227.rst\">Zcash Shielded Assets - Issuance</a></td> <td>Reserved</td>\n    <tr> <td>239</td> <td class=\"left\"><a href=\"zip-0239.rst\">Relay of Version 5 Transactions</a></td> <td>Final</td>\n    <tr> <td>243</td> <td class=\"left\"><a href=\"zip-0243.rst\">Transaction Signature Validation for Sapling</a></td> <td>Final</td>\n    <tr> <td>244</td> <td class=\"left\"><a href=\"zip-0244.rst\">Transaction Identifier Non-Malleability</a></td> <td>Final</td>\n    <tr> <td>245</td> <td class=\"left\"><a href=\"zip-0245.rst\">Transaction Identifier Digests & Signature Validation for Transparent Zcash Extensions</a></td> <td>Draft</td>\n    <tr> <td>250</td> <td class=\"left\"><a href=\"zip-0250.rst\">Deployment of the Heartwood Network Upgrade</a></td> <td>Final</td>\n    <tr> <td>251</td> <td class=\"left\"><a href=\"zip-0251.rst\">Deployment of the Canopy Network Upgrade</a></td> <td>Final</td>\n    <tr> <td>252</td> <td class=\"left\"><a href=\"zip-0252.rst\">Deployment of the NU5 Network Upgrade</a></td> <td>Final</td>\n    <tr> <td>300</td> <td class=\"left\"><a href=\"zip-0300.rst\">Cross-chain Atomic Transactions</a></td> <td>Proposed</td>\n    <tr> <td>301</td> <td class=\"left\"><a href=\"zip-0301.rst\">Zcash Stratum Protocol</a></td> <td>Final</td>\n    <tr> <td>302</td> <td class=\"left\"><a href=\"zip-0302.rst\">Standardized Memo Field Format</a></td> <td>Draft</td>\n    <tr> <td><span class=\"reserved\">303</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0303.rst\">Sprout Payment Disclosure</a></td> <td>Reserved</td>\n    <tr> <td>304</td> <td class=\"left\"><a href=\"zip-0304.rst\">Sapling Address Signatures</a></td> <td>Draft</td>\n    <tr> <td><span class=\"reserved\">305</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0305.rst\">Best Practices for Hardware Wallets supporting Sapling</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">306</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0306.rst\">Security Considerations for Anchor Selection</a></td> <td>Reserved</td>\n    <tr> <td>307</td> <td class=\"left\"><a href=\"zip-0307.rst\">Light Client Protocol for Payment Detection</a></td> <td>Draft</td>\n    <tr> <td>308</td> <td class=\"left\"><a href=\"zip-0308.rst\">Sprout to Sapling Migration</a></td> <td>Final</td>\n    <tr> <td><span class=\"reserved\">309</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0309.rst\">Blind Off-chain Lightweight Transactions (BOLT)</a></td> <td>Reserved</td>\n    <tr> <td>310</td> <td class=\"left\"><a href=\"zip-0310.rst\">Security Properties of Sapling Viewing Keys</a></td> <td>Draft</td>\n    <tr> <td><span class=\"reserved\">311</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0311.rst\">Sapling Payment Disclosure</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">312</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0312.rst\">Shielded Multisignatures using FROST</a></td> <td>Reserved</td>\n    <tr> <td>313</td> <td class=\"left\"><a href=\"zip-0313.rst\">Reduce Conventional Transaction Fee to 1000 zatoshis</a></td> <td>Active</td>\n    <tr> <td><span class=\"reserved\">314</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0314.rst\">Privacy upgrades to the Zcash light client protocol</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">315</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0315.rst\">Best Practices for Wallet Handling of Multiple Pools</a></td> <td>Reserved</td>\n    <tr> <td>316</td> <td class=\"left\"><a href=\"zip-0316.rst\">Unified Addresses and Unified Viewing Keys</a></td> <td>Final</td>\n    <tr> <td>321</td> <td class=\"left\"><a href=\"zip-0321.rst\">Payment Request URIs</a></td> <td>Proposed</td>\n    <tr> <td><span class=\"reserved\">322</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0322.rst\">Generic Signed Message Format</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">323</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0323.rst\">Specification of getblocktemplate for Zcash</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">339</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0339.rst\">Wallet Recovery Words</a></td> <td>Reserved</td>\n    <tr> <td>400</td> <td class=\"left\"><a href=\"zip-0400.rst\">Wallet.dat format</a></td> <td>Draft</td>\n    <tr> <td>401</td> <td class=\"left\"><a href=\"zip-0401.rst\">Addressing Mempool Denial-of-Service</a></td> <td>Final</td>\n    <tr> <td><span class=\"reserved\">402</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0402.rst\">New Wallet Database Format</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">403</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0403.rst\">Verification Behaviour of zcashd</a></td> <td>Reserved</td>\n    <tr> <td><span class=\"reserved\">416</span></td> <td class=\"left\"><a class=\"reserved\" href=\"zip-0416.rst\">Support for Unified Addresses in zcashd</a></td> <td>Reserved</td>\n    <tr> <td><strike>1001</strike></td> <td class=\"left\"><strike><a href=\"zip-1001.rst\">Keep the Block Distribution as Initially Defined \u2014 90% to Miners</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1002</strike></td> <td class=\"left\"><strike><a href=\"zip-1002.rst\">Opt-in Donation Feature</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1003</strike></td> <td class=\"left\"><strike><a href=\"zip-1003.rst\">20% Split Evenly Between the ECC and the Zcash Foundation, and a Voting System Mandate</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1004</strike></td> <td class=\"left\"><strike><a href=\"zip-1004.rst\">Miner-Directed Dev Fund</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1005</strike></td> <td class=\"left\"><strike><a href=\"zip-1005.rst\">Zcash Community Funding System</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1006</strike></td> <td class=\"left\"><strike><a href=\"zip-1006.rst\">Development Fund of 10% to a 2-of-3 Multisig with Community-Involved Third Entity</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1007</strike></td> <td class=\"left\"><strike><a href=\"zip-1007.rst\">Enforce Development Fund Commitments with a Legal Charter</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1008</strike></td> <td class=\"left\"><strike><a href=\"zip-1008.rst\">Fund ECC for Two More Years</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1009</strike></td> <td class=\"left\"><strike><a href=\"zip-1009.rst\">Five-Entity Strategic Council</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1010</strike></td> <td class=\"left\"><strike><a href=\"zip-1010.rst\">Compromise Dev Fund Proposal With Diverse Funding Streams</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1011</strike></td> <td class=\"left\"><strike><a href=\"zip-1011.rst\">Decentralize the Dev Fee</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1012</strike></td> <td class=\"left\"><strike><a href=\"zip-1012.rst\">Dev Fund to ECC + ZF + Major Grants</a></strike></td> <td>Obsolete</td>\n    <tr> <td><strike>1013</strike></td> <td class=\"left\"><strike><a href=\"zip-1013.rst\">Keep It Simple, Zcashers: 10% to ECC, 10% to ZF</a></strike></td> <td>Obsolete</td>\n    <tr> <td>1014</td> <td class=\"left\"><a href=\"zip-1014.rst\">Establishing a Dev Fund for ECC, ZF, and Major Grants</a></td> <td>Active</td>\n    <tr> <td>guide</td> <td class=\"left\"><a href=\"zip-guide.rst\">{Something Short and To the Point}</a></td> <td>Draft</td>\n  </table></embed>\n"
 },
 {
  "repo": "AlgorithmsMeetup/Cryptography",
  "language": "JavaScript",
  "readme_contents": "###Encryption\n\nWhen communicating data through middlemen and thirdparties (like when sending data over the internet), it\u2019s important that we have a way of keeping our information safe.  We must confirm that the messages are complete, unaltered, authenticated, and sometimes even unread.  Fortunately for this, there are a number of cryptographic techniques that can help us ensure the integrity of our data and the messages we send across the wires.\n\n####Uses of Encryption\nWhen communicating across the internet, we must assume that everything we send is public information that could be intercepted and read by anyone.  It\u2019s also possible for anyone to send a message, block a message, or potentially alter or replace a message.\nTo prevent eavesdropping, we encrypt our messages so they will be unintelligible to anyone without the decryption key.\nTo ensure completeness and authenticity, that is, that the sender of the message is who they say they are, we use digital signatures.\n\nThere are quite a few different approaches to generating keys, encrypting, and signing messages and they can all get fairly complicated.  They rely heavily on mathematical concepts and it\u2019s very easy to run into issues when implementing encryption methods.  The best encryption techniques are not the ones that rely on obscure methods, but rather on strong mathematical techniques that are virtually impossible to reverse.  Here we will discuss the basics of a few techniques-- please consider them as an entry point to understanding how various techniques work rather than a fool-proof implementation of cryptographic protocols.\n\n\n####Symmetric Key Exchange\nIn symmetric key encryption, the key used to encrypt a message is the same as the key used to decrypt a message.  This means that the keys must be kept secret, and cannot be exchanged openly.  A common implementation of symmetric key exchange is Diffie-Hellman, which is used in HTTPS/ SSL.\n\n#####Diffie-Hellman\n[Diffie-Hellman](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) is a technique used for two or more parties to generate matching secret keys without any prior communication history even in the presence of a third party.  It relies on a couple of shared (and openly communicated) pieces of information, and the rest is mathematically and secretly derived.  Here\u2019s how:\n\n1.  Both parties agree on a prime number p and a base g.  These are publicly known.\n2.  Both parties then select a secret integer i, and perform the following operation:\n\n        partialKey = g^i % p\n\n3.  They then trade partial keys, and perform that same operation again, this time generating the shared secret\n\n        secretKey = partialKey^i % p\n\nSince both parties have performed the same operations, they now both hold the secret key, although it was never openly communicated.  This key can now be used to encrypt messages sent between the two of them.\n\nPro tip: don't use the same prime as everyone else on the Internet because, while it's extremely expensive, each prime *can* be brute forced [by state-level attackers](https://freedom-to-tinker.com/blog/haldermanheninger/how-is-nsa-breaking-so-much-crypto/)\n\n#####One-time Pad\nA [one-time pad](https://en.wikipedia.org/wiki/One-time_pad) is a method for encrypting a message that cannot be cracked when used properly.  Here, we will encrypt a message by combining the secret key with the plaintext message by a bitshifting operation-- specifically bitwise or (xor).  Bitwise or is the reverse of itself, so to decrypt the message, all we do is remove the key by performing the same operation, but this time with the ciphertext.\n\n####Asymmetric Key Generation\nAsymmetric key encryption, or public-private key encryption, is a method that allows anyone to send an encrypted message to a particular recipient.  Although the public and private keys are different, they are mathematically linked and can be used to reverse the effect of the other-- that is, we can use the public key to encrypt a message, and the private key to decrypt a message.\n\n#####RSA Encryption\n[RSA](https://en.wikipedia.org/wiki/RSA(cryptosystem)) is a cryptosystem (a set of techniques used for cryptographic protocols) that can be used to generate a public-private key pair as well as to sign a message.  Its security is based on the difficulty of factoring the product of very large prime numbers, which are used as the keys.  \n\nThe mathematical proof for how this works is rather rigorous, so we won\u2019t worry about deriving that here.  What we should understand, though, is that prime numbers do not share any factors, and thus when we use them with exponents and modulo operations it is still possible to factor them out without losing the necessary information to decrypt messages.  Not only are these operations reversible, but they would also take a practically infinite amount of time to reverse without knowledge of the base prime numbers or keys used to encrypt the message.\n\nYou can read more in the above link on RSA for how to generate keys, but here\u2019s a rough outline:\n\n1.  Choose two distinct prime numbers, p and q.  These will serve as the base from which to calculate the public and private keys, as well as the modulus value.\n2.  Compute:\n\n        n = p * q\n        n will be used as the modulus in the encryption and decryption algorithms\n\n3.  Compute:\n\n        phi = (p - 1) * (q - 1)\n        phi is known as Euler\u2019s Totient, and will be used to determine the public and private keys\n\n4.  Choose a value (called e) between 1 and phi that shares no factors with phi (phi and e are coprime to each other)\n5.  Calculate d, which is the modular multiplicative inverse of e.\n\ne is released publicly as the public encryption key, and d is kept private as the private decryption key.  \n\nTo encrypt plaintext with RSA, we use the following equation:\n\n    ciphertext = plaintext^e % n\n\nAnd for decryption:\n\n    plaintext = ciphertext^d % n\n\n#####Digital Signatures\nUsing RSA to generate the public-private keys can ensure that no one other than the desired recipient can read the message, but gives the recipient no information about the sender of the message.  To authenticate the sender, use digital signatures.  Since the public and private keys can reverse each other, all we have to do as the sender of the message to sign it is encrypt a message with our private key, and include that along with the message we\u2019re sending.  Then the recipient can unsign (by the same method as decryption) the signature by using our public key.  Then, if the unsigned signature and the message are the same, the recipient knows that we were in possession of the private key, and thus trust that we are who we say we are.\n"
 },
 {
  "repo": "theanam/otp-without-db",
  "language": "JavaScript",
  "readme_contents": "## OTP verification using Cryptography and without any Database\n\n#### Background\n\nThis module is derived from my blog post on the technique. You can read the [blog post here](https://blog.anam.co/otp-verification-without-using-a-database/) to understand the technique and motivation.\n\n#### Dependencies: \n\nThis module depends on the [Crypto](https://nodejs.org/api/crypto.html) built in module on nodeJS. This is the only dependency and should work in any system that has crypto support (Which is technocally majority of the systems at this moment)\n\nThis module also uses some modern JavaScript features like Template literals, Default arguments and modern object literal. This might be a problem if you are planning to use it with older versions of nodeJS\n\n#### Installation\n\nYou can use npm to install the package with the following code \n\n    npm install --save otp-without-db\n\n#### Usage\n\nYou need additional tool to create OTP, and send SMS. This module only takes care of the verification part. \n\nYou can take a look at the [otp-generator](https://www.npmjs.com/package/otp-generator) module to create OTP for your users.\n\n#### Verification process\n\nOTP verification is done in the following steps:\n\n1. A hash is created with the phone number/email address and then sent to the user. \n\n2. The user also receives the OTP via SMS, email or any other method. \n\n3. The user sends back the hash, OTP and phone/email used in the first request. \n\n4. The server verifies the information and returns true if they match.\n\nHere's a diagram that shows the whole process:\n\n![OTP Verification process](https://blog.anam.co/content/images/2019/10/Untitled-Diagram.jpg)\n\n#### Generating OTP Hash\n\nWe will use the [otp-generator](https://www.npmjs.com/package/otp-generator) tool mentioned previously to create OTP. You can use any other tool or technique.\n\n    const otpGen  = require(\"otp-generator\");\n    const otpTool = require(\"otp-without-db\"); \n    const key     = \"secretKey\"; // Use unique key and keep it secret\n    \n    let phone = \"88017009090\";  \n    let otp   = otpGen.generate(6, { upperCase: false, specialChars: false, alphabets: false });  \n\n    let hash = otpTool.createNewOTP(phone,otp,key);\n\nYou can then send this hash to the user as response. The generate method takes these following arguments (In particular order),\n\n    createNewOTP(phoneOrEmail,otp,key=\"\",expiresAfter=5,algorithm=\"sha256\")\n\n| Argument      | Required | default | Description    | \n| ------------- | -------- | ------- | -------------- |\n| phoneOrEmail  | true     | N/A     | Phone or email |\n| otp           | true     | N/A     | OTP            |\n| key           | false    | \"\"      | unique and secret key for HMAC see: [createHmac](https://nodejs.org/api/crypto.html#crypto_crypto_createhmac_algorithm_key_options)|\n| expiresAfter  | false    | 5       | Expirty in minutes|\n| algorithm     | false    | `sha256`| Algorithm used for hashing the data. Any supported algorithm from OpenSSL|\n\n\n#### Verifying OTP hash\n\nThe user should get the hash from the HTTP request and should get the real OTP via SMS or email.\n\nThen when the user sends back the information, they can be verified with the following code:\n\n    otpTool.verifyOTP(phone,otp,hash,key);\n\nThis method returns a **Boolean**. If the verification is successful, it will return true.\n\nThis method also takes the following arguments in particular order: \n\n    verifyOTP(phone,otp,hash,key=\"\",algorithm=\"sha256\")\n\n\n| Argument      | Required | default | Description    | \n| ------------- | -------- | ------- | -------------- |\n| phoneOrEmail  | true     | N/A     | Phone or email |\n| otp           | true     | N/A     | OTP            |\n| hash          | true     | N/A     | The hash that was returned from the user           |\n| key           | false     | \"\"      | unique and secret key for HMAC see: [createHmac](https://nodejs.org/api/crypto.html#crypto_crypto_createhmac_algorithm_key_options)|\n| algorithm     | false    | `sha256`| Algorithm used for hashing the data. Any supported algorithm from OpenSSL|\n\n\n****** \n\nThis product is created with \ud83d\udda4 by [Anam Ahmed](https://anam.co), Any improvements and PR is welcome.\n\n"
 },
 {
  "repo": "h2non/jshashes",
  "language": "JavaScript",
  "readme_contents": "# jsHashes [![Build Status](https://travis-ci.org/h2non/jshashes.svg)](https://travis-ci.org/h2non/jshashes) [![NPM version](https://img.shields.io/npm/v/jshashes.svg)](https://www.npmjs.com/package/jshashes) [![](https://data.jsdelivr.com/v1/package/npm/jshashes/badge)](https://www.jsdelivr.com/package/npm/jshashes)\n\n`jshashes` is lightweight library implementing the most extended [cryptographic hash function](http://en.wikipedia.org/wiki/Cryptographic_hash_function) algorithms in pure JavaScript (ES5 compliant).\n\nThe goal is to provide an dependency-free, fast and reliable solution for hash algorithms for both client-side and server-side JavaScript environments. \nThe code is fully compatible with the ECMAScript 5 specification and is used in production in browsers and [node.js](http://nodejs.org)/[io.js](http://iojs.org)\n\nIf you are looking for a low-level performance library for the server-side, note that node.js/io.js provides its own native module: [`crypto`](http://nodejs.org/api/crypto.html)\n\n## Supported hash algorithms\n\n* `MD5` (<http://www.ietf.org/rfc/rfc1321.txt>)\n* `SHA1` (<http://www.itl.nist.gov/fipspubs/fip180-1.htm>)\n* `SHA256` (<http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf>)\n* `SHA512` (<http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf>)\n* `HMAC` (<http://www.ietf.org/rfc/rfc2104.txt>)\n* `RIPEMD-160` (<http://homes.esat.kuleuven.be/~bosselae/ripemd160.html>)\n\n**Additional functionalities**\n\n* `Base64 encoding/decoding` (<http://tools.ietf.org/html/rfc3548>)\n* `CRC-32 calculation`\n* `UTF-8 encoding/decoding`\n\n## Environments\n\n- Browsers (ES3)\n- node.js/io.js (all versions)\n- Rhino\n- RingoJS\n\n## Usage\n\nEach algorithm has its respective own instantiable `object`. Here you can see an example of how to create a new instance for each one:\n\n```javascript\n// new MD5 instance\nvar MD5 = new Hashes.MD5\n// new SHA1 instance\nvar SHA1 = new Hashes.SHA1\n// new SHA256 instance\nvar SHA256 =  new Hashes.SHA256\n// new SHA512 instace\nvar SHA512 = new Hashes.SHA512\n// new RIPEMD-160 instace\nvar RMD160 = new Hashes.RMD160\n```\n\nAn example of how to generate an hexadecimal-based hash encoding for each algorithm:\n\n```javascript\n// sample string\nvar str = 'Sample text!'\n// output to console\nconsole.log('MD5: ' + MD5.hex(str))\nconsole.log('SHA1: ' + SHA1.hex(str))\nconsole.log('SHA256: ' + SHA256.hex(str))\nconsole.log('SHA512: ' + SHA512.hex(str))\nconsole.log('RIPEMD-160: ' + RMD160.hex(str))\n```\n\n### Browsers\n\nThis is a simple implementation for a client-side environment:\n\n```html\n<html>\n<head>\n<script type=\"text/javascript\" src=\"src/hashes.js\"></script>\n<script type=\"text/javascript\">\n// sample string\nvar str = 'This is a sample text!'\n// new MD5 instance and hexadecimal string encoding\nvar MD5 = new Hashes.MD5().hex(str)\n// output into DOM\ndocument.write('<p>MD5: <b>' + MD5 + '</b></p>')\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n### node.js / io.js\n\n```javascript\n// require the module\nvar Hashes = require('jshashes')\n// sample string\nvar str = 'This is a sample text!'\n// new SHA1 instance and base64 string encoding\nvar SHA1 = new Hashes.SHA1().b64(str)\n// output to console\nconsole.log('SHA1: ' + SHA1)\n```\n\n### Command-line interface\n\nYou can use the simple command-line interface to generate hashes.\n\n```bash\n$ hashes sha1-hex This is a sample string\n> b6a8501d8a70e74e1dc12a6082102622fdc719bb\n\n# or with quotes\n$ hashes sha1-hex \"This is a sample string\"\n> b6a8501d8a70e74e1dc12a6082102622fdc719bb\n```\n\nFor more information about the options supported, type:\n\n```bash\n$ hashes -h\n```\n\n### Installation\n\nVia [npm](https://npmjs.org)\n\n```\n$ npm install jshashes\n```\n\nVia [Bower](http://bower.io/):\n```\n$ bower install jshashes\n```\n\nVia [Component](https://github.com/component/component):\n```\n$ component install h2non/jshashes\n```\n\nOr loading the script directly:\n```\nhttp://cdn.rawgit.com/h2non/jsHashes/master/hashes.js\n```\n\n## Public methods\n\nEach algorithm `class` provides the following public methods:\n\n* `hex(string)` - Hexadecimal hash encoding from string.\n* `b64(string)` - Base64 hash encoding from string.\n* `any(string,encoding)` - Custom hash algorithm values encoding.\n* `hex_hmac(key,string)` - Hexadecimal hash with HMAC salt key.\n* `b64_hmac(key,string)` - Base64 hash with HMAC salt key.\n* `any_hmac(key,string,encoding)` - Custom hash values encoding with HMAC salt key support.\n* `vm_test()` - Simple self-test to see is working. Returns `this` Object.\n* `setUpperCase(boolean)` - Enable/disable uppercase hexadecimal returned string. Returns `this` Object.\n* `setPad(string)` - Defines a custom base64 pad string. Default is '=' according with the RFC standard. Returns `this` Object.\n* `setUTF8(boolean)` - Enable/disable UTF-8 character encoding. Returns `this` Object.\n\n## Hash encoding formats supported\n\n* Hexadecimal (most extended)\n* Base64\n* Custom hash values `any()` method\n\n## Benchmark\n\nNode.js 0.6.18 running on a VPS Intel I7 930 with 512 MB of RAM (see `server/benchmark.js`)\n\n```javascript\nSimple benchmark test generating 10000 hashes for each algorithm.\nString: \"A0gTtNtKh3RaduBfIo59ZdfTc5pTdOQrkxdZ5EeVOIZh1cXxqPyexKZBg6VlE1KzIz6pd6r1LLIpT5B8THRfcGvbJElwhWBi9ZAE\"\n\n* MD5\n** Done in: 205 milliseconds\n* SHA1\n** Done in: 277 milliseconds\n* SHA256\n** Done in: 525 milliseconds\n* SHA512\n** Done in: 593 milliseconds\n* RMD160\n** Done in: 383 milliseconds\n```\n\nSee `client/benchmark.html` for client-side.\n\n## Notes\n\n* Don't support checksum hash for files on the server-side, only strings-based inputs are supported.\n* It has not been planned to include support for more hash algorithms.\n* The goal is to provide the same JavaScript code in both server and client side, so it isn't planned to improve it in other ways.\n* Only Node.js server-side was tested, so with minimal changes, you can setup `jsHashes` in other server-side JS environment.\n\n## Changelog\n\n* `1.0.7`\n  - Merge #37: fix terminator statement token.\n* `1.0.6`\n  - Fix #34: options `pad` typo.\n* `1.0.4`\n  - Fix CLI script call error when use it from Bash\n  - Added CLI usage example\n* `1.0.3`\n  - Important bugfixes to UTF-8 encoding (broken in 1.0.2) and the RIPEMD-160 hash (broken in 1.0.1). (gh #6)\n  - New test suite for hashes, CRC32, and hmac; run with 'npm test' in node.\n  - Fixed global variable leaks. (gh #13)\n  - CRC32 will now always return positive values. (gh #11)\n  - Added package version property to the exposed Hashes Object\n  - Updated CLI script utility supporting all algorithms (see bin/hashes)\n  - Fixed UTF-8 encoding/decoding error (if input parameter is undefined or invalid)\n* `1.0.2`\n  - Performance improvements and minimal refactor (length property caching, literal notation)\n  - Available from Bower package manager\n* `1.0.1`\n  - Refactoring (hoisting, coercion, removed redundant functions, scoping, restructure...)\n  - Performance improves\n  - JSLint validation (except bitwise operators)\n  - Now the library can be used like a AMD CommonJS module\n  - Updated documentation\n  - New folders structure\n  - Added closure compiled and minimized library version\n  - Available from Jam package manager\n* `0.1.5b`\n  - Added index.js for easy call the module in Node.js\n  - Updated documentation\n* `0.1.4b`\n  - Now declaring objects using Literal Notation.\n  - Solved syntax errors on minimized version (jshashes.min.js)\n  - Added benchmark test and sample\n* `0.1.3b`\n  - Starting non-redundancy code refactorization\n  - Added `Helpers` Object with some global functions\n  - Added native support for Base64 provided as `class`\n  - Added CRC-32 calculation support\n  - Added URL encode/decode helpers functions\n* `0.1.2b`\n  - SHA1 error fixed.\n  - General code changes (renaming classes, private methods, new methods...).\n  - Changing library namespace to 'Hashes'.\n  - Starting code documentation.\n  - Added new examples of how to use.\n* `0.1.1b`\n  - Minimal library improvements.\n  - There has been added some samples, like how to use it and support for NPM package.\n* `0.1.0b`\n  - First release: the code is stable, but the library is still beta and must be improved and documented.\n\n## TODO\n\n* Performance benchmarking\n\n## Authors\n\n### Library author\n\n* [Tomas Aparicio](https://github.com/h2non/)\n\n### Original algorithm authors\n\n* [Paul Johnston](http://pajhome.org.uk/crypt/md5/)\n* Angel Marin (SHA256)\n* Jeremy Lin (RIPEMD-160)\n\n### Other contributors\n\n* [C. Scott Ananian](https://github.com/cscott)\n* Greg Holt\n* Andrew Kepert\n* Ydnar\n* Lostinet\n\n## License\n\njsHashes is released under `New BSD` license. See `LICENSE` file.\n\n## Issues\n\nFeel free to report any issue you experiment via Github <https://github.com/h2non/jsHashes/issues>.\n"
 },
 {
  "repo": "fmerg/pymerkle",
  "language": "Python",
  "readme_contents": "# pymerkle\n\n**Merkle-tree cryptography**\n\n[![Build Status](https://travis-ci.com/fmerg/pymerkle.svg?branch=master)](https://travis-ci.com/github/fmerg/pymerkle)\n[![codecov](https://codecov.io/gh/fmerg/pymerkle/branch/master/graph/badge.svg)](https://codecov.io/gh/fmerg/pymerkle)\n[![Docs Status](https://readthedocs.org/projects/pymerkle/badge/?version=latest)](http://pymerkle.readthedocs.org)\n[![PyPI version](https://badge.fury.io/py/pymerkle.svg)](https://pypi.org/project/pymerkle/)\n![Python >= 3.6](https://img.shields.io/badge/python-%3E%3D%203.6-blue.svg)\n\nDocumentation found at **[pymerkle.readthedocs.org](http://pymerkle.readthedocs.org/)**.\n\nThis library provides a Merkle-tree implementation in Python. It supports most\ncombinations of hash functions and encoding types with defense against\nsecond-preimage attack enabled.\n\n## Install\n\n```bash\npip3 install pymerkle\n```\n\n## Usage\n\n```python\nfrom pymerkle import MerkleTree\n\ntree = MerkleTree()\n\n# Populate tree with some records\nfor data in [b'foo', b'bar', b'baz', b'qux', b'quux']:\n    tree.encrypt(data)\n\n# Prove and verify encryption of `bar`\nchallenge = b'485904129bdda5d1b5fbc6bc4a82959ecfb9042db44dc08fe87e360b0a3f2501'\nproof = tree.generate_audit_proof(challenge)\nproof.verify()\n\n# Save current tree state\nstate = tree.get_root_hash()\n\n# Append further leaves\nfor data in [b'corge', b'grault', b'garlpy']:\n    tree.encrypt(data)\n\n# Prove and verify saved state\nproof = tree.generate_consistency_proof(challenge=state)\nproof.verify()\n```\n\n## Security\n\nThis is currently a prototype requiring security review, so use at your own risk\nfor the moment. However, some steps have been made to this direction:\n\n### Defense against second-preimage attack\n\nThis consists in the following standard technique:\n\n- Upon computing the hash of a leaf, prepend its data with `0x00`.\n- Upon computing the hash of an interior node, prepend the hashes of its\n  children with `0x01`.\n\nRefer to\n[`test_security.py`](https://github.com/fmerg/pymerkle/blob/master/tests/test_security.py)\nto see how to perform second-preimage attack against the present implementation.\n\n\n### Defense against CVE-2012-2459 DOS\n\nContrary to the [bitcoin](https://en.bitcoin.it/wiki/Protocol_documentation#Merkle_Trees)\nspecification for Merkle-trees, lonely leaves are not duplicated while the tree is growing.\nInstead, when appending new leaves, a bifurcation node is created at the rightmost branch.\nAs a consequence, the present implementation should be\ninvulnerable to the DOS attack reported as\n[CVE-2012-2459](https://nvd.nist.gov/vuln/detail/CVE-2012-2459) (see also\n[here](https://github.com/bitcoin/bitcoin/blob/bccb4d29a8080bf1ecda1fc235415a11d903a680/src/consensus/merkle.cpp)\nfor explanation).\n\n## Tree structure\n\nWhen appending a new leaf node, instead of promoting lonely leaves to the\nnext level or duplicating them, an internal bifurcation node is being created.\nThis is important for efficient recalculation of the root hash (since only the\nhash values at the tree's rightmost branch need be recalculated) and efficient\ngeneration of consistency paths (based on additive decompositions in decreasing\npowers of 2). The topology turns out to be identical\nwith that of a binary _Sakura tree_, depicted in Section 5.4 of\n[this](https://keccak.team/files/Sakura.pdf) paper.\n\n## Development\n\n```commandline\npip3 install -r requirements-dev.txt\n```\n\n### Tests\n\n```commandline\n./test.sh [pytest options]\n```\n\nto run tests against the limited set of encoding schemas UTF-8, UTF-16 and\nUTF-32. To run tests against all possible hash types, encoding schemas\nand security modes, run\n\n```commandline\n./test.sh --extended\n```\n\n### Benchmarks\n\n```commandline\n./benchmark.sh [pytest options]\n```\n\n## Documentation\n\n**[pymerkle.readthedocs.org](http://pymerkle.readthedocs.org/)**.\n\n### Build locally\n\nDocumentation is built with\n[`sphinx`](https://www.sphinx-doc.org/en/master/index.html):\n\n```commandline\npip3 install -r requirements-doc.txt\n```\n\nOnce installed, build docs with\n\n```commandline\n./build-docs.sh [--help]\n```\n\nand browse at\n\n```\ndocs/target/build/html/index.html\n```\n\nto view them.\n"
 },
 {
  "repo": "SafetyBits/CourseraCryptography",
  "language": "Java",
  "readme_contents": "CourseraCryptography\n====================\n\nRepo for Cryptography course on coursera (https://www.coursera.org/course/crypto)\n\nProgramming assignment for block ciphers (class week2.Prog2) are solved using JCE and Bouncycastle cryptoprovider.\nDecryption of AES cipher in CBC mode passed fine using only JCE methods and AES/CBC/PKCS5Padding transformation. However i'm failed to decrypt AES cipher in CTR mode using AES/CTR/NoPadding transformation. So my solution is to first encrypt IV  using raw AES/ECB/NoPadding transformation and then manually XORing the result with ciphertext.\n"
 },
 {
  "repo": "abstractj/kalium",
  "language": "Java",
  "readme_contents": "[![License](https://img.shields.io/:license-Apache2-blue.svg)](http://www.apache.org/licenses/LICENSE-2.0)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.abstractj.kalium/kalium/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.abstractj.kalium/kalium)\n[![Build Status](https://travis-ci.org/abstractj/kalium.png?branch=master)](https://travis-ci.org/abstractj/kalium)\n[![Build status](https://ci.appveyor.com/api/projects/status/github/abstractj/kalium?branch=master&svg=true)](https://ci.appveyor.com/project/abstractj/kalium/branch/master)\n[![Say Thanks](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/abstractj)\n\n# kalium - Java binding to the Networking and Cryptography (NaCl) library\n\nA Java binding to [Networking and Cryptography](http://nacl.cr.yp.to/) library by [Daniel J. Bernstein](http://cr.yp.to/djb.html). All the hard work of making a portable NaCl API version was done by [Frank Denis](https://github.com/jedisct1) on [libsodium](https://github.com/jedisct1/libsodium) and kalium was totally inspired by [Tony Arcieri's](https://github.com/tarcieri) work with [RbNaCl](https://github.com/cryptosphere/rbnacl).\n\n## Requirements\n\n* JDK 6 or [higher](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n* [Apache Maven](http://maven.apache.org/guides/getting-started/)\n\n## Installation\n\n### libsodium\n\nkalium is implemented using [jnr-ffi](https://github.com/jnr/jnr-ffi) to bind the shared libraries from [libsodium](https://github.com/jedisct1/libsodium). For a more detailed explanation, please refer to [RbNaCl's documentation](https://github.com/cryptosphere/rbnacl/blob/master/README.md).\n\n#### OSX\nOS X users can get libsodium via [homebrew](http://mxcl.github.com/homebrew/) with:\n\n    brew install libsodium\n\n#### Windows\nWindows users will need to provide the pre-build binaries from `libsodium`.\n\n- Download `libsodium` from https://download.libsodium.org/libsodium/releases/\n- Choose the version of `libsodium` you wish to use\n    - The archives follow the following pattern: libsodium-{version}-msvc.zip\n- From the archive find the artifacts compiled for your architecture and then the MSVC tool set of your choice\n    - For example: `v141 // these were compiled against the MSVC v141 (i.e. Visual Studio 2017)`\n- Extract from the archive the `dll` library files into **one** of the following locations:\n    - into the `lib` at the root of the working directory directory of your project.\n    - into a location that is included in your `PATH` environment variable.\n\nFor example, on Windows 10 machine with a x64 architecture:\n```\n{archive root}\n\u2514\u2500\u2500\u2500x64\n    ...\n    \u2514\u2500\u2500\u2500Release\n        ...\n        \u2514\u2500\u2500\u2500v141\n            ...\n            \u2514\u2500\u2500\u2500dynamic <- copy the library files from this locaiton.\n```\n\n### kalium installation\n\nAdd as a [Maven dependency](http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.abstractj.kalium%22%20AND%20a%3A%22kalium%22) to your project.\n\n### FAQ\n\n#### Is Android supported?\n  No.\n\n#### Would be nice to have some documentation. Do you have some?\n\n  Look at the libsodium docs, they are self explanatory. Or, contribute with docs.\n\n#### I'm experiencing some issues on Windows. Do you have any idea?\n\n  I'm sorry but I'm completely clueless about Windows environment, but if you have any suggestions or PR changes. They will be more than welcome.\n\n### Notes\n\nKalium is the effort of a **really** small group of people, feedback, bug reports and patches are always welcome.\n\n"
 },
 {
  "repo": "akalin/cryptopals-python3",
  "language": "Python",
  "readme_contents": "This are my solutions to the Matasano crypto challenges\n(http://cryptopals.com) in Python 3.\n\nFor most challenges it suffices to run:\n\npython3 challengeXX.py\n\nbut for some challenges, you might need to do:\n\npython3 challengeXX_server.py\n\nor similar first."
 },
 {
  "repo": "EnigmaBridge/javacard-curated-list",
  "language": null,
  "readme_contents": "# Curated list of JavaCard applications\nThe goal is to provide curated catalog of all open-source JavaCard applets and applications relevant for JavaCard development. The list is compiled by complete search for all GitHub, SourceForge and GitLab repositories with *'javacard.framework'* keyword.\n\nYou are encouraged to contribute - please create a pull request and insert entry into suitable section lexicographically. Thank you!\n\nThe projects collected in this list were analyzed and published (June 2017) in [Analysis of JavaCard open-source ecosystem](https://medium.com/enigma-shards/analysis-of-javacard-open-source-ecosystem-9be0bfd66398)\n\n### Backup of listed repositories\nAs repositores are sometimes moved or removed, the fork of each repository under the virtual organization ['javacard-curated-list'](https://github.com/javacard-FOSS-applets) is created. Try to find a repository there if the link doesn't work.\n\n### Format and notation\n> **Project name _[activity]_** <br> Short description, often taken from a project readme.md\nIf is the project located on GitHub as primary project (not only source code in some subfolder), last commit date, number of contributors and number of stars received is retrieved directly from GitHub. Otherwise, source like SourceForge or BitBucket is signalized with manual last commit date entry.\n\n## Contents\n\n1. [Applets (standalone applications)](#applets-standalone-applications)\n    - [Electronic passports and citizen ID](#electronic-passports-and-citizen-id)\n    - [Authentication and access control](#authentication-and-access-control)\n    - [Payments and loyalty](#payments-and-loyalty)\n    - [Key and password managers](#key-and-password-managers)\n    - [Digital signing, OpenPGP and mail security](#digital-signing-openpgp-and-mail-security)\n    - [e-Health](e-health)\n    - [NDEF tags](#ndef-tags)\n    - [CryptoCurrency wallets](#cryptocurrency-wallets)\n    - [Emulation of some proprietary cards](#emulation-of-some-proprietary-cards)\n    - [Unsorted applications](#unsorted-applications)\n2. [Library code (code which is expected to be used as part of other code)](#library-code-code-which-is-expected-to-be-used-as-part-of-other-code)\n3. [Developer tools](#developer-tools)\n    - [Applet build, upload and management](#applet-build-upload-and-management)\n    - [Card capabilities testing (algorithms support, performance, security issues)](#card-capabilities-testing-algorithms-support-performance-security-issues)\n    - [Formal verification and code transformation tools](#formal-verification-and-code-transformation-tools)\n4. [JavaCard simulators and emulators](#javacard-simulators-and-emulators)\n5. [Learning (various school projects, simple hello world applets, etc)](#learning-various-school-projects-simple-hello-world-applets-etc)\n6. [Unsorted](#unsorted)\n   - [(needs further inspection)](#needs-further-inspection)\n   - [Methodology](#methodology)\n\n_________________________________________________\n\n## Applets (standalone applications)\n### Electronic passports and citizen ID\n \n- [Belgian-e-id applet](https://github.com/amoerie/belgian-e-id)  ![stars](https://img.shields.io/github/stars/amoerie/belgian-e-id.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/amoerie/belgian-e-id.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/amoerie/belgian-e-id.svg) \n  <br> \nBelgian e-id applet \n\n- [Electronic Driving License](https://github.com/martinpaljak/AppletPlayground/tree/master/src/org/isodl/applet) (**GitHub**) _[last commit 2015]_  <br> \nA reference implementation of the ISO18013 standards. Based on the passport applet code developed by the JMRTD team. The project implements the host API for reading out ISO compliant electronic driving licenses and a Java Card applet that implements the standard on a smart card. \n\n- [EstEID compatible JavaCard applets](https://github.com/martinpaljak/esteid-applets)    ![stars](https://img.shields.io/github/stars/martinpaljak/esteid-applets.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/martinpaljak/esteid-applets.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/martinpaljak/esteid-applets.svg)   <br> \nVarious JavaCard applets compatible to EstEID chip protocol: FakeEstEID, MyEstEID\n\n- [FedICT Quick-Key Toolset](https://github.com/Twuk/eid-quick-key-toolset/tree/master/eid-quick-key-toolset) (**GitHub**) _[last commit 2011]_\n  <br> \nEidCard project\n\n- [IdentityCard applet](https://github.com/JavaCardSpot-dev/IdentityCard-applet/tree/master/workspace/JavaCard) (**GitHub**) _[last commit 2017]_\n  <br> \nVrije University Brussels applet (be.msec.smartcard.IdentityCard.java) with authentication, identity metadata storage and retrieval and time update functionality.\n\n- [JMRTD: Machine Readable Travel Documents](https://sourceforge.net/projects/jmrtd/) (**SourceForge**) _[last commit 2017]_ <br>\nFree implementation of the MRTD (Machine Readable Travel Documents) standards as set by ICAO used in the ePassport. Consists of an API for card terminal software and a Java Card applet.\n\n- [JMRTD applet without EAC support](https://github.com/walterschell/jmrtd-noeac)    ![stars](https://img.shields.io/github/stars/walterschell/jmrtd-noeac.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/walterschell/jmrtd-noeac.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/walterschell/jmrtd-noeac.svg)   <br> \nFork of JMRTD electronic passport applet without EAC support. The target device for this project is G+D SmartCafe Expert 144k Dual.\n\n- [SIC eID card](https://github.com/nversbra/SIC)    ![stars](https://img.shields.io/github/stars/nversbra/SIC.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/nversbra/SIC.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/nversbra/SIC.svg) \n  <br> \nA privacy-friendly alternative for the Belgian eID card. The project aims to improve security of Belgian ID holders by limiting the current extensive exposure of their profiles. To do so, we build an alternative ID card which limits service providers to strickly necessary ID holder profile information. \n\n\n### Authentication and access control\n\n- [Biometric Authentication](https://github.com/albertocarp/BiometricAuthentification)    ![stars](https://img.shields.io/github/stars/albertocarp/BiometricAuthentification.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/albertocarp/BiometricAuthentification.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/albertocarp/BiometricAuthentification.svg) \n  <br>\nFuzzy extractor to authenticate with biometric data\n\n- [CoolKey Applet](https://github.com/NabilNoaman/CoolkeyApplet)    ![stars](https://img.shields.io/github/stars/NabilNoaman/CoolkeyApplet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/NabilNoaman/CoolkeyApplet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/NabilNoaman/CoolkeyApplet.svg)  <br>\nCoolKey Applet with the idea of making it a fresh JavaCard 2.2.2 applet meant to be revival of CardEdge Muscle card applet.\n\n- [FIDO CCU2F Applet](https://github.com/tsenger/CCU2F)    ![stars](https://img.shields.io/github/stars/tsenger/CCU2F.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/tsenger/CCU2F.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/tsenger/CCU2F.svg) \n  <br> \nThis CCU2F JavaCard Applet is based on the Ledger U2F Applet. I imported this applet to Eclipse with installed JCOP Tools and modified the AID of this applet to the standardized AID for FIDO NFC token ( 0xA0000006472F0001). I also provided some example data ([Attestation Certificate and Key](u2f-javacard/U2F Example Attestation Certificate and Key Bytes.txt)) to bring this applet to run. This Applet was succesfully tested on JCOP v2.4.2 R3 cards with KeyAgreementX.ALG_EC_SVDP_DH_PLAIN_XY from NXPs JCOP library for EC Point Multiplication. \n\n- [FIDO de.fac2 Applet](https://github.com/tsenger/de.fac2)    ![stars](https://img.shields.io/github/stars/tsenger/de.fac2.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/tsenger/de.fac2.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/tsenger/de.fac2.svg) \n  <br>\nde.fac2 is a Javacard applet which implements a Fido U2F token. It was designed and implemented based on the Common Criteria Protection Profile BSI-CC-PP-0096-V3-2018 \"FIDO Universal Second Factor (U2F) Authenticator Version 3\".\n\n- [Generic Identity Device Specification Applet](https://github.com/vletoux/GidsApplet)  ![stars](https://img.shields.io/github/stars/vletoux/GidsApplet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/vletoux/GidsApplet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/vletoux/GidsApplet.svg)  <br>\nGeneric Identity Device Specification (GIDS) smart card is the only PKI smart card whose driver is integrated on each Windows since Windows 7 SP1 and which can be used read and write. No Windows driver installation is required. Based on ISOApplet PKI\n\n- [Generic Identity Device Applet (JavaCardOS)](https://github.com/JavaCardOS/GidsApp)  ![stars](https://img.shields.io/github/stars/JavaCardOS/GidsApp.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/JavaCardOS/GidsApp.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/JavaCardOS/GidsApp.svg)  <br>\nGidsApp is a javacard applet which was developed according the specification GIDS 2.0 (Generic Identity Device Specification).This project is based on GidsApplet (above). It provides a generic identity command set for interaction with smart cards that are used for identity applications.\n\n- [HOTP authenticator via NDEF tag](https://github.com/petrs/hotp_via_ndef)    ![stars](https://img.shields.io/github/stars/petrs/hotp_via_ndef.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/petrs/hotp_via_ndef.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/petrs/hotp_via_ndef.svg)  <br>\nJavaCard HMAC-based One Time Password generator which delivers new code via URL tag of NDEF every time the card is put close to NFC-enabled phone. As the Android (and soon also iOS) handles the NDEF tags natively, no additional software is required (after initial card personalization with OTP secret key).\n\n- [ISOApplet PKI](https://github.com/philipWendland/IsoApplet)    ![stars](https://img.shields.io/github/stars/philipWendland/IsoApplet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/philipWendland/IsoApplet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/philipWendland/IsoApplet.svg)   <br>\nA Java Card PKI Applet aiming to be ISO 7816 compliant. The Applet is capable of saving a PKCS#15 file structure and performing PKI related operations using the private key, such as signing or decrypting. Private keys can be generated directly on the smartcard or imported from the host computer. The import of private keys is disabled in the default security configuration. \n\n- [Android Identity Credential HAL JCICStoreApplet](https://github.com/mdwivedi/JavacardIdentity)    ![stars](https://img.shields.io/github/stars/mdwivedi/JavacardIdentity.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/mdwivedi/JavacardIdentity.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/mdwivedi/JavacardIdentity.svg)   <br>\nJavacard Implementation for the Android Identity Credential HAL\n\n- [Ledger U2F Applet](https://github.com/LedgerHQ/ledger-u2f-javacard)    ![stars](https://img.shields.io/github/stars/LedgerHQ/ledger-u2f-javacard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/LedgerHQ/ledger-u2f-javacard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/LedgerHQ/ledger-u2f-javacard.svg) \n  <br> \nThis applet is a Java Card implementation of the FIDO Alliance U2F standard. It uses no proprietary vendor API and is freely available on Ledger Unplugged and for a small fee on other Fidesmo devices through Fidesmo store.\n\n- [Ledger U2F Applet Fork](https://github.com/darconeous/u2f-javacard/)    ![stars](https://img.shields.io/github/stars/darconeous/ledger-u2f-javacard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/darconeous/ledger-u2f-javacard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/darconeous/ledger-u2f-javacard.svg) \n  <br> \nThis applet is a Fork of Ledger U2F repository with some changes. At first, in the releases a compiled source is available along with a script for GpPro tool to both instal and personalise the applet. Secondly, a proprietary APDU was changed from `F0` CLA to `80`. All personalisation APDU on other ledger forks threw `6881`, but the `80` CLA personalisation succeeded. The repository also claims to support iOS.\n\n- [MuscleApplet](https://github.com/martinpaljak/MuscleApplet)    ![stars](https://img.shields.io/github/stars/martinpaljak/MuscleApplet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/martinpaljak/MuscleApplet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/martinpaljak/MuscleApplet.svg)  <br>\nSignificant, but outdated applet used for OpenSC. Superseeded by PKCS#15 and PIV standards.\n\n- [OneCard](https://github.com/SharkyHarky/OneCard)    ![stars](https://img.shields.io/github/stars/SharkyHarky/OneCard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/SharkyHarky/OneCard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/SharkyHarky/OneCard.svg) \n  <br>\nradiius.com Radiius applet, applet seems to be just starting to implement required functionality as per specification \n\n- [OpenFIPS201 PIV applet](https://github.com/makinako/OpenFIPS201)    ![stars](https://img.shields.io/github/stars/makinako/OpenFIPS201.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/makinako/OpenFIPS201.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/makinako/OpenFIPS201.svg)  <br>\nPersonal Identity Verification (PIV) applet. Commissioned and funded by the Australian Department of Defence\n\n- [ORWL KeyFob applets](https://github.com/O-R-W-L/KeyFob-applet)    ![stars](https://img.shields.io/github/stars/O-R-W-L/KeyFob-applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/O-R-W-L/KeyFob-applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/O-R-W-L/KeyFob-applet.svg) \n   <br>\nContains applets for KeyFOB NFC Secure Element for performing association, authentication and identification. Relates to ORWL secure computer.\n\n- [OTP client and server applets](https://github.com/gelvaos/otp)    ![stars](https://img.shields.io/github/stars/gelvaos/otp.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/gelvaos/otp.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/gelvaos/otp.svg) \n  <br>\nThis is proof-of-concept implementation of One Time password JavaCard STK applet and authentication server. Load JavaCard applet to SIM card and use STK menu.\n\n- [PIV applet](https://github.com/arekinath/PivApplet)    ![stars](https://img.shields.io/github/stars/arekinath/PivApplet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/arekinath/PivApplet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/arekinath/PivApplet.svg) <br>\nPersonal Identity Verification (PIV) applet (NIST SP 800-73-4). Target is JavaCard 2.2.2, with 2-3k of transient memory.\n\n- [PIV CryptonitApplet](https://github.com/mbrossard/cryptonit-applet)    ![stars](https://img.shields.io/github/stars/mbrossard/cryptonit-applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/mbrossard/cryptonit-applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/mbrossard/cryptonit-applet.svg) \n  <br>\nPersonal Identity Verification (PIV) applet\n\n- [PKCS#15 applet](https://github.com/lupascualex/p15)   _[REMOVED, last commit 2015]_ <br>\nImplementation of card according to RSA PKCS#15 specification. (seems like extensive implementation, but fails to convert under ant-javacard so far)  \n\n- [PKI applet](https://github.com/rakeb/PKIApplet) _[REMOVED, last commit 2016]_ <br>\n(extensive PKI applet, requires JavaCard 3.0.5) \n\n- [SSH support applet](https://github.com/scs/uclinux/blob/eb0cf9617bd22b69ad625575a95cf4fa2c140d55/user/ssh/scard/Ssh.java) (**GitHub**) _[last commit 2007]_  <br>\nOld, but widely copied applet performing RSA decrypt on card and used by SSH client \n\n- [Trusted Identity Module](https://github.com/Orange-OpenSource/TIM)    ![stars](https://img.shields.io/github/stars/Orange-OpenSource/TIM.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Orange-OpenSource/TIM.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Orange-OpenSource/TIM.svg) \n  <br>\nA local smartphone module acting as an OpenID Connect Server proxy and delivers trusted tokens to installed native applications. The TIM improves the user experience with single sign on, security and privacy enhancement. The Trusted Identity Module project is a set of four projects: an Android service (tim_service), a JAVA Card Service (TimCardlet), a modified OpenID Connect Server (phpOpTim) and a basic Android TIM-Client app enabling to test the TIM services (HelloTim). The OIDC-TIM server is based on an open source implementation of OpenID Connect in PHP by Nomura Research Institute, Ltd. Seems to be extensive and well documented. \n\n- [U2FToken](https://github.com/fightyz/U2FToken)    ![stars](https://img.shields.io/github/stars/fightyz/U2FToken.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/fightyz/U2FToken.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/fightyz/U2FToken.svg) \n  <br>\nAn U2F Token implementation based on Ledger U2F Applet which cannot pass the NFC self-conformance test in the phase: \"U2F_REGISTER, Short APDU, Change BlockSize\", as it doesn't handle the situation which Le(BlockSize) is not 256 bytes.)\n\n- [YkOtpApplet - OTP applet](https://github.com/arekinath/YkOtpApplet)    ![stars](https://img.shields.io/github/stars/arekinath/YkOtpApplet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/arekinath/YkOtpApplet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/arekinath/YkOtpApplet.svg) \n  <br>\nJavacard applet emulating the Yubikey challenge-response interface\n\n- [YubiKey NEO App: OATH](https://github.com/Yubico/ykneo-oath)    ![stars](https://img.shields.io/github/stars/Yubico/ykneo-oath.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Yubico/ykneo-oath.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Yubico/ykneo-oath.svg) \n  <br>\nThis project implement the HOTP/TOTP card functionality used on the YubiKey NEO device that is sold by Yubico. Its primary use is to use the YubiKey NEO to generate OATH HOTP/TOTP one-time-passwords. GPLv3+\n\n- [Yubikey Neo One Time Pad](https://github.com/cayennegraphics/Yubisec)    ![stars](https://img.shields.io/github/stars/cayennegraphics/Yubisec.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/cayennegraphics/Yubisec.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/cayennegraphics/Yubisec.svg) \n  <br>\nThis project has been submitted to the YubiKing 2015 Hackathon. Yubisec is an implementation of a One Time Pad for secure communication between two Android phones using keys stored and generated on YubiKey Neo tokens.\n\n\n### Payments and loyalty\n\n- [AppSecure](https://github.com/deepakprabhakara/appsecure)    ![stars](https://img.shields.io/github/stars/deepakprabhakara/appsecure.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/deepakprabhakara/appsecure.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/deepakprabhakara/appsecure.svg) \n  <br>\nAppSecure uses Gemalto's eGate smart card framework to enforce pay as you go services for Win32 applications. This entry made it to the pre-final round of Gemalto's eGate Open Contest in 2004    \n\n- [E-Purse](https://github.com/tomirio619/hw-epurse)    ![stars](https://img.shields.io/github/stars/tomirio619/hw-epurse.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/tomirio619/hw-epurse.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/tomirio619/hw-epurse.svg) \n  <br>\njust started, unifinished (04/2017)\n\n- [EMV card simulator](https://github.com/mrautio/emv-card-simulator)  ![stars](https://img.shields.io/github/stars/mrautio/emv-card-simulator.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/mrautio/emv-card-simulator.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/mrautio/emv-card-simulator.svg)  <br>\nJavaCard implementation of an EMV card for payment terminal functional and security testing.\n\n- [EMV-TOOLS](https://github.com/gabessolo/EMV-TOOLS)    ![stars](https://img.shields.io/github/stars/gabessolo/EMV-TOOLS.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/gabessolo/EMV-TOOLS.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/gabessolo/EMV-TOOLS.svg) \n  <br>\nCollection of source code for many EMV-related projects: SimpleEMVApplet, java-card-openEMV, card-spy, emvdemoBook, emv-bertlv...\n\n- [EMVCAP](https://github.com/zoobab/EMVCAP)    ![stars](https://img.shields.io/github/stars/zoobab/EMVCAP.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/zoobab/EMVCAP.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/zoobab/EMVCAP.svg) \n  <br>\nThis tool emulates an EMV-CAP device, to illustrate the article \"Banque en ligne : a la decouverte d'EMV-CAP\" published in MISC, issue #56.\n\n- [Gemplus Purse applet](https://github.com/ncatanoc/chasetool)    ![stars](https://img.shields.io/github/stars/ncatanoc/chasetool.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/ncatanoc/chasetool.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/ncatanoc/chasetool.svg) \n  <br>\nStatic analysis of java code applied to example of very old Gemplus Purse applet \n\n- [JavaCard Wallet](https://github.com/RimGazzeh/JavaCard_Wallet)    ![stars](https://img.shields.io/github/stars/RimGazzeh/JavaCard_Wallet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/RimGazzeh/JavaCard_Wallet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/RimGazzeh/JavaCard_Wallet.svg) \n  <br>\nClient/Server application of an electronic wallet (Pin, Storage, control, payment..) \n\n- [Loyalty Card Applet](https://github.com/Anthirian/Loyalty-Card)    ![stars](https://img.shields.io/github/stars/Anthirian/Loyalty-Card.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Anthirian/Loyalty-Card.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Anthirian/Loyalty-Card.svg) \n  <br>\nLoyalty Card System based on a Java Card featuring a smart card and a terminal. This is a system that allows customers to get credits by shopping in the same store repeatedly. Customers can spend credits to buy products in the store.\n\n- [Mobile banking applet via STK](https://github.com/ubs121/mbank_STK)    ![stars](https://img.shields.io/github/stars/ubs121/mbank_STK.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/ubs121/mbank_STK.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/ubs121/mbank_STK.svg) \n  <br>\nMobile banking solution using SIM Toolkit\n\n- [OpenEMV](https://github.com/JavaCardOS/OpenEMV)  ![stars](https://img.shields.io/github/stars/JavaCardOS/OpenEMV.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/JavaCardOS/OpenEMV.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/JavaCardOS/OpenEMV.svg)  <br>\nThe OpenEMV is a Java Card implementation of the EMV standard. This applet is a very basic EMV applet supporting only SDA and plaintext offline PIN.It does not offer personalisation support - everything is hard-coded.\n\n- [EMV Applet for Javacard 2.2.1](https://github.com/tiosolid/emv_applet)  ![stars](https://img.shields.io/github/stars/tiosolid/emv_applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/tiosolid/emv_applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/tiosolid/emv_applet.svg)  <br>\nThis is a fully working EMV applet for javacard 2.2.1. It does not offer personalisation support - everything is hard-coded. Contains some custom feature commands. Unfortunately, no personalization commands are implemented (use [ArrayEdit](https://github.com/tiosolid/array_edit) or modify code manually). This applet was stitched using source code from all over the internet and a lot of dev's code. The Crypto.java file is of unknown origin, was entirely made by another person.\n\n- [PayPass applet](https://github.com/jiankeliu5/CardApplet-PayPass)    ![stars](https://img.shields.io/github/stars/jiankeliu5/CardApplet-PayPass.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/jiankeliu5/CardApplet-PayPass.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/jiankeliu5/CardApplet-PayPass.svg) \n  <br>\nJavacard Applet for functioning paypass credential. The javacard code included will answer to any reader that requests MasterCard PayPass contactless cards.\n\n- [PayPass, VisaMSD, MMPP applets](https://github.com/SimplyTapp/CardExamples)    ![stars](https://img.shields.io/github/stars/SimplyTapp/CardExamples.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/SimplyTapp/CardExamples.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/SimplyTapp/CardExamples.svg) \n  <br>\nThis repository contains multiple card applet/card agent examples for using on simplytapp, GPL to v1.2.1.\n\n- [PBOC3Applet](https://github.com/jiankeliu5/PBOC3Applet)    ![stars](https://img.shields.io/github/stars/jiankeliu5/PBOC3Applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/jiankeliu5/PBOC3Applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/jiankeliu5/PBOC3Applet.svg) \n  <br>\npayment applet\n\n- [Simple Wallet](https://github.com/fitpay/javacard-simple-wallet)    ![stars](https://img.shields.io/github/stars/fitpay/javacard-simple-wallet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/fitpay/javacard-simple-wallet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/fitpay/javacard-simple-wallet.svg) \n  <br>\nThis is a simple wallet simply maintains a running account balance allowing you to credit, debit, or review the current balance of the wallet. This is simply for pure demonstration on various wearable technologies where a javacard secure element is available.\n\n### Key and password managers\n- [CryptSetup JavaCard Key Manager](https://github.com/WOnder93/cryptsetup-javacard)    ![stars](https://img.shields.io/github/stars/WOnder93/cryptsetup-javacard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/WOnder93/cryptsetup-javacard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/WOnder93/cryptsetup-javacard.svg) \n  <br>\nA JavaCard key manager for Cryptsetup. School project, but well documented and extensive \n\n- [HydraMultiKeySystem applet](https://github.com/thotheolh/HydraMultiKeySystem)    ![stars](https://img.shields.io/github/stars/thotheolh/HydraMultiKeySystem.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/thotheolh/HydraMultiKeySystem.svg)  ![numcontributors](https://img.shields.io/github/contributors-anon/thotheolh/HydraMultiKeySystem.svg)<br>\nA more efficient version of Microsoft's Double Key Encryption System. \n\n- [Java Card OpenPGP Card](https://github.com/jderuiter/javacard-openpgpcard)    ![stars](https://img.shields.io/github/stars/jderuiter/javacard-openpgpcard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/jderuiter/javacard-openpgpcard.svg)  ![numcontributors](https://img.shields.io/github/contributors-anon/jderuiter/javacard-openpgpcard.svg) \n  <br>\nThis is a Java Card implementation of the OpenPGP smart card specifications.\n\n- [JavaCardKeymaster](https://github.com/divegeek/JavaCardKeymaster)    ![stars](https://img.shields.io/github/stars/divegeek/JavaCardKeymaster.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/divegeek/JavaCardKeymaster.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/divegeek/JavaCardKeymaster.svg) \n  <br>\nJavaCard implementation of the Android Keymaster 4.1 HAL (most of the specification is in the Android Keymaster 4.0 HAL), intended for creation of StrongBox Keymaster instances to support the Android Hardware-backed Keystore.\n\n- [JCPasswordManager](https://github.com/bayotop/JCPasswordManager)    ![stars](https://img.shields.io/github/stars/bayotop/JCPasswordManager.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/bayotop/JCPasswordManager.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/bayotop/JCPasswordManager.svg)   <br>\nJavaCard Password Manager is a java applet used to create and securely store a strong password used with the steganography app created by. School project, but well documented.\n\n- [KeepassNFCApplet](https://github.com/JavaCardOS/KeepassNFCApplet)    ![stars](https://img.shields.io/github/stars/JavaCardOS/KeepassNFCApplet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/JavaCardOS/KeepassNFCApplet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/JavaCardOS/KeepassNFCApplet.svg) \n  <br>\nKeepassNFC is a applet in javacard platform that can protect the secret key of KeePass database.\n\n- [Password manager](https://github.com/cranixx/Passmg)    ![stars](https://img.shields.io/github/stars/cranixx/Passmg.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/cranixx/Passmg.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/cranixx/Passmg.svg) \n  <br>\nPassword manager for javacards. Tested on J3A081 card. \n\n- [SIM Password Manager](https://github.com/nelenkov/sim-password-manager)    ![stars](https://img.shields.io/github/stars/nelenkov/sim-password-manager.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/nelenkov/sim-password-manager.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/nelenkov/sim-password-manager.svg) \n  <br>\nAndroid password manager app that implements password encryption inside a secure element (SE). Can only run on a device that supports the Open Mobile API (aka SmartCardService). Requires associated Java Card applet to be loaded in the SE (SIM card or embedded SE) in advance.\n\n- [SIM password store](https://github.com/gtomek/sim-password-store)    ![stars](https://img.shields.io/github/stars/gtomek/sim-password-store.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/gtomek/sim-password-store.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/gtomek/sim-password-store.svg) \n  <br>\nSIM toolkit application allowing storage and retrieval of the logins and passwords by SMS in a secure way. It demonstates how to develop a SIM toolkit application that can securely store and manage information on the SIM and communcate with an external world via SMS.\n\n- [SIM password wallet](https://github.com/bertrandmartel/sim-password-wallet)    ![stars](https://img.shields.io/github/stars/bertrandmartel/sim-password-wallet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/bertrandmartel/sim-password-wallet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/bertrandmartel/sim-password-wallet.svg) \n  <br>\nAndroid application interacting with a JavaCard applet installed on SIM card. \n\n- [Smartcard crypto applet](https://github.com/nfd/smartcard_crypto_applet)    ![stars](https://img.shields.io/github/stars/nfd/smartcard_crypto_applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/nfd/smartcard_crypto_applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/nfd/smartcard_crypto_applet.svg) \n  <br>\nThis repository constains the same source code ( -Februrary 2020- ) as the repository listed above ([KeepassNFCApplet](https://github.com/JavaCardOS/KeepassNFCApplet))\n\n- [TrueCrypt password storage applet](https://github.com/Mercixor/smartcard-truecrypt)    ![stars](https://img.shields.io/github/stars/Mercixor/smartcard-truecrypt.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Mercixor/smartcard-truecrypt.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Mercixor/smartcard-truecrypt.svg) \n  <br>\nUsing TrueCrypt with a JavaCard. The app stores the user container passwords on a SmartCard and automatically loads the passwords from it to the choosen Containers. The user just remember a four digit PIN to access the SmartCard. Additionally I've implented an password-share methode. The user is able to share passwords with previous stored PublicKeys (RSA 2048 Bit). The private key is generated during the of the card and don't leave this.\n\n\n### Digital signing, OpenPGP and mail security\n\n- [ANSSI-FR SmartPGP applet](https://github.com/ANSSI-FR/SmartPGP)    ![stars](https://img.shields.io/github/stars/ANSSI-FR/SmartPGP.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/ANSSI-FR/SmartPGP.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/ANSSI-FR/SmartPGP.svg) \n  <br>\nSmartPGP is a free and open source implementation of the OpenPGP card 3.x specification in JavaCard. The main improvement introduced in OpenPGP card 3.x specification from previous version is the support of elliptic curve cryptography with several existing curves (NIST P-256, NIST P-384, NIST P-521, brainpool p256r1, brainpool p384r1 and brainpool p512r1). The SmartPGP Card applet is typically used through GnuPG.\n\n- [FluffyPGP applet](https://github.com/JavaCardOS/FluffyPGP-Applet)    ![stars](https://img.shields.io/github/stars/JavaCardOS/FluffyPGP-Applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/JavaCardOS/FluffyPGP-Applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/JavaCardOS/FluffyPGP-Applet.svg)   <br>\nThe FluffyPGP Applet implements the OpenGPG Card v 2.0.1 specification without using secure channels or Global Platform for portability. GPL3\n\n- [JCOpenPGP](https://sourceforge.net/projects/jcopenpgp) (**SourceForge**) _[last commit 2016]_ <br>\nAim of this project is to create JavaCard applet implementing Functional Specification of the OpenPGP application on ISO Smart Card Operating Systems.\n\n- [Secure multi-party signatures Myst](https://github.com/OpenCryptoProject/Myst)    ![stars](https://img.shields.io/github/stars/OpenCryptoProject/Myst.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/OpenCryptoProject/Myst.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/OpenCryptoProject/Myst.svg)  <br>\nSecure multiparty Schnorr-based EC signatures implemented without proprietary ECPoint API. \n\n- [SigAnima](https://github.com/tsenger/SigAnima)    ![stars](https://img.shields.io/github/stars/tsenger/SigAnima.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/tsenger/SigAnima.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/tsenger/SigAnima.svg)   <br>\nSigAnima is an JavaCard ECDSA signing applet. This applet is based on the [javacardsign applet]((http://sourceforge.net/projects/javacardsign/)) from Wojciech Mostowski . The applet supports the following standardized EC domain parameters: secp224r1, BrainpoolP224r1, secp256r1, BrainpoolP256r1, BrainpoolP320r1. \n\n- [Virtual KeyCard applet](https://github.com/eriknellessen/Virtual-Keycard)    ![stars](https://img.shields.io/github/stars/eriknellessen/Virtual-Keycard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/eriknellessen/Virtual-Keycard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/eriknellessen/Virtual-Keycard.svg)   <br>\nThis software system allows you to decrypt and sign your e-mails with your smartphone instead of using a contactless smartcard. The smartphone communicates with your PC via NFC (as a contactless smartcard would). bachelor's thesis. Warning: This is just proof-of-concept code and should NOT be used in production environments.\n  <br>\nThe repository contains only CardEdge applet but it is not the applet development repository. Main purpose of this repo is to run card simulator inside a smartphone; the applet is just used here.  \n\n- [Yubico OpenPGP applet](https://github.com/Yubico/ykneo-openpgp)    ![stars](https://img.shields.io/github/stars/Yubico/ykneo-openpgp.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Yubico/ykneo-openpgp.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Yubico/ykneo-openpgp.svg) \n  <br>\nThis project implement the OpenPGP card functionality used on the YubiKey NEO device. This project is based on the Java Card OpenPGP Card project made by Joeri de Ruiter. The OpenPGP Card applet is typically used through GnuPG.\n\n### e-Health\n\n- [EGKfeuer](https://github.com/elnin0815/EGKfeuer)    ![stars](https://img.shields.io/github/stars/elnin0815/EGKfeuer.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/elnin0815/EGKfeuer.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/elnin0815/EGKfeuer.svg) \n  <br>\nA project to read the German health insurance card (Elektronische Gesundheitskarte (EGK)), transform the read data to FHIR@copy; ressources, and send them to a choosable FHIR Endpoint. <b>This repository does not contain an applet, it is only client tool.</b>\n\n- [Electronic health card](https://github.com/gabriellewp/eHealthCard)    ![stars](https://img.shields.io/github/stars/gabriellewp/eHealthCard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/gabriellewp/eHealthCard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/gabriellewp/eHealthCard.svg) \n  <br>\neHealth card implementation\n\n- [HealthCard: JavaCard + JML specs](https://sourceforge.net/projects/healthcard/) (**SourceForge**) _[last commit 2014]_ <br>\nPrototype of a Java Card application for smart cards and its client application. It was developed with the support of JML (Java Modeling Language) used to formally specify the requirements for developing the HealthCard application in Java Card.\n\n### NDEF tags\n\n- [JavaCard NDEF Applet](https://github.com/OpenJavaCard/openjavacard-ndef)    ![stars](https://img.shields.io/github/stars/OpenJavaCard/openjavacard-ndef.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/OpenJavaCard/openjavacard-ndef.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/OpenJavaCard/openjavacard-ndef.svg) \n  <br>\nThis project contains a JavaCard applet acting as an NFC NDEF Tag. It is intended as a convenience applet, allowing storage of an NDEF record on a smartcard to direct the user to a relevant host-device application, such as a smartphone app related to the card or a web page for which the card serves as an authorization token. Data can be preloaded at install time using standards-compliant methods so that this generic applet can be used in different use cases without modification.\n\n- [JavaCard NDEF application](https://github.com/slomo/ndef-javacard)    ![stars](https://img.shields.io/github/stars/slomo/ndef-javacard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/slomo/ndef-javacard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/slomo/ndef-javacard.svg) \n  <br>\nJavaCard applet for speaking NDEF. Implementation of the NDEF Nfc-Forum specification for JavaCard 2.2.1. The aim is to support sending of urls to smartphones, and provoiding only compile time writeability.\n\n- [Pico NDEF Applet](https://github.com/MpicoSys/PicoLabel/tree/master/scc_applet/Pico_NDEF/src/org/aispring/javacard/ndef) (**GitHub**) _[last commit 2017]_ \n  <br>\n\n\n### CryptoCurrency wallets\n\n- [Bitcoin wallet](https://github.com/JavaCardOS/BitcoinWallet)    ![stars](https://img.shields.io/github/stars/JavaCardOS/BitcoinWallet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/JavaCardOS/BitcoinWallet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/JavaCardOS/BitcoinWallet.svg) \n  <br>\nBitcoinWallet is a Bitcoin Hardware Wallet implementation. It is based on the project Ledger Wallet and can be run on JavaCard platform with JCRE version 3.0.x above.\n\n- [Ledger Bitcoin Hardware Wallet ](https://github.com/LedgerHQ/ledger-javacard)    ![stars](https://img.shields.io/github/stars/LedgerHQ/ledger-javacard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/LedgerHQ/ledger-javacard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/LedgerHQ/ledger-javacard.svg) \n  <br>\nThis applet is an implementation of the Ledger Wallet Hardware Wallet specification emulating an NFC Forum Type 4 tag to display the second factor, with specific extensions. \n  <br>\n<b>This project is DISCONTINUED according to issues section.</b>. Derived project can be found [here](https://github.com/JavaCardOS/BitcoinWallet).\n\n- [Lamassu card](https://github.com/lamassu/ssu-card/)    ![stars](https://img.shields.io/github/stars/lamassu/ssu-card/.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/lamassu/ssu-card/.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/lamassu/ssu-card/.svg) \n  <br>\nVery simple applet used by Lamassu Bitcoin machines to sign transaction with ECDSA. \n\n- [SatoChip Bitcoin applet](https://github.com/Toporin/SatoChipApplet)    ![stars](https://img.shields.io/github/stars/Toporin/SatoChipApplet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Toporin/SatoChipApplet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Toporin/SatoChipApplet.svg) \n  <br>\nSatoChip stands for Secure Anonymous Trustless and Open Chip. It is a javacard applet that can be used as a secure hardware wallet running for example on a Yubikey Neo. The SatoChip has full BIP32 supports but due to technical limitations on current javacards, hardened keys (i.e. child keys using indices 2^31 through 2^32-1) are derived much faster than normal keys.\n\n- [SecureBitcoinWalletJavaCardApplet](https://github.com/acidg/SecureBitcoinWalletJavaCardApplet)    ![stars](https://img.shields.io/github/stars/acidg/SecureBitcoinWalletJavaCardApplet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/acidg/SecureBitcoinWalletJavaCardApplet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/acidg/SecureBitcoinWalletJavaCardApplet.svg) \n  <br>\nThis project is the JavaCard applet for the Secure Bitcoin Wallet App.\n\n- [Specter-DIY Bitcoin wallet applets](https://github.com/cryptoadvance/specter-javacard)    ![stars](https://img.shields.io/github/stars/cryptoadvance/specter-javacard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/cryptoadvance/specter-javacard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/cryptoadvance/specter-javacard.svg) \n  <br>\nThis is a collection of JavaCardOS applets for Specter-DIY secrets storage for use by Specter Bitcoin multisignature wallet.\n\n- [Status KeyCard](https://github.com/status-im/status-keycard)    ![stars](https://img.shields.io/github/stars/status-im/status-keycard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/status-im/status-keycard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/status-im/status-keycard.svg) \n  <br>\nKeycard is a an implementation of a BIP-32 HD wallet running on Javacard 3.0.4+. Supports among others key generation, derivation and signing, exporting keys defined in the context of EIP-1581, card duplicationand setting up a NFC NDEF tag.\n\n### Emulation of some proprietary cards\n\n- [DESFire applet](https://github.com/robsbeat1/Java-Card-Project)    ![stars](https://img.shields.io/github/stars/robsbeat1/Java-Card-Project.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/robsbeat1/Java-Card-Project.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/robsbeat1/Java-Card-Project.svg)  <br>\nreimplementation of DESFire card - master's thesis proof of concept\n\n- [Gauss Key Card](https://github.com/darconeous/gauss-key-card)    ![stars](https://img.shields.io/github/stars/darconeous/gauss-key-card.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/darconeous/gauss-key-card.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/darconeous/gauss-key-card.svg)  <br>\nGauss Key Card is a Java Card applet that implements the minimal working subset of the Tesla Key Card Protocol. Supported Java Card implementations that load this application will be able to be paired with a compatible vehicle and subsequently unlock, start, or lock the vehicle in the same way you would with an official key card.\n\n- [IllegalSecurityChip](https://github.com/dogtopus/IllegalSecurityChip)    ![stars](https://img.shields.io/github/stars/dogtopus/IllegalSecurityChip.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/dogtopus/IllegalSecurityChip.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/dogtopus/IllegalSecurityChip.svg)   <br>\nAn APDU layer emulator for the secure element found in PS4 officially licensed peripherals. It tries to be legal unlike its name suggests.\n\n- [JavaCard DESFire emulation](https://github.com/SakaZulu/java-card-desfire-emulation)    ![stars](https://img.shields.io/github/stars/SakaZulu/java-card-desfire-emulation.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/SakaZulu/java-card-desfire-emulation.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/SakaZulu/java-card-desfire-emulation.svg)   <br>\n  Emulation of DESFire card\n\n- [MobileEDEPV3](https://github.com/FourTree/EDEPApplet-hengbao/tree/master/MobileEDEPV3) (**GitHub**) _[last commit 2016]_ <br>\nJC emulation of some Chinese card?\n\n- [TAG 4 emulation](https://github.com/Tordensky/Tag4)    ![stars](https://img.shields.io/github/stars/Tordensky/Tag4.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Tordensky/Tag4.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Tordensky/Tag4.svg)  <br>\nThis is an implementation of a TAG 4 for emulation\n\n### Unsorted applications\n\n- [E-Voting applet](https://github.com/EVIVoting/EVIV)    ![stars](https://img.shields.io/github/stars/EVIVoting/EVIV.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/EVIVoting/EVIV.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/EVIVoting/EVIV.svg) \n  <br>\nEVIV is a highly sound End-to-end Verifiable Internet Voting system, which offers full voter\u2019s mobility and preserves the voter\u2019s privacy from the vote casting PC even if the voter votes from a public PC, such as a PC at a cybercafe \u0301 or at a public library.\n\n- [javacard-petrol-rationing](https://github.com/alegen/javacard-petrol-rationing) _[REMOVED, last commit 2014]_ <br>\nApplet for security of Petrol rationing, including design documents, Radboud University, Hardware Security course, JavaCard project\n\n- [LicenseCardApp](https://github.com/FourTree/LicenseCardApp)    ![stars](https://img.shields.io/github/stars/FourTree/LicenseCardApp.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/FourTree/LicenseCardApp.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/FourTree/LicenseCardApp.svg) \n  <br>\napplet handling license usage counters and relevant stuff (no documentation)\n\n- [LiteID-SimApp](https://github.com/LiteID/LiteID-SimApp)    ![stars](https://img.shields.io/github/stars/LiteID/LiteID-SimApp.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/LiteID/LiteID-SimApp.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/LiteID/LiteID-SimApp.svg) \n  <br>\nA Sim Application client for LiteID\n\n- [Mobile-ID USAT applet](https://sourceforge.net/projects/mobile-id-usat-applethealt) _[REMOVED, last commit 2017]_ <br>\nThe Remarc Mobile-ID USAT applet this is a JavaCard applet with USIM Application Toolkit menu support. \nBasic functions of the Remarc Mobile-ID SAT applet: Authentication function; Signing function; Changing PIN1/PIN2;  Changing PUK; Unblock PIN1/PIN2; View information - in a USAT menu is present a menu item with information of PIN usage\n\n- [MQTT-SCACAuth: Message Queuing Telemetry Transport (MQTT) protocol for SC](https://github.com/EBuetas78/MQTT-SCACAuth)    ![stars](https://img.shields.io/github/stars/EBuetas78/MQTT-SCACAuth.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/EBuetas78/MQTT-SCACAuth.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/EBuetas78/MQTT-SCACAuth.svg) \n  <br>\nSecurity Method for the Message Queuing Telemetry Transport (MQTT) protocol for  Internet of Things (IoT). Additional message protection implemented on smartcards,  \nSCACAuth_Applets_v2 folder contains the eclipse project for create the applet for JavaCard 3.0.4\n\n- [Prototype firmware for the Trusted Execution Module (TEM)](https://github.com/csail/tem_fw)    ![stars](https://img.shields.io/github/stars/csail/tem_fw.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/csail/tem_fw.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/csail/tem_fw.svg) \n  <br>\nPrototype firmware for the Trusted Execution Module (TEM). The firmware is a JavaCard applet, and it can turn any capable JavaCard into a TEM.\n\n- [Secure-Storage-and-Erasure](https://github.com/SecurityResearcher/SSE)    ![stars](https://img.shields.io/github/stars/SecurityResearcher/SSE.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/SecurityResearcher/SSE.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/SecurityResearcher/SSE.svg) \n  <br>\nThis is an open source prototype of Secure Storage and Erasure (SSE) System, including both the JavaCard and host programs. \n\n- [SmartMeterIQ](https://github.com/adityasawhney/SmartMeterIQ)    ![stars](https://img.shields.io/github/stars/adityasawhney/SmartMeterIQ.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/adityasawhney/SmartMeterIQ.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/adityasawhney/SmartMeterIQ.svg) \n  <br>\nThe main concern with Smart Meters is the granularity of the data which enables physical and behavioral analysis of the consumer in terms of the brand and make of devices installed and their house hold activities (like when do they wake up, when they are not at home). We propose using Java Card platform as it is a natural fit and is designed to be tamper-proof and secure. In addition, we explore using advanced cryptography techniques such as Zero Knowledge Proof of Knowledge (using Pedersen Commitments) to enable the Utility Supplier to trust the data it is getting from the central device.\n\n- [STKApplet](https://github.com/aliasnash/z-first-applet)    ![stars](https://img.shields.io/github/stars/aliasnash/z-first-applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/aliasnash/z-first-applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/aliasnash/z-first-applet.svg) \n  <br>\nSIM Toolkit Applet\n\n- [T101-Devhub](https://github.com/ThothTrustCom/T101-Devhub)    ![stars](https://img.shields.io/github/stars/ThothTrustCom/T101-Devhub.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/ThothTrustCom/T101-Devhub.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/ThothTrustCom/T101-Devhub.svg) \n  <br>\nSet of javacard applets like PGP, OTP, password manager, Satochip (T101-Devhub/Samples/) to run on [ThothTrust THETAKey T101 card](https://github.com/ThothTrustCom/T101-Devhub/blob/master/THETAKey%20T101.md)\n\n- [TPM2 applet](https://github.com/mobilesec/tpm2-se-applet)    ![stars](https://img.shields.io/github/stars/mobilesec/tpm2-se-applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/mobilesec/tpm2-se-applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/mobilesec/tpm2-se-applet.svg) \n  <br>\nThe project aims to implement basic TPM2 functionalities for smart cards that run Java Card. Currently, this implementation supports :\nTPM_Startup, TPM_StartAuthSession, TPM_PCR_Extend, TPM_PCR_Read, TPM_PCR_Reset, TPM_ReadPublic, TPM_GetRandom\n\n- [UPSC framework](https://github.com/paromix/upsc)    ![stars](https://img.shields.io/github/stars/paromix/upsc.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/paromix/upsc.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/paromix/upsc.svg) \n  <br>\nIdentity and the security of data transmission is very critical for the success of these e-services. SIM cards might take an important role as a security service provider. They have been used for so many years to preserve the security keys(Ki) and algorithms (A3A8) for authenticating and encrypting the data. Within this project, the international consortium will try to implement a software framework on both the mobile terminal and SIM card that expose the required security functions to popular e-services like Mobile commerce, Financial transactions, Data Encryption, Secure Cloud Storage and Mobile Identity.\n\n- [Wookey Javacard applets](https://github.com/wookey-project/javacard-applet)    ![stars](https://img.shields.io/github/stars/wookey-project/javacard-applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/wookey-project/javacard-applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/wookey-project/javacard-applet.svg)\n  <br>\nSet of javacard applets for the WooKey project: authentication, DFU and signature tokens to run with the [WooKey](https://wookey-project.github.io/), a secure and trusted USB mass storage device featuring user data encryption and strong user authentication, with fully open source and open hardware foundations, developed by ANSSI.\n\n## Library code (code which is expected to be used as part of other code)\n\n- [ACORN, AEGIS, ASCON, CLOC, and MORUS AEAD ciphers](https://github.com/palkrajesh/AEonJC)    ![stars](https://img.shields.io/github/stars/palkrajesh/AEonJC.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/palkrajesh/AEonJC.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/palkrajesh/AEonJC.svg)  <br>\nOptimalized implementation of 5 selected candidates for authenticated encryption from CAESAR competition\n\n- [AES, OAEP, SHA2-384 and SHA2-512 JC reimplementation,](https://github.com/petrs/JCSWAlgs)    ![stars](https://img.shields.io/github/stars/petrs/JCSWAlgs.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/petrs/JCSWAlgs.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/petrs/JCSWAlgs.svg) \n  <br>\nThe Suite of software reimplementations of selected cryptographic algorithms potentially missing on your smartcard with JavaCard platform. Optimized for speed and small memory footprint.\n\n- [Audit TTP SmartCard-Based ElGamal Cryptosystem](https://github.com/AuditURV/Audit)    ![stars](https://img.shields.io/github/stars/AuditURV/Audit.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/AuditURV/Audit.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/AuditURV/Audit.svg) \n  <br>\nTTP SmartCard-Based ElGamal Cryptosystem Using Threshold Scheme for Electronic Elections. EU Project.\n\n- [Curve25519 jc implementation](https://github.com/david-oswald/jc_curve25519)    ![stars](https://img.shields.io/github/stars/david-oswald/jc_curve25519.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/david-oswald/jc_curve25519.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/david-oswald/jc_curve25519.svg) \n  <br>\nJavacard implementation of Curve25519, JavaCard 3.0.1 or higher (currently developed on J2D081)\n\n- [EC-SRP-5 password-authenticated secure channel](https://github.com/mobilesec/secure-channel-ec-srp-applet)    ![stars](https://img.shields.io/github/stars/mobilesec/secure-channel-ec-srp-applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/mobilesec/secure-channel-ec-srp-applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/mobilesec/secure-channel-ec-srp-applet.svg)   <br>\nAn implementation of the elliptic curve variant of the Secure Remote Password (SRP-5) password-authenticated secure channel protocol from IEEE Std 1363.2-2008 for secure channel to secure elements/smartcards. Utilizes NXP proprietary API.\n\n- [ElGamal-based Threshold Scheme for Electronic Elections](https://github.com/CRISES-URV/eVerification-2)    ![stars](https://img.shields.io/github/stars/CRISES-URV/eVerification-2.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/CRISES-URV/eVerification-2.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/CRISES-URV/eVerification-2.svg) \n  <br>\nTTP SmartCard-Based ElGamal Cryptosystem Using Threshold Scheme for Electronic Elections. EU Project CRISES group has studied the feasibility of developing ElGamal cryptosystem and Shamir\u2019s secret sharing scheme into JavaCards, whose API gives no support for it. (probably significant applet).\n\n- [Export files for ETSI/3GPP APIs](https://github.com/OpenJavaCard/etsi-exports)    ![stars](https://img.shields.io/github/stars/OpenJavaCard/etsi-exports.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/OpenJavaCard/etsi-exports.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/OpenJavaCard/etsi-exports.svg) \n  <br>\nETSI/3GPP standards specify various JavaCard APIs related to SIM cards. This repository contains the export files for many of these APIs. It has been created as a dependency submodule for packages using these APIs.\n\n- [GlobalPlatform SCP11B Secure Channel protocol ](https://github.com/ThothTrustCom/SCP11B)    ![stars](https://img.shields.io/github/stars/ThothTrustCom/SCP11B.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/ThothTrustCom/SCP11B.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/ThothTrustCom/SCP11B.svg) \n  <br>\nImplementation of GlobalPlatform SCP11B Secure Channel protocol and Java Test Client\n\n- [Hashchain applet](https://github.com/raminarmanfar/Java-smart-card-cryptographic-protocols)    ![stars](https://img.shields.io/github/stars/raminarmanfar/Java-smart-card-cryptographic-protocols.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/raminarmanfar/Java-smart-card-cryptographic-protocols.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/raminarmanfar/Java-smart-card-cryptographic-protocols.svg) \n  <br>\nImplementation of some hash chain\n\n- [HMAC and CMAC computation](https://github.com/mll11/jcard/tree/master/TestMAC) (**GitHub**) _[last commit 2014]_ \n  <br>\nThis Java Card applet support APDUs to test HMAC (SHA-1, SHA-256) and CMAC (AES-128). It uses Java Card 2.2.2.\n\n- [Java Card Synchronization Framework](https://github.com/jfhren/jc_sync)    ![stars](https://img.shields.io/github/stars/jfhren/jc_sync.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/jfhren/jc_sync.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/jfhren/jc_sync.svg) \n  <br>\nThe main goal of this framework is to synchronize Java Card 2 applets through the exchange of ciphered APDUs. The current state of the framework is lacking in many ways and requires more works to be fully functional. However it can serve as a proof of concept for the synchronization of applet data in a secure fashion in a pure Java Card 2 setting (i.e.: without tweaking the Java Card VM).\n\n- [JavaCard ChaCha20 implementation](https://github.com/thotheolh/jcChaCha2032)    ![stars](https://img.shields.io/github/stars/thotheolh/jcChaCha2032.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/thotheolh/jcChaCha2032.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/thotheolh/jcChaCha2032.svg)  <br>\n32-bit JavaCard based ChaCha20 stream cipher optimized for JavaCard environment with 32-bit Integer support\n\n- [JCMathLib - ECPoint library](https://github.com/OpenCryptoProject/JCMathLib)    ![stars](https://img.shields.io/github/stars/OpenCryptoProject/JCMathLib.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/OpenCryptoProject/JCMathLib.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/OpenCryptoProject/JCMathLib.svg)   <br>\nProvides software re-implementation of low-level operations like ECPoint or BigInteger without any use of proprietary API.\n\n- [LibESE Android verified boot](https://github.com/TinkerBoard2-Android/external-libese)    ![stars](https://img.shields.io/github/stars/TinkerBoard2-Android/external-libese.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/TinkerBoard2-Android/external-libese.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/TinkerBoard2-Android/external-libese.svg)   <br>\nMinimal transport wrapper for communicating with embedded secure elements on Android\n\n- [OPACITY auth protocol for JC](https://github.com/shevelevsergey/opacity-for-smartcard)    ![stars](https://img.shields.io/github/stars/shevelevsergey/opacity-for-smartcard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/shevelevsergey/opacity-for-smartcard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/shevelevsergey/opacity-for-smartcard.svg) \n  <br>\nThis project is designed to authenticate users to the Web service using contactless smart cards. As an authentication protocol was chosen protocol OPACITY. This protocol has been specifically designed for contactless payments and it is officially registered now as an authentication protocol ISO/IEC 24727-6.\n\n- [OpenTLSSec](https://github.com/halemmerich/opentlssc)    ![stars](https://img.shields.io/github/stars/halemmerich/opentlssc.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/halemmerich/opentlssc.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/halemmerich/opentlssc.svg)   <br>\nOpen source java card library for TLS secured communication under GPL v3. (Seems like significant project)\n\n- [Primitives for JavaCard](https://github.com/albertocarp/Primitives_SmartCard)    ![stars](https://img.shields.io/github/stars/albertocarp/Primitives_SmartCard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/albertocarp/Primitives_SmartCard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/albertocarp/Primitives_SmartCard.svg)   <br>\nJBigInteger, JCMath, SHA3, UProve...\n\n- [Protocol for Lightweight Authentication of Identity (PLAID)](https://github.com/martinpaljak/AppletPlayground/tree/master/src/plaid804) (**GitHub**) _[last commit 2015]_\n  <br>\nProtocol for Lightweight Authentication of Identity [PLAID](https://www.humanservices.gov.au/corporate/publications-and-resources/protocol-lightweight-authentication-identity-plaid/plaid-reference-implementation-department-human-services), Australian Government\n\n- [SCP10 secure channel and attack](https://github.com/ddealmei/SCP10-attack)    ![stars](https://img.shields.io/github/stars/ddealmei/SCP10-attack.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/ddealmei/SCP10-attack.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/ddealmei/SCP10-attack.svg)   <br>\nImplementation of GlobalPlatform SCP'10 secure channel protocol, PoC attacks against it and fixed version. \n\n- [Sec2 cloud security project](https://github.com/RUB-NDS/Sec2)    ![stars](https://img.shields.io/github/stars/RUB-NDS/Sec2.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/RUB-NDS/Sec2.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/RUB-NDS/Sec2.svg) \n  <br>\nmessage-level security must at least be applied to protect those data during and after the storing process. Novel solution for secure data storage in the cloud. It presents a security concept allowing each client to encrypt outgoing data on one\u2019s mobile device and share it among a defined user group while using a seamless service provision. J. Somorovsky, research proof of the concept\n\n- [Secure Element Evaluation Kit for the Android platform](https://github.com/seek-for-android/pool)    ![stars](https://img.shields.io/github/stars/seek-for-android/pool.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/seek-for-android/pool.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/seek-for-android/pool.svg) \n  <br>\nSmartCard API for Android. The SmartCard API adds the necessary modules and API\u2019s to the Android platform. It offers flexible access to secure elements, allowing a secure application solution to make use of any secure form factor, such as a USIM card, a secure \u00b5SD card, an embedded secure element.\n\n- [Self-Blindable credentials](https://github.com/credentials/sbcred_javacard)    ![stars](https://img.shields.io/github/stars/credentials/sbcred_javacard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/credentials/sbcred_javacard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/credentials/sbcred_javacard.svg) \n  <br>\nJava Card implementation of Self-Blindable credentials           \n\n- [SHA3, PBKDF2, TWINE, Zorro, ACORN, AEGIS, ASCON, CLOC, and MORUS AEAD ciphers implementation](https://github.com/MiragePV/OptimizedJCAlgs)    ![stars](https://img.shields.io/github/stars/MiragePV/OptimizedJCAlgs.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/MiragePV/OptimizedJCAlgs.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/MiragePV/OptimizedJCAlgs.svg)  <br>\nOptimalized implementation of AEGIS, ACORN, ASCON, CLOC, MORUS (Authenticated Encryption), TWINE, Zorro (Block Ciphers), SHA-3 (Message Digest) and PBKDF2 (Key derivation) \n\n- [SmartCardTLS](https://github.com/gilb/smart_card_TLS)    ![stars](https://img.shields.io/github/stars/gilb/smart_card_TLS.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/gilb/smart_card_TLS.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/gilb/smart_card_TLS.svg)   <br>\nClient implementation of TLS 1.0 in Java Card (tested with Gmail mobile (lightweight version) with the card G&D SmartCafe 3.2)\n\n- [SRP-6a password-authenticated secure channel](https://github.com/mobilesec/secure-channel-srp6a-applet)    ![stars](https://img.shields.io/github/stars/mobilesec/secure-channel-srp6a-applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/mobilesec/secure-channel-srp6a-applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/mobilesec/secure-channel-srp6a-applet.svg)  <br>\nJava Card applet for SRP-6a password-authenticated secure channel to secure elements/smartcards. This Java Card applet is an implementation of the Secure Remote Password (SRP-6a) password-authenticated secure channel protocol by Wu [1]. In combination with an implementation of an off-card application, such as an Android application using our SRP-6A Android Library, you can establish a secure communication channel that is mutually authenticated with a PIN or password. \n\n- [TelephonyManager Carrier Privilege granting](https://github.com/sabtmoha/carrier_privilege)    ![stars](https://img.shields.io/github/stars/sabtmoha/carrier_privilege.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/sabtmoha/carrier_privilege.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/sabtmoha/carrier_privilege.svg) \n  <br>\nSince Android 5.1, applications are able to communicate with UICC using the class TelephonyManager. However, the concerned functions require a special privilege, that is the carrier privilege. This JavaCard applet grants this privilege to the app whose signature is included inside the applet (the variable SHA256_SIGN)\n\n- [ykneo-curves](https://github.com/Yubico/ykneo-curves)    ![stars](https://img.shields.io/github/stars/Yubico/ykneo-curves.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Yubico/ykneo-curves.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Yubico/ykneo-curves.svg) \n  <br>\nThis is an applet demonstrating several curves for use in YubiKey NEO.\n\n\n## Developer tools \n### Applet build, upload and management\n\n- [\"Allow all\" ARA-M](https://github.com/seek-for-android/allow-all-ara)    ![stars](https://img.shields.io/github/stars/seek-for-android/allow-all-ara.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/seek-for-android/allow-all-ara.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/seek-for-android/allow-all-ara.svg) \n  <br>\nGlobalPlatform dummy ARA applet to grant full access\n\n- [Ant-JavaCard](https://github.com/martinpaljak/ant-javacard)    ![stars](https://img.shields.io/github/stars/martinpaljak/ant-javacard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/martinpaljak/ant-javacard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/martinpaljak/ant-javacard.svg) \n  <br>\nEasy to use Ant task for building JavaCard CAP files in a declarative way.\n\n- [CAP File Manipulation](https://bitbucket.org/ssd/capmap-free) (**BitBucket**) _[last commit 2012]_ <br>\nA Java Card CAP file parser. \n\n- [capfile handling tool](https://github.com/martinpaljak/capfile)    ![stars](https://img.shields.io/github/stars/martinpaljak/capfile.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/martinpaljak/capfile.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/martinpaljak/capfile.svg) \n  <br>\nHandle JavaCard CAP files, from command line or Java project. Cap file parsing, signing, displaying metadata....\n\n- [Card2Jar](https://github.com/benjholla/Card2Jar)    ![stars](https://img.shields.io/github/stars/benjholla/Card2Jar.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/benjholla/Card2Jar.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/benjholla/Card2Jar.svg) \n  <br>\nA converter for converting Java Card CAP files to JAR files. Currently this is just a handy wrapper around the JCDK3.0.4_ClassicEdition SDK distribution's normalizer utility. It is subject to all the same caveats as the normalizer.bat interface (must have export EXP file and must be a Java Card 2.2.2 or lower applet).\n\n- [ExpParser](https://sourceforge.net/projects/javacardtools/) (**SourceForge**) _[last commit 2008]_ <br>\nParser for JavaCard export files (\\*.exp) - display content in human-readable form\n\n- [GlobalPlatform export files](https://github.com/OpenJavaCard/globalplatform-exports)    ![stars](https://img.shields.io/github/stars/OpenJavaCard/globalplatform-exports.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/OpenJavaCard/globalplatform-exports.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/OpenJavaCard/globalplatform-exports.svg) \n  <br>\nAll export files for GlobalPlatform APIs\n\n- [GlobalPlatform / GPShell](https://github.com/kaoh/globalplatform) ![stars](https://img.shields.io/github/stars/kaoh/globalplatform.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/kaoh/globalplatform.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/kaoh/globalplatform.svg) \n  <br>\nCommand line tool and C library for managing smart cards following the GlobalPlatform card specification. \n\n- [GlobalPlatformPro tool](https://github.com/martinpaljak/GlobalPlatformPro)    ![stars](https://img.shields.io/github/stars/martinpaljak/GlobalPlatformPro.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/martinpaljak/GlobalPlatformPro.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/martinpaljak/GlobalPlatformPro.svg) \n  <br>\nMature tool for managing applets via GlobalPlatform\n\n- [GlobalPlatform Open Mobile API (OMAPI) tests](https://github.com/GlobalPlatform/OMAPI-applets)    ![stars](https://img.shields.io/github/stars/GlobalPlatform/OMAPI-applets.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/GlobalPlatform/OMAPI-applets.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/GlobalPlatform/OMAPI-applets.svg) \n  <br>\nLarge set of test applets for GlobalPlatform Open Mobile API (OMAPI).\n\n- [JavaCard debugging toolkit](https://github.com/omarbenhamid/jcdebug)    ![stars](https://img.shields.io/github/stars/omarbenhamid/jcdebug.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/omarbenhamid/jcdebug.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/omarbenhamid/jcdebug.svg)  <br>\nJCDebug is a JavaCard debugging toolkit. A simple command line tools that instruments JavaCard applets to offer debugging and inspection services directly on the target plateform. Potentially significant project, needs closer look\n\n- [JCProfiler: JavaCard performance profiler](https://github.com/OpenCryptoProject/JCProfiler)    ![stars](https://img.shields.io/github/stars/OpenCryptoProject/JCProfiler.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/OpenCryptoProject/JCProfiler.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/OpenCryptoProject/JCProfiler.svg)  <br>\nPerformance profiler for Java Card code. Automatically inserts special execution interruption \"traps\" into applet code, repeatedly execute target operation and measures time differences between traps. Annotates code with measured time. \n\n- [OPAL - GlobalPlatform lib](https://bitbucket.org/ssd/opal) (**BitBucket**) _[last commit 2015]_ <br>\nA GlobalPlatform Java Library. OPAL implements several authentication, encryption and transfer protocols for\nsmart card. This tool has been developped by the SSD Research Team (XLIM Labs, University of Limoges, France).\n\n- [Real ARA-M](https://github.com/bertrandmartel/aram-applet)    ![stars](https://img.shields.io/github/stars/bertrandmartel/aram-applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/bertrandmartel/aram-applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/bertrandmartel/aram-applet.svg)\n  <br>\nA \"real\" ARA-M applet that doesn't just do Allow-all but offers a fairly complete implementation of the Secure Element Access Control v1.0 specification.\n\n- [Smart-Card-Tool-pyResMan](https://sourceforge.net/projects/pyresman) (**SourceForge**) _[last commit 2017]_ <br>\npyResMan is a free open source smartcard tool for JavaCard and other smart card. It can be used to send APDU(s), execute APDU script(s); It can be used to debug ISO14443 protocol commands and Mifare commands with R502 SPY reader; It can also be used to manage resource of GP card. It is based on pyScard and GlobalPlatform open source projects.\n\n- [Sun/Oracle JavaCard SDK binaries](https://github.com/martinpaljak/oracle_javacard_sdks)    ![stars](https://img.shields.io/github/stars/martinpaljak/oracle_javacard_sdks.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/martinpaljak/oracle_javacard_sdks.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/martinpaljak/oracle_javacard_sdks.svg) \n  <br>\nOracle JavaCard SDK-s for using as a Git submodule for ant-javacard projects.    \n\n### Card capabilities testing (algorithms support, performance, security issues)\n\n- [ECTester](https://github.com/petrs/ECTester)    ![stars](https://img.shields.io/github/stars/petrs/ECTester.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/petrs/ECTester.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/petrs/ECTester.svg)  <br>\nTester of Eliptic curves support and behavior (TYPE_EC_FP and TYPE_EC_F2M) on smartcards with JavaCard platform. \n\n- [HandlerTest](https://github.com/LudovicRousseau/HandlerTest)    ![stars](https://img.shields.io/github/stars/LudovicRousseau/HandlerTest.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/LudovicRousseau/HandlerTest.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/LudovicRousseau/HandlerTest.svg) \n  <br>\nL. Rousseau PCSCLite reader test : This program send commands to a card through the reader.           \n\n- [JCAlgTest](https://github.com/crocs-muni/JCAlgTest)    ![stars](https://img.shields.io/github/stars/crocs-muni/JCAlgTest.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/crocs-muni/JCAlgTest.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/crocs-muni/JCAlgTest.svg) \n  <br>\nAutomated testing tool for algorithms from JavaCard API supported by particular smart card. Performance testing of almost all available methods. The results for more than 60+ cards available at https://jcalgtest.org. \n\n- [JCOSTestKit](https://github.com/ThothTrustCom/JCOSTestKit) [stars](https://img.shields.io/github/stars/ThothTrustCom/JCOSTestKit.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/ThothTrustCom/JCOSTestKit.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/ThothTrustCom/JCOSTestKit.svg) \n  <br>\nJCOS testing kit platform with modular plugin capability. Possibly alternative approach to JCAlgTest allowing for finer definition of the operations and their sequence as defined by host plugin.\n\n- [Memory profiling tool](https://github.com/maxashwin/JavaCard/tree/master/Wkg_MemoryMeasurementScript) (**GitHub**) _[last commit 2017]_  <br>\nLocates an applet constructor and places free memory measurements hooks before and after every allocation command. Summarizes required memory for every allocated object (RAM, EEPROM)   \n\n- [Performance Benchmark Applet for Javacard/smartcard](https://github.com/dmdclab/smartcard-benchmark)    ![stars](https://img.shields.io/github/stars/dmdclab/smartcard-benchmark.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/dmdclab/smartcard-benchmark.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/dmdclab/smartcard-benchmark.svg) \n  <br>\nPerformance testing for various algorithms, similar as JCAlgTest (needs investigation about difference to JCAlgTest) \n\n- [PicoLabel AES/DES/RSA speed tester](https://github.com/MpicoSys/PicoLabel)    ![stars](https://img.shields.io/github/stars/MpicoSys/PicoLabel.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/MpicoSys/PicoLabel.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/MpicoSys/PicoLabel.svg) \n  <br>\nPerformance testing for DES/AES/RSA \n\n- [SPA-JavaCard-Applet](https://github.com/crocs-muni/SPA-JavaCard-Applet) [stars](https://img.shields.io/github/stars/crocs-muni/SPA-JavaCard-Applet.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/crocs-muni/SPA-JavaCard-Applet.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/crocs-muni/SPA-JavaCard-Applet.svg) \n  <br>\nJavaCard applet implementating basic cryptographic operations triggered during power analysis measurements using [SPA-Cryptographic-Operations-Extractor](https://github.com/crocs-muni/SPA-Cryptographic-Operations-Extractor) tool\n\n- [Three applets testing on-card defenses against maliciously modified applets](https://github.com/maxashwin/JavaCard)    ![stars](https://img.shields.io/github/stars/maxashwin/JavaCard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/maxashwin/JavaCard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/maxashwin/JavaCard.svg)  <br>\nAbuse of Shareable interface, type confusion after use of Shareable interface, direct modification of CAP file\n\n### Formal verification and code transformation tools\n\n- [CesTa project](https://github.com/formanek/CesTa)    ![stars](https://img.shields.io/github/stars/formanek/CesTa.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/formanek/CesTa.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/formanek/CesTa.svg)  <br>\nSecurity hardening (duplicate variables, constant branches, transaction detection...) for JavaCard applets based on ANTLR automatic code transformations\n\n- [Joana IFC analysis framework](https://github.com/joana-team/joana)    ![stars](https://img.shields.io/github/stars/joana-team/joana.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/joana-team/joana.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/joana-team/joana.svg) \n  <br>\nJoana is a static analysis tool that can be used for information flow control (IFC) of Java bytecode. IFC allows to verify the INTEGRITY (no attacker can temper with sensitive information) or CONFIDENTIALITY (no attacker can infer secret information from public outputs) of a Java program. System dependence graphs (SDG) form the basic technology for our analyses. Examples also on JavaCard applets. Very active project.\n\n- [KeYmaera 3](https://github.com/LS-Lab/KeYmaera-release)    ![stars](https://img.shields.io/github/stars/LS-Lab/KeYmaera-release.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/LS-Lab/KeYmaera-release.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/LS-Lab/KeYmaera-release.svg) \n  <br>\nKeYmaera 3: A Hybrid Theorem Prover for Hybrid Systems with examples on JavaCard applets (among others). http://symbolaris.com/info/KeYmaera.html\n\n- [The KeY project](https://github.com/cirosantilli/key-java-formal-verification-fork)    ![stars](https://img.shields.io/github/stars/cirosantilli/key-java-formal-verification-fork.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/cirosantilli/key-java-formal-verification-fork.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/cirosantilli/key-java-formal-verification-fork.svg) \n  <br>\nexamples on JavaCard, this github repo is not official (https://www.key-project.org) \n\n- [VeriFast](https://github.com/verifast/verifast)    ![stars](https://img.shields.io/github/stars/verifast/verifast.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/verifast/verifast.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/verifast/verifast.svg) \n  <br>\nVeriFast is a research prototype of a tool for modular formal verification of correctness properties of single-threaded and multithreaded C and Java programs annotated with preconditions and postconditions written in separation logic. Examples on JavaCard applets: EPurse, EidCard. Very active project.\n\n## JavaCard simulators and emulators\n\n- [CAPRunner](https://github.com/benallard/caprunner)    ![stars](https://img.shields.io/github/stars/benallard/caprunner.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/benallard/caprunner.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/benallard/caprunner.svg) \n  <br>\nCAPRunner is a javacard bytecode emulator that is able to execute CAP files. It also comes with an handy runcap.py that bind them together and allow you to send some APDUs to a CAP file (without the need for a smartcard).\ndevelopement on BitBucket\n\n- [FreeJCVM](https://sourceforge.net/projects/freejcvm) (**SourceForge**) _[last commit 2015]_ <br>\nFree javacard vm implementation for AVR MCU.\n\n- [Java Card Simulator via Node.js](https://github.com/adamnoakes/javacard-simulator)    ![stars](https://img.shields.io/github/stars/adamnoakes/javacard-simulator.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/adamnoakes/javacard-simulator.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/adamnoakes/javacard-simulator.svg) \n  <br>\nThis project provides an implementation of a Java Card Runtime Enviornment (JCRE) produced using Node.js which is capable of creating virtual smart card devices and sending APDU commands to the smart card devices for execution via a RESTful API. The project also provides a web-based interface for interacting with the JCRE. \n\n- [JCardMock](https://github.com/christianhujer/jcardmock)    ![stars](https://img.shields.io/github/stars/christianhujer/jcardmock.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/christianhujer/jcardmock.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/christianhujer/jcardmock.svg) \n  <br>\nMock implementation of the Java Card API 3.0.4 in order to test Java Card applet code without a card or simulator. It runs the Java Card API 3.0.4 in a normal Java Virtual Machine. The purpose is to allow for unit tests for Java Card applets with normal test frameworks like JUnit or TestNG in a normal Java Virtual Machine (unfinished)\n\n- [JCardSim:](https://github.com/licel/jcardsim)    ![stars](https://img.shields.io/github/stars/licel/jcardsim.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/licel/jcardsim.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/licel/jcardsim.svg) \n  <br>\nCapable JavaCard simulator implemented atop of BouncyCastle. Very good for unit testing, quick prototyping and educational purposes. Allows for multiple simulated cards in parallel.   \n\n- [openjcvm](https://sourceforge.net/projects/openjcvm/) (**SourceForge**) _[last commit 2015]_ <br>\nA open source java card virtual machine implementation. And also some part of the VM code can be used as part of kinds of tools such as javacard bytecode disassembler.\n\n- [PythonCard:](https://bitbucket.org/benallard/pythoncard/) (**BitBucket**) _[last commit 2013] <br>\nJavaCard API simulated in Python environment. The goal is to provide a classic 3.0.1 version, while maintaining compatiblity with earlier version like 2.1.2.\n\n- [remote-card](https://github.com/ph4r05/remote-card)    ![stars](https://img.shields.io/github/stars/ph4r05/remote-card.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/ph4r05/remote-card.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/ph4r05/remote-card.svg) \n  <br>\nJavaCard remote access. Wraps physically connected JavaCards and virtual JCardSim cards behind REST and WebSocket interface. Enables to connect multiple JavaCards on one host and access them remotely on a different host. Project also integrates with VSmartCard so Android NFC phone can be used as a card reader.\n\n- [Secure Element Emulator](https://github.com/mobilesec/secure-element-emulator)    ![stars](https://img.shields.io/github/stars/mobilesec/secure-element-emulator.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/mobilesec/secure-element-emulator.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/mobilesec/secure-element-emulator.svg) \n  <br>\nThis project aims at emulating a secure element environment for debugging and rapid-prototyping of secure element applets. It is a fork of the open-source Java Card simulator jCardSim (original source code available here). Within our research we added extensions to emulate an application life-cycle that matches the life-cycle of applications on real smartcard chips.\n\n- [vJCRE ](https://github.com/martinpaljak/vJCRE)    ![stars](https://img.shields.io/github/stars/martinpaljak/vJCRE.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/martinpaljak/vJCRE.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/martinpaljak/vJCRE.svg) \n  <br>\nvJCRE is a virtual Java Card Runtime Environment\n\n## Learning (various school projects, simple hello world applets, etc)\n\n- [AppletPlayground](https://github.com/martinpaljak/AppletPlayground)    ![stars](https://img.shields.io/github/stars/martinpaljak/AppletPlayground.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/martinpaljak/AppletPlayground.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/martinpaljak/AppletPlayground.svg) \n  <br>\nAppletPlayground is an educational repository for getting to know JavaCard development by learning from existing open source software. It includes various open source applets from the internet, bundled into ready to use package. Everything you need to edit, compile and load the applets to real JavaCard-s or test with an emulator.\n\n- [Client applet for CDAX Crypto](https://github.com/marlonbaeten/cdax-crypto-cpp/tree/f3329fcdf348b6a3ddc95b993dbc97b806aea335/applet) (**GitHub**) _[last commit 2014]_  <br>\nThe applet with implementation of basic cryptographic functions offered by JavaCard API\n\n- [CryptedBankCard](https://github.com/Herve-M/UQAM-EMB7015)    ![stars](https://img.shields.io/github/stars/Herve-M/UQAM-EMB7015.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Herve-M/UQAM-EMB7015.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Herve-M/UQAM-EMB7015.svg) \n  <br>\nThe school project with goal to develop a secure banking card.\n\n- [Hotel Buddy](https://github.com/prayzzz/smartcard)    ![stars](https://img.shields.io/github/stars/prayzzz/smartcard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/prayzzz/smartcard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/prayzzz/smartcard.svg) \n  <br>\nVarious JavaCard projects created for a lecture-series. Some PKI.    \n\n- [JavaCard Demo](https://github.com/leowenyang/JCDemo)    ![stars](https://img.shields.io/github/stars/leowenyang/JCDemo.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/leowenyang/JCDemo.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/leowenyang/JCDemo.svg) \n  <br>\nExamples of various JavaCard functionalities (as separate applets)\n\n- [Learning applets repository](https://github.com/gracebear/JavaCard)    ![stars](https://img.shields.io/github/stars/gracebear/JavaCard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/gracebear/JavaCard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/gracebear/JavaCard.svg) \n  <br>\nThis repository will provide you with javacard applet for absolutely beginners\\ javacard development tools\\ javacard open source applets. \n\n- [Maze solver on JavaCard](https://github.com/henryhoo/javacard_maze)    ![stars](https://img.shields.io/github/stars/henryhoo/javacard_maze.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/henryhoo/javacard_maze.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/henryhoo/javacard_maze.svg) \n  <br>\nA small experiment on memory about java card using jcopv2.2.1  \n\n- [MultiCard](https://github.com/Dragonexodus/MultiCard)    ![stars](https://img.shields.io/github/stars/Dragonexodus/MultiCard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/Dragonexodus/MultiCard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/Dragonexodus/MultiCard.svg) \n  <br>\nAn school of applied science smartcard project. This project contains offCard and onCard components with various aspects of javacard development.\n\n- [SecureChat](https://github.com/sharedbits/JavaChat)    ![stars](https://img.shields.io/github/stars/sharedbits/JavaChat.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/sharedbits/JavaChat.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/sharedbits/JavaChat.svg) \n  <br>\nSecure chat client/server application \n\n- [Simple AES encrypt/decrypt](https://github.com/pauksk/nrf6310-pca10007)    ![stars](https://img.shields.io/github/stars/pauksk/nrf6310-pca10007.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/pauksk/nrf6310-pca10007.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/pauksk/nrf6310-pca10007.svg) \n  <br>\nMaster thesis - protection of wireless networks in smart homes using secure hardware\n       \n- [Simple calculator on JavaCard](https://github.com/steff7/javacard-calculator)    ![stars](https://img.shields.io/github/stars/steff7/javacard-calculator.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/steff7/javacard-calculator.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/steff7/javacard-calculator.svg) \n  <br>\n    \n- [Smartcard-Offline-Lock](https://github.com/GeorgesAlkhouri/Smartcard-Offline-Lock)    ![stars](https://img.shields.io/github/stars/GeorgesAlkhouri/Smartcard-Offline-Lock.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/GeorgesAlkhouri/Smartcard-Offline-Lock.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/GeorgesAlkhouri/Smartcard-Offline-Lock.svg) \n  <br>\nElectronic door locks are commonly used at hotels, exhibitions or public facilities. An offline-operational solution for an electronic lock is required. This is a study project, so please don't expect to much comfort (single DES key used).\n  \n- [TraninCard applet](https://github.com/TBoonX/sc_traincard)    ![stars](https://img.shields.io/github/stars/TBoonX/sc_traincard.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/TBoonX/sc_traincard.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/TBoonX/sc_traincard.svg) \n  <br>\nSmartCard - Traincard, No Pain No Gain Project at HTWk Leipzig. \n\n## Unsorted\n\n### (needs further inspection)\n\n- [Corba](https://github.com/lbarbisan/corba)    ![stars](https://img.shields.io/github/stars/lbarbisan/corba.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/lbarbisan/corba.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/lbarbisan/corba.svg) \n  <br>\nold project, CryptoFlex uploader?\n\n- [Teleport secret Bitcoin applet](https://github.com/EyeOfPython/teleport_secret)    ![stars](https://img.shields.io/github/stars/EyeOfPython/teleport_secret.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/EyeOfPython/teleport_secret.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/EyeOfPython/teleport_secret.svg) \n  <br>\nBasic applet implementing simple Bitcoin signature functionality.      \n\n- [unifei-smart-cards](https://github.com/tiagorg/unifei-smart-cards)    ![stars](https://img.shields.io/github/stars/tiagorg/unifei-smart-cards.svg?style=social) ![lastcommit](https://img.shields.io/github/last-commit/tiagorg/unifei-smart-cards.svg) ![numcontributors](https://img.shields.io/github/contributors-anon/tiagorg/unifei-smart-cards.svg) \n  <br>\nMaterial developed in UNIFEI-MG research about Smart Cards          \n\n\n### Methodology\n- DONE (2018-02-22) Search all GitHub repositories with \"javacard.framework.Applet\" string. For repeated searches, sort by _Sort:Recently indexed_ to get new projects first\n- DONE (2017-04-15) Analyze applets included in AppletPlayground\n- DONE (2017-04-15) Search all SourceForge repositories with \"javacard\" string\n- DONE (2017-04-16) Sort applets into categories according to basic topic\n- Inspect other repositories of relevant developers\n"
 },
 {
  "repo": "bitpay/node-bitpay-client",
  "language": "JavaScript",
  "readme_contents": "# This repository is no longer maintained and it is being deprecated, please refer to the latest version [Here](https://github.com/bitpay/nodejs-bitpay-client)\n"
 },
 {
  "repo": "lukechampine/blake3",
  "language": "Assembly",
  "readme_contents": "blake3\n------\n\n[![GoDoc](https://godoc.org/lukechampine.com/blake3?status.svg)](https://godoc.org/lukechampine.com/blake3)\n[![Go Report Card](http://goreportcard.com/badge/lukechampine.com/blake3)](https://goreportcard.com/report/lukechampine.com/blake3)\n\n```\ngo get lukechampine.com/blake3\n```\n\n`blake3` implements the [BLAKE3 cryptographic hash function](https://github.com/BLAKE3-team/BLAKE3).\nThis implementation aims to be performant without sacrificing (too much)\nreadability, in the hopes of eventually landing in `x/crypto`.\n\nIn addition to the pure-Go implementation, this package also contains AVX-512\nand AVX2 routines (generated by [`avo`](https://github.com/mmcloughlin/avo))\nthat greatly increase performance for large inputs and outputs.\n\nContributions are greatly appreciated.\n[All contributors are eligible to receive an Urbit planet.](https://twitter.com/lukechampine/status/1274797924522885134)\n\n\n## Benchmarks\n\nTested on a 2020 MacBook Air (i5-7600K @ 3.80GHz). Benchmarks will improve as\nsoon as I get access to a beefier AVX-512 machine. :wink:\n\n### AVX-512\n\n```\nBenchmarkSum256/64           120 ns/op       533.00 MB/s\nBenchmarkSum256/1024        2229 ns/op       459.36 MB/s\nBenchmarkSum256/65536      16245 ns/op      4034.11 MB/s\nBenchmarkWrite               245 ns/op      4177.38 MB/s\nBenchmarkXOF                 246 ns/op      4159.30 MB/s\n```\n\n### AVX2\n\n```\nBenchmarkSum256/64           120 ns/op       533.00 MB/s\nBenchmarkSum256/1024        2229 ns/op       459.36 MB/s\nBenchmarkSum256/65536      31137 ns/op      2104.76 MB/s\nBenchmarkWrite               487 ns/op      2103.12 MB/s\nBenchmarkXOF                 329 ns/op      3111.27 MB/s\n```\n\n### Pure Go\n\n```\nBenchmarkSum256/64           120 ns/op       533.00 MB/s\nBenchmarkSum256/1024        2229 ns/op       459.36 MB/s\nBenchmarkSum256/65536     133505 ns/op       490.89 MB/s\nBenchmarkWrite              2022 ns/op       506.36 MB/s\nBenchmarkXOF                1914 ns/op       534.98 MB/s\n```\n\n## Shortcomings\n\nThere is no assembly routine for single-block compressions. This is most\nnoticeable for ~1KB inputs.\n\nEach assembly routine inlines all 7 rounds, causing thousands of lines of\nduplicated code. Ideally the routines could be merged such that only a single\nroutine is generated for AVX-512 and AVX2, without sacrificing too much\nperformance.\n"
 },
 {
  "repo": "drand/drand",
  "language": "Go",
  "readme_contents": "# Drand - A Distributed Randomness Beacon Daemon\n\n<p align=\"center\"><img src=\"logo.png\" width=\"220\" /></p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/drand/drand/actions?query=branch%3Amaster\" title=\"Tests\"><img src=\"https://github.com/drand/drand/actions/workflows/tests.yaml/badge.svg?branch=master\" /></a>\n  <a href=\"https://codecov.io/gh/drand/drand\" title=\"Coverage\"><img src=\"https://codecov.io/gh/drand/drand/branch/master/graph/badge.svg\" /></a>\n  <a href=\"https://goreportcard.com/report/github.com/drand/drand\" title=\"Go Report Card\"><img src=\"https://goreportcard.com/badge/github.com/drand/drand\" /></a>\n  <a href=\"https://pkg.go.dev/github.com/drand/drand\" title=\"go.dev reference\"><img src=\"https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&logoColor=white\" /></a>\n  <a href=\"https://golang.org/\" title=\"golang version\"><img src=\"https://img.shields.io/badge/golang-%3E%3D1.17-orange.svg\" /></a>\n</p>\n\n<p align=\"center\">\nDrand (pronounced \"dee-rand\") is a distributed randomness beacon daemon\nwritten in <a href=\"https://golang.org/\">Golang</a>.\n</p>\n\n<p align=\"center\">\nLinked drand nodes collectively produce <strong>publicly verifiable</strong>,\n<strong>unbiased</strong> and <strong>unpredictable</strong> random values at\nfixed intervals using bilinear pairings and threshold cryptography.\n</p>\n\n<p align=\"center\">\nDrand was first developed within the <a href=\"https://github.com/dedis\">DEDIS\norganization</a>, and as of December 2019, is now under the drand organization.\n</p>\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table of Contents\n\n- [Goal and Overview](#goal-and-overview)\n  - [Public Randomness](#public-randomness)\n  - [Private Randomness](#private-randomness)\n- [Installation](#installation)\n  - [Official release](#official-release)\n  - [Manual installation](#manual-installation)\n  - [Via Golang](#via-golang)\n  - [Via Docker](#via-docker)\n- [Usage](#usage)\n  - [Run Drand locally](#run-drand-locally)\n  - [Create a Drand deployment](#create-a-drand-deployment)\n  - [Fetching Public Randomness](#fetching-public-randomness)\n  - [Fetching Private Randomness](#fetching-private-randomness)\n  - [Using HTTP endpoints](#using-http-endpoints)\n  - [JavaScript client](#javascript-client)\n- [Documentation](#documentation)\n- [What's Next?](#whats-next)\n- [Acknowledgments](#acknowledgments)\n- [Coverage](#coverage)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Goal and Overview\n\nThe need for digital randomness is paramount in multiple digital applications\n([e]voting, lottery, cryptographic parameters, embedded devices bootstrapping\nrandomness, blockchain systems etc) as well in non-digital such as statistical\nsampling (used for example to check results of an election), assigning court\ncases to random judges, random financial audits, etc.  However, constructing a\nsecure source of randomness is anything but easy: there are countless examples\nof attacks where the randomness generation was the culprit (static keys,\nnon-uniform distribution, biased output, etc).  drand aims to fix that gap by\nproviding a Randomness-as-a-Service network (similar to NTP servers for time,\nor Certificate Authority servers for CAs verification), providing continuous\nsource of randomness which is:\n\n* Decentralized: drand is a software ran by a diverse set of reputable entities\n  on the Internet and a threshold of them is needed to generate randomness,\n  there is no central point of failure.\n* Publicly verifiable & unbiased: drand periodically delivers publicly\n  verifiable and unbiased randomness. Any third party can fetch and verify the\n  authenticity of the randomness and by that making sure it hasn't been\n  tampered with.\n* And \"private\" as well: drand nodes can also deliver encrypted randomness\n  to be used in a local applications, for example to seed the OS's PRNG.\n\nA drand network is operated by a group of organizations around the world that\nincludes Cloudflare, EPFL, Kudelski Security, Protocol Labs, Celo, UCL, and\nUIUC. You can learn more by visiting the\n[League of Entropy website](https://leagueofentropy.com), where you can also\nsee the random values being generated by the network in real time.\n\n### Public Randomness\n\nGenerating public randomness is the primary functionality of drand. Public\nrandomness is generated collectively by drand nodes and publicly available. The\nmain challenge in generating good randomness is that no party involved in the\nrandomness generation process should be able to predict or bias the final\noutput. Additionally, the final result has to be third-party verifiable to make\nit actually useful for applications like lotteries, sharding, or parameter\ngeneration in security protocols.\n\nA drand randomness beacon is composed of a distributed set of nodes and has two\nphases:\n\n- **Setup:** Each node first generates a *long-term public/private key pair*.\n  Then all of the public keys are written to a *group file* together with some\n  further metadata required to operate the beacon. After this group file has\n  been distributed, the nodes perform a *distributed key generation* (DKG)\n  protocol to create the collective public key and one private key share per\n  server. The participants NEVER see/use the actual (distributed) private key\n  explicitly but instead utilize their respective private key shares for the\n  generation of public randomness.\n- **Generation:** After the setup, the nodes switch to the randomness\n  generation mode. Any of the nodes can initiate a randomness generation round\n  by broadcasting a message which all the other participants sign using a\n  t-of-n threshold version of the *Boneh-Lynn-Shacham* (BLS) signature scheme\n  and their respective private key shares. Once any node (or third-party\n  observer) has gathered t partial signatures, it can reconstruct the full BLS\n  signature (using Lagrange interpolation). The signature is then hashed using\n  SHA-256 to ensure that there is no bias in the byte representation of the\n  final output. This hash corresponds to the collective random value and can be\n  verified against the collective public key.\n\n### Private Randomness\n\nPrivate randomness generation is the secondary functionality of drand. Clients\ncan request private randomness from some or all of the drand nodes which\nextract it locally from their entropy pools and send it back in encrypted form.\nThis can be useful to gather randomness from different entropy sources, for\nexample in embedded devices.\n\nIn this mode we assume that a client has a private/public key pair and\nencapsulates its public key towards the server's public key using the ECIES\nencryption scheme. After receiving a request, the drand node produces 32 random\nbytes locally (using Go's `crypto/rand` interface), encrypts them using the\nreceived public key and sends it back to the client.\n\n**Note:** Assuming that clients without good local entropy sources (such as\nembedded devices) use this process to gather high entropy randomness to\nbootstrap their local PRNGs, we emphasize that the initial client key pair has\nto be provided by a trusted source (such as the device manufacturer). Otherwise\nwe run into the chicken-and-egg problem of how to produce on the client's side\na secure ephemeral key pair for ECIES encryption without a good (local) source\nof randomness.\n\n## Installation\n\n### Official release\n\nPlease go use the latest drand binary in the [release page](https://github.com/drand/drand/releases).\n\n### Manual installation\n\nDrand can be installed via [Golang](https://golang.org/) or\n[Docker](https://www.docker.com/). By default, drand saves the configuration\nfiles such as the long-term key pair, the group file, and the collective public\nkey in the directory `$HOME/.drand/`.\n\n### Via Golang\n\nMake sure that you have a working [Golang\ninstallation](https://golang.org/doc/install) and that your\n[GOPATH](https://golang.org/doc/code.html#GOPATH) is set.\n\nThen install drand via:\n```bash\ngit clone https://github.com/drand/drand\ncd drand\nmake install\n```\n\n### Via Docker\n\nThe setup is explained in\n[docker/README.md](https://github.com/drand/drand/tree/master/docker/README.md).\n\n## Usage\n\n### Run Drand locally\n\nTo run a local demo, you can simply run:\n```bash\nmake demo\n```\n\nThe script spins up a few drand local processes, performs resharing and other\noperations and will continue to print out new randomness every Xs (currently\n6s).\nFor more information, look at the demo [README](https://github.com/drand/drand/tree/master/demo).\n\n\nA drand beacon provides several public services to clients. A drand node\nexposes its public services on a gRPC endpoint as well as a REST JSON endpoint,\non the same port. The latter is especially useful if one wishes to retrieve\nrandomness from a JavaScript application.  Communication is protected through\nTLS by default. If the contacted node is using a self-signed certificate, the\nclient can use the `--tls-cert` flag to specify the server's certificate.\n\n### Create a Drand deployment\n\nConsult full instructions at [DEPLOYMENT](https://drand.love/operator/deploy/)\n\n### Fetching Public Randomness\n\nTo get the latest public random value, run\n```bash\ndrand get public --round <i> <group.toml>\n```\nwhere `<group.toml>` is the group identity file of a drand node. You can\nspecify the round number when the public randomness has been generated. If not\nspecified, this command returns the most recent random beacon.\n\nThe JSON-formatted output produced by drand is of the following form:\n```json\n{\n  \"round\": 367,\n  \"signature\": \"b62dd642e939191af1f9e15bef0f0b0e9562a5f570a12a231864afe468377e2a6424a92ccfc34ef1471cbd58c37c6b020cf75ce9446d2aa1252a090250b2b1441f8a2a0d22208dcc09332eaa0143c4a508be13de63978dbed273e3b9813130d5\",\n  \"previous_signature\": \"afc545efb57f591dbdf833c339b3369f569566a93e49578db46b6586299422483b7a2d595814046e2847494b401650a0050981e716e531b6f4b620909c2bf1476fd82cf788a110becbc77e55746a7cccd47fb171e8ae2eea2a22fcc6a512486d\",\n  \"randomness\": \"d7aed3686bf2be657e6d38c20999831308ee6244b68c8825676db580e7e3bec6\"\n}\n```\n\nHere `Signature` is the threshold BLS signature on the previous signature value\n`Previous` and the current round number. `Randomness` is the hash of\n`Signature`, to be used as the random value for this round. The field `Round`\nspecifies the index of `Randomness` in the sequence of all random values\nproduced by this drand instance. The **message signed** is therefore the\nconcatenation of the round number treated as a `uint64` and the previous\nsignature. At the moment, we are only using BLS signatures on the bls12-381 curves\nand the signature is made over G1.\n\n\n(Note that this command expects access to a drand group member,\nthis won't work with the current League of Entropy nodes, since they\nare not exposing their GRPC endpoints directly.)\n\n### Fetching Private Randomness\n\nTo get a private random value, run the following:\n\n```bash\ndrand get private group.toml\n```\nThe JSON-formatted output produced by drand should look like the following:\n\n```bash\n{\n    \"Randomness\": \"764f6e3eecdc4aba8b2f0119e7b2fd8c35948bf2be3f87ebb5823150c6065764\"\n}\n```\n\nThe command outputs a 32-byte hex-encoded random value generated from the local\nrandomness engine of the contacted server. If the encryption is not correct,\nthe command outputs an error instead.\n\n(Note that this is also not available with the League of Entropy nodes,\nwe recommend using this only with your own nodes, since private randomness\nis usually used for private keys or secrets and can be very sensitive.)\n\n### Using HTTP endpoints\n\nThis is the recommended way of using drand randomness, but don't forget to validate\nthe beacons' signatures against the group public key.\n\nOne may want to get the distributed key or public randomness by issuing a GET to a\nHTTP endpoint instead of using a gRPC client. Here is a basic example on how to\ndo so with curl.\n\nTo get the distributed key, you can use:\n```bash\ncurl <address>/group\n```\n\nSimilarly, to get the latest round of randomness from the drand beacon, you can\nuse\n```bash\ncurl <address>/public/latest\n```\n\n### JavaScript client\n\nTo facilitate the use of drand's randomness in JavaScript-based applications,\nwe provide [`drand-client`](https://github.com/drand/drand-client).\n\nFor more details on the procedure and instructions on how to use it,\nrefer to the\n[readme](https://github.com/drand/drand-client/blob/master/README.md).\n\n## Documentation\n\nHere is a list of all documentation related to drand:\n\n- To learn more about the protocol, the motivation and its backgronund\n  - For a high level presentation of motivations and background, here are some public\n  [slides](https://docs.google.com/presentation/d/1t2ysit78w0lsySwVbQOyWcSDnYxdOBPzY7K2P9UE1Ac/edit?usp=sharing)\n  about drand or online [video](https://www.youtube.com/watch?v=ydwW2HFFxNI&list=PLhuBigpl7lqu6xWpiXtbEzJQtlMH1tqoG&index=3).\n  - [A basic explainer of the cryptography behind drand](https://hackmd.io/@nikkolasg/HyUAgm234),\n  - [Protocol Specification](https://drand.love/docs/specification/)\n- API documentation\n  - [The client-side API documentation of drand](https://hackmd.io/@nikkolasg/HJ9lg5ZTE)\n- DevOps/Deployment documentation\n  - [Deployment instructions](https://drand.love/operator/deploy/)\n  - [Security Model](https://drand.love/docs/security-model/)\n\nAs well, here is a list of background readings w.r.t to the cryptography used in\ndrand:\n\n- [Pairing-based\n  cryptography](https://en.wikipedia.org/wiki/Pairing-based_cryptography) and\n  [Barreto-Naehrig curves](https://github.com/dfinity/bn).\n- [Pedersen's distributed key generation\n  protocol](https://link.springer.com/article/10.1007/s00145-006-0347-3) for\n  the setup.\n- Threshold [BLS\n  signatures](https://www.iacr.org/archive/asiacrypt2001/22480516.pdf) for the\n  generation of public randomness.\n- The resharing scheme used comes from the\n  [paper](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.55.2968&rep=rep1&type=pdf)\n  from  Y. Desmedt and S. Jajodia.\n- [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme) for the\n  encryption of private randomness.\n\nNote that drand was originally a [DEDIS](https://dedis.ch)-owned project that\nis now spinning off on its own Github organization. For related previous work\non public randomness, see DEDIS's academic paper [Scalable Bias-Resistant\nDistributed Randomness](https://eprint.iacr.org/2016/1067.pdf).\n\n## What's Next?\n\nAlthough being already functional, drand is still at an early development stage\nand there is a lot left to be done. The list of opened\n[issues](https://github.com/dedis/drand/issues) is a good place to start. On top\nof this, drand would benefit from higher-level enhancements such as the\nfollowing:\n\n+ Implement a more [failure-resilient DKG\n  protocol](https://eprint.iacr.org/2012/377.pdf) or an approach based on\n  verifiable succinct computations (zk-SNARKs, etc).\n+ Use / implement a faster pairing based library in JavaScript\n+ implemented ECIES private randomness in JavaScript (?)\n+ Add more unit tests\n+ Add a systemd unit file\n+ Support multiple drand instances within one node\n\nFeel free to submit feature requests or, even better, pull requests ;)\n\n## Acknowledgments\n\nThanks to [@herumi](https://github.com/herumi) for providing support on his\noptimized pairing-based cryptographic library used in the first version.\n\nThanks to Apostol Vassilev for its interest in drand and the extensive and\nhelpful discussions on the drand design.\n\nThanks to [@Bren2010](https://github.com/Bren2010) and\n[@grittygrease](https://github.com/grittygrease) for providing the native\nGolang bn256 implementation and for their help in the design of drand and\nfuture ideas.\n\nFinally, a special note for Bryan Ford from the [DEDIS lab](https://dedis.ch)\nfor letting me work on this project and helping me grow it.\n\n## Coverage\n\n- EPFL blog [post](https://actu.epfl.ch/news/epfl-helps-launch-globally-distributed-randomness-/)\n- Cloudflare crypto week [introduction\n  post](https://new.blog.cloudflare.com/league-of-entropy/) and the more\n  [technical post](https://new.blog.cloudflare.com/inside-the-entropy/).\n- Kudelski Security blog\n  [post](https://research.kudelskisecurity.com/2019/06/17/league-of-entropy/)\n- OneZero\n  [post](https://onezero.medium.com/the-league-of-entropy-is-making-randomness-truly-random-522f22ce93ce)\n  on the league of entropy\n- SlashDot\n  [post](https://science.slashdot.org/story/19/06/17/1921224/the-league-of-entropy-forms-to-offer-acts-of-public-randomness)\n- Duo\n  [post](https://duo.com/decipher/the-league-of-entropy-forms-to-offer-acts-of-public-randomness)\n- [Liftr](https://liftrinsights.com/liftr-cloud-look-ahead-cloudflare-introduces-the-league-of-entropy-googles-solution-to-keep-data-sets-private-and-more/)\n- (French)\n  [nextimpact](https://www.nextinpact.com/brief/cloudflare-presente-la-league-of-entropy--pour-obtenir-des-nombres-aleatoires-9074.html)\n\n## License\n\nThe drand project is dual-licensed under Apache 2.0 and MIT terms:\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/drand/drand/blob/master/LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](https://github.com/drand/drand/blob/master/LICENSE-MIT) or http://opensource.org/licenses/MIT)\n"
 },
 {
  "repo": "nucypher/pyUmbral",
  "language": "Python",
  "readme_contents": ".. role:: bash(code)\n   :language: bash\n\n=========\npyUmbral\n=========\n\n.. start-badges\n\n|version|  |circleci| |commits-since| |docs| |discord|\n\n.. |docs| image:: https://readthedocs.org/projects/pyumbral/badge/?style=flat\n    :target: https://readthedocs.org/projects/pyumbral\n    :alt: Documentation Status\n\n.. |discord| image:: https://img.shields.io/discord/411401661714792449.svg?logo=discord\n    :target: https://discord.gg/xYqyEby\n    :alt: Discord\n\n.. |circleci| image:: https://img.shields.io/circleci/project/github/nucypher/pyUmbral.svg?logo=circleci\n    :target: https://circleci.com/gh/nucypher/pyUmbral/tree/master\n    :alt: CircleCI build status\n\n.. |version| image:: https://img.shields.io/pypi/v/umbral.svg\n    :alt: PyPI Package latest release\n    :target: https://pypi.org/project/umbral\n\n.. |commits-since| image:: https://img.shields.io/github/commits-since/nucypher/pyumbral/v0.3.0.svg\n    :alt: Commits since latest release\n    :target: https://github.com/nucypher/pyUmbral/compare/v0.3.0...master\n\n.. end-badges\n\npyUmbral is the reference implementation of the Umbral_ threshold proxy re-encryption scheme.\nIt is open-source, built with Python, and uses OpenSSL_ and Cryptography.io_.\n\nUsing Umbral, Alice (the data owner) can *delegate decryption rights* to Bob for\nany ciphertext intended to her, through a re-encryption process performed by a\nset of semi-trusted proxies or *Ursulas*. When a threshold of these proxies\nparticipate by performing re-encryption, Bob is able to combine these independent\nre-encryptions and decrypt the original message using his private key.\n\n.. image:: docs/source/.static/umbral.svg\n  :width: 400 px\n  :align: center\n\npyUmbral is the cryptographic engine behind nucypher_,\na proxy re-encryption network to empower privacy in decentralized systems.\n\n.. _Umbral: https://github.com/nucypher/umbral-doc/blob/master/umbral-doc.pdf\n.. _Cryptography.io: https://cryptography.io/en/latest/\n.. _OpenSSL: https://www.openssl.org/\n.. _nucypher: https://github.com/nucypher/nucypher\n\nUsage\n=====\n\n**Key Generation**\n\nAs in any public-key cryptosystem, users need a pair of public and private keys.\nAdditionally, users that delegate access to their data (like Alice, in this example) need a signing keypair.\n\n.. code-block:: python\n\n    from umbral import SecretKey, Signer\n\n    # Generate Umbral keys for Alice.\n    alices_secret_key = SecretKey.random()\n    alices_public_key = alices_secret_key.public_key()\n\n    alices_signing_key = SecretKey.random()\n    alices_signer = Signer(alices_signing_key)\n    alices_verifying_key = alices_signing_key.public_key()\n\n    # Generate Umbral keys for Bob.\n    bobs_secret_key = SecretKey.random()\n    bobs_public_key = bobs_secret_key.public_key()\n\n\n**Encryption**\n\nNow let's encrypt data with Alice's public key.\nInvocation of ``pre.encrypt`` returns both the ``ciphertext`` and a ``capsule``.\nNote that anyone with Alice's public key can perform this operation.\n\nSince data was encrypted with Alice's public key,\nAlice can open the capsule and decrypt the ciphertext with her private key.\n\n\n.. code-block:: python\n\n    from umbral import encrypt, decrypt_original\n\n    # Encrypt data with Alice's public key.\n    plaintext = b'Proxy Re-Encryption is cool!'\n    capsule, ciphertext = encrypt(alices_public_key, plaintext)\n\n    # Decrypt data with Alice's private key.\n    cleartext = decrypt_original(alices_secret_key, capsule, ciphertext)\n\n\n**Re-Encryption Key Fragments**\n\nWhen Alice wants to grant Bob access to open her encrypted messages,\nshe creates *re-encryption key fragments*, or *\"kfrags\"*,\nwhich are next sent to N proxies or *Ursulas*.\n\n.. code-block:: python\n\n    from umbral import generate_kfrags\n\n    # Alice generates \"M of N\" re-encryption key fragments (or \"KFrags\") for Bob.\n    # In this example, 10 out of 20.\n    kfrags = generate_kfrags(delegating_sk=alices_secret_key,\n                             receiving_pk=bobs_public_key,\n                             signer=alices_signer,\n                             threshold=10,\n                             shares=20)\n\n\n**Re-Encryption**\n\nBob asks several Ursulas to re-encrypt the capsule so he can open it.\nEach Ursula performs re-encryption on the capsule using the ``kfrag``\nprovided by Alice, obtaining this way a \"capsule fragment\", or ``cfrag``.\n\nBob collects the resulting cfrags from several Ursulas.\nBob must gather at least ``threshold`` cfrags in order to activate the capsule.\n\n.. code-block:: python\n\n    from umbral import reencrypt\n\n    # Several Ursulas perform re-encryption, and Bob collects the resulting `cfrags`.\n    cfrags = list()           # Bob's cfrag collection\n    for kfrag in kfrags[:10]:\n        cfrag = pre.reencrypt(capsule=capsule, kfrag=kfrag)\n        cfrags.append(cfrag)    # Bob collects a cfrag\n\n\n**Decryption by Bob**\n\nFinally, Bob activates the capsule by attaching at least ``threshold`` cfrags,\nand then decrypts the re-encrypted ciphertext.\n\n.. code-block:: python\n\n    from umbral import decrypt_reencrypted\n\n    bob_cleartext = pre.decrypt_reencrypted(receiving_sk=bobs_secret_key,\n                                            delegating_pk=alices_public_key,\n                                            capsule=capsule,\n                                            cfrags=cfrags,\n                                            ciphertext=ciphertext)\n    assert bob_cleartext == plaintext\n\nSee more detailed usage examples in the docs_ directory.\n\n.. _docs : https://github.com/nucypher/pyUmbral/tree/master/docs\n\n\nQuick Installation\n==================\n\nTo install pyUmbral, simply use ``pip``:\n\n.. code-block:: bash\n\n  $ pip3 install umbral\n\n\nAlternatively, you can checkout the repo and install it from there.\nThe NuCypher team uses ``pipenv`` for managing pyUmbral's dependencies.\nThe recommended installation procedure is as follows:\n\n.. code-block:: bash\n\n    $ sudo pip3 install pipenv\n    $ pipenv install\n\nPost-installation, you can activate the project virtual environment\nin your current terminal session by running ``pipenv shell``.\n\nFor more information on ``pipenv``, find the official documentation here: https://docs.pipenv.org/.\n\n\nAcademic Whitepaper\n====================\n\nThe Umbral scheme academic whitepaper and cryptographic specifications\nare available on GitHub_.\n\n  \"Umbral: A Threshold Proxy Re-Encryption Scheme\"\n  *by David Nu\u00f1ez*.\n  https://github.com/nucypher/umbral-doc/blob/master/umbral-doc.pdf\n\n.. _GitHub: https://github.com/nucypher/umbral-doc/\n\n\nSupport & Contribute\n=====================\n\n- Issue Tracker: https://github.com/nucypher/pyUmbral/issues\n- Source Code: https://github.com/nucypher/pyUmbral\n\n\nSecurity\n========\n\nIf you identify vulnerabilities with _any_ nucypher code,\nplease email security@nucypher.com with relevant information to your findings.\nWe will work with researchers to coordinate vulnerability disclosure between our partners\nand users to ensure successful mitigation of vulnerabilities.\n\nThroughout the reporting process,\nwe expect researchers to honor an embargo period that may vary depending on the severity of the disclosure.\nThis ensures that we have the opportunity to fix any issues, identify further issues (if any), and inform our users.\n\nSometimes vulnerabilities are of a more sensitive nature and require extra precautions.\nWe are happy to work together to use a more secure medium, such as Signal.\nEmail security@nucypher.com and we will coordinate a communication channel that we're both comfortable with.\n"
 },
 {
  "repo": "jesusprubio/awesome-nodejs-pentest",
  "language": null,
  "readme_contents": "# Awesome Node.js for pentesters\n\n:skull_and_crossbones: Delightful [Node.js](https://nodejs.org) packages useful for penetration testing, exploiting, reverse engineer, cryptography ...\n\n<div align=\"center\">\n\t<p>\n\t\t<img src=\"images/logo.png\" alt=\"Project logo\">\n\t</p>\n\t<p>\n\t\t<a href=\"https://awesome.re\">\n\t\t\t<img src=\"https://awesome.re/badge.svg\" alt=\"Awesome\">\n\t\t</a>\n\t</p>\n</div>\n\n## Contents\n- [Awesome Node.js for penetration testers](#awesome-nodejs-for-penetration-testers)\n\t- [Contents](#contents)\n\t- [Misc](#misc)\n\t\t- [Web](#web)\n\t- [OSINT](#osint)\n\t\t- [Exposed](#exposed)\n\t\t- [Geolocation](#geolocation)\n\t- [Fingerprint](#fingerprint)\n\t\t- [Web](#web-1)\n\t\t- [Network map](#network-map)\n\t\t- [IP](#ip)\n\t\t- [Port](#port)\n\t\t- [CIDR](#cidr)\n\t\t- [ARP](#arp)\n\t\t- [DHCP](#dhcp)\n\t- [Brute-force](#brute-force)\n\t- [Fuzzing](#fuzzing)\n\t- [Exploitation](#exploitation)\n\t\t- [DNS](#dns)\n\t\t- [Network](#network)\n\t- [Post-exploitation](#post-exploitation)\n\t\t- [Reverse shell](#reverse-shell)\n\t- [Code review](#code-review)\n\t\t- [Dependencies](#dependencies)\n\t- [Cryptography](#cryptography)\n\t- [Malware](#malware)\n\t- [Reverse engineering](#reverse-engineering)\n\t\t- [radare](#radare)\n\t- [Extra](#extra)\n\t\t- [Checklists](#checklists)\n\t\t- [Vulnerable apps](#vulnerable-apps)\n\t- [Contribute](#contribute)\n\t- [License](#license)\n\n## Misc\n\n- [Pown.js](https://github.com/pownjs/pown) - Security testing an exploitation toolkit.\n- [Brosec](https://github.com/gabemarshall/Brosec) - Interactive reference tool to help security professionals utilize useful payloads and commands.\n- [netcat](https://github.com/roccomuso/netcat) - Netcat port in pure JS.\n- [Honeypot](https://github.com/Shmakov/Honeypot) - Low interaction honeypot that displays real time attacks.\n- [default-gateway](https://github.com/silverwind/default-gateway) - Get the default network gateway, cross-platform.\n\n### Web\n- [ZAP API](https://github.com/zaproxy/zap-api-nodejs) - Implementation to access the OWASP ZAP API.\n- [got](https://github.com/sindresorhus/got) - Simplified HTTP requests.\n\n## OSINT\n\n- [Sherlock.js](https://github.com/GitSquared/sherlock-js) - Find usernames across over 75 social networks - Remake of sdushantha/sherlock.\n- [whois](https://github.com/FurqanSoftware/node-whois) - Whois protocol client.\n\n### Exposed\n- [Shodan client](https://github.com/jesusprubio/shodan-client.js) - Library for accessing the new Shodan API.\n- [censys](https://github.com/b4dnewz/node-censys) - Unofficial wrapper for the Censys API.\n\n### Geolocation\n- [geoip](https://github.com/bluesmoon/node-geoip) - Native NodeJS implementation of MaxMind's GeoIP API.\n- [iplocation](https://github.com/roryrjb/iplocation) - Get IP location information using various providers.\n- [ipify](https://github.com/sindresorhus/ipify) - Get your public IP address.\n\n## Fingerprint\n\n### Web\n- [Harvester](https://github.com/TransparencyToolkit/Harvester) - Web crawling and document processing through a usable interface.\n- [Paskto](https://github.com/cloudtracer/paskto) - Passive web scanner.\n- [Squidwarc](https://github.com/N0taN3rd/Squidwarc) - High fidelity, user scriptable, archival crawler that uses Chrome or Chromium with or without a head.\n- [snap-shot-it](https://www.npmjs.com/package/snap-shot-it) - Smarter snapshot utility.\n\n### Network map\n- [evilscan](https://github.com/eviltik/evilscan) - Simple network scanner.\n- [nmap](https://github.com/Johnhhorton/node-nmap) - Wrapper interfacing with local Nmap installation.\n- [tcpie](https://github.com/silverwind/tcpie) - CLI tool to ping any TCP port.\n- [wifi](https://github.com/friedrith/node-wifi) - Tool to manage connections, scans, etc.\n\n### IP\n- [is-reachable](https://github.com/sindresorhus/is-reachable) - Check if servers are reachable.\n- [is-online](https://github.com/sindresorhus/is-online) - Check if the internet connection is up.\n- [public-ip](https://github.com/sindresorhus/public-ip) - Get your public IP address - very fast!.\n- [internal-ip](https://github.com/sindresorhus/internal-ip) - Get your internal IP address.\n- [ipaddr.js](https://github.com/whitequark/ipaddr.js) - IP address manipulation library.\n- [is-local-ip](https://github.com/DylanPiercey/is-local-ip) - Check that a given ip address is private.\n- [ip-ptr](https://github.com/silverwind/ip-ptr) - Get the PTR name for a given IPv4 or IPv6 address.\n\n### Port\n- [get-port](https://github.com/sindresorhus/get-port) - Get an available port.\n- [port-numbers](https://github.com/silverwind/port-numbers) - Get information on network port numbers and services, based on IANA's public listing.\n- [tcp-port-used](https://github.com/stdarg/tcp-port-used) - Simple module to check if a TCP port is already bound.\n\n### CIDR\n- [cidr](https://github.com/arminhammer/node-cidr) - Library for manipulating IP addresses and subnets using CIDR notation.\n- [cidr-tools](https://github.com/silverwind/cidr-tools) - Tools to work with IPv4 and IPv6 CIDR network lists.\n- [is-cidr](https://github.com/silverwind/is-cidr) - Check if a string is an IP address in CIDR.\n\n### ARP\n- [arp-scan](https://github.com/goliatone/arpscan) - Simple apr-scan wrapper.\n- [oui](https://github.com/silverwind/oui) - Look up MAC addresses for their vendor in the IEEE OUI.\n- [getmac](https://github.com/bevry/getmac) - Get the computer MAC address.\n\n### DHCP\n- [net-ping](https://github.com/nospaceships/node-net-ping) - Ping and trace route to many hosts at once.\n- [dhcp](https://github.com/infusion/node-dhcp) - DHCP client and server.\n\n## Brute-force\n\n- [nodebuster](https://github.com/phra/nodebuster) - Yet another DirBuster clone, to brute-force directories and files on HTTP(S) servers.\n- [subquest](https://github.com/skepticfx/subquest) - Fast, Elegant subdomain DNS scanner.\n\n## Fuzzing\n\n- [octo](https://github.com/mozillasecurity/octo) - Standard library for fuzzing.\n- [eslump](https://github.com/lydell/eslump) - Fuzz testing JavaScript parsers and suchlike programs.\n- [sinkdweller](https://github.com/rarecoil/sinkdweller) - A simple wrapper for radamsa.\n- [Faker.js](https://github.com/marak/Faker.js) - Generate massive amounts of realistic fake data.\n\n## Exploitation\n\n- [text2cpe](https://github.com/cloudtracer/text2cpe) - Reversed sorta implementation of CPE Name detection in ShoVAT based on research paper.\n- [PegaSwitch](https://github.com/reswitched/pegaswitch) - Exploit toolkit for the Nintendo Switch.\n\n### DNS\n- [whonow](https://github.com/brannondorsey/whonow) - Malicious DNS server for executing DNS Rebinding attacks on the fly.\n- [dref](https://github.com/mwrlabs/dref) - DNS Rebinding Exploitation Framework.\n\n### Network\n- [mitm](https://github.com/moll/node-mitm) - Intercept and mock outgoing network TCP connections and HTTP requests.\n- [toxy](https://github.com/h2non/toxy) - Hackable HTTP proxy for resiliency testing and simulated network conditions.\n- [slowloris.js](https://gist.github.com/ktfth/f24ff4cf7f23d87f56d02485c8f678f4) - DDoS script\n\n## Post-exploitation\n\n### Reverse shell\n- [Reverse Shell aaS](https://github.com/lukechilds/reverse-shell) - Easy to remember reverse shell that should work on most Unix-like systems.\n- [alveare](https://github.com/roccomuso/alveare) - Multi-client, multi-threaded reverse shell handler.\n\n## Code review\n\n- [electronegativity](https://github.com/doyensec/electronegativity) - Static analysis tool to identify misconfigurations and security anti-patterns in Electron applications.\n- [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security) - This project will help identify potential security hotspots, but finds a lot of false positives which need triage by a human.\n- [repo-supervisor](https://github.com/auth0/repo-supervisor) - Scan your code for security misconfiguration, search for passwords and secrets.\n- [vuln-regex-detector](https://github.com/davisjam/vuln-regex-detector) - Detect vulnerable regexes. REDOS, catastrophic backtracking.\n\n### Dependencies\n- [run-npm-audit](https://www.npmjs.com/package/run-npm-audit) - Use npm audit programmatically.\n- [npm-check-updates](https://github.com/tjunnone/npm-check-updates) - Find newer versions of package dependencies than what your package.json or bower.json allows.\n- [depcheck](https://github.com/depcheck/depcheck) - Check your npm module for unused dependencies.\n- [auditjs](https://github.com/OSSIndex/auditjs) - Audits a package.json using the OSS Index v3 REST API to identify known vulnerabilities and outdated package versions.\n\n## Cryptography\n\n- [crypto-js](https://github.com/brix/crypto-js) - Library of crypto standards.\n- [rsa](https://github.com/rzcoder/node-rsa) - Pure JavaScript RSA library.\n- [seedrandom](https://github.com/davidbau/seedrandom) - Seeded random number generator for JavaScript.\n- [Qiskit.js](https://github.com/Qiskit/qiskit-js/tree/master/packages/qiskit-devs) - True random numbers generation through quantum computing.\n- [upash](https://github.com/simonepri/upash) - Unified API for all password hashing algorithms.\n\n## Malware\n\n- [nodeCrypt](https://github.com/atmoner/nodeCrypto) - Linux Ransomware written in NodeJs that encrypt predefined files.\n- [malware-jail](https://github.com/HynekPetrak/malware-jail) - Sandbox for semi-automatic Javascript malware analysis, deobfuscation and payload extraction.\n- [virustotal-api](https://github.com/yousefvand/virustotal-api) - [Virustotal](https://www.virustotal.com) API v2.0 wrapper.\n- [MalwareWorld](https://github.com/carlospolop/MalwareWorld) - System based on +500 blacklists and 5 external intelligences to detect internet potencially malicious hosts.\n- [box.js](https://github.com/CapacitorSet/box-js) - Utility to analyze malicious JavaScript.\n\n## Reverse engineering\n\n### radare\n- [r2pipe](https://github.com/radare/radare2-r2pipe/tree/master/nodejs/r2pipe) - Pipe bindings for radare2.\n- [frida-node](https://github.com/frida/frida-node) - Bindings for Frida.\n- [r2Frida](https://github.com/nowsecure/r2frida) - Radare2 and Frida better together.\n\n## Extra\n\n### Checklists\n- [Strong Node.js](https://github.com/jesusprubio/strong-node) - More than 100 security checks for your Node.js API.\n- [Security checklist](https://blog.risingstack.com/node-js-security-checklist) - Quick list to cover the most critical risks.\n- [npm security cheat sheet](https://snyk.io/blog/ten-npm-security-best-practices) - 10 npm Security Best Practices.\n- [Best Practices](https://github.com/i0natan/nodebestpractices#6-security-best-practices) - Security section of this general list.\n\n### Vulnerable apps\n- [OWASP NodeGoat](https://github.com/OWASP/NodeGoat) - Provides an environment to learn how OWASP Top 10 security risks and how to effectively address them.\n- [OWASP Juice Shop](https://github.com/bkimminich/juice-shop) - Probably the most modern and sophisticated insecure web application.\n- [DVNA](https://github.com/appsecco/dvna) - Damn Vulnerable Application is a simple application to demonstrate OWASP Top 10 Vulnerabilities and guide on fixing and avoiding these vulnerabilities.\n\n## Contribute\n\n:sunglasses: If you'd like to help please take a look to our [contribution guidelines](.github/CONTRIBUTING.md).\n\n## License\n\n[![Creative Commons License](https://mirrors.creativecommons.org/presskit/buttons/88x31/svg/by.svg)](http://creativecommons.org/licenses/by/4.0)\n\n:penguin: This work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0).\n"
 },
 {
  "repo": "upperlinecode/fe-js-cryptography",
  "language": "JavaScript",
  "readme_contents": "# Cryptographic Functions\n\nCryptography is the study of decoding and encoding codes and cyphers. In this lab, you'll be writing javascript functions that decode and encode strings of text!\n\n## Instructions\n\nFork and clone this lab, and then cd into the lab directory. Run `npm install` to install the needed dependencies. Open `index.html` to see the tests, and follow along with the instructions below to get them to pass.\n\nYou'll be writing javascript functions inside of `ciphers.js` - each function will perform a different cryptographic task.\n\n### Caesar Cipher\n\nA Caesar cipher is one of the simplest (and easiest cracked) encryption methods. It is a Substitution Cipher that involves replacing each letter of the secret message with a different letter of the alphabet which is a fixed number of positions further in the alphabet.\n\nFor example: \"Cat\" with a position shift of 3 is: \"Fdw\"\n\nWrite a caesar encryption and decryption function in `ciphers.js`.\n\n### Atbash Cipher\nThe Atbash cipher is a very specific case of a substitution cipher where the letters of the alphabet are reversed. In otherwords, all As are replaced with Zs, all Bs are replaced with Ys, and so on.\n\nBecause reversing the alphabet twice will get you actual alphabet, you can encipher and decipher a message using the exact same algorithm - so only one function needed here!\n\n```\nPlaintext: This is a secret message\nCiphertext: Gsrh rh z hvxivg nvhhztv\n```\n\n### Keyword Cipher\nThe Keyword cipher is identical to the Caesar Cipher with the exception that the substitution alphabet used can be represented with a keyword (In this case, KEYWORD).\n\nTo create a substitution alphabet from a keyword, you first write down the alphabet. Below this you write down the keyword (omitting duplicate letters) followed by the remaining unused letters of the alphabet.\n\n```\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nKEYWORDABCFGHIJLMNPQSTUVXZ\n```\n\nTo encipher a plaintext message, you convert all letters from the top row to their corresponding letter on the bottom row (A to K, B to E, etc).\n"
 },
 {
  "repo": "ChiragVaghela10/CryptographywithTCP-IP",
  "language": "C",
  "readme_contents": "# CryptographywithTCP-IP\nThis repository is about transferring the secure data over LAN with the help of socket programming using client-server architecture. The data will be secured by implementing RSA(cryptography) Algorithm. For simplicity only 64-bit security is used unlike real implementation which uses 512-bit to 1024-bit security(used by banks,mililtary etc.).\n\nClient request for the file to server, with its name and a public key, generated by client itself. If the file is available to the server it will encrypt it with public key and send 'encrypted file' instead of original file to the client. Server in turn will decrypt the received 'encrypted file' with its own private key.\n\nKey Features and install instructions:\n1. You can have client at say system-1 and Server at say system-2.\n2. You can create executable by just moving to the folder and using simple 'make' command: i.e.: $ cd  ~/client/ and then $ make\n,same with server, move the server folder $cd ~/server/ and then $ make .\n3.Next time you make any changes in the source files or header files while expermenting just run 'make' command it will handle all the hurdle of compilation but make sure 'Makefile' is not altered or removed.\n4. Run 'server' excutable at system-2 with port address you want to assign for transmission. i.e.: ./server 4444\n5. When server is established, Run 'client' executable on system-1 with ip-address of server, filename of requested file and port number used by server. i.e. if we consider client and server are on same system then ip would be 127.0.0.1: ./client 127.0.0.1  message.txt 4444\n6. There will be a new file with filename you requested in your 'client' folder.\n"
 },
 {
  "repo": "exthereum/exth_crypto",
  "language": "Elixir",
  "readme_contents": "# ExthCrypto [![CircleCI](https://circleci.com/gh/exthereum/exth_crypto.svg?style=svg)](https://circleci.com/gh/exthereum/exth_crypto)\n\nExthCrypto handles the majority of cryptographic operations for Exthereum. The goal of this project is to give each Exthereum project a common set of cryptographic functions where the backends can be swapped out as need be. Additionally, more complicated protocols (such as ECIES) can be implemented and tested in this project.\n\nNote: we opt, whenever possible, to use erlang core or open-source implementations for all functions. The goal of this project is to create a consistent API for cryptographic functions that can be referenced from Exthereum projects. The goal of this project is not to re-write such functions in native erlang or Elixir.\n\nWe currently support:\n\n * AES symmetric encryption in block mode and (simplified) stream mode\n * Elliptic Curve Diffie Hellman (ECDH) key exchange\n * ECIES perfect-forward secret generation\n * SHA1, SHA2 and Keccak one-way cryptographic hash functions\n * NIST-SP-800-56 key derivation function\n * HMAC with SHA1, SHA2 or Keccak\n * Elliptic Curve Digital Signature Algorithm (ECDSA) with public key recovery\n\n## Installation\n\nIf [available in Hex](https://hex.pm/docs/publish), the package can be installed\nby adding `exth_crypto` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [{:exth_crypto, \"~> 0.1.6\"}]\nend\n```\n\nDocumentation can be generated with [ExDoc](https://github.com/elixir-lang/ex_doc)\nand published on [HexDocs](https://hexdocs.pm). Once published, the docs can\nbe found at [https://hexdocs.pm/exth_crypto](https://hexdocs.pm/exth_crypto).\n\n"
 },
 {
  "repo": "webview-crypto/react-native-webview-crypto",
  "language": "JavaScript",
  "readme_contents": "# react-native-webview-crypto\n\n[![npm](https://img.shields.io/npm/v/react-native-webview-crypto?style=flat-square)](https://www.npmjs.com/package/react-native-webview-crypto)\n\nWorking version based on /saulshanabrook/react-native-webview-crypto and PR https://github.com/webview-crypto/react-native-webview-crypto/pull/9\n\nThis brings `window.crypto.subtle` to your React Native application. It does this by communicating with a hidden WebView, which performs the actual computation.\n\nRefer to the [`webview-crypto`](https://github.com/webview-crypto/webview-crypto) repo for most of the code and some caveats.\n\n## Installation\n\n```sh\nnpm install --save react-native-webview react-native-webview-crypto\nreact-native link\n```\n\n### known issues\n\nif you use react-native-crypto and get warnings about cyclic require make sure to import it before the bridge\n\n```\nimport 'react-native-crypto'\nimport WebviewCrypto from 'react-native-webview-crypto'\n```\n\n### getRandomValues\n\nfor complete compatability with webcrypto (window.crypto.getRandomValues) you can install react-native-crytpo or react-native-get-random-values\n\n## Usage\n\nRendering the `PolyfillCrypto` will start up a WebView to transparently proxy all the crypto calls to.\n\n```javascript\nimport React, { Component } from 'react'\nimport { View } from 'react-native'\n\nimport App from './app'\n\nimport PolyfillCrypto from 'react-native-webview-crypto'\n\nclass TopLevelComponent extends Component {\n  render() {\n    return (\n      <View>\n        <PolyfillCrypto />\n        <App />\n      </View>\n    )\n  }\n}\n\nAppRegistry.registerComponent('WhateverName', () => TopLevelComponent)\n```\n\nNow, in any of your code, you can access `window.crypto.subtle`, just like you would in a browser.\n\n[Example repo](https://github.com/gooddollar/gun-webcrypto-react-native)\nThere is also an [example repo](https://github.com/webview-crypto/react-native-webview-crypto-example) which runs some example crypto using this library.\n\n_This project was funded by [Burke Software and Consulting LLC](http://burkesoftware.com/) for [passit](http://passit.io/)._\n"
 },
 {
  "repo": "korlibs-archive/krypto",
  "language": "Kotlin",
  "readme_contents": "# Moved to <https://github.com/korlibs/korge/tree/main/krypto>\n"
 },
 {
  "repo": "handshake-org/urkel",
  "language": "JavaScript",
  "readme_contents": "# Urkel Tree\n\n[![Build Status][ci-status-img]][ci-status-url]\n[![Coverage Status][coverage-status-img]][coverage-status-url]\n\n\nAn optimized and cryptographically provable key-value store.\n\n## Design\n\nThe urkel tree was created for the [Handshake protocol][1], and is implemented\nas a base-2 merkelized trie. It was created as an alternative to [Ethereum's\nbase-16 trie][2] (which was the initial choice for Handshake name proofs).\n\nUrkel stores nodes in a series of append-only files for snapshotting and crash\nconsistency capabilities. Due to these presence of these features, Urkel has\nthe ability to expose a fully transactional database.\n\nThe primary advantages in using an urkel tree over something like Ethereum's\ntrie are:\n\n- __Performance__ - Stores nodes in flat files instead of an existing key-value\n  store like LevelDB. Urkel is its _own_ database. In benchmarks, this results\n  in a 100x+ speedup.\n- __Simplicity__ - Maintains only two types of nodes: internal nodes and leaf\n  nodes.\n- __Storage__ - Internal nodes are small (a constant size of 76 bytes on disk).\n  This is important as internal nodes are frequently rewritten during updates\n  to the tree.\n- __Proof Size__ - Sibling nodes required for proofs are a constant size of 32\n  bytes, similar to a typical merkle tree proof. This results in an extremely\n  compact proof size.\n\nThe final benefit was the primary focus of the Handshake protocol. As name\nresolutions are a frequently requested operation, Handshake required proof\nsizes less than 1kb even after hundreds of millions of leaves are present in\nthe tree.\n\nHistory independence and non-destruction are also inherent properties of the\nurkel tree, just the same as the Ethereum trie. Note that urkel should only be\nused with uniformally distributed keys (i.e. hashed).\n\nCompaction, while available, is currently inefficient and requires user\nintervention. This will be optimized in a future C implementation of the urkel\ntree. In the meantime, we don't see this as a problem as long as frequent\ncommissions are avoided in consensus applications of the tree (i.e. avoid\ncommitting the tree on every block).\n\nA more in-depth description is available in the [Handshake Whitepaper][5].\n\n## Backends\n\nThere used to be three different backends:\n\n- `urkel/trie` - A simple base-2 merkelized trie whose design shares\n  similarities with earlier work done by [Bram Cohen][3].\n- `urkel/radix` - A base-2 merkelized radix tree, similar\n  to Amaury S\u00e9chet's [Merklix tree][4].\n- `urkel/optimized` - A memory and storage optimized version of the simplified\n  trie.\n\nThese can all still be found in the\n[`old-variants`](https://github.com/handshake-org/urkel/tree/old-variants)\nbranch of this repository.\nOnly the `radix` variant is currently maintained by The Handshake Developers.\n\n## Usage\n\n```javascript\nconst bcrypto = require('bcrypto');\nconst urkel = require('urkel');\nconst {BLAKE2b, randomBytes} = bcrypto;\nconst {Tree, Proof} = urkel;\n\n// Create a tree using blake2b-256\n// and a depth/key-size of 256 bits.\nconst tree = new Tree({\n  hash: BLAKE2b,\n  bits: 256,\n  prefix: '/path/to/my/db'\n});\n\nawait tree.open();\n\nlet key;\n\nconst txn = tree.transaction();\n\nfor (let i = 0; i < 500; i++) {\n  const k = randomBytes(32);\n  const v = randomBytes(300);\n\n  await txn.insert(k, v);\n\n  key = k;\n}\n\n// Commit and get the new root.\nconst root = await txn.commit();\nconst snapshot = tree.snapshot(root);\n\n// Prove a key/value from our snapshotted root.\nconst proof = await snapshot.prove(key);\nconst [code, value] = proof.verify(root, key, BLAKE2b, 256);\n\nif (code !== 0) {\n  console.log('Could not verify proof: %s.', Proof.code(code));\n  return;\n}\n\nif (value) {\n  console.log('Valid proof for %s: %s',\n    key.toString('hex'), value.toString('hex'));\n} else {\n  console.log('Absence proof for %s.', key.toString('hex'));\n}\n\n// Snapshots and transactions are async iterators.\n// If your environment supports `for await`, you\n// can use it with a snapshot, tree, or transaction.\nfor await (const [key, value] of snapshot) {\n  console.log('Iterated over item:');\n  console.log('%s: %s', key.toString('hex'), value.toString('hex'));\n}\n\n// Otherwise, the non-for-await way is available.\nconst iter = snapshot.iterator();\n\nwhile (await iter.next()) {\n  const {key, value} = iter;\n  console.log('Iterated over item:');\n  console.log('%s: %s', key.toString('hex'), value.toString('hex'));\n}\n\nawait tree.close();\n```\n\n## Contribution and License Agreement\n\nIf you contribute code to this project, you are implicitly allowing your code\nto be distributed under the MIT license. You are also implicitly verifying that\nall code is your original work. `</legalese>`\n\n## License\n\n- Copyright (c) 2018, Christopher Jeffrey (MIT License).\n\nSee LICENSE for more info.\n\n[1]: https://handshake.org\n[2]: https://github.com/ethereum/wiki/wiki/Patricia-Tree\n[3]: https://github.com/bramcohen/MerkleSet\n[4]: https://www.deadalnix.me/2016/09/24/introducing-merklix-tree-as-an-unordered-merkle-tree-on-steroid/\n[5]: https://handshake.org/files/handshake.txt\n[coverage-status-img]: https://coveralls.io/repos/github/handshake-org/urkel/badge.svg?branch=master\n[coverage-status-url]: https://coveralls.io/github/handshake-org/urkel?branch=master\n[ci-status-img]: https://github.com/handshake-org/urkel/workflows/Build/badge.svg\n[ci-status-url]: https://github.com/handshake-org/urkel/tree/master\n"
 },
 {
  "repo": "poojagarg/ECC",
  "language": "C++",
  "readme_contents": "Elliptic Curve Cryptography\nImplementation in C++\n\nPlease refer to manual.pdf to use this implementation.\n\nThis project implements the following-<br>\n1- Finite Field Arithmetic (of characteristic of Arbitrary precision)<br>\n2- Elliptic Curve Arithmetic<br>\n3- Attacks- Pollard Rho, Pohlig Hellman<br>\n4- Elliptic Curve Cryptosystems- Diffie-Hellman Key Exchange, Digital Signature Schemes (ECDSA, ELGAMAL), Public Key Encryption (ELGAMAL)<br>\n"
 },
 {
  "repo": "etienne-martin/CryptoJS.swift",
  "language": "Swift",
  "readme_contents": "# CryptoJS.swift\nCross-platform cryptographic functions in swift using the [Crypto JS library](https://github.com/brix/crypto-js). Allows you to share the same crypto between a native iOS/OSX application and a web application.\n\nCompatible with https://github.com/brix/crypto-js.\n\n## \u26a0\ufe0f New project in development\n\nThe javascript library used to implement the cryptography in this project is no longer maintained and suffers severe performance limitations over the new WebCrypto API. A new modern library called [WebCrypto.swift](https://github.com/etienne-martin/WebCrypto.swift) is being developed. [WebCrypto.swift](https://github.com/etienne-martin/WebCrypto.swift) leverages the power of the WebCrypto API while keeping backwards compatibility with this project.\n\nNo new development will happen in this repository. Do not submit new feature requests here.\nIf you want something to be implemented, please submit an issue in the\nnew repository:\n\nhttps://github.com/etienne-martin/WebCrypto.swift\n\n### Platforms Supported\n\niOS  \nmacOS  \nWeb browsers  \nopenSSL  \n\n### Installation\n\nDrag and drop [CryptoJS.swift](https://raw.githubusercontent.com/etienne-martin/CryptoJS.swift/master/Crypto%20JS/CryptoJS.swift) and the [javascript files](https://github.com/etienne-martin/CryptoJS.swift/tree/master/Crypto%20JS/components) in your Xcode project.\n\n## AES\n\nSupported modes: CBC (the default), CFB, CTR, OFB, ECB  \nSupported padding schemes: Pkcs7 (the default), Iso97971, AnsiX923, Iso10126, ZeroPadding, NoPadding\n\n```swift\n// Load the AES module\nlet AES = CryptoJS.AES()\n\n// Basic AES encryption\nlet encrypted = AES.encrypt(\"Secret message\", password: \"password123\")\nlet decrypted = AES.decrypt(encrypted, password: \"password123\")\n\n// AES encryption with custom mode and padding\nCryptoJS.mode.ECB() // Load custom mode\nCryptoJS.pad.Iso97971() // Load custom padding scheme\nlet encrypted = AES.encrypt(\"Secret message\", password: \"password123\", options:[ \"mode\": CryptoJS.mode().ECB, \"padding\": CryptoJS.pad().Iso97971 ])\nlet decrypted = AES.decrypt(encrypted, password: \"password123\", options:[ \"mode\": CryptoJS.mode().ECB, \"padding\": CryptoJS.pad().Iso97971 ])\n```\n##### Compatible with OpenSSL\n\n```bash\n# Basic openSSL AES encryption\nopenssl enc -aes-256-cbc -e -in /foo/thePlainTextFile.txt -out /bar/theEncryptedFile.txt -pass pass:\"password123\" -base64\n\n# Basic openSSL AES decryption\nopenssl enc -aes-256-cbc -d -in /foo/theEncryptedFile.txt -out /bar/theDecryptedFile.txt -pass pass:\"password123\" -base64\n```\n\n## TripleDES\n\n```swift\n// Load the TripleDES module\nlet TripleDES = CryptoJS.TripleDES()\n\n// Basic TripleDES encryption\nlet encrypted = TripleDES.encrypt(\"secretMessage\", password: \"password123\")\nlet decrypted = TripleDES.decrypt(encrypted, password: \"password123\")\n```\n\n## DES\n\n```swift\n// Load the DES module\nlet DES = CryptoJS.DES()\n\n// Basic DES encryption\nlet encrypted = DES.encrypt(\"secretMessage\", password: \"password123\")\nlet decrypted = DES.decrypt(encrypted, password: \"password123\")\n```\n\n## Hashers\n\n```swift\nlet MD5 = CryptoJS.MD5()\nlet SHA1 = CryptoJS.SHA1()\nlet SHA224 = CryptoJS.SHA224()\nlet SHA256 = CryptoJS.SHA256()\nlet SHA384 = CryptoJS.SHA384()\nlet SHA512 = CryptoJS.SHA512()\nlet SHA3 = CryptoJS.SHA3()\nlet RIPEMD160 = CryptoJS.RIPEMD160()\n\nvar hash = MD5.hash(\"mystring\")\nvar hash = SHA1.hash(\"mystring\")\nvar hash = SHA224.hash(\"mystring\")\nvar hash = SHA256.hash(\"mystring\")\nvar hash = SHA384.hash(\"mystring\")\nvar hash = SHA3.hash(\"mystring\")\nvar hash = SHA512.hash(\"mystring\")\nvar hash = SHA3.hash(\"mystring\",outputLength: 256)\nvar hash = RIPEMD160.hash(\"mystring\")\n```\n\n## Contributing\n\nWhen contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change.\n\nUpdate the README.md with details of changes to the plugin.\n\nUpdate the [examples](https://github.com/etienne-martin/CryptoJS.swift/blob/master/Crypto%20JS/ViewController.swift) by demonstrating the changes to the plugin.\n\nBuild the project & test all the features before submitting your pull request.\n\n## Authors\n\n* **Etienne Martin** - *Initial work* - [etiennemartin.ca](http://etiennemartin.ca/)\n* **Mladen Kajic** - *Improvements* - [mladen.kajic2@mail.dcu.ie](mailto:mladen.kajic2@mail.dcu.ie)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.txt](https://github.com/etienne-martin/CryptoJS.swift/blob/master/LICENSE.txt) file for details.\n"
 },
 {
  "repo": "arkan/angular-cryptography",
  "language": "JavaScript",
  "readme_contents": "[Middleout Angular Cryptography](http://ngmodules.org/modules/angular-cryptography)\n==================\n\nAngularJS Module that integrate cryptography functionality offers from the [crypto-js](https://code.google.com/p/crypto-js/) project. Provides a simple service to encrypt and decrypt using AES.\n\nDependencies\n------------\n- [AngularJS 1.1.4 + ](http://angularjs.org/) (tested with 1.1.4 and 1.2.16)\n- [Crypto-js 3.1.2 AES modul](https://github.com/sytelus/CryptoJS/tree/master/rollups/aes.js)\n\n##Install (bower)\n\n* bower install angular-cryptography\n```html\n<script type='text/javascript' src=\"[bower_components/]cryptojslib/rollups/aes.js\"></script>\n<script type='text/javascript' src=\"[bower_components/]angular-cryptography/mdo-angular-cryptography.js\"></script>\n```\n\n##Install (manual)\n\n* download [js file](https://github.com/sytelus/CryptoJS/tree/master/rollups/aes.js)\n* download [js file](https://github.com/middleout/angular-cryptography/blob/master/mdo-angular-cryptography.js)\n* added javascript file to your app html file\n```html\n<script type='text/javascript' src=\"js/aes.js\"></script>\n<script type='text/javascript' src=\"js/mdo-angular-cryptography.js\"></script>\n```\n\n##Usage\n\n* add module dependency ('mdo-angular-cryptography') to angular\n```js\nvar demoApp = angular.module('app', ['services', 'mdo-angular-cryptography']);\n```\n\n* setup the encryption key in your config\n```js\nangular.module.('app').config(['$cryptoProvider', function($cryptoProvider){\n\t$cryptoProvider.setCryptographyKey('ABCD123');\n});\n```\n\nExample Service Usage\n\n```js\nangular.module('app').controller('ExampleController', ['$scope', '$crypto', function($scope, $crypto) {\n\n\tvar encrypted = $crypto.encrypt('some plain text data');\n\tvar decrypted = $crypto.decrypt(encrypted);\n});\n\n```\n\nor you can use a custom key everytime\n\n```js\nangular.module('app').controller('ExampleController', ['$scope', '$crypto', function($scope, $crypto) {\n\n\tvar encrypted = $crypto.encrypt('some plain text data', 'some custom key');\n\tvar decrypted = $crypto.decrypt(encrypted, 'some other custom key');\n});\n\n```\n\nThat's all !\n\nIssues\n-------------\n- Report at the github [issue tracker](https://github.com/middleout/angular-cryptography/issues)\n\nLicense\n--------------\n\nMiddleout Angular Cryptography is released under the [Apache License](http://opensource.org/licenses/Apache-2.0).\n"
 },
 {
  "repo": "BitcoinPHP/BitcoinECDSA.php",
  "language": "PHP",
  "readme_contents": "[![Build](https://travis-ci.org/BitcoinPHP/BitcoinECDSA.php.svg?branch=master)](https://travis-ci.org/BitcoinPHP/BitcoinECDSA.php) &nbsp;\n[![Quality Score](https://scrutinizer-ci.com/g/BitcoinPHP/BitcoinECDSA.php/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/BitcoinPHP/BitcoinECDSA.php/?branch=master) &nbsp;\n[![Latest Stable Version](https://poser.pugx.org/bitcoin-php/bitcoin-ecdsa/v/stable.svg)](https://packagist.org/packages/bitcoin-php/bitcoin-ecdsa) &nbsp;\n[![Downloads](http://img.shields.io/packagist/dt/bitcoin-php/bitcoin-ecdsa.svg?style=flat)](https://packagist.org/packages/bitcoin-php/bitcoin-ecdsa)\n\n\nWARNING\n===============\n\nThis piece of software is provided without warranty of any kind, use it at your own risk.\n\nREQUIREMENTS\n===============\n\n*php 5.4.0* or newer.\n\n*php5-gmp* needs to be installed.\n\nIf you want to launch the test file you need to be under a unix system with libbitcoin intalled on it.\n\nUSAGE\n===============\n\n**Installation**\n\nBest way is to use composer\n```\ncomposer require bitcoin-php/bitcoin-ecdsa\n```\nAlternatively add following snippet in you composer.json\n```\n\"bitcoin-php/bitcoin-ecdsa\" : \">=1.3\"\n```\n\n**Instanciation**\n\n```php\nuse BitcoinPHP\\BitcoinECDSA\\BitcoinECDSA;\nrequire_once(\"src/BitcoinPHP/BitcoinECDSA/BitcoinECDSA.php\");\n$bitcoinECDSA = new BitcoinECDSA();\n```\n\n**Set a private key**\n\n```php\n$bitcoinECDSA->setPrivateKey($k);\n```\nexamples of private keys :\n\n4C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D\n00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC\n\n**Generate a random private key**\n\n```php\n$bitcoinECDSA->generateRandomPrivateKey($nonce);\n```\n\nThe nonce is optional, typically the nonce is a chunck of random data you get from the user. This can be mouse coordinates.\nUsing a nonce adds randomness, which means the generated private key is stronger.\n\n**Get the private key**\n\n```php\n$bitcoinECDSA->getPrivateKey();\n```\n\nReturns the private key.\n\n**Get the Wif**\n\n```php\n$bitcoinECDSA->getWif();\n```\n\nreturns the private key under the Wallet Import Format\n\n\n**Get the Public Key**\n\n```php\n$bitcoinECDSA->getPubKey();\n```\nReturns the compressed public key.\nThe compressed PubKey starts with 0x02 if it's y coordinate is even and 0x03 if it's odd, the next 32 bytes corresponds to the x coordinates.\n\nExample : 0226c50013603b085fbc26411d5d7e564b252d88964eedc4e01251d2d495e92c29\n\n**Get the Uncompressed Public Key**\n\n```php\n$bitcoinECDSA->getUncompressedPubKey();\n```\n\nReturns the uncompressed PubKey.\nThe uncompressed PubKey starts with 0x04, the next 32 bytes are the x coordinates, the last 32 bytes are the y coordinates.\n\nExample : 04c80e8af3f1b7816a18aa24f242fc0740e9c4027d67c76dacf4ce32d2e5aace241c426fd288a9976ca750f1b192d3acd89dfbeca07ef27f3e5eb5d482354c4249\n\n**Get the coordinates of the Public Key**\n\n```php\n$bitcoinECDSA->getPubKeyPoints();\n```\n\nReturns an array containing the x and y coordinates of the public key\n\nExample :\nArray ( [x] => a69243f3c4c047aba38d7ac3660317629c957ab1f89ea42343aee186538a34f8 [y] => b6d862f39819060378542a3bb43ff76b5d7bb23fc012f09c3cd2724bebe0b0bd ) \n\n**Get the Address**\n\n```php\n$bitcoinECDSA->getAddress();\n```\n\nReturns the compressed Bitcoin Address.\n\n**Get the uncompressed Address**\n\n```php\n$bitcoinECDSA->getUncompressedAddress();\n```\n\nReturns the uncompressed Bitcoin Address.\n\n\n**Validate an address**\n\n```php\n$bitcoinECDSA->validateAddress($address);\n```\nReturns true if the address is valid and false if it isn't\n\n\n**Validate a Wif key**\n\n```php\n$bitcoinECDSA->validateWifKey($wif);\n```\nReturns true if the WIF key is valid and false if it isn't\n\n\nSignatures\n===============\n\n**Sign a message**\n\n```php\n$bitcoinECDSA->signMessage('message');\n```\n\nReturns a satoshi client standard signed message.\n\n\n**verify a message**\n\n```php\n$bitcoinECDSA->checkSignatureForRawMessage($signedMessage);\n```\n\nReturns true if the signature is matching the address and false if it isn't.\n\n\n**sign a sha256 hash**\n\n```php\n$bitcoinECDSA->signHash($hash);\n```\n\nReturns a DER encoded hexadecimal signature.\n\n\n**verify a signature**\n\n```php\n$bitcoinECDSA->checkDerSignature($pubKey, $signature, $hash)\n```\n\nReturns true if the signature is matching the public key and false if it isn't.\n\nExamples\n===============\n - [Generate an address](https://github.com/BitcoinPHP/BitcoinECDSA.php/blob/master/Examples/generateAddress.php)\n - [Sign a message](https://github.com/BitcoinPHP/BitcoinECDSA.php/blob/master/Examples/signMessage.php)\n - [Verify a message](https://github.com/BitcoinPHP/BitcoinECDSA.php/blob/master/Examples/verifyMessage.php)\n - [Import or export a private key using WIF](https://github.com/BitcoinPHP/BitcoinECDSA.php/blob/master/Examples/wif.php)\n\nLicense\n===============\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
 },
 {
  "repo": "cryptodev-linux/cryptodev-linux",
  "language": "C",
  "readme_contents": "# cryptodev-linux\n\nThis is a `/dev/crypto` device driver, equivalent to those in OpenBSD or\nFreeBSD. The main idea is to access existing ciphers in kernel space\nfrom userspace, thus enabling the re-use of a hardware implementation of a\ncipher.\n\nFor questions and suggestions, please use the homepage at https://github.com.\nCryptodev-linux is hosted at https://github.com/cryptodev-linux/cryptodev-linux.\n\nOlder releases are also available at http://cryptodev-linux.org.\n\n## How to combine with cryptographic libraries\n\n### GnuTLS\n\nGnuTLS needs to be compiled with `--enable-cryptodev` in order to take\nadvantage of `/dev/crypto`. GnuTLS 3.0.14 or later is recommended.\n\n### OpenSSL\n\nOpenSSL needs `-DHAVE_CRYPTODEV` and `-DUSE_CRYPTODEV_DIGESTS` flags\nduring compilation. Note that the latter flag (digests) may induce\na performance penalty in some systems.\n\n## Modifying and viewing verbosity at runtime\n\nThe verbosity of the driver often needs to be adjusted for debugging.\nThe `sysctl` tool can be used for that.\n\n```\n# sysctl ioctl.cryptodev_verbosity\nioctl.cryptodev_verbosity = 0\n\n# sysctl ioctl.cryptodev_verbosity=3\nioctl.cryptodev_verbosity = 3\n```\n"
 },
 {
  "repo": "tel/saltine",
  "language": "Haskell",
  "readme_contents": "# Saltine 0.2.0.1 [![Hackage version](https://img.shields.io/hackage/v/saltine.svg?colorB=4FB900)](https://hackage.haskell.org/package/saltine)\n\nA Haskell binding for @jedisct1's portable binding for djb's\nNaCl. **This is an early release.** Please try it out, but don't just\nyet stake your life or job on it.\n\nIt is imperative you call `sodiumInit` before using any other function.\n\n``` haskell\nimport           Crypto.Saltine\nimport           Crypto.Saltine.Core.SecretBox\nimport qualified Data.ByteString.Char8 as BSC8\n\nmain = do\n  sodiumInit\n  k <- newKey\n  n <- newNonce\n  let ciphertext = secretbox k n (BSC8.pack \"foobar\")\n  print $ secretboxOpen k n ciphertext\n\n-- Just \"foobar\"\n```\n\nIn\n[*The Security Impact of a New Cryptographic Library*](http://cryptojedi.org/papers/coolnacl-20111201.pdf)\nBernstein, Lange, and Schwabe argue that high-level cryptographic\nlibraries eliminate whole spaces of cryptographic disasters which are\nnigh inevitable whenever programmers use low-level crypto primitives.\n\n* [Security Stack Exchange: Why Shouldn't We Roll Our Own?](http://security.stackexchange.com/questions/18197/why-shouldnt-we-roll-our-own)\n* [Hacker News on \"All the Crypto Code You've Ever Written is Probably Broken\"](https://news.ycombinator.com/item?id=4779015)\n* [Stack Overflow: When can you trust yourself to implement cryptography based solutions?](http://stackoverflow.com/questions/1914257/when-can-you-trust-yourself-to-implement-cryptography-based-solutions)\n* [Coding Horror: Why isn't my encryption... encrypting?](http://www.codinghorror.com/blog/2009/05/why-isnt-my-encryption-encrypting.html)\n\nCrypto is complicated, so pre-rolled solutions are important\nprevention mechanisms.\n\n[NaCl](http://nacl.cr.yp.to/) is Bernstein, Lange, and Schwabe's\nsolution: a high-level, performant cryptography library with a no-fuss\ninterface. [Saltine](http://github.com/tel/saltine) is a Haskell\nbinding to NaCl (via\n[`libsodium`](https://github.com/jedisct1/libsodium)) which hopes to\nprovide even more simplicity and safety to the usage of cryptography.\n\nNote that it's still possible to shoot yourself in the foot pretty\neasily using Saltine. Nonces must always be unique which must be managed \nby the library user.\n[`Crypto.Saltine.Core.Stream`](https://github.com/tel/saltine/blob/master/src/Crypto/Saltine/Core/Stream.hs)\nproduces messages which can beundetectably tampered with in-flight. \nKeys are insecurely read from disk\u2014they may be copied and then paged \nback to disk.\n\nWhen uncertain, use [`Crypto.Saltine.Core.SecretBox`](https://github.com/tel/saltine/blob/master/src/Crypto/Saltine/Core/SecretBox.hs) \nand [`Crypto.Saltine.Core.Box`](https://github.com/tel/saltine/blob/master/src/Crypto/Saltine/Core/Box.hs).\nIf you can think of ways to use Haskell's type system to enforce \nsecurity invariants, please suggest them.\n\nTo use it on Windows systems, download \n[a prebuild libsodium-\\*-stable-mingw.tar.gz file](https://download.libsodium.org/libsodium/releases/) \nand copy the files in `libsodium-win64`  into the equivalent places \nin `C:\\Program Files\\Haskell Platform\\*\\mingw`. Then just add saltine \nto your cabal file and watch it go.\n\nTested with [`libsodium-1.0.18`](https://download.libsodium.org/libsodium/releases/).\n\nInspired by @thoughtpolice's\n[`salt`](http://github.com/thoughtpolice/salt) library. `salt` also\nbinds to NaCl, but uses a Haskell managed version of djb's code\ninstead of `libsodium`.\n"
 },
 {
  "repo": "laminas/laminas-crypt",
  "language": "PHP",
  "readme_contents": "# laminas-crypt\n\n> ## \ud83c\uddf7\ud83c\uddfa \u0420\u0443\u0441\u0441\u043a\u0438\u043c \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0430\u043c\n> \n> \u041c\u044b, \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 Laminas, \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0438 \u0436\u0438\u0432\u0435\u043c \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445. \u0423 \u043c\u043d\u043e\u0433\u0438\u0445 \u0438\u0437 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0437\u044c\u044f, \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0438 \u0438 \u043a\u043e\u043b\u043b\u0435\u0433\u0438 \u043a\u0430\u043a \u0432 \u0420\u043e\u0441\u0441\u0438\u0438, \u0442\u0430\u043a \u0438 \u0432 \u0423\u043a\u0440\u0430\u0438\u043d\u0435. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0430\u0441 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0420\u043e\u0441\u0441\u0438\u0438. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0430\u0441 \u0436\u0438\u0432\u0443\u0442 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438. \u0423 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0430\u0431\u0443\u0448\u043a\u0438 \u0438 \u0434\u0435\u0434\u0443\u0448\u043a\u0438 \u0441\u0440\u0430\u0436\u0430\u043b\u0438\u0441\u044c \u0441 \u0444\u0430\u0448\u0438\u0441\u0442\u0430\u043c\u0438 \u0432\u043e \u0412\u0442\u043e\u0440\u043e\u0439 \u043c\u0438\u0440\u043e\u0432\u043e\u0439 \u0432\u043e\u0439\u043d\u0435. \u0417\u0434\u0435\u0441\u044c \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0444\u0430\u0448\u0438\u0437\u043c.\n> \n> \u0423 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0443\u043a\u0440\u0430\u0438\u043d\u0441\u043a\u0430\u044f \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043f\u0430\u0441\u043b\u0430\u0441\u044c \u0438\u0437 \u0434\u043e\u043c\u0430 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0441\u044b\u043d\u043e\u043c. \u041f\u043e\u0435\u0437\u0434 \u0437\u0430\u0434\u0435\u0440\u0436\u0430\u043b\u0441\u044f \u0438\u0437-\u0437\u0430 \u0431\u043e\u043c\u0431\u0435\u0436\u043a\u0438 \u043d\u0430 \u0434\u043e\u0440\u043e\u0433\u0435 \u0432\u043f\u0435\u0440\u0435\u0434\u0438. \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0437\u044c\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u044f\u0447\u0443\u0442\u0441\u044f \u0432 \u0431\u043e\u043c\u0431\u043e\u0443\u0431\u0435\u0436\u0438\u0449\u0430\u0445. \u041c\u044b \u0441 \u0442\u0440\u0435\u0432\u043e\u0433\u043e\u0439 \u0436\u0434\u0435\u043c \u0432\u0435\u0441\u0442\u043e\u0447\u043a\u0438 \u043e\u0442 \u043d\u0438\u0445 \u043f\u043e\u0441\u043b\u0435 \u0432\u043e\u0437\u0434\u0443\u0448\u043d\u044b\u0445 \u043d\u0430\u043b\u0435\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0435\u0441\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u043d\u043e \u043d\u0430\u043d\u043e\u0441\u044f\u0442 \u0443\u0434\u0430\u0440\u044b \u0438 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u043f\u043e \u0431\u043e\u043b\u044c\u043d\u0438\u0446\u0430\u043c, \u0448\u043a\u043e\u043b\u0430\u043c, \u0434\u0435\u0442\u0441\u043a\u0438\u043c \u0441\u0430\u0434\u0430\u043c \u0438 \u0434\u043e\u043c\u0430\u043c. \u041c\u044b \u043d\u0435 \u0431\u0435\u0440\u0435\u043c \u044d\u0442\u043e \u0438\u0437 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0421\u041c\u0418. \u041c\u044b \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c \u044d\u0442\u043e \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e.\n> \n> \u0412\u044b \u0434\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0435 \u043d\u0430\u043c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e, \u0447\u0442\u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0448\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438 \u043c\u044b \u043f\u0440\u043e\u0441\u0438\u043c \u0432\u0430\u0441 \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u044c\u0441\u044f \u043d\u0430\u043c \u0432\u043d\u043e\u0432\u044c. \u041c\u044b \u043d\u0443\u0436\u0434\u0430\u0435\u043c\u0441\u044f \u0432 \u043f\u043e\u043c\u043e\u0449\u0438. \u0412\u044b\u0445\u043e\u0434\u0438\u0442\u0435 \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0443\u0439\u0442\u0435 \u043f\u0440\u043e\u0442\u0438\u0432 \u044d\u0442\u043e\u0439 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u0432\u043e\u0439\u043d\u044b. \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043a\u0440\u043e\u0432\u043e\u043f\u0440\u043e\u043b\u0438\u0442\u0438\u0435. \u0421\u043a\u0430\u0436\u0438\u0442\u0435 \"\u041d\u0435\u0442 \u0432\u043e\u0439\u043d\u0435!\"\n> \n> ## \ud83c\uddfa\ud83c\uddf8 To Citizens of Russia\n> \n> We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism.\n> \n> One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences.\n> \n> You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\"\n\n\n> This package is considered feature-complete, and is now in **security-only** maintenance mode, following a [decision by the Technical Steering Committee](https://github.com/laminas/technical-steering-committee/blob/2b55453e172a1b8c9c4c212be7cf7e7a58b9352c/meetings/minutes/2020-08-03-TSC-Minutes.md#vote-on-components-to-mark-as-security-only).\n> If you have a security issue, please [follow our security reporting guidelines](https://getlaminas.org/security/).\n> If you wish to take on the role of maintainer, please [nominate yourself](https://github.com/laminas/technical-steering-committee/issues/new?assignees=&labels=Nomination&template=Maintainer_Nomination.md&title=%5BNOMINATION%5D%5BMAINTAINER%5D%3A+%7Bname+of+person+being+nominated%7D)\n\n[![Build Status](https://github.com/laminas/laminas-crypt/workflows/Continuous%20Integration/badge.svg)](https://github.com/laminas/laminas-crypt/actions?query=workflow%3A\"Continuous+Integration\")\n\n`Laminas\\Crypt` provides support of some cryptographic tools.\nSome of the available features are:\n\n- encrypt-then-authenticate using symmetric ciphers (the authentication step\n  is provided using HMAC);\n- encrypt/decrypt using symmetric and public key algorithm (e.g. RSA algorithm);\n- encrypt/decrypt using hybrid mode (OpenPGP like);\n- generate digital sign using public key algorithm (e.g. RSA algorithm);\n- key exchange using the Diffie-Hellman method;\n- key derivation function (e.g. using PBKDF2 algorithm);\n- secure password hash (e.g. using Bcrypt algorithm);\n- generate Hash values;\n- generate HMAC values;\n\nThe main scope of this component is to offer an easy and secure way to protect\nand authenticate sensitive data in PHP.\n\n- File issues at https://github.com/laminas/laminas-crypt/issues\n- Documentation is at https://docs.laminas.dev/laminas-crypt\n"
 },
 {
  "repo": "mmcloughlin/addchain",
  "language": "Go",
  "readme_contents": "<p align=\"center\">\n  <img src=\"logo.svg\" width=\"40%\" border=\"0\" alt=\"addchain\" />\n  <br />\n  <img src=\"https://img.shields.io/github/workflow/status/mmcloughlin/addchain/ci/master.svg?style=flat-square\" alt=\"Build Status\" />\n  <a href=\"https://pkg.go.dev/github.com/mmcloughlin/addchain\"><img src=\"https://img.shields.io/badge/doc-reference-007d9b?logo=go&style=flat-square\" alt=\"go.dev\" /></a>\n  <a href=\"https://goreportcard.com/report/github.com/mmcloughlin/addchain\"><img src=\"https://goreportcard.com/badge/github.com/mmcloughlin/addchain?style=flat-square\" alt=\"Go Report Card\" /></a>\n  <a href=\"https://doi.org/10.5281/zenodo.5622943\"><img src=\"https://img.shields.io/badge/DOI-10.5281%2Fzenodo.5622943-007ec6?style=flat-square\" alt=\"DOI: 10.5281/zenodo.5622943\" /></a>\n</p>\n\n<p align=\"center\">Cryptographic Addition Chain Generation in Go</p>\n\n`addchain` generates short addition chains for exponents of cryptographic\ninterest with [results](#results) rivaling the best hand-optimized chains.\nIntended as a building block in elliptic curve or other cryptographic code\ngenerators.\n\n* Suite of algorithms from academic research: continued fractions,\n  dictionary-based and Bos-Coster heuristics\n* Custom run-length techniques exploit structure of cryptographic exponents\n  with excellent results on Solinas primes\n* Generic optimization methods eliminate redundant operations\n* Simple domain-specific language for addition chain computations\n* Command-line interface or library\n* Code generation and templated output support\n\n## Table of Contents\n\n* [Background](#background)\n* [Results](#results)\n* [Usage](#usage)\n  * [Command-line Interface](#command-line-interface)\n  * [Library](#library)\n* [Algorithms](#algorithms)\n  * [Binary](#binary)\n  * [Continued Fractions](#continued-fractions)\n  * [Bos-Coster Heuristics](#bos-coster-heuristics)\n  * [Dictionary](#dictionary)\n  * [Runs](#runs)\n  * [Optimization](#optimization)\n* [Citing](#citing)\n* [Thanks](#thanks)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Background\n\nAn [_addition chain_](https://en.wikipedia.org/wiki/Addition_chain) for a\ntarget integer _n_ is a sequence of numbers starting at 1 and ending at _n_\nsuch that every term is a sum of two numbers appearing earlier in the\nsequence. For example, an addition chain for 29 is\n\n```\n1, 2, 4, 8, 9, 17, 25, 29\n```\n\nAddition chains arise in the optimization of exponentiation algorithms with\nfixed exponents. For example, the addition chain above corresponds to the\nfollowing sequence of multiplications to compute <code>x<sup>29</sup></code>\n\n<pre>\n x<sup>2</sup> = x<sup>1</sup> * x<sup>1</sup>\n x<sup>4</sup> = x<sup>2</sup> * x<sup>2</sup>\n x<sup>8</sup> = x<sup>4</sup> * x<sup>4</sup>\n x<sup>9</sup> = x<sup>1</sup> * x<sup>8</sup>\nx<sup>17</sup> = x<sup>8</sup> * x<sup>9</sup>\nx<sup>25</sup> = x<sup>8</sup> * x<sup>17</sup>\nx<sup>29</sup> = x<sup>4</sup> * x<sup>25</sup>\n</pre>\n\nAn exponentiation algorithm for a fixed exponent _n_ reduces to finding a\n_minimal length addition chain_ for _n_. This is especially relevent in\ncryptography where exponentiation by huge fixed exponents forms a\nperformance-critical component of finite-field arithmetic. In particular,\nconstant-time inversion modulo a prime _p_ is performed by computing\n<code>x<sup>p-2</sup> (mod p)</code>, thanks to [Fermat's Little\nTheorem](https://en.wikipedia.org/wiki/Fermat%27_little_theorem). Square root\nalso reduces to exponentiation for some prime moduli. Finding short addition\nchains for these exponents is one important part of high-performance finite\nfield implementations required for elliptic curve cryptography or RSA.\n\nMinimal addition chain search is famously hard. No practical optimal\nalgorithm is known, especially for cryptographic exponents of size 256-bits\nand up. Given its importance for the performance of cryptographic\nimplementations, implementers devote significant effort to hand-tune addition\nchains. The goal of the `addchain` project is to match or exceed the best\nhand-optimized addition chains using entirely automated approaches, building\non extensive academic research and applying new tweaks that exploit the\nunique nature of cryptographic exponents.\n\n## Results\n\nThe following table shows the results of the `addchain` library on popular\ncryptographic exponents. For each one we also show the length of the [best\nknown hand-optimized addition chain](https://briansmith.org/ecc-inversion-addition-chains-01), and the\ndelta from the library result.\n\n| Name | This Library | Best Known | Delta |\n| ---- | -----------: | ---------: | ----: |\n| [Curve25519 Field Inversion](doc/results.md#curve25519-field-inversion) | 266 | 265 | +1 |\n| [NIST P-256 Field Inversion](doc/results.md#nist-p-256-field-inversion) | 266 | 266 | **+0** |\n| [NIST P-384 Field Inversion](doc/results.md#nist-p-384-field-inversion) | 397 | 396 | +1 |\n| [secp256k1 (Bitcoin) Field Inversion](doc/results.md#secp256k1-bitcoin-field-inversion) | 269 | 269 | **+0** |\n| [Curve25519 Scalar Inversion](doc/results.md#curve25519-scalar-inversion) | 283 | 284 | **-1** |\n| [NIST P-256 Scalar Inversion](doc/results.md#nist-p-256-scalar-inversion) | 294 | 292 | +2 |\n| [NIST P-384 Scalar Inversion](doc/results.md#nist-p-384-scalar-inversion) | 434 | 433 | +1 |\n| [secp256k1 (Bitcoin) Scalar Inversion](doc/results.md#secp256k1-bitcoin-scalar-inversion) | 293 | 290 | +3 |\n\n\nSee [full results listing](doc/results.md) for more detail and\nresults for less common exponents.\n\nThese results demonstrate that `addchain` is competitive with hand-optimized\nchains, often with equivalent or better performance. Even when `addchain` is\nslightly sub-optimal, it can still be considered valuable since it fully\nautomates a laborious manual process. As such, `addchain` can be trusted to\nproduce high quality results in an automated code generation tool.\n\n## Usage\n\n### Command-line Interface\n\nInstall a pre-compiled [release\nbinary](https://github.com/mmcloughlin/addchain/releases):\n\n```\ncurl -sSfL https://git.io/addchain | sh -s -- -b /usr/local/bin\n```\n\nAlternatively build from source:\n\n```\ngo install github.com/mmcloughlin/addchain/cmd/addchain@latest\n```\n\nSearch for a curve25519 field inversion addition chain with:\n\n```sh\naddchain search '2^255 - 19 - 2'\n```\n\nOutput:\n\n```\naddchain: expr: \"2^255 - 19 - 2\"\naddchain: hex: 7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeb\naddchain: dec: 57896044618658097711785492504343953926634992332820282019728792003956564819947\naddchain: best: opt(runs(continued_fractions(dichotomic)))\naddchain: cost: 266\n_10       = 2*1\n_11       = 1 + _10\n_1100     = _11 << 2\n_1111     = _11 + _1100\n_11110000 = _1111 << 4\n_11111111 = _1111 + _11110000\nx10       = _11111111 << 2 + _11\nx20       = x10 << 10 + x10\nx30       = x20 << 10 + x10\nx60       = x30 << 30 + x30\nx120      = x60 << 60 + x60\nx240      = x120 << 120 + x120\nx250      = x240 << 10 + x10\nreturn      (x250 << 2 + 1) << 3 + _11\n```\n\nNext, you can [generate code from this addition chain](doc/gen.md).\n\n### Library\n\nInstall:\n\n```\ngo get -u github.com/mmcloughlin/addchain\n```\n\nAlgorithms all conform to the [`alg.ChainAlgorithm`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg#ChainAlgorithm) or\n[`alg.SequenceAlgorithm`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg#SequenceAlgorithm) interfaces and can be used directly. However the\nmost user-friendly method uses the [`alg/ensemble`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg/ensemble) package to\ninstantiate a sensible default set of algorithms and the [`alg/exec`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg/exec)\nhelper to execute them in parallel. The following code uses this method to\nfind an addition chain for curve25519 field inversion:\n\n```go\nfunc Example() {\n\t// Target number: 2\u00b2\u2075\u2075 - 21.\n\tn := new(big.Int)\n\tn.SetString(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeb\", 16)\n\n\t// Default ensemble of algorithms.\n\talgorithms := ensemble.Ensemble()\n\n\t// Use parallel executor.\n\tex := exec.NewParallel()\n\tresults := ex.Execute(n, algorithms)\n\n\t// Output best result.\n\tbest := 0\n\tfor i, r := range results {\n\t\tif r.Err != nil {\n\t\t\tlog.Fatal(r.Err)\n\t\t}\n\t\tif len(results[i].Program) < len(results[best].Program) {\n\t\t\tbest = i\n\t\t}\n\t}\n\tr := results[best]\n\tfmt.Printf(\"best: %d\\n\", len(r.Program))\n\tfmt.Printf(\"algorithm: %s\\n\", r.Algorithm)\n\n\t// Output:\n\t// best: 266\n\t// algorithm: opt(runs(continued_fractions(dichotomic)))\n}\n```\n\n## Algorithms\n\nThis section summarizes the algorithms implemented by `addchain` along with\nreferences to primary literature. See the [bibliography](doc/bibliography.md)\nfor the complete references list.\n\n### Binary\n\nThe [`alg/binary`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg/binary) package implements the addition chain equivalent\nof the basic [square-and-multiply exponentiation\nmethod](https://en.wikipedia.org/wiki/Exponentiation_by_squaring). It is\nincluded for completeness, but is almost always outperformed by more advanced\nalgorithms below.\n\n### Continued Fractions\n\nThe [`alg/contfrac`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg/contfrac) package implements the continued fractions\nmethods for addition sequence search introduced by\nBergeron-Berstel-Brlek-Duboc in 1989 and later extended. This approach\nutilizes a decomposition of an addition chain akin to continued fractions,\nnamely\n\n```\n(1,..., k,..., n) = (1,...,n mod k,..., k) \u2297 (1,..., n/k) \u2295 (n mod k).\n```\n\nfor certain special operators \u2297 and \u2295. This\ndecomposition lends itself to a recursive algorithm for efficient addition\nsequence search, with results dependent on the _strategy_ for choosing the\nauxillary integer _k_. The [`alg/contfrac`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg/contfrac) package provides a\nlaundry list of strategies from the literature: binary, co-binary,\ndichotomic, dyadic, fermat, square-root and total.\n\n#### References\n\n* F Bergeron, J Berstel, S Brlek and C Duboc. Addition chains using continued fractions. Journal of Algorithms. 1989. http://www-igm.univ-mlv.fr/~berstel/Articles/1989AdditionChainDuboc.pdf\n* Bergeron, F., Berstel, J. and Brlek, S. Efficient computation of addition chains. Journal de theorie des nombres de Bordeaux. 1994. http://www.numdam.org/item/JTNB_1994__6_1_21_0\n* Amadou Tall and Ali Yassin Sanghare. Efficient computation of addition-subtraction chains using generalized continued Fractions. Cryptology ePrint Archive, Report 2013/466. 2013. https://eprint.iacr.org/2013/466\n* Christophe Doche. Exponentiation. Handbook of Elliptic and Hyperelliptic Curve Cryptography, chapter 9. 2006. http://koclab.cs.ucsb.edu/teaching/ecc/eccPapers/Doche-ch09.pdf\n\n### Bos-Coster Heuristics\n\nBos and Coster described an iterative algorithm for efficient addition\nsequence generation in which at each step a heuristic proposes new numbers\nfor the sequence in such a way that the _maximum_ number always decreases.\nThe [original Bos-Coster paper](https://link.springer.com/content/pdf/10.1007/0-387-34805-0_37.pdf) defined four\nheuristics: Approximation, Divison, Halving and Lucas. Package\n[`alg/heuristic`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg/heuristic) implements a variation on these heuristics:\n\n* **Approximation:** looks for two elements a, b in the current sequence with sum close to the largest element.\n* **Halving:** applies when the target is at least twice as big as the next largest, and if so it will propose adding a sequence of doublings.\n* **Delta Largest:** proposes adding the delta between the largest two entries in the current sequence.\n\nDivison and Lucas are not implemented due to disparities in the literature\nabout their precise definition and poor results from early experiments.\nFurthermore, this library does not apply weights to the heuristics as\nsuggested in the paper, rather it simply uses the first that applies. However\nboth of these remain [possible avenues for\nimprovement](https://github.com/mmcloughlin/addchain/issues/26).\n\n#### References\n\n* Bos, Jurjen and Coster, Matthijs. Addition Chain Heuristics. In Advances in Cryptology --- CRYPTO' 89 Proceedings, pages 400--407. 1990. https://link.springer.com/content/pdf/10.1007/0-387-34805-0_37.pdf\n* Riad S. Wahby. kwantam/addchain. Github Repository. Apache License, Version 2.0. 2018. https://github.com/kwantam/addchain\n* Christophe Doche. Exponentiation. Handbook of Elliptic and Hyperelliptic Curve Cryptography, chapter 9. 2006. http://koclab.cs.ucsb.edu/teaching/ecc/eccPapers/Doche-ch09.pdf\n* Ayan Nandy. Modifications of Bos and Coster\u2019s Heuristics in search of a shorter addition chain for faster exponentiation. Masters thesis, Indian Statistical Institute Kolkata. 2011. http://library.isical.ac.in:8080/jspui/bitstream/10263/6441/1/DISS-285.pdf\n* F. L. \u0162iplea, S. Iftene, C. Hri\u0163cu, I. Goriac, R. Gord\u00e2n and E. Erbiceanu. MpNT: A Multi-Precision Number Theory Package, Number Theoretical Algorithms (I). Technical Report TR03-02, Faculty of Computer Science, \"Alexandru Ioan Cuza\" University, Iasi. 2003. https://profs.info.uaic.ro/~tr/tr03-02.pdf\n* Stam, Martijn. Speeding up subgroup cryptosystems. PhD thesis, Technische Universiteit Eindhoven. 2003. https://cr.yp.to/bib/2003/stam-thesis.pdf\n\n### Dictionary\n\nDictionary methods decompose the binary representation of a target integer _n_ into a set of dictionary _terms_, such that _n_\nmay be written as a sum\n\n<pre>\nn = \u2211 2<sup>e<sub>i</sub></sup> d<sub>i</sub>\n</pre>\n\nfor exponents _e_ and elements _d_ from a dictionary _D_. Given such a decomposition we can construct an addition chain for _n_ by\n\n1. Find a short addition _sequence_ containing every element of the dictionary _D_. Continued fractions and Bos-Coster heuristics can be used here.\n2. Build _n_ from the dictionary terms according to the sum decomposition.\n\nThe efficiency of this approach boils down to the decomposition method. The [`alg/dict`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg/dict) package provides:\n\n* **Fixed Window:** binary representation of _n_ is broken into fixed _k_-bit windows\n* **Sliding Window**: break _n_ into _k_-bit windows, skipping zeros where possible\n* **Run Length**: decompose _n_ into runs of 1s up to a maximal length\n* **Hybrid**: mix of sliding window and run length methods\n\n#### References\n\n* Martin Otto. Brauer addition-subtraction chains. PhD thesis, Universitat Paderborn. 2001. http://www.martin-otto.de/publications/docs/2001_MartinOtto_Diplom_BrauerAddition-SubtractionChains.pdf\n* Kunihiro, Noboru and Yamamoto, Hirosuke. New Methods for Generating Short Addition Chains. IEICE Transactions on Fundamentals of Electronics Communications and Computer Sciences. 2000. https://pdfs.semanticscholar.org/b398/d10faca35af9ce5a6026458b251fd0a5640c.pdf\n* Christophe Doche. Exponentiation. Handbook of Elliptic and Hyperelliptic Curve Cryptography, chapter 9. 2006. http://koclab.cs.ucsb.edu/teaching/ecc/eccPapers/Doche-ch09.pdf\n\n### Runs\n\nThe runs algorithm is a custom variant of the dictionary approach that\ndecomposes a target into runs of ones. It leverages the observation that\nbuilding a dictionary consisting of runs of 1s of lengths\n<code>l<sub>1</sub>, l<sub>2</sub>, ..., l<sub>k</sub></code> can itself be\nreduced to:\n\n1. Find an addition sequence containing the run lengths\n   <code>l<sub>i</sub></code>. As with dictionary approaches we can use\n   Bos-Coster heuristics and continued fractions here. However here we have the\n   advantage that the <code>l<sub>i</sub></code> are typically very _small_,\n   meaning that a wider range of algorithms can be brought to bear.\n2. Use the addition sequence for the run lengths <code>l<sub>i</sub></code>\n   to build an addition sequence for the runs themselves\n   <code>r(l<sub>i</sub>)</code> where <code>r(e) = 2<sup>e</sup>-1</code>. See\n   [`dict.RunsChain`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg/dict#RunsChain).\n\nThis approach has proved highly effective against cryptographic exponents\nwhich frequently exhibit binary structure, such as those derived from\n[Solinas primes](https://en.wikipedia.org/wiki/Solinas_prime).\n\n> I have not seen this method discussed in the literature. Please help me find references to prior art if you know any.\n\n### Optimization\n\nClose inspection of addition chains produced by other algorithms revealed\ncases of redundant computation. This motivated a final optimization pass over\naddition chains to remove unecessary steps. The [`alg/opt`](https://pkg.go.dev/github.com/mmcloughlin/addchain/alg/opt) package\nimplements the following optimization:\n\n1. Determine _all possible_ ways each element can be computed from those prior.\n2. Count how many times each element is used where it is the _only possible_ way of computing that entry.\n3. Prune elements that are always used in computations that have an alternative.\n\nThese micro-optimizations were vital in closing the gap between `addchain`'s\nautomated approaches and hand-optimized chains. This technique is reminiscent\nof basic passes in optimizing compilers, raising the question of whether\nother [compiler optimizations could apply to addition\nchains](https://github.com/mmcloughlin/addchain/issues/24)?\n\n> I have not seen this method discussed in the literature. Please help me find references to prior art if you know any.\n\n## Citing\n\nIf you use `addchain` in your research a citation would be appreciated.\nCiting a specific release is preferred, since they are [archived on\nZenodo](https://doi.org/10.5281/zenodo.4625263) and assigned a DOI. Please use the\nfollowing BibTeX to cite the most recent [0.4.0\nrelease](https://github.com/mmcloughlin/addchain/releases/tag/v0.4.0).\n\n```bib\n@misc{addchain,\n    title        = {addchain: Cryptographic Addition Chain Generation in Go},\n    author       = {Michael B. McLoughlin},\n    year         = 2021,\n    month        = oct,\n    howpublished = {Repository \\url{https://github.com/mmcloughlin/addchain}},\n    version      = {0.4.0},\n    license      = {BSD 3-Clause License},\n    doi          = {10.5281/zenodo.5622943},\n    url          = {https://doi.org/10.5281/zenodo.5622943},\n}\n```\n\nIf you need to cite a currently unreleased version please consider [filing an\nissue](https://github.com/mmcloughlin/addchain/issues/new) to request a new\nrelease, or to discuss an appropriate format for the citation.\n\n## Thanks\n\nThank you to [Tom Dean](https://web.stanford.edu/~trdean/), [Riad\nWahby](https://wahby.org/), [Brian Smith](https://briansmith.org/) and\n[str4d](https://github.com/str4d) for advice and encouragement. Thanks also to\n[Damian Gryski](https://github.com/dgryski) and [Martin\nGlancy](https://twitter.com/mglancy) for review.\n\n## Contributing\n\nContributions to `addchain` are welcome:\n\n* [Submit bug reports](https://github.com/mmcloughlin/addchain/issues/new) to\n  the issues page.\n* Suggest [test cases](https://github.com/mmcloughlin/addchain/blob/e6c070065205efcaa02627ab1b23e8ce6aeea1db/internal/results/results.go#L62)\n  or update best-known hand-optimized results.\n* Pull requests accepted. Please discuss in the [issues section](https://github.com/mmcloughlin/addchain/issues)\n  before starting significant work.\n\n## License\n\n`addchain` is available under the [BSD 3-Clause License](LICENSE).\n"
 },
 {
  "repo": "jzelinskie/whirlpool",
  "language": "Go",
  "readme_contents": "# whirlpool.go\nA [whirlpool hashing](https://en.wikipedia.org/wiki/Whirlpool_(cryptography)) library for go\n\n## Build status\n\n[![Build Status](https://secure.travis-ci.org/jzelinskie/whirlpool.png)](http://travis-ci.org/jzelinskie/whirlpool)\n\n## Setup\n\n```bash\n$ go get github.com/jzelinskie/whirlpool\n```\n\n## Example\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n  \"github.com/jzelinskie/whirlpool\"\n)\n\nfunc main() {\n  w := whirlpool.New()\n  text := []byte(\"This is an example.\")\n  w.Write(text)\n  fmt.Println(w.Sum(nil))\n}\n```\n\n## Docs\n\nCheck out the [gopkgdoc page](http://go.pkgdoc.org/github.com/jzelinskie/whirlpool), but there isn't much -- it works just like the other hashes in the standard library\n\n## Branches\n\n* master - stable, works like the hash libs in the corelib\n* trace - same code as master, but prints midstate values to stdout\n\n## license\n\nModified BSD License\n"
 },
 {
  "repo": "Dethada/Quantum-Cryptography",
  "language": "Jupyter Notebook",
  "readme_contents": "# Quantum Cryptography\n\n## Shor's Algorithm\n\nPlease do not actually use classical_shor.py to try to factorize large numbers, it is a really inefficient way of factorization for a classical computer.\n\n```bash\npython3 -m timeit -s 'import classical_shor' 'classical_shor.solve(80609)'\n100 loops, best of 3: 3.11 msec per loop ((3.11 * 10^-3) seconds)\n```\n\npure_factorizatrion.py is a much better algorithm for finding primes on a classical computer.\n\n```bash\npython3 -m timeit -s 'import pure_factorization' 'pure_factorization.factorize(80609)'\n100000 loops, best of 3: 3.56 usec per loop ((3.56 * 10^-6) seconds)\n```\n\n* classical_shor.py\n  * Shor's algorithm implemented purely with classical algorithm\n* pure_factorization.py\n  * Classical way of finding prime factors\n\n## Grover's Algorithm\n\nReduces the time complexity of finding the input to a black box(Oracle) function that produces a particular output from O(N) to O(sqrt(N))."
 },
 {
  "repo": "freebsd-pefs/pefs",
  "language": "C",
  "readme_contents": "PEFS (Private Encrypted File System) is a kernel level stacked cryptographic\nfilesystem for FreeBSD.\n\nPEFS website: http://pefs.io/\n\nThe following is a list of its most important features:\n\n*   Kernel level file system, no user level daemons needed. Transparently runs\n    on top of existing file systems.\n\n*   Random per file tweak value used for encryption, which guaranties different\n    cipher texts for the same encrypted files.\n\n*   Saves metadata only in encrypted file name, but not in file itself.\n\n*   Supports arbitrary number of keys per file system, default directory key,\n    mixing files encrypted with different keys in same directory.\n\n*   Allows defining key chains, can be used to add/delete several keys by\n    specifying only master key.\n\n*   Uses modern cryptographic algorithms: AES and Camellia in XTS mode,\n    PKCS#5v2 and HKDF for key generation.\n\nFreeBSD wiki page: http://wiki.freebsd.org/PEFS\nblog: http://glebkurtsou.blogspot.com/search/label/pefs\n\n\nInstallation instructions:\n\n# git clone git://github.com/glk/pefs.git pefs\n# cd pefs\n# make obj all\n# make install\n# make clean\n"
 },
 {
  "repo": "AbertayMachineLearningGroup/CryptoKnight",
  "language": "Python",
  "readme_contents": "# Deep Learning Based Cryptographic Primitive Classification\n\nAutomated cryptographic classification framework using Intel's [Pin](https://software.intel.com/en-us/articles/pintool-downloads) platform for dynamic binary instrumentation and [PyTorch](http://pytorch.org/) for deep learning.\n\n* Clone Repository\n* Required Python libraries: ```sudo apt-get install python-pip python-tk```\n* Install requirements: ```pip install -r requirements.txt```\n* Install toolkit: ```python knight.py --setup```\n* Binary compilation requires [OpenSSL](https://www.openssl.org/): ```sudo apt install libssl-dev```\n\nAutomatically draw distribution:\n```\npython crypto.py -d scale\n```\n\nEvaluatation:\n```\npython knight.py --predict <executable>\npython knight.py --evaluate <dataset>\n```\n\nTo add custom cryptographic samples to the generation pool, please follow the [Format Specification](data/config/README.md).\n\nWe also published \"CryptoKnight: Generating and Modelling Compiled Cryptographic Primitives\n\" that can be found [here](http://www.mdpi.com/2078-2489/9/9/231) in Open Access.\n\nIf you want to cite the paper please use the following format;\n\n````\n@Article{info9090231,\nAUTHOR = {Hill, Gregory and Bellekens, Xavier},\nTITLE = {CryptoKnight: Generating and Modelling Compiled Cryptographic Primitives},\nJOURNAL = {Information},\nVOLUME = {9},\nYEAR = {2018},\nNUMBER = {9},\nARTICLE NUMBER = {231},\nURL = {http://www.mdpi.com/2078-2489/9/9/231},\nISSN = {2078-2489},\nDOI = {10.3390/info9090231}\n}\n````\n"
 },
 {
  "repo": "google/mundane",
  "language": "Rust",
  "readme_contents": "<!-- Copyright 2018 Google LLC\n\nUse of this source code is governed by an MIT-style\nlicense that can be found in the LICENSE file or at\nhttps://opensource.org/licenses/MIT. -->\n\n# Mundane\n\nMundane is a Rust cryptography library backed by BoringSSL that is difficult\nto misuse, ergonomic, and performant (in that order).\n\n## Issues and Contributions\n\nWe use [GitHub issues](https://github.com/google/mundane/issues) for issue\ntracking, and\n[Gerrit](https://fuchsia-review.googlesource.com/admin/repos/mundane) for code\nreviews. See `CONTRIBUTING.md` for more details.\n\n## Dependencies\n\nRust 1.36 or newer is required.\n\nMundane vendors a copy of the BoringSSL source, so BoringSSL does not need to be\ninstalled locally in order to build. However, the BoringSSL build system has the\nfollowing dependencies:\n- [CMake](https://cmake.org/download/) 2.8.11 or later\n- Perl 5.6.1 or later. See [BoringSSL's build\n  instructions](https://boringssl.googlesource.com/boringssl/+/master/BUILDING.md)\n  for what to do if CMake fails to find Perl on your system.\n- Either Make or [Ninja](https://ninja-build.org/). Ninja is preferable, as it\n  makes compilation significantly faster; if both are present, Ninja will be\n  used. On Windows, Ninja is required.\n- A C++ compiler\n- Go 1.10 or later\n- To build the x86 and x86_64 assembly, your assembler must support AVX2\n  instructions and `MOVBE`. If using GNU binutils, you must have 2.22 or later.\n\nIn order to avoid errors at link time due to conflicting symbols, we build\nBoringSSL with a custom prefix for all of its symbols which is based on the name\nand version of this crate. That way, even if multiple different versions of\nMundane are present in the same dependency graph, none of the symbols from one\nversion's BoringSSL will conflict with the symbols from another version's\nBoringSSL.\n\n## Supported platforms\n\nMundane supports being built on and for Linux and Mac. Windows support is under\ndevelopment. Cross-compilation is not supported.\n\n## License\n\nEverything outside of the `boringssl/boringssl` directory is licensed under an\nMIT license which can be found in the `LICENSE` file. Everything in the\n`boringssl/boringssl` directory is licensed with a license that can be found in\nthe `boringssl/boringssl/LICENSE` file.\n\nDisclaimer: Mundane is not an officially supported Google product.\n"
 },
 {
  "repo": "magicxor/WinCryptographyAPIs",
  "language": "Pascal",
  "readme_contents": "# WinCryptographyAPIs\nWindows CryptoAPI and Cryptography API: Next Generation for Delphi\n\nThis code was originally written 06.10.2013 by vanilla (http://vanillasky-room.cocolog-nifty.com/blog/2013/10/cryptoapi-and-c.html) and dual licensed under MPL / LGPL.\n\nCryptoAPI:\n\n    Winapi.WinCrypt.pas (wincrypt.h) \n\nCNG:\n\n    Winapi.BCrypt.pas (bcrypt.h)\n    Winapi.NCrypt.pas (ncrypt.h)\n    Winapi.NCryptProtect.pas (ncryptprotect.h)\n    Winapi.SslProvider.pas (sslprovider.h) \n\nBonus: SSPI (Security Support Provider Interface):\n\n    Winapi.Sspi.pas (sspi.h)\n    Winapi.Schannel.pas (minschannel.h, schannel.h) \n\nDelphi 2010 or later is required. Use at your own risk.\n"
 },
 {
  "repo": "tkaitchuck/aHash",
  "language": "Rust",
  "readme_contents": "# aHash     ![Build Status](https://img.shields.io/github/workflow/status/tkaitchuck/ahash/Rust) ![Licence](https://img.shields.io/crates/l/ahash) ![Downloads](https://img.shields.io/crates/d/ahash) \n\nAHash is the [fastest](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#Speed), \n[DOS resistant hash](https://github.com/tkaitchuck/aHash/wiki/How-aHash-is-resists-DOS-attacks) currently available in Rust.\nAHash is intended *exclusively* for use in in-memory hashmaps. \n\nAHash's output is of [high quality](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#Quality) but aHash is **not** a cryptographically secure hash.\n\n## Design\n\nBecause AHash is a keyed hash, each map will produce completely different hashes, which cannot be predicted without knowing the keys.\n[This prevents DOS attacks where an attacker sends a large number of items whose hashes collide that get used as keys in a hashmap.](https://github.com/tkaitchuck/aHash/wiki/How-aHash-is-resists-DOS-attacks)\n\nThis also avoids [accidentally quadratic behavior by reading from one map and writing to another.](https://accidentallyquadratic.tumblr.com/post/153545455987/rust-hash-iteration-reinsertion)\n\n## Goals and Non-Goals\n\nAHash does *not* have a fixed standard for its output. This allows it to improve over time. For example,\nif any faster algorithm is found, aHash will be updated to incorporate the technique.\nSimilarly, should any flaw in aHash's DOS resistance be found, aHash will be changed to correct the flaw.\n\nBecause it does not have a fixed standard, different computers or computers on different versions of the code will observe different hash values.\nAs such, aHash is not recommended for use other than in-memory maps. Specifically, aHash is not intended for network use or in applications which persist hashed values.\n(In these cases `HighwayHash` would be a better choice)\n\nAdditionally, aHash is not intended to be cryptographically secure and should not be used as a MAC, or anywhere which requires a cryptographically secure hash.\n(In these cases `SHA-3` would be a better choice)\n\n## Usage\n\nAHash is a drop in replacement for the default implementation of the `Hasher` trait. To construct a `HashMap` using aHash \nas its hasher do the following:\n\n```rust\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\nFor convenience, wrappers called `AHashMap` and `AHashSet` are also provided.\nThese do the same thing with slightly less typing.\n```rust\nuse ahash::AHashMap;\n\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\nmap.insert(56, 78);\n```\n\n## Flags\n\nThe aHash package has the following flags:\n* `std`: This enables features which require the standard library. (On by default) This includes providing the utility classes `AHashMap` and `AHashSet`.\n* `serde`: Enables `serde` support for the utility classes `AHashMap` and `AHashSet`.\n* `compile-time-rng`: Whenever possible aHash will seed hashers with random numbers using the [getrandom](https://github.com/rust-random/getrandom) crate. \nThis is possible for OS targets which provide a source of randomness. (see the [full list](https://docs.rs/getrandom/0.2.0/getrandom/#supported-targets).)\nFor OS targets without access to a random number generator, `compile-time-rng` provides an alternative.\nIf `getrandom` is unavailable and `compile-time-rng` is enabled, aHash will generate random numbers at compile time and embed them in the binary.\nThis allows for DOS resistance even if there is no random number generator available at runtime (assuming the compiled binary is not public).\nThis makes the binary non-deterministic, unless `getrandom` is available for the target in which case the flag does nothing.\n(If non-determinism is a problem see [constrandom's documentation](https://github.com/tkaitchuck/constrandom#deterministic-builds))\n\n**NOTE:** If `getrandom` is unavailable and `compile-time-rng` is disabled aHash will fall back on using the numeric \nvalue of memory addresses as a source of randomness. This is somewhat strong if ALSR is turned on (it is by default)\nbut for embedded platforms this will result in weak keys. As a result, it is recommended to use `compile-time-rng` anytime\nrandom numbers will not be available at runtime.\n\n## Comparison with other hashers\n\nA full comparison with other hashing algorithms can be found [here](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md)\n\n![Hasher performance](https://docs.google.com/spreadsheets/d/e/2PACX-1vSK7Li2nS-Bur9arAYF9IfT37MP-ohAe1v19lZu5fd9MajI1fSveLAQZyEie4Ea9k5-SWHTff7nL2DW/pubchart?oid=1323618938&format=image)\n\nFor a more representative performance comparison which includes the overhead of using a HashMap, see [HashBrown's benchmarks](https://github.com/rust-lang/hashbrown#performance)\nas HashBrown now uses aHash as its hasher by default.\n\n## Hash quality\n\nAHash passes the full [SMHasher test suite](https://github.com/rurban/smhasher). \n\nThe code to reproduce the result, and the full output [are checked into the repo](https://github.com/tkaitchuck/aHash/tree/master/smhasher).\n\n## Additional FAQ\n\nA separate FAQ document is maintained [here](https://github.com/tkaitchuck/aHash/blob/master/FAQ.md). \nIf you have questions not covered there, open an issue [here](https://github.com/tkaitchuck/aHash/issues).\n\n## License\n\nLicensed under either of:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n\n\n\n\n\n\n\n\n"
 },
 {
  "repo": "5GenCrypto/obfuscation",
  "language": "C",
  "readme_contents": "# Cryptographic Program Obfuscation\n\n## Building\n\nRun the following:\n\n```\nautoreconf -i\n./configure\nmake\nsudo make install\n```\n\nThis installs the underlying obfuscation library `libobf` to your system.  To\ninstall the python front-end, proceed as follows:\n\n```\ncd python\npython2 setup.py test\n```\n\nThis runs a bunch of test, all of which should hopefully pass.\n\nYou can then run the obfuscator by running\n```\n./obfuscator obf --test circuits/and.circ --secparam 16 -v\n```\n\n## Contact\n\nFor any questions/comments, please e-mail amaloz at galois dot com.\n"
 },
 {
  "repo": "microsoft/LWE_Library",
  "language": "C",
  "readme_contents": "LWE Library\n===========\n\nThis library implements Frodo, a lattice-based key exchange based on the Learning with Errors (LWE) problem.\nThe library uses Frodo's \"recommended parameters\". See [1] for details.\n\nThe library was developed by Microsoft Research for experimentation purposes.\n\nBuilding and Running\n--------------------\n\nOn Windows, the library builds with Visual Studio 2015, using the solution file (frodo.sln) in the \"VisualStudio\" folder. It has been tested with Windows 10.\nOn Linux, the library builds with GNU GCC or clang. It has been tested on Ubuntu 16.04 using GNU GCC version 5.4, and clang 3.8.\n\n### Linux\n\nTo build, type with the following options:\n\n$ make ARCH=[x64/x86/ARM] CC=[gcc/clang] USE_REFERENCE=[TRUE/FALSE] USE_AVX2=[TRUE/FALSE] AES_NI=[TRUE/FALSE]\n\nWhen simply typing:\n\n$make\n\nthe library is built using ARCH=x64, CC=gcc, USE_REFERENCE=FALSE, USE_AVX2=TRUE and AES_NI=TRUE, by default.\n\nBuilding generates:\n\n- `libfrodo.a`: a static library based on Frodo.\n- `test_aes`: a test harness for AES.\n- `test_rand`: a test harness for the random number generator.\n- `test_kex`: a test harness for Frodo. \n\nTo run the tests for Frodo, simply type:\n\n$ ./test_kex\n\nLicense\n-------\n\nThe library is licensed under the MIT License. Part of the implementation is based on liboqs, also released under MIT. \nThe library includes third party modules which have been released as public domain. Specifically:\n\n- `src/aes/aes.c`: public domain\n- `src/aes/aes_c.c`: public domain\n- `src/aes/aes_ni.c`: public domain\n- `src/sha3/fips202.c`: public domain\n- `src/sha3/fips202x4.c`: public domain\n\nReference\n---------\n[1] Joppe W. Bos, Craig Costello, Leo Ducas, Ilya Mironov, Michael Naehrig, Valeria Nikolaenko, Ananth Raghunathan, and Douglas Stebila, \"Frodo: Take off the Ring! Practical, Quantum-Secure Key Exchange from LWE\".\nACM CCS 2016, 2016. The extended version is available at: https://eprint.iacr.org/2016/659.\n\n# Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
 },
 {
  "repo": "TomFrost/Cryptex",
  "language": "JavaScript",
  "readme_contents": "# Cryptex [![Build Status](https://travis-ci.org/TomFrost/Cryptex.svg?branch=master)](https://travis-ci.org/TomFrost/Cryptex)\n\nSecure secret storage and cryptographic key retrieval for Node.js\n\n```javascript\nvar cryptex = require('cryptex')\n\ncryptex.getSecret('mySQLPass').then(function(pass) {\n  conn = mysql.connect({\n    username: user,\n    password: pass,\n    host: hostname\n  })\n})\n```\n\n## Keep your secrets secret!\n\nIf you check database passwords into git, download credential files from S3 or some other server, provide plaintext keys to your continuous integration/deployment solution, or don't have the ability to limit engineers from getting production secrets, stop doing what you're doing.\n\nCryptex is here to help. Here's how:\n\n### 1. Pick a configuration method\n\nThere are three ways to set up Cryptex. Use what works best for your project:\n\n#### cryptex.json in your app root\n\nSet up cryptex in different ways automatically depending on what the `NODE_ENV` environment variable is set to. The file looks like this:\n\n```json\n{\n  \"production\": {\n    \"keySource\": \"kms\",\n    \"keySourceOpts\": {\n      \"dataKey\": \"kms+encrypted+base64+string==\"\n    }\n  },\n  \"development\": {\n    \"keySource\": \"none\",\n    \"algorithm\": \"plaintext\",\n    \"secretEncoding\": \"utf8\",\n    \"secrets\": {\n      \"mySQLPass\": \"devlocal\"\n    }\n  }\n}\n```\n\n#### Put it right in the code\n\nDon't want clutter in your file tree? That's cool. Do this:\n\n```javascript\ncryptex.use({\n  config: {\n    keySource: 'kms',\n    keySourceOpts: {\n      dataKey: 'kms+encrypted+base64+string=='\n    }\n  }\n})\n```\n\n#### Throw it all in environment variables\n\nFollowing [12 Factor](http://12factor.net/)? Rock on. We have env var support already built-in.\n\n```\nCRYPTEX_KEYSOURCE=kms\nCRYPTEX_KEYSOURCE_KMS_DATAKEY=\"kms+encrypted+base64+string==\"\n```\n\n### 2. Pick a key source\n\nCryptex encrypts all of your secrets with a key. You don't want that key shared with anyone in plaintext, no matter how much you trust them. Cryptex will request your key when it's needed and delete it from RAM afterward. Here are the available sources:\n\n#### Amazon KMS _(\"kms\")_\n\nAmazon Web Services' [Key Management System](https://aws.amazon.com/kms/) is the most secure and easy-to-implement key source. If you already have an AWS account, KMS is cheap and easy to use. Create an encryption key using the IAM console, and note the alias you gave it. Install the [AWS CLI tool](http://docs.aws.amazon.com/cli/latest/userguide/installing.html) and run this command with your key alias to get an encrypted AES256 key:\n\n```\naws kms generate-data-key-without-plaintext \\\n  --key-id alias/YOUR_KEY_ALIAS \\\n  --key-spec AES_256 \\\n  --output text \\\n  --query CiphertextBlob\n```\n\n##### kms options:\n\n`dataKey` `CRYPTEX_KEYSOURCE_KMS_PATH`: The base64 string you got when you ran that command above.  \n`region` `CRYPTEX_KEYSOURCE_KMS_REGION`: The AWS region (such as us-east-1) in which the master KMS key can be found. If not specified, the config already loaded into aws-sdk is used.\n\n**A note about aws-sdk configuration:** The KMS keySource uses Amazon's official Node.js aws-sdk library. If you're using `npm>=3`, it will use the same object as any you might have in your local project, carrying over the configuration. Otherwise, please see Amazon's guide on [configuring the SDK](http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html) to provide it with credentials. The **highly recommended way** to allow it to access KMS in production (assuming it's in production on AWS servers) is to attach an IAM role to the EC2 node with permission to access the master key you're using.\n\n#### Load from file _(\"file\")_\n\nIf your secure key is available in a file, use this method. Note, however, that it is your responsibility to make sure that key file stays secure and inaccessible to prying eyes!\n\nIs your key file something other than binary-encoded? Set `keySourceEncoding` in your config, or set the `CRYPTEX_KEYSOURCEENCODING` environment variable, to either `base64` or `hex`.\n\n##### file options:\n\n`path` `CRYPTEX_KEYSOURCE_FILE_PATH`: The path to the key file\n\n#### Download via http(s) _(\"http\")_\n\n**DANGER.** _ONLY USE THIS IF YOU ABSOLUTELY KNOW WHAT YOU'RE DOING._\n\nIf you're using anything other than an https URL in production, you're _definitely_ doing it wrong. You'll need to be an expert in locking your key server down for this to be anywhere near secure.\n\nAs with `file`, if your key file is something other than binary-encoded, set `keySourceEncoding` in your config, or set the `CRYPTEX_KEYSOURCEENCODING` environment variable, to either `base64` or `hex`.\n\n##### http options:\n\n`url` `CRYPTEX_KEYSOURCE_HTTP_URL`: The URL to the key file to download  \n`timeout` `CRYPTEX_KEYSOURCE_HTTP_TIMEOUT`: The number of milliseconds after which to fail the download. _(Default: 4000)_\n\n#### Plain text _(\"plaintext\")_\n\n**DANGER.** _SHOULD NEVER BE USED IN PRODUCTION._\n\nUseful for local development and testing, this allows the key to be saved in plain text. You'll also want to set `keySourceEncoding` in your config (or the `CRYPTEX_KEYSOURCEENCODING` environment variable) to either `base64` or `hex` -- however you've stringified your key.\n\n##### plaintext options:\n\n`key` `CRYPTEX_KEYSOURCE_PLAINTEXT_KEY`: Your key, in plain text\n\n#### No key _(\"none\")_\n\nThis is useful if you're plugging in an algorithm that doesn't require a pre-set key to be used.\n\n### 3. Pick an encryption algorithm\n\nThe recommended and default algorithm is `aes256`. If you're good with that, move on! You don't even need to set `algorithm` in your config or the `CRYPTEX_ALGORITHM` environment variable. But for the sake of completeness:\n\n#### AES 256-bit _(\"aes256\")_\n\nMilitary-grade symmetric encryption. The implementation in Cryptex computes a new random 128-bit initialization vector for each encrypted secret. Obviously, to use this, the key provided by your keySource must be a 256-bit AES key.\n\n#### Plain text _(\"plaintext\")_\n\n**DANGER.** _SHOULD NEVER BE USED IN PRODUCTION._\n\nUseful for local development. With this, no keySource is needed and all secrets can be stored in plain text. Remember to set `secretEncoding` in your config, or the `CRYPTEX_SECRETENCODING` environment variable, to `utf8`.\n\n### 4. Secure your secrets\n\nIf you installed Cryptex globally, you'll have a CLI tool called `cryptex` that can encrypt and decrypt your keys according to your `cryptex.json` or environment variables. It's this easy:\n\n```\n$ cryptex encrypt mypassword\nQ+JfrQS5DtSjqWHu1oO4HqctA2hVw4VhaDQfBCuvO8U=\n```\n\nTo specify a particular node environment (for `cryptex.json` users), pass it in the `-e` flag. Run `cryptex --help` for all the details.\n\n### 5. Save your secrets\n\nProvide your secrets to production by either putting them in your config like this...\n\n```json\n// cryptex.json\n{\n\"production\": {\n  \"keySource\": \"kms\",\n  \"keySourceOpts\": {\n    \"dataKey\": \"kms+encrypted+base64+string==\"\n  },\n  \"secrets\": {\n    \"mySQLPass\": \"Q+JfrQS5DtSjqWHu1oO4HqctA2hVw4VhaDQfBCuvO8U=\"\n  }\n}\n```\n\n...or by saving them in uppercase environment variables prefixed by `CRYPTEX_SECRET_`:\n\n```\nCRYPTEX_SECRET_MYSQLPASS=\"Q+JfrQS5DtSjqWHu1oO4HqctA2hVw4VhaDQfBCuvO8U=\"\n```\n\n## API\n\nFirst, grab an instance:\n\n```javascript\nvar cryptex = require('cryptex')\n```\n\n##### new cryptex.Cryptex(opts = {})\n\nCreates a new Cryptex instance with the specified options. See the `update` function below for an option list.\n\n##### cryptex.encrypt(data: string|Buffer, encoding = \"utf8\"): string\n\nEncrypts the given data into a base64 string. If your string is binary data encoded as base64 or hex, just pass `base64` or `hex` for the encoding. The encoding is ignored if a Buffer is passed in.\n\n##### cryptex.decrypt(data: string|Buffer, encoding = \"base64\"): string\n\nDecrypts the given data and passes it back as utf8. If your string is binary data encoded as base64 or hex, just pass `base64` or `hex` for the encoding. The encoding is ignored if a Buffer is passed in.\n\n##### cryptex.getSecret(secret: string, optional = false): Promise\\<string\\>|_null_\n\nGets a Promise that resolves to a pre-saved secret, decrypted. See step 5 above. If no secret of the given name was found, this function with reject by default. To have it resolve with _null_ instead, set `optional` to true.\n\n##### cryptex.getSecrets(secrets: Array\\<string\\>, optional = false): Promise\\<Object\\>\n\nGets a Promise that resolves to an object mapping the requested secret names to their decrypted values. Unlike calling `getSecret` multiple times, this function will wait for the key to be cached (if enabled) from decrypting the first secret before decrypting the rest. This provides a faster and more efficient delivery of multiple secrets. If `optional` is set to `true`, any requested secrets not found will have their values in the object map set to `null`. Otherwise, the returned Promise will be rejected.\n\n##### cryptex.update(opts = {})\n\nUpdates the cryptex instance with new configuration. Available options are:\n\n**file:** The path to a json file to load, mapping environments names (as pulled from `$NODE_ENV`) to configuration objects. Can also be set in `CRYPTEX_FILE`. Defaults to `cryptex.json` in the app process's current working directory.\n\n**env:** The environment to select from the specified json file. Cryptex will attempt to pull an environment in this order: This value, the `CRYPTEX_ENV` env var, the `NODE_ENV` env var, or default to `default` if all else has failed.\n\n**cacheKey:** Boolean true to cache the key returned by the keySource in RAM, false to pull the key from the source every time it's needed. Can also be set in `CRYPTEX_CACHEKEY` with \"true\" or \"false\". _(Default: true)_\n\n**cacheTimeout:** If cacheKey is true, the number of milliseconds after which to delete the key and allow the Node.js garbage collector to remove it from RAM. Set to 0 to disable the timeout _(NOT RECOMMENDED)_. Can also be set in `CRYPTEX_CACHETIMEOUT`. _(Default: 5000)_\n\n**config:** A configuration object specifying the keySource and other information outlined above. If this is set, Cryptex will not attempt to load a configuration file, and the `environment` setting is ignored. Set config to `{}` to force all configuration to be set in environment variables.\n\n## Installation\n\nGet it global and local for the super convenient command-line tool:\n\n```\nnpm install -g cryptex\nnpm install --save cryptex\n```\n\n## Dependencies\n\nCryptex uses ES6 native Promises, available in Node.js version 0.12 and up.\n\n## Security warning\n\nThe state of cryptographic security in Javascript is abysmal at best. Node lends itself to far better possibilities than what you'd find in the browser, but be aware of the following types of attacks:\n\n- Javascript modules that require('cryptex') or some other portion of your code,\n  overriding `getSecret` or other functions to steal your decrypted private data.\n- Javascript modules that require('crypto') and monkey-patch the built-in Node library\n  to steal private data.\n- Nefarious applications that dump the RAM from your Node process. Node's garbage\n  collector cannot be forced to run from Javascript, so even turning off the key cache\n  could expose a window in which an unencrypted key could be stolen.\n- Applications, server users, or javascript modules that read local key files. When\n  in doubt, use Amazon KMS.\n\n[This article by NCC Group](https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/) is from 2011 and focuses on the security of Javascript in the browser, but is still very much applicable today. However, by using Amazon KMS, Cryptex, and with careful review of all installed modules, a secure system in Node.js is possible.\n\n## Versions\n\nEmbassy supports Node 4 LTE and higher out of the box. For 0.12, consider compiling with Babel.\n\n## License\n\nCryptex is released under the ultra-permissive ISC license. See LICENSE.txt for details.\n\n## Credits\n\nCryptex was originally created at [TechnologyAdvice](http://www.technologyadvice.com) in Nashville, TN.\n"
 },
 {
  "repo": "CambridgeProgrammerStudyGroup/cryptography",
  "language": "Python",
  "readme_contents": "# This repository has moved to https://github.com/StudyCodeOrg/cryptography\n"
 },
 {
  "repo": "zeutro/openabe",
  "language": "C++",
  "readme_contents": "# OpenABE\n\nOpenABE is a cryptographic library that incorporates a variety of attribute-based encryption (ABE) algorithms, industry standard cryptographic functions and tools, and an intuitive application programming interface (API). OpenABE is intended to allow developers to seamlessly incorporate ABE technology into applications that would benefit from ABE to protect and control access to sensitive data. OpenABE is designed to be easy to use and does not require developers to be encryption experts.\n\nThis bundle includes full source code, examples and three main sources of documentation:\n\n1. [OpenABE API Guide Document](https://github.com/zeutro/openabe/blob/master/docs/libopenabe-v1.0.0-api-doc.pdf) - explains how to install and use the library.\n2. [OpenABE CLI Util Document](https://github.com/zeutro/openabe/blob/master/docs/libopenabe-v1.0.0-cli-doc.pdf) - shows how to use the included command-line tools, including benchmarking.\n3. [OpenABE Design Document](https://github.com/zeutro/openabe/blob/master/docs/libopenabe-v1.0.0-design-doc.pdf) - explains in detail the functionalities and algorithms implemented.\n\nThe software is available for use under the [AGPL 3.0 license](https://github.com/zeutro/openabe/blob/master/LICENSE).\n\n## What is Attribute-Based Encryption (ABE)?\n\nEncryption is a method of encoding data that protects the confidentiality of its contents from unauthorized attackers. Traditionally, encryption was viewed as a tool to enable secure communication between a sender and a targeted recipient of information. For example, one might wish to store a message such that it can only be decrypted by the user bob@xyz.org.\n\nAttribute-Based Encryption is a more expansive type of public key encryption that allows for flexible policy-based access controls that are cryptographically (that is, mathematically) enforced. Instead of encrypting data to a single user, it is now possible to encrypt it so that the data can be decrypted by anyone with credentials satisfying an arbitrary attribute-based access control policy.\n\nIn OpenABE, any string can potentially serve as an attribute. In addition, attributes can be numeric values and policies can contain ranges over these values. The set of attributes used will depend on the designated application. \n\nIn order to understand the capabilities of ABE, it helps to organize them logically into three variants.\n\n* **Content-Based Access Control** - for granting selective access later (e.g., cloud, email, big data, subpoenas).\n\n\tIn an ABE system for content-based access control, attributes are associated with a ciphertext and the private key is associated with a policy over these attributes. (In academic literature, this variant is sometimes referred to as \"Key-Policy\" ABE.)\nFor example, a company could automatically encrypt all of its emails with the attributes being some (or all) of the 75 fields in Mail headers and then later the company can distribute a key to an analyst that allows for decryption of all emails that meet the policy of `To:engineering@corporation.com` OR (subject contains `cascade project` AND sent between `Dec 21, 2017` and `Jan 10, 2018`.\n\n* **Role-based Access Control** - for policies known at the time of encryption (e.g., classified documents, medical records).\n\n\tAn ABE system for role-based access control \"flips\" the semantics of content-based access control. In such a system, attributes are associated with a private key and a policy (or boolean formula) is associated with the ciphertext.  Here the attributes are often be associated with the credentials of a private key holder. (In academic literature this variant is sometimes referred to as \"Ciphertext-Policy\" ABE.)  For instance, one could restrict a ciphertext only to female employees who have been with the company since 2012 and worked on the \"HALE\" software project.\n\n\n* **Multi-authority Role-based Access Control** - for operating across organizational boundaries.\n\n\tOne issue with role-based access control is that in many applications you may need to write access control policies that span across different administrative boundaries. In standard ABE, there is one authority that hands out private keys. However, in some applications, it is natural for different authorities to manage different attributes. A multi-authority ABE system allows one to associate a ciphertext with a policy written across attributes issued by different authorities. These authorities can operate independently and do not have to coordinate (or even be aware of) each other. \n\n\tFor instance, the government might certify the attributes in a person's\ndriver's license (such as age), while a credit score company could distribute credentials about a user's credit score and an employer could distribute credentials about its employees. With this type of ABE, one can now send out a special offer\nreadable by anyone over age 50 with a strong credit score and a job at a local employer.\n\n\n## What cryptographic algorithms are implemented in OpenABE?\n\nOpenABE is a C/C++ software library offering several attribute-based encryption (ABE) schemes together with other core cryptographic functionalities such as authenticated symmetric-key encryption, public key encryption, digital signatures, X.509 certificate handling, key derivation functions, pseudorandom generators and more.\n\nFor the full cryptographic technical details inside OpenABE, see the included [OpenABE Design Document](https://github.com/zeutro/openabe/blob/master/docs/libopenabe-v1.0.0-design-doc.pdf).\n\nApplication developers should not need to be cryptographic experts to use ABE. To make OpenABE as secure and user-friendly as possible, the following features are provided by default:\n\n1. Collusion-Resistant: Common pitfall in ABE scheme development; Alice and Bob should not be able to combine their private keys to decrypt a ciphertext that neither can decrypt on their own.   Note: any attempt to \"engineer\" ABE from standard public key encryption usually falls to this attack.\n2.  Chosen Ciphertext Attack (CCA) Secure: Prevents serious and practical tampering attacks; most existing schemes in the academic literature only satisfy a weaker security notion (CPA-security).\n3.  Unrestricted Attributes: Attributes can be represented by any string (alternative: must enumerate every current and future attribute at system initialization) and can be used an unlimited number of times in a policy.\n\nOpenABE comes with support for efficient and optimized implementations of content-based and role-based ABE schemes. \n\nFor the full cryptographic technical details inside OpenABE, see the included OpenABE Design Document.\n\n## What platforms are supported in OpenABE?\n\nCurrently, OpenABE can be installed in the following environments:\n- Debian 7-9 and Ubuntu (12.04+)\n- CentOS 6/7 and Red Hat Linux 6/7\n- Mac OS X (10.8+)\n- Windows 7+ (via MINGW)\n- Android (NDK r10e)\n\n## Installation\n\nThis section describes the installation of the OpenABE source code (`libopenabe-1.0.0-src.tar.gz`) on various platforms. The OpenABE currently supports several operating systems including multiple versions/distros of Linux, Mac OS X and Windows.\n\n### Debian/Ubuntu-based Linux\n\nTo compile OpenABE on Ubuntu or Debian Linux-based distro, first run the `deps/install_pkgs.sh` script from the source directory to install the OpenABE system-specific dependencies as follows:\n\t\n\tcd libopenabe-1.0.0/\n\tsudo -E ./deps/install_pkgs.sh\n\nNote that you only have to do this once per system setup. After completion, you can proceed to compile the OpenABE as follows:\n\n\t. ./env\n\tmake\n\tmake test\n\nAll the unit tests should pass at this point and you can proceed to install the OpenABE in a standard location (`/usr/local`) as follows:\n\n\tsudo -E make install\n\nTo change the installation path prefix, modify the `INSTALL_PREFIX` variable in `libopenabe-1.0.0/Makefile`.\n\n### CentOS and RedHat Linux\n\nAs before, first run the script from the source directory to setup OpenABE dependencies:\n\n\tcd libopenabe-1.0.0/\n\tsudo ./deps/install_pkgs.sh\n\tscl enable devtoolset-3 bash\n\nNote that you only have to do this once per system setup. After completion, you can proceed to compile the OpenABE as follows:\n\n\t. ./env\n\tmake\n\tmake test\n\nAll the unit tests should pass at this point and you can proceed to install the OpenABE in a standard location (`/usr/local`) as follows:\n\n\tsudo make install\n\nTo change the installation path prefix, modify the `INSTALL_PREFIX` variable in `libopenabe-1.0.0/Makefile`.\n\n### Mac OS X\n\nNote that for Mac OS X, you will need [homebrew](http://brew.sh/) installed prior to running the `deps/install_pkgs.sh` script. Then, do the following (you may require `sudo` on the second step):\n\n\tcd libopenabe-1.0.0/\n\t./deps/install_pkgs.sh\n\nNote that you only have to do this once per system setup. After completion, you can proceed to compile the OpenABE as follows:\n\n\t. ./env\n\tmake\n\tmake test\n\nAll the unit tests should pass at this point and you can proceed to install the OpenABE in a standard location (`/usr/local`) as follows:\n\n\tsudo -E make install\n\nTo change the installation path prefix, modify the `INSTALL_PREFIX` variable in `libopenabe-1.0.0/Makefile`.\n\n### Windows\n\nTo build OpenABE on Windows 7, 8, and 10, you will need to download and install Mingw-w64, \nthe GNU toolchain port for building Windows-native binaries. We use the Mingw-w64 port packaged \nwith Minimal SYStem 2 (MSYS2). MSYS2 is an emulated POSIX-compliant environment for building \nsoftware with GNU tooling (e.g., GCC), bash, and package management using Arch Linux's Pacman. \nBinaries compiled with these compilers do not require `cygwin.dll` as they are standalone. \n\n1. Download `msys2-x86_64-latest.exe` and run it. Select `C:\\` for the installation directory to avoid `PATH` resolution problems. \n\n2. Launch the MSYS2 shell and execute the following command: \n\n        update-core\n\n3. Close the MSYS2 shell and launch the MinGW-w64 Win64 Shell. Note that after starting MSYS2, the prompt will indicate which version you have launched. \n\n4. Update the pre-installed MSYS2 packages (and install related tooling), close the shell when prompted to, and relaunch the MinGW-w64 Win64 Shell. Execute the following command to start the process:\n\n        pacman -Sy\n        pacman -Su base-devel unzip git wget mingw-w64-i686-toolchain \\\n        mingw-w64-x86_64-toolchain mingw-w64-i686-cmake mingw-w64-x86_64-cmake\n\n5. Install the required third-party libraries by executing the following command: \n\n        pacman -S gmp-devel mingw-w64-i686-boost mingw-w64-x86_64-boost \\\n        mingw-w64-x86_64-gtest mingw-w64-i686-gtest\n\n6. In the libopenabe directory, execute the following:\n \n        . ./env\n        make\n        make test\n        \n7. If all the unit tests pass, then proceed to install the library in a standard location:\n\t\t\t\n\t\t make install\n\n### Android\n\nTo build OpenABE for Android, you will need to download and install the Android NDK. The NDK is a toolset that enables cross-compiling C and C++ for ARM and Android-specific libraries and implementations of standard libraries (e.g., GNU STL). We use Android NDK r10e and build on Debian 7.\n\nDownload the Android NDK r10e at the following links: \n\n1. [For Windows-x86_64](http://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip)\n2. [For Darwin/Mac OS X-x86_64](https://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip)\n3. [For Linux-x86_64](http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip)\n\nUnzip the NDK to a directory of your choice. We unzip it to `/opt/android-ndk-r10e/` and will refer to this as `$ANDROID_NDK_ROOT` hereafter.\n\nWe build all libraries outside of the OpenABE deps directory. We export the following variables to streamline and contain the build process with a standalone toolchain: \n\n\texport TOOLCHAIN_ARCH=arm-linux-androideabi-4.8 \n\texport MIN_PLATFORM=android-14\n\texport INSTALLDIR=$HOME/android\n\nWith these variables set, you can now make the standalone toolchain: \n\n\t$ANDROID_NDK_ROOT/build/tools/make-standalone-toolchain.sh \\\n\t\t--toolchain=$TOOLCHAIN_ARCH --llvm-version=3.6 \\\n\t\t--platform=$MIN_PLATFORM --install-dir=$INSTALLDIR\n\nNote that 32- and 64-bit architectures are supported for any platform API greater than android-14; However, 64-bit is not supported in the RELIC library for ARM-based processors.\n\nTo build for Android, run the following:\n\t\n\t./platforms/android.sh $ANDROID_NDK_ROOT $INSTALLDIR\n\t\nIn the libopenabe directory, execute the following:\n\n\t. ./env $ANDROID_NDK_ROOT $INSTALLDIR\n\tmake src\n\n## Quick Start\n\nTo compile example C++ apps that use the high-level OpenABE crypto box API, do the following:\n\n\t. ./env\n\tmake examples\n\tcd examples/\n\nThen, execute the test apps for each mode of encryption supported:\n\n\t./test_kp\n\t./test_cp\n\t./test_pk\n\t\nYou can also execute the example that demonstrates use of the keystore with ABE decryption:\n\t\n\t./test_km\n\n## Benchmarking\n\nThe OpenABE is built on top of the abstract Zeutro Math library which supplies all of our elliptic-curve operations.  We instantiate our schemes using the state-of-the-art Barreto-Naehrig (BN) curves with the embedding degree `k = 12` (or commonly referred to as `BN-254`). This particular asymmetric curve is known to yield a very efficient pairing implementation and a security level equivalent to `AES-128`. As a result, this boosts the overall performance of ABE scheme implementations over prior efforts. Other benefits of BN curves include the ability to compress the representation of group elements. This directly translates to making ABE ciphertexts more compact which considerably reduces transmission costs.\n\nWe include a benchmark utility for all the ABE schemes provided in the OpenABE:\n\n\tMath Library: RELIC\n\tOpenABE benchmark utility, v1.0\n\tUsage bench_libopenabe: [ scheme => 'CP' or 'KP' ] [ iterations ] \\\n\t               [ attributes ] [ 'fixed' or 'range' ] [ 'cpa' or 'cca']\n\t-scheme: the type of ABE scheme to benchmark\n\t-iterations: the number of iterations per test\n\t-attributes: the number of attributes in the policy or \\\n                     attribute list for encryption\n\t-'fixed' or 'range': run with a fixed number of attributes \\\n\t                     or as a range from 1 to num. attributes\n\t-'cpa' or 'cca': chosen-plaintext secure vs chosen-ciphertext \\\n\t                 secure versions\n\nFor example, the command below shows how to benchmark the CCA-secure KP-ABE implementation with 100 attributes for encryption (averaged over 10 iterations). Moreover, the generated decryption key policy will have 100 attributes and each attribute will be involved in the decryption.\n\n\tcd src\n\tbench_libopenabe KP 10 100 fixed cca\n\n## Contributions\n\n### Cryptographic Design\n\n* Brent Waters\n* Matthew Green\n* Susan Hohenberger Waters\n* J. Ayo Akinyele\n\n### Software Design and Development\n\n* J. Ayo Akinyele\n* Matthew D. Green\n* Alan M. Dunn\n* Michael Rushanan\n\n## Copyright and License\n\nCopyright (c) 2020 Zeutro, LLC. All rights reserved.\n\nOpenABE is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nOpenABE is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.\n\nYou can be released from the requirements of the GNU Affero General Public License and obtain additional features by purchasing a commercial license. Buying such a license is mandatory if you engage in commercial activities involving OpenABE that do not comply with the open source requirements of the GNU Affero General Public License. \n\n"
 },
 {
  "repo": "WaterJuice/WjCryptLib",
  "language": "C",
  "readme_contents": "WjCryptLib\n==========\n\nWjCryptLib is a collection of cryptographic functions written in C. Each\nmodule is fully independent and generally requires only a single .c file\nand a a single .h file. AES-CTR does depend on the AES module, so in this\ncase all four files are needed.\n\nThe functions are designed to be portable and have been tested on both\na Little-Endian and a Big-Endian architecture. OpenMP is supported where\nparallelisation can occur. \n\nThe library and the demo programs can be built using CMake to generate\na build setup for any system, including Visual Studio on Windows and\nMake or Ninja for Linux. Refer to cmake.org to get CMake.\n\n*Placed into Public Domain by WaterJuice 2013 - 2018*\n\nLibrary\n-------\n\nTo use the library functions, only the following files are required,\ndepending on what cryptographic functions are wanted.\n\n* MD5 - (WjCryptLib_Md5.h, and WjCryptLib_Md5.c)\n* SHA1 - (WjCryptLib_Sha1.h, and WjCryptLib_Sha1.c)\n* SHA256 - (WjCryptLib_Sha256.h, and WjCryptLib_Sha256.c)\n* SHA512 - (WjCryptLib_Sha512.h, and WjCryptLib_Sha512.c)\n* RC4 - (WjCryptLib_Rc4.h, and WjCryptLib_Rc4.c)\n* AES - (WjCryptLib_Aes.h, and WjCryptLib_Aes.c)\n* AES-CTR - (WjCryptLib_AesCtr.h, and WjCryptLib_AesCtr.c, WjCryptLib_Aes.h,\n  and WjCryptLib_Aes.c)\n* AES-OFB - (WjCryptLib_AesOfb.h, and WjCryptLib_AesOfb.c, WjCryptLib_Aes.h,\n  and WjCryptLib_Aes.c)\n* AES-CBC - (WjCryptLib_AesCbc.h, and WjCryptLib_AesCbc.c, WjCryptLib_Aes.h,\n  and WjCryptLib_Aes.c)\n\n\nVersion 2.3.0 - March 2018\n--------------------------\n\n* Added AES-CBC module.\n* Added functions Md5Calculate, Sha1Calculate, Sha256Calculate, and\n  Sha512Calculate to calculate a hash in one call.\n* Added function Rc4XorWithKey to encrypt/decrypt a buffer with RC4 in\n  one call.\n* Bugfix: AesInitialise now returns -1 if invalid key size is provided.\n  Previously it would return 0 despite what was documented.\n\nVersion 2.2.0 - January 2018\n----------------------------\n\n* Added AES-OFB module.\n* File names have been changed to have the prefix `WjCryptLib_` rather\nthan `CryptLib_`.\n* Removed compiled binaries from source tree.\n\nVersion 2.1.0 - December 2017\n-----------------------------\n\nChanges:\n\n* Changed implementation of AES to one which is almost 5 times as fast.\nThe new implementation comes from LibTomCrypt. The newer implementation\nproduces a larger binary size as a trade-off.\n* AES-CTR module now supports OpenMP and when compiled with OpenMP will\nrun in parallel giving a much greater speed.\n* Changed interface for Initialisation functions for both AES and AES-CTR\nto be match RC4 (The context is first parameter not last)\n\nVersion 2.0.0 - December 2017\n-----------------------------\n\nChanges:\n\n* Added AES and AES-CTR modules. AES-CTR conforms to the same counter\nmode used with AES in *OpenSSL*.\n* All algorithms now work on Big-Endian architectures.\n* Now uses CMake for building rather than make files and Visual Studio\nprojects. CMake will generate whatever system is required.\n* Input function parameters are now marked `const`\n* File names have been changed to have the prefix `CryptLib_` rather\nthan `Lib`.\n* Various formatting changes to the files.\n\nVersion 1.0.0 - June 2013\n-------------------------\n\nContains following algorithms:\n\n* MD5\n* SHA1\n* SHA256\n* SHA512\n* RC4\n\nTest Programs\n-------------\n\nIn the projects directory there are several programs that compile to\ncommand line executables. One is WjCryptLibTest. This tests the algorithms\nagainst known test vectors. If compiling on a different system this\nis useful to verify that the results are still valid.\n\nAdditionally there are sample programs that demonstrate the functions. For\neach of the hash functions there is a program that creates a hash from a\nstring given on command line. For RC4 and AES-CTR there are programs that\noutput the stream in hex.\n\n* Md5String\n* Sha1String\n* Sha256String\n* Sha512String\n* Rc4Output\n* AesBlock\n* AesCtrOutput\n* AesOfbOutput\n\nUnlicense\n=========\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n\n"
 },
 {
  "repo": "upspin/upspin",
  "language": "Go",
  "readme_contents": "{{/* This file is interpreted as a template by serverutil/frontend/download.go. */}}\nUpspin\n\nDocumentation: https://upspin.io/\n\nUpspin is an experimental project to build a framework for naming\nand sharing files and other data securely, uniformly, and globally:\na global name system of sorts.\n\nIt is not a file system, but a set of protocols and reference\nimplementations that can be used to join things like file systems\nand other storage services to the name space.\n\nPerformance is not a primary goal. Uniformity and security are.\n\nTools included in this archive:\n\nupspin\n\tThe upspin command provides utilities for creating and\n\tadministering Upspin files, users, and servers.\n\n\thttps://godoc.org/upspin.io/cmd/upspin\n\nupspin-ui\n\tThe upspin-ui command presents a web interface to the Upspin name\n\tspace, and also provides a facility to sign up an Upspin user and\n\tdeploy an upspinserver to Google Cloud Platform.\n\n\thttps://godoc.org/augie.upspin.io/cmd/upspin-ui\n\ncacheserver\n\tThe cacheserver command implements a directory\n\tand storage cache for Upspin.\n\n\thttps://godoc.org/upspin.io/cmd/cacheserver\n\nupspinfs (Linux and macOS only)\n\tThe upspinfs command is a FUSE interface for Upspin.\n\n\thttps://godoc.org/upspin.io/cmd/upspinfs\n\nupspin-audit\n\tAudit provides subcommands for auditing storage consumption.\n\n\thttps://godoc.org/upspin.io/cmd/upspin-audit\n\nThese binaries were built for {{.OSArch}} at{{range .Commits}} {{.Repo}}/{{.ShortHash}}{{end}}.\n"
 },
 {
  "repo": "sindresorhus/djb2a",
  "language": "JavaScript",
  "readme_contents": "# djb2a\n\n> [DJB2a](http://www.cse.yorku.ca/~oz/hash.html#djb2) non-cryptographic hash function\n\n[DJB2a has good distribution and collisions are rare.](https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed/145633#145633)\n\n## Install\n\n```\n$ npm install djb2a\n```\n\n## Usage\n\n```js\nimport djb2a from 'djb2a';\n\ndjb2a('\ud83e\udd84\ud83c\udf08');\n//=> 1484783307\n```\n\nIt returns the hash as a positive integer.\n\n## Related\n\n- [fnv1a](https://github.com/sindresorhus/fnv1a) - FNV-1a non-cryptographic hash function\n- [sdbm](https://github.com/sindresorhus/sdbm) - SDBM non-cryptographic hash function\n"
 },
 {
  "repo": "sindresorhus/sdbm",
  "language": "JavaScript",
  "readme_contents": "# sdbm\n\n> [SDBM](http://www.cse.yorku.ca/~oz/hash.html#sdbm) non-cryptographic hash function\n\n[SDBM has good distribution and collisions are rare.](https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed/145633#145633)\n\n## Install\n\n```\n$ npm install sdbm\n```\n\n## Usage\n\n```js\nimport sdbm from 'sdbm';\n\nsdbm('\ud83e\udd84\ud83c\udf08');\n//=> 4053542802\n```\n\nIt returns the hash as a positive integer.\n\n## Related\n\n- [fnv1a](https://github.com/sindresorhus/fnv1a) - FNV-1a non-cryptographic hash function\n- [djb2a](https://github.com/sindresorhus/djb2a) - DJB2a non-cryptographic hash function\n"
 },
 {
  "repo": "flier/rust-fasthash",
  "language": "Rust",
  "readme_contents": "## rust-fasthash [![Continuous integration](https://github.com/flier/rust-fasthash/actions/workflows/ci.yml/badge.svg)](https://github.com/flier/rust-fasthash/actions/workflows/ci.yml) [![crate](https://img.shields.io/crates/v/fasthash.svg)](https://crates.io/crates/fasthash) [![docs](https://docs.rs/fasthash/badge.svg)](https://docs.rs/crate/fasthash/)\nA suite of non-cryptographic hash functions for Rust, binding the [smhasher](https://github.com/rurban/smhasher/).\n\n## Usage\n\n```toml\n[dependencies]\nfasthash = \"0.4\"\n```\n\n### `hash` and `hash_with_seed` function\n\n```rust\nuse fasthash::*;\n\nlet h = city::hash64(\"hello world\");\n\nlet h = metro::hash64_with_seed(\"hello world\", 123);\n```\n\n### `std::hash::Hash`\n\n```rust\nuse std::hash::{Hash, Hasher};\n\nuse fasthash::{MetroHasher, FastHasher};\n\nfn hash<T: Hash>(t: &T) -> u64 {\n    // Or use any of the `*Hasher` struct's available as aliases from\n    // root or in their respective modules as Hasher32/64 and some 128.\n    let mut s = MetroHasher::default();\n    t.hash(&mut s);\n    s.finish()\n}\n\nhash(&\"hello world\");\n```\n\n### `HashMap` and `HashSet`\n\n```rust\nuse std::collections::HashSet;\n\nuse fasthash::spooky::Hash128;\n\nlet mut set = HashSet::with_hasher(Hash128);\n\nset.insert(2);\n```\n\n### `RandomState`\n\n```rust\nuse std::collections::HashMap;\n\nuse fasthash::RandomState;\nuse fasthash::city::Hash64;\n\nlet s = RandomState::<Hash64>::new();\nlet mut map = HashMap::with_hasher(s);\n\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```\n\n## Hash Functions\n\n\n\n- Modern Hash Functions\n  - [City Hash](https://github.com/google/cityhash)\n  - [Farm Hash](https://github.com/google/farmhash)\n  - [Highway Hash](https://github.com/google/highwayhash)\n  - [Komi Hash](https://github.com/avaneev/komihash) **new**\n  - [Lookup3](https://en.wikipedia.org/wiki/Jenkins_hash_function)\n  - [Meow Hash](https://github.com/cmuratori/meow_hash) **new**\n  - [Metro Hash](https://github.com/jandrewrogers/MetroHash)\n  - [Mum Hash](https://github.com/vnmakarov/mum-hash)\n  - [Murmur Hash](https://sites.google.com/site/murmurhash/)\n  - [mx3 Hash](https://github.com/jonmaiga/mx3) **new**\n  - [NmHash](https://github.com/gzm55/hash-garage) **new**\n  - [PengyHash](https://github.com/tinypeng/pengyhash) **new**\n  - [PrvHash](https://github.com/avaneev/prvhash) **new**\n  - [Sea Hash](https://github.com/ticki/tfs/tree/master/seahash)\n  - [Spooky Hash](http://burtleburtle.net/bob/hash/spooky.html)\n  - [T1ha Hash](https://github.com/leo-yuriev/t1ha)\n  - [Umash](https://github.com/backtrace-labs/umash) **new**\n  - [wyhash](https://github.com/wangyi-fudan/wyhash) (final3)\n  - [xx Hash](https://github.com/Cyan4973/xxHash) with  **experimental** [XXH3](https://github.com/Cyan4973/xxHash#new-experimental-hash-algorithm) hash algorithm\n- Compatibility\n  - [Hasher](https://doc.rust-lang.org/std/hash/trait.Hasher.html)\n  - std::collections::{[HashMap](https://doc.rust-lang.org/std/collections/struct.HashMap.html), [HashSet](https://doc.rust-lang.org/std/collections/struct.HashSet.html)} with `RandomState`\n  - [Digest](https://docs.rs/digest/0.8.1/digest/trait.Digest.html) (optional)\n\n## Benchmark\n\nFirst install cargo-criterion:\n\n```bash\n$ cargo install cargo-criterion\n```\n\nThen you can use it to run `Criterion-rs` benchmarks:\n\n```bash\n$ cargo criterion\n```\n"
 },
 {
  "repo": "SalusaSecondus/CryptoGotchas",
  "language": "HTML",
  "readme_contents": "# CryptoGotchas\nA collection of common (interesting) cryptographic mistakes and learning resources.\n\n**This page is now mastered at [index.md](index.md) and primarily intended to be viewed at [https://gotchas.salusa.dev](https://gotchas.salusa.dev?utm_source=github)**\n"
 },
 {
  "repo": "btcpayserver/btcpayserver-php-client",
  "language": "PHP",
  "readme_contents": "# === Warning ===\n\nThis is the old BitPay based PHP client and should be considered deprecated (even though it currently still works). If you are building something from scratch, [use the new Greenfield API](https://github.com/btcpayserver/btcpayserver-greenfield-php).\n\nbtcpayserver/btcpayserver-php-client\n=================\n\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](https://raw.githubusercontent.com/btcpayserver/btcpayserver-php-client/master/LICENSE.md)\n[![Travis](https://img.shields.io/travis/btcpayserver/btcpayserver-php-client.svg?style=flat-square)](https://travis-ci.org/btcpayserver/btcpayserver-php-client)\n[![Packagist](https://img.shields.io/packagist/v/btcpayserver/btcpayserver-php-client.svg?style=flat-square)](https://packagist.org/packages/btcpayserver/btcpayserver-php-client)\n[![Code Climate](https://img.shields.io/codeclimate/github/btcpayserver/btcpayserver-php-client.svg?style=flat-square)](https://codeclimate.com/github/btcpayserver/btcpayserver-php-client)\n[![Scrutinizer](https://img.shields.io/scrutinizer/g/btcpayserver/btcpayserver-php-client.svg?style=flat-square)](https://scrutinizer-ci.com/g/btcpayserver/btcpayserver-php-client/)\n[![Coveralls](https://img.shields.io/coveralls/btcpayserver/btcpayserver-php-client.svg?style=flat-square)](https://coveralls.io/r/btcpayserver/btcpayserver-php-client)\n\n[![Documentation Status](https://readthedocs.org/projects/php-btcpay-client/badge/?version=latest)](https://readthedocs.org/projects/php-btcpay-client/?badge=latest)\n[![Total Downloads](https://poser.pugx.org/btcpayserver/btcpayserver-php-client/downloads.svg)](https://packagist.org/packages/btcpayserver/btcpayserver-php-client)\n[![Latest Unstable Version](https://poser.pugx.org/btcpayserver/btcpayserver-php-client/v/unstable.svg)](https://packagist.org/packages/btcpayserver/btcpayserver-php-client)\n\nThis is a self-contained PHP implementation of BTCPayServer's cryptographically secure API: https://github.com/btcpayserver/btcpayserver-doc/blob/master/docs/CustomIntegration.md\n\n# Before you start\n\nIf your application requires BitPay compatibility go to this repository instead https://github.com/btcpayserver/php-bitpay-client\n\nThe files in \"examples\" are migrated from previous versions and are UNTESTED. If someone can review the example files and improve them, please help out.\n\n# Important upgrade notes\n\n## Version 0.2.0\n- The latest changes made in BitPay's v4 API are now reflected in this API.\n- If you previously had \"401 unauthorized\" issues with this API, these should now be fixed. \n- This PHP API no longer depends on Symfony, making this framework independent. If you were using this API in combination with Symfony and require a Symfony service, you can get the old files from the `old-master` branch. We recommended you to keep the Symfony stuff separate.\n\n## Version 0.1.2\n- Previous versions were not numbered.\n\n# Installation\n\n## Composer\n\n### Install Composer\n\n```bash\ncurl -sS https://getcomposer.org/installer | php\n```\n\n### Install using composer\n\n```bash\nphp composer.phar require btcpayserver/btcpayserver-php-client\n```\n\n# Configuration\n\nSee https://github.com/btcpayserver/btcpayserver-php-client/tree/master/examples\n\n# Usage\n\n## Documentation\n\nPlease see the ``docs`` directory for information on how to use this library\nand the ``examples`` directory for examples on using this library. You should\nbe able to run all the examples by running ``php examples/File.php``.\n\nThe ``examples/tutorial`` directory provides four scripts that guide you with creating a BTCPayServer invoice:\nhttps://github.com/btcpayserver/btcpayserver-php-client/blob/master/examples/tutorial/\n\n# Support\n\n* https://github.com/btcpayserver/btcpayserver-php-client/issues\n"
 },
 {
  "repo": "amiralis/pycon2017_crypto_tutorial",
  "language": "Jupyter Notebook",
  "readme_contents": "# Applied Modern Cryptography in Python (PyCon 2017)\n\n[Amirali Sanatinia](http://www.ccs.neu.edu/home/amirali)\n\nToday we use cryptography in almost everywhere. From surfing the web over https, to working remotely over ssh. Although most developers don't need to implement cryptography primitives, the knowledge and understanding of these building block allows them to better deploy them in their application. In modern crypto we have all the building block to develop secure application. However, we see instances of insecure code everywhere. Most of these vulnerabilities are not because of theoretic shortcomings, but due to bad implementation or a flawed protocol design. Cryptography is a delicate art where nuances matter, and failure to comprehend the subtleties of these building blocks leads to critical vulnerabilities. To add insult to injury most of the resources available are either outdated or wrong, and inarguably, using bad crypto more dangerous than not using it.\n\n\n## Requirements\n\n * Python 3\n * [Jupyter Notebook](http://jupyter.org/)\n * [cryptography](http://cryptography.io/)\n\n\n## Setup Instructions\nYou need to have [pip](https://packaging.python.org/) installed. Optinally you can use [virtualenv](https://packaging.python.org/installing/#creating-virtual-environments) for an isolated installation of libraries instead of globally.\n\n```bash\n  $ pip3 install jupyter\n  $ pip3 install cryptography\n```\n\nAlternatively, if you have the conda package manager, you can run:\n\n```bash\n$ conda create -n crypto python=3.6 jupyter cryptography\n$ source activate crypto\n$ jupyter notebook  \n```\n## Docker Image\nYou can also use the following commands to run a dockerized version of this tutorial.\n\n```bash\n  $ docker build -t NAME .\n  $ docker run -p 8888:8888 NAME\n```\n\nReplace NAME with a name for this docker image (e.g., crypto)\n"
 },
 {
  "repo": "mheyman/Isopoh.Cryptography.Argon2",
  "language": "C#",
  "readme_contents": "![Isopoh](/images/isopoh144.png)\n\n# FULLY MANAGED .NET CORE ARGON2 IMPLEMENTATION\n[d]: #project\n**[INSTALL][i] | [USAGE][u] | [API][a] | [AUTHOR][auth] | [LICENSE][cpl]**\n\n> Argon2 is a hash generator optimized to produce hashes suitable for\n> credential storage, key derivation, or other situations requiring a\n> cryptographically secure password hash. Argon2 was the winner of the\n> 2015 [Password Hashing Competition](https://password-hashing.net/).\n>\n> This fully managed implementation of Argon2 runs in ***.NET Core***, ***.NET\n> Framework***, or ***WebAssembly*** (via [Blazor](https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor)\n> or [Uno Platform](https://platform.uno/)).\n\nStandard Argon2 Hashing:\n```csharp\nvar password = \"password1\";\nvar passwordHash = Argon2.Hash(password);\n```\nArgon2 Verification:\n```csharp\nif (Argon2.Verify(passwordHash, password))\n{\n    // do stuff\n}\n```\n\nAll Argon2 options available for your hashing needs...\n\n## MOTIVATION\n[mo]: #motivation 'Why C# Argon2'\n\nThe Argon2 reference implementation is available from https://github.com/p-h-c/phc-winner-argon2\nand, indeed, the C# code in this repository was based upon that implementation\nbut that implementation is in C. Building a C# wrapper around the C\nimplementation is possible but adds complexity.\n\nThis 100% managed-code library allows you to use the Argon2 hash in any\n.NET (including Blazor) application without added complexity.\n\n## GETTING STARTED\n[gt]: #getting-started 'Getting started guide'\n\nThis requires a .NET environment and runs on Windows, Linux, MacOS, and WebAssembly (via Blazor).\n\n### INSTALLATION\n[i]: #installation 'Installation guide'\n\n#### NUGET\n[nuget]: #nuget 'Install via NuGet'\n\nThe recommended way to get started is by use the NuGet package:\n\n```shell\nInstall-Package Isopoh.Cryptography.Argon2\n```\n\nfrom [https://www.nuget.org/packages/Isopoh.Cryptography.Argon2](https://www.nuget.org/packages/Isopoh.Cryptography.Argon2).\n\nThis project uses [SourceLink](https://github.com/dotnet/sourcelink/blob/master/README.md)\nso you should be able to step into the source code for debugging even when\njust adding the NuGet package as a dependency.\n\n#### CLONE\n[clone]: #clone 'Install via clone'\n\nYou can also, of course, go old-school and clone the repository and link use\nthe .csproj files directly:\n\n```shell\ngit clone https://github.com/mheyman/Isopoh.Cryptography.Argon2.git\n```\n\nthen add the `ProjectReference` lines to your .csproj to reference\n...`Isopoh.Cryptography.SecureArray\\Isopoh.Cryptography.SecureArray.csproj`,\n...`Isopoh.Cryptography.Blake2b\\Isopoh.Cryptography.Blake2b.csproj`, and\n...`Isopoh.Cryptography.Argon2\\Isopoh.Cryptography.Argon2.csproj`. For example:\n```xml\n<ItemGroup>\n    <ProjectReference Include=\"..\\..\\..\\Isopoh.Cryptography.Argon2\\Isopoh.Cryptography.SecureArray\\Isopoh.Cryptography.SecureArray.csproj\" />\n</ItemGroup>\n```\n\n### USAGE\n[u]: #usage 'Product usage'\n\nUsing the defaults:\n\n```csharp\nvar password = \"password1\";\nvar passwordHash = Argon2.Hash(password);\nif (Argon2.Verify(passwordHash, password))\n{\n    // do stuff\n}\n```\n\nSetting everything:\n\n```csharp\nvar password = \"password1\";\nbyte[] passwordBytes = Encoding.UTF8.GetBytes(password);\nbyte[] salt = new byte[16];\n\n// somewhere in the class definition:\n//   private static readonly RandomNumberGenerator Rng =\n//       System.Security.Cryptography.RandomNumberGenerator.Create();\nRng.GetBytes(salt);\n\nvar config = new Argon2Config\n{\n    Type = Argon2Type.DataIndependentAddressing,\n    Version = Argon2Version.Nineteen,\n    TimeCost = 10,\n    MemoryCost = 32768,\n    Lanes = 5,\n    Threads = Environment.ProcessorCount, // higher than \"Lanes\" doesn't help (or hurt)\n    Password = passwordBytes,\n    Salt = salt, // >= 8 bytes if not null\n    Secret = secret, // from somewhere\n    AssociatedData = associatedData, // from somewhere\n    HashLength = 20 // >= 4\n};\nvar argon2A = new Argon2(config);\nstring hashString;\nusing(SecureArray<byte> hashA = argon2A.Hash())\n{\n    hashString = config.EncodeString(hashA.Buffer);\n}\n\n//\n// Now pretend \"passwordBytes\" is what just came in and that it must be\n// verified against the known \"hashString\".\n//\n// Note setting \"Threads\" to different values doesn't effect the result,\n// just the time it takes to get the result.\n//\nvar configOfPasswordToVerify = new Argon2Config { Password = passwordBytes, Threads = 1 };\nSecureArray<byte> hashB = null;\ntry\n{\n    if (configOfPasswordToVerify.DecodeString(hashString, out hashB) && hashB != null)\n    {\n        var argon2ToVerify = new Argon2(configOfPasswordToVerify);\n        using(var hashToVerify = argon2ToVerify.Hash())\n        {\n            if (Argon2.FixedTimeEquals(hashB, hashToVerify))\n            {\n                // verified\n            }\n        }\n    }\n}\nfinally\n{\n    hashB?.Dispose();\n}\n\n//\n// Or, more simply (setting \"Threads\" to \"5\")\n//\nif (Argon2.Verify(hashString, passwordBytes, 5))\n{\n    // verified\n}\n\n```\n\n## API\n[a]: #api 'Argon2\\'s API description'\n\nThe full API is at\n[https://mheyman.github.io/Isopoh.Cryptography.Argon2](https://mheyman.github.io/Isopoh.Cryptography.Argon2).\n\nIn particular, the various options for Argon2 hashing can be found in\n[Argon2Config](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.Argon2.Argon2Config.html#properties)\nand used with [Argon2.Hash()](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.Argon2.Argon2.html#Isopoh_Cryptography_Argon2_Argon2_Hash_Isopoh_Cryptography_Argon2_Argon2Config_).\nThere are other `Argon2.Hash()` convenience calls available there as well.\n\nIf you are only interested in Blake2b, the underlying hash used in Argon2, you\ncan go to the [Blake2b.ComputeHash()](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.Blake2b.Blake2B.html#Isopoh_Cryptography_Blake2b_Blake2B_ComputeHash_System_Byte___Isopoh_Cryptography_Blake2b_Blake2BConfig_Isopoh_Cryptography_SecureArray_SecureArrayCall_)\ncalls.\n\nAlso, there is [SecureArray&lt;T>](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.SecureArray.SecureArray-1.html). The `SecureArray` takes a [SecureArrayCall](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.SecureArray.SecureArrayCall.html)\nwhich is a class that has three `Func<>` properties, one to\n[LockMemory](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.SecureArray.SecureArrayCall.html#Isopoh_Cryptography_SecureArray_SecureArrayCall_LockMemory),\none to\n[UnlockMemory](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.SecureArray.SecureArrayCall.html#Isopoh_Cryptography_SecureArray_SecureArrayCall_UnlockMemory),\nand one to [ZeroMemory](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.SecureArray.SecureArrayCall.html#Isopoh_Cryptography_SecureArray_SecureArrayCall_ZeroMemory).\nYou can easily create your own `SecureArrayCall` to lock/unlock/zero or perhaps\nto log secure memory actions.\n\n### JUST WHAT IS THIS \"SecureArray\"?\n[seca]: #securearry 'SecureArray description'\n\nYou can think of the `SecureArray` sort of like you would think of\n[`SecureString`](https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring)\nexcept that `SecureString` does crypto (usually -\n[encryption isn't supported everywhere](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md))\nto protect its sensitive data and has windows of vulnerability when it\ndecrypts the string for use. `SecureArray` protects its data by locking the\ndata into RAM to keep it from swapping to disk and also zeroing the buffer when\ndisposed. So, unlike `SecureString`, any process with access to your process's\nmemory will be able to read the data in your `SecureArray`, but you do not\nhave to worry about your data persisting anywhere or multiple copies of your\ndata floating around RAM due to C#'s memory management.\n\nBecause it locks the memory into RAM (and at a\nnon-movable-by-the-garbage-collector location), you need to use it\nas infrequently as possible and for as short a time as possible. RAM secured\nthis way puts stress on the computer as a whole by denying physical\nRAM for other processes and puts stress on your particular executable by\ndenying freedom to the garbage collector to reduce fragmentation as needed\nfor best performance.\n\nNote: when using SecureArray in the browser (for example, under Blazor or UnoPlatform),\nthe memory cannot be locked into RAM so SecureArray does its best effort to protect the\ndata by zeroing the buffer when it is disposed.\n\nNote similarly: when using SecureArray in a Universal Windows Platform (UWP)\napplication, I have yet to figure out how to use the supposedly available\n`VirtualAllocFromApp()` system call to lock memory into RAM so SecureArray does\nits best effort to protect the data by zeroing the buffer when it is disposed.\n\n***Always*** dispose of your `SecureArray`s.\n\n### BLAKE2B PEDIGREE\n[blake2]: #blake2 'Blake2b Pedigree'\n\nArgon2 uses Blake2b as a cryptographic building block. This code uses the\nC# implementation of Blake2 modified from https://github.com/BLAKE2.\nThe main modification is that the Blake2 here uses [SecureArray&lt;T>](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.SecureArray.SecureArray-1.html). The `SecureArray` takes a [SecureArrayCall](https://mheyman.github.io/Isopoh.Cryptography.Argon2/api/Isopoh.Cryptography.SecureArray.SecureArrayCall.html)\nto protect potentially sensitive data. Most other modifications are\nstrictly cosmetic.\n\nAs part of this Blake2b port, an effort was made to speed Blake2b by using\ntechniques like unrolling and using raw buffers in unsafe code. It turns out\nthe CLR optimizes plain code better than unrolled/unsafe code and the original\nalways ran faster. At some point I may try a port to [System.Numerics.Vector&lt;T>](https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector-1)...\n\n### API GENERATION\n[apigen]: #apigen 'API Generation'\n\nThe API Documentation at [https://mheyman.github.io/Isopoh.Cryptography.Argon2](https://mheyman.github.io/Isopoh.Cryptography.Argon2)\ngets generated automatically upon build. This happens via a dummy C# \"Doc\"\nproject that uses the [*DocFx*](https://github.com/dotnet/docfx) NuGet\npackage to produce the API documentation.\n\n## AUTHOR\n[auth]: #author 'Credits & author\\'s contacts info'\n[Michael Heyman](https://github.com/mheyman)\n\n## ACKNOWLEDGMENTS\n[acc]: acknowledgments\n\nList of people and project that inspired creation of this one:\n\n- The many contributers of the [Argon2 repository](https://github.com/p-h-c/phc-winner-argon2)\n- and the cryptographers responsible for creating and testing that algorithm\n- @CodesInChaos for the fully managed Blake2b implementation [here](https://github.com/BLAKE2/BLAKE2)\n- @PurpleBooth for his readme template posted [here](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2)\n\n## LICENSE\n[cpl]:#license 'License info'\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">Isopoh.Cryptography.Argon2</span> by <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"https://github.com/mheyman/Isopoh.Cryptography.Argon2\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Michael Heyman</a> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a>.\n## PRODUCTION STATUS & SUPPORT\n[ps]: #production-status--support 'Production use disclaimer & support info'\n\nYou should be aware that this project is supported solely by me and provided as is.\n\nGo back to the **[project description][d]**\n\n"
 },
 {
  "repo": "Zondax/filecoin-signing-tools",
  "language": "Rust",
  "readme_contents": "# Filecoin Signing Tools\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![GithubActions](https://github.com/zondax/filecoin-signing-tools/actions/workflows/main.yaml/badge.svg)](https://github.com/Zondax/filecoin-signing-tools/blob/main/.github/workflows/main.yaml)\n[![npm version](https://badge.fury.io/js/%40zondax%2Ffilecoin-signing-tools.svg)](https://badge.fury.io/js/%40zondax%2Ffilecoin-signing-tools)\n\nYou can find more information in the [Documentation Site](https://docs.zondax.ch/docs/filecoin/filecoin-signing-tools/)\n\n- Rust Native Library\n  - Secp256k1\n  - Multisig (Work in progress)\n  - BLS\n  - Filecoin transactions (CBOR <> JSON serialization)\n- WASM Library\n  - Secp256k1\n  - Multisig (Work in progress)\n  - BLS\n  - Filecoin transactions (CBOR <> JSON serialization)\n    \n- Examples\n\n  | Caller          | Callee          | Status                           |                                  |\n  |-----------------|-----------------|----------------------------------|----------------------------------|\n  |                 |                 |                                  |                                  |\n  | Browser         | WASM            | Ready :heavy_check_mark:         | [Link](examples/wasm_browser)    |\n  | Node.js / Mocha | WASM            | Ready :heavy_check_mark:         | [Link](examples/wasm_node)       |\n  |                 |                 |                                  |                                  |\n  | C               | Rust            | Ready :heavy_check_mark:         | [Link](examples/ffi/c)           |\n  | C++             | Rust            | Ready :heavy_check_mark:         | [Link](examples/ffi/c++)         |\n  | Java            | Rust            | Ready :heavy_check_mark:         | [Link](examples/ffi/java)        |\n  | Kotlin          | Rust            | Ready :heavy_check_mark:         | [Link](examples/ffi/kotlin)      |\n  | Go              | Rust            | Ready :heavy_check_mark:         | [Link](examples/ffi/go)          |\n  | Objective-C     | Rust            | Ready :heavy_check_mark:         | [Link](examples/ffi/objective-c) |\n  | Swift           | Rust            | Ready :heavy_check_mark:         | [Link](examples/ffi/swift)       |\n  | Flutter         | Rust            | Ready :heavy_check_mark:         | [Link](examples/ffi/flutter)     |\n  | React Native    | Rust            | Planned :hourglass_flowing_sand: | [Soon]()                         |\n\n## Running tests and examples\n\n> TIP: A good place to look for reproducible steps is the circleci configuration of this project\n\n### Installing dependencies\n\nYou will need [rust](https://www.rust-lang.org/tools/install) installed.\n\n```bash\n# Install wasm-pack in your system\n$ make install_wasmpack\n# Install some utilitary tools\n$ make install_deps_rust\n```\n\nNote: wasm  parck are required if you want to use the wasm version of the lib.\n\n### Rust\n\n```bash\ncargo test -p filecoin-signer\n```\n\n### WASM\n\nBuild WASM and link it locally so examples are linked to the local version:\n\n```bash\nmake build_npm\n```\n\nAfter this, you can run the following tests / examples:\n\n| Command                  | Description               |\n|--------------------------|---------------------------|\n| `make test_npm_unit`     | Unit tests                |\n| `make test_npm_node`     | Node integration tests    |\n| `make test_npm_browser`  | Browser integration tests |\n"
 },
 {
  "repo": "AdamLaurie/cribtastic",
  "language": "Python",
  "readme_contents": "cribtastic\n==========\n\nA cryptographic crib manipulation tool\n\nFull description here:\n\n  http://adamsblog.aperturelabs.com/2013/05/back-to-skule-one-pad-two-pad-me-pad.html\n\nUsage:\n\n  cribtastic.py [options] <KEY HEX> <CIPHERTEXT HEX> [ <CIPHERTEXT HEX> ... ]\n\n  options:\n\n              -a --ascii= <FILE>            Read ASCII/BASE64 file\n              -b --binary= <FILE>           Read BINARY file\n              -h --help                     Show help text\n              -H --Hexfile= <FILE>          Read HEX file (newline delimited, or specify --length)\n              -l --length= <LENGTH>         Segment/Key length for file reads\n\nNote that any combination of data source can be provided - e.g.:\n\n  cribtastic.py -a file.b64 -b file.bin -l 24 '' 315c4eeaa8b5f8aaf9174145bf43e1784b8fa00dc71d885a804e5ee9fa40b16349c146fb778cdf2d3aff021dfff5b403b510d0d0455468aeb98622b137dae857553ccd8883a7bc37520e06e515d22c954eba5025b8cc57ee59418ce7dc6bc41556bdb36bbca3e8774301fbcaa3b83b220809560987815f65286764703de0f3d524400a19b159610b11ef3e 234c02ecbbfbafa3ed18510abd11fa724fcda2018a1a8342cf064bbde548b12b07df44ba7191d9606ef4081ffde5ad46a5069d9f7f543bedb9c861bf29c7e205132eda9382b0bc2c5c4b45f919cf3a9f1cb74151f6d551f4480c82b2cb24cc5b028aa76eb7b4ab24171ab3cdadb8356f 32510ba9a7b2bba9b8005d43a304b5714cc0bb0c8a34884dd91304b8ad40b62b07df44ba6e9d8a2368e51d04e0e7b207b70b9b8261112bacb6c866a232dfe257527dc29398f5f3251a0d47e503c66e935de81230b59b7afb5f41afa8d661cb 32510ba9aab2a8a4fd06414fb517b5605cc0aa0dc91a8908c2064ba8ad5ea06a029056f47a8ad3306ef5021eafe1ac01a81197847a5c68a1b78769a37bc8f4575432c198ccb4ef63590256e305cd3a9544ee4160ead45aef520489e7da7d835402bca670bda8eb775200b8dabbba246b130f040d8ec6447e2c767f3d30ed81ea2e4c1404e1315a1010e7229be6636aaa \n\nwill load some 24 byte ciphertexts from the base64 encoded file 'file.b64' and the binary file 'file.bin', set a blank key and \nload four further ciphertexts provided on the command line.\n\n\n"
 },
 {
  "repo": "epsylon/ufonet",
  "language": "JavaScript",
  "readme_contents": "  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-multiverse-welcome_small.png \"UFONet Welcome\")\n\n----------\n\n + Website:   https://ufonet.03c8.net\n\n----------\n\n#### Description:\n\n  UFONet - is a free software, P2P and cryptographic -disruptive toolkit- that allows to perform DoS and DDoS attacks; \non the Layer 7 (APP/HTTP) through the exploitation of Open Redirect vectors on third-party websites to act as a botnet \nand on the Layer3 (Network) abusing the protocol.\n\n  It also works as an encrypted DarkNET to publish and receive content by creating a global client/server network based \non a direct-connect P2P architecture.\n\n  See these links for more info:\n\n   - FAQ:\n     https://ufonet.03c8.net/FAQ.html\n\n   - CWE-601:Open Redirect: \n     https://cwe.mitre.org/data/definitions/601.html\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-schema.png \"UFONet Schema\")\n\n   - LOIC: \n     https://en.wikipedia.org/wiki/Low_Orbit_Ion_Cannon\n\n   - LORIS: \n     https://en.wikipedia.org/wiki/Slowloris_(software)\n\n   - UFOSYN: \n     https://en.wikipedia.org/wiki/SYN_flood\n\n   - FRAGGLE: \n     https://en.wikipedia.org/wiki/Fraggle_attack\n\n   - UFORST: \n     https://ddos-guard.net/en/terminology/attack_type/rst-or-fin-flood\n\n   - SPRAY: \n     https://en.wikipedia.org/wiki/DRDOS\n\n   - SMURF: \n     https://en.wikipedia.org/wiki/Smurf_attack\n\n   - XMAS: \n     https://en.wikipedia.org/wiki/Christmas_tree_packet\n\n   - DROPER: \n     https://en.wikipedia.org/wiki/IP_fragmentation_attack\n\n   - SNIPER: \n     https://www.imperva.com/learn/application-security/snmp-reflection/\n\n   - TACHYON: \n     https://www.us-cert.gov/ncas/alerts/TA13-088A\n\n   - PINGER: \n     https://www.cloudflare.com/learning/ddos/ping-icmp-flood-ddos-attack/\n\n   - MONLIST: \n     https://www.us-cert.gov/ncas/alerts/TA14-013A\n\n   - UFOACK: \n     https://www.f5.com/services/resources/glossary/push-and-ack-flood\n\n   - OVERLAP: \n     https://cyberhoot.com/cybrary/fragment-overlap-attack/\n\n   - UFOUDP: \n     https://en.wikipedia.org/wiki/UDP_flood_attack\n\n   - NUKE: \n     https://dl.packetstormsecurity.net/papers/general/tcp-starvation.pdf\n\n----------\n\n#### Installing:\n\n  UFONet runs on many platforms. It requires Python (>=3) and the following libraries:\n\n       python3-pycurl - Python bindings to libcurl (Python 3)\n       python3-geoip - Python3 bindings for the GeoIP IP-to-country resolver library\n       libgeoip-dev - Development files for the GeoIP library\n       libgeoip1 - non-DNS IP-to-country resolver library\n       python3-whois - Python module for retrieving WHOIS information - Python 3\n       python3-crypto - cryptographic algorithms and protocols for Python 3\n       python3-requests - elegant and simple HTTP library for Python3, built for human beings\n       python3-scapy - Packet crafting/sniffing/manipulation/visualization security tool\n\n  You can automatically get all required libraries using (as root):\n\n       python3 setup.py install\n\n  For manual installation, on Debian-based systems (ex: Ubuntu), run:\n\n       sudo apt-get install python3-pycurl python3-geoip python3-whois python3-crypto python3-requests python3-scapy libgeoip1 libgeoip-dev\n\n  On other systems such as: Kali, Ubuntu, ArchLinux, ParrotSec, Fedora, etc... also run:\n\n       pip3 install GeoIP\n       pip3 install python-geoip\n       pip3 install pygeoip\n       pip3 install requests\n       pip3 install pycrypto\n       pip3 install pycurl\n       pip3 install whois\n       pip3 install scapy-python3\n\n####  Source libs:\n\n   * Python: https://www.python.org/downloads/\n   * PyCurl: http://pycurl.sourceforge.net/\n   * GeoIP: https://pypi.python.org/pypi/GeoIP/\n   * Python-geoip: https://pypi.org/project/python-geoip/\n   * Pygeoip: https://pypi.org/project/pygeoip/\n   * Whois: https://pypi.python.org/pypi/whois\n   * PyCrypto: https://pypi.python.org/pypi/pycrypto\n   * PyRequests: https://pypi.python.org/pypi/requests\n   * Scapy-Python3: https://pypi.org/project/scapy-python3/\n   * Leaflet: http://leafletjs.com/ (provided)\n\n----------\n\n####  License:\n\n  UFONet is released under the GPLv3. You can find the full license text\nin the [LICENSE](./docs/LICENSE) file.\n\n----------\n\n####  Screenshots (current version!):\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-phantom-shell-1.png \"UFONet Shell Version\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-phantom-shell-2.png \"UFONet Shell Board\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-phantom-shell-3.png \"UFONet GUI Shell\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-phantom-main_small.png \"UFONet GUI Main Panel\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-kraken-help_small.png \"UFONet GUI Help\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-phantom-botnet.png \"UFONet GUI Botnet\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-kraken-stats.png \"UFONet GUI General Stats\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-multiverse-ranking_small.png \"UFONet GUI Ranking\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-kraken-attack.png \"UFONet GUI Attack\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-kraken-board_small.png \"UFONet GUI Board\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-kraken-wargames_small.png \"UFONet GUI Wargames\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-gui3_small.png \"UFONet GeoMap /deploying/\")\n\n  ![UFONet](https://ufonet.03c8.net/ufonet/ufonet-gui4_small.png \"UFONet GeoMap /attacking/\")\n\n"
 },
 {
  "repo": "amrayn/ripe",
  "language": "C++",
  "readme_contents": "\n<p align=\"center\">\n  \ufdfd\n</p>\n\n![Ripe](https://github.com/amrayn/ripe/raw/master/ripe.png?)\n\nRipe is a minimal security tool. It consists of command-line tool and C++ API for cryptography.\n\nRipe contains encryption API for two major cryptography methods, RSA and AES (Rijndael). Also contains Base64 encoding/decoding API and some helper functions to make data transferable (called `prepareData`). Binaries do not depend on third-party tools or libraries but development will require cryptography libraries installed in system in order to compile.\n\nIt is fully compatible with OpenSSL. See [interoperability.sh](/interoperability.sh)\n\n\n[![Build Status (Master)](https://img.shields.io/travis/amrayn/mine/master.svg)](https://travis-ci.org/muflihun/ripe) [![Build Status (Develop)](https://img.shields.io/travis/amrayn/mine/develop.svg)](https://travis-ci.org/muflihun/ripe) [![Version](https://img.shields.io/github/release/muflihun/ripe.svg)](https://github.com/amrayn/mine/releases/latest) [![Documentation](https://img.shields.io/badge/docs-doxygen-blue.svg)](https://amrayn.github.io/ripe) [![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/amrayn/mine/blob/master/LICENCE)\n\n[![Donate](https://amrayn.github.io/donate.png?v2)](https://amrayn.com/donate)\n\n## Options\n\n| Option Name | Description |\n|-------------|--------|\n| `--version` | Display version information\n| `-g`        | Generate key |\n| `-e`        | Encrypt the data |\n| `-d`        | Decrypt the data |\n| `-s`        | Sign the data |\n| `-v`        | Verify the signed data |\n| `--aes` | Generate AES key (requires `-g`) |\n| `--key`     | Symmetric key for encryption / decryption |\n| `--in-key`     | Symmetric key for encryption / decryption file path |\n| `--iv`      | Initializaion vector       |\n| `--rsa`      | Use RSA encryption/decryption      |\n| `--zlib`      | ZLib compression/decompression      |\n| `--raw`      | Raw output for rsa encrypted data      |\n| `--base64`   | Tells ripe the data needs to be decoded before decryption (this can be used for decoding base64) |\n| `--hex`   | Tells ripe the data is hex string |\n| `--clean`   | (Only applicable when `--base64` data provided) Tells ripe to clean the data before processing |\n| `--signature`    | Signature for verifying the data |\n| `--in`    | Input file. You can also pipe in the data. In that case you do not have to provide this parameter |\n| `--out`   | Tells ripe to store encrypted data in specified file. (Outputs IV in console) |\n| `--length`   | Specify key length |\n| `--secret`   | Secret key for encrypted private key (RSA only) |\n| `--sha256` | Generate SHA-256 hash |\n| `--hash` | Generate SHA-256 hash |\n| `--sha512` | Generate SHA-512 hash |\n\n## Getting Started\n\n### Dependencies\nThese are the requirements to build Ripe binaries.\n\n  * C++98\n  * [Crypto++](https://www.cryptopp.com/) v5.6.5+ [with Pem Pack](https://raw.githubusercontent.com/amrayn/amrayn.github.io/master/downloads/pem_pack.zip)\n  * [cmake](https://cmake.org/) v2.8.12+\n  * [zlib-devel](https://zlib.net/)\n\n### Get Code\nYou can either [download code from master branch](https://github.com/amrayn/mine/archive/master.zip) or clone it using `git`:\n\n```\ngit clone git@github.com:amrayn/ripe.git\n```\n\n### Build\nResidue uses the CMake toolchains to create makefiles.\nSteps to build Ripe:\n\n```\nmkdir build\ncd build\ncmake ..\n## Following line requires c++11 compiler and easylogging++\ncmake -Dtest=ON ..\nmake\n```\n\nPlease consider running unit test before you move on\n\n```\nmake test\n```\n\nThe compilation process creates executable (`ripe`) as well as shared libraries in build directory. You can install it in system-wide directory using:\n\n```\nmake install\n```\n\nIf the default path (`/usr/local`) is not where you want things installed, then set the `CMAKE_INSTALL_PREFIX` option when running cmake. e.g,\n\n```\ncmake .. -DCMAKE_INSTALL_PREFIX=/usr/bin\n```\n\n### Static Linking\nBy default ripe builds as shared library, you can pass `build_static_lib` option in cmake to build static library.\n\nFor example\n\n```\ncmake -Dbuild_static_lib=ON ..\nmake\n```\n\n### Windows\nYou can do `cmake -Ddll_export=ON ...` to export symbols and `cmake -Ddll=ON ...` to import if needed\n\n### If build fails...\nMake sure you have read [minimum requirements](#minimum-requirements). You can install required Crypto++ v5.6.5 (with Pem Pack) using following commands\n\n```\nwget https://raw.githubusercontent.com/amrayn/amrayn.github.io/master/downloads/cryptocpp.tar.gz\ntar xf cryptocpp.tar.gz\ncd cryptopp-CRYPTOPP_5_6_5\nwget https://raw.githubusercontent.com/amrayn/amrayn.github.io/master/downloads/pem_pack.zip\nunzip pem_pack.zip\ncmake .\nmake\nmake install\n```\n\nand Easylogging++ using\n\n```\nwget -O easylogging++.zip https://github.com/amrayn/easyloggingpp/archive/master.zip\nunzip easylogging++.zip\ncd easyloggingpp-master/\ncmake -Dtest=ON .\nmake\n./easyloggingpp-unit-tests\nmake install\n```\n\nIf `make install` fails because of permission try to run it as super-user `sudo make install`\n\n## Examples\n\n### Encryption (AES)\nFollowing command will encrypt `sample.json` file to be ready to send to the server.\n\n`echo \"plain text\" | ripe -e --key B1C8BFB9DA2D4FB054FE73047AE700BC`\n\nYou can specify binary file as destination that will save only encrypted data, e.g,\n\n`echo \"plain text\" | ripe -e --key B1C8BFB9DA2D4FB054FE73047AE700BC --out sample.enc`\n\nAbove command will provide you with IV that you can use to decrypt\n\nPlease note: If you do not provide `--out`, the output will base64 and it will have four parts. `{LENGTH}:{IV}:{Client_ID}:{Base64_Encoded_Encrypted_Data}`.\n\n### Decryption (AES)\nFollowing command will decrypt `hkz20HKQA491wZqbEctxCA==` (`plain text`) that was supposedly encrypted using same key and init vector.\n\n`echo \"hkz20HKQA491wZqbEctxCA==\" | ripe -d --key B1C8BFB9DA2D4FB054FE73047AE700BC --iv 88505d29e8f56bbd7c9e1408f4f42240 --base64`\n\nYou can also provide filename, e.g,\n\n`ripe -d --key B1C8BFB9DA2D4FB054FE73047AE700BC --in sample.enc --iv 88505d29e8f56bbd7c9e1408f4f42240`\n\nOR\n\n`echo 88505d29e8f56bbd7c9e1408f4f42240:hkz20HKQA491wZqbEctxCA== | ripe -d --key B1C8BFB9DA2D4FB054FE73047AE700BC --base64`\n\n### Generate AES Key\nFollowing command will generate 128-bit AES key\n\n```\nripe -g --aes 256\n```\n\nAlternatively you can do\n```\nripe -g --aes --length 256\n```\n\nValid keys sizes: `128-bit`, `192-bit`, `256-bit`\n\n### Generate RSA Key\nFollowing command will produce random RSA key pair\n\n```\nripe -g --rsa --out-private private.pem --out-public public.pem\n```\n\nAlternatively you can use\n\n```\nripe -g --rsa\n```\n\nThis will give you two base64 strings with `:` as separator. First encoded text is base64 of newly generated private key and second being newly generated corresponding public key.\n\nIf you wish to generate private RSA key, you can use `--secret` parameter, e.g,\n\n```\nripe -g --rsa --out-private private.pem --out-public public.pem --secret ppks\n```\n\n### Encryption (RSA)\nYou can encrypt the data using public key and decrypt with a private key\n\n```\necho 'plain text' | ripe -e --rsa --in-key public.pem\n```\n\nYou can also use `--out /tmp/output.enc` to save it to `/tmp/output.enc` file\n\nYou can also add `--raw` option to output raw data instead of base64 encoded\n\nRipe uses PKCS #1 v1.5 padding scheme\n\n### Decryption (RSA)\n\n```\nripe -d --rsa --in-key private.pem --in /tmp/output.enc --base64\n```\n\nPlease note, decryption (RSA) is unstable at the moment, you may use following alternative command until it's fixed\n\n```\ncat /tmp/output.enc | openssl rsautl -decrypt -inkey private.pem --base64\n```\n\nRipe uses PKCS #1 v1.5 padding scheme\n\n#### Encrypted Keys\nIf you have an RSA key that is encrypted with pass phrase, let's say\n```\nopenssl genrsa -des3 -out private.pem 2048\n```\n\nextract public key: `openssl rsa -in private.pem -outform PEM -pubout -out public.pem`\n\nYou can use `--secret` to decrypt it\n\nfor example\n\nEncrypt:\n\n```\necho ff | ripe -e --rsa --in-key public.pem\n```\n\nDecrypt (pass phrase we chose was ppks):\n\n```\nripe -d --rsa --in-key private.pem --base64 --secret ppks\n```\n\nFailing to provide `--secret` option will give you error:\n\n```\nERROR: PEM_Load: RSA private key is encrypted\n```\n\n### Signing\n\n```\necho \"my signed data\" | ripe -s --rsa --in-key private.pem\n```\n\n### Verify\n\n```\necho \"my signed data\" | ripe -v --rsa --in-key public.pem --signature SIGNATURE\n```\n\n### Base64 Encoding\n\nYou can use following commands to encode raw data to base64 encoding\n\n```\necho 'plain text' | ripe -e --base64\n```\n\n### Base64 Decoding\n\nIn order to decode you may use `-d` option instead\n\n```\necho 'cGxhaW4gdGV4dAo=' | ripe -d --base64\n```\n\n### Hex Encoding\n\nYou can use following to encode data to hex encoded string\n\n```\necho 'plain text' | ripe -e --hex\n```\n\n### Hex Decoding\n\nDecoding hex can be done using `-d` option\n\n```\necho 706c61696e2074657874 | ripe -d --hex\n```\n\n### ZLib Compression\nCompression using zlib can be done using `-e` option\n\n```\necho abcd | ripe -e --zlib\n```\n\nYou can provide `--base64` to see base64 output e.g,\n\n```\necho abcd | ripe -e --zlib --base64\n```\n\nSame with `--hex` (or both `--base64` and `--hex` - in this case you will get base64 encoding of hex output)\n\n### ZLib Decompression\nDecompression using zlib can be done using `-d` option\n\n```\necho eNpLTEpOAQAD2AGL | ripe -d --zlib --base64\n```\n\n### License\n```\nCopyright 2017-present Amrayn Web Services\n\nhttps://github.com/amrayn\nhttps://amrayn.com\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
 },
 {
  "repo": "dstucrypt/jkurwa",
  "language": "JavaScript",
  "readme_contents": "jkurwa\n======\n\nGF2m ellipcit curves library in javascript. \n\n* Supports short Weierstrass curves used in Ukrainian standard DSTU 4145;\n* Provides key deriviation for DSTU block ciphers (see https://github.com/muromec/em-gost);\n* Encypted containers can be parsed and decrypted if respective cipher implementation is passed. See gost89 and dstucrypt/agent for reference;\n* Encrypted and signed messages in wicked PKCS#7 format used by tax office (sta.gov.ua) are supported for both read and write (see jk.Box, jk.util.transport);\n* Includes parsers for signed and encrypted messages, X509.v3 certificates, JKS and Key-6.dat key containers, TSP, CMP, OCSP requests and responses.\n\nWarning\n-------\n\n* Jkurwa does not guarranty constant-time calculcation;\n* Jkurwa only verifies signature against public key and does not actually check X.509 certificate validity unless CA list is loaded.\n  See dstucrypt/agent repo readme for details.\n   \n![cej repo je strefa wolna wid Kaczy\u0144skiego](https://raw.githubusercontent.com/muromec/jkurwa/master/kdpv.jpg)\n\n[![Build Status](https://travis-ci.org/dstucrypt/jkurwa.svg?branch=master)](https://travis-ci.org/dstucrypt/jkurwa)\n[![codecov](https://codecov.io/gh/dstucrypt/jkurwa/branch/master/graph/badge.svg)](https://codecov.io/gh/dstucrypt/jkurwa)\n[![npm module](https://badge.fury.io/js/jkurwa.svg)](https://www.npmjs.org/package/jkurwa)\n[![dependencies](https://david-dm.org/dstucrypt/jkurwa.png)](https://david-dm.org/dstucrypt/jkurwa)\n\nUsage\n-----\n\nSee ./test/ and ./examples/ directories. See dstucrypt/agent repo for example app.\n\nSister libraries: \n\n* https://github.com/dstucrypt/ukurwa4145 - DSTU 4145 in Python;\n* https://github.com/dstucrypt/gost89 - GOST cipher, hash, mac, key wrapper and container loader in pure js;\n* https://github.com/dstucrypt/python-gost89 - gost hash for python (2 and 3);\n* https://github.com/dstucrypt/jksreader - library to parse java-style key containers used by privatbank;\n* https://github.com/muromec/zozol - dumb ASN.1 parser and serialisator for python with X509 and wicked CMS schemas;\n* https://github.com/dstucrypt/openssl-dstu - patched OpenSSL with DSTU 4145 and GOST family support (outdated, unmaintained).\n\nDemo site: https://dstucrypt.github.io/signerbox2/\n\nDemo apps:\n\n* https://github.com/dstucrypt/agent -- command line utility and daemon service to sign, encrypt and decrypt files;\n* https://github.com/dstucrypt/dstukeys -- web interface with examples of authentication;\n* https://github.com/dstucrypt/signerbox2/ -- another web app;\n* https://github.com/max1gu/e-rro -- cash register app (\u043f\u0440\u043e\u0433\u0440\u043c\u0430\u043d\u0438\u0439 \u0440\u0440\u043e).\n\nTo cross-verifiy signatures use https://czo.gov.ua/verify .\n\nReferences\n----------\n\n* Certificate format (in Ukrainian), basically kind of X.509v3: http://zakon4.rada.gov.ua/laws/show/z1398-12\n* Private key container format, PBES2-like (effective from 01.01.2016): http://zakon3.rada.gov.ua/laws/show/z2227-13\n* See https://github.com/dstucrypt/agent repo for tax report format and implementation details\n* Law on Trust Services - http://zakon.rada.gov.ua/laws/show/2155-19\n\nBonus\n---\n\nFirst known use of the word Kurwa was recorded in 1415. Happy 600 birthday Kurwa!\n"
 },
 {
  "repo": "xavierleroy/cryptokit",
  "language": "C",
  "readme_contents": "# The Cryptokit library\n\n## Overview\n\nThe Cryptokit library for OCaml provides a variety of cryptographic primitives that can be used to implement cryptographic protocols in security-sensitive applications.  The primitives provided include:\n\n* Symmetric-key ciphers: AES, Chacha20, DES, Triple-DES, Blowfish, ARCfour, in ECB, CBC, CFB, OFB and counter modes.\n* Authenticated encryption: AES-GCM, Chacha20-Poly1305.\n* Public-key cryptography: RSA encryption and signature, Diffie-Hellman key agreement.\n* Hash functions and MACs: SHA-3, SHA-2, BLAKE2b, RIPEMD-160; MACs based on AES and DES; SipHash.  (SHA-1 and MD5, despite being broken, are also provided for historical value.)\n* Random number generation.\n* Encodings and compression: base 64, hexadecimal, Zlib compression.\n\nAdditional ciphers and hashes can easily be used in conjunction with the library.  In particular, basic mechanisms such as chaining modes, output buffering, and padding are provided by generic classes that can easily be composed with user-provided ciphers.  More generally, the library promotes a \"Lego\"-like style of constructing and composing transformations over character streams.\n\nThis library is distributed under the conditions of the GNU Library General Public license version 2 or any later version, with the special OCaml exception on linking described in file LICENSE.\n\n## Requirements\n\n* OCaml 4.08 or more recent.\n* The Dune build system, version 2.0 or more recent.\n* The Zarith library, version 1.4 or more recent.\n* The Zlib C library, version 1.1.3 or up is recommended. If it is not installed on your system (look for libz.a or libz.so), get it from http://www.gzip.org/, or indicate in the Makefile that you do not have it.  If you are running Linux or BSD or MacOS, your distribution provides precompiled binaries for this library.\n\n## Build, test and install\n\n* To configure, run `./configure`.  There are options to disable or enable some features (run `./configure --help` for a list), but the default configuration is fine most of the time.\n\n* To build, run `dune build`.\n\n* To execute a test, run `dune exec test/<name>.exe` where `<name>` can be `test`,\n  `prngtest` or `speedtest`, supplying additional command line arguments if needed.\n  The main test file `test/test.ml` is also included into the `runtest` alias, so it\n  can be executed simply by `dune test`.\n\n* To install, run `dune install`.\n\n## Using the library\n\nThe package name is `cryptokit`.  With Dune, use `(library cryptokit)`.  With ocamlfind, do\n```\n        ocamlfind ocamlopt -package cryptokit ...             # for compilation\n        ocamlfind ocamlopt -package cryptokit -linkpkg ...    # for linking\n```\n\n## Documentation\n\nSee the extensive documentation comments in file `src/cryptokit.mli`.\n\nTo build HTML documentation, run `dune build @doc`. The resulting index file is\nlocated at `_build/default/_doc/_html/cryptokit/Cryptokit/index.html`.\n\n## Warnings and disclaimers\n\nDisclaimer 1: the author is not an expert in cryptography.  While reasonable care has been taken to select good, widely-used implementations of the ciphers and hashes, and follow recommended practices found in reputable applied cryptography textbooks, you are advised to review thoroughly the implementation of this module before using it in a security-critical application.\n\nDisclaimer 2: some knowledge of cryptography is needed to use effectively this library.  A good introduction is the book __Serious Cryptography__ by J.-P. Aumasson (2018).  Building secure applications out of cryptographic primitives also requires a general background in computer security.\n\nDisclaimer 3: in some countries, the use, distribution, import and/or export of cryptographic applications is restricted by law. The precise restrictions may depend on the strenght of the cryptography used (e.g. key size), but also on its purpose (e.g. confidentiality vs. authentication).  It is up to the users of this library to comply with regulations applicable in their country.\n\n## Design notes and references\n\nThe library is organized around the concept of \"transforms\".  A transform is an object that accepts strings, sub-strings, characters and bytes as input, transforms them, and buffers the output.  While it is possible to enter all input, then fetch the output, lower memory requirements can be achieved by purging the output periodically during data input.\n\nThe AES implementation is the public-domain optimized reference implementation by Daemen, Rijmen and Barreto.  On x86 processors that support the AES-NI extensions, hardware implementation is used instead.\n\nThe Chacha20 implementation is due to D.J.Bernstein, https://cr.yp.to/streamciphers/timings/estreambench/submissions/salsa20/chacha8/regs/chacha.c . It is in the public domain.\n\nThe DES implementation is based on Outerbridge's popular \"d3des\" implementation.  This is not the fastest DES implementation available, but one of the cleanest.  Outerbridge's code is marked as public domain.\n\nThe Blowfish implementation is that of Paul Kocher with some performance improvements.  It is under the LGPL.  It passes the test vectors listed at http://www.schneier.com/code/vectors.txt\n\nARCfour (``alleged RC4'') is implemented from scratch, based on the algorithm described in Schneier's _Applied Cryptography_\n\nFor AES-GCM, the GHASH implementation is that of Steven M. Gibson at https://github.com/mko-x/SharedAES-GCM/blob/master/Sources/gcm.c .  On x86 processors that support the PCLMUL extension, hardware implementation is used instead.  Test vectors are taken from \"The Galois/Counter Mode of Operation (GCM)\" by David A. McGrew and John Viega.\n\nFor Chacha20-Poly1305,  Poly1305 is based on the \"Donna\" implementation by Andrew Moon, https://github.com/floodyberry/poly1305-donna .  Test vectors are taken from RFC 7539 and from the BoringSSL project.\n\nSHA-1 is also implemented from scratch, based on the algorithm described in the _Handbook of Applied Cryptography_.   It passes the FIPS test vectors.\n\nSHA-2 is implemented from scratch based on FIPS publication 180-2.  It passes the FIPS test vectors.\n\nSHA-3 is based on the \"readable\" implementation of Keccak written by Markku-Juhani O. Saarinen <mjos@iki.fi>.\n\nBLAKE2b and BLAKE2s are implemented from scratch based on RFC 7693.  The test vectors are taken from https://github.com/BLAKE2/BLAKE2/tree/master/testvectors; others were obtained with the b2sum program.\n\nRIPEMD-160 is based on the reference implementation by A.Bosselaers. It passes the test vectors listed at http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html\n\nMD5 uses the public-domain implementation by Colin Plumb that is also used in the OCaml runtime system for module Digest.\n\nSipHash is based on the reference implementation by J.-P. Aumasson and D. J. Bernstein, https://github.com/veorq/SipHash .  It passes their test vectors.\n\nRSA encryption and decryption was implemented from scratch, using the Zarith OCaml library for arbitrary-precision arithmetic, which itself uses GMP.  Modular  exponentiation is the constant-time implementation provided by GMP.  The Chinese remainder theorem is exploited when possible, though.  Like all ciphers in this library, the RSA implementation is *not* protected against timing attacks.\n\nRSA key generation uses GMP's `nextprime` function for probabilistic primality testing.\n\nThe hardware RNG uses the RDRAND instruction of recent x86 processors, if supported.  It is not available on other platforms.  A check is included to reject the broken RDRAND on AMD Ryzen 3000 processors (https://arstechnica.com/gadgets/2019/10/how-a-months-old-amd-microcode-bug-destroyed-my-weekend/).\n\nThe system RNG uses the `getentropy` function provided by Linux, macOS and the BSDs, or the `CryptGenRandom` function from the Windows cryptographic API.\n\nThe seeded PRNG is just the Chacha20 stream cipher encrypting the all-zeroes message.  The seed is used as the Chacha20 key.  An alternate seeded PRNG is provided, based on AES encryption of a 128-bit counter.  Both PRNGs pass the Dieharder statistical tests.  Still, better use the system RNG or the hardware RNG if high-quality random numbers are needed.\n\n## Performance\n\nIf you run `dune exec test/speedtest.exe`, a simple benchmark is performed and shows the speed of various operations from this library.\n"
 },
 {
  "repo": "iotaledger/streams",
  "language": "Rust",
  "readme_contents": "<h1 align=\"center\">\n  <br>\n  <a href=\"https://wiki.iota.org/streams/welcome\"><img src=\"streams.png\"></a>\n</h1>\n\n<h2 align=\"center\">A cryptographic framework for building secure messaging protocols</h2>\n\n<p align=\"center\">\n    <a href=\"https://wiki.iota.org/streams/welcome\" style=\"text-decoration:none;\">\n    <img src=\"https://img.shields.io/badge/Documentation%20portal-blue.svg?style=for-the-badge\"\n         alt=\"Developer documentation portal\">\n      </p>\n<p align=\"center\">\n\t<a href=\"https://discord.iota.org/\" style=\"text-decoration:none;\"><img src=\"https://img.shields.io/badge/Discord-9cf.svg?logo=discord\" alt=\"Discord\"></a>\n    <a href=\"https://iota.stackexchange.com/\" style=\"text-decoration:none;\"><img src=\"https://img.shields.io/badge/StackExchange-9cf.svg?logo=stackexchange\" alt=\"StackExchange\"></a>\n    <a href=\"https://raw.githubusercontent.com/iotaledger/streams/master/LICENSE\" style=\"text-decoration:none;\"><img src=\"https://img.shields.io/badge/license-Apache%202.0-green.svg\" alt=\"Apache 2.0 license\"></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"#about\">About</a> \u25c8\n  <a href=\"#prerequisites\">Prerequisites</a> \u25c8\n  <a href=\"#installation\">Installation</a> \u25c8\n  <a href=\"#getting-started\">Getting started</a> \u25c8\n  <a href=\"#api-reference\">API reference</a> \u25c8\n  <a href=\"#examples\">Examples</a> \u25c8\n  <a href=\"#supporting-the-project\">Supporting the project</a> \u25c8\n  <a href=\"#joining-the-discussion\">Joining the discussion</a> \n</p>\n\n---\n\n## About\n\nIOTA Streams is a **work-in-progress** framework for building cryptographic messaging protocols. Streams ships with a built-in protocol called Channels for sending authenticated messages between two or more parties on the Tangle.\n\nAs a framework, Streams allows developers to build protocols for their specific needs.\n\nThis process will be documented as the development progresses. However, since this crate is in an alpha stage of development it is still likely to change.\n\nAt the moment, IOTA Streams includes the following crates:\n* [Channels Application](iota-streams-app-channels/README.md) featuring Channels Application.\n* [Core layers](iota-streams-core/README.md) featuring spongos automaton for sponge-based authenticated encryption, pre-shared keys, pseudo-random generator;\n* [Keccak for core layers](iota-streams-core-keccak/README.md) featuring Keccak-F[1600] as spongos transform;\n* [Curve25519 asymmetric crypto](iota-streams-core-edsig/README.md) featuring Ed25519 signature and X25519 key exchange;\n* [DDML](iota-streams-ddml/README.md) featuring data definition and manipulation language for protocol messages;\n* [Application layer](iota-streams-app/README.md) common Application definitions.\n* [Bindings](bindings/c/README.md).\n\n## Prerequisites\nTo use IOTA Streams, you need the following:\n- [Rust](https://www.rust-lang.org/tools/install)\n- (Optional) An IDE that supports Rust autocompletion. We recommend [Visual Studio Code](https://code.visualstudio.com/Download) with the [rust-analyzer](https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer) extension\n\nWe also recommend updating Rust to the [latest stable version](https://github.com/rust-lang/rustup.rs#keeping-rust-up-to-date):\n\n```bash\nrustup update stable\n```\n\n\n## Installation\n\nTo use the library in your crate you need to add it as a dependency in the `Cargo.toml` file.\n\nBecause the library is not on [crates.io](https://crates.io/), you need to use the Git repository either remotely or locally.\n\n`no_std` is currently supported. However cargo nightly must be used to build with `no_std` feature.\n\n## Getting started\n\nIf you don't have a rust project setup yet you can create one by running,\n\n    cargo new my-library\n\n**Remote**\nAdd the following to your `Cargo.toml` file:\n\n```bash\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\niota-streams = { git = \"https://github.com/iotaledger/streams\", branch  = \"develop\"}\n```\n\n**Local**\n\n1. Clone this repository\n\n    ```bash\n    git clone https://github.com/iotaledger/streams\n    ```\n\n2. Add the following to your `Cargo.toml` file:\n\n    ```bash\n    [dependencies]\n    iota-streams = { version = \"0.1.2\", path = \"../streams\" }\n    ```\n\n## Getting started\n\nAfter you've [installed the library](#installation), you can use it in your own Cargo project.\n\nFor example, you may want to use the Channels protocol to create a new author and subscriber like so:\n\n```\nuse iota_streams::app_channels::api::tangle::{Author, Subscriber};\nuse iota_streams::app::transport::tangle::PAYLOAD_BYTES;\nuse iota_streams::app::transport::tangle::client::Client;\n\nfn main() {\n    let node = \"http://localhost:14265\";\n    let client = Client::new_from_url(node);\n\n    let encoding = \"utf-8\";\n    let multi_branching_flag = true;\n\n    let mut author = Author::new(\"AUTHORSSEED\", encoding, PAYLOAD_BYTES, multi_branching_flag, client);\n    \n    let mut subscriber = Subscriber::new(\"MYSUBSCRIBERSECRETSTRING\", encoding, PAYLOAD_BYTES, client);\n}\n```\n\n For a more detailed guide, go to our [documentation portal](https://wiki.iota.org/streams/welcome).\n\n## API reference\n\nTo generate the API reference and display it in a web browser, do the following:\n\n```bash\ncargo doc --open\n```\n\n## Examples\n\nWe have an example in the [`examples` directory](examples/src/main.rs), which you can use as a reference when developing your own protocols with IOTA Streams.\n\nA `no_std` version can be found in [`iota-streams-app-channels-example` directory](iota-streams-app-channels-example/src/main.rs)\n\n## Supporting the project\n\nPlease see our [contribution guidelines](CONTRIBUTING.md) for all the ways in which you can contribute.\n\n### Running tests\n\nWe use code comments to write tests. You can run all tests by doing the following from the `streams` directory:\n\n```\ncargo test --all\n```\n\n### Updating documentation\n\nIf you want to improve the code comments, please do so according to the guidelines in [RFC 1574](https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#appendix-a-full-conventions-text).\n\n## Joining the discussion\n\nIf you want to get involved in discussions about this technology, or you're looking for support, go to the #streams-discussion channel on [Discord](https://discord.iota.org/).\n"
 },
 {
  "repo": "mailgun/lemma",
  "language": "Go",
  "readme_contents": "**This repo is deprecated, Please see http://github.com/mailgun/holster**\n\n\nlemma\n=====\nMailgun Cryptographic Tools.\n\n**Features**\n\n* Multi-language Support ([Go](https://github.com/mailgun/lemma) and [Python](https://github.com/mailgun/pylemma))\n* [Request/Webhook Signing](httpsign)\n* [Authenticated Encryption](secret)\n* [Command-line tools](tools) for making signed HTTP requests and small file encryption.\n* Metrics\n\n**Overview**\n\n```\nWarning!  Still being actively developed and not ready for production use!\n```\n"
 },
 {
  "repo": "4PrivacyEngine/4PrivacyEngine-Core",
  "language": null,
  "readme_contents": "# 4PrivacyEngine-Core\nC++ implementation of the 4PrivacyEngine core\n\n## Open Source Code and White Paper Coming Soon...\nThe 4PrivacyEngine has been a work in progress since late 2020 - with the specification and conception. The first half of this year was spent in proof-of-concepts and work on the core.  Additional time was spent this year on building and testing bindings for Java, Swift, Dart, and Electron.  A draft of the white paper has been written and is in an internal review phase.\n\n## Roadmap\n**Establish an advisory team to review the whitepaper and code.**  We hope to get academics and industry experts to join us in the effort to improve the whitepaper and tighten the code.\n\n**Initial advisory team whitepaper review.**  Rework the whitepaper based on initial feedback from advisors.\n\n**Initial advisory team code review.** Refactor code based on feedback from advisors.\n\n**Final advisory team whitepaper review.**  Use final advisor feedback to prepare whitepaper for public review.\n\n**Second advisory team code review.**  Refactor code based on feedback from advisors in preparation for additional external code review and testing.\n\n**Limited external code review.** Make code available to limited external organizations for testing and review.  This is the final step before putting code into public repository.\n\n**Place code in public repository.**  Allow public review of code.\n\n## 4Privacy\nThe world has a privacy problem.  We\u2019re working on technology to help solve it.\n\nPlease join our effort to improve privacy via digital ownership and control of information [Connect with 4Privacy](https://4privacy.com/contact-us/)  \n\nLearn more about us at [4Privacy.com](https://4privacy.com/)\n"
 },
 {
  "repo": "CaptainYukinoshitaHachiman/Cryptography-and-Privacy",
  "language": "Swift",
  "readme_contents": "# Cryptography & Privacy\n[Open in Swift Playgrounds](https://developer.apple.com/ul/sp0?url=https://captainyukinoshitahachiman.github.io/Cryptography-and-Privacy/feed.json)\n\n## WWDC19 Swift Playgrounds \n> Tell us about the features and technologies you used in your Swift playground.\n\nThe playground book I have created for this year's WWDC is called Cryptography & Privacy. I created this in order to tell users the most basic knowledge in cryptography, so that they can be aware of their online privacy. It discusses the importance of privacy first in the introduction cutscene first, then tells the concepts of symmetric and asymmetric cryptograph, and finally provides a practice in real, requiring the user to implement the \"secure chat\" feature in an imaginary app.\n\nTo implement the features above, these frameworks/techniques are used:\n\n- HTML5 + CSS3 + JavaScript\n- UIKit\n- Security\n- CommonCrypto\n- PlaygroundSupport\n- Markup\n\nThe web technologies, well, are actually auto-generated using Hype. With the help, I created the introduction cutscene.\n\nUIKit is used to create live views. I made custom views by subclassing from UIView and did some custom drawing. I created a live view to show users how the messages are transferred so that they can experience it more clearly.\n\nSecurity and CommonCrypto are used for implementing the cryptography stuff. I checked the Apple Developer Documentations and StackOverflow to learn them.\n\nPlaygroundSupport, obviously, is used to control the the playground book. But this playground is far more than that. By using PlaygroundSupport, this playground book takes advantage of always-on live views, meaning it can be even more interactive, and therefore is enabled to provide better user experience. Completions in the Shortcut Bar are also customized, which gives the user a clean way to code. Moreover, the last page supports all the execution modes, which can help user skip the live view animation or slow down it so that they can understand them better.\n\nAnd finally, all the contents telling about the cryptography concepts are written in Markup.\n\n## Beyond WWDC19\n\n> If you've shared or considered sharing your coding knowledge and enthusiasm for computer science with others, let us know.\n\nI love coding and computer science, and I love sharing them with others so that more people can benefit from and love it.\n\nI have recently come to the international department of a school, seeking to go to the USA to learn more about CS in the future. And here, I met my new teachers and got to help them using my coding and CS knowledge.\n\nWe have an AI course at our school, which tells us how to use Python3 and TensorFlow. Occasionally, last year I attended 2018@Swift, the biggest Swift conference in China Mainland, and there I learned Swift for TensorFlow and its advantages over TensorFlow with Python. I shared this with my teacher and he was very happy to learn about that.\n\nAlso at our school, every morning we read after a record of a vocabulary list created by our ESL teacher to practice our English. However, the way she created the audio file was time-consuming and ineffective:\n\nEvery time, she opened the online Merriam-Webster Dictionary webpage, started recording on her iPhone, looked up the definition of each word, clicked on the pronunciation button, counted the interval for 3 seconds, and repeated this hundreds of times. (Sometimes we can even hear the notification sound and the chattering in her office!)\n\nObviously, that seemed terrible to us since we all know what automation is. Once I knew how she made the audio, I told her that it could be done using programming. When I got home, I made a simple macOS app for her called Pronunciation Generator, which receives a word list input, fetches Merriam-Webster Dictionary API and combines the audio for each word. In order to help other teachers, it is now open source on GitHub. What\u2019s more, I recommended Markdown and Shortcuts to her in order to help automate her teaching workflow. I shared my shortcut used to generate a markdown file containing word definitions with her, and I\u2019m sure this will be of great help in her teaching.\n\nAdditionally, I taught her how to use secure chat in Telegram to ensure her privacy. (I often recommend this IM app to my friends.) She was really excited after hearing about it, and told me that for she\u2019s a religious minority in China Mainland, she has been unable to talk about religion with her friends on WeChat because of the existence of censorship.\n\nFor the same reason, to protect people\u2019s privacy, I created the playground Cryptography & Privacy for this year\u2019s WWDC Scholarship. I do hope this playground can help people learn something about cryptography, so that they can understand how their data are protected and then be aware of their privacy.\n\nLast but not least, let me talk about something beyond WWDC. I have been looking forward to being a WWDC Scholar since I knew it in primary school, and I\u2019m seeking to learn more about app development there so that I can use my knowledge to solve problems and help others.\n\n## Apps on the App Store 2019\nSo far, I have had one app on the App Store, which is called \"BirthReminder\". It is open source on GitHub under AGPLv3, and there are 3 contributors besides me. I have made 195 commits (21,630 ++ 12,630 --) to the repo, while the sum of those made by the other three is 31 commits (2,384 ++ 1,578 --). If you think this is not entirely created by me as an individual, please just ignore the following part.\n\nThis app enables users to get reminded when their favorite ACG characters are on their birthday. Here, ACG stands for anime, comics, and games. ACG characters are those who appear in ACG works. You may wonder if this makes any sense or not to remind people of the characters' birthdays: That's because ACG culture enthusiasts usually have a weird habit that is celebrating their favorite characters' birthday. In most cases, we may just post a tweet, while sometimes there're people doing it even more enthusiastically. However, sometimes we may not remember the birthdays clearly, so the idea came to my head and I made this app.\n\nThis app also has a backend application, which is also written in Swift using Perfect framework. The backend offers to-go birthday information for users to add to their local app, so that they can do it more conveniently. What's more, I've been attempting to rewrite the backend using Vapor. You can find the two backend applications together with the iOS app on my GitHub: https://github.com/CaptainYukinoshitaHachiman\n\nAdditionally, besides simply reminding the birthday, I personally think that the app has a deeper value. Nowadays, many people treat ACG works as products only, consume them without thinking but only for fun, and then forget about them soon after consuming, while I treat them as a form of art seriously and hope more people can have the similar idea. By reminding people the ACG characters' birthdays, BirthReminder may get to remind people of the ACG works they enjoyed, the lively and lovely characters, the valuable thoughts inside of them, and the beauty of them, and that probably is what I would like to do most as an ACG enthusiast.\n"
 },
 {
  "repo": "aramzham/Cryptography",
  "language": "C#",
  "readme_contents": "# Cryptography\n\nThis a cryptography example on how a sample text can be encrypted and decrypted securely using `DesEncryption` class.\nThe app can be used on numerous purposes (defence, message encryption etc.).\n\nCryptography is also used to check if the file is the **original** one or it has been changed in the process.\nTake a look how it works by following [link](https://github.com/aramzham/Cryptography/tree/master/Cryptologie/Originality).\n\nA little demonstration of cryptography on Windows Forms:\n\n<img src=\"https://cloud.githubusercontent.com/assets/25085025/22220561/9764ef04-e1c8-11e6-99ca-b165e8e67582.gif\" title=\"dungle\" alt=\"chka\"/>\n\nThe elegant app has libraries that allow you to make your encryption using `DESCryptoServiceProvider` or `HMAC` with their numerous specificities.\n\nClick on the link below to get some more instructions on it:\n[Cryptography demo](https://github.com/aramzham/Cryptography/tree/master/Cryptologie)\n\n# Keywords\n<ol style=\"list-style-type:armenian;\">\n  <li>C# 6.0</li>\n  <li>.Net Framework 4.6</li>\n</ol>\n"
 },
 {
  "repo": "ektrah/nsec",
  "language": "C#",
  "readme_contents": "# NSec\n\n[![Maintenance](https://img.shields.io/maintenance/yes/2022)](https://github.com/ektrah/nsec)\n[![License](https://img.shields.io/github/license/ektrah/nsec)](https://nsec.rocks/license)\n[![NuGet](https://img.shields.io/nuget/vpre/NSec.Cryptography)](https://www.nuget.org/packages/NSec.Cryptography/22.4.0)\n\n[NSec](https://nsec.rocks/) is a cryptographic library for\n[.NET 5+](https://dotnet.microsoft.com/) and\n[.NET Core 3.1](https://dotnet.microsoft.com/) based on\n[libsodium](https://libsodium.org/) &#x2764;.\nIt provides modern cryptographic primitives in a modern API based on\n[Span&lt;T&gt;](https://docs.microsoft.com/en-us/archive/msdn-magazine/2017/connect/csharp-all-about-span-exploring-a-new-net-mainstay).\nNSec aims to be easy to use, secure by default, fast, and agile.\n\nFor more information about NSec, please refer to the following resources:\n\n|                           |                                                  |\n|:------------------------- |:------------------------------------------------ |\n| Project homepage:         | https://nsec.rocks/                              |\n| Installation:             | https://nsec.rocks/docs/install                  |\n| Online documentation:     | https://nsec.rocks/docs/api/nsec.cryptography    |\n| Open issues:              | https://github.com/ektrah/nsec/issues            |\n| Pull requests:            | https://github.com/ektrah/nsec/pulls             |\n"
 },
 {
  "repo": "NITDgpOS/SecureSnaps",
  "language": "Python",
  "readme_contents": "# SecureSnaps\n\n[![Join the chat at https://gitter.im/SecureSnaps55/Lobby](https://badges.gitter.im/SecureSnaps55/Lobby.svg)](https://gitter.im/SecureSnaps55/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n![forthebadge](http://forthebadge.com/images/badges/made-with-python.svg \"Made with Python\")\n\nImage encryption and Decryption based on private-key cryptography\n\n## Algorithm Description\n* Step 1: User enters a password: `password`\n* Step 2: The `password` is encoded in `utf-8` followed by generating a `sha256 hash`\n* Step 3: The `sha256 hash` is converted to `hex`\n* Step 4: This `hex` values are used to generate an array of integer values\n* Step 5: The array is divided into four `key tuples`, each containing 4 integers.\n* Step 6: Each key tuple is used to encode/ decode the image. The number of times, the recursive encryption/decryption takes place for a key tuple is called the degree of the key tuple.\n* Step 7: Using the key tuples, the color is also encoded using a XOR cipher\n\n### Encryption using Key tuples\nLet's say we have a key tuple [a, b, c, d] , codec function f(x) and degree = n\n\n|ith degree |Key tuple \t\t\t\t\t\t\t\t|Process \t\t\t\t\t\t\t\t\t\t\t\t\t|\n|:----------|:-----------------------------------------|:--------------------------------------------------------------|\n|0\t|\t[a, b, c, d]\t\t\t\t\t\t\t|\tnothing\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n|1\t|\t[f(a), f(b), f(c), f(d)]\t\t\t\t|\tSwap Pixel f(a),f(b) with Pixel f(c),f(d)\t\t\t\t|\n|2\t|\t[f(f(a)), f(f(b)), f(f(c)), f(f(d))]\t|\tSwap Pixel f(f(a)),f(f(b)) with Pixel f(f(c)),f(f(d))\t|\n|...|\t...\t\t\t\t\t\t\t\t\t\t|\t...\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n|n \t|\t[fn(a), fn(b), fn(c), fn(d)]\t\t\t|\tSwap pixel Pixel fn(a),fn(b) with Pixel fn(c),fn(d)\t\t\t|\n\nNote: Decryption algorithm is simply the reversal of Encryption process.\n\n### Color encryption using XOR\n* Extract 3 values from a key tuple [a, b, c]\n* A single pixel consists of three values - (RED, GREEN, BLUE)\n* Here, we use XOR logical operation between each pixel parameter and key tuple value\n   *  NEW_RED = RED ^ a\n\n   * NEW_GREEN = GREEN ^ b\n\n   * NEW_BLUE = BLUE ^ c,  where ^ is XOR\n\n\n* We replace the old pixel with the newly formed pixel (NEW_RED, NEW_GREEN, NEW_BLUE)\n* XOR has a special property which enables us to trace back the original pixel values without loss of data\n\n   * a^b = c\n\n   * c^b = a\n\n\n*  Here, let `a` be the pixel parameter and `b` be the key tuple value. On XORing it, we obtain `c` and we store it.\n*  For decryption, XORing `c` with key tuple value `b` will give us the original pixel value `a`.\n* Each pixel value ranges from 0 to 255. Hence the modulus of 256 is applied over final results after XORing.\n\n## Documentation\n\n### keygen.py\n* `max_val(ht,wdth)` : returns max(ht,wdth)\n* `get_string_hash()` : returns the hashvalue for the entered password\n* `generate_tuples(H,W)` : generates a list of tuples recursively for the codec\n* `yield_chunks(block, iterate_size)` : returns lists of varying size for the hash list\n\n### encoder.py\nEncodes the image at `image_path` as per the entered password\n\n\n### decoder.py\nDecodes the image at `image_path` as per the entered password\n\n### utils.py\n* `fucntion(x)` : The first function for generating tuples\n* `function2(x)`: The second function for generating tuples\n* `swap(ai,aj,bi,bj, image, arr)` : swaps two pixels `arr(ai,aj)` with `arr(bi, bj)`\n* `efficiency(orig, enco, W, H)` : Finds the efficiency of the encryption by comparing the original image with encoded image, W and H are width ad height respectively\n* `cascade(xy, N, W, H)` : creates a recursively cascaded list (of length N) of tuples\n* `automate_swap(alpha, beta, N, image, arr)` : swaps pixels automatically for encryption\n* `automate_swap_dec(alpha, beta, N, image, arr)` : swaps pixels automatically for decryption\n* `color(arr, val, W, H)` : Encrypts the color of each pixel against key tuple using XOR operation\n\n## Installation and Usage\n```\ngit clone https://github.com/NITDgpOS/SecureSnaps.git\ncd SecureSnaps\nsudo bash install\n```\n* To encode:\n`ssnaps -e <image_path>`\n* To decode:\n`ssnaps -d <image_path>`\n\nCheck the [Contribution Guidelines here](docs/CONTRIBUTING.md)\n"
 },
 {
  "repo": "SpiderLabs/CryptOMG",
  "language": "PHP",
  "readme_contents": "CryptOMG\nReleased on SpiderLabs Anterior <blog.spiderlabs.com>\nAndrew Jordan <AJordan@trustwave.com>\nhttps://www.trustwave.com\n\nINTRODUCTION\n============\n\n***\nWARNING: CryptOMG IS AN INTENTIONALLY VULNERABLE APPLICATION. IT SHOULD \nONLY BE INSTALLED ON A TRUSTED WEB ENVIRONMENT. IT SHOULD NOT BE PUBLISHED\nON A PRODUCTION SERVER AND SHOULD NOT BE ACCESSIBLE THROUGH THE INTERNET.\n***\n\nCryptOMG is a configurable CTF style test bed that highlights common\nflaws in cryptographic implementations. Most of the challenges are\ndesigned to be cipher independent and to illustrate this, configuration\noptions are provided that allow you to change the algorithm in use as \nwell as the type of encoding.\n\nCool Stuff Includes:\no Cryptographic Oracles\no Side Channel Attacks\no Electronic Code Book Flaws\no Configuration options for cipher and encoding\n\nREQUIREMENTS\n============\n\nA webserver running PHP 5.x\nMySQL\nlibmcrypt4\n\nPHP Modules/Libraires:\nphp5-mysql\nphp5-mcrypt\n\nUSAGE\n=====\nPlace the CryptOMG source files somewhere in your webroot. Modify\n/includes/db.inc.php with the settings for your database server.\n\nCOPYRIGHT\n=========\n\nCryptOMG - A configurable CTF style test bed.\nAndrew Jordan\nCopyright (C) 2012 Trustwave Holdings, Inc.\n\nThis program is free software: you can redistribute it and/or modify it \nunder the terms of the GNU General Public License as published by the \nFree Software Foundation, either version 3 of the License, or (at your \noption) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of \nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General \nPublic License for more details.\n\nYou should have received a copy of the GNU General Public License along \nwith this program. If not, see <http://www.gnu.org/licenses/>.\n"
 },
 {
  "repo": "quininer/sarkara",
  "language": "Rust",
  "readme_contents": "# \u015barkar\u0101\n[![travis-ci](https://api.travis-ci.org/quininer/sarkara.svg)](https://travis-ci.org/quininer/sarkara)\n[![appveyor](https://ci.appveyor.com/api/projects/status/8daadka3u64177gp?svg=true)](https://ci.appveyor.com/project/quininer/sarkara)\n[![crates](https://img.shields.io/crates/v/sarkara.svg)](https://crates.io/crates/sarkara)\n[![license](https://img.shields.io/github/license/quininer/sarkara.svg)](https://github.com/quininer/sarkara/blob/master/LICENSE)\n[![docs.rs](https://docs.rs/sarkara/badge.svg)](https://docs.rs/sarkara/)\n\nSarkara is a Post-Quantum cryptography library.\n\n## Warnings\n\nThis is an experimental library, don't use it in production environment.\n"
 },
 {
  "repo": "yann2192/pyelliptic",
  "language": "Python",
  "readme_contents": "## WARNING\n\nPyElliptic is **DEPRECATED**.\n\nSee https://github.com/yann2192/pyelliptic/issues/50\n\n# PyElliptic\n\nPyElliptic is a high level wrapper for the cryptographic library : OpenSSL.\nUnder the Berkeley software distribution license (see LICENSE).\n\nPython3 compatible. For GNU/Linux and Windows.\nRequire OpenSSL\n\n## Features\n\n### Asymmetric cryptography using Elliptic Curve Cryptography (ECC)\n\n* Key agreement : ECDH\n* Digital signatures : ECDSA\n* Hybrid encryption : ECIES (like RSA)\n\n### Symmetric cryptography\n\n* AES-128 (CBC, OFB, CFB, CTR)\n* AES-256 (CBC, OFB, CFB, CTR)\n* Blowfish (CFB and CBC)\n* RC4\n\n### Other\n\n* CSPRNG\n* HMAC (using SHA512)\n* PBKDF2 (SHA256 and SHA512)\n\n## Example\n\n```python\n#!/usr/bin/python\n\nfrom binascii import hexlify\n\nimport pyelliptic\n\n# Symmetric encryption\niv = pyelliptic.Cipher.gen_IV('aes-256-cfb')\nctx = pyelliptic.Cipher(\"secretkey\", iv, 1, ciphername='aes-256-cfb')\n\nciphertext = ctx.update('test1')\nciphertext += ctx.update('test2')\nciphertext += ctx.final()\n\nctx2 = pyelliptic.Cipher(\"secretkey\", iv, 0, ciphername='aes-256-cfb')\nprint(ctx2.ciphering(ciphertext))\n\n# Asymmetric encryption\nalice = pyelliptic.ECC() # default curve: sect283r1\nbob = pyelliptic.ECC(curve='sect571r1')\n\nciphertext = alice.encrypt(\"Hello Bob\", bob.get_pubkey(),\n                           ephemcurve='sect571r1')\nprint(bob.decrypt(ciphertext))\n\nsignature = bob.sign(\"Hello Alice\")\n# alice's job :\nprint(pyelliptic.ECC(pubkey=bob.get_pubkey(),\n                     curve='sect571r1').verify(signature, \"Hello Alice\"))\n\n# ERROR !!!\ntry:\n    key = alice.get_ecdh_key(bob.get_pubkey())\nexcept:\n    print(\"For ECDH key agreement, the keys must be defined on the same curve !\")\n\nalice = pyelliptic.ECC(curve='sect571r1')\nprint(hexlify(alice.get_ecdh_key(bob.get_pubkey())))\nprint(hexlify(bob.get_ecdh_key(alice.get_pubkey())))\n```\n"
 },
 {
  "repo": "yuzushioh/CryptoEthereumSwift",
  "language": "C",
  "readme_contents": "# CryptoEthereumSwift\n\nCryptoEthereumSwift implements necessary cryptographic features for Ethereum. This framwork is currently used in [EthereumKit](https://github.com/yuzushioh/EthereumKit).\n"
 },
 {
  "repo": "lightning/bolts",
  "language": "Markdown",
  "readme_contents": "# Lightning Network In-Progress Specifications\n\nThe specifications are currently a work-in-progress and currently being\ndrafted.\n\nPull requests and comments welcome, seeking input from community stakeholders.\n\nDiscussion available on the [lightning-dev mailing list](https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev).\n\n### [Start here for Table of Contents](00-introduction.md)\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
 },
 {
  "repo": "arkworks-rs/sponge",
  "language": "Rust",
  "readme_contents": "<h1 align=\"center\">Cryptographic Sponges</h1>\n\n<p align=\"center\">\n    <a href=\"https://github.com/arkworks-rs/sponge/blob/master/LICENSE-APACHE\">\n        <img src=\"https://img.shields.io/badge/license-APACHE-blue.svg\"></a>\n    <a href=\"https://github.com/arkworks-rs/sponge/blob/master/LICENSE-MIT\">\n        <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n</p>\n\n`ark-sponge` is a Rust library that provides infrastructure for implementing *cryptographic sponges*. This library is released under the MIT License and the Apache v2 License (see [License](#license)).\n\n**WARNING:** This is an academic prototype, and in particular has not received careful code review.\nThis implementation is NOT ready for production use.\n\n## Overview\n\nA cryptographic sponge is a cryptographic primitive that has two basic operations, *absorb* and *squeeze*. A sponge\naccepts byte or field element inputs through its \"absorb\" operation. At any time, a user can invoke the \"squeeze\" operation on a sponge to obtain byte or field\nelement outputs. The sponge is stateful, so that squeezed outputs are dependent on previous inputs and previous outputs.\n\nThe library offers infrastructure for building cryptographic sponges and using them with different types of inputs.\n\n## Build guide\n\nThe library compiles on the `stable` toolchain of the Rust compiler. To install the latest version\nof Rust, first install `rustup` by following the instructions [here](https://rustup.rs/), or via\nyour platform's package manager. Once `rustup` is installed, install the Rust toolchain by invoking:\n\n```bash\nrustup install stable\n```\n\nAfter that, use `cargo` (the standard Rust build tool) to build the library:\n\n```bash\ngit clone https://github.com/arkworks-rs/sponge.git\ncd sponge \ncargo build --release\n```\n\nThis library comes with some unit and integration tests. Run these tests with:\n\n```bash\ncargo test\n```\n\n## License\n\nThis library is licensed under either of the following licenses, at your discretion.\n\n* [Apache License Version 2.0](LICENSE-APACHE)\n* [MIT License](LICENSE-MIT)\n\nUnless you explicitly state otherwise, any contribution that you submit to this library shall be\ndual licensed as above (as defined in the Apache v2 License), without any additional terms or\nconditions.\n\n## Reference papers\n\n[Fractal: Post-Quantum and Transparent Recursive Proofs from Holography][cos20]  \nAlessandro Chiesa, Dev Ojha, Nicholas Spooner  \n\n[POSEIDON: A New Hash Function For Zero-Knowledge Proof Systems][gkrrs19]\nLorenzo Grassi, Dmitry Khovratovich, Christian Rechberger, Arnab Roy, Markus Schofnegger\n\n[cos20]: https://eprint.iacr.org/2019/1076\n[gkrrs19]: https://eprint.iacr.org/2019/458\n"
 },
 {
  "repo": "scarv/xcrypto",
  "language": "Verilog",
  "readme_contents": "# XCrypto: a cryptographic ISE for RISC-V\n\n<!--- -------------------------------------------------------------------- --->\n\n[![Build Status](https://travis-ci.com/scarv/xcrypto.svg)](https://travis-ci.com/scarv/xcrypto)\n[![Documentation](https://codedocs.xyz/scarv/xcrypto.svg)](https://codedocs.xyz/scarv/xcrypto)\n\n<!--- -------------------------------------------------------------------- --->\n\n*Acting as a component part of the wider\n[SCARV](https://www.scarv.org)\nproject,\nXCrypto is a general-purpose Instruction Set Extension (ISE) for\n[RISC-V](https://riscv.org)\nthat supports software-based cryptographic workloads.*\n\n<!--- -------------------------------------------------------------------- --->\n\n## Overview\n\nA given cryptographic workload is commonly expected to satisfy a \nchallenging and diverse range of traditional design metrics, \nincluding some combination of high-throughput, low-latency, low-footprint, power-efficiency, and high-assurance,\nwhile executing in what is potentially an adversarial environment.\nA large design space of options can be drawn from when developing\na concrete implementation: these options span a spectrum, between \nthose entirely based on hardware (e.g., a dedicated IP core)\nand\nthose entirely based on software.\nISEs can be viewed as representing a hybrid option, in the sense \nthey alter a general-purpose processor core with special-purpose \nhardware and associated instructions; such targeted alterations \nthen help to improve a software-based implementation wrt. some\ndesign metric (e.g., latency).\n\nAs an ISE, we pitch XCrypto as *a* solution (vs. *the* solution) \nwithin the wider design space of options.  For example, it offers\nas an *alternative* to the solution being proposed by the RISC-V \ncryptography extensions group (see, e.g., their\n[presentation](https://www.youtube.com/watch?v=dcW6a7SO2zE):\nthe design extends the RISC-V vector ISE).\nThe idea is to leverage extensive existing literature and hence\nexperience wrt. cryptographic ISEs (see, e.g., published work at\nthe\n[CHES](https://dblp.uni-trier.de/db/conf/ches)\nconference), translating and applying it to RISC-V.\nAlthough potentially less performant than alternatives, we expect\nimplementations using XCrypto to be more lightweight and flexible; \nas a result, we view it as representing an attractive solution in\nthe context of micro-controller class cores.\n\n<!--- -------------------------------------------------------------------- --->\n\n## Organisation\n\n```\n\u251c\u2500\u2500 bin                    - scripts (e.g., environment configuration)\n\u251c\u2500\u2500 build                  - working directory for build\n\u251c\u2500\u2500 doc                    - documentation\n\u251c\u2500\u2500 extern                 - external resources (e.g., submodules)\n\u2502   \u251c\u2500\u2500 libscarv             - submodule: scarv/libscarv\n\u2502   \u251c\u2500\u2500 riscv-opcodes        - submodule: scarv/riscv-opcodes\n\u2502   \u251c\u2500\u2500 texmf                - submodule: scarv/texmf\n\u2502   \u2514\u2500\u2500 wiki                 - submodule: scarv/xcrypto.wiki\n\u251c\u2500\u2500 pdf                    - PDFs, e.g., presentation slides\n\u251c\u2500\u2500 rtl                    - source code for re-usable hardware modules\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 docker             - source code for containers\n    \u251c\u2500\u2500 helloworld         - source code for example program\n    \u251c\u2500\u2500 test               - source code for test    program(s)\n    \u2514\u2500\u2500 toolchain          - source code for tool-chain\n```\n\nNote that:\n\n- [`${REPO_HOME}/doc`](./doc) \n  houses\n  the XCrypto specification:\n  this document captures the ISE itself, acting as both\n  a) a definition of additional architectural \n     state\n     (e.g., register file and CSRs)\n     and\n     instructions\n     (i.e., their semantics and encoding),\n     and\n  b) a design document.\n  Pre-built versions accompany each \n  [releases](https://github.com/scarv/xcrypto/releases)\n  of XCrypto.\n\n- [`${REPO_HOME}/rtl`](./rtl) \n  houses\n  a library of re-usable hardware components (e.g., for arithmetic\n  operations), which could be used in an implementation of XCrypto.\n\n- Per the above, the content of this repository is non-specific to\n  an implementation of XCrypto within any given processor core.\n  That said, the associated repository\n  [`scarv/scarv`](https://github.com/scarv/scarv)\n  specifically houses such an implementation: the SCARV processor\n  core (and associated SoC) offer an integrated implementation of\n  components from the *entire* SCARV project, XCrypto included.\n \n<!--- -------------------------------------------------------------------- --->\n\n## Quickstart (with more detail in the [wiki](https://github.com/scarv/xcrypto/wiki))\n\n1. Execute\n\n   ```sh\n   git clone https://github.com/scarv/xcrypto.git ./xcrypto\n   cd ./xcrypto\n   git submodule update --init --recursive\n   source ./bin/conf.sh\n   ```\n\n   to clone and initialise the repository,\n   then configure the environment;\n   for example, you should find that the\n   `REPO_HOME`\n   environment variable is set appropriately.\n\n2. Use targets in the top-level `Makefile` to drive a set of\n   common tasks, e.g.,\n\n   | Command                   | Description                                                                          |\n   | :------------------------ | :----------------------------------------------------------------------------------- |\n   | `make    build-doc`       | build the [LaTeX](https://www.latex-project.org)-based documentation                 |\n   | `make    clone-toolchain` | clone the [tool-chain](https://github.com/scarv/xcrypto/wiki/Toolchain)              |\n   | `make    build-toolchain` | build the [tool-chain](https://github.com/scarv/xcrypto/wiki/Toolchain)              |\n   | `make doxygen`            | build the       [Doxygen](http://www.doxygen.nl)-based documentation                 |\n   | `make spotless`           | remove *everything* built in `${REPO_HOME}/build`                                    |\n\n<!--- -------------------------------------------------------------------- --->\n\n## Questions?\n\n- read the\n  [wiki](https://github.com/scarv/xcrypto/wiki),\n- raise an\n  [issue](https://github.com/scarv/xcrypto/issues),\n- raise a\n  [pull request](https://github.com/scarv/xcrypto/pulls),\n- drop us an \n  [email](mailto:info@scarv.org?subject=xcrypto).\n\n<!--- -------------------------------------------------------------------- --->\n\n## Publications and presentations\n\n- Some\n  [slides](./pdf/riscv-meetup-bristol-slides.pdf)\n  presented at the\n  [RISC-V meetup](https://www.meetup.com/Bristol-RISC-V-Meetup-Group)\n  in Bristol, April 2019.\n- A\n  [poster](./pdf/zurich-workshop-poster.pdf)\n  presented at the\n  [RISC-V Workshop](https://riscv.org/2019/06/risc-v-workshop-zurich-proceedings)\n  in  Zurich,  June 2019.\n\n<!--- -------------------------------------------------------------------- --->\n\n## Acknowledgements\n\nThis work has been supported in part\nby EPSRC via grant\n[EP/R012288/1](https://gow.epsrc.ukri.org/NGBOViewGrant.aspx?GrantRef=EP/R012288/1) (under the [RISE](http://www.ukrise.org) programme).\n\n<!--- -------------------------------------------------------------------- --->\n"
 },
 {
  "repo": "jedisct1/libsodium.js",
  "language": "HTML",
  "readme_contents": "# libsodium.js\n\n## Overview\n\nThe [sodium](https://github.com/jedisct1/libsodium) crypto library\ncompiled to WebAssembly and pure JavaScript using\n[Emscripten](https://github.com/kripken/emscripten), with\nautomatically generated wrappers to make it easy to use in web\napplications.\n\nThe complete library weighs 188 KB (minified, gzipped, includes pure JS +\nWebAssembly versions) and can run in a web browser as well as server-side.\n\n### Compatibility\n\nSupported browsers/JS engines:\n\n* Chrome >= 16\n* Edge >= 0.11\n* Firefox >= 21\n* Mobile Safari on iOS >= 8.0 (older versions produce incorrect results)\n* NodeJS\n* Opera >= 15\n* Safari >= 6 (older versions produce incorrect results)\n\nThis is comparable to the WebCrypto API, which is compatible with a\nsimilar number of browsers.\n\nSignatures and other Edwards25519-based operations are compatible with\n[WasmCrypto](https://github.com/jedisct1/wasm-crypto).\n\n## Installation\n\nThe [dist](https://github.com/jedisct1/libsodium.js/tree/master/dist)\ndirectory contains pre-built scripts. Copy the files from one of its\nsubdirectories to your application:\n\n- [browsers](https://github.com/jedisct1/libsodium.js/tree/master/dist/browsers)\nincludes a single-file script that can be included in web pages.\nIt contains code for commonly used functions.\n- [browsers-sumo](https://github.com/jedisct1/libsodium.js/tree/master/dist/browsers-sumo)\nis a superset of the previous script, that contains all functions,\nincluding rarely used ones and undocumented ones.\n- [modules](https://github.com/jedisct1/libsodium.js/tree/master/dist/modules)\nincludes commonly used functions, and is designed to be loaded as a module.\n`libsodium-wrappers` is the module your application should load, which\nwill in turn automatically load `libsodium` as a dependency.\n- [modules-sumo](https://github.com/jedisct1/libsodium.js/tree/master/dist/modules-sumo)\ncontains sumo variants of the previous modules.\n\nThe modules are also available on npm:\n- [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers)\n- [libsodium-wrappers-sumo](https://www.npmjs.com/package/libsodium-wrappers-sumo)\n\nIf you prefer Bower:\n\n```sh\nbower install libsodium.js\n```\n\n### Usage (as a module)\n\nLoad the `libsodium-wrappers` module. The returned object contains a `.ready`\nproperty: a promise that must be resolve before the sodium functions\ncan be used.\n\nExample:\n\n```js\nconst _sodium = require('libsodium-wrappers');\n(async() => {\n  await _sodium.ready;\n  const sodium = _sodium;\n\n  let key = sodium.crypto_secretstream_xchacha20poly1305_keygen();\n\n  let res = sodium.crypto_secretstream_xchacha20poly1305_init_push(key);\n  let [state_out, header] = [res.state, res.header];\n  let c1 = sodium.crypto_secretstream_xchacha20poly1305_push(state_out,\n    sodium.from_string('message 1'), null,\n    sodium.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE);\n  let c2 = sodium.crypto_secretstream_xchacha20poly1305_push(state_out,\n    sodium.from_string('message 2'), null,\n    sodium.crypto_secretstream_xchacha20poly1305_TAG_FINAL);\n\n  let state_in = sodium.crypto_secretstream_xchacha20poly1305_init_pull(header, key);\n  let r1 = sodium.crypto_secretstream_xchacha20poly1305_pull(state_in, c1);\n  let [m1, tag1] = [sodium.to_string(r1.message), r1.tag];\n  let r2 = sodium.crypto_secretstream_xchacha20poly1305_pull(state_in, c2);\n  let [m2, tag2] = [sodium.to_string(r2.message), r2.tag];\n\n  console.log(m1);\n  console.log(m2);\n})();\n```\n\n### Usage (in a web browser, via a callback)\n\nThe `sodium.js` file includes both the core libsodium functions, as\nwell as the higher-level JavaScript wrappers. It can be loaded\nasynchronusly.\n\nA `sodium` object should be defined in the global namespace, with the\nfollowing property:\n\n- `onload`: the function to call after the wrapper is initialized.\n\nExample:\n\n```html\n<script>\n    window.sodium = {\n        onload: function (sodium) {\n            let h = sodium.crypto_generichash(64, sodium.from_string('test'));\n            console.log(sodium.to_hex(h));\n        }\n    };\n</script>\n<script src=\"sodium.js\" async></script>\n```\n\n## Additional helpers\n\n* `from_base64()`, `to_base64()` with an optional second parameter\nwhose value is one of: `base64_variants.ORIGINAL`, `base64_variants.ORIGINAL_NO_PADDING`,\n`base64_variants.URLSAFE` or `base64_variants.URLSAFE_NO_PADDING`. Default is `base64_variants.URLSAFE_NO_PADDING`.\n* `from_hex()`, `to_hex()`\n* `from_string()`, `to_string()`\n* `pad(<buffer>, <block size>)`, `unpad(<buffer>, <block size>)`\n* `memcmp()` (constant-time check for equality, returns `true` or `false`)\n* `compare()` (constant-time comparison. Values must have the same\nsize. Returns `-1`, `0` or `1`)\n* `memzero()` (applies to `Uint8Array` objects)\n* `increment()` (increments an arbitrary-long number stored as a\nlittle-endian `Uint8Array` - typically to increment nonces)\n* `add()` (adds two arbitrary-long numbers stored as little-endian\n`Uint8Array` vectors)\n* `is_zero()` (constant-time, checks `Uint8Array` objects for all zeros)\n\n## API\n\nThe API exposed by the wrappers is identical to the one of the C\nlibrary, except that buffer lengths never need to be explicitly given.\n\nBinary input buffers should be `Uint8Array` objects. However, if a string\nis given instead, the wrappers will automatically convert the string\nto an array containing a UTF-8 representation of the string.\n\nExample:\n\n```javascript\nvar key = sodium.randombytes_buf(sodium.crypto_shorthash_KEYBYTES),\n    hash1 = sodium.crypto_shorthash(new Uint8Array([1, 2, 3, 4]), key),\n    hash2 = sodium.crypto_shorthash('test', key);\n```\n\nIf the output is a unique binary buffer, it is returned as a\n`Uint8Array` object.\n\nExample (secretbox):\n\n```javascript\nlet key = sodium.from_hex('724b092810ec86d7e35c9d067702b31ef90bc43a7b598626749914d6a3e033ed');\n\nfunction encrypt_and_prepend_nonce(message) {\n    let nonce = sodium.randombytes_buf(sodium.crypto_secretbox_NONCEBYTES);\n    return nonce.concat(sodium.crypto_secretbox_easy(message, nonce, key));\n}\n\nfunction decrypt_after_extracting_nonce(nonce_and_ciphertext) {\n    if (nonce_and_ciphertext.length < sodium.crypto_secretbox_NONCEBYTES + sodium.crypto_secretbox_MACBYTES) {\n        throw \"Short message\";\n    }\n    let nonce = nonce_and_ciphertext.slice(0, sodium.crypto_secretbox_NONCEBYTES),\n        ciphertext = nonce_and_ciphertext.slice(sodium.crypto_secretbox_NONCEBYTES);\n    return sodium.crypto_secretbox_open_easy(ciphertext, nonce, key);\n}\n```\n\nIn addition, the `from_hex`, `to_hex`, `from_string`, and `to_string`\nfunctions are available to explicitly convert hexadecimal, and\narbitrary string representations from/to `Uint8Array` objects.\n\nFunctions returning more than one output buffer are returning them as\nan object. For example, the `sodium.crypto_box_keypair()` function\nreturns the following object:\n```javascript\n{ keyType: 'curve25519', privateKey: (Uint8Array), publicKey: (Uint8Array) }\n```\n\n### Standard vs Sumo version\n\nThe standard version (in the `dist/browsers` and `dist/modules`\ndirectories) contains the high-level functions, and is the recommended\none for most projects.\n\nAlternatively, the \"sumo\" version, available in the\n`dist/browsers-sumo` and `dist/modules-sumo` directories contains all\nthe symbols from the original library. This includes undocumented,\nuntested, deprecated, low-level and easy to misuse functions.\n\nThe `crypto_pwhash_*` function set is included in both versions.\n\nThe sumo version is slightly larger than the standard version, and\nshould be used only if you really need the extra symbols it provides.\n\n### Compilation\n\nIf you want to compile the files yourself, the following dependencies\nneed to be installed on your system:\n\n* Emscripten\n* binaryen\n* git\n* NodeJS\n* make\n\nRunning `make` will install the dev dependencies, clone libsodium,\nbuild it, test it, build the wrapper, and create the modules and\nminified distribution files.\n\n## Authors\n\nBuilt by Ahmad Ben Mrad, Frank Denis and Ryan Lester.\n\n## License\n\nThis wrapper is distributed under the\n[ISC License](https://en.wikipedia.org/wiki/ISC_license).\n"
 },
 {
  "repo": "opentimestamps/opentimestamps-client",
  "language": "Python",
  "readme_contents": "# OpenTimestamps Client\n\nCommand-line tool to create and validate timestamp proofs with the\nOpenTimestamps protocol, using the Bitcoin blockchain as a timestamp notary.\nAdditionally this package provides timestamping of PGP signed Git commits, and\nverification of timestamps for both Git commits as a whole, and individual\nfiles within a Git repository.\n\n## Requirements\n\n* Python3\n\nWhile OpenTimestamps can *create* timestamps without a local Bitcoin node, to\n*verify* timestamps you need a local Bitcoin Core node (a pruned node is fine).\n\n\n## Installation\n\nEither via PyPi:\n\n    $ pip3 install opentimestamps-client\n\nor from source:\n\n    $ python3 setup.py install\n\nOn Debian (Stretch) you can install the necessary system dependencies with:\n\n    sudo apt-get install python3 python3-dev python3-pip python3-setuptools python3-wheel\n\n## Usage\n\nCreating a timestamp:\n\n    $ ots stamp README.md\n    Submitting to remote calendar https://a.pool.opentimestamps.org\n    Submitting to remote calendar https://b.pool.opentimestamps.org\n    Submitting to remote calendar https://a.pool.eternitywall.com\n\nYou'll see that `README.md.ots` has been created with the aid of three remote\ncalendars. We can't verify it immediately however:\n\n    $ ots verify README.md.ots\n    Assuming target filename is 'README.md'\n    Calendar https://alice.btc.calendar.opentimestamps.org: Pending confirmation in Bitcoin blockchain\n    Calendar https://bob.btc.calendar.opentimestamps.org: Pending confirmation in Bitcoin blockchain\n    Calendar https://finney.calendar.eternitywall.com: Pending confirmation in Bitcoin blockchain\n\nIt takes a few hours for the timestamp to get confirmed by the Bitcoin\nblockchain; we're not doing one transaction per timestamp.\n\nHowever, the client does come with a number of example timestamps which you can\ntry verifying immediately. Here's a complete timestamp that can be verified\nlocally:\n\n    $ ots verify examples/hello-world.txt.ots\n    Assuming target filename is 'examples/hello-world.txt'\n    Success! Bitcoin block 358391 attests existence as of 2015-05-28 CEST\n\nYou can specify JSON-RPC credentials (`USER` and `PASS`) for a local bitcoin node like so:\n\n    $ ots --bitcoin-node http://USER:PASS@127.0.0.1:8332/ verify examples/hello-world.txt.ots\n    Assuming target filename is 'examples/hello-world.txt'\n    Success! Bitcoin block 358391 attests existence as of 2015-05-28 CEST\n\nIncomplete timestamps are ones that require the assistance of a remote calendar\nto verify; the calendar provides the path to the Bitcoin block header:\n\n    $ ots verify examples/incomplete.txt.ots\n    Assuming target filename is 'examples/incomplete.txt'\n    Got 1 new attestation(s) from https://alice.btc.calendar.opentimestamps.org\n    Success! Bitcoin block 428648 attests existence as of 2016-09-07 CEST\n\nThe client maintains a cache of timestamps it obtains from remote calendars, so\nif you verify the same file again it'll use the cache:\n\n    $ ots verify examples/incomplete.txt.ots\n    Assuming target filename is 'examples/incomplete.txt'\n    Got 1 attestation(s) from cache\n    Success! Bitcoin block 428648 attests existence as of 2016-09-07 CEST\n\nYou can also upgrade an incomplete timestamp, which adds the path to the\nBitcoin blockchain to the timestamp itself:\n\n    $ ots upgrade examples/incomplete.txt.ots\n    Got 1 attestation(s) from cache\n    Success! Timestamp is complete\n\nFinally, you can get information on a timestamp, including the actual\ncommitment operations and attestations in it:\n\n    $ ots info examples/two-calendars.txt.ots\n    File sha256 hash: efaa174f68e59705757460f4f7d204bd2b535cfd194d9d945418732129404ddb\n    Timestamp:\n    append 839037eef449dec6dac322ca97347c45\n    sha256\n     -> append 6b4023b6edd3a0eeeb09e5d718723b9e\n        sha256\n        prepend 57d46515\n        append eadd66b1688d5574\n        verify PendingAttestation('https://alice.btc.calendar.opentimestamps.org')\n     -> append a3ad701ef9f10535a84968b5a99d8580\n        sha256\n        prepend 57d46516\n        append 647b90ea1b270a97\n        verify PendingAttestation('https://bob.btc.calendar.opentimestamps.org')\n\n### Timestamping and Verifying PGP Signed Git Commits\n\nSee `doc/git-integration.md`\n\n\n## Privacy Security\n\nTimestamping inherently records potentially revealing metadata: the current\ntime. If you create multiple timestamps in close succession it's quite likely\nthat an adversary will be able to link those timestamps as related simply on\nthe basis of when they were created; if you make use of the timestamp multiple\nfiles in one command functionality (`./ots stamp <file1> <file2> ... <fileN>`)\nmost of the commitment operations in the timestamps themselves will be\nidentical, providing an adversary very strong evidence that the files were\ntimestamped by the same person. Finally, the REST API used to communicate with\nremote calendars doesn't currently attempt to provide any privacy, although it\ncould be modified to do so in the future (e.g. with prefix filters).\n\nFile contents *are* protected with nonces: a remote calendar learns nothing\nabout the contents of anything you timestamp as it only ever receives an opaque\nand meaningless digest. Equally, if multiple files are timestamped at once,\neach file is protected by an individual nonce; the timestamp for one file\nreveals nothing about the contents of another file timestamped at the same\ntime.\n\n## Compatibility Expectations\n\nOpenTimestamps is alpha software, so it's possible that timestamp formats may\nhave to change in the future in non-backward-compatible ways. However it will\nalmost certainly be possible to write conversion tools for any\nnon-backwards-compatible changes.\n\nIt's very likely that the REST protocol used to communicate with remote\ncalendars will change, including in backwards incompatible ways. If this\nhappens you'll just need to upgrade your client; existing timestamps will be\nunaffected.\n\n## Calendar Mirroring\n\nAs a short-term measure, the raw calendar data for the three calendar servers\nin operation at this time can be downloaded directly. See\nthe `contrib/calendar-mirror.sh` script for details.\n\n## Development\n\nUse the setuptools development mode:\n\n    python3 setup.py develop --user\n\n\n## Known Issues\n\n* Need unit tests for the client.\n\n* Git tree re-hashing support fails on certain filenames with invalid unicode\n  encodings; this appears to be due to bugs in the underlying GitPython\n  library. As a work-around, you may find the `convmv` tool useful to find and\n  rename these files.\n\n* Git annex support only works with the SHA256 and SHA256E backends.\n\n* Errors in the Bitcoin RPC communication aren't handled in a user-friendly\n  way.\n\n* Not all Python platforms check SSL certificates correctly. This means that on\n  some platforms, it would be possible for a MITM attacker to intercept HTTPS\n  connections to remote calendars. That said, it shouldn't be possible for such\n  an attacker to do anything worse than give us a timestamp that fails\n  validation, an easily fixed problem.\n\n* ots-git-gpg-wrapper doesn't yet check for you if the timestamp on the git commit\n  makes sense.\n\n* `bitcoin` package can cause issues, with ots confusing it with the\n  required `python-bitcoinlib` package. A symptom of this issue is the\n  message `AttributeError: module 'bitcoin' has no attribute\n  'SelectParams'` or `JSONDecodeError(\"Expecting value\", s, err.value) from None`. To remedy this issue, one must do the following:\n\n```bash\n# uninstall the packages through pip\npip3 uninstall bitcoin python-bitcoinlib\n\n# remove the bitcoin directory manually from your dist-packages folder\nrm -rf /usr/local/lib/python3.5/dist-packages/bitcoin\n\n# reinstall the required package\npip3 install python-bitcoinlib\n```\n"
 },
 {
  "repo": "tecnico-sec/Java-Crypto",
  "language": "Java",
  "readme_contents": "Instituto Superior T\u00e9cnico, Universidade de Lisboa\n\n**Network and Computer Security**\n\n# Lab guide: Java Cryptographic Mechanisms\n\n## Goals\n\n- Use the cryptographic mechanisms available in the Java platform.\n- Perform attacks exploiting vulnerabilities introduced by the bad use of cryptography.\n\n## Introduction\n\nThis laboratory assignment uses Java Development Kit (JDK) version 7 or later, running on Linux. The Java platform strongly emphasizes security, including language safety, cryptography, public key infrastructure, secure communication, authentication and access control.\n\nThe Java Cryptography Architecture (JCA), which is a major piece of the Java platform, includes a large set of application programming interfaces (APIs), tools, and implementations of commonly-used security algorithms, mechanisms, and protocols. It provides a comprehensive security framework for writing applications and also provides a set of tools to securely manage applications.\n\nThe JCA APIs include abstractions for secure random number generation, key generation and management, certificates and certificate validation, encryption (symmetric/asymmetric block/stream ciphers), message digests (hashes), and digital signatures. Some examples are the MessageDigest, Signature, KeyFactory, KeyPairGenerator, and Cipher classes.\n\nImplementation independence, in the Java platform, is achieved using a _provider_-based architecture. The term Cryptographic Service Provider (CSP) refers to a package or set of packages that implement one or more cryptographic services, such as digital signature algorithms, message digest algorithms, and key conversion services. A program may simply request an object, e.g., a MessageDigest object, implementing a particular service, e.g., the SHA-256 digest algorithm, and get an implementation from one of the installed providers. A program may instead request, if necessary, an implementation from a specific provider.\n\nTo obtain a security service from an underlying provider, applications rely on the relevant getInstance() method. The message digest creation, for example, represents one type of service available from providers. To obtain an implementation of a specific message digest algorithm, an application invokes the getInstance() method in the java.security.MessageDigest class.\n\n```java\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\nOptionally, by indicating the provider name, the program may request an implementation from a specific provider as in the following:\n\n```java\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\", \"MyProvider\");\n```\n\nProviders may be updated transparently to the application when faster or more secure versions are available. In the Java platform, the java.security.Provider class is the base class for all security providers. Each CSP contains an instance of this class which contains the provider&#39;s name and lists all the security services/algorithms it implements. Multiple providers may be configured at the same time and are listed in order of preference. The highest priority provider that implements that service is selected when a security service is requested.\n\nFor more information, please read:\n\n[http://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html#Introduction](http://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html#Introduction)\n\n\n## Cryptographic mechanisms\n\n\n### Setup\n\nTo try the cryptographic mechanisms, the Java code needs to be compiled and executed.\n\nPut the lab files in a working folder with write permissions, like /tmp/JavaCrypto, for example, and change your working directory to it.\n\n```bash\n$ cd /tmp/JavaCrypto \n```\n\nYou can compile the code using [Maven](https://maven.apache.org/).\nTo do so:\n\n```bash\n$ mvn clean compile\n```\n\nTo execute a class with arguments using Maven, write something like:\n\n```bash\n$ mvn exec:java -Dmainclass=pt.ulisboa.tecnico.meic.sirs.RandomImageGenerator -Dexec.args=\"intro/outputs/otp.png 480 480\"\n```\n\nYou can also modify the class and arguments directly in the pom.xml file.\n\n\n### Alternative setup\n\nIf Maven is not available, you can compile the code directly using the Java compiler:\n\n```bash\n$ javac src/pt/ulisboa/tecnico/meic/sirs/*.java\n```\n\nYou will also need to define the Classpath environment variable. \nThe Classpath is a parameter that specifies the location of user-defined classes and packages\n(for .class files in a named package, the Classpath must end with the directory that contains the first package in the full package name).\n\n```bash\n$ export CLASSPATH=\"/tmp/JavaCrypto/src\"\n```\n\nPlease notice that all steps that follow expect that this was done, so you must adjust paths commands, if necessary.\n\nFor every java command that follows in this guide, please write the full package names and file paths. \nThey are ommitted for brevity in this guide.\n\n```bash\n$ java pt.ulisboa.tecnico.meic.sirs.RandomImageGenerator \n# instead of just $ java RandomImageGenerator\n```\n\n\n### Image files\n\nThe cryptographic operations will be applied to image files, so that its results can be \"seen\".\nIn the directory intro/inputs, you can find three different images:\n\n- Tecnico: \\*.png, the IST logo\n- Tux: \\*.png, Tux, the Linux penguin\n- Glider: \\*.png, the hacker emblem ([http://www.catb.org/hacker-emblem/](http://www.catb.org/hacker-emblem/))\n\nEach one is presented with three different dimensions: 480x480, 960x960, and 2400x2400. \nThe resolution number is part of the file name. \nThe ImageMixer class is available to facilitate the operations on images. \nDifferent code examples are available, such as the RandomImageGenerator, ImageXor, and ImageAESCipher classes.\n\n### One-Time Pads (Symmetric stream cipher)\n\nIf they could be correctly used in practice, one-time pads would provide perfect security. \nOne of the constraints to make them work as expected is that the key stream must never be reused. \nThe following steps visually illustrate what happens if they are reused, even if just once:\n\nGenerate a new 480x480 random image:\n\n```bash\n$ java RandomImageGenerator intro/outputs/otp.png 480 480\n```\n\nPerform the bitwise eXclusive OR operation (XOR) with the generated key:\n\n```bash\n$ java ImageXor intro/inputs/tecnico-0480.png intro/outputs/otp.png intro/outputs/encrypted-tecnico.png\n```\n\nXOR tux-0480.png with the same generated key:\n\n```bash\n$ java ImageXor intro/inputs/tux-0480.png intro/outputs/otp.png intro/outputs/encrypted-tux.png\n```\n\nWatch the images encrypted-tecnico.png and encrypted-tux.png. \nSwitch between them and see the differences.\n\nTo make the differences obvious, XOR them together:\n\n```bash\n$ java ImageXor intro/outputs/encrypted-tecnico.png intro/outputs/encrypted-tux.png intro/outputs/tecnico-tux.png\n```\n\nYou can see that the reuse of a one-time pad (or any stream cipher key at all) considerably weakens (or completely breaks) the security of the information. \nThe reason is the following:         \n\n```\nC1 = M1 \u2295 K\n\nC2 = M2 \u2295 K\n\nC1 \u2295 C2 = M1 \u2295 M2\n```\n\nLegend: C stands for cipher-text, M for plain-text, K for key, \u2295 for XOR\n\nThe result you get is the XOR of the images. \nYou can experiment with other images and sizes.\n\n\n### Block cipher modes\n\nNow that you know that keys should never be reused, remember that the way you use them is also important. \n\nWe will use a symmetric-key encryption algorithm working in blocks to encrypt the pixels from an image.\nWe will use different modes, namely:\nECB (Electronic Code Book), CBC (Cipher Block Chaining) and OFB (Output FeedBack).\n\n#### ECB (Electronic Code Book)\n\nIn the ECB mode, each block is independently encrypted with the key:\n\n```\nC[i] = E_k(M[i])\n```\n\n![ECB](ECB.png)\n\nBegin by generating a new AES Key:\n\n```bash\n$ java AESKeyGenerator w intro/outputs/aes.key\n```\n\nThen, encrypt the glider image with it:\n\n```bash\n$ java ImageAESCipher intro/inputs/glider-0480.png intro/outputs/aes.key ECB intro/outputs/glider-aes-ecb.png\n```\n\nWatch the output image. \nRemember what you have just done: encrypted the image with AES, using ECB mode, and a key you generated yourself.\n\nTry the same thing with the other images (especially with other sizes).\n\nTry using Java providers to generate a new AES key.\nWhat is necessary to change in the code for that to happen?\n\nRepeat all the previous steps for the new key.\n\nCompare the results obtained using ECB mode with AES with the previous ones. \nWhat are the differences between them?\n\n#### CBC (Cipher Block Chaining)\n\nIn CBC mode, each block M[i] is XORed with the ciphertext from the previous block, and then encrypted with key k: \n\n```\nC[i] = E_k (M[i] \u2295 C[i-1])\n```\n\n![CBC](CBC.png)\n\nThe encryption of the first block can be performed by means of a random and unique value known as the _Initialization Vector_ (IV). \n\nThe AES key will be the same from the previous step.\n\nEncrypt the glider image with it, this time replacing ECB with CBC:\n\n```bash\n$ java ImageAESCipher intro/inputs/glider-0480.png intro/outputs/aes.key CBC intro/outputs/glider-aes-cbc.png\n```\n\nWatch the file glider-aes-cbc.png. \nSee the difference made by changing only the mode of operation.\n\nStill in the CBC mode, you might have wondered why the IV is needed in the first block. \nConsider what happens when you encrypt two different images with similar beginnings, and with the same key: the initial cipher text blocks would also be similar!\n\nThe ImageAESCipher class provided has been deliberately weakened: instead of randomizing the IV, it is always the same.\n\nThis time, encrypt the other two images with AES/CBC, still using the same AES key:\n\n```bash\n$ java ImageAESCipher intro/inputs/tux-0480.png intro/outputs/aes.key CBC intro/outputs/tux-aes-cbc.png\n\n$ java ImageAESCipher intro/inputs/tecnico-0480.png intro/outputs/aes.key CBC intro/outputs/tecnico-aes-cbc.png\n```\n\nNow watch the images glider-aes-cbc.png, tux-aes-cbc.png, and tecnico-aes-cbc.png.\nLook to the first lines of pixels. \nCan you see what is going on?\n\n\n#### OFB\n\nIn the OFB mode, the IV is encrypted with the key to make a keystream that is then XORed with the plaintext to make the cipher text.\n\n![OFB](OFB.png)\n\nIn practice, the keystream of the OFB mode can be seen as the one-time pad that is used to encrypt a message. \nThis implies that in OFB mode, if the key and the IV are both reused, there is no security.\n\nEncrypt the images with OFB:\n\n```bash\n$ java ImageAESCipher intro/inputs/glider-0480.png intro/outputs/aes.key OFB intro/outputs/glider-aes-ofb.png\n\n$ java ImageAESCipher intro/inputs/tux-0480.png intro/outputs/aes.key OFB intro/outputs/tux-aes-ofb.png\n\n$ java ImageAESCipher intro/inputs/tecnico-0480.png intro/outputs/aes.key OFB intro/outputs/tecnico-aes-ofb.png\n```\n\nRemember that the ImageAESCipher implementation has been weakened, by having a null IV, and you are reusing the same AES key. \nWatch the generated images and switch quickly between them.\n\nTake two images (e.g., image1 and image2) and cipher them both. \nXOR image1 with the ciphered image2. \nWhat did you obtain? \nWhy?\n\nWhat is more secure to use: CBC or OFB?\n\n\n### Asymmetric ciphers\n\nThe goal now is to use asymmetric ciphers, with separate private and public keys.\nRSA is the most well known of these algorithms.\n\n#### Generating a pair of keys with OpenSSL\n\nGenerate the key pair:\n\n```bash\n$ openssl genrsa -out server.key\n```\n\nSave the public key:\n\n```bash\n$ openssl rsa -in server.key -pubout > public.key\n```\n\n#### Generating a self-signed certificate\n\nCreate a Certificate Signing Request, using same key:\n\n```bash\n$ openssl req -new -key server.key -out server.csr\n```\n\nSelf-sign:\n\n```bash\n$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n```\n\nFor our certificate to be able to sign other certificates, OpenSSL requires that a database exists (a .srl file). \nCreate it:\n\n```bash\n$ echo 01 > server.srl\n```\n\nThen, generating a key for a user is basically repeating the same steps (see commands above), except that the self-sign no longer happens and is replaced by:\n\n```bash\n$ openssl x509 -req -days 365 -in user.csr -CA server.crt -CAkey server.key -out user.crt\n```\n\nSign the file grades.txt with the user certificate:\n\n```bash\n$ openssl dgst -sha256 grades/inputs/grades.txt > grades.sha256\n\n$ openssl rsautl -sign -inkey user.key -keyform PEM -in grades.sha256 > grades.sig\n```\n\nVerify the signature with the user key:\n\n```bash\n$ openssl rsautl -verify -in grades.sig -inkey user.key\n\nSHA256(/tmp/sirs/grades/inputs/grades.txt)= 770ddfe97cd0e6d279b9ce780ff060554d8ccbe4b8eccaed364a8fc6e89fd34d\n```\n\nand should always match this:\n\n```bash\n$ openssl dgst -sha256 grades/inputs/grades.txt\n\nSHA256(/tmp/sirs/grades/inputs/grades.txt)= 770ddfe97cd0e6d279b9ce780ff060554d8ccbe4b8eccaed364a8fc6e89fd34d\n```\n\nVerify the user certificate:\n\n```bash\n$ openssl verify -CAfile server.crt user.crt\n```\n\nuser.crt: OK\n\n#### Reading the generated pair of keys with Java\n\nTo read the generated keys in Java it is necessary to convert them to the right format.\n\nConvert server.key to .pem\n\n```bash\n$ openssl rsa -in server.key -text > private_key.pem\n```\n\nConvert private Key to PKCS#8 format (so Java can read it)\n\n```bash\n$ openssl pkcs8 -topk8 -inform PEM -outform DER -in private_key.pem -out private_key.der -nocrypt\n```\n\nOutput public key portion in DER format (so Java can read it)\n\n```bash\n$ openssl rsa -in private_key.pem -pubout -outform DER -out public_key.der\n```\n\nRead the key files using the following command:\n\n```bash\n$ java RSAKeyGenerator r private_key.der public_key.der\n```\n#### Generating a pair of keys with Java\n\nGenerate a new pair of RSA Keys.\n\n```bash\n$ java RSAKeyGenerator w intro/outputs/priv.key intro/outputs/pub.key\n```\n\nBased on the ImageAESCipher class create ImageRSACipher and ImageRSADecipher classes.\n\nEncrypt the image with the public key and then decrypt it with the private key.\nTry the same thing with the other images - especially with other sizes.\n\nPlease consider that the RSA cipher, as implemented by Java, can only be applied to one block of data at a time, and its size depends on the size of the key. \nFor a 1024-bit key the block size is 117 bytes or 60 bytes, depending on the padding options. \nThis is acceptable because the RSA cipher is mostly used to cipher keys or hashes that are small. \nFor large data, hybrid cipher is most suited (combining RSA with AES, for example). \nFor this exercise you can cipher one block at a time.\n\n\n### Additional exercise (file tampering)\n\nIn the directory grades/inputs, you can find the file grades.txt, the plaintext of a file with the grades of a course.\nThis flat-file database has a rigid structure: 64 bytes for name, and 16 bytes for each of the other fields, number, age and grade. Unfortunately, you happen to be _Mr. Thomas S. Cook_, and your grade was not on par with the rest of your class because you studied for a different exam...\n\nBegin by encrypting this file into ecb.aes. \nFor this example, we will still reuse the AES key generated above and ECB mode.\n\n```bash\n$ java FileAESCipher grades/inputs/grades.txt intro/outputs/aes.key ECB grades/outputs/grades.ecb.aes\n```\n\nKeeping in mind how the mode operations work, and without using the secret key, try to change your grade to 21 in the encrypted files or give everyone in class a 20.\n(Why 21 or all 20s? Because you are an _ethical hacker_ using your skills to show that the system is vulnerable, not perform actual cheating.)\n\nDid you succeed? \nDid your changes have side effects?\n\nNow try to attack cbc.aes and ofb.aes. For this example, we will still reuse the AES key generated above but use the CBC and OFB modes.\n\n```bash\n$ java FileAESCipher grades/inputs/grades.txt intro/outputs/aes.key CBC grades/outputs/grades.cbc.aes\n\n$ java FileAESCipher grades/inputs/grades.txt intro/outputs/aes.key OFB grades/outputs/grades.ofb.aes\n```\n\nHow do you compare the results with ECB?\n\nSince the inputs and outputs of cryptographic mechanisms are byte arrays, in many occasions it is necessary to represent encrypted data in text files. \nA possibility is to use base 64 encoding that, for every binary sequence of 6 bits, assigns a predefined ASCII character.\nExecute the following to create a base 64 representation of files previously generated.\n\n```bash\n$ java Base64Encode grades/outputs/grades.cbc.aes grades/outputs/grades.cbc.aes.b64\n```\n\nDecode them:\n\n```bash\n$ java Base64Decode grades/outputs/grades.cbc.aes.b64 grades/outputs/grades.cbc.aes.b64.decoded\n```\n\nCheck if they are similar using the diff command (or fc /b command on Windows):\n\n```bash\n$ diff grades/outputs/grades.cbc.aes grades/outputs/grades.cbc.aes.b64.decoded\n```\n\nIt should not return anything.\n\nCheck the difference on the file sizes. \nCan you explain it? \nIn percentage, how much is it?\n\nDoes base 64 provide any kind of security? \nIf so, how?\n\nUse Java to generate the message authentication code (MAC) and digital signature of the grades file. \nBy performing these operations, which security requirements can be guaranteed?\n\n\n**Acknowledgments**\n\nOriginal version: Valmiky Arquissandas\n\nRevisions: Diogo Peres Castilho, David R. Matos, Miguel Pardal, Ricardo Chaves\n"
 },
 {
  "repo": "monero-project/monero",
  "language": "C++",
  "readme_contents": "# Monero\n\nCopyright (c) 2014-2022 The Monero Project.  \nPortions Copyright (c) 2012-2013 The Cryptonote developers.\n\n## Table of Contents\n\n  - [Development resources](#development-resources)\n  - [Vulnerability response](#vulnerability-response)\n  - [Research](#research)\n  - [Announcements](#announcements)\n  - [Translations](#translations)\n  - [Coverage](#coverage)\n  - [Introduction](#introduction)\n  - [About this project](#about-this-project)\n  - [Supporting the project](#supporting-the-project)\n  - [License](#license)\n  - [Contributing](#contributing)\n  - [Scheduled software upgrades](#scheduled-software-upgrades)\n  - [Release staging schedule and protocol](#release-staging-schedule-and-protocol)\n  - [Compiling Monero from source](#compiling-monero-from-source)\n    - [Dependencies](#dependencies)\n  - [Internationalization](#Internationalization)\n  - [Using Tor](#using-tor)\n  - [Pruning](#Pruning)\n  - [Debugging](#Debugging)\n  - [Known issues](#known-issues)\n\n## Development resources\n\n- Web: [getmonero.org](https://getmonero.org)\n- Forum: [forum.getmonero.org](https://forum.getmonero.org)\n- Mail: [dev@getmonero.org](mailto:dev@getmonero.org)\n- GitHub: [https://github.com/monero-project/monero](https://github.com/monero-project/monero)\n- IRC: [#monero-dev on Libera](https://web.libera.chat/#monero-dev)\n- It is HIGHLY recommended that you join the #monero-dev IRC channel if you are developing software that uses Monero. Due to the nature of this open source software project, joining this channel and idling is the best way to stay updated on best practices and new developments in the Monero ecosystem. All you need to do is join the IRC channel and idle to stay updated with the latest in Monero development. If you do not, you risk wasting resources on developing integrations that are not compatible with the Monero network. The Monero core team and community continuously make efforts to communicate updates, developments, and documentation via other platforms \u2013 but for the best information, you need to talk to other Monero developers, and they are on IRC. #monero-dev is about Monero development, not getting help about using Monero, or help about development of other software, including yours, unless it also pertains to Monero code itself. For these cases, checkout #monero.\n\n## Vulnerability response\n\n- Our [Vulnerability Response Process](https://github.com/monero-project/meta/blob/master/VULNERABILITY_RESPONSE_PROCESS.md) encourages responsible disclosure\n- We are also available via [HackerOne](https://hackerone.com/monero)\n\n## Research\n\nThe [Monero Research Lab](https://src.getmonero.org/resources/research-lab/) is an open forum where the community coordinates research into Monero cryptography, protocols, fungibility, analysis, and more. We welcome collaboration and contributions from outside researchers! Because not all Lab work and publications are distributed as traditional preprints or articles, they may be easy to miss if you are conducting literature reviews for your own Monero research. You are encouraged to get in touch with the Monero research community if you have questions, wish to collaborate, or would like guidance to help avoid unnecessarily duplicating earlier or known work.\n\nThe Monero research community is available on IRC in [#monero-research-lab on Libera](https://web.libera.chat/#monero-research-lab), which is also accessible via Matrix.\n\n## Announcements\n\n- You can subscribe to an [announcement listserv](https://lists.getmonero.org) to get critical announcements from the Monero core team. The announcement list can be very helpful for knowing when software updates are needed.\n\n## Translations\nThe CLI wallet is available in different languages. If you want to help translate it, see our self-hosted localization platform, Weblate, on [translate.getmonero.org]( https://translate.getmonero.org/projects/monero/cli-wallet/). Every translation *must* be uploaded on the platform, pull requests directly editing the code in this repository will be closed. If you need help with Weblate, you can find a guide with screenshots [here](https://github.com/monero-ecosystem/monero-translations/blob/master/weblate.md).\n&nbsp;\n\nIf you need help/support/info about translations, contact the localization workgroup. You can find the complete list of contacts on the repository of the workgroup: [monero-translations](https://github.com/monero-ecosystem/monero-translations#contacts).\n\n## Coverage\n\n| Type      | Status |\n|-----------|--------|\n| Coverity  | [![Coverity Status](https://scan.coverity.com/projects/9657/badge.svg)](https://scan.coverity.com/projects/9657/)\n| OSS Fuzz  | [![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/monero.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:monero)\n| Coveralls | [![Coveralls Status](https://coveralls.io/repos/github/monero-project/monero/badge.svg?branch=master)](https://coveralls.io/github/monero-project/monero?branch=master)\n| License   | [![License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\n## Introduction\n\nMonero is a private, secure, untraceable, decentralised digital currency. You are your bank, you control your funds, and nobody can trace your transfers unless you allow them to do so.\n\n**Privacy:** Monero uses a cryptographically sound system to allow you to send and receive funds without your transactions being easily revealed on the blockchain (the ledger of transactions that everyone has). This ensures that your purchases, receipts, and all transfers remain private by default.\n\n**Security:** Using the power of a distributed peer-to-peer consensus network, every transaction on the network is cryptographically secured. Individual wallets have a 25-word mnemonic seed that is only displayed once and can be written down to backup the wallet. Wallet files should be encrypted with a strong passphrase to ensure they are useless if ever stolen.\n\n**Untraceability:** By taking advantage of ring signatures, a special property of a certain type of cryptography, Monero is able to ensure that transactions are not only untraceable but have an optional measure of ambiguity that ensures that transactions cannot easily be tied back to an individual user or computer.\n\n**Decentralization:** The utility of Monero depends on its decentralised peer-to-peer consensus network - anyone should be able to run the monero software, validate the integrity of the blockchain, and participate in all aspects of the monero network using consumer-grade commodity hardware. Decentralization of the monero network is maintained by software development that minimizes the costs of running the monero software and inhibits the proliferation of specialized, non-commodity hardware.\n\n## About this project\n\nThis is the core implementation of Monero. It is open source and completely free to use without restrictions, except for those specified in the license agreement below. There are no restrictions on anyone creating an alternative implementation of Monero that uses the protocol and network in a compatible manner.\n\nAs with many development projects, the repository on GitHub is considered to be the \"staging\" area for the latest changes. Before changes are merged into that branch on the main repository, they are tested by individual developers in their own branches, submitted as a pull request, and then subsequently tested by contributors who focus on testing and code reviews. That having been said, the repository should be carefully considered before using it in a production environment, unless there is a patch in the repository for a particular show-stopping issue you are experiencing. It is generally a better idea to use a tagged release for stability.\n\n**Anyone is welcome to contribute to Monero's codebase!** If you have a fix or code change, feel free to submit it as a pull request directly to the \"master\" branch. In cases where the change is relatively small or does not affect other parts of the codebase, it may be merged in immediately by any one of the collaborators. On the other hand, if the change is particularly large or complex, it is expected that it will be discussed at length either well in advance of the pull request being submitted, or even directly on the pull request.\n\n## Supporting the project\n\nMonero is a 100% community-sponsored endeavor. If you want to join our efforts, the easiest thing you can do is support the project financially. Both Monero and Bitcoin donations can be made to **donate.getmonero.org** if using a client that supports the [OpenAlias](https://openalias.org) standard. Alternatively, you can send XMR to the Monero donation address via the `donate` command (type `help` in the command-line wallet for details).\n\nThe Monero donation address is:  \n`888tNkZrPN6JsEgekjMnABU4TBzc2Dt29EPAvkRxbANsAnjyPbb3iQ1YBRk1UXcdRsiKc9dhwMVgN5S9cQUiyoogDavup3H`  \nViewkey:  \n`f359631075708155cc3d92a32b75a7d02a5dcf27756707b47a2b31b21c389501`  \nBase address for restoring with address and viewkey:\n`44AFFq5kSiGBoZ4NMDwYtN18obc8AemS33DBLWs3H7otXft3XjrpDtQGv7SqSsaBYBb98uNbr2VBBEt7f2wfn3RVGQBEP3A`  \n\nThe Bitcoin donation address is:  \n`1KTexdemPdxSBcG55heUuTjDRYqbC5ZL8H`\n\nCore development funding and/or some supporting services are also graciously provided by [sponsors](https://www.getmonero.org/community/sponsorships/):\n\n[<img width=\"150\" src=\"https://www.getmonero.org/img/sponsors/tarilabs.png\"/>](https://tarilabs.com/)\n[<img width=\"150\" src=\"https://www.getmonero.org/img/sponsors/globee.png\"/>](https://globee.com/)\n[<img width=\"150\" src=\"https://www.getmonero.org/img/sponsors/symas.png\"/>](https://symas.com/)\n[<img width=\"150\" src=\"https://www.getmonero.org/img/sponsors/forked_logo.png\"/>](http://www.forked.net/)\n[<img width=\"150\" src=\"https://www.getmonero.org/img/sponsors/macstadium.png\"/>](https://www.macstadium.com/)\n\nThere are also several mining pools that kindly donate a portion of their fees, [a list of them can be found on our Bitcointalk post](https://bitcointalk.org/index.php?topic=583449.0).\n\n## License\n\nSee [LICENSE](LICENSE).\n\n## Contributing\n\nIf you want to help out, see [CONTRIBUTING](docs/CONTRIBUTING.md) for a set of guidelines.\n\n## Scheduled software upgrades\n\nMonero uses a fixed-schedule software upgrade (hard fork) mechanism to implement new features. This means that users of Monero (end users and service providers) should run current versions and upgrade their software on a regular schedule. Software upgrades occur during the months of April and October. The required software for these upgrades will be available prior to the scheduled date. Please check the repository prior to this date for the proper Monero software version. Below is the historical schedule and the projected schedule for the next upgrade.\nDates are provided in the format YYYY-MM-DD.\n\n\n| Software upgrade block height  | Date       | Fork version      | Minimum Monero version | Recommended Monero version | Details                                                                            |\n| ------------------------------ | -----------| ----------------- | ---------------------- | -------------------------- | ---------------------------------------------------------------------------------- |\n| 1009827                        | 2016-03-22 | v2                | v0.9.4                 | v0.9.4                     | Allow only >= ringsize 3, blocktime = 120 seconds, fee-free blocksize 60 kb       |\n| 1141317                        | 2016-09-21 | v3                | v0.9.4                 | v0.10.0                    | Splits coinbase into denominations  |\n| 1220516                        | 2017-01-05 | v4                | v0.10.1                | v0.10.2.1                  | Allow normal and RingCT transactions |\n| 1288616                        | 2017-04-15 | v5                | v0.10.3.0              | v0.10.3.1                  | Adjusted minimum blocksize and fee algorithm      |\n| 1400000                        | 2017-09-16 | v6                | v0.11.0.0              | v0.11.0.0                  | Allow only RingCT transactions, allow only >= ringsize 5      |\n| 1546000                        | 2018-04-06 | v7                | v0.12.0.0              | v0.12.3.0                  | Cryptonight variant 1, ringsize >= 7, sorted inputs\n| 1685555                        | 2018-10-18 | v8                | v0.13.0.0              | v0.13.0.4                  | max transaction size at half the penalty free block size, bulletproofs enabled, cryptonight variant 2, fixed ringsize [11](https://youtu.be/KOO5S4vxi0o)\n| 1686275                        | 2018-10-19 | v9                | v0.13.0.0              | v0.13.0.4                  | bulletproofs required\n| 1788000                        | 2019-03-09 | v10               | v0.14.0.0              | v0.14.1.2                  | New PoW based on Cryptonight-R, new block weight algorithm, slightly more efficient RingCT format\n| 1788720                        | 2019-03-10 | v11               | v0.14.0.0              | v0.14.1.2                  | forbid old RingCT transaction format\n| 1978433                        | 2019-11-30 | v12               | v0.15.0.0              | v0.16.0.0                  | New PoW based on RandomX, only allow >= 2 outputs, change to the block median used to calculate penalty, v1 coinbases are forbidden, rct sigs in coinbase forbidden, 10 block lock time for incoming outputs\n| 2210000                        | 2020-10-17 | v13               | v0.17.0.0              | v0.17.3.2                  | New CLSAG transaction format\n| 2210720                        | 2020-10-18 | v14               | v0.17.1.1              | v0.17.3.2                  | forbid old MLSAG transaction format\n| 2688888                        | 2022-08-13 | v15               | v0.18.0.0              | v0.18.0.0                  | ringsize = 16, bulletproofs+, view tags, adjusted dynamic block weight algorithm\n| 2689608                        | 2022-08-14 | v16               | v0.18.0.0              | v0.18.0.0                  | forbid old v14 transaction format\n| XXXXXXX                        | XXX-XX-XX | XXX                | vX.XX.X.X              | vX.XX.X.X                  | XXX |\n\nX's indicate that these details have not been determined as of commit date.\n\n\\* indicates estimate as of commit date\n\n## Release staging schedule and protocol\n\nApproximately three months prior to a scheduled software upgrade, a branch from master will be created with the new release version tag. Pull requests that address bugs should then be made to both master and the new release branch. Pull requests that require extensive review and testing (generally, optimizations and new features) should *not* be made to the release branch.\n\n## Compiling Monero from source\n\n### Dependencies\n\nThe following table summarizes the tools and libraries required to build. A\nfew of the libraries are also included in this repository (marked as\n\"Vendored\"). By default, the build uses the library installed on the system\nand ignores the vendored sources. However, if no library is found installed on\nthe system, then the vendored source will be built and used. The vendored\nsources are also used for statically-linked builds because distribution\npackages often include only shared library binaries (`.so`) but not static\nlibrary archives (`.a`).\n\n| Dep          | Min. version  | Vendored | Debian/Ubuntu pkg    | Arch pkg     | Void pkg           | Fedora pkg          | Optional | Purpose         |\n| ------------ | ------------- | -------- | -------------------- | ------------ | ------------------ | ------------------- | -------- | --------------- |\n| GCC          | 5             | NO       | `build-essential`    | `base-devel` | `base-devel`       | `gcc`               | NO       |                 |\n| CMake        | 3.5           | NO       | `cmake`              | `cmake`      | `cmake`            | `cmake`             | NO       |                 |\n| pkg-config   | any           | NO       | `pkg-config`         | `base-devel` | `base-devel`       | `pkgconf`           | NO       |                 |\n| Boost        | 1.58          | NO       | `libboost-all-dev`   | `boost`      | `boost-devel`      | `boost-devel`       | NO       | C++ libraries   |\n| OpenSSL      | basically any | NO       | `libssl-dev`         | `openssl`    | `libressl-devel`   | `openssl-devel`     | NO       | sha256 sum      |\n| libzmq       | 4.2.0         | NO       | `libzmq3-dev`        | `zeromq`     | `zeromq-devel`     | `zeromq-devel`      | NO       | ZeroMQ library  |\n| OpenPGM      | ?             | NO       | `libpgm-dev`         | `libpgm`     |                    | `openpgm-devel`     | NO       | For ZeroMQ      |\n| libnorm[2]   | ?             | NO       | `libnorm-dev`        |              |                    |                     | YES      | For ZeroMQ      |\n| libunbound   | 1.4.16        | YES      | `libunbound-dev`     | `unbound`    | `unbound-devel`    | `unbound-devel`     | NO       | DNS resolver    |\n| libsodium    | ?             | NO       | `libsodium-dev`      | `libsodium`  | `libsodium-devel`  | `libsodium-devel`   | NO       | cryptography    |\n| libunwind    | any           | NO       | `libunwind8-dev`     | `libunwind`  | `libunwind-devel`  | `libunwind-devel`   | YES      | Stack traces    |\n| liblzma      | any           | NO       | `liblzma-dev`        | `xz`         | `liblzma-devel`    | `xz-devel`          | YES      | For libunwind   |\n| libreadline  | 6.3.0         | NO       | `libreadline6-dev`   | `readline`   | `readline-devel`   | `readline-devel`    | YES      | Input editing   |\n| ldns         | 1.6.17        | NO       | `libldns-dev`        | `ldns`       | `libldns-devel`    | `ldns-devel`        | YES      | SSL toolkit     |\n| expat        | 1.1           | NO       | `libexpat1-dev`      | `expat`      | `expat-devel`      | `expat-devel`       | YES      | XML parsing     |\n| GTest        | 1.5           | YES      | `libgtest-dev`[1]    | `gtest`      | `gtest-devel`      | `gtest-devel`       | YES      | Test suite      |\n| ccache       | any           | NO       | `ccache`             | `ccache`     | `ccache`           | `ccache`            | YES      | Compil. cache   |\n| Doxygen      | any           | NO       | `doxygen`            | `doxygen`    | `doxygen`          | `doxygen`           | YES      | Documentation   |\n| Graphviz     | any           | NO       | `graphviz`           | `graphviz`   | `graphviz`         | `graphviz`          | YES      | Documentation   |\n| lrelease     | ?             | NO       | `qttools5-dev-tools` | `qt5-tools`  | `qt5-tools`        | `qt5-linguist`      | YES      | Translations    |\n| libhidapi    | ?             | NO       | `libhidapi-dev`      | `hidapi`     | `hidapi-devel`     | `hidapi-devel`      | YES      | Hardware wallet |\n| libusb       | ?             | NO       | `libusb-1.0-0-dev`   | `libusb`     | `libusb-devel`     | `libusbx-devel`     | YES      | Hardware wallet |\n| libprotobuf  | ?             | NO       | `libprotobuf-dev`    | `protobuf`   | `protobuf-devel`   | `protobuf-devel`    | YES      | Hardware wallet |\n| protoc       | ?             | NO       | `protobuf-compiler`  | `protobuf`   | `protobuf`         | `protobuf-compiler` | YES      | Hardware wallet |\n| libudev      | ?             | NO       | `libudev-dev`        | `systemd`    | `eudev-libudev-devel` | `systemd-devel`  | YES      | Hardware wallet |\n\n[1] On Debian/Ubuntu `libgtest-dev` only includes sources and headers. You must\nbuild the library binary manually. This can be done with the following command `sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake . && sudo make`\nthen:\n\n* on Debian:\n  `sudo mv libg* /usr/lib/`\n* on Ubuntu:\n  `sudo mv lib/libg* /usr/lib/`\n\n[2] libnorm-dev is needed if your zmq library was built with libnorm, and not needed otherwise\n\nInstall all dependencies at once on Debian/Ubuntu:\n\n```\nsudo apt update && sudo apt install build-essential cmake pkg-config libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind8-dev liblzma-dev libreadline6-dev libldns-dev libexpat1-dev libpgm-dev qttools5-dev-tools libhidapi-dev libusb-1.0-0-dev libprotobuf-dev protobuf-compiler libudev-dev libboost-chrono-dev libboost-date-time-dev libboost-filesystem-dev libboost-locale-dev libboost-program-options-dev libboost-regex-dev libboost-serialization-dev libboost-system-dev libboost-thread-dev python3 ccache doxygen graphviz\n```\n\nInstall all dependencies at once on Arch:\n```\nsudo pacman -Syu --needed base-devel cmake boost openssl zeromq libpgm unbound libsodium libunwind xz readline ldns expat gtest python3 ccache doxygen graphviz qt5-tools hidapi libusb protobuf systemd\n```\n\nInstall all dependencies at once on Fedora:\n```\nsudo dnf install gcc gcc-c++ cmake pkgconf boost-devel openssl-devel zeromq-devel openpgm-devel unbound-devel libsodium-devel libunwind-devel xz-devel readline-devel ldns-devel expat-devel gtest-devel ccache doxygen graphviz qt5-linguist hidapi-devel libusbx-devel protobuf-devel protobuf-compiler systemd-devel\n```\n\nInstall all dependencies at once on openSUSE:\n\n```\nsudo zypper ref && sudo zypper in cppzmq-devel ldns-devel libboost_chrono-devel libboost_date_time-devel libboost_filesystem-devel libboost_locale-devel libboost_program_options-devel libboost_regex-devel libboost_serialization-devel libboost_system-devel libboost_thread-devel libexpat-devel libminiupnpc-devel libsodium-devel libunwind-devel unbound-devel cmake doxygen ccache fdupes gcc-c++ libevent-devel libopenssl-devel pkgconf-pkg-config readline-devel xz-devel libqt5-qttools-devel patterns-devel-C-C++-devel_C_C++\n```\n\nInstall all dependencies at once on macOS with the provided Brewfile:\n\n```\nbrew update && brew bundle --file=contrib/brew/Brewfile\n```\n\nFreeBSD 12.1 one-liner required to build dependencies:\n\n```\npkg install git gmake cmake pkgconf boost-libs libzmq4 libsodium unbound\n```\n\n### Cloning the repository\n\nClone recursively to pull-in needed submodule(s):\n\n```\ngit clone --recursive https://github.com/monero-project/monero\n```\n\nIf you already have a repo cloned, initialize and update:\n\n```\ncd monero && git submodule init && git submodule update\n```\n\n*Note*: If there are submodule differences between branches, you may need \nto use `git submodule sync && git submodule update` after changing branches\nto build successfully.\n\n### Build instructions\n\nMonero uses the CMake build system and a top-level [Makefile](Makefile) that\ninvokes cmake commands as needed.\n\n#### On Linux and macOS\n\n* Install the dependencies\n* Change to the root of the source code directory, change to the most recent release branch, and build:\n\n    ```bash\n    cd monero\n    git checkout release-v0.18\n    make\n    ```\n\n    *Optional*: If your machine has several cores and enough memory, enable\n    parallel build by running `make -j<number of threads>` instead of `make`. For\n    this to be worthwhile, the machine should have one core and about 2GB of RAM\n    available per thread.\n\n    *Note*: The instructions above will compile the most stable release of the\n    Monero software. If you would like to use and test the most recent software,\n    use `git checkout master`. The master branch may contain updates that are\n    both unstable and incompatible with release software, though testing is always\n    encouraged.\n\n* The resulting executables can be found in `build/release/bin`\n\n* Add `PATH=\"$PATH:$HOME/monero/build/release/bin\"` to `.profile`\n\n* Run Monero with `monerod --detach`\n\n* **Optional**: build and run the test suite to verify the binaries:\n\n    ```bash\n    make release-test\n    ```\n\n    *NOTE*: `core_tests` test may take a few hours to complete.\n\n* **Optional**: to build binaries suitable for debugging:\n\n    ```bash\n    make debug\n    ```\n\n* **Optional**: to build statically-linked binaries:\n\n    ```bash\n    make release-static\n    ```\n\nDependencies need to be built with -fPIC. Static libraries usually aren't, so you may have to build them yourself with -fPIC. Refer to their documentation for how to build them.\n\n* **Optional**: build documentation in `doc/html` (omit `HAVE_DOT=YES` if `graphviz` is not installed):\n\n    ```bash\n    HAVE_DOT=YES doxygen Doxyfile\n    ```\n\n* **Optional**: use ccache not to rebuild translation units, that haven't really changed. Monero's CMakeLists.txt file automatically handles it\n\n    ```bash\n    sudo apt install ccache\n    ```\n\n#### On the Raspberry Pi\n\nTested on a Raspberry Pi Zero with a clean install of minimal Raspbian Stretch (2017-09-07 or later) from https://www.raspberrypi.org/downloads/raspbian/. If you are using Raspian Jessie, [please see note in the following section](#note-for-raspbian-jessie-users).\n\n* `apt-get update && apt-get upgrade` to install all of the latest software\n\n* Install the dependencies for Monero from the 'Debian' column in the table above.\n\n* Increase the system swap size:\n\n    ```bash\n    sudo /etc/init.d/dphys-swapfile stop  \n    sudo nano /etc/dphys-swapfile  \n    CONF_SWAPSIZE=2048\n    sudo /etc/init.d/dphys-swapfile start\n    ```\n\n* If using an external hard disk without an external power supply, ensure it gets enough power to avoid hardware issues when syncing, by adding the line \"max_usb_current=1\" to /boot/config.txt\n\n* Clone Monero and checkout the most recent release version:\n\n    ```bash\n    git clone https://github.com/monero-project/monero.git\n    cd monero\n    git checkout v0.18.0.0\n    ```\n\n* Build:\n\n    ```bash\n    USE_SINGLE_BUILDDIR=1 make release\n    ```\n\n* Wait 4-6 hours\n\n* The resulting executables can be found in `build/release/bin`\n\n* Add `export PATH=\"$PATH:$HOME/monero/build/release/bin\"` to `$HOME/.profile`\n\n* Run `source $HOME/.profile`\n\n* Run Monero with `monerod --detach`\n\n* You may wish to reduce the size of the swap file after the build has finished, and delete the boost directory from your home directory\n\n#### *Note for Raspbian Jessie users:*\n\nIf you are using the older Raspbian Jessie image, compiling Monero is a bit more complicated. The version of Boost available in the Debian Jessie repositories is too old to use with Monero, and thus you must compile a newer version yourself. The following explains the extra steps and has been tested on a Raspberry Pi 2 with a clean install of minimal Raspbian Jessie.\n\n* As before, `apt-get update && apt-get upgrade` to install all of the latest software, and increase the system swap size\n\n    ```bash\n    sudo /etc/init.d/dphys-swapfile stop\n    sudo nano /etc/dphys-swapfile\n    CONF_SWAPSIZE=2048\n    sudo /etc/init.d/dphys-swapfile start\n    ```\n\n\n* Then, install the dependencies for Monero except for `libunwind` and `libboost-all-dev`\n\n* Install the latest version of boost (this may first require invoking `apt-get remove --purge libboost*-dev` to remove a previous version if you're not using a clean install):\n\n    ```bash\n    cd\n    wget https://sourceforge.net/projects/boost/files/boost/1.72.0/boost_1_72_0.tar.bz2\n    tar xvfo boost_1_72_0.tar.bz2\n    cd boost_1_72_0\n    ./bootstrap.sh\n    sudo ./b2\n    ```\n\n* Wait ~8 hours\n\n    ```bash    \n    sudo ./bjam cxxflags=-fPIC cflags=-fPIC -a install\n    ```\n\n* Wait ~4 hours\n\n* From here, follow the [general Raspberry Pi instructions](#on-the-raspberry-pi) from the \"Clone Monero and checkout most recent release version\" step.\n\n#### On Windows:\n\nBinaries for Windows are built on Windows using the MinGW toolchain within\n[MSYS2 environment](https://www.msys2.org). The MSYS2 environment emulates a\nPOSIX system. The toolchain runs within the environment and *cross-compiles*\nbinaries that can run outside of the environment as a regular Windows\napplication.\n\n**Preparing the build environment**\n\n* Download and install the [MSYS2 installer](https://www.msys2.org), either the 64-bit or the 32-bit package, depending on your system.\n* Open the MSYS shell via the `MSYS2 Shell` shortcut\n* Update packages using pacman:\n\n    ```bash\n    pacman -Syu\n    ```\n\n* Exit the MSYS shell using Alt+F4\n* Edit the properties for the `MSYS2 Shell` shortcut changing \"msys2_shell.bat\" to \"msys2_shell.cmd -mingw64\" for 64-bit builds or \"msys2_shell.cmd -mingw32\" for 32-bit builds\n* Restart MSYS shell via modified shortcut and update packages again using pacman:\n\n    ```bash\n    pacman -Syu\n    ```\n\n\n* Install dependencies:\n\n    To build for 64-bit Windows:\n\n    ```bash\n    pacman -S mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-hidapi mingw-w64-x86_64-unbound\n    ```\n\n    To build for 32-bit Windows:\n\n    ```bash\n    pacman -S mingw-w64-i686-toolchain make mingw-w64-i686-cmake mingw-w64-i686-boost mingw-w64-i686-openssl mingw-w64-i686-zeromq mingw-w64-i686-libsodium mingw-w64-i686-hidapi mingw-w64-i686-unbound\n    ```\n\n* Open the MingW shell via `MinGW-w64-Win64 Shell` shortcut on 64-bit Windows\n  or `MinGW-w64-Win64 Shell` shortcut on 32-bit Windows. Note that if you are\n  running 64-bit Windows, you will have both 64-bit and 32-bit MinGW shells.\n\n**Cloning**\n\n* To git clone, run:\n\n    ```bash\n    git clone --recursive https://github.com/monero-project/monero.git\n    ```\n\n**Building**\n\n* Change to the cloned directory, run:\n\n    ```bash\n    cd monero\n    ```\n\n* If you would like a specific [version/tag](https://github.com/monero-project/monero/tags), do a git checkout for that version. eg. 'v0.18.0.0'. If you don't care about the version and just want binaries from master, skip this step:\n\n    ```bash\n    git checkout v0.18.0.0\n    ```\n\n* If you are on a 64-bit system, run:\n\n    ```bash\n    make release-static-win64\n    ```\n\n* If you are on a 32-bit system, run:\n\n    ```bash\n    make release-static-win32\n    ```\n\n* The resulting executables can be found in `build/release/bin`\n\n* **Optional**: to build Windows binaries suitable for debugging on a 64-bit system, run:\n\n    ```bash\n    make debug-static-win64\n    ```\n\n* **Optional**: to build Windows binaries suitable for debugging on a 32-bit system, run:\n\n    ```bash\n    make debug-static-win32\n    ```\n\n* The resulting executables can be found in `build/debug/bin`\n\n### On FreeBSD:\n\nThe project can be built from scratch by following instructions for Linux above(but use `gmake` instead of `make`). \nIf you are running Monero in a jail, you need to add `sysvsem=\"new\"` to your jail configuration, otherwise lmdb will throw the error message: `Failed to open lmdb environment: Function not implemented`.\n\nMonero is also available as a port or package as `monero-cli`.\n\n### On OpenBSD:\n\nYou will need to add a few packages to your system. `pkg_add cmake gmake zeromq libiconv boost`.\n\nThe `doxygen` and `graphviz` packages are optional and require the xbase set.\nRunning the test suite also requires `py-requests` package.\n\nBuild monero: `env DEVELOPER_LOCAL_TOOLS=1 BOOST_ROOT=/usr/local gmake release-static`\n\nNote: you may encounter the following error when compiling the latest version of Monero as a normal user:\n\n```\nLLVM ERROR: out of memory\nc++: error: unable to execute command: Abort trap (core dumped)\n```\n\nThen you need to increase the data ulimit size to 2GB and try again: `ulimit -d 2000000`\n\n### On NetBSD:\n\nCheck that the dependencies are present: `pkg_info -c libexecinfo boost-headers boost-libs protobuf readline libusb1 zeromq git-base pkgconf gmake cmake | more`, and install any that are reported missing, using `pkg_add` or from your pkgsrc tree.  Readline is optional but worth having.\n\nThird-party dependencies are usually under `/usr/pkg/`, but if you have a custom setup, adjust the \"/usr/pkg\" (below) accordingly.\n\nClone the monero repository recursively and checkout the most recent release as described above. Then build monero: `gmake BOOST_ROOT=/usr/pkg LDFLAGS=\"-Wl,-R/usr/pkg/lib\" release`.  The resulting executables can be found in `build/NetBSD/[Release version]/Release/bin/`.\n\n### On Solaris:\n\nThe default Solaris linker can't be used, you have to install GNU ld, then run cmake manually with the path to your copy of GNU ld:\n\n```bash\nmkdir -p build/release\ncd build/release\ncmake -DCMAKE_LINKER=/path/to/ld -D CMAKE_BUILD_TYPE=Release ../..\ncd ../..\n```\n\nThen you can run make as usual.\n\n### Building portable statically linked binaries\n\nBy default, in either dynamically or statically linked builds, binaries target the specific host processor on which the build happens and are not portable to other processors. Portable binaries can be built using the following targets:\n\n* ```make release-static-linux-x86_64``` builds binaries on Linux on x86_64 portable across POSIX systems on x86_64 processors\n* ```make release-static-linux-i686``` builds binaries on Linux on x86_64 or i686 portable across POSIX systems on i686 processors\n* ```make release-static-linux-armv8``` builds binaries on Linux portable across POSIX systems on armv8 processors\n* ```make release-static-linux-armv7``` builds binaries on Linux portable across POSIX systems on armv7 processors\n* ```make release-static-linux-armv6``` builds binaries on Linux portable across POSIX systems on armv6 processors\n* ```make release-static-win64``` builds binaries on 64-bit Windows portable across 64-bit Windows systems\n* ```make release-static-win32``` builds binaries on 64-bit or 32-bit Windows portable across 32-bit Windows systems\n\n### Cross Compiling\n\nYou can also cross-compile static binaries on Linux for Windows and macOS with the `depends` system.\n\n* ```make depends target=x86_64-linux-gnu``` for 64-bit linux binaries.\n* ```make depends target=x86_64-w64-mingw32``` for 64-bit windows binaries.\n  * Requires: `python3 g++-mingw-w64-x86-64 wine1.6 bc`\n* ```make depends target=x86_64-apple-darwin11``` for macOS binaries.\n  * Requires: `cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev`\n* ```make depends target=i686-linux-gnu``` for 32-bit linux binaries.\n  * Requires: `g++-multilib bc`\n* ```make depends target=i686-w64-mingw32``` for 32-bit windows binaries.\n  * Requires: `python3 g++-mingw-w64-i686`\n* ```make depends target=arm-linux-gnueabihf``` for armv7 binaries.\n  * Requires: `g++-arm-linux-gnueabihf`\n* ```make depends target=aarch64-linux-gnu``` for armv8 binaries.\n  * Requires: `g++-aarch64-linux-gnu`\n* ```make depends target=riscv64-linux-gnu``` for RISC V 64 bit binaries.\n  * Requires: `g++-riscv64-linux-gnu`\n* ```make depends target=x86_64-unknown-freebsd``` for freebsd binaries.\n  * Requires: `clang-8`\n* ```make depends target=arm-linux-android``` for 32bit android binaries\n* ```make depends target=aarch64-linux-android``` for 64bit android binaries\n\n\nThe required packages are the names for each toolchain on apt. Depending on your distro, they may have different names. The `depends` system has been tested on Ubuntu 18.04 and 20.04.\n\nUsing `depends` might also be easier to compile Monero on Windows than using MSYS. Activate Windows Subsystem for Linux (WSL) with a distro (for example Ubuntu), install the apt build-essentials and follow the `depends` steps as depicted above.\n\nThe produced binaries still link libc dynamically. If the binary is compiled on a current distribution, it might not run on an older distribution with an older installation of libc. Passing `-DBACKCOMPAT=ON` to cmake will make sure that the binary will run on systems having at least libc version 2.17.\n\n## Installing Monero from a package\n\n**DISCLAIMER: These packages are not part of this repository or maintained by this project's contributors, and as such, do not go through the same review process to ensure their trustworthiness and security.**\n\nPackages are available for\n\n* Debian Buster\n\n    See the [instructions in the whonix/monero-gui repository](https://gitlab.com/whonix/monero-gui#how-to-install-monero-using-apt-get)\n\n* Debian Bullseye and Sid\n\n    ```bash\n    sudo apt install monero\n    ```\nMore info and versions in the [Debian package tracker](https://tracker.debian.org/pkg/monero).\n\n* Arch Linux [(via Community packages)](https://www.archlinux.org/packages/community/x86_64/monero/):\n\n    ```bash\n    sudo pacman -S monero\n    ```\n\n* Void Linux:\n\n    ```bash\n    xbps-install -S monero\n    ```\n\n* GuixSD\n\n    ```bash\n    guix package -i monero\n    ```\n\n* Gentoo [Monero overlay](https://github.com/gentoo-monero/gentoo-monero)\n\n    ```bash\n    emerge --noreplace eselect-repository\n    eselect repository enable monero\n    emaint sync -r monero\n    echo '*/*::monero ~amd64' >> /etc/portage/package.accept_keywords\n    emerge net-p2p/monero\n    ```\n\n* macOS [(homebrew)](https://brew.sh/)\n    ```bash\n    brew install monero\n    ```\n\n* Docker\n\n    ```bash\n    # Build using all available cores\n    docker build -t monero .\n\n    # or build using a specific number of cores (reduce RAM requirement)\n    docker build --build-arg NPROC=1 -t monero .\n\n    # either run in foreground\n    docker run -it -v /monero/chain:/home/monero/.bitmonero -v /monero/wallet:/wallet -p 18080:18080 monero\n\n    # or in background\n    docker run -it -d -v /monero/chain:/home/monero/.bitmonero -v /monero/wallet:/wallet -p 18080:18080 monero\n    ```\n\n* The build needs 3 GB space.\n* Wait one hour or more\n\nPackaging for your favorite distribution would be a welcome contribution!\n\n## Running monerod\n\nThe build places the binary in `bin/` sub-directory within the build directory\nfrom which cmake was invoked (repository root by default). To run in the\nforeground:\n\n```bash\n./bin/monerod\n```\n\nTo list all available options, run `./bin/monerod --help`.  Options can be\nspecified either on the command line or in a configuration file passed by the\n`--config-file` argument.  To specify an option in the configuration file, add\na line with the syntax `argumentname=value`, where `argumentname` is the name\nof the argument without the leading dashes, for example, `log-level=1`.\n\nTo run in background:\n\n```bash\n./bin/monerod --log-file monerod.log --detach\n```\n\nTo run as a systemd service, copy\n[monerod.service](utils/systemd/monerod.service) to `/etc/systemd/system/` and\n[monerod.conf](utils/conf/monerod.conf) to `/etc/`. The [example\nservice](utils/systemd/monerod.service) assumes that the user `monero` exists\nand its home is the data directory specified in the [example\nconfig](utils/conf/monerod.conf).\n\nIf you're on Mac, you may need to add the `--max-concurrency 1` option to\nmonero-wallet-cli, and possibly monerod, if you get crashes refreshing.\n\n## Internationalization\n\nSee [README.i18n.md](docs/README.i18n.md).\n\n## Using Tor\n\n> There is a new, still experimental, [integration with Tor](docs/ANONYMITY_NETWORKS.md). The\n> feature allows connecting over IPv4 and Tor simultaneously - IPv4 is used for\n> relaying blocks and relaying transactions received by peers whereas Tor is\n> used solely for relaying transactions received over local RPC. This provides\n> privacy and better protection against surrounding node (sybil) attacks.\n\nWhile Monero isn't made to integrate with Tor, it can be used wrapped with torsocks, by\nsetting the following configuration parameters and environment variables:\n\n* `--p2p-bind-ip 127.0.0.1` on the command line or `p2p-bind-ip=127.0.0.1` in\n  monerod.conf to disable listening for connections on external interfaces.\n* `--no-igd` on the command line or `no-igd=1` in monerod.conf to disable IGD\n  (UPnP port forwarding negotiation), which is pointless with Tor.\n* `DNS_PUBLIC=tcp` or `DNS_PUBLIC=tcp://x.x.x.x` where x.x.x.x is the IP of the\n  desired DNS server, for DNS requests to go over TCP, so that they are routed\n  through Tor. When IP is not specified, monerod uses the default list of\n  servers defined in [src/common/dns_utils.cpp](src/common/dns_utils.cpp).\n* `TORSOCKS_ALLOW_INBOUND=1` to tell torsocks to allow monerod to bind to interfaces\n   to accept connections from the wallet. On some Linux systems, torsocks\n   allows binding to localhost by default, so setting this variable is only\n   necessary to allow binding to local LAN/VPN interfaces to allow wallets to\n   connect from remote hosts. On other systems, it may be needed for local wallets\n   as well.\n* Do NOT pass `--detach` when running through torsocks with systemd, (see\n  [utils/systemd/monerod.service](utils/systemd/monerod.service) for details).\n* If you use the wallet with a Tor daemon via the loopback IP (eg, 127.0.0.1:9050),\n  then use `--untrusted-daemon` unless it is your own hidden service.\n\nExample command line to start monerod through Tor:\n\n```bash\nDNS_PUBLIC=tcp torsocks monerod --p2p-bind-ip 127.0.0.1 --no-igd\n```\n\nA helper script is in contrib/tor/monero-over-tor.sh. It assumes Tor is installed\nalready, and runs Tor and Monero with the right configuration.\n\n### Using Tor on Tails\n\nTAILS ships with a very restrictive set of firewall rules. Therefore, you need\nto add a rule to allow this connection too, in addition to telling torsocks to\nallow inbound connections. Full example:\n\n```bash\nsudo iptables -I OUTPUT 2 -p tcp -d 127.0.0.1 -m tcp --dport 18081 -j ACCEPT\nDNS_PUBLIC=tcp torsocks ./monerod --p2p-bind-ip 127.0.0.1 --no-igd --rpc-bind-ip 127.0.0.1 \\\n    --data-dir /home/amnesia/Persistent/your/directory/to/the/blockchain\n```\n\n## Pruning\n\nAs of April 2022, the full Monero blockchain file is about 130 GB. One can store a pruned blockchain, which is about 45 GB.\nA pruned blockchain can only serve part of the historical chain data to other peers, but is otherwise identical in\nfunctionality to the full blockchain.\nTo use a pruned blockchain, it is best to start the initial sync with `--prune-blockchain`. However, it is also possible\nto prune an existing blockchain using the `monero-blockchain-prune` tool or using the `--prune-blockchain` `monerod` option\nwith an existing chain. If an existing chain exists, pruning will temporarily require disk space to store both the full\nand pruned blockchains.\n\nFor more detailed information see the ['Pruning' entry in the Moneropedia](https://www.getmonero.org/resources/moneropedia/pruning.html)\n\n## Debugging\n\nThis section contains general instructions for debugging failed installs or problems encountered with Monero. First, ensure you are running the latest version built from the GitHub repo.\n\n### Obtaining stack traces and core dumps on Unix systems\n\nWe generally use the tool `gdb` (GNU debugger) to provide stack trace functionality, and `ulimit` to provide core dumps in builds which crash or segfault.\n\n* To use `gdb` in order to obtain a stack trace for a build that has stalled:\n\nRun the build.\n\nOnce it stalls, enter the following command:\n\n```bash\ngdb /path/to/monerod `pidof monerod`\n```\n\nType `thread apply all bt` within gdb in order to obtain the stack trace\n\n* If however the core dumps or segfaults:\n\nEnter `ulimit -c unlimited` on the command line to enable unlimited filesizes for core dumps\n\nEnter `echo core | sudo tee /proc/sys/kernel/core_pattern` to stop cores from being hijacked by other tools\n\nRun the build.\n\nWhen it terminates with an output along the lines of \"Segmentation fault (core dumped)\", there should be a core dump file in the same directory as monerod. It may be named just `core`, or `core.xxxx` with numbers appended.\n\nYou can now analyse this core dump with `gdb` as follows:\n\n```bash\ngdb /path/to/monerod /path/to/dumpfile`\n```\n\nPrint the stack trace with `bt`\n\n * If a program crashed and cores are managed by systemd, the following can also get a stack trace for that crash:\n\n```bash\ncoredumpctl -1 gdb\n```\n\n#### To run Monero within gdb:\n\nType `gdb /path/to/monerod`\n\nPass command-line options with `--args` followed by the relevant arguments\n\nType `run` to run monerod\n\n### Analysing memory corruption\n\nThere are two tools available:\n\n#### ASAN\n\nConfigure Monero with the -D SANITIZE=ON cmake flag, eg:\n\n```bash\ncd build/debug && cmake -D SANITIZE=ON -D CMAKE_BUILD_TYPE=Debug ../..\n```\n\nYou can then run the monero tools normally. Performance will typically halve.\n\n#### valgrind\n\nInstall valgrind and run as `valgrind /path/to/monerod`. It will be very slow.\n\n### LMDB\n\nInstructions for debugging suspected blockchain corruption as per @HYC\n\nThere is an `mdb_stat` command in the LMDB source that can print statistics about the database but it's not routinely built. This can be built with the following command:\n\n```bash\ncd ~/monero/external/db_drivers/liblmdb && make\n```\n\nThe output of `mdb_stat -ea <path to blockchain dir>` will indicate inconsistencies in the blocks, block_heights and block_info table.\n\nThe output of `mdb_dump -s blocks <path to blockchain dir>` and `mdb_dump -s block_info <path to blockchain dir>` is useful for indicating whether blocks and block_info contain the same keys.\n\nThese records are dumped as hex data, where the first line is the key and the second line is the data.\n\n# Known Issues\n\n## Protocols\n\n### Socket-based\n\nBecause of the nature of the socket-based protocols that drive monero, certain protocol weaknesses are somewhat unavoidable at this time. While these weaknesses can theoretically be fully mitigated, the effort required (the means) may not justify the ends. As such, please consider taking the following precautions if you are a monero node operator:\n\n- Run `monerod` on a \"secured\" machine. If operational security is not your forte, at a very minimum, have a dedicated a computer running `monerod` and **do not** browse the web, use email clients, or use any other potentially harmful apps on your `monerod` machine. **Do not click links or load URL/MUA content on the same machine**. Doing so may potentially exploit weaknesses in commands which accept \"localhost\" and \"127.0.0.1\".\n- If you plan on hosting a public \"remote\" node, start `monerod` with `--restricted-rpc`. This is a must.\n\n### Blockchain-based\n\nCertain blockchain \"features\" can be considered \"bugs\" if misused correctly. Consequently, please consider the following:\n\n- When receiving monero, be aware that it may be locked for an arbitrary time if the sender elected to, preventing you from spending that monero until the lock time expires. You may want to hold off acting upon such a transaction until the unlock time lapses. To get a sense of that time, you can consider the remaining blocktime until unlock as seen in the `show_transfers` command.\n"
 },
 {
  "repo": "Synss/python-mbedtls",
  "language": "Cython",
  "readme_contents": ".. vim:tw=72\n\n=======================================================\nCryptographic library for Python with Mbed TLS back end\n=======================================================\n\n.. image::\n   https://github.com/Synss/python-mbedtls/actions/workflows/main.yml/badge.svg?branch=master\n   :target: https://github.com/Synss/python-mbedtls/actions/\n\n.. image::\n   https://coveralls.io/repos/github/Synss/python-mbedtls/badge.svg?branch=master\n   :target: https://coveralls.io/github/Synss/python-mbedtls?branch=master\n\n\n`python-mbedtls`_ is a free cryptographic library for Python that uses\n`mbed TLS`_ for back end.\n\n   mbed TLS (formerly known as PolarSSL) makes it trivially easy for\n   developers to include cryptographic and SSL/TLS capabilities in their\n   (embedded) products, facilitating this functionality with a minimal\n   coding footprint.\n\n*python-mbedtls* API follows the recommendations from:\n\n* `PEP 272`_ -- API for Block Encryption Algorithms v1.0\n* `PEP 452`_ -- API for Cryptographic Hash Functions v2.0\n* `PEP 506`_ -- Adding a Secret Module to the Standard Library\n* `PEP 543`_ -- A Unified TLS API for Python\n\nand therefore plays well with the `cryptographic services`_ from the\nPython standard library and many other cryptography libraries as well.\n\n.. _python-mbedtls: https://synss.github.io/python-mbedtls\n.. _mbed TLS: https://tls.mbed.org\n.. _PEP 272: https://www.python.org/dev/peps/pep-0272/\n.. _PEP 452: https://www.python.org/dev/peps/pep-0452/\n.. _PEP 506: https://www.python.org/dev/peps/pep-0506/\n.. _PEP 543: https://www.python.org/dev/peps/pep-0543/\n.. _cryptographic services: https://docs.python.org/3/library/crypto.html\n.. _PyCrypto: https://www.dlitz.net/software/pycrypto/\n.. _hashlib: https://docs.python.org/3.6/library/hashlib.html\n.. _hmac: https://docs.python.org/3.6/library/hmac.html\n\n\nLicense\n=======\n\n*python-mbedtls* is licensed under the MIT License (see LICENSE.txt).\nThis enables the use of *python-mbedtls* in both open source and closed\nsource projects.  The MIT License is compatible with both GPL and Apache\n2.0 license under which mbed TLS is distributed.\n\n\nAPI documentation\n=================\n\nhttps://synss.github.io/python-mbedtls/\n\n\nInstallation\n============\n\nThe bindings are tested with mbedTLS 2.28.1 for Python 3.7,\n3.8, 3.9, and 3.10 on Linux, macOS, and Windows.\n\n`manylinux`_ wheels are available for 64-bit Linux systems.  Install\nwith ``pip install python-mbedtls``.\n\n.. _manylinux: https://www.python.org/dev/peps/pep-0513/\n\n\nUsage and examples\n==================\n\nNow, let us see examples using the various parts of the library.\n\n\nCheck which version of mbed TLS is being used by python-mbedtls\n---------------------------------------------------------------\n\nThe *mbedtls.version* module shows the run-time version\ninformation to mbed TLS.\n\n>>> from mbedtls import version\n>>> _ = version.version  # \"mbed TLS 2.28.1\"\n>>> _ = version.version_info  # (2, 28, 1)\n\n\nMessage digest\n--------------\n\nThe *mbedtls.hashlib* module supports MD2, MD4, MD5, SHA-1, SHA-2\n(in 224, 256, 384, and 512-bits), and RIPEMD-160 secure hashes\nand message digests.  Note that MD2 and MD4 are not included\nby default and are only present if they are compiled in mbedtls.\n\nHere are the examples from (standard) *hashlib* ported\nto *python-mbedtls*:\n\n>>> from mbedtls import hashlib\n>>> m = hashlib.md5()\n>>> m.update(b\"Nobody inspects\")\n>>> m.update(b\" the spammish repetition\")\n>>> m.digest()\nb'\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9'\n>>> m.digest_size\n16\n>>> m.block_size\n64\n\nMore condensed:\n\n>>> hashlib.sha224(b\"Nobody inspects the spammish repetition\").hexdigest()\n'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'\n\nUsing ``new()``:\n\n>>> h = hashlib.new('ripemd160')\n>>> h.update(b\"Nobody inspects the spammish repetition\")\n>>> h.hexdigest()\n'cc4a5ce1b3df48aec5d22d1f16b894a0b894eccc'\n\n\nHMAC algorithm\n--------------\n\nThe *mbedtls.hmac* module computes HMAC.\n\nExample:\n\n>>> from mbedtls import hmac\n>>> m = hmac.new(b\"This is my secret key\", digestmod=\"md5\")\n>>> m.update(b\"Nobody inspects\")\n>>> m.update(b\" the spammish repetition\")\n>>> m.digest()\nb'\\x9d-/rj\\\\\\x98\\x80\\xb1rG\\x87\\x0f\\xe9\\xe4\\xeb'\n\nWarning:\n\nThe message is cleared after calculation of the digest.  Only call\n``mbedtls.hmac.Hmac.digest()`` or ``mbedtls.hmac.Hmac.hexdigest()``\nonce per message.\n\n\nHMAC-based key derivation function (HKDF)\n-----------------------------------------\n\nThe *mbedtls.hkdf* module exposes extract-and-expand key derivation\nfunctions.  The main function is ``hkdf()`` but ``extract()`` and\n``expand()`` may be used as well.\n\nExample:\n\n>>> from mbedtls import hkdf\n>>> hkdf.hkdf(\n...     b\"my secret key\",\n...     length=42,\n...     info=b\"my cool app\",\n...     salt=b\"and pepper\",\n...     digestmod=hmac.sha256\n... )\nb'v,\\xef\\x90\\xccU\\x1d\\x1b\\xd7\\\\a\\xaf\\x92\\xac\\n\\x90\\xf9q\\xf4)\\xcd\"\\xf7\\x1a\\x94p\\x03.\\xa8e\\x1e\\xfb\\x92\\xe8l\\x0cc\\xf8e\\rvj'\n\nwhere *info*, *salt*, and *digestmod* are optional, although providing\n(at least) *info* is highly recommended.\n\n\nSymmetric cipher\n----------------\n\nThe *mbedtls.cipher* module provides symmetric encryption.  The API\nfollows the recommendations from PEP 272 so that it can be used as a\ndrop-in replacement to other libraries.\n\n*python-mbedtls* provides the following algorithms:\n\n- AES encryption/decryption (128, 192, and 256 bits) in ECB, CBC, CFB128,\n  CTR, OFB, or XTS mode;\n- AES AEAD (128, 192, and 256 bits) in GCM or CCM mode;\n- ARC4 encryption/decryption;\n- ARIA encryption/decryption (128, 192, and 256 bits) in ECB, CBC,\n  CTR, or GCM modes;\n- Blowfish encryption/decryption in ECB, CBC, CFB64, or CTR mode;\n- Camellia encryption/decryption (128, 192, and 256 bits) in ECB, CBC,\n  CFB128, CTR, or GCM mode;\n- DES, DES3, and double DES3 encryption/decryption in ECB or CBC mode;\n- CHACHA20 and CHACHA20/POLY1305 encryption/decryption.\n\nExample:\n\n>>> from mbedtls import cipher\n>>> c = cipher.AES.new(b\"My 16-bytes key.\", cipher.MODE_CBC, b\"CBC needs an IV.\")\n>>> enc = c.encrypt(b\"This is a super-secret message!!\")\n>>> enc\nb\"*`k6\\x98\\x97=[\\xdf\\x7f\\x88\\x96\\xf5\\t\\x19J\\xf62h\\xf4n\\xca\\xe8\\xfe\\xf5\\xd7X'\\xb1\\x8c\\xc9\\x85\"\n>>> c.decrypt(enc)\nb'This is a super-secret message!!'\n\n\nRSA public key\n--------------\n\nThe *mbedtls.pk* module provides the RSA cryptosystem.  This includes:\n\n- Public-private key generation and key import/export in PEM and DER\n  formats;\n- asymmetric encryption and decryption;\n- message signature and verification.\n\nKey generation, the default size is 2048 bits:\n\n>>> from mbedtls import pk\n>>> rsa = pk.RSA()\n>>> prv = rsa.generate()\n>>> rsa.key_size\n256\n\nMessage encryption and decryption:\n\n>>> enc = rsa.encrypt(b\"secret message\")\n>>> rsa.decrypt(enc)\nb'secret message'\n\nMessage signature and verification:\n\n>>> sig = rsa.sign(b\"Please sign here.\")\n>>> rsa.verify(b\"Please sign here.\", sig)\nTrue\n>>> rsa.verify(b\"Sorry, wrong message.\", sig)\nFalse\n>>> pub = rsa.export_public_key(format=\"DER\")\n>>> other = pk.RSA.from_buffer(pub)\n>>> other.verify(b\"Please sign here.\", sig)\nTrue\n\n\nStatic and ephemeral elliptic curve Diffie-Hellman\n--------------------------------------------------\n\nThe *mbedtls.pk* module provides the ECC cryptosystem.  This includes:\n\n- Public-private key generation and key import/export in the PEM and DER\n  formats;\n- asymmetric encrypt and decryption;\n- message signature and verification;\n- ephemeral ECDH key exchange.\n\n``get_supported_curves()`` returns the list of supported curves.\n\nThe API of the ECC class is the same as the API of the RSA class\nbut ciphering (``encrypt()`` and ``decrypt()`` is not supported by\nMbed TLS).\n\nMessage signature and verification using elliptic a curve digital\nsignature algorithm (ECDSA):\n\n>>> from mbedtls import pk\n>>> ecdsa = pk.ECC()\n>>> prv = ecdsa.generate()\n>>> sig = ecdsa.sign(b\"Please sign here.\")\n>>> ecdsa.verify(b\"Please sign here.\", sig)\nTrue\n>>> ecdsa.verify(b\"Sorry, wrong message.\", sig)\nFalse\n>>> pub = ecdsa.export_public_key(format=\"DER\")\n>>> other = pk.ECC.from_buffer(pub)\n>>> other.verify(b\"Please sign here.\", sig)\nTrue\n\nThe classes ``ECDHServer`` and ``ECDHClient`` may be used for ephemeral\nECDH.  The key exchange is as follows:\n\n>>> ecdh_key = pk.ECC()\n>>> ecdh_key.generate()\n>>> ecdh_srv = pk.ECDHServer(ecdh_key)\n>>> ecdh_cli = pk.ECDHClient(ecdh_key)\n\nThe server generates the ServerKeyExchange encrypted payload and\npasses it to the client:\n\n>>> ske = ecdh_srv.generate()\n>>> ecdh_cli.import_SKE(ske)\n\nthen the client generates the ClientKeyExchange encrypted payload and\npasses it back to the server:\n\n>>> cke = ecdh_cli.generate()\n>>> ecdh_srv.import_CKE(cke)\n\nNow, client and server may generate their shared secret:\n\n>>> secret = ecdh_srv.generate_secret()\n>>> ecdh_cli.generate_secret() == secret\nTrue\n>>> ecdh_srv.shared_secret == ecdh_cli.shared_secret\nTrue\n\n\nDiffie-Hellman-Merkle key exchange\n----------------------------------\n\nThe classes ``DHServer`` and ``DHClient`` may be used for DH Key\nexchange.  The classes have the same API as ``ECDHServer``\nand ``ECDHClient``, respectively.\n\nThe key exchange is as follow:\n\n>>> from mbedtls.mpi import MPI\n>>> from mbedtls import pk\n>>> dh_srv = pk.DHServer(MPI.prime(128), MPI.prime(96))\n>>> dh_cli = pk.DHClient(MPI.prime(128), MPI.prime(96))\n\nThe 128-bytes prime and the 96-bytes prime are the modulus ``P``\nand the generator ``G``.\n\nThe server generates the ServerKeyExchange payload:\n\n>>> ske = dh_srv.generate()\n>>> dh_cli.import_SKE(ske)\n\nThe payload ends with ``G^X mod P`` where ``X`` is the secret value of\nthe server.\n\n>>> cke = dh_cli.generate()\n>>> dh_srv.import_CKE(cke)\n\n``cke`` is ``G^Y mod P`` (with ``Y`` the secret value from the client)\nreturned as its representation in bytes so that it can be readily\ntransported over the network.\n\nAs in ECDH, client and server may now generate their shared secret:\n\n>>> secret = dh_srv.generate_secret()\n>>> dh_cli.generate_secret() == secret\nTrue\n>>> dh_srv.shared_secret == dh_cli.shared_secret\nTrue\n\n\nX.509 certificate writing and parsing\n-------------------------------------\n\nThe *mbedtls.x509* module can be used to parse X.509 certificates\nor create and verify a certificate chain.\n\nHere, the trusted root is a self-signed CA certificate\n``ca0_crt`` signed by ``ca0_key``.\n\n>>> import datetime as dt\n>>>\n>>> from mbedtls import hashlib\n>>> from mbedtls import pk\n>>> from mbedtls import x509\n>>>\n>>> now = dt.datetime.utcnow()\n>>> ca0_key = pk.RSA()\n>>> _ = ca0_key.generate()\n>>> ca0_csr = x509.CSR.new(ca0_key, \"CN=Trusted CA\", hashlib.sha256())\n>>> ca0_crt = x509.CRT.selfsign(\n...     ca0_csr, ca0_key,\n...     not_before=now, not_after=now + dt.timedelta(days=90),\n...     serial_number=0x123456,\n...     basic_constraints=x509.BasicConstraints(True, 1))\n...\n\nAn intermediate then issues a Certificate Singing Request (CSR) that the\nroot CA signs:\n\n>>> ca1_key = pk.ECC()\n>>> _ = ca1_key.generate()\n>>> ca1_csr = x509.CSR.new(ca1_key, \"CN=Intermediate CA\", hashlib.sha256())\n>>>\n>>> ca1_crt = ca0_crt.sign(\n...     ca1_csr, ca0_key, now, now + dt.timedelta(days=90), 0x123456, \n...     basic_constraints=x509.BasicConstraints(ca=True, max_path_length=3))\n...\n\nAnd finally, the intermediate CA signs a certificate for the\nEnd Entity on the basis of a new CSR:\n\n>>> ee0_key = pk.ECC()\n>>> _ = ee0_key.generate()\n>>> ee0_csr = x509.CSR.new(ee0_key, \"CN=End Entity\", hashlib.sha256())\n>>>\n>>> ee0_crt = ca1_crt.sign(\n...     ee0_csr, ca1_key, now, now + dt.timedelta(days=90), 0x987654)\n...\n\nThe emitting certificate can be used to verify the next certificate in\nthe chain:\n\n>>> ca1_crt.verify(ee0_crt)\nTrue\n>>> ca0_crt.verify(ca1_crt)\nTrue\n\nNote, however, that this verification is only one step in a private key\ninfrastructure and does not take CRLs, path length, etc. into account.\n\n\nTLS client and server\n---------------------\n\nThe *mbedtls.tls* module provides TLS clients and servers.  The API\nfollows the recommendations of `PEP 543`_.  Note, however, that the\nPython standard SSL library does not follow the PEP so that this\nlibrary may not be a drop-in replacement.\n\n.. _PEP 543: https://www.python.org/dev/peps/pep-0543/\n\nSee examples in the `programs/` directory of the repository\nand `tests/test_tls.py`.\n\n\nDTLS client and server\n----------------------\n\nThe *mbedtls.tls* module further provides DTLS (encrypted UDP\ntraffic).  Client and server must be bound and connected for\nthe handshake so that DTLS should use ``recv()`` and ``send()``\nas well.\n\nSee examples in the `programs/` directory of the repository\nand `tests/test_tls.py`.\n"
 },
 {
  "repo": "bitpay/nodejs-bitpay-client",
  "language": "TypeScript",
  "readme_contents": "<img src=\"https://bitpay.com/_nuxt/img/bitpay-logo-blue.1c0494b.svg\" width=\"150\">\n\n# BitPay NodeJS client\n[![License](https://img.shields.io/github/license/bitpay/nodejs-bitpay-client.svg?style=for-the-badge&logo=github)](https://raw.githubusercontent.com/bitpay/nodejs-bitpay-client/master/LICENSE)\n\n[![npm version](https://img.shields.io/npm/v/bitpay-sdk)](https://www.npmjs.com/package/bitpay-sdk)\n\nFull implementation of the BitPay Payment Gateway. This library implements BitPay's [Cryptographically Secure RESTful API](https://bitpay.com/api).\n\n## Getting Started\n\nTo get up and running with our NodeJS library quickly, follow [The GUIDE](https://github.com/bitpay/nodejs-bitpay-client/blob/master/GUIDE.md)\n\n## Support\n\n* https://github.com/bitpay/nodejs-bitpay-client/issues\n* https://support.bitpay.com\n\n## Contribute\n\nTo contribute to this project, please fork and submit a pull request.\n\n## Supported Environments\n\nThe BitPay NodeJS client supports Node.js 12 and higher.\n\n## License\n\nMIT License\n\nCopyright (c) 2019 BitPay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
 },
 {
  "repo": "AgentGuo/HUST_course_design_of_cryptography",
  "language": "C++",
  "readme_contents": "# HUST_2018\u7ea7\u5bc6\u7801\u5b66\u8bfe\u7a0b\u8bbe\u8ba1\n\n## 1.SPN\n\n\u5c31\u662f\u5982\u56fe\u6240\u793a\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff01\n\n![image](https://github.com/AgentGuo/HUST_course_design_of_cryptography/blob/master/image/1.png)\n\n#### 1.1 \u521d\u6b21\u5199SPN\n\n[\u521d\u4ee3SPN](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/SPN)\n\n\u4e3a\u4e86\u65b9\u4fbf\u7684\u4f7f\u7528S\u76d2P\u76d2\u7684\u90a3\u4e9b\u8fd0\u7b97\uff08\u76f4\u63a5\u4f7f\u7528\u6570\u7ec4\uff0c \u800c\u4e0d\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff09\uff0c\u6240\u4ee5\u60f3\u8d77\u4e86C\u8bed\u8a00\u8bfe\u4e0a\u5b66\u7684**\u5b57\u6bb5\u7ed3\u6784\u4f53\u548c\u8054\u5408**\uff0cbut\u7a0b\u5e8f\u8dd1\u592a\u6162\u4e86~\uff08\u6700\u540e\u4e00\u4e2a\u6570\u636e\u5927\u6982\u6709 $4 \\times 10^6$ \u4e2a\uff09\n\n#### 1.2 \u8f93\u5165\u52a0\u901f\n\n\u7b97\u6cd5\u8003\u8bd5\u91cc\u5e38\u7528\u7684\u4f7f\u7528`getchar()`\u8fdb\u884c\u8f93\u5165\u52a0\u901f\uff08\u4e5f\u53ef\u4ee5\u8bd5\u8bd5`fread()`\u54df\uff09\uff0c\u7ec8\u4e8e\u662f\u5feb\u8d77\u6765\u4e86\uff08\u5929\u7ffc3G\u592a\u5feb\u5566~\uff09\u3002\n\n#### 1.3 \u518d\u6b21\u52a0\u901f\n\n[\u4e8c\u4ee3SPN](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/SPN_v2)\n\n\u901f\u5ea6\u8dd1\u7684\u8fd8\u662f\u592a\u6162\u4e86\uff0c\u5f71\u54cd\u540e\u9762\u7ebf\u6027\u5206\u6790\u7684\u6548\u7387\uff0c\u6240\u4ee5\u53c8\u56de\u6765\u91cd\u5199\u4e00\u6ce2~\n\n\u542c\u5230\u5927\u4f6c\u8bf4\u6253\u8868\u8dd1\u5f97\u98de\u5feb\uff0c\u90a3\u6211\u5c31\u4e0d\u5ba2\u6c14\u54af\uff0c\u9042\u5373\u6253\u4e86\u4e00\u4e2a65536\u5927\u5c0f\u7684\u8868\uff0c\u679c\u7136\u8d77\u98de~~~\uff08\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c\u4ee3\u7801\u4e5f\u98d9\u5347\u81f34000+\u884c\uff0c\u90fd\u662f\u5c0f\u95ee\u9898~\uff09\n\n## 2.\u7ebf\u6027\u5206\u6790\n\n#### 2.1 \u627e\u94fe\uff01\uff01\uff01\n\n\u8fd9\u4e2a\u6211\u771f\u8981\u5410\u8840\u4e86~~\n\n\u600e\u4e48\u627e\u90fd\u4e0d\u884c~~~~\n\n\u66b4\u529b\u7a77\u4e3e\u4e86\u5927\u534a\u5929\uff088\u8f93\u51658\u8f93\u51fa\uff09\uff0c\u5931\u8d25~~~~\n\n\u8f89\u4f6cNB\uff0c\u8fd9\u6761\u94fe\u771f\u7684\u731b\uff01\u8f89\u4f6cyyds\uff08\u8fd9\u94fe12\u4f4d\u8f93\u51fa\uff0c\u602a\u4e0d\u5f97\u6211\u7a77\u4e3e\u534a\u5929\u90fd\u7a77\u4e3e\u4e0d\u5230 T_T \uff09\n\n![image](https://github.com/AgentGuo/HUST_course_design_of_cryptography/blob/master/image/5.png)\n\n\u8fd9\u6761\u94fe\u662f12\u4f4d\u8f93\u51fa\u7684\u8bdd\u90a3\u5c31\u8981\u5148\u7b97\u51fa\u5176\u4ed68\u4f4d\u518d\u6765\u7b97\u8fd9\u6761\u94fe~\n\n#### 2.2 \u5199\u4ee3\u7801\n\n[\u4e00\u4ee3\u7ebf\u6027\u5206\u6790](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/linearAnalysis)\n\n[\u4e8c\u4ee3\u7ebf\u6027\u5206\u6790](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/linearAnalysis_v2)\n\n\u7136\u5e76\u5375 T_T  \u8d85\u65f6\uff01\uff01\uff01\uff01\u9042\u5373\u5f53\u573a\u91cd\u5199SPN T_T  \uff08\u6b64\u65f6\u5fc3\u6001\u7206\u70b8\uff09\n\n\u91cd\u5199\u8d77\u98de\uff0c\u8dd1\u5f97\u98de\u5feb\uff0c\u829c\u6e56~~~\n\n## 3.\u5dee\u5206\u5206\u6790\n\n[\u5dee\u5206\u5206\u6790](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/differentialAnalysis)\n\n\u901a\u8fc7\u4e86\u7ebf\u6027\u5206\u6790\uff0c\u5dee\u5206\u5206\u6790\u5c31\u662f\u4e2add\uff08\u53e3\u5934\u867d\u7136\u8fd9\u4e48\u8bf4\uff0c \u4f46\u662f\u94fe\u4e5f\u662f\u627e\u4e86\u6211\u534a\u5929 T_T\uff09\n\n#### 3.1 \u627e\u6761\u94fe\uff01\n\n\u8fd9\u4e2a\u7531\u4e8e\u6d4b\u8bd5\u6837\u4f8b\u7684\u539f\u56e0\uff0c\u5c31\u7b97\u627e\u5230\u94fe\u8d28\u91cf\u4e00\u822c\u4e5f\u80fd\u8fc7~~\uff0c \u4eb2\u6d4b\u4e0b\u9762\u8fd9\u6761\u94fe\u80fd\u8fc7~\n\n![image](https://github.com/AgentGuo/HUST_course_design_of_cryptography/blob/master/image/6.png)\n\n#### 3.1 \u5199\u4ee3\u7801\n\n\u6ca1\u5565\uff0c\u5728\u7ebf\u6027\u5206\u6790\u7684\u57fa\u7840\u4e0a\u968f\u4fbf\u6539\u6539hhh\n\n## 4.SPN\u52a0\u5f3a\n\n[SPN\u52a0\u5f3a](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/SPN_enhance)\n\n#### 4.1 \u521d\u6b21\u52a0\u5f3a\n\n\u76f4\u63a5\u4f7f\u7528\u4e4b\u524d\u7684SPN\uff0c\u7136\u540e\u5957\u7528CBC\u6a21\u5f0f\uff08\u60f3\u5077\u61d2\uff09\uff0c\u7136\u800c\u3002\u3002\u3002\u3002\u8fc7\u4e0d\u4e86\uff08\u8fc7\u4e0d\u4e86\u968f\u673a\u6027\u68c0\u6d4b T_T \uff0c CTR\u6a21\u5f0f\u4e5f\u4e0d\u884c T_T \uff09\n\n#### 4.2 \u518d\u6b21\u52a0\u5f3a\n\n\u628a\u5bc6\u94a5\u52a0\u957f\u5230\u4e86128\u4f4d\uff0cSPN\u52a0\u5bc6\u957f\u5ea6\u52a0\u957f\u5230\u4e8664\u4f4d\uff08\u539f\u59cbSPN\u7684\u56db\u500d\uff09\uff0c\u7b80\u5355\u7684\u6362\u4e86\u4e00\u4e2aP\u76d2\n\n\u679c\u7136\u6548\u679c\u7206\u70b8\uff0cCBC\u6a21\u5f0f\u778e\u6539\u521d\u59cb\u5411\u91cf\u5373\u53ef~~\uff0c\u829c\u6e56\n\n## 5.RSA\u53c2\u6570\u8ba1\u7b97\n\n[RSA\u53c2\u6570\u8ba1\u7b97](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/RSAParameterCalculation) \u8fd9\u4e2a\u9879\u76ee\u662f\u518dubuntu\u4f7f\u7528vscode\u5b8c\u6210\u7684\uff08\u7531\u4e8ewindows\u534a\u5929\u90fd\u6ca1\u6709\u88c5\u597dgmp\u5e93\uff09\n\n#### 5.1 \u7d20\u6027\u68c0\u6d4b(Miller-Rabin\u7b97\u6cd5)\n\n\u5bc6\u7801\u5b66\u5168\u5fd8\u5149\u5149\u4e86\u554a T_T , \u770b\u4f1a\u89c6\u9891\u590d\u4e60\u4e00\u4e0b\uff5e\n\n\u603b\u7b97\u662f\u641e\u61c2\u4e86\uff0c\u51b2\u51b2\u51b2\uff01\n\n#### 5.2 gcd\u5b9e\u73b0\n\n\u5f3a\u884c\u624b\u52a8\u5b9e\u73b0\u4e00\u6ce2\uff0c\u5176\u5b9e\u4e5f\u4e0d\u96be\uff0c\u8f97\u8f6c\u76f8\u9664\u6cd5\uff0c\u4e09\u4e0b\u4e94\u9664\u4e8c\uff0c\u641e\u5b9a\uff5e\n\n#### 5.3 \u6c42\u9006\n\n\u611f\u89c9\u662f\u6838\u5fc3\u8fc7\u7a0b\u4e86\uff0c\u52a0\u6cb9\uff01\n\n\u5199\u662f\u5199\u597d\u4e86\uff0c\u4f46\u662f\u5bf9\u4e8e\u9519\u8bef\u60c5\u51b5\u8fd8\u6709\u7684\u6ca1\u6709\u8003\u8651\u5230\uff0cp-1,q-1\u8fc7\u4e8e\u5e73\u6ed1\uff1f\u8fd9\u662f\u5565\uff1f\uff1f\uff08\u5f00\u59cb\u7ffb\u8d44\u6599\uff01\uff01\uff09\n\n#### 5.4 \u5149\u6ed1\u7684\u5224\u65ad\n\np-1\u548cq-1\u8fc7\u4e8e\u5149\u6ed1\u5c31\u662fgcd(p-1, q-1)\u4e0d\u662f\u592a\u5927\uff1f\n\n\u5b66\u5230\u4e86\u5b66\u5230\u4e86\uff0c\u4e5f\u662f\u7ec8\u4e8e\u628a\u8fd9\u4e2a\u5199\u597d\u4e86\uff5e\u829c\u6e56\uff5e\uff5e\n\n## 6.\u6a21\u91cd\u590d\u5e73\u65b9&\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\n\n[\u6a21\u91cd\u590d\u5e73\u65b9&\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/modularRepeatedSquare)\n\n\u4ece\u5ba4\u53cb\u90a3\u91cc\u641e\u6765\u4e86\u4e00\u4e2avs\u5de5\u7a0b\u6587\u4ef6\uff0c\u7ec8\u4e8e\u80fd\u5728win\u4e0b\u8dd1gmp\u5e93\u4e86\uff0c\u8212\u670d\u4e86\u8212\u670d\u4e86(^_^)\n\n\u4e3b\u8981\u5c31\u662f\u4e00\u4e2a\u8ba1\u7b97`a^e(mod N)`\u7684\u8fc7\u7a0b\uff0c\u4f46\u662f\u662f\u7528\u4e8eRSA\u52a0\u5bc6\u8fc7\u7a0b\uff0c\u7ed9\u51fa\u53c2\u6570`e, m, p, q`\uff08\u5206\u522b\u4e3a\u52a0\u5bc6\u5bc6\u94a5\uff0c\u660e\u6587\uff0c\u53c2\u6570p\uff0cq\uff09\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u914d\u5408\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u8fdb\u884c\u8ba1\u7b97~\n\n\u829c\u6e56\uff0c\u8fd9\u7b97\u662f\u5199\u7684\u6700\u8f7b\u677e\u7684\u4e00\u4e2a\u8bfe\u8bbe\u4e86\uff0c\u4e00\u904d\u8fc7\uff0c\u8d77\u98de~~ (^_^)\n\n## 7.\u7efc\u54085,6\uff0c\u5b8c\u6574\u5b9e\u73b0RSA\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u8fc7\u7a0b\n\n[\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/RSAEncryptionAndDecryption)\n\n\u4f46\u662f\u8fd9\u91cc\u7684\u89e3\u5bc6\u8fc7\u7a0b\u4e0d\u662f\u771f\u6b63\u7684\u89e3\u5bc6\u8fc7\u7a0b\uff0c\u8fd9\u91cc\u662f\u4f7f\u7528p\uff0cq\u5e76\u8fd0\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u89e3\u5bc6\u7684\uff08\u5b9e\u9645\u60c5\u51b5\u4e0d\u4f1a\u8fd9\u4e48\u89e3\u5bc6~\uff09\n\n\u554a\u554a\u554a\uff0c\u8fd8\u4ee5\u4e3a\u7efc\u54085,6\u80fd\u591f\u8f7b\u677e\u79d2\u6740T_T\uff0c\u8dd1\u5f97\u4e0d\u591f\u5feb\uff0c\u5509~\n\n\u65f6\u9694\u5feb\u4e00\u5468\u4e86\uff0c\u6211\u7ec8\u4e8e\u80fd\u8fc7\u4e86\uff0c\u5728\u591a\u4f4d\u540c\u5b66\u7684\u70b9\u64ad\u4e0b\uff0c\u7ec8\u4e8e\u80fd\u8fc7\u4e86T_T\uff0c\u592a\u4e0d\u5bb9\u6613\u4e86\uff0c\u603b\u7ed3\u4e0b\u6765\u4e3b\u8981\u6709\u4e09\u70b9\u5427\uff1a\n\n1. \u907f\u514d**\u91cd\u590d\u8ba1\u7b97**\uff0c\u6709\u4e9b\u503c\u5728\u8f93\u5165\u5b8c`p`,`q`\u540e\u662f\u4e0d\u4f1a\u6539\u53d8\u7684\uff08\u6bd4\u5982p\u548cq\u7684\u9006\uff09\uff0c\u5e94\u8be5\u7528\u53d8\u91cf\u5c06\u5176\u4fdd\u5b58\u597d\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\uff08\u611f\u8c22\u9ec4\u540c\u5b66\u70b9\u64ad^_^\uff09\n2. **\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u52a0\u901f**\uff0c\u5728\u6c42\u89e3\u6a21\u5e42\u65f6\uff0c\u8981\u5c06\u89e3\u5bc6\u6307\u6570`d`\u6a21\u9664\u4ee5`p-1`\u548c`q-1`\uff0c\u8fd9\u6837\u4e5f\u80fd\u52a0\u901f\u8ba1\u7b97\uff08\u611f\u8c22\u9ec4\u540c\u5b66\u70b9\u64ad^_^\uff09\n3. **\u6a21\u96642\u52a0\u901f**\uff0c\u6a21\u5e42\u8fd0\u7b97\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u4e0d\u5bf9\u7684\u5bf9\u6307\u6570\u6a21\u96642\uff0c\u76f4\u63a5\u7528\u9664\u6cd5\u6548\u7387\u5e76\u4e0d\u9ad8\uff0c\u53ef\u4ee5\u4f7f\u7528`gmp_get_str`\u5148\u5c06\u5176\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u8fdb\u884c\u5e73\u65b9\u4e58\u7b97\u6cd5\uff08\u611f\u8c22\u5f20\u540c\u5b66\u70b9\u64ad^_^\uff09\n\n\u554a\u554a\u554a\uff0c\u592a\u4e0d\u5bb9\u6613\u4e86\uff0c\u67af\u4e86\uff0c\u4e0d\u8fc7\u603b\u7b97\u662f\u80fd\u8dd1\u5feb\u5feb\u4e86\uff0c\u829c\u6e56~\n\n## 8. \u8499\u54e5\u9a6c\u5229\u7b97\u6cd5\n\n[\u8499\u54e5\u9a6c\u5229\u7b97\u6cd5](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/RSAMontgomery)\n\n\u8981\u4eba\u547d\uff01\uff01gmp\u5e93\u5c45\u7136\u6ca1\u6709\u79fb\u4f4d\u8fd0\u7b97\uff0c\u76f4\u63a5\u767d\u7ed9\uff0c\u8dd1\u7684\u5de8\u6162\u65e0\u6bd4T_T\n\n\u90fd\u60f3\u653e\u5f03\u4e86\uff0c\u8981\u4e0d\u4e16\u754c\u4e0a\u5e93\u51fd\u6570\u5427T_T\uff01\n\n\u95ee\u95ee\u5e26\u4f6c\u548b\u505a\u7684\uff0c\u5e26\u4f6c\u8fd8\u662f\u731b\uff0c\u76f4\u63a5\u6ca1\u7528\u79fb\u4f4d\u8fd0\u7b97\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u597d\uff0c\u76f4\u63a5\u79fb\u52a8\u6307\u9488\uff0cNB\uff01\n\n\u67af\u4e86\uff0c\u6628\u665a\u8c03\u8bd5\u52302\u70b9\uff0c\u5fc3\u6001\u5d29\u4e86\uff0c\u592a\u72d7\u8840\u4e86\uff0c\u672c\u5730`unsigned long`\u662f32\u4f4d\uff0cOJ\u662f64\u4f4d\u7684\uff0c\u8fd9\u4e5f\u592a\u5751\u7239\u4e86\u3002\u3002\u3002\n\n\u8fd8\u662f\u7761\u9192\u4e86\u6e05\u9192\uff0c\u5927\u65e9\u4e0a\u534a\u5c0f\u65f6BUG\u5c31\u8c03\u597d\u4e86\uff0c\u8212\u670d\u4e86\u8212\u670d\u4e86\uff0c\u7ec8\u4e8e\u8fc7\u4e86\uff0c\u829c\u6e56~~^_^\n\n## 9. PKCS7\n\n\u8fd9\u4e2a\u592a\u7b80\u5355\u8fa3\uff0c\u8df3\u8fc7^_^\n\n## 10. \u5f69\u8679\u8868\n\n[\u5f69\u8679\u8868](https://github.com/AgentGuo/HUST_course_design_of_cryptography/tree/master/rainbowTable)\n\n\u611f\u89c9\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0cOJ\u65f6\u95f4\u5361\u5f97\u4e5f\u4e0d\u6b7b\uff0c\u4fe1\u5fc3\u6ee1\u6ee1\u7684\u5f00\u59cb\u3002\u3002\u3002\n\nPA..PA..\u603b\u662fPA....\uff0c\u65f6\u95f4\u4e0d\u65e9\u4e86~ \u610f\u6599\u4e4b\u4e2d\u7684\u7ed3\u675fT_T\uff0c\u4e0d\u8fc7\u8fd8\u597d\u4e0d\u662fRA~\n\n\u901a\u8fc7\u4e00\u987f\u5206\u6790\u8001\u5e08\u7ed9\u7684\u4ec5\u6709\u7684\u4e00\u4e2a\u6837\u4f8b\uff0c\u7ec8\u4e8e\u627e\u5230bug\u4e86\uff0c\u53c8\u662f\u4e00\u6ce2\u8111\u6de4\u8840\u64cd\u4f5c\uff0c100000\u5199\u6210\u4e8610000\uff0c\u8fd9bug\u627e\u4e86\u6211\u4e24\u5c0f\u65f6\uff1f\uff1f\uff1fT_T\n\n\u4e0d\u8fc7\u603b\u849c\u8fc7\u4e86\uff01\u829c\u6e56~"
 },
 {
  "repo": "dgryski/dkeyczar",
  "language": "Go",
  "readme_contents": "\n*Important note:* Keyczar is deprecated.  The Keyczar developers recommend [Tink](https://github.com/google/tink).\n\n---------------------------\n\n\nThis is a port of Google's Keyczar library to Go.\n\nCopyright (c) 2011 Damian Gryski <damian@gryski.com>\nThis code is licensed under the Apache License, version 2.0\n\nYou can learn more about the Keyczar library at http://www.keyczar.org/\n\nThe library supports:\n\n* AES+HMAC for symmetric encryption\n* HMAC for symmetric signing\n* RSA for asymmetric encryption or signing\n* DSA for asymmetric signing\n* Session encryption using AES+HMAC\n\nIt has a simple API with sensible defaults for the cryptographic algorithms.\nAll output is encoded in web-safe base64.\n\nSee the godoc for usage information.   This documentation is also viewable\nonline at: http://godoc.org/github.com/dgryski/dkeyczar\n\nTo pull in testdata for unit tests run `git submodule init`\n\n[![Build Status](https://travis-ci.org/dgryski/dkeyczar.png)](https://travis-ci.org/dgryski/dkeyczar)\n"
 },
 {
  "repo": "S4Y4N/Trity",
  "language": "Python",
  "readme_contents": "# Trity\nTrity is an advanced pentesting framework dedicated to everything from cryptography to spoofing.\n\n## Installation & Usage\n\nIn order to install this program, it is crucial that you are on a __Linux-based__ distro, preferably __Kali-Linux__ or __BackBox__.\n\nFirst, `git clone`.\n\n    git clone https://github.com/toxic-ig/Trity.git\n\nChange directory, and then run the installer script (Must be root or have superuser permissions):\n\n    cd path/Trity\n    sudo python install.py\n\nThe `install.py` script will install of the necessary dependencies for you. Other platforms will be supported in the future.\n\nOnce finished, execute with:\n\n    trity\n\n\n### FAQ\n#### What if I get ImportError: no module named x\n##### Make sure you have Internet and try manually installing it by executing: pip install x (whatever x is)\n========================\n#### Will Trity work on Windows?\n##### No\n========================\n#### Will Trity work on Mac OSX\n##### I am not sure because there is no way for me to test it, but if someone would like to and told me the results I would greatly appreciate it :-) Except that you would have to install the modules manually.\n========================\n\n### Donations?\n#### www.paypal.me/toxicnull\n\n### Issues?\n\nIf you have any issues regarding the source code of this framework, as well as any errors you have encountered, please contact me at \n\n    Xmpp: toxic-ig@exploit.im\n    Email: toxicnull@gmail.com\n    Instagram: @_t0x1c\n    Twitter: @toxicnull\n    Kik: toxicnull\n    Discord: #9073\n    \n"
 },
 {
  "repo": "vuvuzela/crypto",
  "language": "Assembly",
  "readme_contents": "This repository holds cryptography libraries created for\n[Vuvuzela](https://github.com/vuvuzela/vuvuzela) and\n[Alpenhorn](https://github.com/vuvuzela/alpenhorn).\n**Proceed with caution**: these libraries are experimental and have\nnot been proven correct.\n\nDocumentation: https://godoc.org/vuvuzela.io/crypto\n"
 },
 {
  "repo": "tyler-smith/go-bip39",
  "language": "Go",
  "readme_contents": "![The bip39 library for Go](assets/images/banner.png)\n\n[![PkgGoDev](https://pkg.go.dev/badge/tyler-smith/go-bip39)](https://pkg.go.dev/github.com/tyler-smith/go-bip39)\n[![Latest release](https://img.shields.io/github/v/tag/tyler-smith/go-bip39?label=release&sort=semver)](https://github.com/tyler-smith/go-bip39/releases)\n[![MIT License](https://img.shields.io/github/license/tyler-smith/go-bip39.svg?maxAge=2592000&color=blue)](https://github.com/tyler-smith/go-bip39/blob/master/LICENSE)\n[![Contributors](https://img.shields.io/github/contributors/tyler-smith/go-bip39.svg?color=blue)](https://github.com/tyler-smith/go-bip39/graphs/contributors)\n\n[![Build check](https://github.com/tyler-smith/go-bip39/workflows/build-check/badge.svg?branch=master)](https://github.com/tyler-smith/go-bip39/actions?query=workflow%3Abuild-check+branch%3Amaster)\n[![Go Report Card](https://goreportcard.com/badge/github.com/tyler-smith/go-bip39)](https://goreportcard.com/report/github.com/tyler-smith/go-bip39)\n[![Coverage Status](https://coveralls.io/repos/github/tyler-smith/go-bip39/badge.svg?branch=master)](https://coveralls.io/github/tyler-smith/go-bip39?branch=master)\n\n## Example\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n  \"github.com/tyler-smith/go-bip39\"\n  \"github.com/tyler-smith/go-bip32\"\n)\n\nfunc main(){\n  // Generate a mnemonic for memorization or user-friendly seeds\n  entropy, _ := bip39.NewEntropy(256)\n  mnemonic, _ := bip39.NewMnemonic(entropy)\n\n  // Generate a Bip32 HD wallet for the mnemonic and a user supplied password\n  seed := bip39.NewSeed(mnemonic, \"Secret Passphrase\")\n\n  masterKey, _ := bip32.NewMasterKey(seed)\n  publicKey := masterKey.PublicKey()\n\n  // Display mnemonic and keys\n  fmt.Println(\"Mnemonic: \", mnemonic)\n  fmt.Println(\"Master private key: \", masterKey)\n  fmt.Println(\"Master public key: \", publicKey)\n}\n```\n"
 },
 {
  "repo": "rfcs/crypto-conditions",
  "language": "JavaScript",
  "readme_contents": "# Crypto-Conditions\n\n## Spec\n\nYou can find the spec here: https://tools.ietf.org/html/draft-thomas-crypto-conditions-04\n\nThe source code for the spec is in `src/spec/crypto-conditions.md`\n\n## Implementations\n\nKnown implementations of Crypto Conditions:\n\n* JavaScript: https://github.com/interledgerjs/five-bells-condition\n* Java: https://github.com/ripple/crypto-conditions\n* Python: https://github.com/bigchaindb/cryptoconditions\n* Go:\n  * https://github.com/go-interledger/cryptoconditions\n  * https://github.com/jtremback/crypto-conditions\n* Haskell: https://github.com/libscott/cryptoconditions-hs\n* C: https://github.com/libscott/libcryptoconditions\n\n(Note that all of the above implementations currently need testing/updating. As soon as we have run a decent sized test suite against the implementations above, we'll provide the results here.)\n\nIf you would like to update this list, please feel free to open a pull request against this repository.\n\n## Test Vectors\n\nIn order to verify the different implementations, we provide a series of test vectors in JSON format. You can find them in the folder `test-vectors`. Within that folder, they are organized in the following subfolders:\n\n* `valid` - These are examples of valid crypto-conditions and their fulfillments. You should run the following tests against these:\n\n  * Parse `conditionBinary`, serialize as a URI, should match `conditionUri`.\n  * Parse `conditionUri`, serialize as binary, should match `conditionBinary`.\n  * Parse `fulfillment`, serialize fulfillment, should match `fulfillment`.\n  * Parse `fulfillment` and validate, should return true.\n  * Parse `fulfillment` and generate the fingerprint contents\n  * Parse `fulfillment`, generate the condition, serialize the condition as a URI, should match `conditionUri`.\n  * Create fulfillment from `json`, serialize fulfillment, should match `fulfillment`.\n\n  If a `message` field is provided, the condition should be evaluated against the message. Otherwise, an empty message should be passed to the verification function.\n\n* `invalid` - These are examples of intrinsically invalid fulfillments, such as an invalid signature or an encoding error.\n  * Parse `fulfillment` and validate, should return error.\n\nNote that we don't provide any test cases for fulfillments that are valid, but don't match the provided condition, because we can just include them in the `valid` set, which provides the exact condition that the fulfillment *should* map to. (Which is stricter than testing one of the nearly infinite possible conditions that it doesn't map to.)\n\n## Test Vectors Source\n\nThe test vectors themselves are generated from example data in the `src/test-vectors/` folder. You should never have to worry about that unless you are adding or editing test vectors.\n\n## Generating Tests\n\nThe ffasn1dump tool is used to produce DER encodings. It is available from http://bellard.org/ffasn1\n\n## Generating the Spec\n\nUses [kramdown-rfc2629](https://github.com/cabo/kramdown-rfc2629/), [xml2rfc](http://xml2rfc.ietf.org/) and [Grunt](http://gruntjs.com/) with [Grunt kramdown_rfc2629 task](https://github.com/hildjj/grunt-kramdown-rfc2629/)\n\n\nFrom root directory of the repo run:\n\n    npm install\n    grunt kramdown_rfc2629\n   \nTo watch edits to `crypto-conditions.md` and auto-generate output when changes are saved run:\n\n    grunt watch\n    \n"
 },
 {
  "repo": "xtaci/kcptun",
  "language": "Go",
  "readme_contents": "# <img src=\"logo.png\" alt=\"kcptun\" height=\"54px\" /> \n\n[![Release][13]][14] [![Powered][17]][18] [![MIT licensed][11]][12] [![Build Status][3]][4] [![Go Report Card][5]][6] [![Downloads][15]][16] [![Docker][1]][2] \n\n[1]: https://img.shields.io/docker/pulls/xtaci/kcptun\n[2]: https://hub.docker.com/r/xtaci/kcptun\n[3]: https://travis-ci.org/xtaci/kcptun.svg?branch=master\n[4]: https://travis-ci.org/xtaci/kcptun\n[5]: https://goreportcard.com/badge/github.com/xtaci/kcptun\n[6]: https://goreportcard.com/report/github.com/xtaci/kcptun\n[11]: https://img.shields.io/github/license/xtaci/kcptun\n[12]: LICENSE.md\n[13]: https://img.shields.io/github/v/release/xtaci/kcptun?color=orange\n[14]: https://github.com/xtaci/kcptun/releases/latest\n[15]: https://img.shields.io/github/downloads/xtaci/kcptun/total.svg?maxAge=1800&color=orange\n[16]: https://github.com/xtaci/kcptun/releases\n[17]: https://img.shields.io/badge/KCP-Powered-blue.svg\n[18]: https://github.com/skywind3000/kcp\n\n<img src=\"kcptun.png\" alt=\"kcptun\" height=\"300px\"/>\n\n> *Disclaimer: kcptun maintains a single website \u2014 [github.com/xtaci/kcptun](https://github.com/xtaci/kcptun). Any websites other than [github.com/xtaci/kcptun](https://github.com/xtaci/kcptun) are not endorsed by xtaci.*\n\n### Requirements\n\n| Target | Minimum | Recommended |\n| --- | --- | --- |\n| System | aix darwin dragonfly freebsd linux netbsd openbsd solaris windows | linux |\n| Memory | >20MB | >32MB |\n| CPU | ANY | amd64 with AES-NI & AVX2 |\n\n\n### QuickStart\n\nIncrease the number of open files on your server, as:\n\n`ulimit -n 65535`, or write it in `~/.bashrc`.\n\nSuggested `sysctl.conf` parameters for better handling of UDP packets:\n\n```\nnet.core.rmem_max=26214400 // BDP - bandwidth delay product\nnet.core.rmem_default=26214400\nnet.core.wmem_max=26214400\nnet.core.wmem_default=26214400\nnet.core.netdev_max_backlog=2048 // proportional to -rcvwnd\n```\n\nYou can also increase the per-socket buffer by adding parameter(default 4MB):\n```\n-sockbuf 16777217\n```\nfor **slow processors**, increasing this buffer is **CRITICAL** to receive packets properly.\n\nDownload a corresponding one from precompiled [Releases](https://github.com/xtaci/kcptun/releases).\n\n```\nKCP Client: ./client_darwin_amd64 -r \"KCP_SERVER_IP:4000\" -l \":8388\" -mode fast3 -nocomp -autoexpire 900 -sockbuf 16777217 -dscp 46\nKCP Server: ./server_linux_amd64 -t \"TARGET_IP:8388\" -l \":4000\" -mode fast3 -nocomp -sockbuf 16777217 -dscp 46\n```\nThe above commands will establish port forwarding channel for 8388/tcp as:\n\n> Application -> **KCP Client(8388/tcp) -> KCP Server(4000/udp)** -> Target Server(8388/tcp) \n\nwhich tunnels the original connection:\n\n> Application -> Target Server(8388/tcp) \n\n### Build from source\n\n```\n$ git clone https://github.com/xtaci/kcptun.git\n$ cd kcptun\n$ ./build-release.sh\n$ cd build\n```\n\nAll precompiled releases are genereated from `build-release.sh` script.\n\n### Performance\n\n<img src=\"fast.png\" alt=\"fast.com\" height=\"256px\" />  \n\n![bandwidth](bw.png)\n\n![flame](flame.png)\n\n> Practical bandwidth graph with parameters:  -mode fast3 -ds 10 -ps 3\n\n\n\n### Basic Tuning Guide\n\n#### Improving Thoughput\n\n> **Q: I have a high speed network link, how to reach the maximum bandwidth?**        \n\n> **A:** Increase `-rcvwnd` on KCP Client and `-sndwnd` on KCP Server **simultaneously & gradually**, the mininum one decides the maximum transfer rate of the link, as `wnd * mtu / rtt`; Then try downloading something and to see if it meets your requirements. \n(mtu is adjustable by `-mtu`)\n\n#### Improving Latency\n\n> **Q: I'm using kcptun for game, I don't want any lag happening.**    \n\n> **A:** Lag means packet loss for most of the time, lags can be improved by changing `-mode`.\n\n> eg: `-mode fast3`    \n\n> Aggresiveness/Responsiveness on retransmission for embedded modes are:\n\n> *fast3 > fast2 > fast > normal > default*\n\n#### HOLB\n\nSince streams are multiplexed into a single physical channel, head of line blocking may appear under certain circumstances, by\nincreasing `-smuxbuf` to a larger value (default 4MB) may mitigate this problem, obviously this will costs more memory.\n\nFor versions >= v20190924, you can switch to smux version 2, smux v2 has options to limit per-stream memory usage, now set `-smuxver 2` to enable smux v2, and adjust `-streambuf` to limit per-stream memory usage, eg: `-streambuf 2097152` can limit per-stream memory usage to 2MB. By limiting stream buffer on the receiver side, a back-pressure will be conducted to the sender and limits reading, and finally prevent source from sending too much data to occupy every bits of buffer along the link. (Setting -smuxver **MUST** be **IDENTICAL** on both side, default is 1. )\n\n#### Slow Devices\n\nkcptun made use of **ReedSolomon-Codes** to recover lost packets, which requires massive amount of computation, a low-end ARM device cannot satisfy kcptun well. To unleash the full potential of kcptun, a multi-core x86 homeserver CPU like AMD Opteron is recommended.\nIf you insist on running under some ARM routers, you'd better turn off `FEC` and use `salsa20` as the encryption method.\n\n### Expert Tuning Guide\n\n#### Overview\n\n<p align=\"left\"><img src=\"layeredparams.png\" alt=\"params\" height=\"450px\"/></p>\n\n#### Usage\n\n```\n\u279c  ~ ./client_linux_amd64 -h\nNAME:\n   kcptun - client(with SMUX)\n\nUSAGE:\n   client_linux_amd64 [global options] command [command options] [arguments...]\n\nVERSION:\n   20190924\n\nCOMMANDS:\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --localaddr value, -l value      local listen address (default: \":12948\")\n   --remoteaddr value, -r value     kcp server address (default: \"vps:29900\")\n   --key value                      pre-shared secret between client and server (default: \"it's a secrect\") [$KCPTUN_KEY]\n   --crypt value                    aes, aes-128, aes-192, salsa20, blowfish, twofish, cast5, 3des, tea, xtea, xor, sm4, none (default: \"aes\")\n   --mode value                     profiles: fast3, fast2, fast, normal, manual (default: \"fast\")\n   --conn value                     set num of UDP connections to server (default: 1)\n   --autoexpire value               set auto expiration time(in seconds) for a single UDP connection, 0 to disable (default: 0)\n   --scavengettl value              set how long an expired connection can live (in seconds) (default: 600)\n   --mtu value                      set maximum transmission unit for UDP packets (default: 1350)\n   --sndwnd value                   set send window size(num of packets) (default: 128)\n   --rcvwnd value                   set receive window size(num of packets) (default: 512)\n   --datashard value, --ds value    set reed-solomon erasure coding - datashard (default: 10)\n   --parityshard value, --ps value  set reed-solomon erasure coding - parityshard (default: 3)\n   --dscp value                     set DSCP(6bit) (default: 0)\n   --nocomp                         disable compression\n   --sockbuf value                  per-socket buffer in bytes (default: 4194304)\n   --smuxver value                  specify smux version, available 1,2 (default: 1)\n   --smuxbuf value                  the overall de-mux buffer in bytes (default: 4194304)\n   --streambuf value                per stream receive buffer in bytes, smux v2+ (default: 2097152)\n   --keepalive value                seconds between heartbeats (default: 10)\n   --snmplog value                  collect snmp to file, aware of timeformat in golang, like: ./snmp-20060102.log\n   --snmpperiod value               snmp collect period, in seconds (default: 60)\n   --log value                      specify a log file to output, default goes to stderr\n   --quiet                          to suppress the 'stream open/close' messages\n   --tcp                            to emulate a TCP connection(linux)\n   -c value                         config from json file, which will override the command from shell\n   --help, -h                       show help\n   --version, -v                    print the version\n   \n\u279c  ~ ./server_linux_amd64 -h\nNAME:\n   kcptun - server(with SMUX)\n\nUSAGE:\n   server_linux_amd64 [global options] command [command options] [arguments...]\n\nVERSION:\n   20190924\n\nCOMMANDS:\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --listen value, -l value         kcp server listen address (default: \":29900\")\n   --target value, -t value         target server address, or path/to/unix_socket (default: \"127.0.0.1:12948\")\n   --key value                      pre-shared secret between client and server (default: \"it's a secrect\") [$KCPTUN_KEY]\n   --crypt value                    aes, aes-128, aes-192, salsa20, blowfish, twofish, cast5, 3des, tea, xtea, xor, sm4, none (default: \"aes\")\n   --mode value                     profiles: fast3, fast2, fast, normal, manual (default: \"fast\")\n   --mtu value                      set maximum transmission unit for UDP packets (default: 1350)\n   --sndwnd value                   set send window size(num of packets) (default: 1024)\n   --rcvwnd value                   set receive window size(num of packets) (default: 1024)\n   --datashard value, --ds value    set reed-solomon erasure coding - datashard (default: 10)\n   --parityshard value, --ps value  set reed-solomon erasure coding - parityshard (default: 3)\n   --dscp value                     set DSCP(6bit) (default: 0)\n   --nocomp                         disable compression\n   --sockbuf value                  per-socket buffer in bytes (default: 4194304)\n   --smuxver value                  specify smux version, available 1,2 (default: 1)\n   --smuxbuf value                  the overall de-mux buffer in bytes (default: 4194304)\n   --streambuf value                per stream receive buffer in bytes, smux v2+ (default: 2097152)\n   --keepalive value                seconds between heartbeats (default: 10)\n   --snmplog value                  collect snmp to file, aware of timeformat in golang, like: ./snmp-20060102.log\n   --snmpperiod value               snmp collect period, in seconds (default: 60)\n   --pprof                          start profiling server on :6060\n   --log value                      specify a log file to output, default goes to stderr\n   --quiet                          to suppress the 'stream open/close' messages\n   --tcp                            to emulate a TCP connection(linux)\n   -c value                         config from json file, which will override the command from shell\n   --help, -h                       show help\n   --version, -v                    print the version\n```\n\n#### Forward Error Correction\n\nIn coding theory, the [Reed\u2013Solomon code](https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction) belongs to the class of non-binary cyclic error-correcting codes. The Reed\u2013Solomon code is based on univariate polynomials over finite fields.\n\nIt is able to detect and correct multiple symbol errors. By adding t check symbols to the data, a Reed\u2013Solomon code can detect any combination of up to t erroneous symbols, or correct up to \u230at/2\u230b symbols. As an erasure code, it can correct up to t known erasures, or it can detect and correct combinations of errors and erasures. Furthermore, Reed\u2013Solomon codes are suitable as multiple-burst bit-error correcting codes, since a sequence of b + 1 consecutive bit errors can affect at most two symbols of size b. The choice of t is up to the designer of the code, and may be selected within wide limits.\n\n![FED](FEC.png)\n\n#### DSCP\n\nDifferentiated services or DiffServ is a computer networking architecture that specifies a simple, scalable and coarse-grained mechanism for classifying and managing network traffic and providing quality of service (QoS) on modern IP networks. DiffServ can, for example, be used to provide low-latency to critical network traffic such as voice or streaming media while providing simple best-effort service to non-critical services such as web traffic or file transfers.\n\nDiffServ uses a 6-bit differentiated services code point (DSCP) in the 8-bit differentiated services field (DS field) in the IP header for packet classification purposes. The DS field and ECN field replace the outdated IPv4 TOS field.\n\nsetting each side with ```-dscp value```, Here are some [Commonly used DSCP values](https://en.wikipedia.org/wiki/Differentiated_services#Commonly_used_DSCP_values).\n\n#### Cryptanalysis\n\nkcptun is shipped with builtin packet encryption powered by various block encryption algorithms and works in [Cipher Feedback Mode](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Feedback_(CFB)), for each packet to be sent, the encryption process will start from encrypting a [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) from the [system entropy](https://en.wikipedia.org/wiki//dev/random), so encryption to same plaintexts never leads to a same ciphertexts thereafter.\n\nThe contents of the packets are completely anonymous with encryption, including the headers(FEC,KCP), checksums and contents. Note that, no matter which encryption method you choose on you upper layer, if you disable encryption by specifying `-crypt none` to kcptun, the transmit will be insecure somehow, since the header is ***PLAINTEXT*** to everyone it would be susceptible to header tampering, such as jamming the *sliding window size*, *round-trip time*, *FEC property* and *checksums*. ```aes-128``` is suggested for minimal encryption since modern CPUs are shipped with [AES-NI](https://en.wikipedia.org/wiki/AES_instruction_set) instructions and performs even better than `salsa20`(check the table below).\n\nOther possible attacks to kcptun includes: a) [traffic analysis](https://en.wikipedia.org/wiki/Traffic_analysis), dataflow on specific websites may have pattern while interchanging data, but this type of eavesdropping has been mitigated by adapting [smux](https://github.com/xtaci/smux) to mix data streams so as to introduce noises, perfect solution to this has not appeared yet, theroretically by shuffling/mixing messages on larger scale network may mitigate this problem.  b) [replay attack](https://en.wikipedia.org/wiki/Replay_attack), since the asymmetrical encryption has not been introduced into kcptun for some reason, capturing the packets and replay them on a different machine is possible, (notice: hijacking the session and decrypting the contents is still *impossible*), so upper layers should contain a asymmetrical encryption system to guarantee the authenticity of each message(to process message exactly once), such as HTTPS/OpenSSL/LibreSSL, only by signing the requests with private keys can eliminate this type of attack. \n\nImportant: \n1. `-crypt` and `-key` must be the same on both KCP Client & KCP Server.\n2. `-crypt xor` is also insecure and vulnerable to [known-plaintext attack](https://en.wikipedia.org/wiki/Known-plaintext_attack), do not use this unless you know what you are doing. (*cryptanalysis note: any type of [counter mode](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR)) is insecure in packet encryption due to the shorten of counter period and leads to iv/nonce collision*)\n\nBenchmarks for crypto algorithms supported by kcptun:\n\n```\nBenchmarkSM4-4                 \t   50000\t     32087 ns/op\t  93.49 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkAES128-4              \t  500000\t      3274 ns/op\t 916.15 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkAES192-4              \t  500000\t      3587 ns/op\t 836.34 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkAES256-4              \t  300000\t      3828 ns/op\t 783.60 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkTEA-4                 \t  100000\t     15359 ns/op\t 195.32 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkXOR-4                 \t20000000\t        90.2 ns/op\t33249.02 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkBlowfish-4            \t   50000\t     26885 ns/op\t 111.58 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkNone-4                \t30000000\t        45.8 ns/op\t65557.11 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkCast5-4               \t   50000\t     34370 ns/op\t  87.29 MB/s\t       0 B/op\t       0 allocs/op\nBenchmark3DES-4                \t   10000\t    117893 ns/op\t  25.45 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkTwofish-4             \t   50000\t     33477 ns/op\t  89.61 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkXTEA-4                \t   30000\t     45825 ns/op\t  65.47 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkSalsa20-4             \t  500000\t      3282 ns/op\t 913.90 MB/s\t       0 B/op\t       0 allocs/op\n```\n\nBenchmark result from openssl\n\n```\n$ openssl speed -evp aes-128-cfb\nDoing aes-128-cfb for 3s on 16 size blocks: 157794127 aes-128-cfb's in 2.98s\nDoing aes-128-cfb for 3s on 64 size blocks: 39614018 aes-128-cfb's in 2.98s\nDoing aes-128-cfb for 3s on 256 size blocks: 9971090 aes-128-cfb's in 2.99s\nDoing aes-128-cfb for 3s on 1024 size blocks: 2510877 aes-128-cfb's in 2.99s\nDoing aes-128-cfb for 3s on 8192 size blocks: 310865 aes-128-cfb's in 2.98s\nOpenSSL 1.0.2p  14 Aug 2018\nbuilt on: reproducible build, date unspecified\noptions:bn(64,64) rc4(ptr,int) des(idx,cisc,16,int) aes(partial) idea(int) blowfish(idx)\ncompiler: clang -I. -I.. -I../include  -fPIC -fno-common -DOPENSSL_PIC -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -arch x86_64 -O3 -DL_ENDIAN -Wall -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM -DECP_NISTZ256_ASM\nThe 'numbers' are in 1000s of bytes per second processed.\ntype             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes\naes-128-cfb     847216.79k   850770.86k   853712.05k   859912.39k   854565.80k\n```\n\nThe encrytion performance in kcptun is as fast as in openssl library(if not faster).\n\n\n#### Memory Control\n\nRouters, mobile devices are susceptible to memory consumption; by setting GOGC environment(eg: GOGC=20) will make the garbage collector to recycle faster.\nReference: https://blog.golang.org/go15gc\n\nPrimary memory allocation are done from a global buffer pool *xmit.Buf*, in kcp-go, when we need to allocate some bytes, we can get from that pool, and a *fixed-capacity* 1500 bytes(mtuLimit) will be returned, the *rx queue*, *tx queue* and *fec queue* all receive bytes from there, and they will return the bytes to the pool after using to prevent *unnecessary zer0ing* of bytes. \nThe pool mechanism maintained a *high watermark* for slice objects, these *in-flight* objects from the pool will survive from the perodical garbage collection, meanwhile the pool kept the ability to return the memory to runtime if in idle, `-sndwnd`,`-rcvwnd`,`-ds`, `-ps`, these parameters affect this *high watermark*, the larger the value, the bigger the memory consumption will be.\n\n`-smuxbuf` also affects the maximum memory consumption, this parameter maintains a subtle balance between *concurrency* and *resource*, you can increase this value(default 4MB) to boost concurrency if you have many clients to serve and you get a powerful server at the same time, and also you can decrease this value to serve only 1 or 2 clients and hope this program can run under some embedded SoC system with limited memory and only you can access. (Notice that the `-smuxbuf` value is not proprotional to concurrency, you need to test.)\n\n\n#### Compression\n\nkcptun has builtin snappy algorithms for compressing streams:\n\n> Snappy is a compression/decompression library. It does not aim for maximum\n> compression, or compatibility with any other compression library; instead,\n> it aims for very high speeds and reasonable compression. For instance,\n> compared to the fastest mode of zlib, Snappy is an order of magnitude faster\n> for most inputs, but the resulting compressed files are anywhere from 20% to\n> 100% bigger.\n\n> Reference: http://google.github.io/snappy/\n\nCompression may save bandwidth for **PLAINTEXT** data, it's quite useful for specific scenarios as cross-datacenter replications, by compressing the redologs in dbms or kafka-like message queues and then transfer the data streams across the continent can be much faster.\n\nCompression is enabled by default, you can disable it by setting ```-nocomp``` on **BOTH** KCP Client & KCP Server **MUST** be **IDENTICAL**.\n\n#### SNMP\n\n```go\ntype Snmp struct {\n    BytesSent        uint64 // bytes sent from upper level\n    BytesReceived    uint64 // bytes received to upper level\n    MaxConn          uint64 // max number of connections ever reached\n    ActiveOpens      uint64 // accumulated active open connections\n    PassiveOpens     uint64 // accumulated passive open connections\n    CurrEstab        uint64 // current number of established connections\n    InErrs           uint64 // UDP read errors reported from net.PacketConn\n    InCsumErrors     uint64 // checksum errors from CRC32\n    KCPInErrors      uint64 // packet iput errors reported from KCP\n    InPkts           uint64 // incoming packets count\n    OutPkts          uint64 // outgoing packets count\n    InSegs           uint64 // incoming KCP segments\n    OutSegs          uint64 // outgoing KCP segments\n    InBytes          uint64 // UDP bytes received\n    OutBytes         uint64 // UDP bytes sent\n    RetransSegs      uint64 // accmulated retransmited segments\n    FastRetransSegs  uint64 // accmulated fast retransmitted segments\n    EarlyRetransSegs uint64 // accmulated early retransmitted segments\n    LostSegs         uint64 // number of segs infered as lost\n    RepeatSegs       uint64 // number of segs duplicated\n    FECRecovered     uint64 // correct packets recovered from FEC\n    FECErrs          uint64 // incorrect packets recovered from FEC\n    FECParityShards  uint64 // FEC segments received\n    FECShortShards   uint64 // number of data shards that's not enough for recovery\n}\n```\n\nSending a `SIGUSR1` signal to KCP Client or KCP Server will dump SNMP information to console, just like `/proc/net/snmp`. You can use this information to do fine-grained tuning.\n\n### Manual Control\n\nhttps://github.com/skywind3000/kcp/blob/master/README.en.md#protocol-configuration\n\n`-mode manual -nodelay 1 -interval 20 -resend 2 -nc 1`\n\nLow-level KCP configuration can be altered by using manual mode like above, make sure you really **UNDERSTAND** what these means before doing **ANY** manual settings.\n\n\n### Identical Parmeters\n\nThese parameters **MUST** be **IDENTICAL** on **BOTH** side:\n\n1. -key\n1. -crypt\n1. -nocomp\n1. -smuxver\n\n### References\n\n1. https://github.com/skywind3000/kcp -- KCP - A Fast and Reliable ARQ Protocol.\n1. https://github.com/xtaci/kcp-go/ -- A Production-Grade Reliable-UDP Library for golang\n1. https://github.com/klauspost/reedsolomon -- Reed-Solomon Erasure Coding in Go.\n1. https://en.wikipedia.org/wiki/Differentiated_services -- DSCP.\n1. http://google.github.io/snappy/ -- A fast compressor/decompressor.\n1. https://www.backblaze.com/blog/reed-solomon/ -- Reed-Solomon Explained.\n1. http://www.qualcomm.cn/products/raptorq -- RaptorQ Forward Error Correction Scheme for Object Delivery.\n1. https://en.wikipedia.org/wiki/PBKDF2 -- Key stretching.\n1. http://blog.appcanary.com/2016/encrypt-or-compress.html -- Should you encrypt or compress first?\n1. https://github.com/hashicorp/yamux -- Connection multiplexing library.\n1. https://tools.ietf.org/html/rfc6937 -- Proportional Rate Reduction for TCP.\n1. https://tools.ietf.org/html/rfc5827 -- Early Retransmit for TCP and Stream Control Transmission Protocol (SCTP).\n1. http://http2.github.io/ -- What is HTTP/2?\n1. http://www.lartc.org/ -- Linux Advanced Routing & Traffic Control\n1. https://en.wikipedia.org/wiki/Noisy-channel_coding_theorem -- Noisy channel coding theorem\n1. https://zhuanlan.zhihu.com/p/53849089 -- kcptun\u5f00\u53d1\u5c0f\u8bb0\n\n\n\uff08\u6ce8\u610f\uff1a\u6211\u6ca1\u6709\u4efb\u4f55\u793e\u4ea4\u7f51\u7ad9\u7684\u8d26\u53f7\uff0c\u8bf7\u5c0f\u5fc3\u9a97\u5b50\u3002\uff09\n"
 },
 {
  "repo": "IBM/MAX-Adversarial-Cryptography",
  "language": "Shell",
  "readme_contents": "# IBM Developer Model Asset Exchange: Adversarial Cryptography Experiment\n\nThis repository contains code to run an Adversarial-Crypto experiment on [IBM Watson Machine Learning](https://www.ibm.com/cloud/machine-learning). This experiment performs adversarial training to learn trivial encryption functions. The model is based on the [TensorFlow implementation](https://github.com/tensorflow/models/tree/master/research/adversarial_crypto) and the 2016 paper [\"Learning to Protect Communications with Adversarial Neural Cryptography\"](https://arxiv.org/abs/1610.06918) by Abadi and Andersen.\n\nThis experiment creates and trains three neural networks, termed Alice, Bob, and Eve.  Alice takes inputs `in_m (message), in_k (key)` and outputs the ciphertext as a string. Bob takes inputs `in_k, ciphertext` and tries to reconstruct the message. Eve is an adversarial network that takes the ciphertext as its input and also tries to reconstruct the message. The main function attempts to train these networks and then evaluates them, all on random plaintext and key values.\n\nThis repository was developed as part of the [IBM Code Model Asset Exchange](https://developer.ibm.com/code/exchanges/models/)\n\n## Model Metadata\n| Domain | Application | Industry  | Framework | Training Data | Input Data Format |\n| ------------- | --------  | -------- | --------- | --------- | -------------- |\n| Security | Cryptography | General | TensorFlow | Randomly generated text | Text |\n\n## References\n\n* Abadi & Andersen, [Learning to Protect Communications with Adversarial Neural Cryptography](https://arxiv.org/abs/1610.06918), ,2016.\n* [TensorFlow implementation](https://github.com/tensorflow/models/tree/master/research/adversarial_crypto)\n\n## Licenses\n\n| Component | License | Link  |\n| ------------- | --------  | -------- |\n| This repository | [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0) | [LICENSE](LICENSE) |\n| Model Code (3rd party) | [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0) | [TensorFlow Models](https://github.com/tensorflow/models/blob/master/LICENSE)|\n\n# Quickstart\n\n## Prerequisites\n\n* This experiment requires a provisioned instance of the IBM Watson Machine Learning service. If you don't have an instance yet, go to [Watson Machine Learning in the IBM Cloud Catalog](https://console.bluemix.net/catalog/services/machine-learning) to create one.\n\n### Set Up an IBM Cloud Object Storage (COS) account\n- Create an IBM Cloud Object Storage account if you don't have one (https://www.ibm.com/cloud/storage)\n- Create credentials for either reading and writing or just reading\n\t- From the bluemix console page (https://console.bluemix.net/dashboard/apps/), choose Cloud Object Storage\n\t- On the left side, click the service credentials\n\t- Click on the `new credentials` button to create new credentials\n\t- In the 'Add New Credentials' popup, use this parameter `{\"HMAC\":true} in the `Add Inline Configuration...`\n\t- When you create the credentials, copy the `access_key_id` and `secret_access_key` values.\n\t- Make a note of the endpoint url\n\t\t- On the left side of the window, click on `Endpoint`\n\t\t- Copy the relevant public or private endpoint. [I choose the us-geo private endpoint].\n- In addition setup your [AWS S3 command line](https://aws.amazon.com/cli/) which can be used to create buckets and/or add files to COS.\n   - Export AWS_ACCESS_KEY_ID with your COS `access_key_id` and AWS_SECRET_ACCESS_KEY with your COS `secret_access_key`\n\n### Set Up IBM CLI & ML CLI\n\n- Install [IBM Cloud CLI](https://console.bluemix.net/docs/cli/reference/ibmcloud/download_cli.html#install_use)\n  - Log in using `bx login` or `bx login --sso` if within IBM\n- Install [ML CLI Plugin](https://dataplatform.ibm.com/docs/content/analyze-data/ml_dlaas_environment.html)\n  - After install, check if there is any plugins that need update\n    - `bx plugin update`\n  - Make sure to set up the various environment variables correctly:\n    - `ML_INSTANCE`, `ML_USERNAME`, `ML_PASSWORD`, `ML_ENV`\n\n\n## Running the experiment\n\nThe run.sh utility script will deploy the experiment to WML and execute the experiment as a `training-run`\n\n```\nrun.sh\n```\n\n## Try this experiment in Fabric for Deep Learning\n\nIf you want to run this experiment using Fabric for Deep Learning ([FFDL](https://github.com/IBM/FfDL)), You can simply clone the FfDL repository and follow the instructions over [here](https://github.com/IBM/FfDL/blob/master/etc/converter/ffdl-wml.md) to convert your `training-runs.yml` into FfDL's specification.\n"
 },
 {
  "repo": "shashwatkathuria/Cryptography",
  "language": "Python",
  "readme_contents": "# Cryptography"
 },
 {
  "repo": "MHumm/DelphiEncryptionCompendium",
  "language": "HTML",
  "readme_contents": "# DEC - Delphi Encryption Compendium\n\n## What is DEC?\nDEC is a library for Embarcadero Delphi, containing different cryptographic algorithms.\nIt contains algorithms for these categories:\n\n* Ciphers: encryption/decryption of data\n* Hashes: \"cryptographic checksums\"\n* Key derivation algorithms like Kdf1-Kdf3 and pbkdf2\n* HMAC message authentication\n* A cryptographic pseudo random number generator\n* CRCs: non cryptographic checksums based on CRC algorithms\n\n## Which Delphi versions are compatible?\nThe current version 6.4.1 is compatible with Delphi 2009 - Delphi 11.0 Alexandria. \nWhen defining the NO_ASM define in DECOptions.inc it is compatible with all \nplatforms supported by Delphi! It might be compatible with FPC, but this has \nnot been focus and is not tested. The development branch contains a more\nFPC compatible version already.\n\nIf you need support for older Delphi versions use version 5.2, which is compatible \nwith Delphi 7-2007 at least but lacks some hash implementations, HMAC and KDF \nimprovements. While V5.2 can be made compatible with newer Delphi versions with\nsmall modifications we strongly recommend to better adapt your code to use the\ncurrent version of DEC, given all these improvements made since then.\nA list of changes is available in the docs folder.\n\n## What is the current status of this project?\nV6.0 was released shortly before Christmas 2020. Since then work continued\nby some users supplying code, reporting bugs (regressions) along with fixes\nand by adding SHA2-224 which was still missing.\nDetails about the changes and additions in V6.4.1 can be found in the \nVersionHistory.pdf file in the docs subfolder of the development branch.\n\nIn comparison to 5.2 we added some console, VCL and FMX based demo applications.\nThe FMX based demos are even available via Google play as \"DEC cipher demo\" and\n\"DEC hash demo\".\n\n## Where can I get further information? For example if I'd like to contribute?\nIn the root folder of DEC V6.4.1 you will find further files with information about \nthis project like *NOTICE.txt*, *CONTRIBUTING.md*, *SECURITY.md*.\nAlso take the time to read DEC64.pdf in the *Docs* folder and look at the demos \nprovided in the *Demos* subfolder.\n\n## Has it been tested?\nDEC 5.2 came with some \"arcane\" test program testing the algoithms implemented\nusing test data supplied via some text file. For many algorithms this test data\nstems from official documentation of the algorithms itsself. DEC 5.2 passes these \ntests.\n\nDEC 6.0 reworked these tests into DUnit and DUnitX tests. We also added some more \ntests and with this replaced the \"arcane\" test program which used hard to understand \ncode. A few of the implemented unit tests may still fail, but this is simply because\nthey are empty sceletons at this point in time waiting to be filled in. We first \nneed to work out how to implement these tests and maybe look for test data.\nWhy don't you help out by researching useful test data for those few tests?\nWe're talking at block chaining mode tests for the ciphers specifically.\n\nIn DEC 6.2 the unit tests for the hash classes were looked at and where not already \nused original test data vectors (as far as we could find them - for most we could) \nhave been added to improve test coverage. V6.3 added further synthesized tests for \nsome hash classes. For SHA3 and for the GCM block chaining method the original test\nvectors provided by NIST are used for the unit tests.\n\n## Contained hash algorithms\n* MD2        \n* MD4        \n* MD5        \n* RipeMD128  \n* RipeMD160  \n* RipeMD256  \n* RipeMD320  \n* SHA0       \n* SHA1    \n* SHA224   \n* SHA256     \n* SHA384     \n* SHA512     \n* SHA3_224\n* SHA3_256\n* SHA3_384\n* SHA3_512\n* Shake128\n* Shake256\n* Haval128   \n* Haval160   \n* Haval192   \n* Haval224   \n* Haval256   \n* Tiger      \n* Panama     \n* Whirlpool0 \n* Whirlpool1 \n* WhirlpoolT \n* Square     \n* Snefru128  \n* Snefru256  \n* Sapphire   \n\n## Contained cipher algorithms\n* Null\n* Blowfish\n* Twofish\n* IDEA\n* Cast256\n* Mars\n* RC4\n* RC6\n* AES\n* Square\n* SCOP\n* Sapphire\n* 1DES\n* 2DES\n* 3DES\n* 2DDES\n* 3DDES\n* 3TDES\n* 3Way\n* Cast128\n* Gost\n* Magma\n* Misty\n* NewDES\n* Q128\n* RC2\n* RC5\n* SAFER\n* Shark\n* Skipjack\n* TEA\n* XTEA\n* TEAN\n\n## Contained block concatenating modes\nModes ending on x have been invented by the original developer of DEC\n* ECBx\n* CBCx\n* CTSx\n* CTS3\n* CFB8\n* CFBx\n* OFB8\n* OFBx\n* CFS8\n* CFSx\n* GCM\n\n## Contained key derivation algorithms:\n* KDF1\n* KDF2\n* KDF3\n* MGF1\n* PBKDF2\n\n## Contained message authentication algorithms\n* HMAC\n\n## Contained formattings\n* Copy\n* HEX      \n* HEXL     \n* Base16   \n* Base16L  \n* DECMIME32\n* Base64   \n* MIME64   \n* Radix64  \n* PGP      \n* UU       \n* XX       \n* ESCAPE   \n* BigEndian16\n* BigEndian32\n* BigEndian64\n\n## Contained CRCs\n* 8\n* 10\n* 12\n* 16\n* 16CCITT\n* 16XModem\n* 24\n* 32\n* 32CCITT\n* 32ZModem\n* 8ATMHEC\n* 8SMBus\n* 15CAN\n* 16ZMODEM"
 },
 {
  "repo": "aws/aws-sdk-js-crypto-helpers",
  "language": "TypeScript",
  "readme_contents": "## AWS SDK JS Crypto Helpers\n\nAWS Cryptographic Helpers for Javascript and Node.js\n\n[Security issue notifications](./CONTRIBUTING.md#security-issue-notifications)\n\n## Scope\n\nThis repository collects cryptographic helper packages. We have designed it to gather packages that implement simple primitives for the browser or Node.js. More information about AWS Crypto Tools can be found [here](https://docs.aws.amazon.com/aws-crypto-tools/index.html?id=docs_gateway#lang/en_us)\n\n## Project Status\n\nThis project is still in its early stages. Please send us your feedback. We might make breaking changes in future releases while the SDK is still in developer preview.\n\n## Getting started\n\nLet\u2019s walk through setting up a project that requires a cryptographically secure random value. The following steps use npm as an example. They assume you have node.js and npm already installed.\n\n1. Create a new node.js project.\n2. In the project, run: `npm install --save @aws-crypto/random-source-node@preview`\n3. Create a new file called index.js, require the function, and then use it to get a random value.\n\n```javascript\nconst { randomValues } = require(\"@aws-crypto/random-source-node\");\nasync function example() {\n  try {\n    const rand = await randomValues(32);\n    console.log(rand.length);\n  } catch (err) {\n    console.error(err);\n  }\n}\nexample();\n```\n\n## Crypto Helper Package Index\n\nEach package has readme details.\n\n- [crc32](packages/crc32)\n- [ie11-detection](packages/ie11-detection)\n- [random-source-browser](packages/random-source-browser)\n- [random-source-node](packages/random-source-node)\n- [random-source-universal](packages/random-source-universal)\n- [sha256-browser](packages/sha256-browser)\n- [sha256-js](packages/sha256-js)\n- [sha256-universal](packages/sha256-universal)\n- [supports-web-crypto](packages/supports-web-crypto)\n\n## Testing\n\nTo run the tests in every package.\n\n```\nnpm install\nnpm test\n```\n\n## Feedback\n\nWe welcome your feedback! If you have comments, questions, or suggestions, open a GitHub issue.\nWe are actively monitoring issues and will respond to feedback as we prepare for our GA launch.\n\n## Contributing\n\nWe welcome your contributions! To fix a problem, or add to an existing package: create a pull request.\nYou must submit all pull requests under the Apache 2.0 license. They will be reviewed by a team member prior to merging.\nWe would appreciate, but do not require, unit tests for all significant contributions. See [Contributing](CONTRIBUTING.md) for more information.\n\n## License\n\nThis library is licensed under the Apache 2.0 License.\n"
 },
 {
  "repo": "superpoweredSDK/Low-Latency-Android-iOS-Linux-Windows-tvOS-macOS-Interactive-Audio-Platform",
  "language": "C++",
  "readme_contents": "<p align=\"center\"><img width=\"450\" src=\"https://superpowered.com/images/superpowered-animated.svg\"></p>\n\nSuperpowered Inc develops the leading portable C++ Audio SDK, C++ Networking SDK, and C++ Crypto SDK featuring low-power and real-time latency. With builds for Desktop, Mobile, IoT and Embedded Devices, portable and cross-platform on Android, iOS, macOS, tvOS, Linux and Windows as well as processor-specific builds for ARM32, ARM64, x86, and x64.\n\n\n# Technology, SDKs and Code\n\nSuperpowered Inc develops the following interactive audio, networking and cryptographics SDKs and infrastructure:\n\n### 1. Superpowered C++ Audio Library and SDK for Android, iOS, macOS, tvOS, Linux and Windows.\nSuperpowered C++ Audio Library and SDK is the leading C++ Audio Library featuring low-power, real-time latency and cross-platform audio players, audio decoders, Fx (effects), audio I/O, streaming, music analysis and spatialization.\n\nFor the most up-to-date feature list, see: https://superpowered.com/audio-library-sdk\n\n### 2. Superpowered C++ Networking Library and SDK for Android, iOS, macOS, tvOS, Linux and Windows.\nThe Superpowered C++ Networking Library and SDK was designed from the ground-up to provide the easiest cross-platform way for a client to communicate with the back-end. It implements HTTP and HTTPS communication with custom data and header support, progress handling, file uploads/downloads and more. It reduces implementation, debug and maintenance time of typical tasks such as REST API requests, OAuth and bearer token authorization, or digital media streaming. It operates identically on all platforms, removing the pain of writing wrappers and finding quirks around the operating system's networking API, while it's fully self-contained and independent from it. The SDK also has a JSON parser to offer a complete package for your everyday networking and parsing needs.\n\nFor the most up-to-date feature list, see: https://superpowered.com/networking-library-sdk\n\n### 3. Superpowered C++ Cryptographics Library and SDK for Android, iOS, macOS, tvOS, Linux and Windows.\nSuperpowered Crypto offers the easiest cross-platform way to implement RSA public and private key cryptography, AES encryption and hashing functions (SHA, MD5). Unlike other cryptographics libraries designed for crypto enthusiasts with myriads of options and complex APIs, Superpowered Crypto has direct one-liner calls for signing, verification, encryption and decryption, solving the most common use-cases in the quickest way.\n\nFor the most up-to-date feature list, see: https://superpowered.com/crypto-library-sdk\n\n### 4. Superpowered HLS (HTTP Live Streaming) audio for Android, iOS, macOS, tvOS, Linux and Windows.\n- VOD, live or event streams.\n- AAC-LC or MP3 audio encoding.\n- ADTS AAC, MP3 or MPEG-TS containers.\n- Supports byte range requests and AES-128 encryption.\n- Bandwidth measurement and selectable automatic stream switching.\n- Selectable download strategies.\n\nBackground information: https://superpowered.com/http-live-streaming-for-android-superpowered-android-audio-io-and-audio-resampler\n\n### 5. Superpowered USB Audio and USB MIDI for Android\nThe Superpowered USB Audio and MIDI features for Android takes over MIDI device handling, providing low latency and low jitter (below 2 ms) access to MIDI devices for 1.4 billion Android devices, that is, 90+% of all Android devices on Google Play. It\u2019s the Android equivalent of iOS Core Audio and Core MIDI for USB devices.\n\nFor additional info, please see: https://superpowered.com/android-usb-audio-android-midi\n\n### 6. Superpowered has developed a system-space solution for Android's 10 ms Problem.\n\nInterested parties should read:\n\nhttps://superpowered.com/android-audio-low-latency-primer\nhttps://superpowered.com/superpowered-android-media-server\n\n\n# Supported Platforms\n\nSuperpowered is cross-platform: ALL SUPERPOWERED C++ CODE CAN BE COPY-PASTED between Android, iOS, macOS, tvOS, Linux and Windows.\n\n\n# Folders\n\n- /Superpowered\n\n\tThe SDKs (static libraries and headers).\n\n- /License\n\n\tContains the license document and Superpowered logo assets.\n\n- /Examples_Android\n\n\tExample projects for Android.\n\n- /Examples_iOS\n\n\tExample projects for iOS.\n\n- /Examples_Linux\n\n\tExample projects for Linux.\n\n- /Examples_tvOS\n\n\tExample projects for tvOS.\n\n- /Examples_Windows\n\n\tExample projects for Windows.\n\n- /Examples_macOS\n\n\tAmbisonics (b-format) implementation based on the Superpowered Spatializer.\n\n\n# Example Projects\n\n#### /Examples_Windows/SuperpoweredExample.sln\nFour simple Universal Windows Platform example projects in a single Visual Studio solution. Shows how to:\n\n- Set up audio I/O.\n- Use a single player to play an MP3 bundled with an app.\n- Use a single player to play HLS content.\n- Record the microphone input using Superpowered Recorder.\n- Use a single effect (input -> fx -> output).\n\n#### /Examples_iOS/SuperpoweredCrossExample, /Examples_Android/CrossExample\nA fully-functional DJ app project example. Shows how to:\n\n- Set up audio I/O.\n- Set up two players.\n- Sync them together.\n- Apply some effects on the master mix.\n- Use Objective-C++.\n\n#### /Examples_iOS/SuperpoweredFrequencyDomain, /Examples_Android/FrequencyDomain\nSimple time domain to frequency domain transformation with buffering and windowing. Shows how to:\n\n- Set up audio I/O.\n- Use the SuperpoweredFrequencyDomain class.\n- Process the magnitudes and phases of the audio input.\n\n#### /Examples_iOS/uperpoweredHLSExample, /Examples_Linux/src/hls.cpp\nHTTP Live Streaming example project.\n\n#### /Examples_iOS/SuperpoweredOfflineProcessingExample, /Examples_Linux/src/offlineX.cpp\nAdvanced example. Decodes an audio file, applies an effect or time stretching and saves the result in WAV. Shows how to:\n\n- Set up the Superpowered Decoder.\n- Apply a simple effect.\n- Use the time stretcher with an efficient dynamic memory pool.\n- Save the result in WAV.\n- Directly read from the iPod music library.\n- Use the offline analyzer to detect bpm and other information.\n\n#### /Examples_iOS/SuperpoweredFrequencies\nSimple 8-band frequency analyzer. Shows how to:\n\n- Mix Swift and Objective-C++ in a project.\n- Use the Superpowered BandpassFilterbank.\n\n#### /SuperpoweredPerformance (iOS)\nIt compares several Superpowered features to Core Audio.\n\n- Shows the differences between Superpowered and Core Audio.\n- Syncs effects to the player&#39;s bpm.\n- Shows how to use Objective-C++ in an Objective-C project.\n\n\tSwift note:\n\tWe have also tried creating this project in Swift, but it&#39;s not complete for audio and several features were impossible to implement (such as proper performance measurement). Swift is not designed for real-time audio. Fortunately, Objective-C++ files work great in Swift projects.\n\n#### /Examples_Android/SuperpoweredEffect\n\nShows how to use a single effect (input -> fx -> output).\n\n#### /Examples_Android/SuperpoweredPlayer\n\nShows how to use a player (for local, progressive download or HLS playback).\n\n#### /Examples_Android/SuperpoweredRecorder\n\nShows how to record the microphone input using Superpowered Recorder.\n\n#### /Examples_macOS/ambi (OSX)\nSimple ambisonics implementation based on the Superpowered Spatializer.\n\n#### /Examples_Android/SuperpoweredUSBExample\nThis project comes with two example apps, a simple and a complex example app.\n\n##### Simple USB Example App:\n\nThe simple example app demonstrates an easy audio setup, similar to how iOS handles USB audio devices. It also receives and displays MIDI. The audio functionality of the simple example app will cover most mobile audio use cases.\n\n##### Complex USB Example App:\n\nThe complex example app demonstrates full USB audio discovery, for the use case of sophisticated DAW and recording apps. It displays the various input and output options, audio paths and hardware controls of a USB audio device. Hardware controls can be manipulated and advanced thru audio paths can be enabled.\n\nIf an audio output is selected without an audio input, the complex example sends a sine wave to every output channel. If both audio output and audio input are selected, then loopback or round-trip latency measurement are available.\n\nThis means that the complex example app is also a testing tool to discover a USB audio device\u2019s advanced features, test audio quality, glitches and latency.\n\n###### Remarks:\n\nSuperpowered USB Audio classes for Android are compatible from Android 19 (KitKat 4.4) onwards. That\u2019s the first Android version where proper scheduling priorities were implemented for low latency audio. This covers more than 75% active Android devices today.\n\n\n# Android Studio\n\nBefore running any Android example project, please set up the appropriate Android SDK and NDK paths in File - Project Structure... Furthermore, turn off Instant Run in the settings, because the Instant Run feature of Android Studio is not compatible with native C++ Android projects.\n\n\n# How to create a Superpowered project with Android Studio\n\nPrerequisites: latest Android SDK, Android NDK, Android Studio installed. Steps:\n\n1. Create a new project in Android Studio.\n2. Create the cpp folder inside the project&#39;s folder: app/src/main/jni\n3. Copy the contents of the following files from one of the example projects: gradle/wrapper/gradle-wrapper.properties, build.gradle, app/build.gradle, app/CMakeLists.txt\n4. Open build.gradle (Module: app), and change the applicationId\n\n\n# Support\n\nSuperpowered offers multiple support options.\n\nDeveloper Documentation (C++ and JavaScript): https://docs.superpowered.com\n\nEmail: support@superpowered.zendesk.com\n\nKnowledge base: https://superpowered.zendesk.com/hc/en-us\n\nStackOverflow: https://stackoverflow.com/search?tab=newest&q=superpowered\n\nYouTube: https://www.youtube.com/playlist?list=PLtRKsB6a4xFMXJrZ9wjscOow3nASBoEbU\n\nPaid support options: https://superpowered.com/support\n\n\n# Licensing\n\nFor details, please see: https://superpowered.com/licensing\n\nFor licensing inquiries, please email licensing@superpowered.com.\n\n\n# Custom Application Development Services\n\nSuperpowered offers custom development services focusing on low-latency, interactive audio applications for mobile, web, desktop and embedded.\n\nFor development inquiries, please email hello@superpowered.com.\n\n\n# Contact\n\nIf you want to be informed about new code releases, bug fixes, general news and information about Superpowered, please email hello@superpowered.com.\n\nFor licensing inquiries, please email licensing@superpowered.com.\n\n\n# Notes\n\nSuperpowered FFT benefits from ideas in Construction of a High-Performance FFT by Eric Postpischil (http://edp.org/resume.htm).\n\nThe Superpowered MP3 and AAC decoder benefits from optimizations by Ken Cooke.\n\nSuperpowered version 2.5.1\n"
 },
 {
  "repo": "bitpay/php-bitpay-client-v2",
  "language": "PHP",
  "readme_contents": "<img src=\"https://bitpay.com/_nuxt/img/bitpay-logo-blue.1c0494b.svg\" width=\"150\">\n\n# BitPay PHP Client\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](https://raw.githubusercontent.com/bitpay/php-bitpay-client-v2/master/LICENSE)\n[![Packagist](https://img.shields.io/packagist/v/bitpay/sdk.svg?style=flat-square)](https://packagist.org/packages/bitpay/sdk)\n[![Total Downloads](https://poser.pugx.org/bitpay/sdk/downloads.svg)](https://packagist.org/packages/bitpay/sdk)\n[![Latest Unstable Version](https://poser.pugx.org/bitpay/sdk/v/unstable.svg)](https://packagist.org/packages/bitpay/sdk)\n\nFull implementation of the BitPay Payment Gateway. This library implements BitPay's [Cryptographically Secure RESTful API](https://bitpay.com/api).\n\nOur Lite version will most likely be all you need to integrate to your site, available [here](https://github.com/bitpay/php-bitpay-light-client)\n\n## Getting Started\n\nTo get up and running with our PHP library quickly, follow [The GUIDE](https://github.com/bitpay/php-bitpay-client-v2/blob/master/GUIDE.md)\n\n## Support\n\n* https://github.com/bitpay/php-bitpay-client-v2/issues\n* https://support.bitpay.com\n\n## Contribute\n\nTo contribute to this project, please fork and submit a pull request.\n\n## License\n\nMIT License\n\nCopyright (c) 2019 BitPay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
 },
 {
  "repo": "livz/cryptography",
  "language": "Python",
  "readme_contents": "Cryptography\n------------\nThese are solutions to the programming assignments for University of Maryland's Cryptography class on Coursera.\n\n    The course session ended January 25th 2015.\n\nhttps://class.coursera.org/cryptography-001\n\nGreat course and fun challenges!\n\nNOTICE\n------\n\nThese solutions are for reference only and should not be viewed by students currently enrolled in the course. Students who view solutions to homework and programming assignments that they have not yet completed deprive themselves of learning and understanding.\n\n***If you read these solutions before completing the course, you will diminish the course's value for yourself and others.***\n\n\n\n"
 },
 {
  "repo": "grocid/libPQP",
  "language": "Python",
  "readme_contents": "# libPQP - a Python post-quantum library\n\n*Update 8 September 2016*: Current version of libPQP is deprecated due to a [newly published attack](http://eprint.iacr.org/2016/858.pdf). Possible mitigations:\n* Forward-secrecy method where the secret key and corresponding public key gets updated over short intervals.\n* Automatically reject any message which is decoded with higher error rate than some constant t, where t implies a negligable decoding error.\n\nThis is a simplistic prototype of a post-quantum cryptography library in Python. PQP stands for Post-Quantum PGP. The library is not production ready and should not be used in a real-life context, but works fine for testing purposes. The plan is, once the code has been audited, to translate it to Javascript and create a webapp.\n\nIn this prototype, the focus has mainly been on making the QC-MDPC part efficient and not the actual protocol. Hence, you may find vulnerabilities in the current implementation of the protocol. Also, the primitives used in the code are not the ones mentioned below. This prototype uses:\n\n* AES-256(m, k, iv) as symmetric cipher,\n* SHA-256(token + salt) as PBKDF2,\n* A truncated SHA-512(token + salt) for iv.\n\nThe final product will use Salsa-20 as symmetric-cipher primitive and Poly1305 for authentication purposes. Moreover, PBKDF2 or similar will be used for symmetric-key generation.\n\nSpeed-ups in the decoding use the fast fourier transform (FFT) to achieve O(n log n) complexity in modular polynomial multiplications, instead of O(n\u00b2). Because the FFT implementation in Numpy is restricted to certain lengths (multiples of powers of 2), we use [pyfftw](https://pypi.python.org/pypi/pyFFTW) which is a wrapper for [FFTW3](https://github.com/FFTW/fftw3). FFTW3 implements Winograd's FFT algoritm and supports prime-length blocks. See below for known vulnerabilities.\n\nBelow are given the proposed parameters for rate R = 1/2.\n\n| Public-key size | Private-key size |  Rate          | Error weight  | Bit security |\n| ---------------:|-----------------:| --------------:|--------------:|-------------:|\n|      4801       | 9602             |     1/2        |     84        |   80         |\n|      9857       | 19714            |     1/2        |     134       |    128       |\n|       32771     | 65542            |     1/2        |     264       |   256        |\n \nSince the encrypted token is a codeword of length 9602 (for 80-bit security), we add approximately 1200 bytes of data to the ciphertext. Apart from this, a 32-byte MAC is included. This inflates a (padded) message of size M to size 1232 + M. For higher security levels, the inflation will be larger \u2014 but still constant. In the DER format, the inflation is about 35 %.\n\n# What is post-quantum cryptography?\n\nToday, most security assertions depend on primitives based on number theory. In principle, all of these primitives stand and fall on the problem of factoring integers. In the 1980's, a theoretical model of a computer that exploits certain quantum mechanical effects to achieve better complexity in certain classes of problems (BQP) was proposed. It so happens that the problem of factoring integers is contained in this class. Such a computer, called a quantum computer, can factor any integer N in time polynomial to the number of bits in N. This poses an actual problem for the security industry because RSA, ECC and DH, to name a few, can be broken efficiently. In turn, such a break causes the whole security architecture, upon which the secure internet is built, to collapse. Even symmetric primitives, such as AES, are subject to quantum attacks. However, the impact is much less severe; the speed-up in attacks is only a square-root factor.\n\nTo remedy the problem of quantum attacks, post-quantum cryptography was proposed. There has been many candidates, often based on so-called NP-complete problems. One such candidate is McEliece public-key cryptosystem, which is based on a hard problem called random linear decoding. Most of the linear-decoding problems are hard, but we should point out that some linear codes with special properties are very easy to decode. McEliece PKC extends this idea by defining such an easily decodable linear code, which becomes the private key. Then, a scrambled (random-looking) version of the linear code is used as public key. This faces the holder of the private key with an easy problem, but the attacker faces a hard problem.\n\n```\n1. Generate a linear code with generator matrix G (usually a Goppa code).\n2. Compute G' = S \u00d7 G \u00d7 P, where S is an invertible matrix and P a permutation matrix.\n3. Return keypair G, G'\n```\n\nSuppose Bob wants to send Alice a message m. To encrypt, he does the following:\n\n```\n1. Retrieves Alice's public key G'.\n2. Compute ciphertext c = m \u00d7 G' + e and send it to Alice\n```\n\nNote that these operations require basically no work at all, so encryption is very fast. Now Alice receives the ciphertext c.\n\n```\n1. Alice obtains c. Knowing S, G and P, she computes u = c \u00d7 inv(P) = m \u00d7 (S \u00d7 G) = (m \u00d7 S) \u00d7 G + e \u00d7 inv(P).\n2. Using the generator matrix G (which defined an efficiently decodable code), she can decode m \u00d7 S.\n3. Having c' = m \u00d7 S, the message is formed by removing the S, i.e., c' \u00d7 inv(S) = m \u00d7 S \u00d7 inv(S) = m.\n```\n\nThe QC-MDPC McEliece is a bit different, but the principle is the same. Instead of using matrices, it operates on polynomials (or, equivalently, circular matrices). Here, the private key consists of two sparse polynomials H\u2080 and H\u2081, which can be used to perform efficient decoding. H\u2080 and H\u2081 form the private key. The public key is H\u2080 \u00d7 inv(H\u2081), which is not sparse and (presumably) cannot be used for efficient decoding. Encryption and decryption is done is similar ways to the above.\n\n\n# High-level description\n\n###The sender side\n\nIn this section, we will briefly describe the protocol. Much like a Fujisaki-Okamoto transform, it contains both an asymmetric part and a symmetric one. Consider the following scenario. Assume that Bob wants to send Alice a message. Denote Alice's keypair (pubkey, privkey). Bob takes the following steps: \n\n```\n1. Bob picks a random token T.\n2. He then uses Alice's public key denoted pubkey and encrypts the token T using QC-MDPC McEliece.\n3. The token T is used to generate the symmetric key k\u2081 and the MAC key k\u2082 (PBKDF2).\n4. The error vector used in the second step is concatenated with the message and a MAC is generated using k\u2082.\n4. The message and the MAC are then encrypted with the symmetric key k\u2081.\n5. The ciphertext is the concatenation of the encrypted token and encrypted message + MAC.\n```\n\nThe ciphertext can now be distributed to Alice, using arbitrary means of communication. Below is a graphical interpretation of the above steps.\n\n\n![protocol sender](https://raw.githubusercontent.com/grocid/encrypt.life-python/master/sender.png)\n\n###The receiver end\n\nNow Alice wants to decrypt the message sent by Bob. She performs the following steps in order to do so:\n\n```\n1. Alice decrypts the encrypted token T using her private key privkey. In the decryption, the error vector is determined.\n2. Using the decrypted token T, she derives the same symmetric key k\u2081 as Bob and decrypts the message.\n3. The message and the MAC are extracted.\n4. The MAC of the message and error vector is verified using the key k\u2082 derived from the token.\n5. If the verification returns True, Alice accepts the message. Otherwise she rejects it.\n```\n\nThis completes the outline of the protocol. Below is a graphical interpretation of the above steps.\n\n![protocol receiver](https://raw.githubusercontent.com/grocid/encrypt.life-python/master/receiver.png)\n\n##Key format\n\nThe keys are encoded in Base64 and ASN.1, just like the normal ascii-armored keys used in public-key cryptography. The public-key structures contains only the generator polynomial G.\n\n```\nclass ASN1PublicKey(pyasn1.type.univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('G',     pyasn1.type.univ.BitString())\n    )\n```\n\nA typical (encoded) public key has the following appearance:\n```\n-----BEGIN PQP PUBLIC KEY-----\nMIICXgOCAloHMFAZsKjyqD4MKBPFkLCdUBAqC6rY4jdlOk/RQc4MiGfkUSw6hBh41eFa1XogH9MN\nb49TPLQRZYBXygp7eGP1oUM4PqvvdwwOlUoTPNdWYeAiqEpOe4nP7sq+fir54nl84I/ArMdCsUyo\nhgYtCVumC0XkYMlWW8tsW+RU94gQoQd7pLvgs98ah0gTNARRjW8/yALfGrB1pV7ZuLUScfNIFq8q\nZIZE8P80VK6kS0tcy+k4h9vHeB6QGPlPGB/jQ7mz8jDzw7v3m5QfnS1nlHvBSYWU/hADIIy13uh2\nmEJmtIzDbWOZ7v4OJtDXrKgK9iMJ4OjCtntbmdAMSNwdMhNp2mH2O5a7b0MoELVILx6CTpjB64D2\ntoFwXwl867QEgBCk4imZHZxMgnLw9TxnM8g+5gQzfC5BCI6afaGS9lZXwbM+ssZN2DbRZIeVS7rI\n12nul2rqquMC0buMM0Yt6ebD3bMRTeuUY3KLmEkUVjn3fTg7YUm82UuyGmG3cKqB0AZb24yswXl7\nz3bOrMTMrggQXw0KPR3AoPh49+PG9pt9ySRp/9KZ8k+apXBtvxCOIx3J+6WYeB9zGTnu841jl+WD\nLTBW5ePqglxGjown9lZlmw2Rgpsl7o6wSG5lb/d+B6hTw8w6KIowsQywEyDuF45B7U6W5EE8kgS1\n9S01PKqkpYd9YV7oJzpYLFuS6dDW71WavV9DdW29uNOn5OlBAk79SbAjsliSojSVv5ZrYMPp16Sp\n0YOkRoH/WeLL+xBwJtqMNRii34nH/B45ibEibCbFpO4rEDUs01aYAA==\n-----END PQP PUBLIC KEY-----\n```\n\nThe private key contains the two secret-key polynomials H\u2080 and H\u2081. Because inversion takes quite a while to perform, the inverse of H\u2081 is also contained in the private-key structure. This is not necessary, since inv(H\u2081) is only used when deriving the public key.\n\n\n```\nclass ASN1PrivateKey(pyasn1.type.univ.Sequence):\n    componentType = namedtype.NamedTypes(\n        namedtype.NamedType('H0',    pyasn1.type.univ.BitString()),\n        namedtype.NamedType('H1',    pyasn1.type.univ.BitString()),\n        namedtype.NamedType('H1inv', pyasn1.type.univ.BitString()),\n    )\n```\n\nBelow is a typical private key given. As we can see, the elements H\u2080 and H\u2081 are very sparse. These polynomials could be encoded more efficiently, but we don't care too much about private-key size and is therefore left as is.\n\n```\n-----BEGIN PQP PRIVATE KEY-----\nMIIHGgOCAloHAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAEAACAAA\nAAAAAAAAAAAAAAQAAQAAAAAQAIAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAEAAAABAAAAAAAAAAAAAAEAAAAAAAABAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAEAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAI\nAAAAAAAAAAAAAAIAQAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAABAAAAAAgAAQAAAABAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA\nAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAIACAAAAAAAAQAAAAAAAAAAAAAEAAAAAAAAACBAAAAA\nAAAIACAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAA\nAAAAAAAACAAAAAAAAAAAAABAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAOCAloHAAAAAAAAAAAABAAA\nAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAABAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAIAAABAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAABAAAAA\nAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAQAAQgAAAAAAAAAAAA\nAAgAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAIAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAEAAAAAAAAAIAAAAAAAAAAA\nAAAAAAAAAAAAAABAAAAAAAAAAAAAIAAAAABAAAAEAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAEAAAAAAAIAAAAAAAEIAAEAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAABAAAABIAAAAAAAAAAQAAAAABAAAAAAAAAAAAAAAAQAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAOCAloHPmFZHOhZjZWveH7OKtPghL5WWVE2/JctV4GYBnliCjZ3\nqyR/x741dDTCa8O1vAq0HaezSJL0H4rehid7KaLkQ4OTwwbwk22nLuQIi6ShXYCL1Tlbd4POVxGa\nRSQn/zQjIGGZ009mNraWv+MyyNDE5WMfl0VqcjYhYacAgf7NXc3tUHKXCYHxzf9P3IbQvwFUOTUC\nA2x4kI0yGaBs2Y/wtJkSkvsayxlSqNIu8Ob5I3aFqndhVLvlKgsG00iLzLLFRqSYTCeYnM1pV9Mv\nZgRM5Esdv/O9XNcdKMTGRcV357jqdN+MvJhxitmyvIUpez9kh6+yt+PRtXUzWyVs2x6mf/OScL5f\nHznX3uePZl02G4ug/ro3eh/T8wjC9j6CtX3WgnqYKo2n68+fvt6EaEL7lZoMnVgTHHwx1HuQl0pl\nOEj2WnwHcAuYleOrNtKMtDpji0e90cXGURujMymS58ZNCyHdX7qCm7MlfmS0l6YZ/my8vRGxPG83\nqksVuNMvB9dKEzpTzWLIlygMDvjzn9GN/071iRp9lNaPliZD4x8Dt6d4QS3pOUCw/oPWNUCHJUOW\ndBUO5ziqZ+4Xt68Gce4FB7/jb2ejsAPstzzrpLKvvpmo4FL+ibx17TnbEhyNlJ+N94CQ+TSELzqi\nQHzg3PtOxZOPxbT5RQSkSQjVIaUH6/k2TC20iorr6gsH8Oogz24to+E41aZT0NBzxrZvuI/yuB0N\nXAT/wwcIth3UVQoT5Y0lnXVUKnBF89PHUayLawWgxPiDx5EHhjsWqyB/G/VB2ZhFx6qnfE+qAA==\n-----END PQP PRIVATE KEY-----\n```\n \n The messages are structured in a similar way. The encrypted token (C\u2080, C\u2081) is stored in two separate Bitstrings and the symmetric ciphertext are stored as an OctetString.\n \n ```\n class ASN1Ciphertext(pyasn1.type.univ.Sequence):\n     componentType = namedtype.NamedTypes(\n         namedtype.NamedType('C0',    pyasn1.type.univ.BitString()),\n         namedtype.NamedType('C1',    pyasn1.type.univ.BitString()),\n         namedtype.NamedType('Sym',   pyasn1.type.univ.OctetString()),\n     )\n ```\nWe encrypted the message \n```\nthis is a really secret message that is padded with some random.\n```\nand put it into the ASN.1 format. Below is the ciphertext.\n \n ```\n-----BEGIN PQP MESSAGE-----\nMIIFHgOCAloHOjScypeSXUoEDjfC+E3GGYbQ7t2QQ8Z7LtfPG0SOjySJWuWszQ2F593vDr41hQFV\ndpdgSElPrWMiAxhqZ11fj3DVXCTZtu5DwXBijtVKg55xs/fu9rh6RvywIKdRLTpxJfVrN1oGA7rs\noaPvToZPOziXdymst4Z3dDc5vcyPORQXZz3KmhLKowFtrHpPx7HMVdi2iXy2ohKGBafdtpZsOHek\nK8JgtLQhlC/cQbXkd5uWniWn/qSei6zKVpOCO7PvqLadJCJI2rufue2Lie+AmQGVmn4DK8X5c+I8\n4BEVTY6PtZ819vyQmOARO0qSNr/6qiV0u1X7VFLGw+tvYjrDAvmiWTujQ7uY9Qs2ef0idk+4GmnK\nJqImt+ExnKedH8O5NWxZewHnFoU23gL3Qz1eODnHYVOQxfvUtQnuZMRuHgbrc+av22pi0C+aj0qR\nJW4vcqNEazeD6usot28Uo7tpnqs1kAssHqGAQ0rAtDkdogpq5ntQidb4yheaj1orgcT7/VyugKbH\nDi0NeyoG/wo9vi5aCDlw0e0KPHKat0wvR21FYSCqtd9Gmc6/McDGYTwaJLZ4NK53ETnaJh46X9jd\nOZTL9eSOKrbElZjlIMWAVXZgU465lGoENZVDNCV9AgzMsku0o/VV2Djh8Hw/Ggx0sAlpbjc+AuD4\nxEa3gETXKdmsq/PjATe9c9+5I0oO17rIjwlc+Wc5w4NGJuBrm0MNtkzEzVyteXsn00njiNdrxRks\ngaUcpkwleLawIZh7gs1X3SRI7+VWvBy/8t/n9LxERC6/rkyJbC5kAAOCAloHHtIcwG1S+00bmFb8\nC5uYTW47XcP/eP+U9tjVswkgj/wu/RjmqGuGISw8ys2vmi79429gvXQRwLiH3NaPP8WpF2vo52H0\ngVVLYqmWtMG5gLKwxEFr22OGe/nNnj49Rk57nhpp+i2EUFmWbigrAcClcVxeB5BYlxlM08VeTJeU\nOeRlRJaaBFk2GRETnAPST3RsyLwz9dW0njZkeQGPG+rIXp5J/exUsn+WSq/omYivTujCHACZ1Fxt\nBx0fD1PXxGVhGrXodENAn1R0AeG/E3g/M++vfTaG2nba+kkO/2lrMKfWTOp/cvpyzHk9gNDc5EXM\nA1MqUI7z9/defLHVIwo6u5xHjAx3c+qZ2YwEJmaar7c70NUfjvOPhGQsH9Pcs18BVv7WyswDT8/C\nwtKCv9PY5BVUBvp2wKCfmhuPdNYxzA3F/zPL+ryFUjMrdBnWmYaI1hQXdeUY0DzM6mWPEfLgWnIG\nPKX6CmsbJNQs3+GC31ps7GkCZkYdBoSlBf9faFnLCzsx2AMKOx32ZKVyU4v0WzvRNF1VQyq6NQyh\nAp7phcIvq9DkBSdWe2pEpbctYbUqVLeZ5tpz0zCFWrdDHvvDSg4OA3J3QEvSA4V1fCzQY6QG9EGC\n8mlXorT+aKlvJz6gWOZcurwrM307cYOx9yC0QACQPItWXXt8E6fpXjxgJs4mMwnWGoW7H51xziRH\nm+VIP0qdHCvEzI2180qE0oEOfIh8MbLFWktovkjy94US6AGTxZ/GP2o8ALKvRfvB603X5m8PjBlj\nJGPyik2nqjqIJXK95F9omr4FgARgSUda/5bzJK/tJUuixFOWWaimI+WtgJDsIV8velkaaVvxL8xz\nK7PlOCNoMaZYC+z/GkenwwvNr0f+uGiPYShao0/Ie7NhC2C2tj61OENmc+OJ1zy1qLE1ApJOlVL3\nKHde\n-----END PQP MESSAGE-----\n```\n\n#Performance\nBelow is a graph of timings of my computer (Macbook Pro 15\" Retina 2 GHz Intel Core i7) running 1000 decryptions of a small plaintext (thus, isolating the asymmetric timing) using the same private key (\u03c3 = 0.0386, \u03bc = 0.493):\n\n![timings](https://raw.githubusercontent.com/grocid/encrypt.life-python/master/timings.png)\n\nHere is the output of encrypting and decrypting a 190 mb video file:\n\n```\n$ time ./pqp --encrypt libpqp.mov --pubkey pub --output libpqp.enc\nEncrypting: libpqp.mov\n\nreal   0m11.331s\nuser   0m9.293s\nsys   0m1.715s\n\n$ time ./pqp --decrypt libpqp.enc --privkey priv --output libpqp2.mov\nDecrypting: libpqp.enc\nMAC verified.\n\nreal   0m11.422s\nuser   0m8.633s\nsys   0m2.446s\n\n$ ls -la libpqp* \n-rw-r--r--  1 carl  staff  258900672 17 Jul 00:57 libpqp.enc\n-rw-r--r--@ 1 carl  staff  191652442 16 Jul 23:22 libpqp.mov\n-rw-r--r--@ 1 carl  staff  191652442 17 Jul 00:58 libpqp2.mov\n\n$ md5 libpqp2.mov \nMD5 (libpqp2.mov) = 88ebe9d8aa74ebba7c5de6faa048af46\n\n$ md5 libpqp.mov \nMD5 (libpqp.mov) = 88ebe9d8aa74ebba7c5de6faa048af46\n```\n\n#Command-line tool\nThe library can be invoked by a supplied CLI tool (the pqp file). Padding is not included, so some kind of PKCS padding will be added.\n\nTo generate a keypair, run the following command:\n```\npqp --gen [private-key file] [public-key file]\n```\nThis creates two files in the same folder containing the two keys.\n\nTo encrypt a file, call pqp as follows:\n```\npqp --encrypt [plaintext file] --pubkey [public-key file]\n```\n\nThis writes an ASN.1 encoded ciphertext to stdout. Appending --output writes to file:\n```\npqp --encrypt [plaintext file] --pubkey [public-key file] --outout [ciphertext file]\n```\n\nTo decrypt, invoke the following command. To write to file, use the above methodology.\n```\npqp --decrypt [ciphertext file] --privkey [private-key file]\n```\n\n#Installation\n\nBelow are the required steps to make libPQP run on Linux (tested on Ubuntu 16.04 Xenial):\n\n```\ngit clone https://github.com/grocid/libPQP.git\nsudo pip install numpy\nsudo pip install pycrypto\nsudo apt-get install libfftw3-dev\nsudo pip install pyFFTW\nsudo pip install pyasn1\n```\n\n#Possible vulnerabilities\n\n##Decryption oracle\nThe protocol can be designed using normal McEliece or Niederreiter. In case of McEliece, the error vector should be part of the authentication (for instance, generate MAC using a concatenation of message and error vector). Such a measure will mitigate the usual decryption oracle attack, described below.\n\n```\n1. Intercept an encrypted message.\n2. Pick a random bit of the ciphertext.\n3. Flip it. If decryption fails, this was not an error position.\n4. Repeat until all error positions have been unraveled.\n```\n\nObviously, there is an implicit assumption that the receiver will either reject any error larger than T or the decoder will fail (which rarely is the case).\n\nIf the protocol instead is designed using the Niederreiter model, the error vector will be/encode the token. In this case, there is no need to authenticate the error vector. Since any flipped bit in the ciphertext will cause the receiver to decode a different token, it will break the decryption oracle.\n\n##Timing attacks\n\nThis is a slight variation of the above. Instead of observing decryption errors, we measure the timing. There has been some effort in making decoding run in constant time. See [this paper](http://www.win.tue.nl/~tchou/papers/qcbits.pdf).\n\nThe decoding we use is probabilistic and susceptible to timing attacks. Below is an image with the timing attack implemented running 15 decryptions for each bit flipped.\n\n![timings](https://github.com/grocid/encrypt.life-python/blob/master/timingattack.png)\n\nHowever, in the PGP-like setting we do not worry too much about this.\n\n##Distinguishing attacks\n\nThe simplest imaginable distinguisher will detect a constant-error encryption with probability 1. \n\n```\n1. Pick a ciphertext block with block weight l and error weight w.\n2. Sum all symbols mod 2 and check if it equals (l + w) mod 2.\n```\n\nThe theory is described in more detail [here](https://grocid.net/2015/01/28/attack-on-prime-length-qc-mdpc/). There is an easy counter-measure; we can thwart this attack completely by picking the error weight odd with probability 1/2:\n\n```\n1. Flip a balanced coin.\n2. If the coin shows tails, pick a position at random and flip it.\n```\n\nThis attack is contained in [distinguisher.py](https://github.com/grocid/encrypt.life-python/blob/master/distinguisher.py).\n\n##Squaring/subcode attacks\n\nSquaring attacks exploit that (the now deprecated) p = 4800 = 2\u2076 \u00d7 75. By squaring the polynomial, the vector space decreases in size by a factor 2 (which can be done six times). It may also lead to collisions in the error vector, causing a decrease in error weight. This allows an attacker to go quite far below 80-bit security. See [this paper](http://link.springer.com/article/10.1007/s10623-015-0099-x).\n\nThis attack can be mitigated by picking a prime block length p. In the example above, p = 4801.\n\n#Academic papers\n[MDPC-McEliece: New McEliece Variants from Moderate Density Parity-Check Codes](https://eprint.iacr.org/2012/409.pdf)\n\n[Lightweight Code-based Cryptography: QC-MDPC McEliece Encryption on Reconfigurable Devices](https://www.date-conference.com/files/proceedings/2014/pdffiles/03.3_1.pdf)\n\n[Squaring attacks on McEliece public-key cryptosystems using quasi-cyclic codes of even dimension](http://link.springer.com/article/10.1007/s10623-015-0099-x)\n\n#Acknowledgements\nMiroslav Kratochvil (creator of [codecrypt](https://github.com/exaexa/codecrypt)) for pointing out a weakness in the protocol."
 },
 {
  "repo": "dhvanilp/Hybrid-Cryptography",
  "language": "Jupyter Notebook",
  "readme_contents": "# Hybrid-Cryptography\n\n#### This repository contains an implemntaion of this [Paper](https://pdfs.semanticscholar.org/496c/3aa8c731e93deac7a5ad3b1fbd4dd264b11a.pdf)\n\n## Abstract\nThis  paper  mainly focusses   on   the   implementation   of   a   system   capable   of encryption  and  decryption  of  multimedia  data  (Text,  Images, Videos,  Audio  etc.)  using  a  hybrid  model  based  on  the amalgamation  of  symmetric  encryption  techniques  such  as AES and  asymmetric  techniques  such  as  ECC.\n\n## Implementation\nThe encryption process occurs as follows, and the decryption process is the reverse of the same.\n![Image](./encrypt.png)\n\n## Enigma\nThis is an apllication made using Django and NodeJs, which is based on encryption and decryption process mentioned in the paper.\n\n### Run the Django application in virtual environment inside Enigma directory\n`python manage.py runserver`\n\n### Also run the node.js server from Enigma/nodejs\n`node index.js`\n\n### So this is what you need to do after both servers are live:\n* Open 2 browser tabs. \n* Enter the sender and receiver nickname in each of the respective tabs.\n* Now work with the sender side first, click send\n* Enter the exact nickname of the receiver in the form.\n(The receivers public key should automatically show up, also the send button would show up. If not, then re run from step 1)  \n* Now work with the receiver side, click receive, enter the ecc private key of the receiver and click receive button.\n(It converts the private key to public key and sends the ecc public key of that receiver to the nodejs server)\n(The receivers public key should automatically show up on the sender's tab, also the send button would show up. If not, then re run from step 1)\n* Enter the AES private key, upload your file and send.\n\nThe rest of the things will be handled by the servers. And the download link of the decrypted file will be available on the receiver side with appropriate alerts.\n\n## Team Members\n* [Dhvanil Parikh](https://github.com/dhvanilp), 16IT217\n* [Shreyas Shankar](https://github.com/shrey920), 16IT138\n"
 },
 {
  "repo": "pclubiitk/puppy-love",
  "language": "TeX",
  "readme_contents": "Puppy Love\n==========\n\nThe modern and better avatar of Programming Club's [puppy-love](https://github.com/pclubiitk/valentine).\n\nPuppy Love is a platform for shy people to reach out anonymously to their crush. They can sign up and mark up to 4 of their crushes. On Valentine's day, the platform will match them anonymously, and will inform them if both of them like each other.\n\nUsed in IIT Kanpur from 7th to 14th February, 2017, witnessing 1800+ registrants.\n\n![alt tag](https://raw.githubusercontent.com/pclubiitk/puppy-love/master/cover.jpg)\n\nAlgorithm designed from the ground up, with a completely secure computation model which guarantees the following:\n\n* The identities of your choices are never, *ever*, exposed in plain text. Not even at the server.\n* The server, even while matching couples, can *not* know what the choices were.\n* The other person will only know whether you liked him/her or not if that person liked you as well.\n* The server will know whether you matched with some person or not, but no more.\n* The above guarantees are independent of the code running on the server, and can be verified on the browser.\n\nBlog posts describing the algorithm:\n* [Part 1 - Introduction](https://sakshamsharma.com/2016/10/puppy1/)\n* [Part 2 - Matching choices](https://sakshamsharma.com/2016/11/puppy2/)\n* [Part 3 - Restricting number of choices to 4 anonymously](https://sakshamsharma.com/2016/12/puppy3/)\n\nImplementation using:\n\n* Golang (iris)\n* TypeScript\n* Angular2\n* Bootstrap\n* Docker\n* Docker Compose\n\n# Requirements\n* golang\n* NPM\n* Nginx\n* Docker\n\n# Installation / Setup\n\n## Server deployment\nIt is really easy. Like, **really**.\n\n```\n# You need docker-compose 1.10 or higher.\n# Use the release script version from their website for installation.\ndocker-compose up\n\n# Use the following to stop a container\ndocker-compose stop <container_name>\n\n# Use the following to start a container\ndocker-compose start <container_name>\n\n# Use the following to recreate and run a container\ndocker-compose up -d <container_name>\n```\n\n## Development environment setup\nYou shall need docker, golang, nodejs, nginx and npm for the following steps.\n\n**Note**: Arch users often have gccgo installed. Please use the package `go` from the main repositories instead.\n\n```\nmkdir -p $HOME/go/src\n\n# Change .bashrc to .zshrc depending on your shell\necho \"export GOPATH=$HOME/go:$GOPATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\n```\n\nGet the source code.\n\nYou can later symlink the following folder into a convenient location.\nJust make sure that the actual folder (not symlink) is in the go directory.\n```\ngit clone https://github.com/pclubiitk/puppy-love $HOME/go/src/github.com/pclubiitk/puppy-love\n```\n\nInstall glide\nWe use `glide` to maintain dependencies. `go get` is not recommended.\n```\ncurl https://glide.sh/get | sh\ncd $HOME/go/src/github.com/pclubiitk/puppy-love\n```\n\nSet up nginx\n```\nsudo cp puppy.nginx.conf /etc/nginx/sites_enabled/\n```\n\nEdit /etc/hosts file\n```\n# Map dev.puppy.pclub.in to 127.0.0.1\n# It should have a line saying:\n# 127.0.0.1 <something> <more> dev.puppy.pclub.in\n```\n\nGet the essential dockers\n```\nsudo systemctl start docker\ndocker run --name puppy-redis -p 6379:6379 -d redis\ndocker run --name puppy-mongo-db -p 27017:27017 -d mongo \n\n# Optional (in place of the above command):\n# docker run --name puppy-mongo-db -p 27017:27017 -v $HOME/.mongodata:/data/db -d mongo \n```\n\nGet dependencies for backend\n```\nglide install\n```\n\nGet dependencies for frontend\n```\ncd views\nsudo npm install -g yarn\nyarn install\n```\n\n## Run services\n```\nsudo systemctl start nginx\n\n# These are not required if you just finished the above steps\ndocker start puppy-mongo-db\ndocker start puppy-redis\n```\n\n## Run puppy-love\n### Frontend\n```\n# Run frontend (inside folder views)\nyarn start\n\n# IFF production, use\nyarn build && python -m http.serve 8091\n```\n\n### Backend\n```\n# Build (inside puppy-love folder)\ngo build\n\n# Optional: These are needed for email verification to work\nexport EMAIL_USER=<your_iitk_username>\nexport EMAIL_PASS=<your_iitk_email_password>\n./puppy-love\n```\n\n# Setting up basic services\n### Log in\nYou should first log in as admin. A simple way to do that is the following:\n```\ncd scripts\n. ./login.sh admin passhash\n# Use curl / http normally, but use $CADMIN cookie at the end of your command\n# Example: http get 'localhost:3000/admin/...' $CADMIN\n```\n\n### Add a user\nNote: This requires you to be logged in as $CADMIN\n```\ncd scripts\n./newuser.sh\n# Follow the commands\n# For testing, use your own IITK email address for all users\n```\n\n### Set up compute table\nDo this AFTER setting up all users. Whenever you add a new user, this has to be run.\n```\nhttp get 'localhost:3000/compute/prepare' $CADMIN\n```\n\n### Using the frontend\nOnce you've created the users, you will need to register them. Open the UI at dev.puppy.pclub.in, and go to signup. You can only register for users which you have created. Get your auth token via email, and then fill up the remaining fields.\n\n### Notes\n* You cannot login as admin on the frontend UI.\n* You can also check mongoDB's data for the auth token for the user.\n* Doing the above will mandate marking the user as `non-dirty` in the MongoDb users table manually.\n\nYou can open the local website at [dev.puppy.pclub.in](dev.puppy.pclub.in)\nThe backend will be listening on the printed port number.\n\n### Contributors\nThe following people have contributed to this project in various capacities:\n* [Saksham Sharma](https://github.com/sakshamsharma)\n* [Yash Srivastav](https://github.com/yashsriv)\n* [Kunal Kapila](https://github.com/kunalapila)\n* [Vinayak Tantia](https://github.com/vtantia)\n* [Milind Luthra](https://github.com/milindl)\n"
 },
 {
  "repo": "chavaone/coursera-crypto-scripts",
  "language": "Python",
  "readme_contents": "Coursera Cryptography Course Scripts\n=======================\n\nThese are the scripts I've used to solve Coursera Cryptography Course programming tasks.\n\n#Week 1\nA bunch of 10 cypher-text encrypted under the same key is provided. We have to decrypt another cypher-text. The idea is that if we exor two cypher-text we get the exor of the corresponding plain-texts. The combinations of two exored ASCII characters is quite limited and in particular when one of this characters is a white space the number of possibilities is reduced to one. The idea is to calculate the exor of every cypher-text combination and then we compare the obtained results.\n\nFor example if all the combinations of the message 1 with the other message get in position one a combination that is only possible with one space, we will know that in that particular position the message 1 has an space. In addition we know what letter is in that position in the other message by looking the possible ASCII characters combinations.\n\n#Week 2\nWe have to implement CBC and CTR block cyphers.\n\n#Week 3\n\n#Week 4\nWe have to decrypt one cypher-text by applying a padding oracle attack. The basic idea consists in that a server replies with two different ways if the padding is not correct or the message is not correct.\n\n#Week 5\nWe have to calculate the discrete log. of a particular big integer number. \n\n"
 },
 {
  "repo": "dusk-network/plonk",
  "language": "Rust",
  "readme_contents": "# PLONK \n![Build Status](https://github.com/dusk-network/plonk/workflows/Continuous%20integration/badge.svg)\n[![Repository](https://img.shields.io/badge/github-plonk-blueviolet?logo=github)](https://github.com/dusk-network/plonk)\n[![Documentation](https://img.shields.io/badge/docs-plonk-blue?logo=rust)](https://docs.rs/plonk/)\n\n\n_This is a pure Rust implementation of the PLONK proving system over BLS12-381_\n\n\nThis library contains a modularised implementation of KZG10 as the default\npolynomial commitment scheme.\n\n**DISCLAIMER**: This library is currently unstable and still needs to go through\nan exhaustive security analysis. Use at your own risk.\n\n## Usage\n\n```rust\nuse dusk_plonk::prelude::*;\nuse rand_core::OsRng;\n\n// Implement a circuit that checks:\n// 1) a + b = c where C is a PI\n// 2) a <= 2^6\n// 3) b <= 2^5\n// 4) a * b = d where D is a PI\n// 5) JubJub::GENERATOR * e(JubJubScalar) = f where F is a Public Input\n#[derive(Debug, Default)]\npub struct TestCircuit {\n    a: BlsScalar,\n    b: BlsScalar,\n    c: BlsScalar,\n    d: BlsScalar,\n    e: JubJubScalar,\n    f: JubJubAffine,\n}\n\nimpl Circuit for TestCircuit {\n    const CIRCUIT_ID: [u8; 32] = [0xff; 32];\n    fn gadget(\n        &mut self,\n        composer: &mut TurboComposer,\n    ) -> Result<(), Error> {\n        let a = composer.append_witness(self.a);\n        let b = composer.append_witness(self.b);\n\n        // Make first constraint a + b = c\n        let constraint = Constraint::new()\n            .left(1)\n            .right(1)\n            .public(-self.c)\n            .a(a)\n            .b(b);\n\n        composer.append_gate(constraint);\n\n        // Check that a and b are in range\n        composer.component_range(a, 1 << 6);\n        composer.component_range(b, 1 << 5);\n\n        // Make second constraint a * b = d\n        let constraint = Constraint::new()\n            .mult(1)\n            .public(-self.d)\n            .a(a)\n            .b(b);\n\n        composer.append_gate(constraint);\n\n        let e = composer.append_witness(self.e);\n        let scalar_mul_result = composer\n            .component_mul_generator(e, dusk_jubjub::GENERATOR_EXTENDED);\n\n        // Apply the constraint\n        composer.assert_equal_public_point(scalar_mul_result, self.f);\n        Ok(())\n    }\n\n    fn public_inputs(&self) -> Vec<PublicInputValue> {\n        vec![self.c.into(), self.d.into(), self.f.into()]\n    }\n\n    fn padded_gates(&self) -> usize {\n        1 << 11\n    }\n}\n\n// Now let's use the Circuit we've just implemented!\n\nlet pp = PublicParameters::setup(1 << 12, &mut OsRng).unwrap();\n// Initialize the circuit\nlet mut circuit = TestCircuit::default();\n// Compile/preproces the circuit\nlet (pk, vd) = circuit.compile(&pp).unwrap();\n\n// Prover POV\nlet proof = {\n    let mut circuit = TestCircuit {\n        a: BlsScalar::from(20u64),\n        b: BlsScalar::from(5u64),\n        c: BlsScalar::from(25u64),\n        d: BlsScalar::from(100u64),\n        e: JubJubScalar::from(2u64),\n        f: JubJubAffine::from(\n            dusk_jubjub::GENERATOR_EXTENDED * JubJubScalar::from(2u64),\n        ),\n    };\n    circuit.prove(&pp, &pk, b\"Test\", &mut OsRng).unwrap()\n};\n\n// Verifier POV\nlet public_inputs: Vec<PublicInputValue> = vec![\n    BlsScalar::from(25u64).into(),\n    BlsScalar::from(100u64).into(),\n    JubJubAffine::from(\n        dusk_jubjub::GENERATOR_EXTENDED * JubJubScalar::from(2u64),\n    )\n    .into(),\n];\nTestCircuit::verify(\n    &pp,\n    &vd,\n    &proof,\n    &public_inputs,\n    b\"Test\",\n).unwrap();\n```\n\n### Features\n\nThis crate includes a variety of features which will briefly be explained below:\n- `alloc`: Enables the usage of an allocator and with it the capability of performing `Proof` constructions and \n  verifications. Without this feature it **IS NOT** possible to prove or verify anything. \n  Its absence only makes `dusk-plonk` export certain fixed-size data structures such as `Proof` which can be useful in no_std environments where we don't have allocators either.\n- `std`: Enables `std` usage as well as `rayon` parallelization in some proving and verifying ops. \n  It also uses the `std` versions of the elliptic curve deps, which utilizes the `parallel` feature \n  from `dusk-bls12-381`. By default, this is the feature that comes enabled with the crate.\n- `trace`: Enables the Circuit debugger tooling. This is essentially the capability of using the \n  `TurboComposer::check_circuit_satisfied` function. The function will output information about each circuit gate until \n  one of the gates does not satisfy the equation, or there are no more gates. If there is an unsatisfied gate \n  equation, the function will panic and return the gate number.\n- `trace-print`: Goes a step further than `trace` and prints each `gate` component data, giving a clear overview of all the \n  values which make up the circuit that we're constructing. \n  __The recommended method is to derive the std output, and the std error, and then place them in text file \n    which can be used to efficiently analyse the gates.__\n- `canon`: Enables `canonical` serialization for particular data structures, which is very useful in integrating  this library within the rest of the Dusk stack - especially for storage purposes.\n\n\n## Documentation\n\nThere are two main types of documentation in this repository:\n\n- **Crate documentation**. This provides info about all of the functions that the library provides, as well\n  as the documentation regarding the data structures that it exports. To check this, please feel free to go to\n  the [documentation page](https://docs.rs/dusk-plonk/) or run `make doc` or `make doc-internal`.\n\n- **Notes**. This is a specific subset of documentation which explains the key mathematical concepts\n  of PLONK and how they work with mathematical demonstrations. To check it, run `make doc` and open the resulting docs,\n  which will be located under `/target` with your browser.\n\n## Performance\n\nBenchmarks taken on `Apple M1`, for a circuit-size of `2^16` constraints:\n\n- Proving time: `7.871s`\n- Verification time: `7.643ms` **(This time will not vary depending on the circuit-size.)**\n\nFor more results, please run `cargo bench` to get a full report of benchmarks in respect of constraint numbers.\n\n## Acknowledgements\n\n- Reference implementation AztecProtocol/Barretenberg\n- FFT Module and KZG10 Module were taken and modified from zexe/zcash and scipr-lab, respectively.\n\n## Licensing\n\nThis code is licensed under Mozilla Public License Version 2.0 (MPL-2.0). Please see [LICENSE](https://github.com/dusk-network/plonk/blob/master/LICENSE) for further info.\n\n## About\n\nImplementation designed by the [dusk](https://dusk.network) team.\n\n## Contributing\n\n- If you want to contribute to this repository/project please, check [CONTRIBUTING.md](https://github.com/dusk-network/plonk/blob/master/CONTRIBUTING.md)\n- If you want to report a bug or request a new feature addition, please open an issue on this repository.\n"
 },
 {
  "repo": "cryptohack/cryptohack-docker",
  "language": "CSS",
  "readme_contents": "# CryptoHack Docker Container\n\nA Jupyter notebook environment built for attacking crypto CTF challenges, with custom theming matching [CryptoHack](https://cryptohack.org).\n\n![screenshot](screenshot.png)\n\nIt comes with the following installed and integrated:\n - Sage 9 (based on Python3)\n - Pwntools\n - PyCryptodome\n - z3 Prover\n\n## Installation\n\nDownload and run with:\n```\ndocker run -p 127.0.0.1:8888:8888 -it hyperreality/cryptohack:latest\n```\nThen open 127.0.0.1:8888 in your browser.\n\n## Notes\n\nWe map to 127.0.0.1 on the host rather than the default 0.0.0.0 as Jupyter token authentication was disabled for the sake of convenience.\n"
 },
 {
  "repo": "highfidelity/qca",
  "language": "C++",
  "readme_contents": "Qt Cryptographic Architecture (QCA) version 2.0.3\n-------------------------------------------------\nDate: November 27th, 2010\nWebsite: http://delta.affinix.com/qca/\nMailing List: Delta Project <delta@lists.affinix.com>\n\nProject Lead/Maintainer (2003-current):\n  Justin Karneges <justin@affinix.com>\n  (March 2007 - August 2007 under Barracuda Networks employment)\n\nDevelopment, Documentation, Unittests (2004-current):\n  Brad Hards <bradh@frogmouth.net>\n\nSpecial Thanks:\n  Portugal Telecom (SAPO division), for sponsorship\n  Alon Bar-Lev, for smart card and design assistance\n  Jack Lloyd, for Botan and X.509 mentoring\n  L. Peter Deutsch, for the public domain MD5 implementation\n  Steve Reid, for the public domain SHA1 implementation\n  Jason Kim, for the CMS Signer graphics\n\n\nInstall\n-------\n  For installation or compiling instructions, see the INSTALL file.\n\n\nLicense\n-------\n  This library is licensed under the Lesser GNU General Public License.  See\n  the COPYING file for more information.\n\n\nChanges\n-------\n  New in 2.0.3\n  - Bugfix release, forward and backward compatible with 2.0.x\n  - Fix compilation when using Qt/Windows SDK\n\n  New in 2.0.2\n  - Bugfix release, forward and backward compatible with 2.0.x\n  - Fix compatibility with Qt 4.5 when QCA::Initializer appears before QApp\n  - Don't convert to secure memory when Hash::update(QByteArray) is used\n  - Use configure.exe instead of configwin.bat\n\n  New in 2.0.1\n  - Bugfix release, forward and backward compatible with 2.0.x\n  - Ability to build as a Mac framework (and build this way by default)\n  - On non-Mac Unix, the pkgconfig file is always qca2.pc, even in debug mode\n  - Certificates containing wildcards are now matched properly\n  - DirWatch/FileWatch now work\n  - Keystore writes now work\n  - Don't delete objects in their event handler (prevents Qt 4.4 warnings)\n  - Fix potential hang with TLS in server mode\n  - Windows version can be configured/installed using paths with spaces\n\n\nDescription\n-----------\n\n  QCA is a library that provides an easy API for a range of cryptographic\n  features, including SSL/TLS, X.509 certificates, SASL, OpenPGP, smartcards,\n  and much more.\n\n  Functionality is supplied via plugins.  This is useful for avoiding\n  dependence on a particular crypto library and makes upgrading easier,\n  as there is no need to recompile your application when adding or\n  upgrading a crypto plugin.\n\n  In order for QCA to be of much use, you'll want to install some plugins.\n\n  QCA was originally created to support the security needs of the\n  Psi XMPP/Jabber client project ( http://psi-im.org/ ).\n\n  API Documentation is located in the 'apidocs' subdirectory.\n\n\nHave fun,\n-Justin\n"
 },
 {
  "repo": "alphazero/Blake2b",
  "language": "C",
  "readme_contents": "# About\nBlake2b is a [high performance](performance.md) Java implementation of the **BLAKE2b** cryptographic hash function created by **Jean-Philippe Aumasson**, **Samuel Neves**, **Zooko Wilcox-O'Hearn**, and\n**Christian Winnerlein**. (See [Blake2 project site](https://blake2.net) for details and authoritative information about the BLAKE2b digest.)\n\nThis implementation was made with close attention to the reference `C` implementation of **Samuel Neves** (<sneves@dei.uc.pt>). The quite excellent [`Go` implementation](github.com/dchest/blake2b) by **Dmitry Chestnykh** was also reviewed and referenced for optimization inspirations.\n\nThis library is provided in 3 pure Java variants (`master`, `unsafe`, and `varhandles` branches). See the [performance](performance.md) document for details. (Note: `varhandles` and `unsafe` have equivalent performance.)\n\n![plot](benchmarks/unsafe.png)\n\n## Fidelity\nThis implementation is provided with a suite of tests miminally covering the reference implementation `KAT` and `Keyed-KAT`, covering basic digest and MAC features (respectively). These may be inspected in the `src/test/` source fork of this repository.\n\nAdditionally, a `C` test program emitting a tree based hash was used to confirm the `Blake2b.Tree` output. Augmenting the `C` test program to test *salt*, and *personal* is on the TODO list. But do note that these 2 features have ***not*** been tested yet, though the confidence level for these is fairly maximal. (It is on the TODO list.)  \n\n# License\nWritten by Joubin Mohammad Houshyar, 2014-2018\n\nTo the extent possible under law, the author has dedicated all copyright\nand related and neighboring rights to this software to the public domain\nworldwide. This software is distributed without any warranty.\nhttp://creativecommons.org/publicdomain/zero/1.0/\n\n# Features\n`Blake2b` provides full support for the algorithm per the reference `C` implementation on the `JVM`, as adapted for `Java` semantics.  \n\nThe `API` very closely follows the `MessageDigest`'s relevant `public` methods e.g. `void update (byte[] input, int offset, int len)`, etc. \n\nAs of now, fully configurable *Digest*, *MAC*, and *incremental hash (aka Tree)* are provided. \n\n(The parallel implementation of the algorithm is on the immediate TODO list.) \n\n# Installation and Use\n\n## Installation \n\nFirst you need to clone this repo and install the product in your local `.m2` repository. (Getting this project to a central maven repository is on the TODO list.)\n\nSo, clone it in some happy place:\n\n    git clone https://github.com/alphazero/blake2b\n\nGo there:\n    \n    cd blake2b\n    \nAnd build and (locally) install it:\n\n    mvn install\n\n### Linking\n\nTo include `Blake2b` as a dependency in your `Maven` project, add the following to the `<dependencies>`section of your project `pom.xml`:\n\n    <dependency>\n        <groupId>ove</groupId>\n        <artifactId>ove.blake2b</artifactId>\n        <version>alpha.0</version>\n    </dependency>\n\nIf you just want the `jar`, you can grab it from the project `target/` after `mvn install` or `mvn package`:\n\n    <blake2b-dir>/target/ove.blake2b-alpha.0.jar\n\n       \n## API\nThe hashing `API` is defined by the top level `Blake2b` interface. This interface is implemented by the `Blake2b.Engine` and it is indirectly accessible via the semantic inner classes of `Blake2b`.  These methods allow for both *\"streaming\"* and basic hashing of `byte[]` input data.\n\nThe `API` mimics the relevant sub-set of the standard Java `MessageDigest` class and `Blake2b.Param` implements the (tag) interface `AlgorithmParameterSpec`, as preparatory support for possible `JCA` compliance. But that is not on my TODO list as of now. But care has been taken to make that path easy for you, should you wish to do so yourself. \n\n*** A note regarding input constraint checks ***\n\nTypically one prefers a maximally defensive and pedantic implementation of functions that `assert` constraints on input arguments. But given that `Blake2b` is intended for high performance applications, the reference implementation (`Blake2b.Engine`) does not do so. So, pass in `null` and expect a `NullPointerException`, etc. ***Do note it.***\n\n### `update`\n`update(..)` is typically (*) used for sequential (\"stream\") updates of the digest.\n\nThe (3) variants of `update`:\n\n* `void update (byte input)` to update with a single byte\n* `void update (byte[] input)` to update with a `byte[]`\n* `void update (byte[] input, int offset, int len)` to update with a slice of a `byte[]` \n\nUpdate methods treat all input args as immutable (`const` equivalent).\n\n(*) Note that if your use case requires the (final) digest output of the algorithm to be copied to a slice of (user) supplied `byte[]`, even in the non-streaming case, you need to invoke an `update`.\n\n### `digest`\nGiven that `final` is a keyword in Java and `finalize` has specific semantics in context of Java `Object`s, `digest(..)` is the Java equivalent of a hash `final(..)` method. \n\nThe (3) variants of `digest`:\n\n* `byte[] digest()` to emit the final hash of the `BLAKE2b` state.\n* `byte[] digest(byte[] input)` to update the state with `input` and emit the final hash.\n* `void digest(byte[] out, int off, int len)` writes the final hash to the given `byte[]`\n\n**All `digest(..)` methods returning `byte[]` are guaranteed to return a non-`null` value.**\n\n## Configuration and Usage\nA `Blake2b` implementation can be used simply with default configuration parameters, or optionally, you may choose to set specific configuration parameters of the algorithm.\n\n**Default Settings** (`Blake2b.Param.Default`)\n\n    Digest Length:   64 bytes \n    Key:             none\n    Salt:            none\n    Personalization: none \n    Depth:           1\n    Fanout:          1\n    Leaf Length:     0\n    Inner Length:    0\n    Node Depth:      0\n    Node Offset:     0\n\n(***Note that all `Blake2b` semantic factory zero-arg methods use the above default configuration parameters.***)\n\n    \n### Configuration Via `Blake2b.Param`\nYou can change the default configuration via the `Blake2b.Param` class.\n\nTo obtain an instance of the Param class, simply instantiate it:\n\n\t// get an instance of the default configuration parameters\n\t\n    Blake2b.Param param = new Blake2b.Param(); \n    \n`Param` exposes a fluent setter `API` allowing for chaining of setXXx methods. \n\nFor example:\n\n\t// get an instance of the default configuration parameters\n\t// and customize it with key, salt, and personalization,\n\t// and output a 160bit hash (say for SHA1 replacement)\n\t\n    Blake2b.Param param = new Blake2b.Param().\n       setDigestLength( 20 ). \n       setKey ( keyBytes ).\n       setSalt ( saltBytes ).\n       setPersonal ( personalizationBytes );\n       \nThe constraints on the configuration parameter settings are detailed in `Blake2b.Spec`.\n\n***Note that `Blake2b.Param` pedantically asserts all constraints on input args.***\n    \n### General Hashing with `BLake2b.Digest`\n\n`Blake2b.Digest` instantiates the reference implementation of `Blake2b` isolating you from the current/actual implementation (`Blake2b.Engine`).\n\n    // using default params\n    final Blake2b blake2b = Blake2b.Digest.newInstance();        \nor\n\n    // using custom params\n    final Blake2b blake2b = Blake2b.Digest.newInstance( param ); \n\n`Blake2b.Digest` also exposes a convenience factory method for the common case of a customized digest length:\n\n    // Just config the output digest length - here 160bit output ala SHA1\n    final Blake2b blake2b = Blake2b.Digest.newInstance( 20 );  \n\nNote that you can use the `Blake2b` instance obtained via `Blake2b.Digest` factory methods to perform any of the features of the `BLAKE2b` algorithm with appropriate configuration via `Blake2b.Param`, should you prefer.\n\n### Message Authentication Codes with `Blake2b.Mac`\n\n**MAC** semantics are exposed by `Blake2b.Mac` class. This (convenience) class exposes a few factory methods.\n\n    final Blake2b mac = Blake2b.Mac.newInstance ( theKeyBytes );      // basic MAC\nand the common case of MAC with custom digest length\n\n    final Blake2b mac = Blake2b.Mac.newInstance ( theKeyBytes, 20 );  // 160bit MAC\n   \nYou can also use a `java.security.Key` (which ***must*** support `encoding` -- see Key javadocs for details) instead of a raw `byte[]` array:\n    \n    import java.security.key; \n    ..\n    \n    final Key thekey = .. // not provided by Blake2b library\n    \n    // 160bit MAC with Key\n    final Blake2b mac = Blake2b.Mac.newInstance ( theKey, 20 );  \n\n\n### Incremental Hashing with `Blake2b.Tree`\t\nThe `Blake2b.Tree` class provides a convenient semantic `API` for incremental hasing with `Blake2b`.\n\n    // incremntally hash a stream of bytes using Blake2b.\n    // here a tree of depth 2, fanout 3, leaf length of 4096, inner length of 64,\n    // and a final (tree) hash output of length 20)\n    \n    Blake2b.Tree tree = Blake2b.Tree (2, 3, 4096, 64, 20);\n    \n    // assume that we got our 3 chunks obtained elsewhere\n    // and these are byte[] of max \"leaf length\" bytes (here 4096).\n    // Also note that nodes will output a hash of length \"inner length\"\n\n    // hash the chunks\n    \n    byte[] hash_00 = tree.getNode (0, 0).digest ( chunk00 ); \n    byte[] hash_01 = tree.getNode (0, 1).digest ( chunk01 );\n    byte[] hash_02 = tree.getNode (0, 2).digest ( chunk02 ); // implicit 'last node'\n    \n    // get the final tree hash output\n    \n    final Blake2b digest = tree.getRoot(); // implicit node (1, 0)\n    digest.update (hash_00);\n    digest.update (hash_01);\n    digest.update (hash_02);\n    final byte[] hash = digest.digest();\n\n# Dedication\n    To the Eternal Absolute, The One, ~!!! Ahura-Mazda !!!~ *even* ~!!! Al-Aziz-Al-Hakim !!!~, \n    The Lord of Sentient Realms, The True in Love. \n    The Friend.\n\n--\n\nFeb. 2014. \nbushwick. bk. nyc.\n"
 },
 {
  "repo": "ZenGo-X/multi-party-bls",
  "language": "Rust",
  "readme_contents": "# multi-party-bls\n\nRust implementation of {t,n}-threshold BLS over [BLS12-381](https://hackmd.io/@benjaminion/bls12-381) elliptic curve.\nCurrently two protocols are implemented: \n- Aggregated BLS. Based on the MSP protocol ([BDN18](https://eprint.iacr.org/2018/483.pdf), section 3.1) \n- Threshold BLS assuming dishonest majority. Based on Threshold GLOW signatures ([GLOW20](https://eprint.iacr.org/2020/096.pdf) version 20200806:135847)\n\n## Threshold BLS performance\nWe deployed 3 parties at dedicated AWS t3.medium instances and measured keygen & signing running time (t=1, n=3). Here are results:\n* Keygen\n  * Mean: 158.4ms\n  * Std: 18.4ms\n* Signing\n  * Mean: 45.5ms\n  * Std: 21.2ms\n\n## How to use it\nTo execute any protocol (keygen/signing) in [tokio] async environment, you need to define\nmessage delivery logic and construct stream of incoming messages and sink for outcoming\nmessages. Then you can execute protocol using [AsyncProtocol] (see below).\n\n[tokio]: https://tokio.rs\n[AsyncProtocol]: https://docs.rs/round-based/0.1.1/round_based/async_runtime/struct.AsyncProtocol.html\n\nMessages delivery should meet security assumptions:\n* Any P2P message must be encrypted so no one can read it except recipient\n* Broadcast messages must be signed, so no one can forge message sender\n\n### Keygen\n```rust\nuse round_based::{Msg, AsyncProtocol};\nuse bls::threshold_bls::state_machine::keygen::{Keygen, ProtocolMessage};\n\nasync fn connect() -> Result<(\n   // Party's unique index in range [1;parties_count]\n   u16,\n   // Incoming messages\n   impl Stream<Item=Result<Msg<ProtocolMessage>, RecvErr>> + FusedStream + Unpin,\n   // Outcoming messages\n   impl Sink<Msg<ProtocolMessage>, Error=SendErr> + Unpin,\n)> {\n   // ...\n}\n\nlet (i, incoming, outcoming) = connect().await?;\n// n - number of parties involved in keygen, t - threshold value, i - party's index\nlet keygen = Keygen::new(i, t, n)?;\nlet local_key = AsyncProtocol::new(keygen, incoming, outcoming)\n    .run().await?;\nprintln!(\"Public key: {:?}\", local_key.public_key());\n```\n\nSee our [demo](examples/cli.rs) for more concrete examples: we have method [join] which \nis used to set up message delivery (similar to connect function from example above),\nand we call it in [keygen] & [signing].\n\n[join]: https://github.com/ZenGo-X/multi-party-bls/blob/d3db4f46920066757f50a9576b3002cbbb21aef2/examples/mediator/client.rs#L37\n[keygen]: https://github.com/ZenGo-X/multi-party-bls/blob/d3db4f46920066757f50a9576b3002cbbb21aef2/examples/cli.rs#L79\n[signing]: https://github.com/ZenGo-X/multi-party-bls/blob/d3db4f46920066757f50a9576b3002cbbb21aef2/examples/cli.rs#L129\n\n### Sign\n```rust\nuse round_based::{Msg, AsyncProtocol};\nuse bls::threshold_bls::state_machine::sign::{Sign, ProtocolMessage};\n\nasync fn connect() -> Result<(\n    // Party's unique index in range [1;parties_count]\n    u16,\n    // Incoming messages\n    impl Stream<Item=Result<Msg<ProtocolMessage>, RecvErr>> + FusedStream + Unpin,\n    // Outcoming messages\n    impl Sink<Msg<ProtocolMessage>, Error=SendErr> + Unpin,                        \n)> {\n    // ...\n}\n\nlet (i, incoming, outcoming) = connect().await?;\n// message - bytes to sign, n - number of parties involved in signing,\n// local_key - local secret key obtained by this party at keygen\nlet signing = Sign::new(message, i, n, local_key)?;\nlet (_, sig) = AsyncProtocol::new(signing, incoming, outcoming)\n    .run().await?;\nprintln!(\"Signature: {:?}\", sig);\n```\n\n# Demo\nUsing demo CLI app, you can distributedly generate key and sign data.\n\n0. (Optional)\n   Set environment variable to see log messages:\n   ```bash\n   export RUST_LOG=demo=trace\n   ```\n\n1. Start mediator server:\n   ```bash\n   cargo run --example cli -- mediator-server run\n   ```\n   Mediator server allow parties to communicate with each other. By default, it listens at 127.0.0.1:8333\n\n2. Run distributed keygen by launching N parties:\n   ```bash\n   cargo run --example cli -- keygen -t 1 -n 3 --output target/keys/key1\n   cargo run --example cli -- keygen -t 1 -n 3 --output target/keys/key2\n   cargo run --example cli -- keygen -t 1 -n 3 --output target/keys/key3\n   ```\n   This will generate key between 3 parties with a threshold=1. Every party connects to mediator server\n   and uses it to send and receive messages to/from other parties within the protocol.\n\n   Every party will output result public key, e.g.:\n   ```\n   Public key: 951f5b5bc45af71346f4a7aee6b50670c07522175f7ebd671740075e4247b45f5f03206ae8274d77337eae797e0f69490cca3ee5da31eb5f8746dd942034550dff5c4695ee7160f32bfa8424d40e3690bdd7cf4d58e9ab5d03d00d50fc837278\n   ```\n\n   Parties private local shares will be in `target/keys` folder\n\n3. Let's sign some data using 2 parties:\n   ```bash\n   cargo run --example cli -- sign -n 2 --key target/keys/key1 --digits some-data\n   cargo run --example cli -- sign -n 2 --key target/keys/key2 --digits some-data\n   ```\n\n   Every party will output the same signature, e.g.:\n   ```\n   Signature: acbac87f8168d866df8d1f605cf8d688c64ae491e6d6cbc60db4fc0952dc097452f252cb2f746a948bac0e2311e6c14e\n   ```\n\n4. Then lets check that signature is indeed valid.\n   You can use command:\n   ```bash\n   cargo run --example cli -- verify --digits DATA --signature SIG --public-key PK\n   ```\n\n   E.g.:\n   ```bash\n   cargo run --example cli -- verify --digits some-data \\\n     --signature acbac87f8168d866df8d1f605cf8d688c64ae491e6d6cbc60db4fc0952dc097452f252cb2f746a948bac0e2311e6c14e \\\n     --public-key 951f5b5bc45af71346f4a7aee6b50670c07522175f7ebd671740075e4247b45f5f03206ae8274d77337eae797e0f69490cca3ee5da31eb5f8746dd942034550dff5c4695ee7160f32bfa8424d40e3690bdd7cf4d58e9ab5d03d00d50fc837278\n   ```\n\n   Output:\n   ```\n   Signature is valid\n   ```\n\n**_Note_** that if you need to run several protocols (keygen/sign) concurrently, you need to provide a unique \nidentifier to each group of parties by specifying `--room-id` flag. To learn more, see \n`cargo run --example cli -- keygen --help`\n\n# Development\n\n## Detecting performance regression\nWe use statistical-driven benchmarks backed by [criterion][criterion-crate] to detect any regressions.\nPlease, follow instruction to see how your changes effect on performance:\n1. Checkout commit before your changes (don't forget to commit all your changes)\n2. Run benchmarks:\n   ```shell\n   cargo bench --bench criterion --features dev\n   ```\n   It will take a few minutes.\n   After that, you should be able to discover HTML-rendered report at `./target/criterion/report/index.html`.\n   It'll contain results of benchmarks along with nice-rendered charts.\n3. Checkout back on the commit with your changes\n4. Run benchmarks again:\n   ```shell\n   cargo bench --bench criterion --features dev\n   ```\n   Criterion will report about any regression it found right in console output. HTML-rendered report\n   will be updated (see `./target/criterion/report/index.html`) and will reason about performance\n   differences more precisely.\n\n[criterion-crate]: https://crates.io/crates/criterion\n\n**_Note_** that benchmark results do not show real-world performance of multi party computation since\neverything is computed sequentially, not in parallel. We do not allocate separate thread for every party\nas it will make harder to reason about performance differences.\n\n# Warning\nDo not use this code in production before consulting with us. Feel free to [reach out](mailto:github@zengo.com) or join ZenGo X [Telegram](https://t.me/joinchat/ET1mddGXRoyCxZ-7).\n"
 },
 {
  "repo": "resilar/sqleet",
  "language": "C",
  "readme_contents": "**sqleet** is an encryption extension for [SQLite3](https://www.sqlite.org/).\nThe encryption is transparent (*on-the-fly*) and based on modern cryptographic\nalgorithms designed for high performance in software and robust side-channel\nresistance. The compilation of sqleet is easy because there are no external\ndependencies, which simplifies cross-compiling and cross-platform development.\n\nIn the spirit of SQLite3, the sqleet source code is in the public domain.\n\n- [Compiling](#compiling)\n- [Example](#example)\n- [Cryptography](#cryptography)\n- [sqleet API](#sqleet-api)\n  - [C programming interface](#c-programming-interface)\n  - [URI configuration interface](#uri-configuration-interface)\n- [Android/iOS support](#androidios-support)\n- [Versioning scheme](#versioning-scheme)\n- [License](#license)\n\n\nCompiling\n---------\n\nSQLite3 shell with sqleet encryption support can be compiled as follows:\n\n```sh\n% # UNIX\n% gcc sqleet.c shell.c -o sqleet -lpthread -ldl\n\n% # Windows\n% gcc sqleet.c shell.c -o sqleet\n```\n\n[Example](#example) demonstrates the use of the sqleet encryption extension with\nthe compiled shell. For application programmers, [sqleet API](#sqleet-api)\noffers [C programming interface](#c-programming-interface) and language-agnostic\n[URI-based configuration interface](#uri-configuration-interface) for run-time\nmanagement of the encryption settings.\n\nTo use sqleet as a library, the recommended way is to download a preconfigured\n[release package](https://github.com/resilar/sqleet/releases/latest) instead of\ncloning the git repository. Release package contains `sqleet.c` and `sqleet.h`\namalgamations that are drop-in replacements for the official `sqlite3.c` and\n`sqlite3.h` amalgamations. Non-amalgamated `sqleet.c` and `sqleet.h` files from\nmaster branch can be used as drop-in replacements similarly, assuming all\nnecessary sqleet source files are available during compilation. However, sqleet\ndevelopment mainly happens in the master branch, so release are considered to be\nmore stable and a better choice for the average user.\n\nBuilding a custom release version of sqleet is a straightforward task.\n\n * Clone or fork sqleet and patch it as you wish\n * Create source and header amalgamations for release\n    * `./script/amalgamate.sh <sqleet.c >sqlame.c`\n    * `./script/amalgamate.sh <sqleet.h >sqlame.h`\n * Package the amalgamations with other release files\n\n[script/release.sh](script/release.sh) shows the exact release procedure of\nsqleet.\n\n\nExample\n-------\n\nEncrypting an existing database `hello.db` with a *key* (i.e., password)\n`\"swordfish\"`.\n\n```\n[sqleet]% hexdump -C hello.db\n00000000  53 51 4c 69 74 65 20 66  6f 72 6d 61 74 20 33 00  |SQLite format 3.|\n00000010  10 00 01 01 00 40 20 20  00 00 00 01 00 00 00 02  |.....@  ........|\n*\n00000fd0  00 00 00 2b 01 06 17 17  17 01 37 74 61 62 6c 65  |...+......7table|\n00000fe0  68 65 6c 6c 6f 68 65 6c  6c 6f 02 43 52 45 41 54  |hellohello.CREAT|\n00000ff0  45 20 54 41 42 4c 45 20  68 65 6c 6c 6f 28 78 29  |E TABLE hello(x)|\n*\n00001fe0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 0f  |................|\n00001ff0  01 02 27 48 65 6c 6c 6f  2c 20 77 6f 72 6c 64 21  |..'Hello, world!|\n[sqleet]% ./sqleet hello.db\nSQLite version 3.28.0 2019-04-16 19:49:53\nEnter \".help\" for usage hints.\nsqlite> PRAGMA rekey='swordfish';\nsqlite> .quit\n[sqleet]% hexdump -C hello.db\n00000000  4e 61 0c 1a 25 3f 77 1e  20 50 f4 56 61 c6 b3 37  |Na..%?w. P.Va..7|\n00000010  eb aa d5 59 37 0d e6 41  1d d1 69 c8 8e 9a f5 eb  |...Y7..A..i.....|\n*\n00001fe0  07 79 a0 3b f1 cc 9f 7b  b2 72 11 21 28 15 71 ce  |.y.;...{.r.!(.q.|\n00001ff0  e5 ad 4a cd 75 af 8e 8a  e2 79 f3 d9 2e 21 e8 4b  |..J.u....y...!.K|\n```\n\nNotice that the data of the encrypted database is indistinguishable from random.\nAfter encryption, the unencrypted data is accessible only with the correct key.\n\n```\n[sqleet]% ./sqleet hello.db\nSQLite version 3.28.0 2019-04-16 19:49:53\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\n/**** ERROR: (26) file is not a database *****/\nROLLBACK; -- due to errors\nsqlite> PRAGMA key='swordfish';\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE hello(x);\nINSERT INTO hello VALUES('Hello, world!');\nCOMMIT;\n```\n\nInstead of `PRAGMA` commands, the key can also be provided in [SQLite3 URI\nfilename](https://www.sqlite.org/uri.html) using `key` parameter.\n\n```\n[sqleet]% ./sqleet 'file:hello.db?key=swordfish' 'SELECT * FROM hello'\nHello, world!\n```\n\n\nCryptography\n------------\n\n- PBKDF2-HMAC-SHA256 key derivation with a 16-byte salt and 12345 iterations.\n- ChaCha20 stream cipher with one-time keys.\n- Poly1305 authentication tags.\n\nA low-level description of the database encryption scheme is available in\n[sqleet.c:265](sqleet.c#L265).\n\n\nsqleet API\n----------\n\nThe public sqleet API consists of [C programming\ninterface](#c-programming-interface) and [URI configuration\ninterface](#uri-configuration-interface).\n\n\n### C programming interface\n\nsqleet defines `SQLITE_HAS_CODEC` compile-time option to expose SQLite3\nencryption API, i.e., C functions `sqlite3_key()` and `sqlite3_rekey()` for\nmanaging database encryption keys. These functions can be called directly from\nC code, while other programming languages need to call the C functions via\n[FFI](https://en.wikipedia.org/wiki/Foreign_function_interface) mechanism.\nAnother way to invoke the functions is with `PRAGMA key` and `PRAGMA rekey`\ncommands (see [Example](#example)).\n\n```c\nSQLITE_API int sqlite3_key(      /* Invoked by PRAGMA key='x' */\n  sqlite3 *db,                   /* Database to key */\n  const void *pKey, int nKey     /* Key (password) */\n);\n```\n\n`sqlite3_key()` is typically called immediately after `sqlite3_open()` to\nspecify an encryption key (password) for the opened database. The function\nvalidates the key by decrypting the first page of the database from disk.\nReturn value is `SQLITE_OK` if the given key was correct; otherwise, a non-zero\nSQLite3 error code is returned and subsequent attempts to read or write the\ndatabase will fail.\n\n```c\nSQLITE_API int sqlite3_rekey(    /* Invoked by PRAGMA rekey='x' */\n  sqlite3 *db,                   /* Database to rekey */\n  const void *pKey, int nKey     /* New key (password) */\n);\n```\n\n`sqlite3_rekey()` changes the database encryption key. This includes encrypting\nthe database the first time, fully decrypting the database (if `nKey == 0`), as\nwell as re-encrypting it with a new key. Internally, the function runs `VACUUM`\ncommand to encrypt or decrypt all pages of the database, whereas re-encryption\nwith a new key is performed directly by processing each page sequentially.\nReturn value is `SQLITE_OK` on success and an SQLite3 error code on failure.\n\nIn addition, there are `sqlite3_key_v2()` and `sqlite3_rekey_v2()` functions\nthat accept name of the target database as the second parameter.\n\n---\n\n**Note**: \\\nIn sqleet, the contents of an encrypted database file are indistinguishable from\nrandom data (of the same length). This is a conscious design decision, but as a\ndrawback, database settings cannot be read from the database file. Therefore, it\nis the user's responsibility to properly initialize database settings before\naccessing the database. The most common issue is that opening a database fails\nregardless of valid key because the page size of the database differs from the\ndefault 4096 and `page_size` has not been set to the correct value with `PRAGMA`\nor [URI API](#uri-configuration-interface).\n\nThe official [SQLite Encryption Extension (SEE)](https://www.sqlite.org/see)\nleaves bytes 16..23 of the database header unencrypted so that page size and\nother settings can be directly read from encrypted databases, which obviously\nmakes SEE-encrypted databases distinguishable from random data. In sqleet, this\nbehavior can be optionally enabled with `-DSKIP_HEADER_BYTES=24` compile-time\nflag (bytes 0..15 contain the KDF salt so only the bytes 16..23 are actually\nskipped and left unencrypted). At run-time, the compile-time default can be\noverridden with URI parameter `skip=n` where `n` is the skip amount. \n\n---\n\n\n### URI configuration interface\n\n**Disclaimer**: URI interface is experimental and subject to changes in future\nversions. Use at your own risk!\n\nRun-time configuration of sqleet encryption is implemented based on [SQLite3\nURI filenames](https://www.sqlite.org/uri.html) which contain configuration\nparameters for databases. List of URI parameters supported by sqleet:\n\n| Parameter   | Description                                                    |\n| :---------- | :------------------------------------------------------------- |\n| `key`       | Encryption key for `sqlite3_key()` after opening the database  |\n| `salt`      | 16-byte salt for the key derivation function (KDF)             |\n| `header`    | 16-byte header overwriting the database magic header (or salt) |\n| `kdf`       | Key derivation function (only `none` supported for now)        |\n| `skip`      | Run-time setting overriding compile-time SKIP_HEADER_BYTES     |\n| `page_size` | Equivalent to `page_size` PRAGMA                               |\n\nParameters `key`, `salt` and `header` have additional `hex`-prefixed versions\nthat accept hex input strings such as `'73716c656574'`.\n\nParameters `salt` and `header` expect 16-byte input strings. Shorter strings are\nzero-padded to 16-bytes, while longer inputs get automatically rejected.\n\nParameter `header` represents the first 16 bytes of the database file, that is,\nSQLite3 magic header string for unencrypted databases. For encrypted databases,\n`header` defaults to the value of `salt` unless explicitly set to other value.\nRemember that `salt` is a parameter for the key derivation function (KDF) which\nis stored in the beginning of the database file *by default*, in which case both\n`salt` and `header` contain the same value (KDF salt). Sometimes, however, the\nuser may want to keep the salt secret, or control the first 16 bytes of the\ndatabase file for some purpose. In such cases, the user stores the salt and then\noverwrites the beginning of the database file with any 16-byte `header` value.\n(If this explanation was too abstract or nonsensical to fully grasp, see the iOS\nworkaround in the end of [Android/iOS support](#androidios-support) for a\npractical real-world use-case of `header` feature).\n\nURI parameter `kdf=none` disables the default PBKDF2-HMAC-SHA256 key derivation.\nIf KDF is disabled, `key` and `hexkey` accept a 32-byte *raw key* that becomes\nthe *master* encryption key which otherwise would be derived by the KDF from the\nkey and salt. Disabling KDF is a powerful feature for *advanced users* who need\nfull control of the key derivation process.\n\nParameters `skip` and `page_size` override the compile-time `SKIP_HEADER_BYTES`\nvalue and the database `PRAGMA page_size` configuration.\n\nChanging URI settings of an existing database can be accomplished with `VACUUM\nINTO` (introduced in SQLite 3.27.0) by giving new URI parameter values in the\n`INTO` filename. For example, `VACUUM INTO 'file:skipped.db?skip=24'` vacuums\nthe current main database to file `skipped.db` with `skip` set to 24. Other URI\nsettings, including the encryption key, are inherited from the main database\nunless `key` parameter is specified, in which case any undefined parameters are\ninitialized to default values. Database settings update with `VACUUM INTO` is\ncomplex operation with many special cases and important details (omitted here).\nSo be prepared for some undocumented behavior, but please open an issue if\nencountering obviously broken on wrong behavior.\n\nErroneus parameters, such as unsupported parameter value or otherwise bad input,\nreturns a non-zero SQLite3 error code when opening (or vacuuming) a database.\nThe current version returns `SQLITE_MISUSE` error, in most cases, if URI parsing\nfails or the resulting configuration is invalid.\n\n\nAndroid/iOS support\n-------------------\n\nsqleet does not have an out-of-the-box support for Android. However, [SQLite\nAndroid Bindings](https://www.sqlite.org/android/doc/trunk/www/index.wiki)\nproject provides an easy way to bundle a custom SQLite3 version (such as\nsqleet) into an Android application with the standard Android interface\n[`android.database.sqlite`](https://developer.android.com/reference/android/database/sqlite/package-summary).\nIn particular, see [Using The SQLite Encryption\nExtension](https://www.sqlite.org/android/doc/trunk/www/see.wiki) page for\nbuild & usage instructions.\n\nLikewise, sqleet does not offer an iOS version either, but compiling a custom\nSQLite3 with sqleet encryption support for iOS is a straightforward task (e.g.,\ncompile [switflyfalling/SQLiteLib](https://github.com/swiftlyfalling/SQLiteLib)\nwith sqleet release amalgamation instead of the SQLite3 amalgamation).\nMoreover, iOS apps with an *encrypted* WAL-journaled SQLite3 database in a\nshared data container are terminated when sent to the background (see\n[sqlcipher/sqlcipher#255](https://github.com/sqlcipher/sqlcipher/issues/255),\n[TN2408](https://developer.apple.com/library/archive/technotes/tn2408/_index.html)\nand\n[TN2151](https://developer.apple.com/library/archive/technotes/tn2151/_index.html)\nfor more information). A common workaround is to leave the first 32 bytes of\nthe database file unencrypted so that iOS recognizes the file as a regular\nWAL-journaled SQLite3 database and does not terminate the app. Thus, an\niOS-compatible sqleet database can be created with the following URI settings:\n\n```\n[sqleet]% ./sqleet 'file:ios.db?key=swordfish&salt=SodiumChloride42&header=SQLite%20format%203&skip=32'\nSQLite version 3.28.0 2019-04-16 19:49:53\nEnter \".help\" for usage hints.\nsqlite> CREATE TABLE f(x,y);\nsqlite> .quit\n[sqleet]% xxd secrets.db | head -n5\n00000000: 5351 4c69 7465 2066 6f72 6d61 7420 3300  SQLite format 3.\n00000010: 1000 0101 2040 2020 0000 0001 0000 0002  .... @  ........\n00000020: 4640 824c 703e 3f72 dffc 3a19 23a6 c964  F@.Lp>?r..:.#..d\n00000030: a1b3 abf0 8f3c 996f 0eb8 c665 afe1 0d72  .....<.o...e...r\n00000040: b864 57f7 2492 8c31 6398 61d0 5d49 5a28  .dW.$..1c.a.]IZ(\n```\n\n\nVersioning scheme\n-----------------\n\n[sqleet releases](https://github.com/resilar/sqleet/releases/) follow a\nperverse form of semantic versioning which requires some explanation. Major\nversion number increments indicate compatibility breaks as usual, but the minor\nand patch version numbers match the targeted SQLite3 version. For instance,\nsqleet v0.25.1 corresponds to SQLite v3.25.1. Although the target SQLite3\nversion is the primarily supported, sqleet is typically forward and backward\ncompatible across different SQLite3 versions without any changes to the code.\n\nAs a corollary, sqleet releases are published whenever a new SQLite3 version is\nreleased. A new sqleet release thus does not necessarily include bug fixes or\nnew features (except updated SQLite3 version) if there has been no commits to\nsqleet master branch since the previous SQLite3 release. [Releases\npage](https://github.com/resilar/sqleet/releases) contains a changelog for each\nsqleet release version.\n\n\nLicense\n-------\n\nLike SQLite3, sqleet has been released in the public domain (specifically,\nunder the [UNLICENSE](https://unlicense.org/) license). In other words, feel\nfree to do whatever the fuck you want to with the code. In the unlikely case\nthat your country's legal system is broken with respect to public domain\nsoftware, contact `def@huumeet.info` for a custom-licensed version.\n"
 },
 {
  "repo": "brandondahler/Data.HashFunction",
  "language": "C#",
  "readme_contents": "**Deskasoft International has officially taken over maintenance and ongoing development of this library at https://github.com/Deskasoft/Data.HashFunction.**\n\n---\n\nData.HashFunction ![License](https://img.shields.io/github/license/brandondahler/Data.HashFunction.svg)\n=================\n\nData.HashFunction is a C# library to create a common interface to [non-cryptographic hash functions](http://en.wikipedia.org/wiki/List_of_hash_functions#Non-cryptographic_hash_functions) and provide implementations of public hash functions.  It is licensed under the permissive and OSI approved [MIT](http://opensource.org/licenses/MIT) license.\n\n\nAll functionality of the library is tested using [xUnit](https://github.com/xunit/xunit).  A primary requirement for each release is 100% code coverage by these tests.\n\nAll code within the libarary is commented using Visual Studio-compatible XML comments.\n\nStatus\n------\n\n### Master\n\n[![Build Status](https://img.shields.io/appveyor/ci/brandondahler/data-hashfunction/master.svg)](https://ci.appveyor.com/project/brandondahler/data-hashfunction)\n[![Test Status](https://img.shields.io/appveyor/tests/brandondahler/data-hashfunction/master.svg)](https://ci.appveyor.com/project/brandondahler/data-hashfunction/build/tests)\n\n\n### NuGet\n\n| Name                            | Normal                                                                                                                                                                 |\n|---------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Data.HashFunction.Interfaces    | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.Interfaces.svg)](https://www.nuget.org/packages/System.Data.HashFunction.Interfaces/)       | \n| Data.HashFunction.Core          | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.Core.svg)](https://www.nuget.org/packages/System.Data.HashFunction.Core/)                   |\n| Data.HashFunction.BernsteinHash | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.BernsteinHash.svg)](https://www.nuget.org/packages/System.Data.HashFunction.BernsteinHash/) |\n| Data.HashFunction.Blake2        | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.Blake2.svg)](https://www.nuget.org/packages/System.Data.HashFunction.Blake2/)               |\n| Data.HashFunction.Buzhash       | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.Buzhash.svg)](https://www.nuget.org/packages/System.Data.HashFunction.Buzhash/)             |\n| Data.HashFunction.CityHash      | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.CityHash.svg)](https://www.nuget.org/packages/System.Data.HashFunction.CityHash/)           |\n| Data.HashFunction.CRC           | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.CRC.svg)](https://www.nuget.org/packages/System.Data.HashFunction.CRC/)                     |\n| Data.HashFunction.ELF64         | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.ELF64.svg)](https://www.nuget.org/packages/System.Data.HashFunction.ELF64/)                 |\n| Data.HashFunction.FNV           | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.FNV.svg)](https://www.nuget.org/packages/System.Data.HashFunction.FNV/)                     |\n| Data.HashFunction.HashAlgorithm | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.HashAlgorithm.svg)](https://www.nuget.org/packages/System.Data.HashFunction.HashAlgorithm/) |\n| Data.HashFunction.Jenkins       | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.Jenkins.svg)](https://www.nuget.org/packages/System.Data.HashFunction.Jenkins/)             |\n| Data.HashFunction.MurmurHash    | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.MurmurHash.svg)](https://www.nuget.org/packages/System.Data.HashFunction.MurmurHash/)       |\n| Data.HashFunction.Pearson       | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.Pearson.svg)](https://www.nuget.org/packages/System.Data.HashFunction.Pearson/)             |\n| Data.HashFunction.SpookyHash    | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.SpookyHash.svg)](https://www.nuget.org/packages/System.Data.HashFunction.SpookyHash/)       |\n| Data.HashFunction.xxHash        | [![Version Status](https://img.shields.io/nuget/v/System.Data.HashFunction.xxHash.svg)](https://www.nuget.org/packages/System.Data.HashFunction.xxHash/)               |\n\nImplementations\n---------------\n\nAll implementation packages depend on the Data.HashFunction.Interfaces and Data.HashFunction.Core NuGet packages.\n\nThe following hash functions have been implemented from the most reliable reference that could be found.\n\n* [Bernstein Hash](http://www.eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx#djb)\n  * BernsteinHash - Original\n  * ModifiedBernsteinHash - Minor update that is said to result in better distribution\n* [Blake2](https://blake2.net/)\n  * Blake2b \n* [BuzHash](http://www.serve.net/buz/hash.adt/java.002.html)\n  * BuzHashBase - Abstract implementation, there is no authoritative implementation\n  * DefaultBuzHash - Concrete implementation, uses 256 random 64-bit integers\n* [CityHash](https://code.google.com/p/cityhash/)\n* [CRC](http://en.wikipedia.org/wiki/Cyclic_redundancy_check)\n  * CRC - Generalized implementation to allow any CRC parameters between 1 and 64 bits.\n  * CRCStandards - 71 implementations on top of CRC that use the parameters defined by their respective standard.  Standards and their parameters provided by [CRC RevEng's catalogue](http://reveng.sourceforge.net/crc-catalogue/).\n* [ELF64](http://downloads.openwatcom.org/ftp/devel/docs/elf-64-gen.pdf)\n* [FNV](http://www.isthe.com/chongo/tech/comp/fnv/index.html)\n  * FNV1Base - Abstract base of the FNV-1 algorithms\n  * FNV1 - Original\n  * FNV1a - Minor variation of FNV-1\n* [Hash Algorithm Wrapper](http://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithm%28v=vs.110%29.aspx)\n  * HashAlgorithmWrapper - Wraps existing instance of a .Net HashAlgorithm\n  * HashAlgorithmWrapper<HashAlgorithmT> - Wraps a managed instance of a .Net HashAlgorithm\n* [Jenkins](http://en.wikipedia.org/wiki/Jenkins_hash_function)\n  * JenkinsOneAtATime - Original\n  * JenkinsLookup2 - Improvement upon One-at-a-Time hash function\n  * JenkinsLookup3 - Further improvement upon Jenkins' Lookup2 hash function\n* [Murmur Hash](https://code.google.com/p/smhasher/wiki/MurmurHash)\n  * MurmurHash1 - Original\n  * MurmurHash2 - Improvement upon MurmurHash1\n  * MurmurHash3 - Further improvement upon MurmurHash2, addresses minor flaws\n* [Pearson hashing](http://en.wikipedia.org/wiki/Pearson_hashing)\n  * PearsonBase - Abstract implementation, there is no authoritative implementation\n  * WikipediaPearson - Concrete implementation, uses values from Wikipedia article\n* [SpookyHash](http://burtleburtle.net/bob/hash/spooky.html)\n  * SpookyHashV1 - Original\n  * SpookyHashV2 - Improvement upon SpookyHashV1, fixes bug in original specification\n* [xxHash](https://code.google.com/p/xxhash/)\n  * xxHash - Original and 64-bit version.\n\n\nEach family of hash functions is contained within its own project and NuGet package.\n\n\nUsage\n-----\n\nThe usage for all hash functions has been standardized and is accessible via the System.Data.HashFunction.IHashFunction and System.Data.HashFunction.IHashFunctionAsync interfaces.  The core package, Data.HashFunction.Core, only contains abstract hash function implementations and base functionality for the library.  In order to use a specific hashing algorithms, you will need to reference its implementation packages.\n\nIHashFunction implementations should be immutable and stateles.  All IHashFunction methods and members should be thread safe.\n\n``` C#\nusing System;\nusing System.Data.HashFunction;\nusing System.Data.HashFunction.Jenkins;\n\npublic class Program\n{\n    public static readonly IJenkinsOneAtATime _jenkinsOneAtATime = JenkinsOneAtATimeFactory.Instance.Create();\n    public static void Main()\n    {\n        var hashValue = _jenkinsOneAtATime.ComputeHash(\"foobar\");\n\n        Console.WriteLine(hashValue.AsHexString());\n    }\n}\n```\n\n\n\nRelease Notes\n-------------\nSee [Release Notes](https://github.com/brandondahler/Data.HashFunction/wiki/Release-Notes) wiki page.\n\n\nContributing\n------------\n\nFeel free to propose changes, notify of issues, or contribute code using GitHub!  Submit issues and/or pull requests as necessary. \n\nThere are no special requirements for change proposal or issue notifications.  \n\n\nCode contributions should follow existing code's methodologies and style, along with XML comments for all public and protected namespaces, classes, and functions added.\n\n\nLicense\n-------\n\nData.HashFunction is released under the terms of the MIT license. See [LICENSE](https://github.com/brandondahler/Data.HashFunction/blob/master/LICENSE) for more information or see http://opensource.org/licenses/MIT.\n"
 },
 {
  "repo": "aws/s2n-quic",
  "language": "Rust",
  "readme_contents": "# s2n-quic\n\n`s2n-quic` is a Rust implementation of the [IETF QUIC protocol](https://quicwg.org/), featuring:\n* a simple, easy-to-use API. See [an example](https://github.com/aws/s2n-quic/blob/main/examples/echo/src/bin/quic_echo_server.rs) of an s2n-quic echo server built with just a few API calls\n* high configurability using [providers](https://docs.rs/s2n-quic/latest/s2n_quic/provider/index.html) for granular control of functionality\n* extensive automated testing, including fuzz testing, integration testing, unit testing, snapshot testing, efficiency testing, performance benchmarking, interopability testing and [more](https://github.com/aws/s2n-quic/blob/main/docs/ci.md)\n* integration with [s2n-tls](https://github.com/aws/s2n-tls), AWS's simple, small, fast and secure TLS implementation, as well as [rustls](https://crates.io/crates/rustls)\n* thorough [compliance coverage tracking](https://github.com/aws/s2n-quic/blob/main/docs/ci.md#compliance) of normative language in relevant standards\n* and much more, including [CUBIC congestion controller](https://www.rfc-editor.org/rfc/rfc8312.html) support, [packet pacing](https://www.rfc-editor.org/rfc/rfc9002.html#name-pacing), [Generic Segmentation Offload](https://lwn.net/Articles/188489/) support, [Path MTU discovery](https://www.rfc-editor.org/rfc/rfc8899.html), and unique [connection identifiers](https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-id) detached from the address\n\nSee the [API documentation](https://docs.rs/s2n-quic) and [examples](https://github.com/aws/s2n-quic/tree/main/examples) to get started with `s2n-quic`.\n\n[![Crates.io][crates-badge]][crates-url]\n[![docs.rs][docs-badge]][docs-url]\n[![Apache 2.0 Licensed][license-badge]][license-url]\n[![Build Status][actions-badge]][actions-url]\n[![Dependencies][dependencies-badge]][dependencies-url]\n[![MSRV][msrv-badge]][msrv-url]\n\n## Installation\n\n`s2n-quic` is available on `crates.io` and can be added to a project like so:\n\n```toml\n[dependencies]\ns2n-quic = \"1\"\n```\n\n__NOTE__: On unix-like systems, [`s2n-tls`](https://github.com/aws/s2n-tls) will be used as the default TLS provider and requires a C compiler to be installed.\n\n## Example\n\nThe following implements a basic echo server and client. The client connects to the server and pipes its `stdin` on a stream. The server listens for new streams and pipes any data it receives back to the client. The client will then pipe all stream data to `stdout`.\n\n### Server\n\n```rust\n// src/bin/server.rs\nuse s2n_quic::Server;\nuse std::error::Error;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error>> {\n    let mut server = Server::builder()\n        .with_tls((\"./path/to/cert.pem\", \"./path/to/key.pem\"))?\n        .with_io(\"127.0.0.1:4433\")?\n        .start()?;\n\n    while let Some(mut connection) = server.accept().await {\n        // spawn a new task for the connection\n        tokio::spawn(async move {\n            while let Ok(Some(mut stream)) = connection.accept_bidirectional_stream().await {\n                // spawn a new task for the stream\n                tokio::spawn(async move {\n                    // echo any data back to the stream\n                    while let Ok(Some(data)) = stream.receive().await {\n                        stream.send(data).await.expect(\"stream should be open\");\n                    }\n                });\n            }\n        });\n    }\n\n    Ok(())\n}\n```\n\n### Client\n\n```rust\n// src/bin/client.rs\nuse s2n_quic::{client::Connect, Client};\nuse std::{error::Error, net::SocketAddr};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error>> {\n    let client = Client::builder()\n        .with_tls(CERT_PEM)?\n        .with_io(\"0.0.0.0:0\")?\n        .start()?;\n\n    let addr: SocketAddr = \"127.0.0.1:4433\".parse()?;\n    let connect = Connect::new(addr).with_server_name(\"localhost\");\n    let mut connection = client.connect(connect).await?;\n\n    // ensure the connection doesn't time out with inactivity\n    connection.keep_alive(true)?;\n\n    // open a new stream and split the receiving and sending sides\n    let stream = connection.open_bidirectional_stream().await?;\n    let (mut receive_stream, mut send_stream) = stream.split();\n\n    // spawn a task that copies responses from the server to stdout\n    tokio::spawn(async move {\n        let mut stdout = tokio::io::stdout();\n        let _ = tokio::io::copy(&mut receive_stream, &mut stdout).await;\n    });\n\n    // copy data from stdin and send it to the server\n    let mut stdin = tokio::io::stdin();\n    tokio::io::copy(&mut stdin, &mut send_stream).await?;\n\n    Ok(())\n}\n```\n\n## Minimum Supported Rust Version (MSRV)\n\n`s2n-quic` will maintain a rolling MSRV (minimum supported rust version) policy of at least 6 months. The current s2n-quic version is not guaranteed to build on Rust versions earlier than the MSRV.\n\nThe current MSRV is [1.56.1][msrv-url].\n\n## Security issue notifications\nIf you discover a potential security issue in s2n-quic we ask that you notify\nAWS Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.\n\nIf you package or distribute s2n-quic, or use s2n-quic as part of a large multi-user service, you may be eligible for pre-notification of future s2n-quic releases. Please contact s2n-pre-notification@amazon.com.\n\n## License\n\nThis project is licensed under the [Apache-2.0 License][license-url].\n\n[crates-badge]: https://img.shields.io/crates/v/s2n-quic.svg\n[crates-url]: https://crates.io/crates/s2n-quic\n[license-badge]: https://img.shields.io/badge/license-apache-blue.svg\n[license-url]: https://aws.amazon.com/apache-2-0/\n[actions-badge]: https://github.com/aws/s2n-quic/workflows/ci/badge.svg\n[actions-url]: https://github.com/aws/s2n-quic/actions/workflows/ci.yml?query=branch%3Amain\n[docs-badge]: https://img.shields.io/docsrs/s2n-quic.svg\n[docs-url]: https://docs.rs/s2n-quic\n[dependencies-badge]: https://img.shields.io/librariesio/release/cargo/s2n-quic.svg\n[dependencies-url]: https://crates.io/crates/s2n-quic/dependencies\n[msrv-badge]: https://img.shields.io/badge/MSRV-1.56.1-green\n[msrv-url]: https://blog.rust-lang.org/2021/11/01/Rust-1.56.1.html\n"
 },
 {
  "repo": "BlockchainCommons/seedtool-cli",
  "language": "C++",
  "readme_contents": "# \ud83c\udf31 Blockchain Commons seedtool-cli\n\n![macos](https://github.com/BlockchainCommons/seedtool-cli/workflows/macOS/badge.svg)\n![linux](https://github.com/BlockchainCommons/seedtool-cli/workflows/linux/badge.svg)\n![linter](https://github.com/BlockchainCommons/seedtool-cli/workflows/linter/badge.svg)\n\n### _by [Wolf McNally](https://www.github.com/wolfmcnally) and [Christopher Allen](https://www.github.com/ChristopherA)_\n\n* <img src=\"https://github.com/BlockchainCommons/crypto-commons/blob/master/images/logos/crypto-commons-super-simple.png\" width=16 valign=\"bottom\">&nbsp;&nbsp; ***part of the [crypto commons](https://github.com/BlockchainCommons/crypto-commons/blob/master/README.md) technology family***\n* <img src=\"https://github.com/BlockchainCommons/Gordian/blob/master/Images/logos/gordian-icon.png\" width=16 valign=\"bottom\"> ***part of the [gordian](https://github.com/BlockchainCommons/gordian/blob/master/README.md) technology family***\n\n<p align=\"center\">\n  <img width=\"640\" height=\"320\" src=\"images/logos/seedtool-screen.png\">\n</p>\n\n## Introduction\n\n`seedtool` is a command-line tool for creating and transforming cryptographic seeds of the sort commonly used by blockchain applications.\n\nIt exercises the various cryptographic C libraries created by Blockchain Commons, as described in the Dependencies section.\n\n## Status - Feature-Complete Beta\n\nSeedtool is now considered feature-complete and is entering beta-level testing.\n\n## Dependencies\n\nSeedtool exercises the following Blockchain Commons libraries:\n\n* [`bc-crypto-base`](https://github.com/blockchaincommons/bc-crypto-base)\n* [`bc-shamir`](https://github.com/blockchaincommons/bc-shamir)\n* [`bc-sskr`](https://github.com/blockchaincommons/bc-sskr)\n* [`bc-bip39`](https://github.com/blockchaincommons/bc-bip39)\n* [`bc-ur`](https://github.com/blockchaincommons/bc-ur)\n\nIt also requires the following additional programs:\n\n* [`GNU argp`](https://www.gnu.org/software/libc/manual/html_node/Argp.html)\n* [`CBOR Lite`](https://bitbucket.org/isode/cbor-lite)\n\n### Tool Dependencies\n\nTo build `seedtool` you'll need to use the following tools:\n\n- autotools - Gnu Build System from Free Software Foundation ([intro](https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html)).\n\n## Recommended Installation instructions\n\nThe dependencies will be automatically installed as submodules when you run the build script. This is the recommended way to install.\n\n### Build with Docker\n\n[Install docker](https://docs.docker.com/get-docker/) and run:\n\n```bash\n# Build the image\n$ docker build -t seedtool-cli .\n# Run the container\n$ docker run --rm -it seedtool-cli --help\n```\n\n### Build on MacOS\n\n```bash\n$ brew install autoconf automake libtool\n```\n\nYou must then download or clone this repo. Afterward, cd into the repo directory and:\n\n```bash\n$ ./build.sh\n$ sudo make install\n```\n\n### Build on Linux\n\nMake sure you have `llvm`/`clang`, `libc++` and `libc++abi` installed, all with\na minimum recommended version 10.\n\n#### Build on Ubuntu and Debian\n\n```bash\n$ sudo apt install build-essential\n\n$ wget https://apt.llvm.org/llvm.sh\n$ chmod +x llvm.sh\n$ sudo apt install lsb-release wget software-properties-common\n$ sudo ./llvm.sh 10  # version 10\n\n$ sudo apt-get install libc++-10-dev libc++abi-10-dev\n```\n\n```bash\n$ sudo apt-get install git\n$ git clone https://github.com/BlockchainCommons/seedtool-cli.git\n$ cd seedtool-cli/\n$ export CC=\"clang-10\" && export CXX=\"clang++-10\" && ./build.sh\n$ sudo make install\n```\n\n### Build on Windows\n\nSee [instructions here](Docs/Install-Windows.md).\n\n## Alternative Installation Instructions\n\nThe following sequence does *not* install the dependencies from submodules; instead they must be installed in the usual places on the build system, otherwise the `./configure` step below will fail.\n\n```bash\n$ ./configure\n$ make\n$ sudo make install\n```\n*Note:* On Linux the first step is `./configure CC=clang-10 CXX=clang++-10`\n\n## Incremental Build Instructions\n\nIf you wish to make changes to the source code and rebuild:\n\n```bash\n# Make source changes\n$ source set_build_paths.sh # sets shell variables used by make\n$ make clean # If you want a clean build\n$ make\n```\n\n## Usage Instructions\n\nSee [usage examples](Docs/Usage.md) for examples of using seedtool.\n\n## Full Documentation\n\nSee [`MANUAL.md`](Docs/MANUAL.md) for details, many more examples, and version history.\n\n## Notes for Maintainers\n\nBefore accepting a PR that can affect build or unit tests, make sure the following sequence of commands succeeds:\n\n```bash\n$ ./build.sh\n$ make lint\n$ make check\n$ make distclean\n```\n\n`make lint` uses [Cppcheck](https://en.wikipedia.org/wiki/Cppcheck) to perform static analysis on the code. All PRs should pass with no warnings.\n\n## Related Projects\n\n* [LetheKit](https://github.com/BlockchainCommons/bc-lethekit) is a parallel project that uses many of the same libraries, but in hardware.\n* [URKit](https://github.com/BlockchainCommons/URKit) is another example of our [bc-ur](https://github.com/BlockchainCommons/bc-ur) universal-reference library.\n\n## Origin, Authors, Copyright & Licenses\n\nUnless otherwise noted (either in this [/README.md](./README.md) or in the file's header comments) the contents of this repository are Copyright \u00a9 2020 by Blockchain Commons, LLC, and are [licensed](./LICENSE) under the [spdx:BSD-2-Clause Plus Patent License](https://spdx.org/licenses/BSD-2-Clause-Patent.html).\n\nIn most cases, the authors, copyright, and license for each file reside in header comments in the source code. When it does not we have attempted to attribute it accurately in the table below.\n\nThis table below also establishes provenance (repository of origin, permalink, and commit id) for files included from repositories that are outside of this repository. Contributors to these files are listed in the commit history for each repository, first with changes found in the commit history of this repo, then in changes in the commit history of their repo of their origin.\n\n| File      | From                                                         | Commit                                                       | Authors & Copyright (c)                                | License                                                     |\n| --------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------ | ----------------------------------------------------------- |\n| hkdf.c | [rustyrussell/ccan](https://github.com/rustyrussell/ccan/blob/master/ccan/crypto/hkdf_sha256/hkdf_sha256.c) | [d07f742](https://github.com/rustyrussell/ccan/commit/d07f742c5925b97ed558eb07aae285616f5df823) | 2016 [Rusty Russell](https://github.com/rustyrussell)<br/>2020 Wolf McNally | [MIT](https://github.com/rustyrussell/ccan/blob/master/ccan/crypto/hkdf_sha256/LICENSE)\n| hkdf.h | [rustyrussell/ccan](https://github.com/rustyrussell/ccan/blob/master/ccan/crypto/hkdf_sha256/hkdf_sha256.h) | [d07f742](https://github.com/rustyrussell/ccan/commit/d07f742c5925b97ed558eb07aae285616f5df823) | 2016 [Rusty Russell](https://github.com/rustyrussell) | [MIT](https://github.com/rustyrussell/ccan/blob/master/ccan/crypto/hkdf_sha256/LICENSE)\n| randombytes.c | [dsprenkels/randombytes](https://github.com/dsprenkels/randombytes/blob/master/randombytes.c) | [6db39aa](https://github.com/dsprenkels/randombytes/commit/6db39aaae6bb9ab97beca00d81bcfe935c56c88d) | 2017-2019 [Daan Sprenkels](https://github.com/dsprenkels/) | [MIT](https://github.com/dsprenkels/randombytes/commit/73ae9b4fce2e62babdd6a480b53ad449dd745ed9) |\n| randombytes.h | [dsprenkels/randombytes](https://github.com/dsprenkels/randombytes/blob/master/randombytes.h) | [19fd002](https://github.com/dsprenkels/randombytes/commit/19fd002d9b7b001b333a671186a91231b60d821b) | 2017-2019 [Daan Sprenkels](https://github.com/dsprenkels/) | [MIT](https://github.com/dsprenkels/randombytes/commit/73ae9b4fce2e62babdd6a480b53ad449dd745ed9) |\n\n### Tool Dependencies\n\nTo build `seedtool` you'll need to use the following tools:\n\n- autotools - Gnu Build System from Free Software Foundation ([intro](https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html)).\n\n## Financial Support\n\nSeedtool is a project of [Blockchain Commons](https://www.blockchaincommons.com/). We are proudly a \"not-for-profit\" social benefit corporation committed to open source & open development. Our work is funded entirely by donations and collaborative partnerships with people like you. Every contribution will be spent on building open tools, technologies, and techniques that sustain and advance blockchain and internet security infrastructure and promote an open web.\n\nTo financially support further development of Seedtool and other projects, please consider becoming a Patron of Blockchain Commons through ongoing monthly patronage as a [GitHub Sponsor](https://github.com/sponsors/BlockchainCommons). You can also support Blockchain Commons with bitcoins at our [BTCPay Server](https://btcpay.blockchaincommons.com/).\n\n## Contributing\n\nWe encourage public contributions through issues and pull-requests! Please review [CONTRIBUTING.md](./CONTRIBUTING.md) for details on our development process. All contributions to this repository require a GPG signed [Contributor License Agreement](./CLA.md).\n\n### Discussions\n\nThe best place to talk about Blockchain Commons and its projects is in our GitHub Discussions areas.\n\n[**Wallet Standard Discussions**](https://github.com/BlockchainCommons/AirgappedSigning/discussions). For standards and open-source developers who want to talk about wallet standards, please use the Discussions area of the [Airgapped Signing repo](https://github.com/BlockchainCommons/AirgappedSigning). This is where you can talk about projects like our [LetheKit](https://github.com/BlockchainCommons/bc-lethekit) and command line tools such as [seedtool](https://github.com/BlockchainCommons/seedtool-cli), both of which are intended to testbed wallet technologies, plus the libraries that we've built to support your own deployment of wallet technology such as [bc-bip39](https://github.com/BlockchainCommons/bc-bip39), [bc-slip39](https://github.com/BlockchainCommons/bc-slip39), [bc-shamir](https://github.com/BlockchainCommons/bc-shamir), [Sharded Secret Key Reconstruction](https://github.com/BlockchainCommons/bc-sskr), [bc-ur](https://github.com/BlockchainCommons/bc-ur), and the [bc-crypto-base](https://github.com/BlockchainCommons/bc-crypto-base). If it's a wallet-focused technology or a more general discussion of wallet standards,discuss it here.\n\n[**Blockchain Commons Discussions**](https://github.com/BlockchainCommons/Community/discussions). For developers, interns, and patrons of Blockchain Commons, please use the discussions area of the [Community repo](https://github.com/BlockchainCommons/Community) to talk about general Blockchain Commons issues, the intern program, or topics other than the [Gordian System](https://github.com/BlockchainCommons/Gordian/discussions) or the [wallet standards](https://github.com/BlockchainCommons/AirgappedSigning/discussions), each of which have their own discussion areas.\n\n### Other Questions & Problems\n\nAs an open-source, open-development community, Blockchain Commons does not have the resources to provide direct support of our projects. Please consider the discussions area as a locale where you might get answers to questions. Alternatively, please use this repository's [issues](./issues) feature. Unfortunately, we can not make any promises on response time.\n\nIf your company requires support to use our projects, please feel free to contact us directly about options. We may be able to offer you a contract for support from one of our contributors, or we might be able to point you to another entity who can offer the contractual support that you need.\n\n### Credits\n\nThe following people directly contributed to this repository. You can add your name here by getting involved \u2014 the first step is to learn how to contribute from our [CONTRIBUTING.md](./CONTRIBUTING.md) documentation.\n\n| Name              | Role                | Github                                            | Email                                 | GPG Fingerprint                                    |\n| ----------------- | ------------------- | ------------------------------------------------- | ------------------------------------- | -------------------------------------------------- |\n| Christopher Allen | Principal Architect | [@ChristopherA](https://github.com/ChristopherA) | \\<ChristopherA@LifeWithAlacrity.com\\> | FDFE 14A5 4ECB 30FC 5D22  74EF F8D3 6C91 3574 05ED |\n| Wolf McNally      | Project Lead        | [@WolfMcNally](https://github.com/wolfmcnally)    | \\<Wolf@WolfMcNally.com\\>              | 9436\u00a052EE\u00a03844\u00a01760\u00a0C3DC\u00a0\u00a03536\u00a04B6C\u00a02FCF\u00a08947\u00a080AE |\n\n## Responsible Disclosure\n\nWe want to keep all our software safe for everyone. If you have discovered a security vulnerability, we appreciate your help in disclosing it to us in a responsible manner. We are unfortunately not able to offer bug bounties at this time.\n\nWe do ask that you offer us good faith and use best efforts not to leak information or harm any user, their data, or our developer community. Please give us a reasonable amount of time to fix the issue before you publish it. Do not defraud our users or us in the process of discovery. We promise not to bring legal action against researchers who point out a problem provided they do their best to follow the these guidelines.\n\n## Reporting a Vulnerability\n\nPlease report suspected security vulnerabilities in private via email to ChristopherA@BlockchainCommons.com (do not use this email for support). Please do NOT create publicly viewable issues for suspected security vulnerabilities.\n\nThe following keys may be used to communicate sensitive information to developers:\n\n| Name              | Fingerprint                                        |\n| ----------------- | -------------------------------------------------- |\n| Christopher Allen | FDFE 14A5 4ECB 30FC 5D22  74EF F8D3 6C91 3574 05ED |\n\nYou can import a key by running the following command with that individual\u2019s fingerprint: `gpg --recv-keys \"<fingerprint>\"` Ensure that you put quotes around fingerprints that contain spaces.\n"
 },
 {
  "repo": "mikelodder7/accumulator-rs",
  "language": "Rust",
  "readme_contents": "# accumulator-rs\nCryptographic Accumulators in Rust\n\nA cryptographic accumulator allows for testing set membership without revealing which set member was tested. This avoids the need to check every member to see if a value exists and compress into a small value. Provers use a witness that a specific value is or is not in the set and generate a zero-knowledge proof.\n\nThere are three constructions for accumulators as referenced [Zero-Knowledge Proofs for Set Membership](https://eprint.iacr.org/2019/1255.pdf)\n\n1. RSA-Based: Requires groups of unknown order and can be slow to create but offers reasonable performance for witness updates and proof generation and verification. Each element must be prime number and the modulus must be large enough to be secure (\u2265 2048-bits). Elements do not have to be know in advance and can be added on-the-fly. Setup parameters include generating prime numbers for the modulus.\n1. Elliptic-Curve Pairing-Based: Accumulators proofs are smaller and faster to compute that RSA-Based. Setup parameters are large and sets are number of elements allowed is fixed after creation.\n1. Merkle Tree-Based: Setup parameters tend to be short and the accumulator size depends on the depth of the tree and the representation of the leaves.\n\nThis project aims to implement each one and compare their sizes, performance, and complexity.\n\n# Author\n\nMichael Lodder\n\n# License\n\nLicensed under either of\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n# Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you shall be dual licensed as above, without any\nadditional terms or conditions.\n"
 },
 {
  "repo": "opentimestamps/opentimestamps-server",
  "language": "Python",
  "readme_contents": "# OpenTimestamps Calendar Server\n\nThis package provides the `otsd` daemon, a calendar server which provides\naggregation, Bitcoin timestamping, and remote calendar services for\nOpenTimestamps clients. You *do not* need to run a server to use the\nOpenTimestamps protocol - public servers exist that are free to use. That said,\nrunning a server locally can be useful for developers of OpenTimestamps\nprotocol clients, particularly with a local Bitcoin node running in regtest\nmode.\n\n\n## Installation\n\nYou'll need a local Bitcoin node version 0.17.1 with a wallet with some funds in it; a pruned\nnode is fine. While `otsd` is running the wallet should not be used for other\npurposes, as currently the Bitcoin timestamping functionality assumes that it\nhas exclusive use of the wallet.\n\nInstall the requirements:\n\n```\npip3 install -r requirements.txt\n```\n\nCreate the calendar:\n```\nmkdir -p ~/.otsd/calendar/\necho \"http://127.0.0.1:14788\" > ~/.otsd/calendar/uri\ndd if=/dev/random of=~/.otsd/calendar/hmac-key bs=32 count=1\n```\n\nThe URI determines what is put into the URI field of pending attestations\nreturned by this calendar server. For a server used for testing, the above is\nfine; for production usage the URI should be set to a stable URL that\nOpenTimestamps clients will be able to access indefinitely.\n\nThe HMAC key should be kept secret; it's meant to allow for last-ditch calendar\nrecovery from untrusted sources, although only part of the functionality is\nimplemented. See the source code for more details!\n\nTo actually run the server, run the `otsd` program. Proper daemonization isn't\nimplemented yet, so `otsd` runs in the foreground. To run in testnet or\nregtest, use the `--btc-testnet` or `--btc-regtest` options. The OpenTimestamps\nprotocol does *not* distinguish between mainnet, testnet, and regtest, so make\nsure you don't mix them up!\n\nTo use your calendar server, tell your OpenTimestamps client to connect to it:\n```\nots stamp -c http://127.0.0.1:14788 -m 1 FILE\n```\n\nOpenTimestamps clients have a whitelist of calendars they'll connect to\nautomatically; you'll need to manually add your new server to that whitelist to\nuse it when upgrading or verifying:\n\n```\nots -l http://127.0.0.1:14788 upgrade FILE.ots\n```\n\nIf your server is running on testnet or regtest, make sure to tell your client\nwhat chain to use when verifying. For example, regtest:\n```\nots --btc-regtest -l http://127.0.0.1:14788 upgrade FILE.ots\n```\n\nTip: with regtest you can mine blocks on demand to make your timestamp confirm\nwith the `generate` RPC command. For example, to mine ten blocks instantly:\n\n```\nbitcoin-cli generate 10\n```\n\nBy default `otsd` binds to localhost; `otsd` is not designed to be exposed\ndirectly to the public and requires a reverse proxy for production usage. An\nexample configuration for nginx is provided under `contrib/nginx`.\n\n## Bitcoin core\n\nBitcoin node must be version 0.17.1 and the following options are needed:\n\n```\ndeprecatedrpc=signrawtransaction\ndeprecatedrpc=accounts\naddresstype=bech32\n```\n\n## Unit tests\n\npython3 -m unittest discover -v\n"
 },
 {
  "repo": "stephenhaunts/Building-Secure-Applications-with-Cryptography-in-.NET-Course-Source-Code",
  "language": "C#",
  "readme_contents": ""
 },
 {
  "repo": "Coldcard/firmware",
  "language": "C",
  "readme_contents": "# Coldcard Wallet\n\nColdcard is a Cheap, Ultra-secure & Verifiable Hardware Wallet for Bitcoin.\nGet yours at [Coldcard.com](http://coldcard.com)\n\n[Follow @COLDCARDwallet on Twitter](https://twitter.com/coldcardwallet) to keep up\nwith the latest updates and security alerts. \n\n![coldcard logo](https://coldcard.com/static/images/coldcard-logo-nav.png)\n\n![Mk4 coldcard picture front](https://coldcard.com/static/images/mk4.png)\n\n## Reproducible Builds\n\nTo have confidence this source code tree is the same as the binary on your device,\nyou can rebuild it from source and get **exactly the same bytes**. This process\nhas been automated using Docker. Steps are as follows:\n\n1. Install Docker and start it.\n2. Install [make (GNUMake)](https://www.gnu.org/software/make/) if you don't already have it.\n3. Checkout the code, and start the process.\n\n    git clone https://github.com/Coldcard/firmware.git\n\n    cd firmware/stm32\n\n    make repro\n\n4. At the end of the process a clear confirmation message is shown, or the differences.\n5. Build products can be found `firmware/stm32/built`.\n\n## Check-out and Setup\n\n**NOTE** This is the `master` branch and covers the latest hardware (Mk4).\nSee branch `v4-legacy` for firmware which supports only Mk3/Mk2 and earlier.\n\nDo a checkout, recursively to get all the submodules:\n\n    git clone --recursive https://github.com/Coldcard/firmware.git\n\nAlready checked-out and getting git errors? Do this:\n\n    git fetch\n    git reset --hard origin/master\n\nDo not use a path with any spaces in it. The Makefiles do not handle\nthat well, and we're not planning to fix it.\n\nThen:\n\n- `cd firmware`\n- `git submodule update --init` _(if needed?)_\n- `brew install automake autogen virtualenv`\n- `virtualenv -p python3 ENV` (Python > 3.5 is required)\n- `source ENV/bin/activate` (or `source ENV/bin/activate.csh` based on shell preference)\n- `pip install -r requirements.txt`\n\nSetup and Run the Desktop-based Coldcard simulator:\n\n- `cd unix; make setup && make && ./simulator.py`\n\nBuilding the firmware:\n\n- `cd ../cli; pip install --editable .`\n- `cd ../stm32; make setup && make; make firmware-signed.dfu`\n- The resulting file, `firmware-signed.dfu` can be loaded directly onto a Coldcard, using this\n  command (already installed based on above)\n- `ckcc upgrade firmware-signed.dfu`\n\nWhich looks like this:\n\n    [ENV] [firmware/stm32 42] ckcc upgrade firmware-signed.dfu\n    675328 bytes (start @ 293) to send from 'firmware-signed.dfu'\n    Uploading  [##########--------------------------]   29%  0d 00:01:04\n\n\n### MacOS\n\nYou'll probably need to install at least these packages:\n\n    brew install --cask xquartz\n    brew install sdl2 xterm\n    brew install --cask gcc-arm-embedded\n    brew install swig\n\nUsed to be these were needed as well:\n\n    brew tap PX4/px4\n    brew search px4\n    brew install px4/px4/gcc-arm-none-eabi-80 (latest gcc-arm-none-eabi-XX, currently 80)\n\nYou may need to reboot to avoid a `DISPLAY is not set` error.\n\nYou may need to `brew upgrade gcc-arm-embedded` because we need 10.2 or higher.\n\n#### Big Sur Issues\n\n- `defaults write org.python.python ApplePersistenceIgnoreState NO` will supress a warning\n  about `Python[22580:10101559] ApplePersistenceIgnoreState: Existing state will not be touched. New state will be written to...` see <https://bugs.python.org/issue32909>\n\n### Linux\n\nYou'll need to install these (Ubuntu 20.04):\n\n    apt install build-essential git python3 python3-pip libudev-dev gcc-arm-none-eabi libffi-dev xterm swig libpcsclite-dev python-is-python3\n\nInstall and run simulator on Ubuntu 20.04\n```shell\ngit clone --recursive https://github.com/Coldcard/firmware.git\ncd firmware\n# apply address patch\ngit apply unix/linux_addr.patch\n# create virtualenv and activate it\npython3 -m venv ENV  # or virtualenv -p python3 ENV\nsource ENV/bin/activate\n# install dependencies\npip install -U pip setuptools\npip install -r requirements.txt\n# build simulator\ncd unix\npushd ../external/micropython/mpy-cross/\nmake  # mpy-cross\npopd\nmake setup\nmake ngu-setup\nmake\n# below line runs the simulator\n./simulator.py\n```\n\nAlso make sure that you have your python3 symlinked to python.\n\n## Code Organization\n\nTop-level dirs:\n\n`shared`\n\n- shared code between desktop test version and real-deal\n- expected to be largely in python, and higher-level\n- new code found only on the Mk4 will be listed in `manifest_mk4.py` code exclusive\n  to earlier hardware is in `manifest_mk3.py`\n\n`unix`\n\n- unix (MacOS) version for testing/rapid dev\n- this is a simulator for the product\n\n`testing`\n\n- test cases and associated data\n\n\n`stm32`\n\n- embedded binaries (and building), for actual product hardware\n- final target is a binary file for loading onto hardware\n\n`external`\n\n- code from other projects, ie. the dreaded submodules\n\n`graphics`\n\n- images which ship as part of the final product (icons)\n\n`stm32/bootloader`\n\n- 32k of factory-set code that you cannot change (Mk3)\n- however, you can inspect what code is on your coldcard and compare to this.\n\n`stm32/mk4-bootloader`\n\n- 128k of factory-set code that you cannot change for Mk4\n- however, you can inspect what code is on your coldcard and compare to this.\n\n`hardware`\n\n- schematic and bill of materials for the Coldcard\n\n`unix/work/...`\n\n- `/MicroSD/*` files on \"simulated\" microSD card \n\n- `/VirtDisk/*` simulated emulated virtual Disk files.\n\n- `/settings/*.aes` persistant settings for Simulator\n\n\n\n## Support\n\nFound a bug? Email: support@coinkite.com\n"
 },
 {
  "repo": "qtumproject/qtum",
  "language": "C++",
  "readme_contents": "What is Qtum?\n-------------\n\nQtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org\n\nWelcome to the Qtum Fastlane Main Network. This is the main network where the tokens hold value and should be guarded very carefully. If you are testing the network, or developing unstable software on Qtum, we highly recommend using either testnet or regtest mode. \n\nThe major features of the Qtum network include:\n\n1. Compatibility with the Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts. No special solidity compiler is required to deploy your smart contract to Qtum. \n2. A Proof of Stake consensus system which is optimized for Qtum's contract model. Any user can stake and help to secure the network. There is no voting, master nodes, or minimum amount required. There have been transactions as small as 2 Qtum that have created blocks in the past. Staking from smart contracts is under development.\n3. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork or other network disruption. This currently controls parameters like block size, gas prices, etc. \n4. Uses the UTXO transaction model and is compatible with Bitcoin, allowing for existing tooling and workflows to be used with Qtum. This allows for the infamous SPV protocol to be used which is ideal for light wallets on mobile phones and IoT devices.\n\nNote: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.\n\nQtum Documentation and Usage Resources\n---------------\n\nThese are some resources that might be helpful in understanding Qtum.\n\nBasic usage resources:\n\n* [User guide](https://docs.qtum.site/en/)\n* [Qtum-Qt Wallet Tutorial](https://github.com/qtumproject/documents/tree/master/en/Qtum-Wallet-Tutorial#qtum-qt-wallet-tutorial)\n* [Qtum staking tutorial](https://github.com/qtumproject/documents/tree/master/en/How-to-Stake-with-Qtum)\n* [Qtum tutorial on Raspberry Pi](https://github.com/qtumproject/documents/tree/master/en/Qtum-on-Raspberry-Pi)\n* [Running Qtum on Amazon AWS using Qtum AMI](https://github.com/qtumproject/documents/tree/master/en/Qtum-AWS)\n* [Encrypting and unlocking wallet](https://github.com/qtumproject/documents/tree/master/en/Encrypt-and-Unlock-Qtum-Wallet)\n* [Testnet guide](https://github.com/qtumproject/documents/blob/master/en/Testnet-User-Guide.md)\n* [Block explorer](https://qtum.info), [Older explorer](https://explorer.qtum.org)\n\n\nDevelopment resources:\n\n* [Qtum Book - A Developer's Guide To QTUM](http://book.qtum.site/en/)\n* [Qtum contract usage](https://docs.qtum.site/en/QRC20-Token-Introduce.html)\n* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)\n* [QtumJS document](https://qtumproject.github.io/qtumjs-doc/)\n* [Smart contract ICO example](http://book.qtum.site/en/part3/ico.htm)\n* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)\n\nGeneral Info about Qtum:\n\n* [CIRCLERESEARCH Qtum Primer](https://www.circle.com/marketing/pdfs/research/circle-research-qtum.pdf)\n* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)\n* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)\n\n\nDeveloper's Tools\n-----------------\n\n* Smart contract deployment tool\n  * https://github.com/qtumproject/solar\n* DApp JavaScript Library\n  * https://github.com/qtumproject/qtumjs\n* A toolkit for building qtum light wallets\n  * https://github.com/qtumproject/qtumjs-wallet\n* CORS qtumd RPC proxy for DApp\n  * https://github.com/qtumproject/qtumportal\n* Docker images for running qtum services\n  * https://github.com/qtumproject/qtum-docker\n* qtum.info API that powers the block explorer and the QTUM Web wallet\n  * https://github.com/qtumproject/qtuminfo-api#qtuminfo-api-documentation\n\n\nWhat is Qtum Core?\n------------------\n\nQtum Core is our primary mainnet wallet. It implements a full node and is capable of storing, validating, and distributing all history of the Qtum network. Qtum Core is considered the reference implementation for the Qtum network. \n\nQtum Core currently implements the following:\n\n* Sending/Receiving QTUM coins\n* Sending/Receiving QRC20 tokens on the Qtum network\n* Staking and creating blocks for the Qtum network\n* Creating and interacting with smart contracts\n* Running a full node for distributing the blockchain to other users\n* \"Prune\" mode, which minimizes disk usage\n* Regtest mode, which enables developers to very quickly build their own private Qtum network for Dapp testing\n* Testnet mode, using the public Qtum Testnet, with faucet available\n* Compatibility with the Bitcoin Core set of RPC commands and APIs\n* Full SegWit capability with p2sh-segwit (legacy) and bech32 (native) addresses\n\nAlternative Wallets\n-------------------\n\nQtum Core uses a full node model, and thus requires downloading the entire blockchain. If you do not need the entire blockchain, and do not intend on developing smart contracts, it may be more ideal to use an alternative wallet such as one of our light wallets that can be synchronized in a matter of seconds. \n\n### Qtum Web Wallet\n\nA browser wallet that supports the Ledger hardware wallet, offline cold wallet, restoration from mobile wallets, creation of QRC20 tokens and QRC1155 NFTs.\n\nWeb site https://qtumwallet.org\n\nUser documentation https://github.com/qtumproject/documents/tree/master/en/QTUM-WebWallet-usage\n\n### Qtum Electrum\n\nA light wallet that supports the Ledger and Trezor hardware wallets and is based on the well-known Electrum wallet software. \n\nDownload: https://github.com/qtumproject/qtum-electrum/releases\n\n### iOS and Android Wallets\n\nThese wallets run on mobile devices and synchronize quickly. \n\nAndroid Download: https://play.google.com/store/apps/details?id=org.qtum.newwallet\n\niOS Download: https://github.com/qtumproject/qtum-ios (open source, deprecated)\n\n### Qnekt Chrome Wallet\n\nThis light wallet runs in your Chrome browser as a browser extension, based on the popular MetaMask wallet.\n\n\n### Community Resources\n\nMake sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.\n\n*\t@Qtum on Twitter https://twitter.com/qtum\n* Qtum blog https://blog.qtum.org/\n*\tQtum Telegram Group https://t.me/qtumofficial, other languages available\n* Qtum Discord https://discordapp.com/invite/wRfmkQ9\n*\t/r/Qtum on Reddit https://www.reddit.com/r/Qtum/\n*\tQtum.org https://qtum.org\n*\tQtum on Facebook https://www.facebook.com/QtumOfficial/\n\n### Qtum Smart Contract Limitations\n\n*\tEVM smart contracts cannot receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM\n*\tContracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.\n*\tAlthough all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either searchlogs or -record-log-opcodes features.\n*\tIt is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled.\n*\tIn Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the coinbase operation in Solidity (this address is also the one registered for the continuous staker rewards after 2000 blocks).\n\n----------\n\n# Building Qtum Core\n\n### Validate and Reproduce Binaries\n\nQtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided in [Gitan Building](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)\n\n### Build on Ubuntu\n\nThis is a quick start script for compiling Qtum on Ubuntu\n\n\n    sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils git cmake libboost-all-dev libgmp3-dev\n    sudo apt-get install software-properties-common\n    sudo add-apt-repository ppa:bitcoin/bitcoin\n    sudo apt-get update\n    sudo apt-get install libdb4.8-dev libdb4.8++-dev\n\n    # If you want to build the Qt GUI:\n    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler qrencode\n\n    git clone https://github.com/qtumproject/qtum --recursive\n    cd qtum\n\n    # Note autogen will prompt to install some more dependencies if needed\n    ./autogen.sh\n    ./configure \n    make -j2\n    \n### Build on CentOS\n\nHere is a brief description for compiling Qtum on CentOS, for more details please refer to [the specific document](https://github.com/qtumproject/qtum/blob/master/doc/build-unix.md)\n\n    # Compiling boost manually\n    sudo yum install python-devel bzip2-devel\n    git clone https://github.com/boostorg/boost.git\n    cd boost\n    git checkout boost-1.66.0\n    git submodule update --init --recursive\n    ./bootstrap.sh --prefix=/usr --libdir=/usr/lib64\n    ./b2 headers\n    sudo ./b2 -j4 install\n    \n    # Installing Dependencies for Qtum\n    sudo yum install epel-release\n    sudo yum install libtool libdb4-cxx-devel openssl-devel libevent-devel gmp-devel\n    \n    # If you want to build the Qt GUI:\n    sudo yum install qt5-qttools-devel protobuf-devel qrencode-devel\n    \n    # Building Qtum\n    git clone --recursive https://github.com/qtumproject/qtum.git\n    cd qtum\n    ./autogen.sh\n    ./configure\n    make -j4\n\n### Build on Mac OS\n\nThe commands in this guide should be executed in a Terminal application.\nThe built-in one is located in `/Applications/Utilities/Terminal.app`.\n\n#### Preparation\n\nInstall the Mac OS command line tools:\n\n`xcode-select --install`\n\nWhen the popup appears, click `Install`.\n\nThen install [Homebrew](https://brew.sh).\n\n#### Dependencies\n\n    brew install cmake automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5 libevent imagemagick librsvg qrencode gmp\n\nNOTE: Building with Qt4 is still supported, however, could result in a broken UI. Building with Qt5 is recommended.\n\n#### Build Qtum Core\n\n1. Clone the qtum source code and cd into `qtum`\n\n        git clone --recursive https://github.com/qtumproject/qtum.git\n        cd qtum\n\n2.  Build qtum-core:\n\n    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).\n\n    You can disable the GUI build by passing `--without-gui` to configure.\n\n        ./autogen.sh\n        ./configure\n        make\n\n3.  It is recommended to build and run the unit tests:\n\n        make check\n\n### Run\n\nThen you can either run the command-line daemon using `src/qtumd` and `src/qtum-cli`, or you can run the Qt GUI using `src/qt/qtum-qt`\n\nLicense\n-------\n\nQtum is GPLv3 licensed.\n\nDevelopment Process\n-------------------\n\nThe `master` branch is regularly built and tested, but is not guaranteed to be\ncompletely stable. [Tags](https://github.com/qtumproject/qtum/tags) are created\nregularly to indicate new official, stable release versions of Qtum.\n\nThe contribution workflow is described in [CONTRIBUTING.md](https://github.com/qtumproject/qtum/blob/master/CONTRIBUTING.md)\nand useful hints for developers can be found in [doc/developer-notes.md](doc/developer-notes.md).\n\nTesting\n-------\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money.\n\n### Automated Testing\n\nDevelopers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\nsubmit new unit tests for old code. Unit tests can be compiled and run\n(assuming they weren't disabled in configure) with: `make check`. Further details on running\nand extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n\nThere are also [regression and integration tests](/test), written\nin Python.\nThese tests can be run (if the [test dependencies](/test) are installed) with: `test/functional/test_runner.py`\n\nThe CI (Continuous Integration) systems make sure that every pull request is built for Windows, Linux, and macOS,\nand that unit/sanity tests are run automatically.\n\n### Manual Quality Assurance (QA) Testing\n\nChanges should be tested by somebody other than the developer who wrote the\ncode. This is especially important for large or high-risk changes. It is useful\nto add a test plan to the pull request description if testing the changes is\nnot straightforward.\n\nTranslations\n------------\n\nChanges to translations as well as new translations can be submitted to\n[Bitcoin Core's Transifex page](https://www.transifex.com/bitcoin/bitcoin/).\n\nTranslations are periodically pulled from Transifex and merged into the git repository. See the\n[translation process](doc/translation_process.md) for details on how this works.\n\n**Important**: We do not accept translation changes as GitHub pull requests because the next\npull from Transifex would automatically overwrite them again.\n"
 },
 {
  "repo": "yaosiang/cryptography-course",
  "language": "TypeScript",
  "readme_contents": "# \u5efa\u8b70\u958b\u767c\u8005\u77e5\u9053\u7684\u5bc6\u78bc\u5b78\u77e5\u8b58\n\n## \u7b2c\u4e00\u6b21\u8ab2\u7a0b\n\n### Hash\n- Hash \u662f\u505a\u4ec0\u9ebc\u7528\u7684\uff1f\n- Hash \u7684\u7279\u6027\n- \u4ec0\u9ebc\u662f Cryptographic Hash Function\uff1f\n- \u5e38\u898b\u6f14\u7b97\u6cd5\n- \u8ff7\u601d\uff1a\u96dc\u6e4a\u4e0d\u7b49\u65bc\u52a0\u5bc6\n\n### Message Authentication Code\n- \u5982\u4f55\u78ba\u8a8d\u8a0a\u606f\u672a\u88ab\u7ac4\u6539\uff1f\n- \u5e38\u898b\u6f14\u7b97\u6cd5\n\n### Key Derivation Function\n- KDF \u662f\u4ec0\u9ebc\uff1f\n- \u5bc6\u78bc\u8981\u600e\u9ebc\u5b58\u653e\uff1f\n- \u5e38\u898b\u6f14\u7b97\u6cd5\n\n### Random Number Generator\n- \u4ec0\u9ebc\u662f\u96a8\u6a5f\u4e82\u6578\uff1f\n- \u4ec0\u9ebc\u662f CSPRNG\uff1f\n\n### Symmetric Encryption\n- \u8a0a\u606f\u7684\u6a5f\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u3001\u4e0d\u53ef\u5426\u8a8d\u6027\u662f\u4ec0\u9ebc\u610f\u601d\uff1f\n- \u5c0d\u7a31\u5f0f\u8ddf\u975e\u5c0d\u7a31\u5f0f\u662f\u600e\u9ebc\u5340\u5206\u7684\uff1f\n- XOR \u904b\u7b97\u662f\u4ec0\u9ebc\uff1f\n- AES \u662f\u4ec0\u9ebc\uff1f\n- AES Mode of Operation \u53c8\u662f\u4ec0\u9ebc\uff1f\n- \u8ff7\u601d\uff1aAES \u4e00\u5b9a\u662f\u5b89\u5168\u7684\u55ce\uff1f\n- \u5982\u4f55\u78ba\u4fdd\u8a0a\u606f\u5b8c\u6574\u6027\uff1f\n- \u8ff7\u601d\uff1a\u96dc\u6e4a\u4e0d\u7b49\u65bc\u52a0\u5bc6\n\n---\n\n## \u7b2c\u4e8c\u6b21\u8ab2\u7a0b\n\n### Key Exchange\n- \u91d1\u9470\u4ea4\u63db\u7684\u76ee\u7684\n- Key Exchange \u4f5c\u6cd5\n\n### Asymmetric Encryption\n- \u7528\u540c\u4e00\u628a Key \u505a\u4e8b\u60c5\u6703\u6709\u4ec0\u9ebc\u554f\u984c\uff1f\n- \u975e\u5c0d\u7a31\u5f0f\u662f\u4ec0\u9ebc\u610f\u601d\uff1f\n- \u5e38\u898b\u6f14\u7b97\u6cd5\u65cf\u7cfb\n- \u70ba\u4ec0\u9ebc\u4e0d\u80fd\u5920\u4f7f\u7528 Asymmetric Encryption \u4f86\u52a0\u5bc6\u4efb\u4f55\u6771\u897f\uff1f\u5982\u4f55\u7528 Hybrid Cryptography System \u4f86\u514b\u670d\uff1f\n\n### Digital Signature\n- \u8a0a\u606f\u7684\u4e0d\u53ef\u5426\u8a8d\u6027\u600e\u9ebc\u505a\u5230\u7684\uff1f\n- \u7c3d\u7ae0\u8207\u67e5\u9a57\n- \u6578\u4f4d\u7c3d\u7ae0\u53ef\u4ee5\u505a\u4ec0\u9ebc\u7528\uff1f\n\n---\n\n## \u7b2c\u4e09\u6b21\u8ab2\u7a0b\n\n### SSL\uff0fTLS\n- TLS \u53ef\u4ee5\u505a\u5230\u600e\u6a23\u7684\u4fdd\u8b77\uff1f\n- TLS Handshake\n- TLS Cipher Suites\n- \u6578\u4f4d\u6191\u8b49\u662f\u600e\u9ebc\u904b\u4f5c\u7684\uff1f\n\n### JSON Web Token\n- JWT \u662f\u4ec0\u9ebc\uff1f\n- JWT \u6709\u90a3\u4e9b\u8b8a\u5f62\uff1f\n- JWT \u5e38\u898b\u7528\u9014\n\n### \u5176\u4ed6\u61c9\u7528\n- One Time Password \u662f\u4ec0\u9ebc\uff1f\n\n---\n\n## \u8ab2\u5f8c\u8a55\u91cf\n\n- [\u8a55\u91cf\u8003\u5238](exam.md)\n"
 },
 {
  "repo": "mlachmish/Cryptography",
  "language": "Swift",
  "readme_contents": "<p align=\"center\">\n<img src=\"assets/cryptography.png?raw=true\" alt=\"Cryptography\">\n</p>\n\n<p align = \"center\">\n    <a href=\"https://developer.apple.com/swift\">\n      <img src=\"https://img.shields.io/badge/language-swift-orange.svg?style=flat\" alt=\"Language\">\n    </a>\n    <a href=\"https://developer.apple.com\">\n      <img src=\"https://img.shields.io/badge/platform-linux%20%7C%20osx%20%7C%20ios%20%7C%20watchos%20%7C%20tvos-lightgrey.svg?style=flat\" alt=\"Platform\">\n    </a>\n    <a href=\"https://raw.githubusercontent.com/mlachmish/Cryptography/blob/master/LICENSE\">\n      <img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat\" alt=\"MIT licensed\">\n    </a>\n  <br>\n    <a href=\"https://travis-ci.org/mlachmish/Cryptography\">\n      <img src=\"https://travis-ci.org/mlachmish/Cryptography.svg?style=flat&branch=master\" alt=\"Build Status\">\n    </a>\n    <a href=\"https://www.codacy.com/app/mlachmish/Cryptography\">\n      <img src=\"https://api.codacy.com/project/badge/Grade/137aa31f62464045aad5f190123fdf67?style=flat\" alt=\"Code Quality\">\n    </a>\n    <a href=\"https://codecov.io/gh/mlachmish/Cryptography\">\n      <img src=\"https://codecov.io/gh/mlachmish/Cryptography/branch/master/graph/badge.svg?style=flat\" alt=\"Code Coverage\">\n    </a>\n    <a href=\"http://cocoadocs.org/docsets/Cryptography\">\n      <img src=\"https://img.shields.io/cocoapods/metrics/doc-percent/Cryptography.svg?style=flat\" alt=\"Doc Coverage\">\n    </a>\n  <br>\n      <a href=\"https://cocoapods.org/pods/Cryptography\">\n        <img src=\"https://img.shields.io/cocoapods/v/Cryptography.svg?style=flat\"\n             alt=\"CocoaPods\">\n    </a>\n    <a href=\"https://github.com/Carthage/Carthage\">\n        <img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\"\n             alt=\"Carthage\">\n    </a>\n</p>\n\n<br>\n<p align=\"center\">A modern cryptography library in Swift.</p>\n<p align=\"center\">\n  <a href=\"#features\">Features</a>\n  \u2022 <a href=\"#usage\">Usage</a>\n  \u2022 <a href=\"#installation\">Installation</a>\n  \u2022 <a href=\"http://cocoadocs.org/docsets/Cryptography\">Documentation</a>\n  \u2022 <a href=\"#author\">Author</a>\n  \u2022 <a href=\"#license\">License</a>\n</p>\n\n## Features\n\n- [x] Hash Functions\n  - MD5\n  - SHA-1\n  - SHA-2 <sub>(SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256)</sub>\n  - SHA-3\n- [x] Message Authentication Codes\n  - HMAC <sub>(via: SHA-3/SHA-2/SHA-1/MD5)</sub>\n\n### Soon to come\n- [ ] High Speed Stream Ciphers\n  - ChaCha\n  - Panama\n  - Sosemanuk\n  - Salsa20\n- [ ] block ciphers\n  - AES (Rijndael)\n  - Triple-DES (DES-EDE2 and DES-EDE3)\n  - Blowfish\n  - RC5\n- [ ] Message Authentication Codes\n  - VMAC\n  - CMAC\n  - GMAC\n- [ ] Hash Functions\n  - BLAKE2s\n  - BLAKE2b\n  - RIPEMD\n- [ ] Public-Key Cryptography\n  - RSA\n  - DSA\n  - ElGamal\n  - Nyberg-Rueppel (NR)\n  - Rabin-Williams (RW)\n- [ ] Key Agreement Schemes\n  - Diffie-Hellman (DH)\n  - Unified Diffie-Hellman (DH2)\n- [ ] Elliptic Curve Cryptography\n  - ECDSA\n  - ECNR\n  - ECIES\n\n## Usage\n\n* [Hash Functions](#hash-functions)\n* [Message Authentication Codes](#message-authentication-codes)\n\nFirst import Cryptography module.\n```swift \nimport Cryptography\n```\nEverything you need is available via the ``` Cryptography ``` facade.\n\n### Hash Functions\nIn order to calculate a hash value you simply call ``` Cryptography.hash(message: String, method: HashMethod) -> String ``` with the desired ``` HashMethod ```\n```swift\nlet hashValue = Cryptography.hash(\"The quick brown fox jumps over the lazy dog\", method: HashMethod.SHA1) // \"2fd4e1c67a2d28fced849ee1bb76e7391b93eb12\"\n```\n\n### Message Authentication Codes\nIn order to calculate a MAC value you simply call ``` authenticate(message: String, key: String, method: MACMethod) -> String ``` with the desired ``` MACMethod ```\n```swift\nlet macValue = Cryptography.authenticate(\"The quick brown fox jumps over the lazy dog\", key: \"key\", method: MACMethod.HMAC(hashMethod: HashMethod.SHA1)) // \"de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9\"\n```\n\n## Installation\n\n### Compatibility\n\n- OS X 10.9+ / iOS 8.0+ / watchOS 2.0 / tvOS 9.0\n\n- Xcode 7.1+, Swift 2.1+\n\n### Install Using CocoaPods\n[CocoaPods](https://cocoapods.org/) is a centralized dependency manager for\nObjective-C and Swift. Go [here](https://guides.cocoapods.org/using/index.html)\nto learn more.\n\n1. Add the project to your [Podfile](https://guides.cocoapods.org/using/the-podfile.html).\n\n    ```ruby\n    use_frameworks!\n\n    pod 'Cryptography'\n    ```\n\n2. Run `pod install` and open the `.xcworkspace` file to launch Xcode.\n\n### Install Using Carthage\n[Carthage](https://github.com/Carthage/Carthage) is a decentralized dependency\nmanager for Objective-C and Swift.\n\n1. Add the project to your [Cartfile](https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile).\n\n    ```\n    github \"mlachmish/Cryptography\"\n    ```\n\n2. Run `carthage update` and follow [the additional steps](https://github.com/Carthage/Carthage#getting-started)\n   in order to add Cryptography to your project.\n    \n###Swift Package Manager\nYou can use [Swift Package Manager](https://swift.org/package-manager/) and specify dependency in `Package.swift` by adding this:\n```\n.Package(url: \"https://github.com/mlachmish/Cryptography.git\", majorVersion: 0)\n```\n\n### Manually\nDownload and drop ```/Cryptography``` folder in your project.\n\n## Author\n\nMatan Lachmish <sub>a.k.a</sub> <b>The Big Fat Ninja</b> <img src=\"assets/TheBigFatNinja.png?raw=true\" alt=\"The Big Fat Ninja\" width=\"13\"><br>\nhttps://thebigfatninja.xyz\n\n### Audit & Security Disclosure\n\nIf you believe you have identified a security vulnerability with Cryptography,<br>\nplease report it as soon as possible via email to security@thebigfatninja.xyz<br>\nDo not post it to the public issue tracker.\n\n### attribution\n\nIcon made by <a title=\"Freepik\" href=\"http://www.freepik.com\">Freepik</a> from <a title=\"Flaticon\" href=\"http://www.flaticon.com\">www.flaticon.com</a>\n\n## License\n\nCryptography is available under the MIT license. See the LICENSE file for more info.\n"
 },
 {
  "repo": "LuminousXLB/MyCryptography",
  "language": null,
  "readme_contents": "# What's this\n\nI searched all the web but cannot find a solution manual for _**Introduction to Modern Cryptography**_ \\(2nd edition\\) written by Jonathan Katz and Yehuda Lindell. So I decided to do it myself.\n\nIf there's anything wrong or missing, please open an issue or open a pull request. If you want a solution for a problem that hasn't been listed here, please open an issue and we may discucss together.\n\n"
 },
 {
  "repo": "mimoo/crypto_blogs",
  "language": null,
  "readme_contents": "# List of blogs to follow\n\nYou can import the `blogs.xml` file with your favorite RSS client.\n\nFeel free to submit new blogs as well!\n\n[More info here](https://netzpolitik.org/2017/interview-how-to-pique-your-curiosity-in-cryptography/)\n\n> We talked to the cryptographer David Wong about crypto-related blogs worth reading and exploring in an interview. We also asked him about the changing landscape of the crypto-world and the awareness of IT security issues.\n"
 },
 {
  "repo": "ryancdotorg/brainflayer",
  "language": "C",
  "readme_contents": "Brainflayer\n===========\n\nBrainflayer is a Proof-of-Concept brainwallet cracking tool that uses\n[libsecp256k1](https://github.com/bitcoin/secp256k1) for pubkey generation.\nIt was originally released as part of my DEFCON talk about cracking brainwallets\n([slides](https://rya.nc/dc23), [video](https://rya.nc/b6), [why](https://rya.nc/defcon-brainwallets.html)).\n\nThe name is a reference to [Mind Flayers](https://en.wikipedia.org/wiki/Illithid),\na race of monsters from the Dungeons & Dragons role-playing game. They eat\nbrains, psionically enslave people and look like lovecraftian horrors.\n\nThe current release is more than four times faster than the DEFCON release, and\nmany features have been added.\n\nIf brainflayer is useful to you, please get in touch to let me know. I'm very\ninterested in any research it's being used for, and I'm generally happy to\ncollaborate with academic groups.\n\nDisclaimer\n----------\nJust because you *can* steal someone's money doesn't mean you *should*.\nStealing would make you a jerk. Don't be a jerk.\n\nNo support will be provided at this time, and I may ignore or close issues\nrequesting support without responding.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nUsage\n-----\n\n### Basic\n\nPrecompute the bloom filter:\n\n`hex2blf example.hex example.blf`\n\nRun Brainflayer against it:\n\n`brainflayer -v -b example.blf -i phraselist.txt`\n\nor\n\n`your_generator | brainflayer -v -b example.blf`\n\n### Advanced\n\nBrainflayer's design is heavily influenced by [Unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy).\nIt (mostly) does one thing: hunt for tasty brainwallets. A major feature it\ndoes *not* have is generating candidate passwords/passphrases. There are plenty\nof other great tools that do that, and brainflayer is happy to have you pipe\ntheir output to it.\n\nUnfortunately, brainflayer is not currently multithreaded. If you want to have\nit keep multiple cores busy, you'll have to come up with a way to distribute\nthe work yourself (brainflayer's -n and -k options may help). In my testing,\nbrainflayer benefits significantly from hyperthreading, so you may want to\nrun two copies per physical core. Also worth noting is that brainflayer mmaps\nits data files in shared memory, so additional brainflayer processes do not\nuse up that much additional RAM.\n\nWhile not strictly required, it is *highly* recommended to use the following\noptions:\n\n* `-m FILE` Load the ecmult table from `FILE` (generated with `ecmtabgen`)\n            rather than computing it on startup. This will allow multiple\n            brainflayer processes to share the same table in memory, and\n            signifigantly reduce startup time when using a large table.\n\n* `-f FILE` Verify check bloom filter matches against `FILE`, a list of all\n            hash160s generated with\n            `sort -u example.hex | xxd -r -p > example.bin`\n            Enough addresses exist on the Bitcoin network to cause false\n            positives in the bloom filter, this option will suppress them.\n\nBrainflayer supports a few other types of input via the `-t` option:\n\n* `-t keccak` passphrases to be hashed with keccak256 (some ethereum tools)\n\n* `-t priv` raw private keys - this can be used to support arbitrary\n            deterministic wallet schemes via an external program. Any trailing\n            data after the hex encoded private key will be included in\n            brainflayer's output as well, for reference. See also the `-I`\n            option if you want to crack a bunch of sequential keys, which has\n            special speed optimizations.\n\n* `-t warp` salts or passwords/passphrases for WarpWallet\n\n* `-t bwio` salts or passwords/passphrases for brainwallet.io\n\n* `-t bv2`  salts or passwords/passphrases for brainv2 - this one is *very* slow\n            on CPU, however the parameter choices make it a great target for GPUs\n            and FPGAs.\n\n* `-t rush` passwords for password-protected rushwallets - pass the fragment (the\n            part of the url after the #) using `-r`. Almost all wrong passwords\n            will be rejected even without a bloom filter.\n\nAddress types can be specified with the `-c` option:\n\n* `-c u` uncompressed addresses\n\n* `-c c` compressed addresses\n\n* `-c e` ethereum addresses\n\n* `-c x` most signifigant bits of public point's x coordinate\n\nIt's possible to combine two or more of these, e.g. the default is `-c uc`.\n\nAn incremental private key brute force mode is available for fans of\n[directory.io](http://www.directory.io/), try\n\n`brainflayer -v -I 0000000000000000000000000000000000000000000000000000000000000001 -b example.blf`\n\nSee the output of `brainflayer -h` for more detailed usage info.\n\nAlso included is `blfchk` - you can pipe it hex encoded hash160 to check a\nbloom filter file for. It's very fast - it can easily check millions of\nhash160s per second. Not entirely sure what this is good for but I'm sure\nyou'll come up with something.\n\nBuilding\n--------\n\nShould compile on Linux with `make` provided you have the required devel libs\ninstalled (at least openssl and gmp are required along with libsecp256k1's\nbuild dependencies). I really need to learn autotools. If you file an issue\nabout a build failure in libsecp256k1 I will close it.\n\nDependencies should install with\n\n```\napt install build-essential libgmp-dev libssl-dev\n```\n\nSupported build target is currently Ubuntu 20.04 on amd64/x86_64. Issues with\nbuilding for other platforms probably won\u2019t be fixed. In particular, Kali Linux\nis *not* supported. Support for operating systems other than Linux would require\nextensive refactoring of Brainflayer's memory optimizations and is not happening.\n\nRedistribution of compiled `brainflayer` binaries is prohibited, and\nunauthorized binaries probably contain malware.\n\nAuthors\n-------\n\nThe bulk of Brainflayer was written by Ryan Castellucci. Nicolas Courtois and\nGuangyan Song contributed the code in `ec_pubkey_fast.c` which more than\ndoubles the speed of public key computations compared with the stock secp256k1\nlibrary from Bitcoin. This code uses a much larger table for ec multiplication\nand optimized routines for ec addition and doubling.\n"
 },
 {
  "repo": "maticnetwork/miden",
  "language": "Rust",
  "readme_contents": "# Polygon Miden\n\n<a href=\"https://github.com/maticnetwork/miden/blob/main/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n<img src=\"https://github.com/maticnetwork/miden/workflows/CI/badge.svg?branch=main\">\n<a href=\"https://deps.rs/repo/github/maticnetwork/miden\"><img src=\"https://deps.rs/repo/github/maticnetwork/miden/status.svg\"></a>\n<a href=\"https://crates.io/crates/miden\"><img src=\"https://img.shields.io/crates/v/miden\"></a>\n\nA STARK-based virtual machine.\n\n**WARNING:** This project is in an alpha stage. It has not been audited and may contain bugs and security flaws. This implementation is NOT ready for production use.\n\n## Overview\nMiden is a zero-knowledge virtual machine written in Rust. For any program executed on Miden VM, a STARK-based proof of execution is automatically generated. This proof can then be used by anyone to verify that a program was executed correctly without the need for re-executing the program or even knowing what the program was.\n\n* If you'd like to learn more about how Miden VM works, check out the [miden](miden) crate.\n* If you'd like to see Miden VM in action, check out the [examples](examples) crate.\n* If you'd like to learn more about STARKs, check out the [references](#references) section.\n\n### Status and features\nCurrently, this project contains a direct port of the original [Distaff VM](https://github.com/guildofweavers/distaff) to [Winterfell](https://github.com/novifinancial/winterfell) backend. This means that, as compared to the original Distaff VM, the proving system has been upgraded to a much more up-to-date and performant STARK prover - but, the functionality of the VM remained the same. This functionality includes:\n\n* **Field arithmetic.** Miden VM can execute one field operation per cycle. This includes addition, multiplication, inversion, and boolean operations (on binary values).\n* **Conditional statements.** Miden VM programs can include basic *if-then-else* statements, however, these statements can be nested at most 16 levels deep.\n* **Loops.** Miden VM programs can include counter-controlled (*for*) and condition-controlled (*while*) loops. However, loops can be nested at most 8 levels deep.\n* **Inequality comparisons.** Miden VM supports *less-than* and *greater-than* comparison of field elements (via binary decomposition). However, each comparison requires dozens of VM cycles.\n* **Hashing.** Miden VM natively supports Rescue hash function. A 2-to-1 Rescue hash can be computed in as few as 10 VM cycles.\n\n#### Planned features\nIn the coming months we plan to make significant changes to the VM to expand its feature set. Among other things, these will include:\n\n* **Flow control.** Restrictions on nestings of loops and conditional statements will be removed.\n* **Memory.** Support for read-write random-access memory will be added to the VM.\n* **Storage.** Support for read-write persistent storage will be added to the VM.\n* **Function calls.** Miden programs will support hash-addressable function calls.\n* **u32 operations.** The VM will be able to execute a single u32 operation per cycle.\n\nOur ultimate goal is to make Miden VM an easy compilation target for high level languages such as Solidity, Move, and others.\n\nThe new version of the VM is being developed in the [next](https://github.com/maticnetwork/miden/tree/next) branch.\n\n### Project structure\nThe project is organized into several crates like so:\n\n| Crate                  | Description |\n| ---------------------- | ----------- |\n| [core](core)           | Contains components defining Miden VM instruction set, program structure, and a set of utility functions used by other crates. |\n| [assembly](assembly)   | Contains Miden assembler and definition of the Miden Assembly language. The assembler is used to compile Miden assembly source code into Miden VM programs. |\n| [processor](processor) | Contains Miden VM processor. The processor is used to execute Miden programs and to generate program execution traces. These traces are then used by the VM to generate proofs of correct program execution. |\n| [air](air)             | Contains *algebraic intermediate representation* (AIR) of Miden VM processor logic. This AIR is used by the VM during proof generation and verification processes. |\n| [miden](miden)       | Contains the actual Miden VM which can be used to execute programs and verify proofs of their execution. |\n| [verifier](verifier)   | Contains a light-weight verifier which can be used to verify proofs of program execution generated by Miden VM. |\n| [examples](examples)   | Contains several toy and real-world examples of Miden VM programs and demonstrates how these programs can be executed on Miden VM. |\n\n## Performance\nCurrent version of Miden VM operates at around 10 KHz when run on a single CPU core. When run on a 16-core CPU, Miden VM can operate at over 80 KHz. In the future we hope to significantly improve this performance.\n\nIn the benchmarks below, the VM executes a [Fibonacci calculator](miden/README.md#Fibonacci-calculator) program on AMD Ryzen 9 5950X CPU (single thread):\n\n<table style=\"text-align:center\">\n    <thead>\n        <tr>\n            <th rowspan=2 style=\"text-align:left\">Operations</th>\n            <th colspan=3 style=\"text-align:center\">96-bit security</th>\n            <th colspan=3 style=\"text-align:center\">128-bit security</th>\n        </tr>\n        <tr>\n            <th style=\"text-align:center\">Execution time</th>\n            <th>Execution RAM</th>\n            <th>Proof size</th>\n            <th>Execution time</th>\n            <th>Execution RAM</th>\n            <th>Proof size</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td style=\"text-align:left\">2<sup>8</sup></td>\n            <td>27 ms</td>\n            <td>9 MB</td>\n            <td>28 KB</td>\n            <td>200 ms</td>\n            <td>9 MB</td>\n            <td>45 KB</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left\">2<sup>10</sup></td>\n            <td>81 ms</td>\n            <td>11 MB</td>\n            <td>34 KB</td>\n            <td>170 ms</td>\n            <td>13 MB</td>\n            <td>59 KB</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left\">2<sup>12</sup></td>\n            <td>314 ms</td>\n            <td>22 MB</td>\n            <td>42 KB</td>\n            <td>680 ms</td>\n            <td>58 MB</td>\n            <td>70 KB</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left\">2<sup>14</sup></td>\n            <td>1.3 sec</td>\n            <td>81 MB</td>\n            <td>51 KB</td>\n            <td>2.2 sec</td>\n            <td>204 MB</td>\n            <td>82 KB</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left\">2<sup>16</sup></td>\n            <td>5.4 sec</td>\n            <td>313 MB</td>\n            <td>59 KB</td>\n            <td>9.1 sec</td>\n            <td>800 MB</td>\n            <td>100 KB</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left\">2<sup>18</sup></td>\n            <td>22.3 sec</td>\n            <td>1.2 GB</td>\n            <td>69 KB</td>\n            <td>39 sec</td>\n            <td>3.2 GB</td>\n            <td>115 KB</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left\">2<sup>20</sup></td>\n            <td>1.5 min</td>\n            <td>4.9 GB</td>\n            <td>82 KB</td>\n            <td>2.7 min</td>\n            <td>12.3 GB</td>\n            <td>129 KB</td>\n        </tr>\n    </tbody>\n</table>\n\nA few notes about these results:\n1. Execution time is dominated by the proof generation time. In fact, the time needed to run the program is only about 3% of the time needed to generate the proof.\n2. Proof verification time is really fast. In most cases it is under 1 ms, but sometimes gets as high as 2 ms.\n3. Proof generation process is dynamically adjustable. In general, there is a trade-off between execution time, proof size, and security level (i.e. for a given security level, we can reduce proof size by increasing execution time, up to a point).\n\nHowever, we don't have to limit ourselves to a single thread: STARK proof generation is massively parallelizable. The benchmarks below show program execution time for running the Fibonacci calculator for 2<sup>16</sup> operations (for 96-bit security level) using varying number of threads.\n\n| Threads | Execution time | Improvement |\n| ------- | :------------: | :---------: |\n| 1       | 5.4 sec        | 1x          |\n| 2       | 2.9 sec        | 1.9x        |\n| 4       | 1.6 sec        | 3.4x        |\n| 8       | 0.95 sec       | 5.7x        |\n| 16      | 0.7 sec        | 7.7x        |\n| 32      | 0.6 sec        | 9x          |\n\nA few notes about these results:\n1. Ryzen 9 5950X has 16 cores. So, executing the program in 32 threads seems to lead a slightly better CPU core utilization as compared to running it in 16 threads.\n2. The Fibonacci calculator program is sequential - so, we can parallelize only the proof generation part. This means that the share of time taken up by running the program itself grows proportionally. For example, when we execute the program using 32 threads, the time it takes to run the program is roughly 25% of the overall execution time (vs 3% for a single thread).\n\n## References\nProofs of execution generated by Miden VM are based on STARKs. A STARK is a novel proof-of-computation scheme that allows you to create an efficiently verifiable proof that a computation was executed correctly. The scheme was developed by Eli Ben-Sasson, Michael Riabzev et al. at Technion - Israel Institute of Technology. STARKs do not require an initial trusted setup, and rely on very few cryptographic assumptions.\n\nHere are some resources to learn more about STARKs:\n\n* STARKs whitepaper: [Scalable, transparent, and post-quantum secure computational integrity](https://eprint.iacr.org/2018/046)\n* STARKs vs. SNARKs: [A Cambrian Explosion of Crypto Proofs](https://nakamoto.com/cambrian-explosion-of-crypto-proofs/)\n\nVitalik Buterin's blog series on zk-STARKs:\n* [STARKs, part 1: Proofs with Polynomials](https://vitalik.ca/general/2017/11/09/starks_part_1.html)\n* [STARKs, part 2: Thank Goodness it's FRI-day](https://vitalik.ca/general/2017/11/22/starks_part_2.html)\n* [STARKs, part 3: Into the Weeds](https://vitalik.ca/general/2018/07/21/starks_part_3.html)\n\nAlan Szepieniec's STARK tutorial:\n* [Anatomy of a STARK](https://aszepieniec.github.io/stark-anatomy/)\n\nStarkWare's STARK Math blog series:\n* [STARK Math: The Journey Begins](https://medium.com/starkware/stark-math-the-journey-begins-51bd2b063c71)\n* [Arithmetization I](https://medium.com/starkware/arithmetization-i-15c046390862)\n* [Arithmetization II](https://medium.com/starkware/arithmetization-ii-403c3b3f4355)\n* [Low Degree Testing](https://medium.com/starkware/low-degree-testing-f7614f5172db)\n* [A Framework for Efficient STARKs](https://medium.com/starkware/a-framework-for-efficient-starks-19608ba06fbe)\n\n## License\nThis project is [MIT licensed](./LICENSE)."
 },
 {
  "repo": "di3online/ntru-crypto",
  "language": null,
  "readme_contents": "Coming Soon!!\n============\n\nntru-crypto\n===========\n\nOpen Source NTRU Public Key Cryptography Algorithm and Reference Code\n\nKey Contacts:\n\n* Dr. William Whyte\n* Dr. Mark Etzel\n* Mr. Peter Jenney\n\n\nContacts may be reached by sending mail to ntru-crypto@securityinnovation.com\n\nProject Overview\n================\nSecurity Innovation, Inc., the owner of the NTRU public key cryptography system, made the intellectual property and a sample implementation available under the Gnu Public License (GPL) in 2013 with the goal of enabling more widespread adoption of this superior cryptographic technology. The system is also available for commercial use under the terms of the Security Innovation Commercial License.\n\nNTRU represents a significant improvement in the Public Key cryptography world\u2014it\u2019s faster, stronger and smaller than virtually any other system in use and it\u2019s quantum computer resistant, making it the best choice for current projects with lifetimes that extend into the post quantum computer age.  \n\nFor additional overview information click https://www.securityinnovation.com/products/encryption-libraries/ntru-cryptography.html\n\n\nFAQ\n===\nWhat is NTRU?\n-------------\nNTRU is an asymmetric (public/private key) cryptosystem.  It is a leading alternative to RSA and ECC as it is faster and quantum resistant.  There are two NTRU based algorithms:  NTRU Encrypt and NTRU Sign.  Both cryptosystems are being released under GPL. The portable C/C++ & Java implementation in this project is also available under GPL.\n\nWhat makes NTRU fast?\n---------------------\nBecause it is based on different math from RSA and ECC, the NTRU algorithm has different cryptographic properties.   At comparable cryptographic strength, NTRU performs costly private key operations much faster than RSA or ECC.  In addition, NTRU's comparative performance increases with the level of security required.  As key sizes increase by a factor of n, RSA's operations/second decrease by about n3 whereas NTRU's decrease at n2.\n\nWhat makes NTRU quantum computing resistant?\n--------------------------------------------\nNTRU is currently not known to be vulnerable to algorithms based on quantum computers, unlike RSA or its other challenger, Elliptic Curve Cryptography. A working, full-scale quantum computer running the process known as \u201cShor\u2019s algorithm\u201d would be able to break RSA or ECC of any practical size in negligible time. In contrast, NTRU\u2019s security is reduced only slightly by quantum computers. This has been validated by external reviewers such as the National Institute of Standards and Technology (NIST), who in a 2009 survey referenced NTRU as justification for the statement that \u201cthere are viable alternatives for both public key encryption and signatures that are not vulnerable to Shor\u2019s Algorithm\u201d.\n\nWhat is NTRU's history and peer review?\n---------------------------------------\nNTRU was invented in 1996 based on a completely different mathematical problems from RSA and Elliptic Curve called the \u201cApproximate close lattice vector problem.\u201d  It has been published, reviewed in scholarly journals, and presented at Crypto, Eurocrypt, RSA. The NTRU approach to lattice-based cryptography, which uses a particular type of lattice known as an \u201cideal lattice\u201d, has been a catalyst for the development of other efficient lattice-based cryptographic primitives, most notably Gentry\u2019s approach to fully homomorphic encryption.\n\nHow fast is NTRU?\n-----------------\nAt comparable cryptographic strength, NTRU performs the costly private key operations much faster than RSA. \n\n    Security  NTRU Key Size     ECC   RSA     NTRU Ops/Sec.   ECC   RSA\n    Level     Std.    Opt.       Key Size     Std.    Opt.     Ops/Sec.\n    112       5951\t  4411\t    224\t  2048\t  2284\t  10638\t  951\t  156\n    128\t      6743\t  4829\t    256\t  4096\t  1896\t  9901\t  650\t  12\n    192\t      9757\t  6523\t    384\t  7680\t  1034\t  6849\t  285\t  8\n    256\t      12881\t  8173\t    512\t  15360\t  638     5000\t  116\t  1\n    \n\nMuch of the performance impact in SSL comes from the use of public key cryptography, which is used to initiate new sessions (session \u201chandshakes\u201d).  During session handshakes, the main public key activity consuming server resources is decryption of the session key provided by each client.  Performance increases in decryption have a significant impact on server performance. At current levels of activity, for a server using NTRU, the server time spent peforming public key cryptography will become negligible. CyaSSL+NTRU, a product that uses the algoritm runs 20x to 200x faster than openSSL RSA.\n\nHas NTRU's speed been verified by third parties?\n------------------------------------------------\nYes.  The Department of Electrical Engineering at the University of Leuven released a report entitled Speed records for NTRU. in which they write: \"NTRU is extremely fast on parallelizable processors.\"\n\nHas NTRU been standardized?\n---------------------------\nYes.  NTRU has been adopted in two standards.  By IEEE and the Financial industries X9 standards.\n(i) IEEE P1363 Working Group for Standards In Public Key Cryptography. This working group, active since 1992, has standardized many different techniques in public key cryptography. The standard IEEE Std 1363.1, issued in 2008, standardizes lattice-based public key cryptography, especially NTRUEncrypt. Other projects include or have included RSA, discrete log, elliptic curve discrete log, strong password-based techniques, and cryptography based on pairings.  IEEE 1363 Working Group Home Page\n\nIs NTRU Patented?\n-----------------\nYes. The patents will still be enforced but may be used under the GPL, i.e. under the condition that any work that uses them is also made available under the GPL. The patents and the code implementations are also available under standard commercial terms.\n\nWhere can I get more technical information\n------------------------------------------\nGo to https://www.securityinnovation.com/security-lab/crypto.html which is where we\u2019ve collected a boatload of content on NTRU including NIST reports, the math and other very useful stuff.\n"
 },
 {
  "repo": "AceRoqs/CryptoTools",
  "language": "C++",
  "readme_contents": "\ufeffThese are tools I've written to practice breaking ciphers.\n\n_CrappyCrypto_ contains my own versions of cryptographic algorithms that I have written to attack.\nThey are not intentionally insecure, but I am not confident in stating that they are hardened against\nmodern attacks. I have had security training in the past, have spent a number of years building threat\nmodels and fixing security issues, and have studied cryptography since 1991. I am quite confident in\nnot being confident.\n\nThere are some obvious problems with the implementation. First, ECB is the only mode supported, and\nthere is no direct support for nonces. Both of those issues are damning in terms of actual usage. There\nare probably timing attacks that can be done, since there are array lookups that are key-dependent. Lastly,\nfrom a hardening standpoint, the heap buffers are not zeroed on free, and no attempt is made to prevent\nhardware register spillage to the stack.\n\nI first wrote the [Skipjack](http://en.wikipedia.org/wiki/Skipjack_\\(cipher\\)) code in 1998.\nSurprisingly, it built without errors in Visual Studio 2010. I have since tried to modernize it\nto modern C++ in VS2015.\n\nCaveat: This code is portable, but due to variances in how arguments are passed to `main()` in C++, encoding\nmatters.  For example, by default, file names are passed as ANSI (in the current code page) to `main()` in\nWindows, and passed directly to `fopen()`.  Linux will use UTF-8 by default.  In general this will do what is\nexpected.  However, keys are different.  Since _CrappyCrypto_ operates directly on the `argv` data,\nnon-ASCII keys will cause problems.  For example, on Windows, the Euro '\u20ac' will be passed as a two byte\nANSI character to `main()`, and the key built from that.  On Linux, the UTF-8 encoding of U+20AC is passed,\nwhich is three bytes.  The result is that data encoded on one platform might not be correctly decodable\non another without some care.\n\nUTF-8 correctness is something that I am actively thinking about, and have an idea on the general\nportable solution for the above issue, but I want to reflect on whether it is the best approach for all\nof my projects before I commit to it.\n\n_CrappyCrypto_ has a dependency on the _PortableRuntime_ library.\n\nToby Jones \\([www.turbohex.com](http://www.turbohex.com), [ace.roqs.net](http://ace.roqs.net)\\)\n"
 },
 {
  "repo": "bitbeans/SimpleDnsCrypt",
  "language": "C#",
  "readme_contents": "[![Backers on Open Collective](https://opencollective.com/SimpleDnsCrypt/backers/badge.svg?style=flat-square)](#backers) [![Sponsors on Open Collective](https://opencollective.com/SimpleDnsCrypt/sponsors/badge.svg?style=flat-square)](#sponsors) [![license](https://img.shields.io/github/license/bitbeans/SimpleDnsCrypt.svg?style=flat-square)](https://github.com/bitbeans/SimpleDnsCrypt/blob/master/LICENSE.md) [![Build status](https://img.shields.io/appveyor/ci/bitbeans/simplednscrypt/master.svg?style=flat-square)](https://ci.appveyor.com/project/bitbeans/simplednscrypt/branch/master) [![Github All Releases](https://img.shields.io/github/release/bitbeans/SimpleDnsCrypt.svg?style=flat-square)](https://github.com/bitbeans/SimpleDnsCrypt/releases/latest) [![dnscrypt--proxy](https://img.shields.io/badge/dnscrypt--proxy-2.0.42-orange.svg?style=flat-square)](https://github.com/jedisct1/dnscrypt-proxy) [![Github All Releases](https://img.shields.io/github/downloads/bitbeans/SimpleDnsCrypt/total.svg?style=flat-square)](https://github.com/bitbeans/SimpleDnsCrypt/releases/latest) [![donate PayPal](https://img.shields.io/badge/donate-PayPal-green.svg?style=flat-square)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=c.hermann@bitbeans.de&item_name=Donation+to+the+Simple+DNSCrypt+project) \n\n# ![Simple DNSCrypt Logo](img/logo_with_text.png)\n\n\n# Simple DNSCrypt\nSimple DNSCrypt is a simple management tool to configure [dnscrypt-proxy](https://github.com/jedisct1/dnscrypt-proxy) on windows based systems. \n\n## Status\n\nUses dnscrypt-proxy: **2.0.42**\n\n### Preview Download (CI)\n\n[Download x86 (preview, unsigned portable version)](https://simplednscrypt.blob.core.windows.net/deploy/SimpleDnsCrypt/bin/x86/SimpleDNSCrypt_x86.zip) - *AppVeyor Build*\n\n[Download x64 (preview, unsigned portable version)](https://simplednscrypt.blob.core.windows.net/deploy/SimpleDnsCrypt/bin/x64/SimpleDNSCrypt_x64.zip) - *AppVeyor Build*\n\n\n## Getting Started\n\n\n### Prerequisites\n\nAt least one system with Windows 7 SP1 and the installation of. NET Framework 4.6.1 is currently required.\n\nYou also will need: Microsoft Visual C++ Redistributable for Visual Studio 2015 - 2019 [x64](https://aka.ms/vs/16/release/VC_redist.x64.exe) or [x86](https://aka.ms/vs/16/release/VC_redist.x86.exe)\n\nor\n\nMicrosoft Visual C++ Redistributable for Visual Studio 2017 [x64](https://aka.ms/vs/15/release/VC_redist.x64.exe) or [x86](https://aka.ms/vs/15/release/VC_redist.x86.exe)\n\n\n### Installing\n\nTo install Simple DNSCrypt use the latest (stable) MSI packages: [x86](https://github.com/bitbeans/SimpleDnsCrypt/releases/download/0.7.1/SimpleDNSCrypt.msi) or [x64](https://github.com/bitbeans/SimpleDnsCrypt/releases/download/0.7.1/SimpleDNSCrypt64.msi).\n\n#### Alternative\n\nhttps://chocolatey.org/packages/simplednscrypt (maintained by @chantisnake)\n\n### File Signing\n\nThe MSI package and the SimpleDnsCrypt.exe are signed via a *COMODO RSA Code Signing CA*. \nThe files are signed under the name: *Christian Hermann*\n\nYou also can verify the MSI packages with [minisign](https://jedisct1.github.io/minisign/).\nThe minisign signatures [x86](https://github.com/bitbeans/SimpleDnsCrypt/releases/download/0.7.1/SimpleDNSCrypt.msi.minisig) and [x64](https://github.com/bitbeans/SimpleDnsCrypt/releases/download/0.7.1/SimpleDNSCrypt64.msi.minisig) can be verified with the following command:\n\n\tminisign -Vm SimpleDNSCrypt.msi -P RWTSM+4BNNvkZPNkHgE88ETlhWa+0HDzU5CN8TvbyvmhVUcr6aQXfssV\n\tminisign -Vm SimpleDNSCrypt64.msi -P RWTSM+4BNNvkZPNkHgE88ETlhWa+0HDzU5CN8TvbyvmhVUcr6aQXfssV\n\n### Deinstallation\n\nTo uninstall Simple DNSCrypt and dnscrypt-proxy, just go to the Windows Control Panel (Programs and Features) and search for Simple DNSCrypt.\n\n### Updates\n\nSimple DNSCrypt will automatically search for the latest version at startup.\n\n## Translations\n\nTranslations are created with [POEditor](https://poeditor.com).\nIf you can add or correct a language, feel free to do so: \n\n[https://poeditor.com/join/project/3frSzJtSqc](https://poeditor.com/join/project/3frSzJtSqc \"poeditor.com\")\n\n## Screenshots\n\n![maintab](https://raw.githubusercontent.com/bitbeans/SimpleDnsCrypt/master/img/preview/mainmenu.png)\n\n![resolvers](https://raw.githubusercontent.com/bitbeans/SimpleDnsCrypt/master/img/preview/resolvers.png)\n\n![route](https://raw.githubusercontent.com/bitbeans/SimpleDnsCrypt/master/img/preview/route.png)\n\n![advanced](https://raw.githubusercontent.com/bitbeans/SimpleDnsCrypt/master/img/preview/advancedsettings.png)\n\n![blacklist](https://raw.githubusercontent.com/bitbeans/SimpleDnsCrypt/master/img/preview/blacklist.png)\n\n![blocklog](https://raw.githubusercontent.com/bitbeans/SimpleDnsCrypt/master/img/preview/blocklog.png)\n\n![settings](https://raw.githubusercontent.com/bitbeans/SimpleDnsCrypt/master/img/preview/settings.png)\n\n## Built With\n\n* [Visual Studio 2019](https://www.visualstudio.com/downloads/)\n* [.NET Framework 4.6.x](https://www.microsoft.com/net/download/windows)\n* [ReSharper](https://www.jetbrains.com/resharper/) \n* [Advanced Installer](https://www.advancedinstaller.com/)\n\n## Authors\n\n* **Christian Hermann** - [bitbeans](https://github.com/bitbeans)\n\nSee also the list of [Contributors.md](Contributors.md) who participated in this project. \nIf you are a translator, feel free to update this file.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n## Used Software and Libraries\n\n- [Baseclass.Contrib.Nuget.Output](https://github.com/baseclass/Contrib.Nuget)\n- [Caliburn.Micro](https://github.com/Caliburn-Micro/Caliburn.Micro)\n- [ControlzEx](https://github.com/ControlzEx/ControlzEx)\n- [Costura.Fody](https://github.com/Fody/Costura)\n- [DnsCrypt.Toolbox](https://github.com/bitbeans/DnsCrypt.Toolbox)\n- [Fody](https://github.com/Fody/Fody)\n- [gong-wpf-dragdrop](https://github.com/punker76/gong-wpf-dragdrop)\n- [helper-net](https://github.com/bitbeans/helper-net)\n- [MahApps.Metro](https://github.com/MahApps/MahApps.Metro)\n- [MahApps.Metro.SimpleChildWindow](https://github.com/punker76/MahApps.Metro.SimpleChildWindow)\n- [minisign-net](https://github.com/bitbeans/minisign-net)\n- [Nett](https://github.com/paiden/Nett)\n- [Newtonsoft.Json](https://github.com/JamesNK/Newtonsoft.Json)\n- [NLog](https://github.com/nlog/NLog)\n- [notifyicon-wpf](https://bitbucket.org/hardcodet/notifyicon-wpf/src)\n- [libsodium-net](https://github.com/adamcaudill/libsodium-net)\n- [WPFLocalizationExtension](https://github.com/SeriousM/WPFLocalizationExtension)\n- [XAMLMarkupExtensions](https://github.com/MrCircuit/XAMLMarkupExtensions)\n- [YamlDotNet](https://github.com/aaubry/YamlDotNet)\n\n\n## Thanks to\n\n* Frank Denis for the development of [dnscrypt-proxy](https://github.com/jedisct1/dnscrypt-proxy)\n* all users, translators and contributors\n* [ReSharper](https://www.jetbrains.com/resharper/) for providing a free open source license\n* [POEditor](https://poeditor.com) for providing a free open source license\n\n### Contributors\n\nThis project exists thanks to all the people who contribute. [[Contributors](Contributors.md)].\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/SimpleDnsCrypt/contributors.svg?width=890&button=false\" /></a>\n\n\n### Backers\n\nThank you to all our backers! \ud83d\ude4f [[Become a backer](https://opencollective.com/SimpleDnsCrypt#backer)]\n\n<a href=\"https://opencollective.com/SimpleDnsCrypt#backers\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/backers.svg?width=890\"></a>\n\n\n### Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/SimpleDnsCrypt#sponsor)]\n\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/SimpleDnsCrypt/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/SimpleDnsCrypt/sponsor/9/avatar.svg\"></a>"
 },
 {
  "repo": "linux-system-roles/crypto_policies",
  "language": "Jinja",
  "readme_contents": "# crypto_policies\n![CI Testing](https://github.com/linux-system-roles/crypto_policies/workflows/tox/badge.svg)\n\n\nThis Ansible role manages system-wide crypto policies.\n\nThis concept is well adopted since Red Hat Enterprise Linux 8 and in Fedora.\n\n## Requirements\n\nThe system-wide crypto policies are implemented and tested on RHEL 8/CentOS 8\nand Fedora.\n\n## Role Variables\n\nBy default, this role will just report system status as described in the\nfollowing section.\n\n * `crypto_policies_policy`\n\nUse this variable to specify the desired crypto policy on the target system,\nwhich can be either the base policy or a base policy with subpolicies\nas accepted by the `update-crypto-policies` tool. For example `FUTURE` or\n`DEFAULT:NO-SHA1:GOST`. The specified base policy and subpolicies\nmust be available on the target system.\n\nThe default value is `null` meaning the configuration is not changed and\nthe role will just collect the facts below.\n\nThe list of available base policies on the target system can be found in the\n`crypto_policies_available_policies` variable and the list of available\nsubpolicies can be found in the `crypto_policies_available_subpolicies` variable.\n\n * `crypto_policies_reload`\n\nBy default (`true`), updating crypto policies forces reload of some of\nthe daemons affected by crypto policies in the system. Setting `false`\nprevents this behavior and is helpful if the role is executed during system\nenrollment or some other follow-up tasks is expected to do it later.\n\n * `crypto_policies_reboot_ok`\n\nCrypto policies can not know all the custom applications using crypto\nlibraries that are affected by change of crypto policies so it is recommended\nto reboot after changing crypto policies to make sure all of the services\nand applications will read the new configuration files. By default (`false`),\nif reboot is required, this role will set `crypto_policies_reboot_required`\nvariable as described below and it is up to the user of the role to reboot\nthe system afterwards, for example after applying some other changes that might\nneed reboot. If there are no other tasks in the playbook that require reboot,\nyou can set this value to `true` and this role will handle the reboot for you,\nwhen needed.\n\n### Variables Exported by the Role\n\n* `crypto_policies_active`\n\nThis fact contains the currently active policy name in the format as accepted\nby `crypto_policies_policy` variable above.\n\n* `crypto_policies_available_policies`\n\nThis is a list of all base policies available on the target system.\nCustom policy files can be installed by copying the `.pol` files into\n`/etc/crypto-policies/policies` directory (not implemented in this role yet).\n\n* `crypto_policies_available_subpolicies`\n\nThis is a list of all subpolicies available on the target system.\nCustom subpolicies can be installed by copying the `.pmod` files into\n`/etc/crypto-policies/policies/modules` directory (not implemented in this\nrole yet).\n\n* `crypto_policies_available_modules`\n\nDeprecated alias to `crypto_policies_available_subpolicies`.\n\n* `crypto_policies_reboot_required`\n\nDefault `false` - if `true`, this means a reboot is needed to apply\nthe changes made by the role\n\n## Dependencies\n\nNone.\n\n## Example Playbook\n\nThe following playbook configures the system to the default crypto policy\nlevel without SHA1. The update is done without reboot (which is recommended\nto do by the user afterwards).\n\n```yaml\n- hosts: all\n  roles:\n    role: linux-system-roles.crypto_policies\n    vars:\n      crypto_policies_policy: \"DEFAULT:NO-SHA1\"\n      crypto_policies_reload: false\n\n```\n\n## License\n\nMIT, see the file LICENSE for more information.\n\n## Author Information\n\nJakub Jelen, 2020\n"
 },
 {
  "repo": "SergeyBel/AES",
  "language": "C++",
  "readme_contents": "# AES\nC++ AES(Advanced Encryption Standard) implementation  \n \n![Build Status](https://github.com/SergeyBel/AES/actions/workflows/aes-ci.yml/badge.svg?branch=master)\n\n# Usage\n\n**This class is very simple to use:**\n```c++\n...\nunsigned char plain[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff }; //plaintext example\nunsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }; //key example\nunsigned int plainLen = 16 * sizeof(unsigned char);  //bytes in plaintext\n\nAES aes(AESKeyLength::AES_128);  ////128 - key length, can be 128, 192 or 256\nc = aes.EncryptECB(plain, plainLen, key);\n//now variable c contains plainLen bytes - ciphertext\n...\n```\nOr for vectors:\n```c++\n...\n\n\nvector<unsigned char> plain = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff }; //plaintext example\nvector<unsigned char> key = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }; //key example\n\nAES aes(AESKeyLength::AES_128);\nc = aes.EncryptECB(plain, key);\n//now vector c contains ciphertext\n...\n```\nECB, CBC, CFB modes are supported.\n\n\n\n\n# Padding\nThis library does not provide any padding because padding is not part of AES standard. Plaintext and ciphertext length in bytes must be divisible by 16. If length doesn't satisfy this condition exception will be thrown\n\n\n# Links\n\n\n* [Wiki](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\n* [NIST](https://www.nist.gov/publications/advanced-encryption-standard-aes)\n\n# Development:\n\n1. `git clone https://github.com/SergeyBel/AES.git`\n1. `docker-compose build`\n1. `docker-compose up -d`\n1. use make commands\n\nThere are four executables in `bin` folder:  \n* `test` - run tests  \n* `debug` - version for debugging (main code will be taken from dev/main.cpp)  \n* `profile` - version for profiling with gprof (main code will be taken from dev/main.cpp)  \n* `speedtest` - performance speed test (main code will be taken from speedtest/main.cpp)\n* `release` - version with optimization (main code will be taken from dev/main.cpp)  \n\n\nBuild commands:  \n* `make build_all` - build all targets\n* `make build_test` - build `test` target\n* `make build_debug` - build `debug` target\n* `make build_profile` - build `profile` target\n* `make build_speed_test` - build `speedtest` target\n* `make build_release` - build `release` target\n* `make style_fix` - fix code style\n* `make test` - run tests\n* `make debug` - run debug version\n* `make profile` - run profile version\n* `make speed_test` - run performance speed test\n* `make release` - run `release` version\n* `make clean` - clean `bin` directory\n"
 },
 {
  "repo": "Deadlyelder/Tools-for-Cryptanalysis",
  "language": "HTML",
  "readme_contents": "# Crypto-Tools\n\nA curated list of cryptography and cryptanalysis related tools and libraries.\n\n## Motivation\n\nThe motivation of curating a list of cryptography and cryptanalysis related tools was born from desire to have a centralized point where all such tools can be found. Attempts will be made to keep it updated as frequently as possible. If you find any tools/library that are missing feel free to contribute.\n\n## Contents\n1. [Lineartrails](#lineartrails)\n1. [KeccakTools](#KeccakTools)\n2. [S-Box Mixed-Integer Linear Programming tool](#MILP)\n3. [HashClash](#HashClash)\n4. [ARX Toolkit](#arxtoolkit)\n5. [Information Set Decoding](#isd)\n6. [Linear Hull Cryptanalysis PRESENT](#linearpresent)\n7. [CodingTool Library](#codingtool)\n8. [Grain of Salt](#grainsalt)\n9. [SYMAES](#symaes)\n10. [Automated Algebric Cryptanalysis](#autoalger)\n11. [Algebraic Preimage Attack on Hash functions](#alpath)\n12. [Lex Toolkit](#lex)\n13. [Yafu](#yafu)\n14. [Msieve](#msieve)\n15. [CADO-NFS](#cado)\n16. [sha1collisiondetection](#sha1coll)\n17. [S-function Toolkit](#sfun)\n18. [SIMON/SPECK Cryptanalysis](#simon-speck)\n19. [CryptoSMT](#cryptosmt)\n20. [YAARX](#yaarx)\n21. [CTF Tool](#RSActf)\n22. [SHA-1 GPU near-collision attacks](#sha_collisions)\n23. [Improved Conditional Cube Attacks on Keccak Key Modes with MILP Method](#keccak_milp)\n24. [Conditional Cube Attack on Round-Reduced ASCON](#ascon-test)\n25. [Yoyo Tricks with AES](#yoyo-aes)\n26. [sboxgates](#sboxgates)\n27. [SoCracked key-recovery attack on SoDark](#sodark)\n28. [Cryptanalysis of ISEA](#isea)\n29. [Bucketing Computational Analysis Attack](#bca)\n30. [SPARX Differential Attacks](#sparxda)\n31. [Attack on 721-round Trivium](#trivium)\n32. [MILP on SPECK](#milp-speck)\n33. [SoCracked](#socracked)\n34. [Peigen SBoxes](#peigen)\n35. [Cryptanalysis of Persichetti's One-Time Signature (OTS)](#ots)\n36. [Key-dependent cube attack on Frit-AE](#frit)\n37. [Extended Expectation Cryptanalysis on Round-reduced AES and Small-AES](#reduce-aes)\n38. [Cryptanalysis of MORUS](#morus)\n39. [Boomerang probablities on Kiasu-BC](#kaisu)\n40. [Mixture Integral Attacks on Reduced-Round AES](#aes-mixint)\n41. [Integral Cryptanalysis of CRAFT](#craft-integral)\n42. [Integral Cryptanalysis of MIBS](#mibs-integral)\n\n1. [License](#license)\n\n<a name=\"lineartrails\"></a>\n## lineartrails\n\n*Tool to automatically search for linear characteristics*\n\n* Developers: Christoph Dobraunig, Maria Eichlseder, Florian Mendel\n* [Official Repository](https://github.com/iaikkrypto/lineartrails)\n\nA tool that searches for linear characteristics for given S-Box. The tool was born\nfrom the paper [Heuristic Tool for Linear Cryptanalysis with Applications to CAESAR Candidates](https://eprint.iacr.org/2015/1200).\n\n\n<a name=\"KeccakTools\"></a>\n## KeccakTools\n\n*A set of C++ classes that can help analyze the Keccak sponge function family*\n\n* Developers: Guido Bertoni, Joan Daemen, Michael Peeters, Gilles Van Assche\n* [Direct download](http://keccak.noekeon.org/KeccakTools-3.3.zip)\n* [Official website](http://keccak.noekeon.org/KeccakTools-doc/)\n\nKeccakTools is a set of C++ classes aimed as an assistant in analyzing the sponge function family `Keccak`. These classes and methods were used to obtain the results reported in the paper `Differential propagation analysis of Keccak` presented at FSE 2012 (available here [IACR ePrint 2012/163](http://eprint.iacr.org/2012/163)).\n\n<a name=\"milp\"></a>\n## S-Box Mixed-Integer Linear Programming tool\n\n*Toolkit for Counting Active S-boxes using Mixed-Integer Linear Programming (MILP)*\n\n* Developer: Nicky Mouha\n* [Direct download](http://www.ecrypt.eu.org/tools/uploads/sbox-milp.zip)\n* [Location within this repository](https://github.com/Deadlyelder/Tools-for-Cryptanalysis/tree/master/S-Box%20MILP%20tool)\n\nThis toolkit can be used to prove the security of cryptographic ciphers against linear and differential cryptanalysis. This toolkit generates Mixed-Integer Linear Programming problem which counts the minimum number of (linearly or differentially) active S-boxes for a given cipher. The toolkit currently supports AES and xAES (both in the single-key and related-key setting), as well as Enocoro-128v2 (in the related-key setting). The paper that introduced this toolkit is [available online](https://www.esat.kuleuven.be/cosic/publications/article-2080.pdf).\n\n<a name=\"HashClash\"></a>\n## HashClash\n\n*Framework for MD5 & SHA-1 Differential Path Construction and Chosen-Prefix Collisions for MD5*\n\n* Developer: Marc Stevens\n* [Official website](https://marc-stevens.nl/p/hashclash/index.php)\n\nThis framework contains tools for the constructions of differential paths for MD5 and SHA-1, including chosen-prefix collisions for MD5.\n\n<a name=\"arxtoolkit\"></a>\n## ARX Toolkit\n\n*The ARX toolkit is a set of tools to study ARX ciphers and hash functions*\n\n* Developer: Gaetan Leurent\n* [Official website](http://www.di.ens.fr/~leurent/arxtools.html)\n\nThe ARX toolkit is a set of tools to study ARX ciphers and hash functions. This toolkit was presented at the SHA-3 conference in March 2012.\n\n<a name=\"isd\"></a>\n## Information Set Decoding\n\n*A tool for information set decoding*\n\n* Developers: Unknown?\n* [Official source](https://github.com/isd-dev/isd/downloads)\n* [Location within this repo](https://github.com/isd-dev/isd/tree/db3bbe7e86b06a7e62b6cb9e7b8c1ac0c416b953)\n\nThis library, written in C++ that is efficient at finding low weight codewords of a linear code using information set decoding.\n\n<a name=\"linearpresent\"></a>\n## Linear Hull Cryptanalysis of PRESENT\n\n*A tool to compute linear hulls for PRESENT cipher*\n\n* Developer: Bingsheng Zhang\n* [Direct download](http://www.ecrypt.eu.org/tools/uploads/present-linear-hull.zip)\n* [Paper](http://dx.doi.org/10.1007/978-3-642-10433-6_5)\n* [Location within this repo](http://github.com/Deadlyelder/Tools-for-Cryptanalysis/tree/master/PRESENT%20Linear%20Hull)\n\nThis tool computes linear hulls for the original PRESENT cipher. It confirms and even improves on the predicted bias (and the corresponding attack complexities) of conventional linear relations based on a single linear trail.\n\n<a name=\"codingtool\"></a>\n## CodingTool Library\n\n*Tool for cryptanalysis based on coding theory*\n\n* Developer: Tomislav Nad\n* [Direct download](https://www.iaik.tugraz.at/content/research/krypto/codingtool/downloads/CodingTool-0.9.zip)\n* [Official website](http://www.iaik.tugraz.at/content/research/krypto/codingtool/)\n* [Location within this repo](https://github.com/Deadlyelder/Tools-for-Cryptanalysis/tree/master/CodingTool)\n\nThe CodingTool library is a collection of tools to use techniques from coding theory in cryptanalysis. The core part is an implementation of a probabilistic algorithm to search for code words with low Hamming weight. Additional functionalities like shortening and puncturing of a linear code or adding a weight to each bit of a code word are implemented. Furthermore, the library provides data structures to assist the user in creating a linear code for a specific problem. An easy to use interface to the provided algorithms, powerful data structures and a command line parser reduces the implementation work of a cryptanalyst to a minimum.\n\n<a name=\"grainsalt\"></a>\n## Grain of Salt\n\n*An automated way to test stream ciphers through SAT solvers*\n\n* Developer: Mate Soos\n* [Official website](http://planete.inrialpes.fr/~soos/GrainOfSalt/)\n* [Location within this repo](https://github.com/msoos/grainofsalt/tree/f82b2a24098976075fac9b2df3e23caf2c91ac41)\n\nGrain of Salt is a tool developed to automatically test stream ciphers against standard SAT solver-based attacks. The tool takes as input a set of configuration options and the definition of each filter and feedback function of the stream cipher. It outputs a problem in the language of SAT solvers describing the cipher. The tool can automatically generate SAT problem instances for Crypto-1, HiTag2, Grain, Bivium-B and Trivium.\n\n<a name=\"symaes\"></a>\n## SYMAES\n\n*A Fully Symbolic Polynomial System Generator for AES-128*\n\n* Developers: Vesselin Velichkov, Vincent Rijmen, Bart Preneel\n* [Paper](http://www.cosic.esat.kuleuven.be/publications/article-1476.pdf)\n\nSYMAES is a software tool that generates a system of polynomials in GF(2), corresponding to the round transformation and key schedule of the block cipher AES-128.\n\n<a name=\"autoalge\"></a>\n## Automated Algebraic Cryptanalysis\n\n*A simple tool for the automatic algebraic cryptanalysis of a large array of stream- and block ciphers*\n\n* Developer: Paul Stankovski\n* [Official website](http://www.eit.lth.se/index.php?id=260&uhpuid=dhs.pas&hpuid=584&L=1)\n* Direct download: [Windows Executable](http://www.eit.lth.se/fileadmin/eit/home/dhs.pas/win_exec.zip), [Linux Executable](http://www.eit.lth.se/fileadmin/eit/home/dhs.pas/linux_exec.zip), [C code](http://www.eit.lth.se/fileadmin/eit/home/dhs.pas/source.zip)\n\nA simple tool for the automatic algebraic cryptanalysis of a large array of stream and block ciphers. Three tests have been implemented and the best results have led to continued work on a computational cluster.\n\n<a name=\"alpath\"></a>\n## Algebraic Preimage Attack on Hash functions (AlPAtH)\n\n*A software framework AlPAtH (Algebraic Preimage Attack on Hash functions) to run algebraic attacks on hash function*\n\n* Developer: Luk Bettale\n* [Official website](https://www.lukbettale.ze.cx/alpath/)\n* [Location within this repo](https://github.com/Deadlyelder/Tools-for-Cryptanalysis/tree/master/AIPAtH)\n\nAlPAtH is a software framework to run algebraic attacks on hash functions. This framework is intended to run algebraic attacks on hash functions, but could be extended to any kind of ciphers (block, stream). It provides a framework to generate equations, solve these equations and interpret the results.\n\n<a name=\"lex\"></a>\n## Lex Toolkit\n\n*A Tool for Algebraic Analysis of Stream Cipher LEX*\n\n* Developer: V. Velichkov, V. Rijmen, and B. Preneel\n* [Official Repository](https://github.com/vesselinux/lextool.git)\n* [Location within this repo](https://github.com/vesselinux/lextool/tree/0dc488f1a83c79452e626854bcbb39737036adcb)\n\nThe Lex Toolkit is a collection of Python programs for the computer algebra system Sage. The programs generate Boolean algebraic equations for a small-scale version of stream cipher LEX.\n\n<a name=\"yafu\"></a>\n## Yafu (Yet Another Factorization Utility\n\n*YAFU software that has implemented integer factoring algorithms*\n\n* [Official website](https://sites.google.com/site/bbuhrow/)\n* [Official repository](https://sourceforge.net/projects/yafu/)\n\nYAFU (with assistance from other free software) uses the most powerful modern algorithms (and implementations of them) to factor input integers in a completely automated way. Useful for RSA attacks.\n\n<a name=\"msieve\"></a>\n## Msieve\n\n*Useful library for RSA attacks*\n\n* [Official repository](https://sourceforge.net/projects/msieve/)\n\nMsieve is a C library implementing a suite of algorithms to factor large integers. It contains an implementation of the SIQS and GNFS algorithms. Useful for RSA attacks.\n\n<a name=\"cado\"></a>\n## CADO-NFS\n\n*Toolkit for NFS verification*\n\n* [Official website](http://cado-nfs.gforge.inria.fr)\n* [Official repository](https://gforge.inria.fr/scm/?group_id=2065)\n\nCADO-NFS (Crible Algebrique: Distribution, Optimisation - Number Field Sieve) is a complete implementation in C/C++ of the Number Field Sieve (NFS) algorithm for factoring integers. It consists in various programs corresponding to all the phases of the algorithm, and a general script that runs them, possibly in parallel over a network of computers.\n\n<a name=\"sha1coll\"></a>\n## sha1collisiondetection\n\n*Tool that computes SHA-1 hash of given file along with detecting collision attacks against SHA-1 for the given file*\n\n* Developer: Marc Stevens\n* [Official repository](https://github.com/cr-marcstevens/sha1collisiondetection)\n* [Location within this repo](https://github.com/cr-marcstevens/sha1collisiondetection/tree/0572d8a302b1f62f25c1559b0de74908550ab2c3)\n\nsha1collisiondetection library and command line tool is designed as near drop-in replacements for common SHA-1 libraries and sha1sum. It will compute the SHA-1 hash of any given file and additionally will detect cryptanalytic collision attacks against SHA-1 present in each file. It is very fast and takes less than twice the amount of time as regular SHA-1.\n\n<a name=\"sfun\"></a>\n## S-function Toolkit\n\n*Toolkit for differential cryptanalysis of S-functions*\n\n* Developers: Nicky Mouha, Vesselin Velichkov, Christophe De Canni\u00e8re, Bart Preneel\n* [Direct download](http://www.ecrypt.eu.org/tools/uploads/s-function_toolkit_v2.zip)\n* [Paper](http://www.cosic.esat.kuleuven.be/publications/article-1473.pdf)\n\nAn increasing number of cryptographic primitives use operations such as addition modulo 2n, multiplication by a constant and bitwise Boolean functions as a source of non-linearity. In NIST\u2019s SHA-3 competition, this applies to 6 out of the 14 second-round candidates. An S-function is a function that calculates the i-th output bit using only the inputs of the i^th bit position and a finite state S[i]. Although S-functions have been analyzed before, this toolkit is the first to present a fully general and efficient framework to determine their differential properties. A precursor of this framework was used in the cryptanalysis of SHA-1.\n\n<a name=\"simon-speck\"></a>\n## SIMON/SPECK cryptanalysis\n\n*Cryptanalysis tool for the SIMON and SPECK families of block ciphers*\n\n* Developers: Martin M. Lauridsen, Hoda A. Alkhzaimi\n* [Paper](http://link.springer.com/chapter/10.1007/978-3-319-13066-8_6)\n* [Official Repository](https://github.com/mmeh/simon-speck-cryptanalysis)\n\n<a name=\"cryptosmt\"></a>\n## CryptoSMT\n\n*A tool for cryptanalysis of symmetric primitives like block ciphers and hash functions*\n\n* Developers: Stefan K\u00f6lbl\n* [Official Website](http://www2.compute.dtu.dk/%7Estek/cryptosmt.html)\n* [Official Repository](https://github.com/kste/cryptosmt)\n* [Location within this repo](https://github.com/kste/cryptosmt/tree/62ecf615eab0cb3e1b966c2d80a03b16687cf670)\n\nCryptoSMT is an easy to use tool for cryptanalysis of symmetric primitives likes block ciphers or hash functions. It is based on SMT/SAT solvers like STP, Boolector, CryptoMiniSat and provides a simple framework to use them for cryptanalytic techniques.\n\n<a name=\"yaarx\"></a>\n## YAARX - YAARX: Yet Another ARX Toolkit\n\n*A set of programs for the differential analysis of ARX cryptographic algorithms*\n\n* Developers: Laboratory of Algorithmic, Cryptology and Security (LACS), University of Luxembourg\n* [Official Website](http://vesselinux.github.io/yaarx/)\n* [Official Repository](https://github.com/vesselinux/yaarx)\n\nYAARX provides methods for the computation of the differential probabilities of various ARX operations (XOR, modular addition, multiplication, bit shift, bit rotation) as well as of several larger components built from them. YAARX also provides means to search for high-probability differential trails in ARX algorithms in a fully automatic way. The latter has been a notoriously difficult task for ciphers that do not have S-boxes, such as ARX.\n\n\n<a name=\"alltools\"></a>\n## RSA Tool for CTF\n\nRSA Tool for CTF - Retrives private key from weak public key and/or uncipher the data\n\n*A nice framework that automatically unciphers data from weak public key and try to recover private key using selection of best attacks*\n\n* Developer: [Twitter](https://twitter.com/G4N4P4T1)\n* [Official Repository](https://github.com/Ganapati/RsaCtfTool)\n\nMostly used for Crypto related CTF, this framework allows number of different attacks on the RSA including: Weak public key factorization, Wiener's attack, Small public exponent attack, Small q (q < 100,000), Common factor between ciphertext and modulus attack, Fermat's factorisation for close p and q, Gimmicky Primes method, Self-Initializing Quadratic Sieve (SIQS) using Yafu, Common factor attacks across multiple keys, Small fractions method when p/q is close to a small fraction, Boneh Durfee Method when the private exponent d is too small compared to the modulus (i.e d < n^0.292), Elliptic Curve Method.\n\n\n<a name=\"sha_collisions\"></a>\n## SHA-1 GPU near-collision attacks\n\n*A repository contains the source code for the near collision attacks on SHA-1*\n\n* Developer: Marc Stevens\n* [Official Repository](https://github.com/cr-marcstevens/sha1_gpu_nearcollisionattacks)\n\nThe repository that has the sources codes for the SHA-1 collision attacks published in the following papers: [The first collision for full SHA-1](https://eprint.iacr.org/2017/190), [Practical free-start collision attacks on 76-step SHA-1](https://eprint.iacr.org/2015/530) and [Freestart collision for full SHA-1](https://eprint.iacr.org/2015/967).\n\n<a name=\"keccak_milp\"></a>\n## MILP_conditional_cube_attack\n\n*Repository that contains source codes for `Improved Conditional Cube Attacks on Keccak Key Modes with MILP Method`*\n\n* Developer: Zheng Li\n* [Official Repository](https://github.com/lizhengcn/MILP_conditional_cube_attack)\n\nThe repository contains the source code for the papers [Improved Conditional Cube Attacks on Keccak Keyed Modes with MILP Method](https://eprint.iacr.org/2017/804.pdf).\n\n<a name=\"#ascon-test\"></a>\n## Ascon test\n\n*Repository that contains source codes for `Conditional Cube Attack on Round-Reduced ASCON`*\n\n* Developer: Zheng Li\n* [Official Repository](https://github.com/lizhengcn/Ascon_test)\n\nThe repository contains the source code for the papers [Conditional Cube Attack on Round-Reduced ASCON](https://eprint.iacr.org/2017/160.pdf).\n\n<a name=\"yoyo-aes\"></a>\n## Yoyo Tricks with AES\n\n*Code that has implementation of the Yoyo trick attacks on AES*\n\n* Developer: Sondre R\u00f8njom\n* [Official Repository](https://github.com/sondrer/YoyoTricksAES)\n\nThe repository contains the source code for the paper [Yoyo Tricks with AES](https://eprint.iacr.org/2017/980.pdf) that was published in AsiaCrypt2017.\n\n<a name=\"sboxgates\"></a>\n## sboxgates\n\n*Program for finidng low gate count implementations of S-Boxes*\n\n* Developer: Marcus Dansarie\n* [Official Repository](https://github.com/dansarie/sboxgates)\n\nThe algorithm used in the program is based on [Kwan, Matthew: \"Reducing the Gate Count of Bitslice DES.\" IACR Cryptology ePrint Archive 2000 (2000): 51](https://ia.cr/2000/051), with other improvements. In addition to finding logic circuits using standard (NOT, AND, OR, XOR) gates, the program also supports AND-NOT gates and 3-bit LUTs. \n\n<a name=\"socracked\"></a>\n## SoCracked\n\n*Performs key-recovery attacks on the SoDark family of algorithms*\n\n* Developer: Marcus Dansarie\n* [Official Repository](https://github.com/dansarie/SoCracked)\n\nSoCracked performs key-recovery attacks on the SoDark family of ciphers for automatic link establishment (ALE) in HF radios specified in MIL-STD-188-141. Based on [Cryptanalysis of the SoDark family of cipher algorithms](https://doi.org/10945/56118).\n\n<a name=\"isea\"></a>\n## Cryptanalysis of an image scrambling encryption algorithm (ISEA)\n\n*Cryptanalysis of an image scrambling encryption algorithm (ISEA)*\n\n* Developer: Dongdong Lin\n* [Official Repository](https://github.com/MrDongdongLin/Cryptanalysis_ISEA)\n\nThe repo contains codes about ciphertext-only attack and known-plaintext attack on ISEA, and codes for calculating Structural Similarity Index (SSIM) of an image based on the paper [Cryptanalyzing an Image-Scrambling Encryption Algorithm of Pixel Bits](http://ieeexplore.ieee.org/document/7999153/)\n\n<a name=\"bca\"></a>\n## Bucketing Computational Analysis Attack\n\n*Implementation of the Bucketing Computational Analysis*\n\n* Developer: Unknown\n* [Official Repository](https://github.com/Bucketing/BCA-attack)\n\nThe repository contains the core implementation of the Bucketing Computational Analysis (BCA) and some public white-box cryptographic implementations and the coressponding scripts to perform the BCA.\n\n<a name=\"sparxdfa\"></a>\n## SPARX Differential Attacks\n\n*Repository for the differential Cryptanalysis of Round-Reduced Sparx 64/128*\n\n* Developer: Ralph Ankele\n* [Official Repository](https://github.com/TheBananaMan/sparx-differential-attacks)\n\nThe repository contains implementation of the paper [Differential Cryptanalysis of Round-Reduced Sparx-64/128](https://eprint.iacr.org/2018/332) that was presented at ACNS 2018.\n\n<a name=\"trivium\"></a>\n## Attack on 721-round Trivium\n\n* Developer: ?\n* [Official Repository](https://github.com/peterhao89/Analyze721Trivium)\n\nContains the implementation of a key recovery attack on Trivium cipher. Based on the paper [A Key-recovery Attack on 855-round Trivium](https://eprint.iacr.org/2018/198) accepted for Crypto 2018.\n\n\n<a name=\"milp-speck\"></a>\n## MILP on SpECK\n\n* Developer: Kai Fu\n* [Official Repository](https://github.com/fukai6/milp_speck)\n \nThe `speck_diff_find` and `speck_line_find` within this repository are the Python framework for automatic differential and linear cryptanalysis based on the paper\\ [\"MILP-Based Automatic Search Algorithms for Differential and Linear Trails for Speck\"](https://www.iacr.org/archive/fse2016/97830255/97830255.pdf)\n\n<a name=\"socracked\"></a>\n## SoCracked\n\n*Program to perform key-recovery attacks on the SoDark family of algorithms.*\n\n* Developer: [Marcus Dansarie](https://github.com/dansarie)\n* [Official Repository](https://github.com/dansarie/SoCracked)\n \nThis program performs key-recovery attacks on the SoDark family of ciphers for automatic link establishment (ALE) in HF radios specified in MIL-STD-188-141. Based on the thesis [Cryptanalysis of the SoDark family of cipher algorithms](https://calhoun.nps.edu/handle/10945/56118).\n\n<a name=\"peigen\"></a>\n## PEIGEN\n\n*PEIGEN: a Platform for Evaluation, Implementation, and Generation of S-boxes*\n\n* Developer: [Project](https://github.com/peigen-sboxes)\n* [Official Repository](https://github.com/peigen-sboxes/PEIGEN)\n \nPEIGEN is a tool for study S-boxes. The S-box is a type of non-linearity cryptographic component, commonly used in symmetric cryptography primitives. A survey on studies of S-boxes and a formal introduction of PEIGEN can be found in the paper [SoK: Peigen \u2013 a Platform for Evaluation, Implementation, and Generation of S-boxes](https://eprint.iacr.org/2019/209).\n\n<a name=\"ots\"></a>\n## Cryptanalysis of Persichetti's One-Time Signature (OTS)\n\n*Cryptanalysis of Persichetti OTS based on quasi-cyclic codes*\n\n* Developer: [Deneuville Jean-Christophe](http://www-perso.unilim.fr/deneuville/)\n* [Official Repository](https://github.com/deneuville/PersichettiOTScryptanalysis)\n \n Implementation of the cryptanalysis of the OTS proposed by Persichetti in the paper [Efficient One-Time Signatures from Quasi-Cyclic Codes: a Full Treatment](https://eprint.iacr.org/2017/397). The cryptanalysis is described in the paper [Cryptanalysis of a code-based one-time signature](https://eprint.iacr.org/2018/1205).\n\n<a name=\"frit\"></a>\n## Key-dependent cube attack on Frit-AE\n\n* [Official Repository](https://github.com/qly14/FritAE)\n \nImplementation of the Key-dependent cube attack based on the paper by [Key-dependent cube attack on reduced Frit permutation in Duplex-AE modes](https://eprint.iacr.org/2019/170).\n\n\n<a name=\"reduce-aes\"></a>\n## Extended Expectation Cryptanalysis on Round-reduced AES and Small-AES\n\n* [Official Repository](https://github.com/medsec/expectation-cryptanalysis-on-round-reduced-aes)\n \nImplementation of expectation cryptanalysis on round-reduced AES and its small-scale version based on the paper [Small Scale Variants of the AES](https://link.springer.com/content/pdf/10.1007/11502760_10.pdf).\n\n<a name=\"morus\"></a>\n## Cryptanalysis of MORUS\n\n*Correlation of Quadratic Boolean Functions: Cryptanalysis of All Versions of Full MORUS*\n\n* [Official Repository](https://github.com/siweisun/attack_morus)\n* Developer:[Siwei Sun](https://siweisun.github.io/)\n \nImplementation of cryptanalysis on MORUS cipher using coreelation of quadratic boolean function. Based on the paper [Correlation of Quadratic Boolean Functions: Cryptanalysis of All Versions of Full MORUS](https://eprint.iacr.org/2019/172).\n\n<a name=\"kaisu\"></a>\n## Boomerang probablities on Kiasu-BC\n\n*Implementation of boomerang probabilities attack on Kiasu-BC*\n\n* [Official Repository](https://github.com/medsec/kiasubc)\n \nThree implementations that aims to validate the 6 and 7 round boomerang distinguishers on Kiasu-BC. Based on the paper [Impossible-Differential and Boomerang Cryptanalysis of Round-Reduced Kiasu-BC](https://eprint.iacr.org/2016/1170).\n\n<a name=\"mixint\"></a>\n## Mixture Integral Attacks on Reduced-Round AES\n\n*Low-data mixture integral distinguishers and attacks on reduced-round AES*\n\n* Developer: [Markus Schofnegger](https://www.iaik.tugraz.at/content/about_iaik/people/schofnegger_markus/)\n* [Official Repository](https://github.com/mschof/aes-mixint-analysis)\n \nImplementation of Low-data mixture integral distinguishers and later attack on reduced-round AES. Based on the paper [IMixture Integral Attacks on Reduced-Round AES with a Known/Secret S-Box](https://eprint.iacr.org/2019/772).\n\n<a name=\"craft-integral\"></a>\n## Integral Cryptanalysis of CRAFT\n\n*Applying MILP method to find integral distinguisher for CRAFT*\n\n* Developer: [Hosein Hadipour](https://github.com/hadipourh)\n* [Official Repository](https://github.com/hadipourh/CRAFT-Integral-Distinguisher)\n \nThis tool is used to find integral distinguisher based on division property for [CRAFT](https://tosc.iacr.org/index.php/ToSC/article/view/7396).\n\n<a name=\"craft-integral\"></a>\n## Integral Cryptanalysis and Degree Estimation of MIBS\n\n*Applying MILP method to find integral distinguisher for MIBS*\n\n* Developer: [Hosein Hadipour](https://github.com/hadipourh)\n* [Official Repository](https://github.com/hadipourh/MIBS-Integral-Cryptanalysis-Basd-on-Division-Propertyr)\n \nApplying the MILP method to search bit-based integral distinguishers, and degree estimation of [MIBS](https://link.springer.com/chapter/10.1007%2F978-3-642-10433-6_22) block cipher, using division property.\n\n<a name=\"license\"></a>\n# License\n\n[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)\n\nThis list is released into the public domain.\n"
 },
 {
  "repo": "stouset/secrets",
  "language": "Rust",
  "readme_contents": "secrets\n=======\n\n[![Build Status][badge-ci]][ci]\n<!-- [![Test Coverage][badge-coverage]][coverage] -->\n[![Cargo Crate][badge-package]][package]\n[![Docs][badge-docs]][docs]\n[![License][badge-license]][license]\n\n`secrets` is a library to help Rust programmers safely held cryptographic\nsecrets in memory.\n\nIt is mostly an ergonomic wrapper around the memory-protection utilities\nprovided by [libsodium].\n\nFixed-size buffers allocated on the stack gain the following protections:\n\n* [`mlock(2)`][mlock] is called on the underlying memory\n* the underlying memory is zeroed out when no longer in use\n* they are borrowed for their entire lifespan, so cannot be moved\n* they are compared in constant time\n* they are prevented from being printed by `Debug`\n* they are prevented from being `Clone`d\n\nFixed and variable-sized buffers can be allocated on the heap and gain\nthe following protections:\n\n* the underlying memory is protected from being read from or written to\n  with [`mprotect(2)`][mprotect] unless an active borrow is in scope\n* [`mlock(2)`][mlock] is called on the allocated memory\n* the underlying memory is zeroed out when no longer in use\n* overflows and underflows are detected using inaccessible guard pages,\n  causing an immediate segmentation fault and program termination\n* short underflows that write to memory are detected when memory is\n  freed using canaries, and will result in a segmentation fault and\n  program termination\n\nPanic Safety\n------------\n\nThis library is explicitly not panic-safe. To ensure the safety of\nprotected memory space, this library can and will panic if it is unable\nto enforce its advertised guarantees.\n\nSimilarly, this library will cause segmentation faults if (and only if)\nit detects certain safety violations. For example, this can happen if\na process attempts to directly read or write to the contents of memory\nthat hasn't been properly unlocked, or if canaries have been\noverwritten. This library has been written to ensure that such\nviolations should be impossible to cause through well-formed Rust, and\nso should only occur as a result of a security vulnerability.\n\nExamples\n--------\n\n### Example: generating cryptographic keys\n\n```rust\nSecret::<[u8; 16]>::random(|s| {\n    // use `s` as if it were a `&mut [u8; 16]`\n    //\n    // the memory is `mlock(2)`ed and will be zeroed when this closure\n    // exits\n});\n```\n\n### Example: load a master key from disk and generate subkeys from it\n\n```rust\nuse std::fs::File;\nuse std::io::Read;\n\nuse libsodium_sys as sodium;\nuse secrets::SecretBox;\n\nconst KEY_LEN : usize = sodium::crypto_kdf_KEYBYTES     as _;\nconst CTX_LEN : usize = sodium::crypto_kdf_CONTEXTBYTES as _;\n\nconst CONTEXT : &[u8; CTX_LEN] = b\"example\\0\";\n\nfn derive_subkey(\n    key:       &[u8; KEY_LEN],\n    context:   &[u8; CTX_LEN],\n    subkey_id: u64,\n    subkey:    &mut [u8],\n) {\n    unsafe {\n        libsodium_sys::crypto_kdf_derive_from_key(\n            subkey.as_mut_ptr(),\n            subkey.len(),\n            subkey_id,\n            context.as_ptr().cast(),\n            key.as_ptr()\n        );\n    }\n}\n\nlet master_key = SecretBox::<[u8; KEY_LEN]>::try_new(|mut s| {\n    File::open(\"example/master_key/key\")?.read_exact(s)\n})?;\n\nlet subkey_0 = SecretBox::<[u8; 16]>::new(|mut s| {\n    derive_subkey(&master_key.borrow(), CONTEXT, 0, s);\n});\n\nlet subkey_1 = SecretBox::<[u8; 16]>::new(|mut s| {\n    derive_subkey(&master_key.borrow(), CONTEXT, 1, s);\n});\n\nassert_ne!(\n    subkey_0.borrow(),\n    subkey_1.borrow(),\n);\n```\n\n### Example: securely storing a decrypted ciphertext in memory\n\n```rust\nuse std::fs::File;\nuse std::io::Read;\n\nuse libsodium_sys as sodium;\nuse secrets::{SecretBox, SecretVec};\n\nconst KEY_LEN   : usize = sodium::crypto_secretbox_KEYBYTES   as _;\nconst NONCE_LEN : usize = sodium::crypto_secretbox_NONCEBYTES as _;\nconst MAC_LEN   : usize = sodium::crypto_secretbox_MACBYTES   as _;\n\nlet mut key        = SecretBox::<[u8; KEY_LEN]>::zero();\nlet mut nonce      = [0; NONCE_LEN];\nlet mut ciphertext = Vec::new();\n\nFile::open(\"example/decrypted_ciphertext/key\")?\n    .read_exact(key.borrow_mut().as_mut())?;\n\nFile::open(\"example/decrypted_ciphertext/nonce\")?\n    .read_exact(&mut nonce)?;\n\nFile::open(\"example/decrypted_ciphertext/ciphertext\")?\n    .read_to_end(&mut ciphertext)?;\n\nlet plaintext = SecretVec::<u8>::new(ciphertext.len() - MAC_LEN, |mut s| {\n    if -1 == unsafe {\n        sodium::crypto_secretbox_open_easy(\n            s.as_mut_ptr(),\n            ciphertext.as_ptr(),\n            ciphertext.len() as _,\n            nonce.as_ptr(),\n            key.borrow().as_ptr(),\n        )\n    } {\n        panic!(\"failed to authenticate ciphertext during decryption\");\n    }\n});\n\nassert_eq!(\n    *b\"attack at dawn\",\n    *plaintext.borrow(),\n);\n```\n\nLicense\n-------\n\nLicensed under either of\n\n * [Apache License, Version 2.0](LICENSE-APACHE)\n * [MIT license](LICENSE-MIT)\n\nat your option.\n\n[ci]:       https://github.com/stouset/secrets/actions/workflows/test.yml\n<!-- [coverage]: https://coveralls.io/github/stouset/secrets -->\n[docs]:     https://stouset.github.io/secrets\n[license]:  https://github.com/stouset/secrets/blob/master/LICENSE\n[package]:  https://crates.io/crates/secrets\n\n[badge-ci]:       https://github.com/stouset/secrets/actions/workflows/test.yml/badge.svg\n<!-- [badge-coverage]: https://coveralls.io/repos/github/stouset/secrets/badge.svg -->\n[badge-docs]:     https://docs.rs/secrets/badge.svg\n[badge-license]:  https://img.shields.io/crates/l/secrets.svg\n[badge-package]:  https://img.shields.io/crates/v/secrets.svg\n\n[libsodium]: https://download.libsodium.org/doc/memory_management\n[mlock]:     http://man7.org/linux/man-pages/man2/mlock.2.html\n[mprotect]:  http://man7.org/linux/man-pages/man2/mprotect.2.html\n"
 },
 {
  "repo": "adegtyarev/streebog",
  "language": "Objective-C",
  "readme_contents": "GOST R 34.11-2012 hash function with 512/256 bit digest\n=======================================================\n\n[![Build Status](https://travis-ci.org/adegtyarev/streebog.svg?branch=master)](https://travis-ci.org/adegtyarev/streebog)\n\nThis is portable implementation of the GOST R 34.11-2012 hash function.\nThe standard for this hash function developed by the Center for\nInformation Protection and Special Communications of the Federal\nSecurity Service of the Russian Federation with participation of the\nOpen joint-stock company \"Information Technologies and Communication\nSystems\" (InfoTeCS JSC).\n\nThe standard published as [RFC 6986](https://tools.ietf.org/html/rfc6986).\n\n\nBuild requirements\n------------------\n* GCC, Clang or ICC compiler supporting 64-bit integers.\n\n* GNU make (or any compatible make).\n\n\nCompile and install\n-------------------\nThe software is smart enough to detect the most suitable configuration\nfor running hardware and software platform.  In almost all cases it is\nsufficient to run `make` on top of the source directory:\n\n    # make\n\nThis will configure and compile a binary program file named\n`gost3411-2012`.\n\n\nUsage instructions\n------------------\nThe program outputs GOST R 34.11-2012 hash digest in hexadecimal format.\nEach file listed on the command line is processed and hash is printed\nfor each one.  Stdin is read as input when executed without arguments.\n\n    # ./gost3411-2012 -h\n    Usage: gost3411-2012 [-25bhvqrte] [-s string] [files ...]\n\n    Options:\n       -2          Output 256-bit digest.\n       -5          Output 512-bit digest (default).\n       -t          Testing mode to produce hash of example\n                   messages defined in standard.\n       -b          Benchmark mode (to see how fast or slow\n                   this implementation).\n       -s string   Print a digest of the given string.\n       -r          Reverses the format of the output.\n                   This helps with visual diffs.\n       -q          Quiet mode - only the digest is printed out.\n       -e          Switch endianness when printing out\n                   resulting hash.  Default: least significant\n                   first.  With this options set all bytes in\n                   resulting hash are printed in reverse\n                   order, more precisely, most significant\n                   first.\n\n\nUsing with Docker\n-----------------\nThere is a pre-build Docker image of this software ready to use:\n\n    $ docker run --rm adegtyarev/streebog gost3411-2012 -v\n    gost3411-2012 0.12\n\nLet's say you want to get a hash digest of LICENSE file in the current\ndirectory.  Here is how:\n\n    $ docker run --rm -v $PWD/LICENSE:/LICENSE:ro adegtyarev/streebog gost3411-2012 -2 /LICENSE\n    GOST R 34.11-2012 (/LICENSE) = c73c0c79b345d0aa779efab878fbe8ff248ae666ac1fdd12b137e7f41ef2da82\n\nYou could also get that digest by using STDIN mode:\n\n    $ cat LICENSE |docker run --rm -i adegtyarev/streebog gost3411-2012 -2\n    c73c0c79b345d0aa779efab878fbe8ff248ae666ac1fdd12b137e7f41ef2da82\n\n\nCompile-time options\n--------------------\nBy default, a compiler defined in `CC` environment variable is used, falling\nback to `cc`.  Compile the source with specified compiler:\n\n    # make CC=clang\n\nSpecial target `remake` may need to be used to overwrite recently compiled\nup-to date binary:\n\n    # make remake CC=icc\n\nThis will recompile sources from scratch using Intel C Compiler with\ndefault flags.  If you need to adjust these compiler flags, try to set\nthem with `CFLAGS` knob:\n\n    # make remake CC=icc CFLAGS=\"-O3\"\n\n\nAPI\n---\nThe API to this implementation is quite straightforward and similar to\nother hash function APIs.  Actually the CLI utility in this distribution\njust use this API as underlying engine.  You may use this API to\nimplement GOST R 34.11-2012 in your application.\n\n```c\nGOST34112012Context\n```\n\nThis is the hash context.  There should be one `GOST34112012Context`\nfor each object to be hashed.\n\n\n```c\nvoid GOST34112012Init(GOST34112012Context *CTX, const unsigned int digest_size);\n```\n\nReturn initialized `GOST34112012Context` of specified hash size\n(`digest_size`) on allocated memory block pointed by `CTX`.  Digest size\ncan be either 512 or 256.  Address of `CTX` must be 16-byte aligned.\n\n```c\nvoid GOST34112012Update(GOST34112012Context *CTX, const unsigned char *data, size_t len);\n```\n\nHash some `data` of `len` bytes size.  The best performance results are\nachieved when `len` is multiple of 64.\n    \nNote that this call does not modify original data in memory.  If\nsecurity is an issue, calling application should destroy that memory\nblock right after `GOST34112012Update()`, by e.g. `memset()` to zero.\n\n```c\nvoid GOST34112012Final(GOST34112012Context *CTX, unsigned char *digest);\n```\n\nFinalizes hashing process and set GOST R 34.11-2012 hash in memory block\npointed by `digest`.\n\n```c\nvoid GOST34112012Cleanup(GOST34112012Context *CTX);\n```\n\nThe data in context including hash itself, buffer and internal\nstate zeroed-out.  Context totally destroyed and the object can't be\nused anymore.  Calling application should `free()` memory used by this\ncontext.\n\nThe following constants may be predefined somewhere in your application\ncode in order to adjust GOST R 34.11-2012 engine behavior:\n\n* `__GOST3411_LITTLE_ENDIAN__`: define this constant on little-endian systems.\n\n* `__GOST3411_BIG_ENDIAN__`: this constant will indicate big-endian system.\n\nIf neither of constants defined the engine defaults to little-endian\ncode.\n\n* `__GOST3411_HAS_MMX__`: use MMX instructions to compute digest.\n\n* `__GOST3411_HAS_SSE2__`: use SSE2 instruction set to speedup computation\nof GOST R 34.11-2012 digest.\n\n* `__GOST3411_HAS_SSE41__`: indicate to include SSE4.1 instructions set.\n\nThe best performance results achieved on SSE4.1 capable processors.  A slightly\nless performance achieved on SSE2 capable processors.  The CLI utility in this\ndistribution tries its best to determine which of the instruction set to use.\nIt falls back to the portable code unless any of extensions detected.\n\n\nExample of usage\n----------------\n\n```c\n    #include <stdlib.h>\n    #include <err.h>\n    #include \"gost3411-2012-core.h\"\n\n    ...\n\n    GOST34112012Context *CTX;\n\n    unsigned char digest[64];\n\n    ...\n        if (posix_memalign(&CTX, (size_t) 16, sizeof(GOST34112012Context)))\n            err(EX_OSERR, NULL);\n\n        GOST34112012Init(CTX, 512);\n        ...\n        GOST34112012Update(CTX, buffer, (size_t) bufsize);\n        ...\n        GOST34112012Update(CTX, buffer, (size_t) bufsize);\n        ...\n        /* call GOST34112012Update() for each block of data */\n        ...\n        GOST34112012Final(CTX, &digest[0]);\n        ...\n        /* You now have GOST R 34.11-2012 hash in 'digest' */\n        ...\n        GOST34112012Cleanup(CTX);\n    ...\n\n```\n\nPortability notes\n-----------------\n...\n\n\nPlatforms tested\n----------------\n* FreeBSD x86/x86_64\n* Linux   x86/x86_64\n* Darwin  x86/x86_64\n* Linux   powerpc\n\n\nPerformance\n-----------\nTo measure performance of this implementation\n[SUPERCOP](https://bench.cr.yp.to/supercop.html) toolkit has been used.  You\ncan set `SUPERCOP` environment variable to any value and then run `make\nconfigure` to prepare this implementation to run on SUPERCOP.\n\n    Intel(R) Pentium(R) CPU G6950 @ 2.80GHz    x86: 40 cycles per byte ( 70 MB/s)\n    Intel(R) Pentium(R) CPU G6950 @ 2.80GHz x86_64: 36 cycles per byte ( 78 MB/s)\n    Intel(R) Xeon(R)    CPU X5650 @ 2.67GHz x86_64: 31 cycles per byte ( 84 MB/s)\n    Intel(R) Core(TM) i7-2600 CPU @ 3.40GHz x86_64: 28 cycles per byte (121 MB/s)\n\n\nLicense\n-------\n\nThis work is dual-licensed under BSD 2-Clause \"Simplified\" License and GNU\nGeneral Public License v2.0 (or later).  You can choose between one of them if\nyou use this software.\n\n`SPDX-License-Identifier: BSD-2-Clause OR GPL-2.0+`\n\n\nAuthor\n------\nAlexey Degtyarev <alexey@renatasystems.org>\n"
 },
 {
  "repo": "axelarnetwork/tofn",
  "language": "Rust",
  "readme_contents": "# Tofn (t-of-n): a threshold cryptography library in Rust\n\nTofn provides the following:\n* An implementation of the [GG20](https://eprint.iacr.org/2020/540.pdf) threshold-ECDSA protocol.\n* A general-purpose SDK (software development kit) to facilitate the development and use of threshold cryptography protocols such as GG20.\n\n# Setup\n\n* Get the latest version of Rust stable (currently 1.53.0).\n* Clone this repo.\n* You might need to install the GMP library.  On MacOS:\n    ```\n    brew install gmp\n    ```\nOn Ubuntu:\n    ```\n    sudo apt install libgmp-dev\n    ```\n\n# Demo and tests\n\nTofn integration tests (in `tests/integration`) serve to demo use of the library.  (These demos would be in the `examples` directory but we want them to run automatically as part of the normal test sequence.)\n\nDemo test hieararchy:\n```\ntests\n\u2514\u2500\u2500 integration\n    \u251c\u2500\u2500 multi_thread\n    \u2514\u2500\u2500 single_thread\n        \u2514\u2500\u2500 malicious\n            \u251c\u2500\u2500 keygen.rs\n            \u251c\u2500\u2500 sign.rs\n            \u2514\u2500\u2500 timeout_corrupt.rs\n```\n\n## Multi-threaded tests\n\nTests in `multi_thread` are a more accurate reflection of typical use than those in `single_thread`.\n\nThreshold cryptography protocols are multi-party computation protocols: parties exchange messages with one another and perform local computations in order to reach consensus on an output of the protocol.\n\nThe `multi_thread` tests aim to simulate such an environment by spawning an independent thread for each party.  These tests simulate network communication by using concurrency primitives from Rust's standard library (`sync::mpsc`) to pass messages between threads.\n\nRun all multi-threaded integration tests:\n```\ncargo test --test integration -- multi_thread\n```\n\n## Single-threaded tests\n\nMulti-threaded code is inherently more difficult to write, test, and debug.  For development purposes it is useful to have a single-threaded reference implementation so as to eliminate concurrency as a source of bugs.  Most examples of tofn functionality occur in `single_thread`.\n\nSome tests illustrate the fault protection and identification properties of the GG20 protocol.  These tests require one or more parties to act maliciously during protocol execution.  Malicious behaviour is enabled in tofn via the `malicious` crate feature---see [Malicious crate feature](#malicious-crate-feature) below.\n\nRun all single-threaded integration tests with only honest parties:\n```\ncargo test --test integration -- single_thread\n```\n\nRun all single-threaded integration tests, including those with malicious parties:\n```\ncargo test --all-features --test integration -- single_thread\n```\nTests using `malicious` display extensive log messages to the terminal.  For example:\n```\nJul 23 10:46:04.933  INFO integration::single_thread::malicious::sign: sign with malicious behaviour R6BadProof\nJul 23 10:46:13.005  INFO tofn::gg20::sign::malicious: malicious peer 3 does R6BadProof\nJul 23 10:46:13.273  WARN tofn::gg20::sign::r7::happy: peer 0 says: pedersen proof wc failed to verify for peer 3 because ['wc' check fail]\nJul 23 10:46:13.312  WARN tofn::gg20::sign::r7::happy: peer 1 says: pedersen proof wc failed to verify for peer 3 because ['wc' check fail]\nJul 23 10:46:13.350  WARN tofn::gg20::sign::r7::happy: peer 2 says: pedersen proof wc failed to verify for peer 3 because ['wc' check fail]\nJul 23 10:46:13.391  WARN tofn::gg20::sign::r7::happy: peer 3 says: pedersen proof wc failed to verify for peer 3 because ['wc' check fail]\nJul 23 10:46:13.429  WARN tofn::gg20::sign::r7::happy: peer 4 says: pedersen proof wc failed to verify for peer 3 because ['wc' check fail]\nJul 23 10:46:13.470  WARN tofn::gg20::sign::r7::happy: peer 5 says: pedersen proof wc failed to verify for peer 3 because ['wc' check fail]\n```\n\n# Two types of tofn user\n\nThe tofn SDK supports two types of users:\n1. Library users\n2. Protocol implementers\n\n## Library users\n\nA typical library user should need code from only the following tofn modules:\n\n* `tofn::sdk::api` and `tofn::collections` for generic tofn SDK.\n* `tofn::gg20` for protocol-specific code for the GG20 protocol.\n\nSee [Demo and tests](#demo-and-tests) for working code to illustrate use of tofn.\n\nSee the [Tofnd](https://github.com/axelarnetwork/tofnd) crate for usage of tofn in production code.\n\nThe core of the API is a generic `Protocol` type:\n```rust\npub enum Protocol<F, K, P> {\n    NotDone(Round<F, K, P>),\n    Done(ProtocolOutput<F, P>),\n}\n```\nwhere\n* `F` is the type of the final output of the protocol.  (Examples: keygen produces a secret key share, sign produces a signature.)\n* `K`, `P` are marker types for typed collection indices.  See [Typed collection indices](#typed-collection-indices) below.\n\nSpecific protocol implementations provide constructors that create a new concrete `Protocol` instance.  Examples:\n* `tofn::gg20::keygen::new_keygen` returns a new keygen protocol\n* `tofn::gg20::sign::new_sign` returns a new sign protocol\n\nEach party in the protocol has its own `Protocol` instance.\nA `Protocol` can be either `Done` or `NotDone`.  The `Done` variant has `ProtocolOutput` data defined like so:\n```rust\npub type ProtocolOutput<F, P> = Result<F, ProtocolFaulters<P>>;\npub type ProtocolFaulters<P> = FillVecMap<P, Fault>;\n```\nwhere the `ProtocolOutput` variants are:\n* `Ok(output)`: the protocol completed in happy path, producing `output` of type `F` (eg. secret key share or signature).\n* `Err(faulters)`: the protocol completed in sad path.  An output of type `F` could not be produced because one or more parties was malicious.  `faulters` is a list of malicious parties detected by this `Protocol` instance during execution.  `ProtocolFaulters` is a custom collection type describing the faulty parties.\n\nThe `NotDone` variant has `Round` data with several core methods used to exchange messages and progress the protocol to the next round:\n* `bcast_out`, `p2ps_out`: outgoing messages to be sent over the network to other parties.\n* `msg_in`: incoming messages received over the network from other parties.\n* `expecting_more_msgs_this_round`: have we received all the incoming messages we expect for this round?  Library users use this method to determine whether it's safe to progress to the next round.\n* `execute_next_round`: proceed to the next round of the protocol with whatever messages we have received so far.  Consumes `self` and returns a new `Protocol` instance for the next round.\n    * If a message from party `A` is missing then `A` is flagged as a faulter.  This is how tofn facilitates timeout faults.\n\n## Protocol implementers\n\nA typical protocol implementer would use code from the following tofn modules:\n\n* `tofn::sdk::api`\n* `tofn::sdk::implementer_api`\n* `tofn::collections`\n\nSee the `tofn::gg20` module for an example of a protocol built using the tofn SDK.\n\nThe intent of the implementer API is to allow the protocol implementer to concentrate only on the stateless math functions for each round that map\n```\n(current_state, incoming_messages) -> (next_state, outgoing_messages)\n```\nThe implementer does not need to worry about generic work such as collecting incoming messages, deserializing data, identifying generic faults (timeout, message corruption), etc.\n\nConcretely, protocol implementers must supply:\n* A constructor for a party in the protocol.  Examples: `gg20::keygen::new_keygen`, `gg20::sign::new_sign`.\n* For each round of the protocol: a struct implementing the `Executer` trait from one of the modules `no_messages`, `bcast_only`, `p2p_only`, `bcast_and_p2p` according to which types of messages are expected in this round.\n\n# All messages delivered to all parties\n\nTofn requires that all messages be delivered to all parties.  Specifically:\n* **p2p:** Any p2p message from `A` to `B` should also be delivered to all other parties `C`.\n* **self-delivery:** A party `A` treats a missing message from any party `P` the same way, even if `P=A`: party `P` is declared as a faulter.\n\n# Support for multiple shares per party\n\nTofn protocols may allow one party to have multiple shares in the protocol.  For example, keygen could be invoked with 5 parties having share counts 2,3,6,2,1 for a total of 14 shares.\n\nProtocol implementers need not concern themselves with the distinction between parties and shares.  Indeed, the tofn SDK does not even expose information about parties in the `Executer` trait implemented by each protocol round.\n\nEach `Protocol` instance corresponds to a _share_, not a party.  Rounds that produce outgoing p2p messages must produce one message for each other _share_.\n\nIncoming messages indicate only the _party_ from whom the message is sent and not the individual _share_ controlled by that party.  The tofn SDK automatically bundles metadata into each message so that incoming messages can be routed to the appropriate share.\n\nProtocol implementers identify faulty shares but the tofn API attributes faults only to a _party_, not a share.  The tofn SDK automatically translates share faults provided by the protocol implementer into party faults consumed by tofn users.\n\n# Avoid panic: `TofnResult` is for fatal errors only\n\nTofn strives to avoid panics.  (Currently most but not all potential panic points have been eliminated from tofn.)\n\nInstead, tofn has a `TofnResult` type reserved only for fatal errors:\n\n```rust\npub type TofnResult<T> = Result<T, TofnFatal>;\npub struct TofnFatal;\n```\n\nA library user who encounters a `TofnFatal` should gracefully terminate the protocol according to the context of the specific application.  Any `Protocol` method that returns `TofnFatal` should be viewed as a confession of fault by that party.\n\nProtocol implementers should not return `TofnFatal` when malicious behaviour is detected.  Instead, move the protocol to `Done` state and return a faulters list `Ok(Done(Err(faulters)))` that is processed by the tofn SDK---see `gg20` protocol implementation for details.\n\n# Malicious crate feature\n\nEnabling the `malicious` crate feature allows the user to specify that a given party should behave maliciously at a certain point during the protocol.\n\n## Example\n\nWith `malicious` enabled the `new_keygen` function takes an additional argument of type `Behaviour`.\n\nThe following code instructs the party to corrupt her commitment to the elliptic curve point `y_i` computed during round 1 of the GG20 keygen protocol:\n\n```rust\nnew_keygen(\n    party_share_counts,\n    threshold,\n    party_id,\n    subshare_id,\n    secret_recovery_key,\n    session_nonce,\n    Behaviour::R1BadCommit,\n)\n```\n\n# Tofn collection types\n\nThe module `tofn::collections` provides several custom collection types such as `VecMap`, `FillVecMap`, `HoleVecMap`, etc.  These collection types are especially useful for threshold cryptography.  They build on the `Vec` collection type from Rust's standard \nlibrary.\n\nTODO: more to come.\n\n## Typed collection indices\n\nThe `VecMap` collection type is a wrapper for `Vec` from Rust's standard library except that items in the collection are not indexed by `usize`.  Instead items are indexed by a wrapper type `TypedUsize` defined as follows:\n\n```rust\npub struct TypedUsize<K>(usize, PhantomData<K>);\n```\nUsers create their own marker type like so:\n```rust\npub struct SignPartyId;\n```\nand then specify the index type of the collection:\n```rust\nlet my_vecmap = VecMap<SignPartyId, T>::from_vec(vec![t0, t1, t2]);\n```\n\nSeveral other crates exist for this purpose but none of them has the unique combination of features we desire in tofn.  See the [typed_index_collections](https://docs.rs/typed-index-collections/3.0.3/typed_index_collections/index.html#similar-crates) crate for a list of similar cates.\n\nThe purpose of `TypedUsize` is to avoid accidental misuse of indices as a source of bugs.\n\n### Example\n\nThreshold signature schemes consist of two protocols: `keygen` and `sign`.  A group of `6` parties will participate in `keygen` in order to produce secret shares of an ECDSA public key `PK`.  Let us label these parties `0,1,2,3,4,5`.\n\nLater a subset `1,3,5` of those parties participates in `sign` in order to sign a message under `PK`.  These `sign` participants are each assigned a new label for the duration of the `sign` protocol: `0,1,2`.  So each `sign` party label has an associated `keygen` party label: `0->1, 1->3, 2->5`.\n\nSome collection types used in the `sign` implementation index only over `sign` parties, whereas others index over all `keygen` parties.  If both of these index types are `usize` then it is easy to confuse them, creating bugs.  `TypedUsize` allows us to leverage Rust's type system to eliminate index confusion at compile time.\n\nTo complicate matters further, tofn supports multiple shares per party.  Each `keygen` protocol specifies both the number of parties in the protocol and the number of shares allocated to each party.\n\nFor example, `keygen` could be invoked with 5 parties having share counts `2,3,6,2,1` for a total of 14 shares.  We thus have four distinct index types: keygen parties, keygen shares, sign parties, and sign shares.\n\n# Security notes\n\n* In our security model, we don't guarantee security if the attacker has access to the device.\n\n## Message authenticity and integrity\n\nProtocol messages from other parties are delivered via the `msg_in` API call:\n```rust\nmsg_in(from, bytes)\n```\nwhere\n\n* `from` is an identifier for the party `A` from whom the message is received.  (Party identifiers in tofn are implemented as a `usize`.)\n* `bytes` is the serialized payload of `A`'s message.\n\nIt is assumed that these messages have both _authenticity_ and _integrity_: if party `B` receives a call to `msg_in` containing a message `bytes` from party `A` then that message really did come from `A`, it really was intended for `B`, and the `bytes` are exactly what `A` intended.\n\nAs such, if `bytes` is malformed or malicious then `B` will accuse `A` of faulty behaviour.\n\n## Message ordering\n\n* We assume that an honest party's Round x message is sent before Round x + i.\n* We also assume that no party receives a Round x + i message from any other party before their Round x message.\n\n# License\n\nAll crates licensed under either of\n\n * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n * [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions."
 },
 {
  "repo": "OpenMined/PySyft",
  "language": "Jupyter Notebook",
  "readme_contents": "<h1 align=\"center\">\n\n  <br>\n  <img src=\"packages/syft/docs/img/monorepo_logo2.png\" alt=\"Syft + Grid\" width=\"400\">\n  <br>\n  Code for computing on data<br /> you do not own and cannot see\n  <br>\n\n</h1>\n\n<div align=\"center\"> <a href=\"https://pypi.org/project/syft/\"><img src=\"https://pepy.tech/badge/syft\" /></a> <a href=\"https://pypi.org/project/syft/\"><img src=\"https://badge.fury.io/py/syft.svg\" /></a> <br /> <a href=\"https://github.com/OpenMined/PySyft/actions/workflows/syft-version_tests.yml\"><img src=\"https://github.com/OpenMined/PySyft/actions/workflows/syft-version_tests.yml/badge.svg?branch=dev\" /></a>\n <a href=\"https://github.com/OpenMined/PySyft/actions/workflows/nightlies-run.yml\"><img src=\"https://github.com/OpenMined/PySyft/actions/workflows/nightlies-run.yml/badge.svg?branch=dev\" /></a>\n<a href=\"https://openmined.slack.com/messages/support\"><img src=\"https://img.shields.io/badge/chat-on%20slack-7A5979.svg\" /></a>\n<br /><br />\n\n<div align=\"center\"><a href=\"#\"><img src=\"https://stars.medv.io/openmined/pysyft.svg\" /></a></div>\n\n</div>\n\n# Syft + Grid provides secure and private Deep Learning in Python\n\nSyft decouples private data from model training, using\n[Federated Learning](https://ai.googleblog.com/2017/04/federated-learning-collaborative.html),\n[Differential Privacy](https://en.wikipedia.org/wiki/Differential_privacy),\nand Encrypted Computation (like\n[Multi-Party Computation (MPC)](https://en.wikipedia.org/wiki/Secure_multi-party_computation)\nand [Homomorphic Encryption (HE)](https://en.wikipedia.org/wiki/Homomorphic_encryption))\nwithin the main Deep Learning frameworks like PyTorch and TensorFlow. Join the movement on\n[Slack](http://slack.openmined.org/).\n\n---\n\nMost software libraries let you compute over the information you own and see inside of machines you control. However, this means that you cannot compute on information without first obtaining (at least partial) ownership of that information. It also means that you cannot compute using machines without first obtaining control over those machines. This is very limiting to human collaboration and systematically drives the centralization of data, because you cannot work with a bunch of data without first putting it all in one (central) place.\n\nThe Syft ecosystem seeks to change this system, allowing you to write software which can compute over information you do not own on machines you do not have (total) control over. This not only includes servers in the cloud, but also personal desktops, laptops, mobile phones, websites, and edge devices. Wherever your data wants to live in your ownership, the Syft ecosystem exists to help keep it there while allowing it to be used privately for computation.\n\n## Stable Release\n\nThe current stable release is `0.6.0` which is available on:\n\n- [PyPI](https://pypi.org/project/syft/)\n- [Docker Hub](https://hub.docker.com/u/openmined)\n\nFor many use cases you can simply use:\n\n```\n$ pip install syft\n```\n\nIf you are doing the [Private AI Series](https://courses.openmined.org/) or you are an external party developing against Syft and Grid please use the [`syft_0.6.0`](https://github.com/OpenMined/pysyft/tree/0.6.0) branch.\n\n## Development Branch\n\nThis is the `dev` branch and to accommodate our need to experiment with new ideas and implementations we will be moving a few things around during the early stages of `0.7.0 beta`. Currently the core `syft` library and code will remain fairly stable, while we do some much needed quality improvements and refactors to the `grid` codebase and its tooling for deployment and orchestration of nodes.\nDuring the process of development we will be moving examples from the `/packages/syft/examples` folder down to the `/notebooks` folder and ensuring they are working and tested with the latest `dev` code.\n\n## Mono Repo \ud83d\ude9d\n\nThis repo contains multiple sub-projects which work together.\n\n```\nOpenMined/PySyft\n\u251c\u2500\u2500 README.md     <-- You are here \ud83d\udccc\n\u251c\u2500\u2500 notebooks     <-- Notebook Examples and Tutorials\n\u2514\u2500\u2500 packages\n    \u251c\u2500\u2500 grid      <-- Grid - A network aware, persistent & containerized node running Syft\n    \u2514\u2500\u2500 syft      <-- Syft - A package for doing remote data science on private data\n```\n\n## Syft\n\nTo read more about what Syft is please consult the current [`0.6.0` Documentation](https://openmined.github.io/PySyft/).\n\n## Grid\n\nTo read more about what Grid is please consult the old [PyGrid README](https://github.com/OpenMined/PyGrid) until we finish writing the new one.\n\n## Dev Requirements\n\n- docker\n- tox\n- python 3.8+\n\n### Docker\n\nYou will need `docker` and `docker-compose` to do development on the `monorepo` tooling.\n\n- [Get Docker for macOS](https://docs.docker.com/docker-for-mac/install/)\n- [Get Docker for Windows](https://docs.docker.com/docker-for-windows/install/)\n- [Get Docker for Ubuntu](https://docs.docker.com/engine/install/ubuntu/)\n\n### Dev Compose File\n\nRun the [FastAPI](https://fastapi.tiangolo.com/) Dev environment using:\n\n```\n$ cd packages/grid\n$ source .env && docker compose up\n```\n\n## Rebuilding Docker Containers\n\n```\n$ cd packages/grid\n$ docker compose build\n```\n\n### Tox\n\nYou will need `tox` to run some of our build and test tools.\n\n```\n$ pip install tox\n```\n\n### List Build Commands\n\n```\n$ tox -l\n```\n\nYou should see the following:\n\n```\nsyft.jupyter\nsyft.lint\nsyft.test.fast\nsyft.test.libs\nsyft.test.security\n```\n\nThese commands can be run like so:\n\n```\n$ tox -e syft.lint\n```\n\n## Single VM Deployment\n\nWe are providing a simple way to deploy all of our stack inside a single VM so that no\nmatter where you want to run everything you can do so easily by thinking in terms of a\nsingle machine either bare metal or VM and have it provisioned and auto updated.\n\nTo develop against this locally you will want the following:\n\n- vagrant\n- virtualbox\n- ansible\n- hagrid <-- in packages/hagrid\n\n## HAGrid Install\n\nYou can install HAGrid with pip:\n\n```\n$ pip install hagrid\n```\n\n### MacOS Instructions\n\n```\n$ brew install vagrant virtualbox ansible\n```\n\nHagrid the Grid deployment tool:\n\n```\n$ cd packages/hagrid\n$ pip install -e .\n```\n\n## Vagrant\n\nVagrant allows us to create and manage VMs locally for development. During the startup\nprocess of creating the VM the ansible provisioning scripts will be applied automatically\nto the VM. If you change the Vagrantfile which describes how the VM is defined you will\nneed to either `vagrant reload` or destroy and re-create it.\n\nMaking changes to the VM state should be done through the `ansible` scripts so that\nthe state of the box is idempotent and re-running the ansible provisioning scripts\nshould always result in the same working grid node state.\n\nTo allow rapid development we mount the PySyft source repo into the VM at the path:\n`/home/om/PySyft` which is where it would be if it was cloned down on a real remote VM.\n\nThe configuration is done via a `Vagrantfile` which is written in ruby.\n\n## Vagrant Networking\n\n### Vagrant IP\n\nThe VM will be accessible on the IP `10.0.1.2` which is defined in the `Vagrantfile`.\n\n### Vagrant Landrush Plugin\n\nThe Landrush plugin for vagrant gives us an automatic dns service so we can access our\nlocal VM as though it were a real live domain on the internet.\n\n```\n$ vagrant plugin install landrush\n```\n\nWith this enabled you can access the box on:\n`http://node.openmined.grid`\n\n## Starting VM\n\nNOTE: You may need your sudo password to enable the landrush DNS entry on startup.\n\n```\n$ cd packages/grid\n$ vagrant up --provision\n```\n\n## Provisioning the VM\n\nYou want to do this any time you are testing out your `ansible` changes.\n\n```\n$ cd packages/grid\n$ vagrant provision\n```\n\nIf you want to do a quick deploy where you skip the system provisioning you can run:\n\n```\n$ ANSIBLE_ARGS='--extra-vars \"deploy_only=true\"' vagrant provision\n```\n\n## Connecting to Vagrant VM\n\n```\n$ cd packages/grid\n$ vagrant ssh\n```\n\n## TLS and Certificates\n\nYou can enable TLS in HAGrid by passing in the --tls param:\n\n```\n$ hagrid launch domain to docker:8081+ --tls\n```\n\nThis will go looking for a certificate and private key here:\n\n```\npackages/grid/traefik/certs/key.pem\npackages/grid/traefik/certs/cert.pem\n```\n\nThese files and their settings are defined in:\n\n```\npackages/grid/traefik/dynamic-configurations/certs.yaml\n```\n\nDuring development you will need to generate ones which match localhost and then\nenable --test mode so that these invalid self-signed certificates are accepted by various\ncode and libraries.\n\nFirst, get the tool `mkcert`.\n\n### MacOS\n\n```\n$ brew install mkcert\n```\n\n### Generate Dev Cert\n\n```\ncd PySyft\nexport GRID=$(pwd)/packages/grid && export CAROOT=$GRID/tls && export CERTS=$GRID/traefik/certs\nmkcert -cert-file=\"$CERTS/cert.pem\" -key-file=\"$CERTS/key.pem\" '*.openmined.grid' docker-host localhost 127.0.0.1 ::1\n```\n\nThis will have created the certificate and private key as well as placed the root signing\ncertificate (think fake SSL authority who can charge for SSL certs) in the following dir:\n\n```\npackages/grid/tls/rootCA-key.pem\npackages/grid/tls/rootCA.pem\n```\n\nTo ensure that tailscale will accept these certs we mount the file into the tailscale\ncontainer like so:\n\n```\nversion: \"3.8\"\nservices:\n  tailscale:\n    volumes:\n      - ./tls/rootCA.pem:/usr/local/share/ca-certificates/rootCA.pem\n\n```\n\nThe startup script runs `update-ca-certificates` so that the tailscale container is now\naware of this fake authority and will accept the fake cert you have created for it.\n\n### Install Cert on Host\n\nIf you wish to visit web pages with `localhost:8081` or `network1.openmined.grid` and\nhave the TLS certificate warning disappear you need to install the certificate with:\n\n```\n$ mkcert -install\n```\n\n### Ignoring TLS Certs\n\nAlternatively as we do in the integration tests you can pass it as an environment variable\nto programming languages like Python like so:\n\n```\nREQUESTS_CA_BUNDLE=packages/grid/tls/rootCA.pem pytest tests/integration ...\n```\n\nWhen you do this, python will also accept these certificates in libraries like requests.\nAlternatively you can also tell requests to ignore invalid certificates with the `verify`\nkwarg like so:\n\n```python\nimport requests\nrequest.get(url, verify=False)\n```\n\nTo make this more convenient we have added an ENV called `IGNORE_TLS_ERRORS` which we\nset using the `--test` param in `hagrid` like so:\n\n```\n$ hagrid launch test_network_1 network to docker:9081 --tail=false --tls --test\n```\n\nYou can check for this with `sy.util.verify_tls()` like so:\n\n```python\nimport requests\nimport syft as sy\n\nrequest.get(url, verify=sy.util.verify_tls())\n\n```\n\nIt is important not to run `IGNORE_TLS_ERRORS=true` in production.\n\n### Ports\n\nNormally web traffic is served over port `80` for `http` and port `443` for `https`.\nNaturally during development we need to use multiple ports for multiple stacks and bind\nthem to `localhost` and use things like `docker-host` to resolve this global address\nspace from within any isolated containers. Currently what we do is if the `port` you\nsupply to `hagrid` is `80` then we assume you are running in production and want port\n`443` for `https`. If you use any other port we will automatically find a port from\n`444` onwards and this port will be included in the `http` -> `https` 301 redirect in\ntraefik proxy. Because of this most browsers and network libraries will simply follow\nthis redirect so you can continue to use the normal `http` ports for everything.\n\n### Redirects\n\nThe Grid API inside Syft detects if a url and port combination provided gets redirected\nto `https` and will change the `base_url` which should mean that login credentials are\nsent over `https` not `http` where possible.\n\n### VPN\n\nDue to the fact that TLS Certificates are only valid for domains and not IPs and the\nVPN is currently configured to use IPs only, we do not redirect or serve `https` over\nthe VPN. The traffic being sent by `wireguard` over the VPN is already encrypted so\nthere should be no need for `TLS`. The way this works is, when Grid is using `TLS` we\nforward external port `80` traffic to port `81` and then use this for the 301 redirect\nto the `TLS` port `443+`. If traffic arrives on port `80` inside the cluster it does not\nget redirected which allows the VPN IPs to respond via `http`.\n\n### Deploying Custom Certs\n\nTo install certs via `hagrid` simply supply the two cert files as arguments:\n\n```\n$ hagrid launch domain to azure --tls --upload_tls_key=/path/to/certs/key.pem --upload_tls_cert=/path/to/certs/cert.pem\n```\n\nAlternatively if your machine is already setup without TLS you can simply reprovision with:\n\n```\n$ hagrid launch node_name domain to 123.x.x.x --tls --upload_tls_key=/path/to/certs/key.pem --upload_tls_cert=/path/to/certs/cert.pem\n```\n\n## Deploy to Cloud\n\n### Azure Marketplace 1-click Deploy\n\n[![Deploy To Azure](https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true)](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/madhavajay1632269232059.openmined_mj_grid_domain_ubuntu_1?tab=Overview)\n\nWe also have an example [Quickstart Template](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FOpenMined%2FPySyft%2Fdev%2Fpackages%2Fgrid%2Fquickstart%2Ftemplate.json) for use in your own automation pipelines.\n\n### Deploy from CLI to Azure\n\nHAGrid supports creating VMs and provisioning with PyGrid directly using:\n\n```\n$ hagrid launch to azure\n```\n\nFollow the prompts and enter resource groups, size, location, auth credentials etc.\n\n## Deploy from CLI to Google Cloud Platform (GCP)\n\nHAGrid supports creating VMs and provisioning with PyGrid directly using:\n\n```\n$ hagrid launch to gcp\n```\n\nFollow the prompts and enter project id, machine type, zone, auth credentials etc.\n**Note** Since we use the gcloud cli tool for provisioning we rely on the gcloud cli tool\ngenerated SSH keys so if you use a custom key path other than the default\n(~/.ssh/google_compute_engine) please specify the correct path.\n\n### HAGrid Deployment\n\nCreate a VM on your cloud provider with Ubuntu 20.04 with at least:\n\n- 2x CPU\n- 4gb RAM\n- 40gb HDD\n\nGenerate or supply a private key and note down the username.\n\nRun the following:\n\n```\n$ hagrid launch node --type=domain --host=104.42.26.195 --username=ubuntu --key_path=~/.ssh/key.pem\n```\n\n### Deploy vs Provision\n\nIf you want to later skip the setup process of installing packages and docker engine etc you can pass in --mode=deploy which will skip those steps.\n\n### Use a Custom PySyft Fork\n\nIf you wish to use a different fork of PySyft you can pass in --repo=The-PET-Lab-at-the-UN-PPTTT/PySyft --branch=ungp_pet_lab\n\n## Switching to the OpenMined user\n\n```\n$ sudo su - om\n```\n\n## Cloud Images\n\nWe are using Packer to build cloud images in a very similar fashion to the dev Vagrant box.\n\nTo build images you will need the following:\n\n- packer\n- vagrant\n- virtualbox\n- ansible\n\n### MacOS Instructions\n\n```\n$ brew install packer vagrant virtualbox ansible\n```\n\n## Build a Local Vagrant Box\n\nGo to the following directory:\n\n```\ncd packages/grid/packer\n```\n\nRun:\n\n```\n./build_vagrant.sh\n```\n\nWhat this does is first build the base image, by downloading a Ubuntu .iso and automating\nan install to a virtual machine. After the base image is created, the same ansible\nprovisioning scripts that we use in HAGrid and the Vagrant Dev environment above are\nrun against the image and finally a few shell scripts are executed to update some\nUbuntu packages and clean out a lot of unused stuff to squeeze the image size down.\n\nTo verify it worked you can start the Vagrant file like this:\n\n```\ncd packages/grid/packer\nvagrant up\n```\n\nThis system will start and automatically have the stack running and available on the local\nip http://10.0.1.3/ you can also SSH into this box using the credentials in the Vagrantfile.\n\n## Azure Cloud Image\n\nTo create the azure cloud image you need to have the `az` cli tool and make sure you are authenticated.\n\nInstall the CLI tool:\n\n```\n$ pip install az\n```\n\nAuthenticate your CLI tool:\n\n```\n$ az login\n```\n\nYou will need to use a resource group and create a storage account within that resource group.\n\nCreate a resource group called: `openmined-images`\n\n```\n$ az group create -n openmined-images -l westus\n```\n\nCreate an app to use within the packer file:\n\n```\n$ az ad sp create-for-rbac --name openmined-images > azure_vars.json\n```\n\nThis will create a file called `azure_vars.json` which will look something like this:\n\n```json\n{\n  \"appId\": \"21b92977-8ad0-467c-ae3a-47c864418126\",\n  \"displayName\": \"openmined-images\",\n  \"password\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n  \"tenant\": \"e3f9defa-1378-49b3-aed7-3dcacb468c41\"\n}\n```\n\nYou need to know your `subscription_id`:\n\n```bash\n$ SUBSCRIPTION_ID=$(az account show --query id | tr -d '\"')\n```\n\nYou can now build the image:\n\n```bash\n$ ./build_azure.sh ${SUBSCRIPTION_ID}\n```\n\n### Create a Shared Image Gallery\n\nCreate a Shared image gallery within Azure.\n\n## Kubernetes\n\nWe provide an option to deploy the stack using kubernetes.\nTo test and run this locally we use `k3d` and `devspace`.\n\n## Local Dev\n\n- docker\n- k3d\n- devspace\n- kubectl\n- k9s\n\n## MacOS\n\n### Docker\n\nWe will be using docker however you do not need to `enable kubernetes` in your docker desktop app.\nIf its enabled, disable it and click `Apply & Restart`.\n\nInstead we will use `k3d` which will create and manage all the k8s resources we require as a normal container in docker engine.\n\n```\n$ brew install k3d\n```\n\n### k3d\n\nk3d lets you create a test registry and cluster like so\n\n```\n$ export NODE_NAME=test-network-1\n$ export NODE_PORT=9081\n$ k3d cluster create $NODE_NAME -p \"$NODE_PORT:80@loadbalancer\" --registry-use k3d-registry.localhost\n$ k3d cluster start $NODE_NAME\n```\n\nIf you ever need to reset things you can just kill the docker containers and volumes:\n\n```\n$ docker rm $(docker ps -aq) --force\n$ docker volume prune --force || true\n```\n\nOnce k3s is running you should see the container in docker.\n\n```\n$ docker ps\nCONTAINER ID   IMAGE                                 COMMAND                  CREATED        STATUS              PORTS                                                                                                                                  NAMES\n9b765411a2f2   rancher/k3s:v1.22.7-k3s1         \"/bin/k3d-entrypoint\u2026\"   20 minutes ago   Up 20 minutes                                                   k3d-test-network-1-server-0\n878bc1bd630c   registry:2                       \"/entrypoint.sh /etc\u2026\"   20 minutes ago   Up 20 minutes   0.0.0.0:12345->5000/tcp                         k3d-registry.localhost\n```\n\n### Kubectl\n\nkubectl is the CLI tool for kubernetes. If you have ran k3s it should have configured your kubectl to have a context for the local k3s cluster by default.\n\nYou should be able to run something like:\n\n```\n$ kubectl get all\nNAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nservice/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   45h\n```\n\n### k8s Namespaces\n\nThink of a namespace as a grouping of resources and permissions which lets you easily create and destroy everything related to a single keyword.\n\n```\n$ kubectl get namespaces\nNAME                   STATUS   AGE\ndefault                Active   45h\nkube-node-lease        Active   45h\nkube-public            Active   45h\nkube-system            Active   45h\nkubernetes-dashboard   Active   45h\n```\n\nAll k8s have a default namespace and the other ones here are from kubernetes.\n\n### Helm Charts\n\nThe most popular way to deploy applications to k8s is with a tool called Helm. What helm aims to do is to provide another layer of abstraction over kubernetes yaml configuration with hierarchical variables, templates and a package definition which can be hosted over HTTP allowing custom applications to depend on other prefabricated helm charts or to provide consumable packages of your code as a helm chart itself.\n\n### devspace\n\nTo make development and deployment of our kubernetes code easier we use a tool called `devspace` which aims to be like a hot reloading dev optimised version of `docker compose` but for kubernetes. https://devspace.sh/\n\nAdditionally `devspace` allows us to deploy using helm by auto-generating the values and charts from the devspace.yaml which means the single source of truth can be created which includes both production helm charts and kubernetes yaml configuration as well as local dev overrides.\n\n```\n$ brew install devspace\n```\n\n### Deploy to local dev\n\nNow run the `dev` command with `devspace`:\n\nTo run a network with headscale VPN:\n\n```\n$ cd packages/grid\n$ devspace dev -b -p network\n```\n\nTo run a domain without the headscale VPN:\n\n```\n$ cd packages/grid\n$ devspace dev -b -p domain\n```\n\nTo deploy to your local k3s do the following:\n\n```\n$ export NODE_NAME=test-network-1\n$ export NODE_PORT=9081\n$ devspace --no-warn --kube-context \"k3d-$NODE_NAME\" --namespace $NODE_NAME \\\n           --var DOMAIN_NAME=$NODE_NAME \\\n           --var NETWORK_CHECK_INTERVAL=5 \\\n           --var CONTAINER_REGISTRY=k3d-registry.localhost:12345/ \\\n           deploy -b -p network\n```\n\nThe important thing to note is the custom container registry. This will tag the images with that local registry and k3s will know how to pull them from its custom registry.\n\nYou may need to add this to your `/etc/hosts` file if you are not on linux:\n\n```\n127.0.0.1 k3d-registry.localhost\n```\n\n### k9s\n\nThere is a tool like ctop which lets you easily see the kubernetes cluster called k9s.\n\nInstall it like so:\n\n```\n$ brew install derailed/k9s/k9s\n```\n\nWhen you run it you can select the local context k3d-test-network-1 and see the namespace you deployed.\n\n### Destroy the local deployment\n\n```\n$ devspace purge\n```\n\n### Delete persistent volumes\n\nThe database and the VPN containers have persistent volumes.\nYou can check them with:\n\n```\n$ kubectl get persistentvolumeclaim\n```\n\nAnd then delete PostgreSQL with something like:\n\n```\n$ kubectl delete persistentvolumeclaim app-db-data-db-0\n```\n\n### Check which images / tags are being used\n\nThis will show all the unique images and their tags currently deployed which is useful\nwhen debugging which version is actually running in the cluster.\n\n```\n$ kubectl get pods --all-namespaces -o jsonpath=\"{.items[*].spec.containers[*].image}\" | tr -s '[[:space:]]' '\\n' | sort | uniq -c\n```\n\n### Restart a container / pod / deployment\n\nGet all the deployments\n\n```\n$ kubectl get deployments\nNAME             READY   UP-TO-DATE   AVAILABLE   AGE\nbackend          1/1     1            1           18m\nbackend-stream   1/1     1            1           18m\nbackend-worker   1/1     1            1           18m\nfrontend         1/1     1            1           18m\nqueue            1/1     1            1           19m\n```\n\nRestart the backend-worker\n\n```\n$ kubectl rollout restart deployment backend-worker\n```\n\n### Deploy to Google Kubernetes Engine (GKE)\n\nConfigure kubectl context with GKE:\n\n```\n$ gcloud container clusters get-credentials --region us-central1-c staging-cluster-1\n```\n\nCheck that you have the correct context\n\n```\n$ kubectx\n```\n\nConfigure your Google Container Registry (GCR):\n\n```\n$ gcloud auth configure-docker\n```\n\nCheck your settings with print\n\n```\n$ devspace print -p domain --var=CONTAINER_REGISTRY=gcr.io/reflected-space-315806/\n```\n\nYou should see that you are creating a domain and that the container registry variable\nchanges the image name to:\n\n```\nimages:\n  backend:\n    image: gcr.io/reflected-space-315806/openmined/grid-backend\n```\n\nThis will tell `devspace` to publish to the GCR for your active GCP project.\n\nCreate the openmined namespace\n\n```\n$ kubectl create namespace openmined\n```\n\nTell devspace to use the openmined namespace\n\n```\n$ devspace use namespace openmined\n```\n\nDeploy to GKE:\n\n```\n$ devspace deploy -p domain --var=CONTAINER_REGISTRY=gcr.io/reflected-space-315806/\n```\n\nAccess a container directly:\n\n```\n$ devspace enter\n```\n\nAttach to container stdout:\n\n```\n$ devspace attach\n```\n\nUse port forwarding to access an internal service:\n\n```\n$ kubectl port-forward deployment/tailscale :4000\n```\n\n### Deploy to Azure Kubernetes\n\nCreate a cluster and optional registry.\n\nI named my registry: `omazuretest`\n\nLog into the registry with:\n\n```\n$ az acr login -n omazuretest.azurecr.io\n```\n\nCheck you have permission by tagging and uploading nginx:\n\n```\n$ docker pull nginx:latest\n$ docker tag nginx omazuretest.azurecr.io/nginx\n$ docker push omazuretest.azurecr.io/nginx\n```\n\n#### Build and Push Images\n\n```\ndevspace --no-warn --kube-context \"azure-test\" --namespace azure-network-1 --var DOMAIN_NAME=azure-network-1 --var CONTAINER_REGISTRY=omazuretest.azurecr.io/ build -b\n```\n\n#### Deploy\n\n```\ndevspace --no-warn --kube-context \"azure-test\" --namespace azure-network-1 --var DOMAIN_NAME=azure-network-1 --var CONTAINER_REGISTRY=omazuretest.azurecr.io/ deploy -p network\n```\n\n### Render Plain Kubernetes Manifests\n\nYou can just output plain kubernetes manifests like so:\n\nFor domains:\n\n```\n$ devspace render -p domain --skip-build --silent > k8s/rendered/domain.yaml\n```\n\nFor networks:\n\n```\n$ devspace render -p network --skip-build --silent > k8s/rendered/network.yaml\n```\n\n## Publish\n\n### HAGrid\n\n#### PyPI\n\nTo publish hagrid to pypi create a virtualenv in the `/packages/hagrid` directory.\n\n```\n$ cd packages/hagrid\n```\n\nUse a tool like `pipenv` or manually create and source like so:\n\n```\n$ python3 -m venv ./venv\n$ source .venv/bin/activate\n```\n\nInstall some tools:\n\n```\n$ pip install --upgrade bandit safety setuptools wheel twine tox\n```\n\nBump the version inside `/packages/hagrid/hagrid/__init__.py`\n\nBuild a wheel:\n\n```\n$ ./build_wheel.sh\n```\n\nCheck with twine:\n\n```\n$ twine check `find -L ./ -name \"*.whl\"`\n```\n\nUpload with twine:\n\n```\n$ twine upload dist/hagrid-x.x.x-py3-none-any.whl\n```\n\n#### Docker\n\n```\n$ cd packages/hagrid\n```\n\nBuild and tag the images:\n\n```\n$ ./build_docker.sh\n```\n\nPublish to docker hub:\n\n```\n$ docker push openmined/hagrid:latest\n$ docker push openmined/hagrid:x.x.x\n```\n\n## Join Slack\n\nAlso, join the rapidly growing community of 12,000+ on [Slack](http://slack.openmined.org).\nThe Slack community is very friendly and great about quickly answering questions about the use and development of PySyft!\n\n## Disclaimer\n\nThis software is in beta. Use at your own risk.\n\n## Support\n\nFor support in using this library, please join the **#support** Slack channel. [Click here to join our Slack community!](https://slack.openmined.org)\n\n## Organizational Contributions\n\nWe are very grateful for contributions to Syft and Grid from the following organizations!\n\n|                                                                                                                                                                     |                                                                                                                                                                                                              |                                                                                                                                                                                         |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [<img src=\"https://github.com/udacity/private-ai/blob/master/udacity-logo-vert-white.png?raw=true\" alt=\"Udacity\" width=\"160\"/>](https://udacity.com/)               | [<img src=\"https://raw.githubusercontent.com/OpenMined/PySyft/main/packages/syft/docs/img/organizations/comind.png\" alt=\"coMind\" width=\"160\" />](https://github.com/coMindOrg/federated-averaging-tutorials) | [<img src=\"https://i.ibb.co/vYwcG9N/arkhn-logo.png\" alt=\"Arkhn\" width=\"160\" />](http://ark.hn)                                                                                          |\n| [<img src=\"https://raw.githubusercontent.com/dropoutlabs/files/master/dropout-labs-logo-white-2500.png\" alt=\"Dropout Labs\" width=\"160\"/>](https://dropoutlabs.com/) | [<img src=\"https://raw.githubusercontent.com/OpenMined/PySyft/main/packages/syft/docs/img/organizations/genbu.png\" alt=\"GENBU AI\" width=\"160\"/>](https://genbu.ai/)                                          | [<img src=\"https://raw.githubusercontent.com/OpenMined/PySyft/main/packages/syft/docs/img/organizations/bitdefender.png\" alt=\"Bitdefender\" width=\"160\"/>](https://www.bitdefender.com/) |\n\n## License\n\n[Apache License 2.0](https://github.com/OpenMined/PySyft/blob/main/packages/syft/LICENSE)\n\n```\n\n```\n"
 },
 {
  "repo": "vvvote/vvvote",
  "language": "PHP",
  "readme_contents": "VVVote\n======\n\nAn Anonymous and Tracable Online Voting System\n-----------------------------------------------\n\nVVVote is an online voting system which provides the following features:\n\n- The votes are anonymous. That means, no one can find out which vote came from which voter - except the voter himself. Even the admin of the voting server cannot do this matching.\n- The whole process is transparent: every voter can verify that: (a) all votes are unchanged, (b) his vote is counted, (c) only votes from entitled users are accepted.\n\nThe system does not provide secrecy in the following meaning: It cannot ensure that no one looks over the voter's shoulder when voting. And that there is a way for a voter to prove how he decided to vote.\n\nLicense\n=======\n\nGPLv3\n\nFurther Reading\n===============\n\n* For a graphical (UML) description of the anonymizing protocol see https://stackedit.io/viewer#!url=https://raw.githubusercontent.com/pfefffer/vvvote/master/doc/protocol/protocol.md\n\n* For a more an explanation and discussion (for not mathematicion people) in German see https://github.com/pfefffer/vvvote/blob/master/doc/Beschreibung%20des%20Anonymisierungsverfahrens.md \n\n* Installation instructions: https://github.com/pfefffer/vvvote/blob/master/doc/install.md"
 },
 {
  "repo": "felixgr/kerckhoffs",
  "language": "Python",
  "readme_contents": "### Automatic Identification of Cryptographic Primitives in Software\n\nDiploma/Master Thesis of Felix Gr\u00f6bert\n\nFebruary 7, 2010\n\nIn this thesis we research and implement methods to detect cryptographic algorithms\nand their parameters in software. Based on our observations on cryptographic code,\nwe point out several inherent characteristics to design signature-based and generic\nidentification methods. Using dynamic binary instrumentation, we record instructions\nof a program during runtime and create a fine-grained trace. We implement a\ntrace analysis tool, which also provides methods to reconstruct high-level information\nfrom a trace, for example control flow graphs or loops, to detect cryptographic\nalgorithms and their parameters. Using the results of this work, encrypted data, sent\nby a program for example, may be decrypted and used by an analyst to gain further\ninsight on the behavior of the analyzed binary executable.\n\n![Auguste Kerckhoffs](http://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Kerkhoffs.jpg/220px-Kerkhoffs.jpg \"Sup?\")\n\n\nKeywords: Code Analysis, Dynamic Binary Analysis, Instrumentation, Code Heuristics, Code Signatures, Applied Cryptography\n\n\nAlso published in [RAID'11](https://scholar.google.de/citations?view_op=view_citation&hl=en&user=Uq29m54AAAAJ&citation_for_view=Uq29m54AAAAJ:u5HHmVD_uO8C)\n and [27c3](http://events.ccc.de/congress/2010/Fahrplan/events/4160.en.html)\n\nThesis [Google Scholar Link](https://scholar.google.de/citations?view_op=view_citation&hl=en&user=Uq29m54AAAAJ&citation_for_view=Uq29m54AAAAJ:u-x6o8ySG0sC)\n\nBibtex:\n\n```\n@mastersthesis{groebert2010,\nAuthor = {Felix Gr{\\\"o}bert},\nTitle = {{Automatic Identification of Cryptographic Primitives in Software}},\nSchool = {Ruhr-University Bochum, Germany},\nType = {Diplomarbeit},\nYear = {2010}\n}\n\n@incollection{grobert2011automated,\ntitle={Automated Identification of Cryptographic Primitives in Binary Programs},\nauthor={Gr{\\\"o}bert, Felix and Willems, Carsten and Holz, Thorsten},\nbooktitle={Recent Advances in Intrusion Detection},\npages={41--60},\nyear={2011},\npublisher={Springer}\n}\n```\n"
 },
 {
  "repo": "HaxeFoundation/crypto",
  "language": "Haxe",
  "readme_contents": "# Crypto\n[![TravisCI Build Status](https://travis-ci.org/HaxeFoundation/crypto.svg?branch=master)](https://travis-ci.org/HaxeFoundation/crypto)\n[![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/HaxeFoundation/crypto?branch=master&svg=true)](https://ci.appveyor.com/project/HaxeFoundation/crypto)\n\nCross platform cryptographic functions for Haxe 4 and 3\n\nThis brings cryptographic functions for Haxe 4, with `-lib crypto` after having installed it with `haxelib install crypto`.\n\nIt is also usable on Haxe 3, where there is already a `haxe.crypto` package containing Adler32, Base64, BaseCode, Crc32, HMac, Md5, Sha1, Sha224, Sha256. \nUsing this library on Haxe 3 with `-lib crypto` will overload the `haxe.crypto` package and allow support for Aes, BCrypt, BlowFish, Des, Pbkdf2, Ripemd160, Sha384, Sha512, TripleDes, TwoFish in addition to the previous 9 classes.\n\n### Supported algorithms\n\n  * Aes\n  * Blowfish\n  * Twofish\n  * TripleDes\n  * Des \n  * BCrypt\n  * Hmac\n  * Sha224\n  * Sha256\n  * Sha384\n  * Sha512\n  * Ripemd-160\n  * PBKDF2\n  * Salsa20\n  * XSalsa20\n  * ChaCha\n  * RC4\n  * SCrypt\n  * Poly1305\n   \n### Block cipher mode of operation\n  * ECB\n  * CBC\n  * PCBC\n  * CFB\n  * OFB\n  * CTR\n  \n### Padding\n  * AnsiX923\n  * BitPadding / ISO 9797-1 / ISO7816-4 / One and zeros\n  * ISO10126 / Random padding\n  * NoPadding\n  * NullPadding / Zero byte padding\n  * PKCS7 ( support PKCS#5 padding)\n  * SpacePadding\n  * TBC ( Trailing-Bit-Compliment padding )\n\n### Usage\n\n #### AES Encryption\n ```haxe\n   var aes : Aes = new Aes();\n   \n   var key = Bytes.ofHex(\"603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4\");\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var iv:Bytes = Bytes.ofHex(\"4F021DB243BC633D7178183A9FA071E8\");\n   \n   aes.init(key,iv);\n   \n   // Encrypt\n   var data = aes.encrypt(Mode.CTR,text,Padding.NoPadding);\n   trace(\"Encrypted text: \"+ data.toHex());\n   \n   // Decrypt\n   data = aes.decrypt(Mode.CTR,data,Padding.NoPadding);\n   trace(\"Decrypted text: \"+ data);\n ```\n \n  #### Blowfish\n ```haxe\n   var blowFish  : BlowFish = new BlowFish();\n   \n   var key = Bytes.ofHex(\"E0FEE0FEF1FEF1FE\");\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var iv:Bytes = Bytes.ofHex(\"7FC38460C9225873\");\n   \n   blowFish.init(key,iv);\n   \n   // Encrypt\n   var data = blowFish.encrypt(Mode.PCBC,text,Padding.PKCS7);\n   trace(\"Encrypted text: \"+ data.toHex());\n   \n   // Decrypt\n   data = blowFish.decrypt(Mode.PCBC,data,Padding.PKCS7);\n   trace(\"Decrypted text: \"+ data);\n ```\n \n   #### Twofish\n ```haxe\n   var twoFish  : TwoFish = new TwoFish();\n   \n   var key = Bytes.ofHex(\"ff08e2dcca459835ac30c39548ae848157ba5fdcc8e4977efc26c0d1cc7a25cb\");\n   var text = Bytes.ofHex(\"06051a69c4a72fa8b205ebdca3add79d5e904b5e9e6d08ed60233ad28b9540ba\");\n   \n   twoFish.init(key);\n   \n   // Encrypt\n   var data = twoFish.encrypt(Mode.ECB,text,Padding.NoPadding);\n   trace(\"Encrypted text: \"+ data.toHex());\n   \n   // Decrypt\n   data = twoFish.decrypt(Mode.ECB,data,Padding.NoPadding);\n   trace(\"Decrypted text: \"+ data.toHex());\n ```\n \n  #### Triple DES / 3Des\n ```haxe\n   var tdes : TripleDes = new TripleDes();\n   \n   var key = Bytes.ofHex(\"2BD6459F82C5B300952C49104881FF482BD6459F82C5B300\");\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var iv:Bytes = Bytes.ofHex(\"A015E0CFA1FED3B5\");\n   \n   tdes.init(key,iv);\n   \n    // Encrypt\n   var data = tdes.encrypt(Mode.OFB,text,Padding.NoPadding);\n   trace(\"Encrypted text: \"+ data.toHex());\n   \n   // Decrypt\n   data = tdes.decrypt(Mode.OFB,data,Padding.NoPadding);\n   trace(\"Decrypted text: \"+ data);\n ```\n  \n  ####  DES \n ```haxe\n   var des:Des = new Des();\n   \n   var key = Bytes.ofHex(\"9816854577667254\");\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var iv:Bytes = Bytes.ofHex(\"69cf9d79757adcab\");\n   \n   des.init(key,iv);\n   \n    // Encrypt\n   var data = des.encrypt(Mode.CTR,text,Padding.NoPadding);\n   trace(\"Encrypted text: \"+ data.toHex());\n   \n   // Decrypt\n   data = des.decrypt(Mode.CTR,data,Padding.NoPadding);\n   trace(\"Decrypted text: \"+ data);\n ```\n \n  #### BCrypt\n   ```haxe\n   var salt = BCrypt.generateSalt(10,BCrypt.Revision2B); // Example: $2b$10$xB5TcOrSHD2quBMES0W8aO\n    \n   var dataText = BCrypt.encode(\"Haxe - The Cross-platform Toolkit\",salt);\n   trace(\"BCrypt: \"+dataText); // Example: $2b$10$xB5TcOrSHD2quBMES0W8aOrxTs3ONJQzqYIe0l.s1BHO6KoYUY5IS\n   \n   var match = BCrypt.verify(\"Haxe - The Cross-platform Toolkit\",dataText);\n   trace(\"Match: \"+match);\n   ```\n \n  #### Hmac with MD5 / SHA1 / SHA224 / SHA256 / SHA384 / SHA512\n ```haxe\n   var hmacMd5 = new Hmac(MD5);\n   var hmacSha1 = new Hmac(SHA1);\n   var hmacSha224 = new Hmac(SHA224);\n   var hmacSha256 = new Hmac(SHA256);\n   var hmacSha384 = new Hmac(SHA384);\n   var hmacSha512 = new Hmac(SHA512);\n\n   var key = ofHex(\"c8c2c9d386b63964\");\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n    \n   var data = hmacMd5.make(key,text);\n   trace(\"HMac MD5: \"+data.toHex());\n   \n   data = hmacSha1.make(key,text);\n   trace(\"HMac Sha1: \"+data.toHex());\n\n   data = hmacSha224.make(key,text);\n   trace(\"HMac Sha224: \"+data.toHex());\n\n   data = hmacSha256.make(key,text);\n   trace(\"HMac Sha256: \"+data.toHex());\n   \n   data = hmacSha384.make(key,text);\n   trace(\"HMac Sha384: \"+data.toHex());\n   \n   data = hmacSha512.make(key,text);\n   trace(\"HMac Sha512: \"+data.toHex());\n ```\n \n   #### SHA224\n   ```haxe\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n    \n   var dataText = Sha224.encode(\"Haxe - The Cross-platform Toolkit\");\n   trace(\"Sha224: \"+dataText);\n   \n   var dataBytes = Sha224.make(text);\n   trace(\"Sha224: \"+dataBytes.toHex());\n   ```\n   \n   #### SHA256\n   ```haxe\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n    \n   var dataText = Sha256.encode(\"Haxe - The Cross-platform Toolkit\");\n   trace(\"Sha256: \"+dataText);\n   \n   var dataBytes = Sha256.make(text);\n   trace(\"Sha256: \"+dataBytes.toHex());\n   ```\n   \n   #### SHA384\n   ```haxe\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n    \n   var dataText = Sha384.encode(\"Haxe - The Cross-platform Toolkit\");\n   trace(\"Sha384: \"+dataText);\n   \n   var dataBytes = Sha384.make(text);\n   trace(\"Sha384: \"+dataBytes.toHex());\n   ```\n   \n   #### SHA512\n   ```haxe\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n    \n   var dataText = Sha512.encode(\"Haxe - The Cross-platform Toolkit\");\n   trace(\"Sha512: \"+dataText);\n   \n   var dataBytes = Sha512.make(text);\n   trace(\"Sha512: \"+dataBytes.toHex());\n   ```\n\n   #### Ripemd-160\n   ```haxe\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   \n   var rpmd = Ripemd160.encode(\"Haxe - The Cross-platform Toolkit\");\n   trace(\"Ripemd-160: \"+rpmd);\n   \n   var rpmd = Ripemd160.make(text);\n   trace(\"Ripemd-160: \"+rpmd.toHex());\n   \n   var rpmd = new Ripemd160();\n   rpmd.addBytes(text,0,text.length);\n   var rdata = rpmd.finish();\n   trace(\"Ripemd-160: \"+rdata.toHex());\n   ```\n   \n   #### PBKDF2\n   ```haxe\n   var text = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var salt = Bytes.ofString(\"salt\");\n   \n   // Support: MD5, SHA1,\tSHA224, SHA256, SHA384, SHA512, RIPEMD160\n   var pbkdf2 : Pbkdf2 = new Pbkdf2(SHA1);\n   var data = pbkdf2.encode(text,salt,4096,20);\n   trace(\"PBKDF2: \"+data.toHex());\n   ```\n \n   #### Salsa20\n   ```haxe\n   var key = Sha256.make(Bytes.ofString(\"secret key\"));\n   var nonce = Bytes.ofHex(\"288FF65DC42B92F9\");\n   var msg = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var salsa = new Salsa20();\n   salsa.init(key,nonce);\n   var data = salsa.encrypt(msg);\n   trace(\"Salsa20 encrypt: \"+data.toHex());\n\n   var salsaDecrypt =  new Salsa20();\n   salsaDecrypt.init(key,nonce);\n   var plainData = salsaDecrypt.decrypt(data);\n   trace(\"Salsa20 decrypt: \"+ plainData.toString());\n\n   salsa.reset();\n   plainData = salsa.decrypt(data);\n   trace(\"Salsa20 decrypt ( with reset ) : \"+ plainData.toString());\n\n   salsa.seek(0);\n   plainData = salsa.decrypt(data);\n   trace(\"Salsa20 decrypt ( with seek position ) : \"+ plainData.toString());\n   ``` \n   \n   #### XSalsa20\n   ```haxe\n   var key = Sha256.make(Bytes.ofString(\"secret key\"));\n   var nonce = Bytes.ofHex(\"9E645A74E9E0A60D8243ACD9177AB51A1BEB8D5A2F5D700C\");\n   var msg = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var xsalsa = new XSalsa20();\n   xsalsa.init(key,nonce);\n   var data = xsalsa.encrypt(msg);\n   trace(\"XSalsa20 encrypt: \"+data.toHex());\n\n   var xsalsaDecrypt =  new XSalsa20();\n   xsalsaDecrypt.init(key,nonce);\n   var plainData = xsalsaDecrypt.decrypt(data);\n   trace(\"XSalsa20 decrypt: \"+ plainData.toString());\n   ```   \n   \n   #### ChaCha\n   ```haxe\n   var key = Sha256.make(Bytes.ofString(\"secret key\"));\n   var nonce = Bytes.ofHex(\"0F1E2D3C4B596877\");\n   var msg = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var chaCha = new ChaCha();\n   chaCha.init(key,nonce);\n   var data = chaCha.encrypt(msg);\n   trace(\"ChaCha encrypt: \"+data.toHex());\n\n   var chaChaDecrypt =  new ChaCha();\n   chaChaDecrypt.init(key,nonce);\n   var plainData = chaChaDecrypt.decrypt(data);\n   trace(\"ChaCha decrypt: \"+ plainData.toString());\n   ```\n   \n   #### RC4 ( ARC4 )\n   ```haxe\n   var key = Bytes.ofHex(\"a99c5476d5e5d61d425c01fa29632171\");\n   var msg = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var rc4 = new RC4();\n   rc4.init(key);\n   var data = rc4.encrypt(msg);\n   trace(\"RC4 encrypt: \"+data.toHex());\n\n   rc4.init(key);\n   var plainData = rc4.decrypt(data);\n   trace(\"RC4 decrypt: \"+ plainData.toString());\n   ```\n   \n   #### SCrypt\n   ```haxe\n   var salt = Bytes.ofHex(\"536F6469756D43686C6F72696465\");\n   var password = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n   var scrypt:SCrypt = new SCrypt();\n   var data = scrypt.hash(password, salt, 1024, 8, 1, 64);\n   trace(\"SCrypt hash: \"+data.toHex());\n   ```\n\n   #### Poly1305\n   ```haxe\n   var key = Sha256.make(Bytes.ofString(\"secret key\")); //32 bytes key\n   var msg = Bytes.ofString(\"Haxe - The Cross-platform Toolkit\");\n  \n   var poly1305 = new Poly1305();\n   var data = poly1305.encode(msg,key); \n   trace(\"Poly1305 encrypt: \"+data.toHex());\n   \n   // Verify\n   var verify = poly1305.verify(msg,key,data);\n   trace(\"OK: \"+verify);\n\n   // Streaming API\n   var poly1305 = new Poly1305();\n   poly1305.init(key);\n   poly1305.update(msg, 0, msg.length);\n   msg = Bytes.ofString(\"Haxe can build cross-platform applications.\");\n   poly1305.update(msg, 0, msg.length);\n   var data = poly1305.finish();\n   trace(\"Poly1305 encrypt: \"+ data.toHex());\n   ```   \n   "
 },
 {
  "repo": "dojo/crypto",
  "language": "JavaScript",
  "readme_contents": "# dojo-crypto\n\nThe crypto package provides cryptographic utilities including hashing and signing functions.\n\n## Features\n\nComing soon!\n\n## How do I use this package?\n\nUsers will need to download and compile directly from this repository and\n[dojo/core](https://github.com/dojo/core) for the time being. Precompiled\nAMD/CommonJS modules will be provided in the future as our release tools are\nimproved.\n\nOnce you've downloaded `dojo-core` and `dojo-crypto`, perform the following\nsteps:\n\n```sh\ncd dojo-core\ngrunt dist\ncd dist\nnpm link\ncd ../../dojo-crypto\nnpm install\nnpm link dojo-core\n```\n\n## How do I contribute?\n\nWe appreciate your interest!  Please see the [Guidelines Repository](https://github.com/dojo/guidelines#readme) for the\nContributing Guidelines and Style Guide.\n\n## Testing\n\nTest cases MUST be written using Intern using the Object test interface and\nAssert assertion interface.\n\n90% branch coverage MUST be provided for all code submitted to this repository,\nas reported by istanbul\u2019s combined coverage results for all supported\nplatforms.\n\n## Licensing information\n\n\u00a9 2017 JS Foundation & contributors. [New BSD](http://opensource.org/licenses/BSD-3-Clause) license.\n"
 },
 {
  "repo": "mcaserta/spring-crypto-utils",
  "language": "Java",
  "readme_contents": "[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=mcaserta_spring-crypto-utils&metric=alert_status)](https://sonarcloud.io/dashboard?id=mcaserta_spring-crypto-utils)\n[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=mcaserta_spring-crypto-utils&metric=security_rating)](https://sonarcloud.io/dashboard?id=mcaserta_spring-crypto-utils)\n[![Vulnerabilities](https://sonarcloud.io/api/project_badges/measure?project=mcaserta_spring-crypto-utils&metric=vulnerabilities)](https://sonarcloud.io/dashboard?id=mcaserta_spring-crypto-utils)\n\nWelcome fellow hacker. Spring Crypto Utils belongs to an era\nwhen configuration of java applications was done in Spring's\nxml files. Thank god that era is no more and we now do things\nin plain java.\n\nYou might want to have a look at the evolution of Spring \nCrypto Utils, which is [Bruce](https://github.com/mcaserta/bruce).\n  \nIf you are really looking for Spring Crypto Utils, it is of course \n[still available](https://mirkocaserta.com/spring-crypto-utils) \nand the stable version is in branch 1.4.\n\nBye, [Mirko](https://mirkocaserta.com).\n"
 },
 {
  "repo": "johndoe31415/toyecc",
  "language": "Python",
  "readme_contents": "# toyecc\n[![Build Status](https://app.travis-ci.com/johndoe31415/toyecc.svg?branch=master)](https://app.travis-ci.com/johndoe31415/toyecc)\n\ntoyecc is a playground for Elliptic Curve Cryptography in F<sub>P</sub>. It is\nwritten in pure Python and aims to explain ECC in easy terms. It is neither\nwritten to be performant, nor side-channel resistant nor in any way suited for\nproductive use at all. Please use it for its intended purpose and for it only.\n\nThe rationale behind toyecc is to show a clear and mathematically clean\npresentation of the underlying mathematical problems. Most code that is written\narund ECC -- especially code that revolves around Ed25519 and/or Curve25519 is\nheavily optimized and in many cases hard to understand. toyecc tries to present\nthe problems with a high level of abstraction in order to serve as yet another\n(different) reference to compare implementations against and in order to aid\nunderstanding of heavily optimized code. All curve arithmetic is therefore\nperformed in affine space; performance in affine space is lowest, but having\nvalues that directly can be checked against the curve equation makes\nunderstanding everything extremely easy.\n\n\n## Installation\ntoyecc is available on PyPi. You can install it by:\n\n```\n$ pip3 install toyecc\n```\n\n\n## Tutorial\nThere's a ECC tutorial that I've written which accompanies the pure code. It\ncan be found at [http://johannes-bauer.com/compsci/ecc/](http://johannes-bauer.com/compsci/ecc/)\n\n\n## Features\n  * ECDSA demonstration\n  * ECIES demonstration\n  * ECDH demonstration\n  * Elgamal demonstration\n  * Dual_EC_DBRG backdoor demonstration\n  * Demonstration how a private key can be recovered from two ECDSA signatures\n    which reused the same nonce (ECDSA nonce exploit)\n  * Support for short-formed Weierstrass curves, Montgomery curves and twisted\n    Edwards curves\n  * Conversion of domain parameters of twisted Edwards to Montgomery form and\n    back, conversion of points between Montgomery representation and its\n    birationally equivalent twisted Edwards counterpart\n  * Ed25519 and Curve25519 support and support to convert keys between each\n    other (Curve25519 and Ed25519 are birationally equivalent curves)\n  * Many testcases to try out your own implementation\n  * Example of OpenBSD's signify application (generates and verifies Ed25519\n    signatures, but doesn't support key encryption)\n  * X-coordinate-only scalar multiplication on Short Weierstrass curves\n  * Clean, well-documented Python3 code\n  * Sage scripts that perform an invalid point attack using a vulnerable\n    X-only-ladder implementation of toyecc\n\n## License\nGNU GPL-3.\n"
 },
 {
  "repo": "FeatherCoin/Feathercoin",
  "language": "C++",
  "readme_contents": "\nFeathercoin Core\n================\n\nWhat is Feathercoin?\n--------------------\n\nFeathercoin is a fork of the Bitcoin core project. It contains its own\nset up of certain parameters, such as block times and extra features such\nas enhanced mining difficulty calculations, protection against 51% attacks\nand its own hashing algorithm.\n\nFeathercoin is an open source project and additional changes and fixes to those in\nthe source code are managed by the community.\n\nTelegram: https://t.me/FeathercoinOfficial  \nTwitter: https://twitter.com/Feathercoin  \nForum: http://forum.feathercoin.com/\n\n\nWhat is Feathercoin?\n----------------\n\nFeathercoin is an experimental digital currency that enables instant payments to\nanyone, anywhere in the world. Feathercoin uses peer-to-peer technology to operate\nwith no central authority: managing transactions and issuing money are carried\nout collectively by the network. Feathercoin Core is the name of open source\nsoftware which enables the use of this currency.\n\nFor more information, as well as an immediately useable, binary version of\nthe Feathercoin Core software, see these [downloads](https://github.com/FeatherCoin/Feathercoin/releases).\n\n\nLicense\n-------\n\nFeathercoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n\n\nDevelopment Process\n-------------------\n\nThe latest `master` branch is regularly built and tested, but is not guaranteed to be\ncompletely stable. [Tags](https://github.com/Feathercoin/Feathercoin/tags) are created\nregularly to indicate new official, stable release versions of Feathercoin Core.\n\nThe contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n"
 },
 {
  "repo": "april/cryptonom-icon",
  "language": "HTML",
  "readme_contents": "# Cryptography iconography\n\nCreating diagrams to describe cryptographic concepts is tough, but it doesn't have to be.  The cryptonom-icon project aims to provide a set of freely available icons and diagrams for use in whatever projects and presentations you might have.\n\nAll diagrams are created in [Affinity Designer](https://affinity.serif.com/en-us/designer/), exported to SVG, and then optimized with [svgo](https://github.com/svg/svgo).\n\nThese icons were original created for use in my [cryptography 101](https://marumari.github.io/crypto-presentation/#/) presentation, which contains many examples of their uses. An (extremely primitive) [gallery](https://marumari.github.io/cryptonom-icon/) of these images is available, for previewing the included icons.\n\n# Attributions\n\nThis presentation uses a small number of copyrighted images and texts. Without the work of these contributors, this presentation would not be possible. See [ATTRIBUTIONS.md](ATTRIBUTIONS.md) for additional information, and thanks to everyone who contributed!\n\n[Cryptonomicon](https://en.wikipedia.org/wiki/Cryptonomicon) is a fantastic work of fiction by Neal Stephenson, and I highly recommend that you purchase and read it.\n\n# License\n\nLicensed CC-BY-SA 4.0.\n"
 },
 {
  "repo": "gunjank/springboot-asymmetric-cryptography",
  "language": "Java",
  "readme_contents": "# springboot-asymmetric-cryptography\nJava - Spring Boot application with asymmetric encryption including a sample html client for test/debug. \n\n# Summary about asymmetric encryption\nAsymmetric Encryption is a form of Encryption where keys come in pairs. What one key encrypts, only the other can decrypt. Frequently (but not necessarily), the keys are interchangeable, in the sense that if key A encrypts a message, then B can decrypt it, and if key B encrypts a message, then key A can decrypt it.\n\n## Build system\n[Maven] (https://maven.apache.org/)\n\n## Setup \nMaven dependecies install `mvn clean install`\n\n## Run \n`mvn spring-boot:run`  or use your favourite IDE and run as maven application  \nBy default Application will start on `localhost:8080` \n\n## Use\nOnce you start your application (client with login screen - localhost:8080) it will call `localhost:8080/key?appId=<some app id>` and receive public key where server maintaines its private key. \nNow once you submit userid/password it actually encrypts them by using client public key. \n\n\n\n\n\n\n"
 },
 {
  "repo": "Sajjon/EllipticCurveKit",
  "language": "Swift",
  "readme_contents": "## \u26a0\ufe0f THIS SDK IS NOT SAFE/PRODUCTION READY (YET!) \u26a0\ufe0f \n#### I'm no cryptography expert, If you find mistakes, inaccuracies or if you have suggestions for improvements of this README or the source code, please [submit an issue](https://github.com/Sajjon/EllipticCurveKit/issues/new)!\n\n<!-- MarkdownTOC -->\n\n- [Goal](#goal)\n    - [Swifty?](#swifty)\n    - [Usage](#usage)\n        - [Message](#message)\n- [Alternatives](#alternatives)\n    - [Bitcoin C Bindings](#bitcoin-c-bindings)\n    - [Pure Swift](#pure-swift)\n- [Status](#status)\n    - [Status of goal](#status-of-goal)\n- [Dependencies](#dependencies)\n    - [Big Numbers](#big-numbers)\n        - [Apple Accelerate vBignum](#apple-accelerate-vbignum)\n        - [Hash functions](#hash-functions)\n- [Key inspiration](#key-inspiration)\n- [Roadmap](#roadmap)\n    - [Signatures](#signatures)\n    - [Key Formats](#key-formats)\n        - [Private Key](#private-key)\n        - [Public Key](#public-key)\n    - [Public Addresses](#public-addresses)\n    - [Common Curves](#common-curves)\n\n<!-- /MarkdownTOC -->\n\n\n# Goal\n\"Swifty\", safe and fast Elliptic Curve Cryptography SDK in pure Swift (no dependency to a library written in any other language than Swift).\n\n## Swifty?\nSwift is a very expressible, [type safe](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html), and [fast](https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/swift.html) programming language having the mottos [\"Clarity is more important than brevity\" and \"Clarity at the point of use\"](https://swift.org/documentation/api-design-guidelines/#fundamentals) which makes it read out as English. The main goal of this Swift SDK is to be Swifty (while also safe and fast). By the way, did you know that [Swift is the fastest growing programming language](https://www.wired.com/story/apples-swift-programming-language-is-now-top-tier/)? \n\n## Usage\n[Swift is perfect for Protocol Oriented Programming (POP)](https://blog.bobthedeveloper.io/introduction-to-protocol-oriented-programming-in-swift-b358fe4974f) and strongly typed language, which allows for these kinds of protocols.\n\n```swift\npublic protocol EllipticCurveCryptographyKeyGeneration {\n    /// Elliptic Curve used, e.g. `secp256k1`\n    associatedtype CurveType: EllipticCurve\n\n    /// Generates a new key pair (PrivateKey and PublicKey)\n    static func generateNewKeyPair() -> KeyPair<CurveType>\n\n    /// Support Wallet Import Format (a.k.a. WIF)\n    static func restoreKeyPairFrom(privateKey: PrivateKey<CurveType>) -> KeyPair<CurveType>\n\n    /// A `Wallet` is a `KeyPair` and with `PublicAddresses` derived (compressed/uncompressed)\n    static func createWallet(using keyPair: KeyPair<CurveType>) -> Wallet<CurveType>\n}\n\npublic protocol EllipticCurveCryptographySigning {\n    /// Which method to use for signing, e.g. `Schnorr`\n    associatedtype SigningMethodUsed: Signing\n    typealias CurveType = SigningMethodUsed.CurveType\n\n    /// Signs `message` using `keyPair`\n    static func sign(_ message: Message, using keyPair: KeyPair<CurveType>) -> SignatureType\n\n    /// Checks if `signature` is valid for `message` or not.\n    static func verify(_ message: Message, wasSignedBy signature: SignatureType, publicKey: PublicKey<CurveType>) -> Bool\n}\n```\n\nSince both protocols above require an [`associatedtype`](https://docs.swift.org/swift-book/LanguageGuide/Generics.html) which specify which [Curve](#common-curves) and [Signature](#signatures) to use, we can use type-erased types, similar to Swift Foundation's [AnyCollection](https://developer.apple.com/documentation/swift/anycollection) or [AnyHashable](https://developer.apple.com/documentation/swift/anyhashable). We use type-erased wrappers `AnyKeyGenerator` and `AnyKeySigner` below: \n\n```swift\nlet privateKey = PrivateKey<Secp256k1>(hex: \"B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF\")!\n\nlet keyPair = AnyKeyGenerator<Secp256k1>.restoreKeyPairFrom(privateKey: privateKey)\n\nlet message = Message(hex: \"243F6A8885A308D313198A2E03707344A4093822299F31D0082EFA98EC4E6C89\")\n\nlet signature = AnyKeySigner<Schnorr<Secp256k1>>.sign(message, using: keyPair)\n\nlet expectedSignature = Signature<Secp256k1>(hex: \"2A298DACAE57395A15D0795DDBFD1DCB564DA82B0F269BC70A74F8220429BA1D1E51A22CCEC35599B8F266912281F8365FFC2D035A230434A1A64DC59F7013FD\")!\n\nif signature == expectedSignature {\n    print(\"Correct signature!\")\n}\n\nif AnyKeySigner<Schnorr<Secp256k1>>.verify(message, wasSignedBy: signature, publicKey: keyPair.publicKey) {\n     print(\"Yes, message was indeed signed by public key and prodouced that signature.\")\n}\n```\n\nThe code above takes around 0.5 seconds to execute (using `Release` optimization flags), which I'm working on optimizing.\n\nThe privatekey, signature, and message hex strings above are *\"Test Vector 2\"* from the [Bitcoin BIP-Schnorr wiki](https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki#test-vectors).\n\n### Message\nAs you can see in the code example above, the signer (e.g. `AnyKeySigner<Schnorr<Secp256k1>>`) has a method for signing `func sign(_ message: Message, using...` a `Message`. Which is a container for any data you wanna sign. You should only be signing hashed data. [`Message`](https://github.com/Sajjon/EllipticCurveKit/blob/master/Source/EllipticCurve/Signing/Message.swift) contains four initializers, two for unhashed data (resulting in the data being hashed by the provided `Hasher` (shadowing [Swift's `Hasher`](https://developer.apple.com/documentation/swift/hasher))). Or if you know that you have already hashed the data, you can either pass a hashed hex string representation or the hashed data (to make sure you know what you are doing you are still required to provide info about which `Hasher` has been used to hash the data. Probably `DefaultHasher.sha256`).\n\n# Alternatives\nThere are many - production like alternatives to this Swift SDK. The goal of this library is to be rid of dependencies to C (and other programming languages) code. While there is alternative to this Swift SDK that is written in pure swift, it is too slow (read #pure-swift).\n\n## Bitcoin C Bindings\nThe [Bitcoin Core's secp256k1 library](https://github.com/bitcoin-core/secp256k1) developed in C seems to be the industry standard library for Elliptic Curve Cryptography. It is proven and robust and has many developers, why many projects in other programming languages just provide and a wrapper around it. Here is a short list of Bitcoin secp256k1 C library wrappers:\n\n> ### Other languages\n> [Go](https://github.com/toxeus/go-secp256k1), [Javascript](https://github.com/cryptocoinjs/secp256k1-node), [PHP](https://github.com/Bit-Wasp/secp256k1-php), [Python Binding](https://github.com/petertodd/python-bitcoinlib), [Ruby](https://github.com/lian/bitcoin-ruby), [Rust](https://github.com/rust-bitcoin/rust-bitcoinconsensus), [Scala](https://github.com/bitcoin-s/bitcoin-s-core)   \n\n> ### Bitcoin C Bindings (Swift)\n> There are some bindings to bitcoin-core/secp256k1 in Swift too. The most promising seems to be [kishikawakatsumi/BitcoinKit](https://github.com/kishikawakatsumi/BitcoinKit) (here are some others [Boilertalk/secp256k1.swift](https://github.com/Boilertalk/secp256k1.swift), [noxproject/ASKSecp256k1](https://github.com/noxproject/ASKSecp256k1), [pebble8888/secp256k1swift](https://github.com/pebble8888/secp256k1swift) and [skywinder/ios-secp256k1](https://github.com/skywinder/ios-secp256k1). \n\n> The SDK *kishikawakatsumi/BitcoinKit* stands out since it provides additional Swift layers to *bitcoin-core/secp256k1*. For production purposes, I recommend looking at [kishikawakatsumi/BitcoinKit](https://github.com/kishikawakatsumi/BitcoinKit).\n\n## Pure Swift\nThe only Pure Swift Elliptic Curve cryptography SDK I have found so far is [hyugit/EllipticCurve](https://github.com/hyugit/EllipticCurve). The code is very Swifty and nice indeed, great work by [Huang Yu aka hyugit](https://github.com/hyugit)! However, the code runs too slow. Taking over 10 minutes for Key generation. While this SDK takes around 0.1 seconds (using `Release` optimization flags).\n\n# Status\n\nThis SDK is in a proof-of-concept stage, but most features are supported, the code is Swifty and fast, but not yet safe to use. I'm working on optimizing the performance first, then making it safe to use.\n\n## Status of goal\n- [x] \"Swifty\"   \n- [x] Fast (fastest pure Swift ECC SDK, but 250x slower than Bitcoin C SDK)\n- [ ] Safe  \n\n\n# Dependencies\nThis SDK should never require any bridge to some C library (OpenSSL or bitcoin core for example) or even Objective-C. This SDK should be \"Swifty\" through and through. \n\n## Big Numbers\nElliptic Curve Cryptography requires big numbers (256 bits and more), but natively we only have support for 64 bits (on 64-bit platforms) using [`UInt64`](https://developer.apple.com/documentation/swift/uint64). I started on developing [my own BigInt code, which I eventually throw away](https://github.com/Sajjon/EllipticCurveKit/commit/b447188a4dd303b14eb8c483bb6fde6c351c815c) since Apple Developer [Karoy Lorentey a.k.a. *\"lorentey\"*](https://github.com/lorentey) already created BigInt SDK [attaswift/BigInt](https://github.com/attaswift/BigInt) which works beautifully. I am also keeping an eye on a [BigInt implementation from Apple, which is in prototype stage](https://github.com/apple/swift/blob/master/test/Prototypes/BigInt.swift), might switch over to it if ever officially released.\n\nI have also evalutated [hyugit/UInt256](https://github.com/hyugit/UInt256) which conforms to Swifts [FixedWidthInteger protocol](https://developer.apple.com/documentation/swift/fixedwidthinteger), but that won't scale well since we might need 512 and 1024 bit large numbers. I also suspect that arithemtic operations in [attaswift/BigInt](https://github.com/attaswift/BigInt) are faster than [hyugit/UInt256](https://github.com/hyugit/UInt256) (needs verification). There are also *discontinued* [CryptoCoinSwift/UInt256](https://github.com/CryptoCoinSwift/UInt256) which seems inferior to hyugit/UInt256. \n\n### Apple Accelerate vBignum\n[Apple's library Accelerate](https://developer.apple.com/documentation/accelerate) seems to offer BigNumbers but in a very unswifty way using `UnsafePointer`s here is addition of [vbignum's vU256](https://developer.apple.com/documentation/accelerate/veclib/vbignum):\n```swift\nfunc vU256Add(_ a: UnsafePointer<vU256>, \n            _ b: UnsafePointer<vU256>, \n            _ result: UnsafeMutablePointer<vU256>)\n```\n\nHowever, I should probably investigate it further and measure performance. Perhaps a small struct wrapping it and decorating it with a Swifty API would give greater performance than attaswift/BigInt.\n\n### Hash functions\nI use the SHA-256 hashing functions provided by [krzyzanowskim/CryptoSwift](https://github.com/krzyzanowskim/CryptoSwift).\n\n# Key inspiration\nI have used lots of open source projects as inspiration. Bitcoin Improvement Proposal Wiki [bip-schnorr](https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki) by the bitcoin core developer [Pieter Wuille a.k.a. *\"Sipa\"*](https://github.com/sipa) has been a priceless inspiration for Schnorr Signature.\n\n[Sylvestre Blanc a.k.a. *\"HurlSly\"*](https://github.com/HurlSly)'s [Python Code](https://github.com/HurlSly/BitcoinECCPython/blob/master/BitcoinECC.py) has also been very helpful.\n\n# Roadmap\n## Signatures\n- [x] ECDSA  \n- [x] Schnorr\n- [ ] ed25519 (EdDSA)  \n\n## Key Formats\n### Private Key\n- [x] Raw \n- [x] WIF Uncompressed\n- [x] WIF Compressed\n\n### Public Key\n- [x] Uncompressed\n- [x] Compressed\n\n## Public Addresses\n- [x] Bitcoin (mainnet + testnet)\n- [x] Zilliqa (testnet)\n\n## Common Curves\n\nIt is plan to support most of the common curves listed by running CLI command `openssl ecparam -list_curves`, but these four are the ones I will be starting with:\n\n- [x] secp256k1 (Bitcoin, Ethereum, Zilliqa, Radix)\n- [x] secp256r1 (NEO)\n- [ ] X25519 - [Curve25519 used for ECDH](https://en.wikipedia.org/wiki/Curve25519) (Nano, Stellar, Cardano)\n\n# Donate\nThis SDK has been developed by the single author Alexander Cyon in his free time. If you find it useful, please consider donating.\n\n**Any donation would be much appreciated**:\n\n- ZIL: zil108t2jdgse760d88qjqmffhe9uy0nk4wvzx404t\n- BTC: 3GarsdAzLpEYbhkryYz1WiZxhtTLLaNJwo\n- ETH: 0xAB8F0137295BFE37f50b581F76418518a91ab8DB\n- NEO: AbbnnCLP26ccSnLooDDcwPLDnfXbVL5skH\n"
 },
 {
  "repo": "pstadler/keybase-gpg-github",
  "language": null,
  "readme_contents": "# Set up Keybase.io, GPG & Git to sign commits on GitHub\n\nThis is a step-by-step guide on how to create a GPG key on [keybase.io](https://keybase.io), adding it to a local GPG setup and use it with Git and GitHub.\n\nAlthough this guide was written for macOS, most commands should work in other operating systems as well.\n\nThere's a [video](https://www.youtube.com/watch?v=4V-7KnhcrbY) published by [Timothy Miller](https://github.com/tjacobdesign) explaining some parts of this guide. [Discussion](https://news.ycombinator.com/item?id=12289481) on Hacker News. \n\n> **Note**: If you **don't** want to use Keybase.io, follow [this guide][1] instead.\n> For manually transferring keys to different hosts, check out this [answer on Stack Overflow][2].\n\n[1]: https://help.github.com/articles/generating-a-new-gpg-key/\n[2]: https://stackoverflow.com/a/3176373/571227\n\n## Requirements\n\n```sh\n$ brew install gpg\n$ brew install --cask keybase\n```\n\nYou should already have an account with Keybase and be signed in locally using `$ keybase login`. In case you need to set up a new device first, follow the instructions provided by the keybase command during login.\n\nMake sure your local version of Git is at least 2.0 (`$ git --version`) to automatically sign all your commits. If that's not the case, use Homebrew to install the latest Git version: `$ brew install git`.\n\n## Create a new GPG key on keybase.io\n\n```sh\n$ keybase pgp gen --multi\n# Enter your real name, which will be publicly visible in your new key: Patrick Stadler\n# Enter a public email address for your key: patrick.stadler@gmail.com\n# Enter another email address (or <enter> when done):\n# Push an encrypted copy of your new secret key to the Keybase.io server? [Y/n] Y\n# \u25b6 INFO PGP User ID: Patrick Stadler <patrick.stadler@gmail.com> [primary]\n# \u25b6 INFO Generating primary key (4096 bits)\n# \u25b6 INFO Generating encryption subkey (4096 bits)\n# \u25b6 INFO Generated new PGP key:\n# \u25b6 INFO   user: Patrick Stadler <patrick.stadler@gmail.com>\n# \u25b6 INFO   4096-bit RSA key, ID CB86A866E870EE00, created 2016-04-06\n# \u25b6 INFO Exported new key to the local GPG keychain\n```\n\n## Set up Git to sign all commits\n\n```sh\n$ gpg --list-secret-keys --keyid-format LONG\n# /Users/pstadler/.gnupg/secring.gpg\n# ----------------------------------\n# sec   4096R/E870EE00 2016-04-06 [expires: 2032-04-02]\n# uid                  Patrick Stadler <patrick.stadler@gmail.com>\n# ssb   4096R/F9E3E72E 2016-04-06\n\n$ git config --global user.signingkey E870EE00\n$ git config --global commit.gpgsign true\n```\n\n## Add public GPG key to GitHub\n\n```sh\n$ open https://github.com/settings/keys\n# Click \"New GPG key\"\n\n# We can then use `export` with the `-q` or query flag to match on our key (the first 16 characters should do..) \n$ keybase pgp export -q CB86A866E870EE00 | pbcopy # copy public key to clipboard\n# Paste key, save\n```\n\n## Import key to GPG on another host\n\n```sh\n$ keybase pgp export\n# \u25b6 WARNING Found several matches:\n# user: Patrick Stadler <patrick.stadler@gmail.com>\n# 4096-bit RSA key, ID CB86A866E870EE00, created 2016-04-06\n\n# user: keybase.io/ps <ps@keybase.io>\n# 4096-bit RSA key, ID 31DBBB1F6949DA68, created 2014-03-26\n\n$ keybase pgp export -q CB86A866E870EE00 | gpg --import\n$ keybase pgp export -q CB86A866E870EE00 --secret | gpg --allow-secret-key-import --import\n```\n\nAfter importing you probably want to locally trust your own key, otherwise you will see\n`gpg: WARNING: This key is not certified with a trusted signature!` when running `git log --show-signature`.\n\n```\n$ gpg --edit-key CB86A866E870EE00\ngpg> trust\n\nPlease decide how far you trust this user to correctly verify other users' keys\n(by looking at passports, checking fingerprints from different sources, etc.)\n\n  1 = I don't know or won't say\n  2 = I do NOT trust\n  3 = I trust marginally\n  4 = I trust fully\n  5 = I trust ultimately\n  m = back to the main menu\n\nYour decision? 5\nDo you really want to set this key to ultimate trust? (y/N) y\n\ngpg> quit\n```\n\n## Troubleshooting: `gpg failed to sign the data`\n\nIf you cannot sign a commit after running through the above steps, and have an error like:\n\n```sh\n$ git commit -m \"My commit\"\n# error: gpg failed to sign the data\n# fatal: failed to write commit object\n```\n\nYou can run `echo \"test\" | gpg --clearsign` to find the underlying issue.\n\nIf the above succeeds without error, then there is likely a configuration problem that is preventing git from selecting or using the secret key.  Confirm that your gitconfig `user.email` matches the secret key that you are using for signing.\n\nAnother solution is set up Git to use GPG program on Windows\n```sh\n$ git config --global user.signingkey E870EE00\n$ git config --global commit.gpgsign true\n$ git config --global gpg.program \"C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe\"\n```\n\n## Optional: Set as default GPG key\n\n```sh\n$ $EDITOR ~/.gnupg/gpg.conf\n# Add line:\ndefault-key E870EE00\n```\n\n## Optional: Fix for Git UIs\n\nIf you use a UI such as Git Tower or Github Desktop, you may need to configure git to point to the specific gpg executable:\n```sh\ngit config --global gpg.program $(which gpg)\n```\n\n## Optional: Disable TTY\nIf you have problems with making autosigned commits from IDE or other software add no-tty config\n```sh\n$ $EDITOR ~/.gnupg/gpg.conf\n# Add line:\nno-tty\n```\n\n## Optional: Setting up TTY  \nDepending on your personal setup, you might need to define the tty for gpg\nwhenever your passphrase is prompted. Otherwise, you might encounter an `Inappropriate\nioctl for device` error.\n```sh\n$ $EDITOR ~/.profile # or other file that is sourced every time\n# Paste these lines\nGPG_TTY=$(tty)\nexport GPG_TTY\n```\n\n## Optional: In case you're prompted to enter the password every time\n\n> Some people found that this works out of the box w/o following these steps.\n\n### Method 1 - gpg-agent + pinentry-mac\n\nInstall pinentry-mac:\n\n```sh\n$ brew install pinentry-mac\n```\n\nSet up the agent:\n\n```sh\n$ $EDITOR ~/.gnupg/gpg-agent.conf\n# Paste this line:\npinentry-program /usr/local/bin/pinentry-mac\n```\n\nNow `git commit -S`, it will ask your password and you can save it to macOS\nkeychain.\n\n![pinentry](img/pinentry.png)\n\n### Method 2 - GPG Suite\n\nSome people find that pinentry installed with brew does not allow the password to be saved to macOS's keychain.\n\nIf you do not see \"Save in Keychain\" after following Method 1, first uninstall the version of pinentry-mac installed with brew:\n\n```sh\n$ brew uninstall pinentry-mac\n```\n\nNow install the GPG Suite versions, available from [gpgtools.org](https://gpgtools.org/#gpgsuite), or from brew by running:\n\n```sh\n$ brew install --cask gpg-suite\n```\n\nOnce installed, open Spotlight and search for \"GPGPreferences\", or open system preferences and select \"GPGPreferences\"\n\nSelect the Default Key if it is not already selected, and ensure \"Store in OS X Keychain\" is checked:\n\n![gpg preferences](img/gpg-preferences.png)\n\nThe `gpg-agent.conf` is different from Method 1:\n\nSet up the agent:\n\n```sh\n$ $EDITOR ~/.gnupg/gpg-agent.conf\n# GPG Suite should pre-populate with something similar to the following:\ndefault-cache-ttl 600\nmax-cache-ttl 7200\n```\n"
 },
 {
  "repo": "craftzdog/react-native-aes-gcm-crypto",
  "language": "Java",
  "readme_contents": "# react-native-aes-gcm-crypto\n\nAES-GCM encryption/decryption for React Native\n\n## Requirements\n\n- iOS >= 13.0\n- Android >= 26\n\n## Installation\n\n```sh\nnpm install react-native-aes-gcm-crypto\n```\n\n## Usage\n\n```js\nimport AesGcmCrypto from 'react-native-aes-gcm-crypto';\n\nconst key = 'Yzg1MDhmNDYzZjRlMWExOGJkNTk5MmVmNzFkOGQyNzk=';\n\nAesGcmCrypto.decrypt(\n  'LzpSalRKfL47H5rUhqvA',\n  key,\n  '131348c0987c7eece60fc0bc',\n  '5baa85ff3e7eda3204744ec74b71d523',\n  false\n).then((decryptedData) => {\n  console.log(decryptedData);\n});\n\nAesGcmCrypto.encrypt('{\"name\":\"Hoge\"}', false, key).then((result) => {\n  console.log(result);\n});\n```\n\n### Encrypt data\n\n```ts\ntype EncryptedData = {\n  iv: string;\n  tag: string;\n  content: string;\n};\n\nfunction encrypt(\n  plainText: string,\n  inBinary: boolean,\n  key: string\n): Promise<EncryptedData>;\n```\n\n- **plainText**: A string data to encrypt. If `inBinary` is `true`, it should be encoded in Base64.\n- **inBinary**: `true` to encrypt binary data encoded with Base64\n- **key**: AES key in Base64\n\n### Encrypt file\n\n```ts\nfunction encryptFile(\n  inputFilePath: string,\n  outputFilePath: string,\n  key: string\n): Promise<{\n  iv: string;\n  tag: string;\n}>;\n```\n\n- **inputFilePath**: A file path to encrypt\n- **outputFilePath**: An output file path\n- **key**: AES key in Base64\n\n### Decrypt data\n\n```ts\nfunction decrypt(\n  base64Ciphertext: string,\n  key: string,\n  iv: string,\n  tag: string,\n  isBinary: boolean\n): Promise<string>;\n```\n\n- **base64Ciphertext**: A base64 data to decrypt.\n- **key**: AES key in Base64\n- **iv**: An initialization vector\n- **tag**: An auth tag\n- **isBinary**: `true` to return decrypted data in Base64\n\n### Decrypt file\n\n```ts\nfunction decrypt(\n  inputFilePath: string,\n  outputFilePath: string,\n  key: string,\n  iv: string,\n  tag: string\n): Promise<boolean>;\n```\n\n- **inputFilePath**: A file path to decrypt\n- **outputFilePath**: An output file path\n- **key**: AES key in Base64\n- **iv**: An initialization vector\n- **tag**: An auth tag\n- **isBinary**: `true` to return decrypted data in Base64\n\n## Contributing\n\nSee the [contributing guide](CONTRIBUTING.md) to learn how to contribute to the repository and the development workflow.\n\n## Author\n\nTakuya Matsuyama | [@inkdrop_app](https://twitter.com/inkdrop_app)\n\nMade for my app called [Inkdrop - A Markdown note-taking app](https://www.inkdrop.app/)\n\n## License\n\nMIT\n"
 },
 {
  "repo": "micciancio/SWIFFT",
  "language": "C",
  "readme_contents": "# SWIFFT\n## An Efficient Lattice-Based Cryptographic Hash Function\n\nThis code is open-source software distributed under the terms of the GNU General Public Licence. \nSee the file [LICENSE](LICENSE) for complete details on licensing of this software.\n\nThis repository contains the implementation of SWIFFT, \nan efficient lattice-based cryptographic hash function, described in the paper \n[**\"SWIFFT: a modest proposal for FFT hashing\"**](http://dx.doi.org/10.1007/978-3-540-71039-4_4) \n(*V. Lyubashevsky, D. Micciancio, C. Peikert, A. Rosen.* Fast Software Encryption -- FSE 2008, LNCS 5086, pp. 54-72. [[pdf](http://cseweb.ucsd.edu/~daniele/papers/SWIFFT.pdf)]).\nThis is essentially the original code, used to run the tests in that paper, and written in 2007.\nThe implementation is optimized for the computers of that time, \nIntel 32-bit CPUs with SSE instruction set. \nThe code should compile and run on recent Intel CPUs, and still achieve reasonably good speed, \nbut it does not take advantage of the more recent 64-bit architecture and AVX/AVX2 instruction set. \n\nCode is provided primarily for reproducibility and testing purposes, and it is not meant to be \na ready-to-use solution for any application. In particular, it only implements the core \nSWIFFT *compression function* for fixed-size messages. (See below.)\nA full featured hash function for arbitrary length messages can be easily obtained \nusing standard padding and chaining techniques, but it is not included in this code base.\n\n## The SWIFFT compression function \n\nFor a detailed description and security analysis, see the paper. \nThese are just implementation specific comments for people interested in testing the function.\n\nSWIFFT is a keyed hash function: it takes as input a key **K** and message **M**, and it produces \na digest **H**, where\n\n - The key **K** is a vector of 1024 integers, each in the range *[0,256]*, \n   but it can be chosen by picking each integer (uniformly at random)\n   in the range *[0,255]* so that it fits a byte.\n - The message **M** is a vector of 1024 bits (or, equivalently, 128 bytes)\n - The digest **H** is a vector of 64 integers in the range *[0,256]*\n\nNotice how each integer in the digest can take values as large as *256*, which do not fit \na single byte. (This is necessary because SWIFFT is based on arithmetic modulo the prime\n*P=257*.) \nFor simplicity, the compression function, as implemented in this code base, encodes the \ndigest **H** as a sequence \nof 64 bytes (storing the first 8 bits of each number) followed by 64 additional bits, for a total \nof 576 bit (or 64+8=72 bytes). \n(The last 64 bits are typically 0, and more efficient encoding are possible. \nE.g., by regarding **H** as a single 64-digit number in base 257, it could be represented using \njust 513 bits, rather than 576.)\n\nThe compression function is implemented in less than 100 lines of C code, \nin the file [swifft.c](swifft.c) (plus some additional declarations and setup functions in \n[swifft.h](swifft.h) and [setup.c](setup.c).)\nThe entry point of the compression function is `SwiFFT(key, hash, data)`,\nin the file [swifft.c](swifft.c).\nIt takes a **K**=*key*, and a message **M**=*(hash,data)* conveniently divided into \na 72-byte *hash* and 56-byte *data* block (for a total of 128 bytes), and \nupdates the 72-byte *hash* with the output of the compression function.\n\n## Example/Running\n\nFor an example of how to use `SwiFFT` see the file [test.c](test.c). \nThe test program can be compiled running `make`, which generates an executable `test`.\nRunning `test` with no arguments outputs a brief usage message.\nYou can try the test program by running \n\n```\n./test keyfile\n```\n\nwhich reads a key from the first 128 bytes of keyfile, a 56-byte block of data from standard input,\nand outputs the result of the compression function with initialization vector `IV=0`.\nCalling \n\n```\n./test keyfile n <input\n```\n\nreads 56-bytes from input, and repeatedly applies the compression function \n(always to the same block of data) in chaining mode *n* times, and can be used for \ntiming measurements. You can run the tests on any `keyfile` and `input` containing at least \n128 and 56 bytes. E.g., \n\n```\n> make  \ngcc  -O3 -msse -funroll-loops -c swifft.c  \ngcc  -c setup.c  \ngcc  swifft.o  setup.o test.c -o test  \n> time ./test test 1000000 <test  \nExecuting 1000000 times.  \n68d6 2a4b 2afc 6abc  \n9291 b442 d46a c87e  \n6c5d a603 c6ac a12c  \nc934 cc8c c800 7d85  \n10da cc0f 113b 97c2  \n1064 3fb8 10f1 8e8c  \nbc24 bb00 39a9 2e79  \nbd54 7ba5 9879 cfce  \n0000 0000 0000 0000  \n   \nreal\t0m0.321s  \nuser\t0m0.320s  \nsys\t0m0.000s  \n```\n\n\n\n\n\n"
 },
 {
  "repo": "ph4r05/Whitebox-crypto-AES",
  "language": "C++",
  "readme_contents": "Whitebox-crypto-AES\n===================\n[![Build Status](https://travis-ci.org/ph4r05/Whitebox-crypto-AES.svg?branch=master)](https://travis-ci.org/ph4r05/Whitebox-crypto-AES)\n[![Coverity Status](https://scan.coverity.com/projects/7179/badge.svg)](https://scan.coverity.com/projects/ph4r05-whitebox-crypto-aes)\n\nWhitebox cryptography AES implementation.\n\nThis repository contains a C++ implementation of:\n * Complete whitebox [AES]-128 scheme introduced by [Chow] et al [2]. Implements/uses input/output encodings, mixing bijections, external encodings.\n * Complete whitebox [AES]-128 scheme introduced by [Karroumi] [3] which uses an idea of dual AES ciphers (using a different generating polynomial for AES cipher) for creating a stronger AES whitebox scheme.\n * Implementation of the [BGE] Attack on [Chow]'s AES whitebox implementation found by [Billet] et al [4]. Attack uses whitebox AES generator to create a random instance of whitebox AES scheme with secret key K embedded in the implementation. The attack then recovers the secret key K from the tables representing the given instance. This BGE attack also breaks scheme proposed by [Karroumi] what I found out while working on my [diploma] thesis.\n \nThe implementation contains:\n * Whitebox AES code generator in both [Chow] and [Karroumi] schemes. It generates a randomized whitebox AES instance with embedded encryption key K which can be used either for encryption or for decryption. Instance can be serialized to a file. \n * Code for running generated whitebox AES instance for encryption/decryption.\n * BGE key recovery attack on a generated whitebox AES instance.\n * Unit tests.\n \nYou also might be interested in my [Java] implementation of the Chow's whitebox AES scheme.\nIn my [diploma] thesis I suggest modifications and improvements for a new whitebox-suited symmetric-key encryption algorithm based on AES.\n\n[2]: Stanley Chow, Phil Eisen, Harold Johnson, and Paul C. Van Oorschot. White-box cryptography and an AES implementation. In Proceedings of the Ninth Workshop on Selected Areas in Cryptography (SAC 2002, pages 250\u2013270. Springer-Verlag, 2002.\n\n[3]: Mohamed Karroumi. Protecting white-box AES with dual ciphers. In Proceedings of the 13th international conference on Information security and cryptology, ICISC\u201910, pages 278\u2013291, Berlin, Heidelberg, 2011. Springer-Verlag. ISBN 978-3-642-24208-3.\n\n[4]: Olivier Billet, Henri Gilbert, and Charaf Ech-Chatbi. Cryptanalysis of a white box AES implementation. In Proceedings of the 11th international conference on Selected Areas in Cryptography, SAC\u201904, pages 227\u2013240, Berlin, Heidelberg, 2005. Springer-Verlag. ISBN 3-540-24327-5, 978-3-540-24327-4. doi: 10.1007/978-3-540-30564-4_16.\n\nDependencies\n=======\n* C++11 and higher\n* CMake 2.8+\n* [NTL] 6.0.0+\n* boost_iostreams 1.55+\n* boost_serialization 1.55+\n* boost_program_options 1.55+\n* boost_random 1.55+\n\nDescription:\n* [NTL] math library is used for computation in finite fields & algebra. ~~NTL is licensed under GPL thus this implementation also has to be GPL.~~\n* Boost library for serialization of the scheme instance & program input parameters parsing. Version 1.55\n\n\nBuilding\n=======\n* Travis is configured for the project so in case of any problems please refer to the travis configuration file.\n* Install dependencies. For installing NTL you can use provided scripts `install-ntl.sh` or `install-ntl-cached.sh`\n* Use cmake to build\n```bash\nmkdir build-debug\ncd build-debug\ncmake -DCMAKE_BUILD_TYPE=Debug ..\nmake\n```\n\nUsage\n=====\n\nThe project contains basic Whitebox AES cipher core - for encrypting / decrypting one single AES block.\n\nIn order to demonstrate the basic usage there has been implemented:\n - [PKCS5] padding, so plaintext input does not have to be byte aligned to the length of the AES block. Implemented in `EncTools`.\n - [ECB] encryption mode\n - [CBC] encryption mode\n\nThe implementation of the PKCS5, ECB, CBC is for demonstration/academic purposes as it may leak information via\nside channels (i.e., timing, memory access patterns)\n\nNote the Padding can be used only if External encodings are not used.\nOtherwise the input / output has to be by definition padded to the block size\nso the ExtIO encoding can be removed before operation.\n\nThe project contains demo BGE attack in the target `./testing`.\n\nThere are also some tests implemented using [GTest] in the target `./gtesting`.\n\nThe target `./main` contains basic runnable main with few options - allows to use\nthe WBAES from the command line.\n\nUsage:\n```\nWBAES table implementation usage:\n  -h [ --help ]                   Display this help message\n  --bench-gen [=arg(=0)] (=0)     Benchmarking rounds for AES gen\n  --bench-bge [=arg(=0)] (=0)     Benchmarking rounds for AES BGE attack\n  -e [ --extEnc ] [=arg(=0)] (=0) Use external encoding?\n  -o [ --out-file ] arg           Output file to write encrypted data\n  --input-files arg               Input files\n  --create-table arg              Create encryption/decryption tables\n  --create-random [=arg(=0)] (=0) Create tables with random key\n  --use-key arg                   Create encryption/decryption with given\n                                  hex-coded key\n  --use-iv arg                    Use CBC with given hex-coded IV\n  --load-tables arg               Loads encryption/decryption tables from given\n                                  file\n  --decrypt [=arg(=0)] (=0)       Should perform encryption or decryption\n  --pkcs5 [=arg(=0)] (=0)         Enables PKCS5 padding\n  --cbc [=arg(=0)] (=0)           Uses CBC mode\n  -v [ --version ]                Display the version number\n```\n\nExample:\n\n```\n# Generate new WBAES table, disable extIO\n./main --create-table /tmp/aes-table --extEnc=0\n\n# Load existing WBAES tables and encrypt them with CBC and PKCS5\n./main --load-tables /tmp/aes-table --extEnc=0 --input-files /tmp/aes-table --pkcs5=1 --cbc=1 -o /tmp/aes-table.enc\n\n# Load existing WBAES tables and decrypt previously encrypted file\n./main --load-tables /tmp/aes-table --extEnc=0 --input-files /tmp/aes-table.enc --pkcs5=1 --cbc=1 -o /tmp/aes-table.dec --decrypt=1\n\n# Compare original and dec(enc(original))\ndiff /tmp/aes-table /tmp/aes-table.dec\n```\n\n\nLicense\n=======\nCode is published under license: GPLv3 [http://www.gnu.org/licenses/gpl-3.0.html]. This license holds from the first commit.\nI also require to include my copyright header in files if you decide to use my source codes.\n\nUsing GPL in short means that if you incorporate this source code to your application, it has to be also published under GPLv3. Also if you make any improvement to my source code and you will use improved version you are obliged to publish improved version as well.\n\nIf this license does not fit to you, drop me an email, I am sure we can negotiate somehow.\n\n** UPDATE 31.01.2017 **\n<br/>\n[NTL] is now licensed under LGPL v2.1+ so I can relicense the code to LGPL v2.1+ by a written permission.\nSo the code is by default GPLv3 licensed, but if you drop me an email I will give you LGPL v2.1+ license.\nI am also free to talk about other licensing options.\n\nDonating\n========\n\nThis implementation is an open source. If you like the code or you do find it useful please feel free to donate to the\nauthor whatever amount you would like by clicking on the paypal button below.\nAnd if you don't feel like donating, that's OK too.\n\n[![](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=XK6RLD768RGGJ&lc=SK&item_name=ph4r05&item_number=Whitebox%2dcrypto%2dAES%2egit&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted)\n\nBitcoin:\n\n![1DBr1tfuqv6xphg5rzNTPxqiUbqbRHrM2E](https://deadcode.me/btc-whitebox.png)<br />1DBr1tfuqv6xphg5rzNTPxqiUbqbRHrM2E\n\nMonero:\n```\n8BDHew2uRt5N1qgBGe88ZcSwM4wmQfWuAVDWQwJebNg9VYHxbRBgARPd39Ftx61Ss3WmkDCu8FDvR9wJ27aoqBVT1PF5kmE\n```\n\nContributing\n=======\nIf you want to improve my code by extending it to AES-256 or implementing other whitebox AES schemes do not hesitate to submit a pull request. Please also consider it if you find some bug in the code. I am not actively developing this code at the moment but I will review the pull requests. Thanks!\n\n[NTL]: http://www.shoup.net/ntl/\n[PKCS5]: https://tools.ietf.org/html/rfc2898\n[ECB]: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_Codebook_(ECB)\n[CBC]: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_(CBC)\n[GTest]: https://github.com/google/googletest/blob/master/googletest/docs/Primer.md\n[AES]: http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf\n[Chow]: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.59.7710\n[Karroumi]: http://dl.acm.org/citation.cfm?id=2041060\n[Billet]: http://bo.blackowl.org/s/papers/waes.pdf\n[diploma]: http://is.muni.cz/th/325219/fi_m/thesis.pdf\n[Java]: https://github.com/ph4r05/Whitebox-crypto-AES-java\n\n\n"
 },
 {
  "repo": "lightningnetwork/lnd",
  "language": "Go",
  "readme_contents": "## Lightning Network Daemon\n\n[![Build Status](https://img.shields.io/travis/lightningnetwork/lnd.svg)](https://travis-ci.org/lightningnetwork/lnd)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/lightningnetwork/lnd/blob/master/LICENSE)\n[![Irc](https://img.shields.io/badge/chat-on%20libera-brightgreen.svg)](https://web.libera.chat/#lnd)\n[![Godoc](https://godoc.org/github.com/lightningnetwork/lnd?status.svg)](https://godoc.org/github.com/lightningnetwork/lnd)\n\n<img src=\"logo.png\">\n\nThe Lightning Network Daemon (`lnd`) - is a complete implementation of a\n[Lightning Network](https://lightning.network) node.  `lnd` has several pluggable back-end\nchain services including [`btcd`](https://github.com/btcsuite/btcd) (a\nfull-node), [`bitcoind`](https://github.com/bitcoin/bitcoin), and\n[`neutrino`](https://github.com/lightninglabs/neutrino) (a new experimental light client). The project's codebase uses the\n[btcsuite](https://github.com/btcsuite/) set of Bitcoin libraries, and also\nexports a large set of isolated re-usable Lightning Network related libraries\nwithin it.  In the current state `lnd` is capable of:\n* Creating channels.\n* Closing channels.\n* Completely managing all channel states (including the exceptional ones!).\n* Maintaining a fully authenticated+validated channel graph.\n* Performing path finding within the network, passively forwarding incoming payments.\n* Sending outgoing [onion-encrypted payments](https://github.com/lightningnetwork/lightning-onion)\nthrough the network.\n* Updating advertised fee schedules.\n* Automatic channel management ([`autopilot`](https://github.com/lightningnetwork/lnd/tree/master/autopilot)).\n\n## Lightning Network Specification Compliance\n`lnd` _fully_ conforms to the [Lightning Network specification\n(BOLTs)](https://github.com/lightningnetwork/lightning-rfc). BOLT stands for:\nBasis of Lightning Technology. The specifications are currently being drafted\nby several groups of implementers based around the world including the\ndevelopers of `lnd`. The set of specification documents as well as our\nimplementation of the specification are still a work-in-progress. With that\nsaid, the current status of `lnd`'s BOLT compliance is:\n\n  - [X] BOLT 1: Base Protocol\n  - [X] BOLT 2: Peer Protocol for Channel Management\n  - [X] BOLT 3: Bitcoin Transaction and Script Formats\n  - [X] BOLT 4: Onion Routing Protocol\n  - [X] BOLT 5: Recommendations for On-chain Transaction Handling\n  - [X] BOLT 7: P2P Node and Channel Discovery\n  - [X] BOLT 8: Encrypted and Authenticated Transport\n  - [X] BOLT 9: Assigned Feature Flags\n  - [X] BOLT 10: DNS Bootstrap and Assisted Node Location\n  - [X] BOLT 11: Invoice Protocol for Lightning Payments\n\n## Developer Resources\n\nThe daemon has been designed to be as developer friendly as possible in order\nto facilitate application development on top of `lnd`. Two primary RPC\ninterfaces are exported: an HTTP REST API, and a [gRPC](https://grpc.io/)\nservice. The exported API's are not yet stable, so be warned: they may change\ndrastically in the near future.\n\nAn automatically generated set of documentation for the RPC APIs can be found\nat [api.lightning.community](https://api.lightning.community). A set of developer\nresources including guides, articles, example applications and community resources can be found at:\n[docs.lightning.engineering](https://docs.lightning.engineering).\n\nFinally, we also have an active\n[Slack](https://lightning.engineering/slack.html) where protocol developers, application developers, testers and users gather to\ndiscuss various aspects of `lnd` and also Lightning in general.\n\n## Installation\n  In order to build from source, please see [the installation\n  instructions](docs/INSTALL.md).\n\n## Docker\n  To run lnd from Docker, please see the main [Docker instructions](docs/DOCKER.md)\n\n## IRC\n  * irc.libera.chat\n  * channel #lnd\n  * [webchat](https://web.libera.chat/#lnd)\n\n## Safety\n\nWhen operating a mainnet `lnd` node, please refer to our [operational safety\nguidelines](docs/safety.md). It is important to note that `lnd` is still\n**beta** software and that ignoring these operational guidelines can lead to\nloss of funds.\n\n## Security\n\nThe developers of `lnd` take security _very_ seriously. The disclosure of\nsecurity vulnerabilities helps us secure the health of `lnd`, privacy of our\nusers, and also the health of the Lightning Network as a whole.  If you find\nany issues regarding security or privacy, please disclose the information\nresponsibly by sending an email to security at lightning dot engineering,\npreferably encrypted using our designated PGP key\n(`91FE464CD75101DA6B6BAB60555C6465E5BCB3AF`) which can be found\n[here](https://gist.githubusercontent.com/Roasbeef/6fb5b52886183239e4aa558f83d085d3/raw/5fa96010af201628bcfa61e9309d9b13d23d220f/security@lightning.engineering).\n\n## Further reading\n* [Step-by-step send payment guide with docker](https://github.com/lightningnetwork/lnd/tree/master/docker)\n* [Contribution guide](https://github.com/lightningnetwork/lnd/blob/master/docs/code_contribution_guidelines.md)\n"
 },
 {
  "repo": "BDREN/PracticalCrypto",
  "language": "Java",
  "readme_contents": "# PracticalCrypto\nLecture Slides and Sample Source Codes of Practical Cryptography Class will be published in this repositry.<br>\nVideo: https://dle.asiaconnect.bdren.net.bd/dle-course-3-practical-cryptography/\n"
 },
 {
  "repo": "PKISolutions/pkix.net",
  "language": "C#",
  "readme_contents": "# PKI Extensions .NET library\n\nThis project is a framework library that provides extended classes to standard .NET Framework BCL.\n\nIn addition, the project contains several namespaces to support and manage Microsoft Active Directory Certificate Services (ADCS) and related components.\nIn order to utilize the full functionality, the library requires reference to this project: https://github.com/Crypt32/Asn1DerParser.NET\n\nAPI set online documentation is here: https://www.pkisolutions.com/apidocs/pkix.net\n"
 },
 {
  "repo": "oalieno/Crypto-Course",
  "language": "Python",
  "readme_contents": "# Crypto Course\n\nAn open source practical cryptography course for CTF player.\n\nCurrently only have 5 sections. More coming...\n\n1. [Block Cipher Mode](/Block-Cipher-Mode)\n2. [RSA](/RSA)\n3. [LFSR](/LFSR)\n4. [HASH](/HASH)\n5. [Blockchain](/Blockchain)\n\n## Requirements\n\nYou may need the following packages.\n\n* [pycryptodome](https://github.com/Legrandin/pycryptodome)\n* [pwntools](https://github.com/Gallopsled/pwntools)\n* [sagemath](https://www.sagemath.org/)\n\n```bash\npip install pycryptodome pwntools\nsudo apt install sagemath\n```\n"
 },
 {
  "repo": "skloisMary/Adversarial-Neural-Cryptography",
  "language": "Python",
  "readme_contents": "# Adversarial-Neural-Cryptography\n\u8bba\u6587[learning to protect communications with adversarial neural cryptography](https://arxiv.org/pdf/1610.06918.pdf)\n\u8fd9\u662f\u5bf9\u4e0a\u8ff0\u8bba\u6587\u7684\u4ee3\u7801\u5b9e\u73b0\uff0c\u81f3\u4e8e\u8bba\u6587\u5185\u5bb9\uff0c\u8bf7\u79fb\u6b65\u6211\u7684\u535a\u5ba2\u6587\u7ae0[\u5229\u7528\u751f\u6210\u5bf9\u6297\u7f51\u7edc\u4fdd\u62a4\u901a\u4fe1](https://blog.csdn.net/weixin_42111770/article/details/81702831)\n"
 },
 {
  "repo": "project-oak/tink-rust",
  "language": "Rust",
  "readme_contents": "# Tink in Rust\n\n[![Docs](https://img.shields.io/badge/docs-rust-brightgreen?style=for-the-badge)](https://project-oak.github.io/tink-rust)\n![MSRV](https://img.shields.io/badge/rustc-1.51+-yellow?style=for-the-badge)\n[![CI Status](https://img.shields.io/github/workflow/status/project-oak/tink-rust/CI?color=blue&style=for-the-badge)](https://github.com/project-oak/tink-rust/actions?query=workflow%3ACI)\n[![Interop Status](https://img.shields.io/github/workflow/status/project-oak/tink-rust/crosstest?color=orange&label=interop&style=for-the-badge)](https://github.com/project-oak/tink-rust/actions?query=workflow%3Acrosstest)\n[![codecov](https://img.shields.io/codecov/c/github/project-oak/tink-rust?style=for-the-badge)](https://codecov.io/gh/project-oak/tink-rust)\n\nThis repository holds a Rust port of Google's [Tink cryptography library](https://github.com/google/tink).\n\nThe following warnings apply to use of this repo:\n\n- This is not an official port of Tink, and is **not supported** by Google's cryptography teams.\n- **The repo is under construction** and so details of the API and the code may change without warning.\n\nAlso, this repository does not implement cryptographic functionality itself; the underlying cryptographic operations are\ncurrently provided by the [RustCrypto](https://github.com/RustCrypto) crates &ndash; this repo focuses on making\nthose cryptographic operations available via the Tink API.\n\nThis means that **all of the security warnings** for the underlying RustCrypto crates apply to this repo too.\n\n## Disclaimer\n\nThis is not an officially supported Google product.\n\n## Usage Overview\n\nAn introduction to working with the Tink API is [provided here](docs/RUST-HOWTO.md).\n\n## Crate Structure\n\nThe `tink-core` crate holds common functionality and includes the `trait` definitions for all\n[primitives](https://github.com/google/tink/blob/v1.5.0/docs/PRIMITIVES.md), but includes\nvery little cryptographic functionality.\n\nIndividual cryptographic primitives are implemented in `tink-<primitive>` crates, which depend on:\n\n- the `tink-core` crate for common types and helpers\n- the `tink-proto` crate for protobuf-derived `struct`s\n- the RustCrypto crates to provide underlying cryptographic implementations.\n\nFor example, the `tink-aead` crate provides code that performs authenticated encryption with additional data (AEAD),\nimplementing the `Aead` trait from `tink-core`.\n\nAll of the tests for the Tink crates are integration tests (i.e. only use public APIs) and reside in a separate\n`tink-tests` crate.\n\n### Crate Features\n\nThe following [crate features](https://doc.rust-lang.org/cargo/reference/features.html) are available.\n\n- The [`tink-proto`](https://docs.rs/tink-proto) crate has a `json` feature that enables methods for serializing keysets\n  to/from JSON.  This additional functionality requires `serde` and `serde_json` as dependencies.\n- The [`tink-core`](https://docs.rs/tink-core) crate also has a `json` feature that enables methods for serializing\n  keysets to/from JSON, using `tink-proto/json` as above.\n- The `tink-core` crate also has an `insecure` feature, which enables methods that expose unencrypted key material. This\n  feature should only be enabled for testing and development.\n\n## Port Design\n\nA [separate document](docs/RUST-DESIGN.md) describes the design choices involved in the Rust port.\n"
 },
 {
  "repo": "chjj/liburkel",
  "language": "C",
  "readme_contents": "# Urkel\n\n![cmake](https://github.com/chjj/liburkel/workflows/cmake/badge.svg)\n\nAn optimized and cryptographically provable key-value store. Written in C.\n\n## Design\n\nThe urkel tree is implemented as a [base-2 merkelized radix tree][1]. It builds\non earlier research done by [Bram Cohen][2] and [Amaury S\u00e9chet][3] in order to\ncreate an alternative to [Ethereum's base-16 trie][4].\n\nNodes are stored in a series of append-only files for snapshotting and crash\nconsistency capabilities. Due to these presence of these features, Urkel has\nthe ability to expose a fully transactional database.\n\nUrkel is its _own_ database. This is in contrast to earlier authenticated data\nstructures which were typically implemented on top of an existing data store\nlike LevelDB.\n\nThe urkel tree is currently used in production for the [Handshake protocol][5].\n\n## Features\n\n- Transactions - Fully atomic and [transactional API][6].\n- Snapshots - Transactions can also behave as snapshots, pointing to a\n  historical root hash.\n- Iteration - Full tree iteration\u00b9.\n- Compact Proofs - Small proof size, with proof nodes averaging ~34 bytes in\n  size.\n- History Independence - Deterministic root hash calculation regardless of\n  insertion/removal order.\n- Crash Consistency - `kill -9`'able.\n- Cross Platform - Runs on Windows XP and up, as well as any POSIX.1-2001\n  compatible OS.\n- WASM Support - Builds with both Emscripten as well as the WASI SDK.\n\n---\n\n1. Note that range iteration is not particularly useful for our use case.\n\n## Example Usage\n\n``` c\n#include <assert.h>\n#include <stdlib.h>\n#include <string.h>\n#include <urkel.h>\n\nint main(void) {\n  unsigned char key[32];\n  unsigned char val[4] = {0xde, 0xad, 0xbe, 0xef};\n  unsigned char key_out[32];\n  unsigned char val_out[1023]; /* Max size (currently). */\n  size_t val_len;\n  urkel_t *db;\n  urkel_tx_t *tx;\n\n  /* Open database. */\n  db = urkel_open(\"/path/to/db\");\n\n  assert(db != NULL);\n\n  /* Create transaction. */\n  tx = urkel_tx_create(db, NULL);\n\n  assert(tx != NULL);\n\n  /* Hash key. */\n  urkel_hash(key, \"my key\", 6);\n\n  /* Insert record. */\n  assert(urkel_tx_insert(tx, key, val, sizeof(val)));\n\n  /* Retrieve record. */\n  assert(urkel_tx_get(tx, val_out, &val_len, key));\n  assert(val_len == sizeof(val));\n  assert(memcmp(val_out, val, val_len) == 0);\n\n  /* Commit transaction. */\n  assert(urkel_tx_commit(tx));\n\n  {\n    unsigned char root[32];\n    unsigned char *proof_raw;\n    size_t proof_len;\n    int exists;\n\n    /* Compute root. */\n    urkel_tx_root(tx, root);\n\n    /* Create proof. */\n    assert(urkel_tx_prove(tx, &proof_raw, &proof_len, key));\n\n    /* Verify proof. */\n    assert(urkel_verify(&exists, val_out, &val_len,\n                        proof_raw, proof_len, key, root));\n\n    /* Returns our value. */\n    assert(exists == 1);\n    assert(val_len == sizeof(val));\n    assert(memcmp(val_out, val, val_len) == 0);\n\n    urkel_free(proof_raw);\n  }\n\n  {\n    /* Create an iterator. */\n    urkel_iter_t *iter = urkel_iter_create(tx);\n    size_t i = 0;\n\n    assert(iter != NULL);\n\n    /* Iterate over our single record. */\n    while (urkel_iter_next(iter, key_out, val_out, &val_len)) {\n      assert(memcmp(key_out, key, 32) == 0);\n      assert(val_len == sizeof(val));\n      assert(memcmp(val_out, val, val_len) == 0);\n      i += 1;\n    }\n\n    assert(urkel_errno == URKEL_EITEREND);\n    assert(i == 1);\n\n    urkel_iter_destroy(iter);\n  }\n\n  /* Cleanup. */\n  urkel_tx_destroy(tx);\n  urkel_close(db);\n\n  return 0;\n}\n```\n\nCompile with:\n\n``` sh\n$ cc -o example example.c -lurkel\n```\n\n## CLI Usage\n\nThe default build will provide you with an `urkel` executable. This allows\nvery simple manipulation of an urkel database from the command line.\n\n### Example\n\nData manipulation:\n\n``` sh\n$ urkel create\n$ urkel root\n0000000000000000000000000000000000000000000000000000000000000000\n$ urkel insert foo 'deadbeef' -H\n$ urkel root\n1da2776eaa254ef65aeeee1f37f61c06bac2e82e221d37da21190191218f6631\n$ urkel insert bar '01020304' -H\n$ urkel root\n497b751637ff244ab969a965f8d9dc7623f18d649d012276dfb317b0e38b9bec\n$ urkel get bar -H\n01020304\n$ urkel remove bar -H\n$ urkel root\n1da2776eaa254ef65aeeee1f37f61c06bac2e82e221d37da21190191218f6631\n$ urkel remove foo -H\n$ urkel root\n0000000000000000000000000000000000000000000000000000000000000000\n```\n\nCreating and verifying a proof:\n\n``` sh\n$ urkel root\n497b751637ff244ab969a965f8d9dc7623f18d649d012276dfb317b0e38b9bec\n$ urkel prove foo -H\n03c00100800280a6386fa1781a92e3905f718d4e0ea0d757abe962eefdd52a23d2ad6e1409fd8a0400deadbeef\n$ urkel verify foo -H \\\n  '03c00100800280a6386fa1781a92e3905f718d4e0ea0d757abe962eefdd52a23d2ad6e1409fd8a0400deadbeef' \\\n  --root '497b751637ff244ab969a965f8d9dc7623f18d649d012276dfb317b0e38b9bec'\ndeadbeef\n```\n\n### Usage\n\n```\n  Usage: urkel [options] [action] [args]\n\n  Actions:\n\n    create                create a new database\n    destroy               destroy database\n    info                  print database information\n    root                  print root hash\n    get <key>             retrieve value\n    insert <key> <value>  insert value\n    remove <key>          remove value\n    list                  list all keys\n    prove <key>           create proof\n    verify <key> <proof>  verify proof (requires --root)\n\n  Options:\n\n    -p, --path <path>     path to database (default: $URKEL_PATH)\n    -r, --root <hash>     root hash to use for snapshots\n    -H, --hash            hash key with BLAKE2b-256\n    -h, --help            output usage information\n\n  Environment Variables:\n\n    URKEL_PATH            path to database (default: ./)\n```\n\n## Benchmarks\n\nBenchmarks were run on a high-end but consumer-grade laptop, containing a Intel\nCore i7-8550U 1.80GHz and an NVMe PCIe SSD.\n\n```\nBenchmarking insert...\n  Operations:  100000\n  Nanoseconds: 176354477\n  Seconds:     0.176354\n  Ops/Sec:     567039.758225\n  Sec/Op:      0.000002\nBenchmarking get (cached)...\n  Operations:  100000\n  Nanoseconds: 91769518\n  Seconds:     0.091770\n  Ops/Sec:     1089686.446866\n  Sec/Op:      0.000001\nBenchmarking commit...\n  Operations:  1\n  Nanoseconds: 121798848\n  Seconds:     0.121799\n  Ops/Sec:     8.210258\n  Sec/Op:      0.121799\nBenchmarking get (uncached)...\n  Operations:  100000\n  Nanoseconds: 300755918\n  Seconds:     0.300756\n  Ops/Sec:     332495.535466\n  Sec/Op:      0.000003\nBenchmarking remove...\n  Operations:  100000\n  Nanoseconds: 88950509\n  Seconds:     0.088951\n  Ops/Sec:     1124220.660727\n  Sec/Op:      0.000001\nBenchmarking commit...\n  Operations:  1\n  Nanoseconds: 30168275\n  Seconds:     0.030168\n  Ops/Sec:     33.147404\n  Sec/Op:      0.030168\nBenchmarking commit (nothing)...\n  Operations:  1\n  Nanoseconds: 24088\n  Seconds:     0.000024\n  Ops/Sec:     41514.447028\n  Sec/Op:      0.000024\nBenchmarking prove...\n  Operations:  100000\n  Nanoseconds: 327144781\n  Seconds:     0.327145\n  Ops/Sec:     305675.058286\n  Sec/Op:      0.000003\nBenchmarking verify...\n  Operations:  100000\n  Nanoseconds: 330230736\n  Seconds:     0.330231\n  Ops/Sec:     302818.572285\n  Sec/Op:      0.000003\n```\n\nPlatforms without memory-mapped file support will suffer in performance (this\nincludes Emscripten and WASI).\n\n## Contribution and License Agreement\n\nIf you contribute code to this project, you are implicitly allowing your code\nto be distributed under the MIT license. You are also implicitly verifying that\nall code is your original work. `</legalese>`\n\n## License\n\n- Copyright (c) 2020, Christopher Jeffrey (MIT License).\n\nSee LICENSE for more info.\n\n[1]: https://github.com/chjj/liburkel/blob/master/doc/tree.md\n[2]: https://github.com/bramcohen/MerkleSet\n[3]: https://www.deadalnix.me/2016/09/24/introducing-merklix-tree-as-an-unordered-merkle-tree-on-steroid/\n[4]: https://eth.wiki/en/fundamentals/patricia-tree\n[5]: https://handshake.org\n[6]: https://github.com/chjj/liburkel/blob/master/doc/api.md\n"
 },
 {
  "repo": "tendermint/tendermint",
  "language": "Go",
  "readme_contents": "# Tendermint\n\n![banner](docs/tendermint-core-image.jpg)\n\n[Byzantine-Fault Tolerant](https://en.wikipedia.org/wiki/Byzantine_fault_tolerance)\n[State Machine Replication](https://en.wikipedia.org/wiki/State_machine_replication).\nOr [Blockchain](<https://en.wikipedia.org/wiki/Blockchain_(database)>), for short.\n\n[![version](https://img.shields.io/github/tag/tendermint/tendermint.svg)](https://github.com/tendermint/tendermint/releases/latest)\n[![API Reference](https://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667)](https://pkg.go.dev/github.com/tendermint/tendermint)\n[![Go version](https://img.shields.io/badge/go-1.16-blue.svg)](https://github.com/moovweb/gvm)\n[![Discord chat](https://img.shields.io/discord/669268347736686612.svg)](https://discord.gg/cosmosnetwork)\n[![license](https://img.shields.io/github/license/tendermint/tendermint.svg)](https://github.com/tendermint/tendermint/blob/master/LICENSE)\n[![tendermint/tendermint](https://tokei.rs/b1/github/tendermint/tendermint?category=lines)](https://github.com/tendermint/tendermint)\n[![Sourcegraph](https://sourcegraph.com/github.com/tendermint/tendermint/-/badge.svg)](https://sourcegraph.com/github.com/tendermint/tendermint?badge)\n\n| Branch | Tests                                                                                      | Coverage                                                                                                                             | Linting                                                                    |\n|--------|--------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------|\n| master | ![Tests](https://github.com/tendermint/tendermint/workflows/Tests/badge.svg?branch=master) | [![codecov](https://codecov.io/gh/tendermint/tendermint/branch/master/graph/badge.svg)](https://codecov.io/gh/tendermint/tendermint) | ![Lint](https://github.com/tendermint/tendermint/workflows/Lint/badge.svg) |\n\nTendermint Core is a Byzantine Fault Tolerant (BFT) middleware that takes a state transition machine - written in any programming language - and securely replicates it on many machines.\n\nFor protocol details, refer to the [Tendermint Specification](./spec/README.md).\n\nFor detailed analysis of the consensus protocol, including safety and liveness proofs,\nread our paper, \"[The latest gossip on BFT consensus](https://arxiv.org/abs/1807.04938)\".\n\n## Documentation\n\nComplete documentation can be found on the [website](https://docs.tendermint.com/).\n\n## Releases\n\nPlease do not depend on master as your production branch. Use [releases](https://github.com/tendermint/tendermint/releases) instead.\n\nTendermint has been in the production of private and public environments, most notably the blockchains of the Cosmos Network. we haven't released v1.0 yet since we are making breaking changes to the protocol and the APIs.\nSee below for more details about [versioning](#versioning).\n\nIn any case, if you intend to run Tendermint in production, we're happy to help. You can\ncontact us [over email](mailto:hello@interchain.io) or [join the chat](https://discord.gg/cosmosnetwork).\n\nMore on how releases are conducted can be found [here](./RELEASES.md).\n\n## Security\n\nTo report a security vulnerability, see our [bug bounty\nprogram](https://hackerone.com/cosmos).\nFor examples of the kinds of bugs we're looking for, see [our security policy](SECURITY.md).\n\nWe also maintain a dedicated mailing list for security updates. We will only ever use this mailing list\nto notify you of vulnerabilities and fixes in Tendermint Core. You can subscribe [here](http://eepurl.com/gZ5hQD).\n\n## Minimum requirements\n\n| Requirement | Notes            |\n|-------------|------------------|\n| Go version  | Go1.17 or higher |\n\n### Install\n\nSee the [install instructions](./docs/introduction/install.md).\n\n### Quick Start\n\n- [Single node](./docs/introduction/quick-start.md)\n- [Local cluster using docker-compose](./docs/tools/docker-compose.md)\n- [Remote cluster using Terraform and Ansible](./docs/tools/terraform-and-ansible.md)\n\n## Contributing\n\nPlease abide by the [Code of Conduct](CODE_OF_CONDUCT.md) in all interactions.\n\nBefore contributing to the project, please take a look at the [contributing guidelines](CONTRIBUTING.md)\nand the [style guide](STYLE_GUIDE.md). You may also find it helpful to read the\n[specifications](./spec/README.md),\nand familiarize yourself with our\n[Architectural Decision Records (ADRs)](./docs/architecture/README.md) and [Request For Comments (RFCs)](./docs/rfc/README.md).\n\n## Versioning\n\n### Semantic Versioning\n\nTendermint uses [Semantic Versioning](http://semver.org/) to determine when and how the version changes.\nAccording to SemVer, anything in the public API can change at any time before version 1.0.0\n\nTo provide some stability to users of 0.X.X versions of Tendermint, the MINOR version is used\nto signal breaking changes across Tendermint's API. This API includes all\npublicly exposed types, functions, and methods in non-internal Go packages as well as\nthe types and methods accessible via the Tendermint RPC interface.\n\nBreaking changes to these public APIs will be documented in the CHANGELOG.\n\n### Upgrades\n\nIn an effort to avoid accumulating technical debt prior to 1.0.0,\nwe do not guarantee that breaking changes (ie. bumps in the MINOR version)\nwill work with existing Tendermint blockchains. In these cases you will\nhave to start a new blockchain, or write something custom to get the old\ndata into the new chain. However, any bump in the PATCH version should be\ncompatible with existing blockchain histories.\n\n\nFor more information on upgrading, see [UPGRADING.md](./UPGRADING.md).\n\n### Supported Versions\n\nBecause we are a small core team, we only ship patch updates, including security updates,\nto the most recent minor release and the second-most recent minor release. Consequently,\nwe strongly recommend keeping Tendermint up-to-date. Upgrading instructions can be found\nin [UPGRADING.md](./UPGRADING.md).\n\n## Resources\n\n### Roadmap\n\nWe keep a public up-to-date version of our roadmap [here](./docs/roadmap/roadmap.md)\n\n### Libraries\n\n- [Cosmos SDK](http://github.com/cosmos/cosmos-sdk); A framework for building applications in Golang\n- [Tendermint in Rust](https://github.com/informalsystems/tendermint-rs)\n- [ABCI Tower](https://github.com/penumbra-zone/tower-abci)\n\n### Applications\n\n- [Cosmos Hub](https://hub.cosmos.network/)\n- [Terra](https://www.terra.money/)\n- [Celestia](https://celestia.org/)\n- [Anoma](https://anoma.network/)\n- [Vocdoni](https://docs.vocdoni.io/)\n\n### Research\n\n- [The latest gossip on BFT consensus](https://arxiv.org/abs/1807.04938)\n- [Master's Thesis on Tendermint](https://atrium.lib.uoguelph.ca/xmlui/handle/10214/9769)\n- [Original Whitepaper: \"Tendermint: Consensus Without Mining\"](https://tendermint.com/static/docs/tendermint.pdf)\n- [Tendermint Core Blog](https://medium.com/tendermint/tagged/tendermint-core)\n- [Cosmos Blog](https://blog.cosmos.network/tendermint/home)\n\n## Join us!\n\nTendermint Core is maintained by [Interchain GmbH](https://interchain.berlin).\nIf you'd like to work full-time on Tendermint Core, [we're hiring](https://interchain-gmbh.breezy.hr/)!\n\nFunding for Tendermint Core development comes primarily from the [Interchain Foundation](https://interchain.io),\na Swiss non-profit. The Tendermint trademark is owned by [Tendermint Inc.](https://tendermint.com), the for-profit entity\n that also maintains [tendermint.com](https://tendermint.com).\n"
 },
 {
  "repo": "Apress/pro-cryptography-cryptanalysis-cpp20",
  "language": "C++",
  "readme_contents": "# Apress Source Code\n\nThis repository accompanies [*Pro Cryptography and Cryptanalysis with C++20*](https://www.apress.com/9781484265857) by Marius Iulian Mihailescu and Stefania Loredana Nita (Apress, 2021).\n\n[comment]: #cover\n![Cover image](9781484265857.jpg)\n\nDownload the files as a zip using the green button, or clone the repository to your machine using Git.\n\n## Releases\n\nRelease v1.0 corresponds to the code in the published book, without corrections or updates.\n\n## Contributions\n\nSee the file Contributing.md for more information on how you can contribute to this repository."
 },
 {
  "repo": "tc39/proposal-csprng",
  "language": "JavaScript",
  "readme_contents": "<!--#region:intro-->\n# Cryptographically Secure Pseudo-Random Number Generation (CSPRNG) for ECMAScript\n\nThis proposes the addition of a user-addressable function that can be used to fill the \nportion of an `ArrayBuffer` associated with a `TypedArray` with cryptographically secure pseudo-random number values.\n\nPortions of this proposal are derived from the [Web Cryptography API](https://w3c.github.io/webcrypto/#Crypto-method-getRandomValues)\n<!--#endregion:intro-->\n\n<!--#region:status-->\n## Status\n\n**Stage:** 1  \n**Champion:** Ron Buckton (@rbuckton)  \n\n_For detailed status of this proposal see [TODO](#todo), below._  \n<!--#endregion:status-->\n\n<!--#region:authors-->\n## Authors\n\n* Ron Buckton (@rbuckton)  \n<!--#endregion:authors-->\n\n<!--#region:motivations-->\n# Motivations\n\nOne of the [key issues](https://github.com/tc39/proposal-uuid/issues/37) for https://github.com/tc39/proposal-uuid is the lack\nof a \"source of truth\" for cryptographically secure pseudo-random numbers within the ECMAScript language. While hosts such as \nbrowsers and NodeJS provide implementations of CSPRNGs (Cryptographically Secure Pseudo-Random Number Generators), the ECMAScript\nlanguage itself has no mechanism for supplying a CSPRNG that can be used by proposed APIs such as [UUID](https://github.com/tc39/proposal-uuid).\n\n### Goals\n\n* Provide a single \"source of truth\" for generating cryptographically secure pseudo-random values within the language.\n* Provide a single location for mocking the CSPRNG, vs a method on each `TypedArray` prototype.\n* If introducing a new `crypto` global namespace for cryptography-related APIs in ECMA-262, we should ensure that the Web cryptography APIs could be layered on top.\n<!--#endregion:motivations-->\n\n<!--#region:prior-art-->\n# Prior Art \n\n* Web Cryptography API: [`crypto.getRandomValues`](https://w3c.github.io/webcrypto/#Crypto-method-getRandomValues)\n* NodeJS: [`crypto.randomFillSync`](https://nodejs.org/dist/latest-v13.x/docs/api/crypto.html#crypto_crypto_randomfillsync_buffer_offset_size)\n<!--#endregion:prior-art-->\n\n<!--#region:syntax-->\n<!--\n# Syntax\n\n> TODO: Provide examples of syntax.\n\n```js\n```\n-->\n<!--#endregion:syntax-->\n\n<!--#region:semantics-->\n<!--\n# Semantics\n\n> TODO: Describe static and runtime semantics of the proposal.\n-->\n<!--#endregion:semantics-->\n\n<!--#region:examples-->\n<!--\n# Examples\n\n> TODO: Provide examples of the proposal.\n\n-->\n<!--#endregion:examples-->\n\n<!--#region:api-->\n# API\n\nWe are still investigating the API surface area for this proposal. The intended API would be a user-addressable function that when called executes the [FillRandomValues](#fillrandomvalues-view) abstract operation, below.\n\nThe Stage 0 API proposal exposed this as a static `ArrayBuffer.fillRandom` method, although we are continuing to investigate this space.\n\n# Abstract Operations\n\n## FillRandomValues (view)\n\nWhen abstract operation FillRandomValues is called with argument _view_, the following steps are taken:\n\n1. Perform ? RequireInternalSlot(_view_, \\[\\[TypedArrayName]]).\n1. Assert: _view_ has the \\[\\[ViewedArrayBuffer]], \\[\\[ByteLength]], and \\[\\[ByteOffset\\]\\] internal slots.\n1. If _view_.\\[\\[TypedArrayName]] is not one of `\"Int8Array\"`, `\"Uint8Array\"`, `\"Uint8ClampedArray\"`, `\"Int16Array\"`, `\"Uint16Array\"`, `\"Int32Array\"`, `\"Uint32Array\"`, `\"BigInt64Array\"`, or `\"BigUint64Array\"`, throw a **TypeError** exception.\n1. Let _buffer_ be _view_.\\[\\[ViewedArrayBuffer]].\n1. If ! IsDetachedBuffer(_buffer_) is **true**, throw a **TypeError** exception.\n1. Let _byteLength_ be _view_.\\[\\[ByteLength]].\n1. If _byteLength_ is greater than 65536, throw a **RangeError** exception.\n1. Let _byteOffset_ be _view_.\\[\\[ByteOffset]].\n1. Let _byteEndOffset_ be _byteOffset_ + _byteLength_.\n1. Overwrite the elements of _buffer_ from index _byteOffset_ (inclusive) through index _byteEndOffset_ (exclusive) with cryptographically secure random values.\n1. Return _view_.\n\n> **Note**  \n> Implementations should generate cryptographically secure random values using well-established cryptographic pseudo-random number generators seeded with high-quality entropy, such as from an operating-system entropy source (e.g., \"/dev/urandom\"). This specification provides no lower-bound on the information theoretic entropy present in cryptographically secure random values, but implementations should make a best effort to provide as much entropy as practicable.\n\n> **Note**  \n> This interface defines a synchronous method for obtaining cryptographically secure random values. While some devices and implementations may support truly random cryptographic number generators or provide interfaces that block when there is insufficient entropy, implementations are discouraged from using these sources when implementing getRandomValues, both for performance and to avoid depleting the system of entropy. Instead, these sources should be used to seed a cryptographic pseudo-random number generator that can then return suitable values efficiently.\n<!--#endregion:api-->\n\n<!--#region:grammar-->\n<!--\n# Grammar\n\n> TODO: Provide the grammar for the proposal. Please use [grammarkdown][Grammarkdown] syntax in \n> fenced code blocks as grammarkdown is the grammar format used by ecmarkup.\n\n```grammarkdown\n```\n-->\n<!--#endregion:grammar-->\n\n<!--#region:references-->\n# References\n\n* [Web Cryptography API](https://w3c.github.io/webcrypto/#Crypto-method-getRandomValues)\n* [UUID Proposal](https://github.com/tc39/proposal-uuid)\n<!--#endregion:references-->\n\n<!--#region:prior-discussion-->\n# Prior Discussion\n\n* *Separate proposal for CSPRNG \"source of truth\"*: https://github.com/tc39/proposal-uuid/issues/37  \n<!--#endregion:prior-discussion-->\n\n<!--#region:todo-->\n# TODO\n\nThe following is a high-level list of tasks to progress through each stage of the [TC39 proposal process](https://tc39.es/process-document/):\n\n### Stage 1 Entrance Criteria\n\n* [x] Identified a \"[champion][Champion]\" who will advance the addition.  \n* [x] [Prose][Prose] outlining the problem or need and the general shape of a solution.  \n* [x] Illustrative [examples][Examples] of usage.  \n* [x] High-level [API][API].  \n\n### Stage 2 Entrance Criteria\n\n* [ ] [Initial specification text][Specification].  \n* [ ] [Transpiler support][Transpiler] (_Optional_).  \n\n### Stage 3 Entrance Criteria\n\n* [ ] [Complete specification text][Specification].  \n* [ ] Designated reviewers have [signed off][Stage3ReviewerSignOff] on the current spec text.  \n* [ ] The ECMAScript editor has [signed off][Stage3EditorSignOff] on the current spec text.  \n\n### Stage 4 Entrance Criteria\n\n* [ ] [Test262](https://github.com/tc39/test262) acceptance tests have been written for mainline usage scenarios and [merged][Test262PullRequest].  \n* [ ] Two compatible implementations which pass the acceptance tests: [\\[1\\]][Implementation1], [\\[2\\]][Implementation2].  \n* [ ] A [pull request][Ecma262PullRequest] has been sent to tc39/ecma262 with the integrated spec text.  \n* [ ] The ECMAScript editor has signed off on the [pull request][Ecma262PullRequest].  \n<!--#endregion:todo-->\n\n[Process]: https://tc39.es/process-document/\n[Proposals]: https://github.com/tc39/proposals/\n[Grammarkdown]: http://github.com/rbuckton/grammarkdown#readme\n[Champion]: #status\n[Prose]: #motivations\n[Examples]: #examples\n[API]: #api\n[Specification]: https://tc39.es/proposal-csprng/\n[Transpiler]: #todo\n[Stage3ReviewerSignOff]: #todo\n[Stage3EditorSignOff]: #todo\n[Test262PullRequest]: #todo\n[Implementation1]: #todo\n[Implementation2]: #todo\n[Ecma262PullRequest]: #todo\n"
 },
 {
  "repo": "arkworks-rs/algebra",
  "language": "Rust",
  "readme_contents": "<h1 style=\"text-align: center;\">arkworks::algebra</h1>\n\n<p style=\"text-align: center;\">\n    <img src=\"https://github.com/arkworks-rs/algebra/workflows/CI/badge.svg?branch=master\">\n    <a href=\"https://github.com/arkworks-rs/algebra/blob/master/LICENSE-APACHE\"><img src=\"https://img.shields.io/badge/license-APACHE-blue.svg\"></a>\n    <a href=\"https://github.com/arkworks-rs/algebra/blob/master/LICENSE-MIT\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n    <a href=\"https://deps.rs/repo/github/arkworks-rs/algebra\"><img src=\"https://deps.rs/repo/github/arkworks-rs/algebra/status.svg\"></a>\n</p>\n\nThe arkworks ecosystem consist of Rust libraries for designing and working with __zero knowledge succinct non-interactive arguments (zkSNARKs)__. This repository contains efficient implementations some of the key algebraic components underlying zkSNARKs: finite fields, elliptic curves, and polynomials.\n\nThis library is released under the MIT License and the Apache v2 License (see [License](#license)).\n\n**WARNING:** This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.\n\n## Directory structure\n\nThis repository contains several Rust crates:  \n\n* [`ark-ff`](ff): Provides generic implementations of various finite fields\n* [`ark-ec`](ec): Provides generic implementations for different kinds of elliptic curves, along with pairings over these\n* [`ark-poly`](poly): Implements univariate, multivariate, and multilinear polynomials, and FFTs over finite fields.\n* [`ark-serialize`](serialize): Provides efficient serialization and point compression for finite fields and elliptic curves\n\nIn addition, the [`curves`](https://github.com/arkworks-rs/curves) repository contains implementations of popular elliptic curves; see [here](https://github.com/arkworks-rs/curves/README.md) for details.\n\n## Build guide\n\nThe library compiles on the `stable` toolchain of the Rust compiler (v 1.51+). To install the latest version of Rust, first install `rustup` by following the instructions [here](https://rustup.rs/), or via your platform's package manager. Once `rustup` is installed, install the Rust toolchain by invoking:\n\n```bash\nrustup install stable\n```\n\nAfter that, use `cargo`, the standard Rust build tool, to build the libraries:\n\n```bash\ngit clone https://github.com/arkworks-rs/algebra.git\ncd algebra\ncargo build --release\n```\n\n## Tests\n\nThis library comes with comprehensive unit and integration tests for each of the provided crates. Run the tests with:\n\n```bash\ncargo test --all\n```\n\n## Benchmarks\n\nTo run the benchmarks, install the nightly Rust toolchain, via `rustup install nightly`, and then run the following command:\n\n```bash\ncargo +nightly bench\n```\n\n## Assembly backend for field arithmetic\n\nThe `ark-ff` crate contains (off-by-default) optimized assembly implementations of field arithmetic that rely on the `adcxq`, `adoxq` and `mulxq` instructions. These are available on most `x86_64` platforms (Broadwell onwards for Intel and Ryzen onwards for AMD). Using this backend can lead to a 30-70% speedup in finite field and elliptic curve arithmetic. To build with this backend enabled, run the following command:\n\n```bash\nRUSTFLAGS=\"-C target-feature=+bmi2,+adx\" cargo +nightly [test/build/bench] --features asm\n```\n\nTo enable this in the `Cargo.toml` of your own projects, enable the `asm` feature flag:\n\n```toml\nark-ff = { version = \"0.3.0\", features = [ \"asm\" ] }\n```\n\nNote that because inline assembly support in Rust is currently unstable, using this backend requires using the Nightly compiler at the moment.\n\n## License\n\nThe crates in this repository are licensed under either of the following licenses, at your discretion.\n\n* Apache License Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or [apache.org license link](http://www.apache.org/licenses/LICENSE-2.0))\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or [opensource.org license link](http://opensource.org/licenses/MIT))\n\nUnless you explicitly state otherwise, any contribution submitted for inclusion in this library by you shall be dual licensed as above (as defined in the Apache v2 License), without any additional terms or conditions.\n\n[zexe]: https://ia.cr/2018/962\n\n## Acknowledgements\n\nThis work was supported by:\na Google Faculty Award;\nthe National Science Foundation;\nthe UC Berkeley Center for Long-Term Cybersecurity;\nand donations from the Ethereum Foundation, the Interchain Foundation, and Qtum.\n\nAn earlier version of this library was developed as part of the paper *\"[ZEXE: Enabling Decentralized Private Computation][zexe]\"*.\n"
 },
 {
  "repo": "gravity-postquantum/gravity-sphincs",
  "language": "C",
  "readme_contents": "# Gravity-SPHINCS\n\nSubmission to NIST's Post-Quantum Cryptography Project, structured as per\n<http://csrc.nist.gov/groups/ST/post-quantum-crypto/submission-requirements/digital-optical-media.html>.\n\nGravity-SPHINCS is a stateless hash-based signature scheme designed by Jean-Philippe Aumasson and Guillaume Endignoux while working in Kudelski Security's research team.\n\n## Content of this submission package\n\n### Documentation\n\n* [Supporting_Documentation/submission.pdf](Supporting_Documentation/submission.pdf): Reference documentation of Gravity-SPHINCS, include specification, security analysis, performance analysis.\n\n* [Supporting_Documentation/latex_source/](Supporting_Documentation/latex_source/): LaTeX source of the reference documentation.\n\n* [Supporting_Documentation/master_thesis_endignoux_guillaume.pdf](Supporting_Documentation/master_thesis_endignoux_guillaume.pdf): Masters thesis of Guillaume Endignoux, containing detailed analyses related to Gravity-SPHINCS' security.\n\n* [Supporting_Documentation/parameters.py](Supporting_Documentation/parameters.py): Python script to compute the security of a Gravity-SPHINCS instance given a set of parameters.\n\n### Implementations\n\n* [Reference_Implementation/](Reference_Implementation): Our reference C89 implementation, without AES-NI nor SIMD instructions.\n\n* [Additional_Implementations/fast](Additional_Implementations/fast): Our fast C89 implementation, with AES-NI and SIMD instructions.\n\n* [Additional_Implementations/debug](Additional_Implementations/debug): A version of the reference implementation that prints intermediate values. This directory includes intermediate values files for each of the three Gravity-SPHINCS versions.\n\nThe directory [Optimized_Implementation/](Optimized_Implementation) contains a placeholder referring to the code under [Reference_Implementation/](Reference_Implementation).\n\nThe [Makefile](Reference_Implementation/Makefile) included in the [reference](Reference_Implementation) implementation has the following targets:\n\n```bash\n$ make\nPlease choose a target:\n        analyze          runs static analyzers\n        bench            runs speed benchmarks\n        clean            cleans up\n        format           formats the code using .clang-format rules\n```\n\nThe [Makefile](Additional_Implementations/debug/Makefile) of the [debug](Additional_Implementations/debug) implementation in addition provides `make ivs` and `make check` targets.\n\n### KATs\n\n* [KAT/](KAT): Includes NIST's s [PQCgenKAT_sign.c](KAT/PQCgenKAT_sign.c), [rng.c](rng.c), and [rnc.h], as well as a [Makefile](KAT/Makefile) that we created to generate the files PQCsignKAT_64.req and PQCsignKAT_64.rsp required by NIST, using our fast implementation in [Reference_Implementation/](Reference_Implementation).\n\n* [KAT/PQCsignKAT_all.req](KAT/PQCsignKAT_64_all.req): .req KAT file generated by running `make`, same for all Gravity-SPHINCS versions.\n\n* [KAT/PQCsignKAT_65568.rsp](KAT/PQCsignKAT_65568.rsp), [KAT/PQCsignKAT_2097184.rsp](KAT/PQCsignKAT_2097184.rsp), [KAT/PQCsignKAT_1048608.rsp](KAT/PQCsignKAT_1048608.rsp): .rsp KAT file generated by running `make`, for the Gravity-SPHINCS versions S, M, and L, respectively.\n\n## Intellectual property\n\nCopyright notices are included in the header of each source code file.\nOur original source code of Gravity-SPHINCS is copyright \u00a9 2017 Nagravision S.A., and was written by Jean-Philippe Aumasson and Guillaume Endignoux.\n\nThe fast, AES-NI-based Haraka implementation is copyright \u00a9 2016 Stefan K\u00f6lbl.\n\nOur source code is released under [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0) license.\n\nPatent situation: We haven't filed any patent related to Gravity-SPHINCS nor are we aware of existing patent or patent application covering Gravity-SPHINCS.\n\n## Acknowledgments\n\nThanks to Samuel Neves for helping optimize our code.\n"
 },
 {
  "repo": "simplito/elliptic-php",
  "language": "PHP",
  "readme_contents": "\n# Fast Elliptic Curve Cryptography in PHP\n\n\n## Information\n\nThis library is a PHP port of [elliptic](https://github.com/indutny/elliptic), a great JavaScript ECC library.\n\n* Supported curve types: Short Weierstrass, Montgomery, Edwards, Twisted Edwards.\n* Curve 'presets': `secp256k1`, `p192`, `p224`, `p256`, `p384`, `p521`, `curve25519`, `ed25519`.\n\nThis software is licensed under the MIT License.\n\nProjects which use Fast ECC PHP library: [PrivMX WebMail](https://privmx.com), ...\n\n\n## Benchmarks\n\n```\n+------------------------+----------------+--------+-----+------+\n| subject                | mode           | rstdev | its | revs |\n+------------------------+----------------+--------+-----+------+\n| elliptic#genKeyPair    | 323.682ops/s   | 2.72%  | 5   | 50   |\n| mdanter#genKeyPair     | 13.794ops/s    | 3.18%  | 5   | 50   |\n+------------------------+----------------+--------+-----+------+\n| elliptic#sign          | 307.228ops/s   | 3.82%  | 5   | 50   |\n| mdanter#sign           | 14.118ops/s    | 2.12%  | 5   | 50   |\n+------------------------+----------------+--------+-----+------+\n| elliptic#verify        | 93.913ops/s    | 5.93%  | 5   | 50   |\n| mdanter#verify         | 6.859ops/s     | 2.95%  | 5   | 50   |\n+------------------------+----------------+--------+-----+------+\n| elliptic#dh            | 135.166ops/s   | 1.67%  | 5   | 50   |\n| mdanter#dh             | 14.302ops/s    | 0.89%  | 5   | 50   |\n+------------------------+----------------+--------+-----+------+\n| elliptic#EdDSASign     | 296.756ops/s   | 1.09%  | 5   | 50   |\n+------------------------+----------------+--------+-----+------+\n| elliptic#EdDSAVerify   | 67.481ops/s    | 2.76%  | 5   | 50   |\n+------------------------+----------------+--------+-----+------+\n```\n\n\n## Installation\n\nYou can install this library via Composer:\n```\ncomposer require simplito/elliptic-php\n```\n\n\n## Implementation details\n\nECDSA is using deterministic `k` value generation as per [RFC6979][0]. Most of\nthe curve operations are performed on non-affine coordinates (either projective\nor extended), various windowing techniques are used for different cases.\n\nNOTE: `curve25519` could not be used for ECDSA, use `ed25519` instead.\n\nAll operations are performed in reduction context using [bn-php][1].\n\n\n## API\n\n### ECDSA\n\n```php\n<?php\nuse Elliptic\\EC;\n\n// Create and initialize EC context\n// (better do it once and reuse it)\n$ec = new EC('secp256k1');\n\n// Generate keys\n$key = $ec->genKeyPair();\n\n// Sign message (can be hex sequence or array)\n$msg = 'ab4c3451';\n$signature = $key->sign($msg);\n\n// Export DER encoded signature to hex string\n$derSign = $signature->toDER('hex');\n\n// Verify signature\necho \"Verified: \" . (($key->verify($msg, $derSign) == TRUE) ? \"true\" : \"false\") . \"\\n\";\n\n// CHECK WITH NO PRIVATE KEY\n\n// Public key as '04 + x + y'\n$pub = \"049a1eedae838f2f8ad94597dc4368899ecc751342b464862da80c280d841875ab4607fb6ce14100e71dd7648dd6b417c7872a6ff1ff29195dabd99f15eff023e5\";\n\n// Signature MUST be either:\n// 1) hex-string of DER-encoded signature; or\n// 2) DER-encoded signature as byte array; or\n// 3) object with two hex-string properties (r and s)\n\n// case 1\n$sig = '30450220233f8bab3f5df09e3d02f45914b0b519d2c04d13ac6964495623806a015df1cd022100c0c279c989b79885b3cc0f117643317bc59414bfb581f38e03557b8532f06603';\n\n// case 2\n$sig = [48,69,2,32,35,63,139,171,63,93,240,158,61,2,244,89,20,176,181,25,210,192,77,19,172,105,100,73,86,35,128,106,1,93,241,205,2,33,0,192,194,121,201,137,183,152,133,179,204,15,17,118,67,49,123,197,148,20,191,181,129,243,142,3,85,123,133,50,240,102,3];\n\n// case 3\n$sig = ['r' => '233f8bab3f5df09e3d02f45914b0b519d2c04d13ac6964495623806a015df1cd', 's' => 'c0c279c989b79885b3cc0f117643317bc59414bfb581f38e03557b8532f06603'];\n\n\n// Import public key\n$key = $ec->keyFromPublic($pub, 'hex');\n\n// Verify signature\necho \"Verified: \" . (($key->verify($msg, $sig) == TRUE) ? \"true\" : \"false\") . \"\\n\";\n```\n\n### EdDSA\n\n```php\n<?php\nuse Elliptic\\EdDSA;\n\n// Create and initialize EdDSA context\n// (better do it once and reuse it)\n$ec = new EdDSA('ed25519');\n\n// Create key pair from secret\n$key = $ec->keyFromSecret('61233ca4590acd'); // hex string or array of bytes\n\n// Sign message (can be hex sequence or array)\n$msg = 'ab4c3451';\n$signature = $key->sign($msg)->toHex();\n\n// Verify signature\necho \"Verified: \" . (($key->verify($msg, $signature) == TRUE) ? \"true\" : \"false\") . \"\\n\";\n\n// CHECK WITH NO PRIVATE KEY\n\n// Import public key\n$pub = '2763d01c334250d3e2dda459e5e3f949f667c6bbf0a35012c77ad40b00f0374d';\n$key = $ec->keyFromPublic($pub, 'hex');\n\n// Verify signature\n$signature = '93899915C2919181A3D244AAAC032CE78EF76D2FFC0355D4BE2C70F48202EBC5F2BB0541D236182F55B11AC6346B524150695E5DE1FEA570786E1CC1F7999404';\necho \"Verified: \" . (($key->verify($msg, $signature) == TRUE) ? \"true\" : \"false\") . \"\\n\";\n```\n\n### ECDH\n\n```php\n<?php\nuse Elliptic\\EC;\n\n$ec = new EC('curve25519');\n\n// Generate keys\n$key1 = $ec->genKeyPair();\n$key2 = $ec->genKeyPair();\n\n$shared1 = $key1->derive($key2->getPublic());\n$shared2 = $key2->derive($key1->getPublic());\n\necho \"Both shared secrets are BN instances\\n\";\necho $shared1->toString(16) . \"\\n\";\necho $shared2->toString(16) . \"\\n\";\n```\n\nNOTE: `.derive()` returns a [BN][1] instance.\n\n### Using EC directly\n\nUse case examples:\n\n#### Computing public key from private \n\n```php\nuse Elliptic\\EC;\n\n$ec = new EC('secp256k1');\n\n$priv_hex = \"751ce088f64404e5889bf7e9e5c280b200b2dc158461e96b921df39a1dbc6635\";\n$pub_hex  = \"03a319a1d10a91ada9a01ab121b81ae5f14580083a976e74945cdb014a4a52bae6\";\n\n$priv = $ec->keyFromPrivate($priv_hex);\nif ($pub_hex == $priv->getPublic(true, \"hex\")) {\n    echo \"Success\\n\";\n} else {\n    echo \"Fail\\n\";\n}\n```\n\n#### Verifying Bitcoin Message Signature\n\n```php\nuse Elliptic\\EC;\nuse StephenHill\\Base58;\n\n// see: https://en.bitcoin.it/wiki/List_of_address_prefixes\nconst MainNetId = \"\\x00\";\nconst TestNetId = \"\\x6F\";\nconst PrefixNetIdMap = [ \"1\" => MainNetId, \"m\" => TestNetId ];\n\nfunction pubKeyAddress($pubkey, $netid = MainNetId) {\n    $b58 = new Base58();\n\n    $pubenc   = hex2bin($pubkey->encode(\"hex\", true));\n    $pubhash  = $netid . hash('ripemd160', hash('sha256', $pubenc, true), true);\n    $checksum = substr( hash('sha256', hash('sha256', $pubhash, true), true), 0, 4); \n\n    return $b58->encode($pubhash . $checksum);\n}\n\nfunction verifySignature($message, $signature, $address) {\n    $signbin = base64_decode($signature);\n\n    $signarr  = [ \"r\" => bin2hex(substr($signbin, 1, 32)), \n                  \"s\" => bin2hex(substr($signbin, 33, 32)) ];\n\n    $nv = ord(substr($signbin, 0, 1)) - 27; \n    if ($nv != ($nv & 7)) \n        return false;\n\n    $recid = ($nv & 3); \n    $compressed = ($nv & 4) != 0;\n\n    $msglen = strlen($message);\n    $hash = hash('sha256', hash('sha256', \"\\x18Bitcoin Signed Message:\\n\" . chr($msglen) . $message, true));\n\n    $ec = new EC('secp256k1');\n    $pub = $ec->recoverPubKey($hash, $signarr, $recid);\n\n    $result = pubKeyAddress($pub, PrefixNetIdMap[$address[0]]);\n    return $result == $address;\n}\n\n$message   = \"I like signatures\";\n$signature = \"H/zugYITIQTk8ZFWeXkbGCV2MzvMtbh+CnKBctbM9tP2UCb1B4LdyWFQuTZKxLdIDgP8Vsvl+0AEkBlY1HoyVw8=\";\n$address   = \"mxQadqtYQXYeUsSqdMdJxZwkzxbd2tuMdc\";\n\nif (verifySignature($message, $signature, $address)) {\n    echo \"Success\\n\";\n} else {\n    echo \"Fail\\n\";\n}\n``` \n\n#### Verifying Ethereum Signature\n\n```php\nuse Elliptic\\EC;\nuse kornrunner\\Keccak;\n\nfunction pubKeyToAddress($pubkey) {\n    return \"0x\" . substr(Keccak::hash(substr(hex2bin($pubkey->encode(\"hex\")), 1), 256), 24);\n}\n\nfunction verifySignature($message, $signature, $address) {\n    $msglen = strlen($message);\n    $hash   = Keccak::hash(\"\\x19Ethereum Signed Message:\\n{$msglen}{$message}\", 256);\n    $sign   = [\"r\" => substr($signature, 2, 64), \n               \"s\" => substr($signature, 66, 64)];\n    $recid  = ord(hex2bin(substr($signature, 130, 2))) - 27; \n    if ($recid != ($recid & 1)) \n        return false;\n\n    $ec = new EC('secp256k1');\n    $pubkey = $ec->recoverPubKey($hash, $sign, $recid);\n\n    return $address == pubKeyToAddress($pubkey);\n}\n\n$address   = \"0x5a214a45585b336a776b62a3a61dbafd39f9fa2a\";\n$message   = \"I like signatures\";\n// signature returned by eth.sign(address, message)\n$signature = \"0xacb175089543ac060ed48c3e25ada5ffeed6f008da9eaca3806e4acb707b9481401409ae1f5f9f290f54f29684e7bac1d79b2964e0edcb7f083bacd5fc48882e1b\";\n\nif (verifySignature($message, $signature, $address)) {\n    echo \"Success\\n\";\n} else {\n    echo \"Fail\\n\";\n}\n\n```\n\n#### ECDH (secret based, base58 format)\n\nFor usage in ed25519 oriented platforms like e.g. BigChainDB who use base58 encoded public / private keys.\n\n```php\nuse Elliptic\\EdDSA;\nuse StephenHill\\Base58;\n\n$mnemonic = \"scheme spot photo card baby mountain device kick cradle pact join borrow\";\n$secret = hash_pbkdf2('sha512', $mnemonic, 'mnemonic', 2048);\n\n$ec =  new EdDSA('ed25519');\n$kp = $ec->keyFromSecret($secret);\n\nassert($secret == $kp->getSecret('hex'));\necho \"Secret:  \" . $kp->getSecret('hex') . PHP_EOL;\n\necho \"Private: \" . $kp->priv()->toString('hex') . PHP_EOL;\necho \"Public:  \" . $kp->getPublic('hex') .  PHP_EOL;\n\n$b58 = new Base58();\necho PHP_EOL;\necho \"B58 Private: \" . $b58->encode(hex2bin($kp->priv()->toString('hex'))) . PHP_EOL;\necho \"B58 Public:  \" . $b58->encode(hex2bin($kp->getPublic('hex'))) .  PHP_EOL;\n```\n\n#### BIP32 Public Parent Key -> Public Child Key derivation example\n\n```php\n<?php\nuse Elliptic\\EC;\nuse BN\\BN;\n\n$ec = new EC('secp256k1');\n\n// See: http://bip32.org using Derive From BIP32 Key\n// xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\n$c_par = \"873dff81c02f525623fd1fe5167eac3a55a049de3d314bb42ee227ffed37d508\";\n$K_par = \"0339a36013301597daef41fbe593a02cc513d0b55527ec2df1050e2e8ff49c85c2\";\n\n// Derived public child key \n// Derivation path Simple: m/i\n// Keypair index i: 2018\n// xpub68Gmy5EVb2Begkah8BxugKchT5SExW5p9gEHBLnEvYSuwVppt2TzD3WTjxNk14R8pmHbz3MHB9n75M2zNYgkJUCwV9pYwU9Z21Awj7Cr5U9\n$expected_c_child = \"a7470737ffde1458292e19e838534f400ad3c0f72e12f08eff79dee4fce11bed\";\n$expected_K_child = \"0376499d06f9e9df71d7ee08d13a91337fa2b92182d4afcddf917b8d9983eb4615\";\n\n$i = 2018;\n$I_key  = hex2bin($c_par);\n$I_data = hex2bin($K_par) . pack(\"N\", $i);\n$I = hash_hmac(\"sha512\", $I_data, $I_key);\n$I_L = substr($I, 0, 64);\n$I_R = substr($I, 64, 64);\n$c_i = $I_R;\n\n$K_par_point = $ec->curve->decodePoint($K_par, \"hex\");\n$I_L_point = $ec->g->mul(new BN($I_L, 16));\n$K_i = $K_par_point->add($I_L_point);\n$K_i = $K_i->encodeCompressed(\"hex\");\n\nif ($expected_c_child == $c_i && $expected_K_child == $K_i) {\n    echo \"Success!\\n\";\n} else {\n    echo \"Failure!\\n\";\n}\n```\n\n\n[0]: http://tools.ietf.org/html/rfc6979\n[1]: https://github.com/simplito/bn-php"
 },
 {
  "repo": "ashutosh1206/Crypton",
  "language": "Python",
  "readme_contents": "# Crypton\n\n\nCrypton is an educational library to **learn** and **practice** Offensive and Defensive Cryptography. It is basically a collection of explanation and implementation of all the existing vulnerabilities and attacks on various Encryption Systems (Symmetric and Asymmetric), Digital Signatures, Message Authentication Codes and Authenticated Encryption Systems. Each attack is also supplemented with example challenges from \"Capture The Flag\" contests and their respective write-ups. Individuals who are already acquainted (or are into CTFs) with this field can use Crypton as a tool to solve challenges based on a particular existing vulnerability.  \n\nThe library will be continuously updated with attack explanations and CTF challenges! Feel free to [email me](https://github.com/ashutosh1206/Crypton#author) regarding any suggestions!\n\nI have written a blog post on the timeline of development of this library: [https://masterpessimistaa.wordpress.com/2018/08/12/announcing-crypton-an-educational-library-to-learn-offensive-and-defensive-cryptography/](https://masterpessimistaa.wordpress.com/2018/08/12/announcing-crypton-an-educational-library-to-learn-offensive-and-defensive-cryptography/)  \n\n**WARNING**: The author in no way guarantees that the code is secure. The library is only meant for educational purposes and the code should not be used for implementing in real world. All the example scripts in the library are *trivial* implementations.  \n\nThere are different sections in this README:  \n* _Motivation_- What motivated me to create this library\n* _Library Structure_- Directory structure of Crypton\n* _Domain Coverage_- What all cryptosystems and attacks are covered in this library\n* _Future Plans/TODO_- Attacks/concepts that are to be included soon\n\n\n\n---\n## Motivation\nHelp CTF players and individuals interested in the field of Cryptography provide a platform for learning attacks in crypto and for experienced CTF players to practice challenges systematically divided into attacks associated with different sub-domains in crypto. Also, illustrate through various attack explanations how proper implementation of protocols is crucial.\n\n\n\n---\n## Library Structure\n\n\n\n![picture](Pictures/1.png)  \n\n\n---\n\n## Domain Coverage\n\n### 1. Block Ciphers\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [Block Cipher Basics](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher#block-cipher)- working of block ciphers, padding etc.| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/README.md)</li></ul>| <ul><li>- [ ] </li></ul>         | <ul><li>- [ ] </li></ul>   |\n| 2     | [Modes of Encryption](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Mode-of-Encryption)- different modes of operation on block ciphers: ECB, CBC, CTR | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/Mode-of-Encryption/README.md)</li></ul>| <ul><li>- [ ] </li></ul> | <ul><li>- [ ] </li></ul> |\n| 3     | [Block Size Detection](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher#block-size-detection)- detect blocksize of a block cipher encrypting data on a remote service| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher#block-size-detection)</li></ul>| <ul><li>- [ ] </li></ul> | <ul><li>- [ ] </li></ul> |\n| 4     | [Mode Detection](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher#mode-detection)- detect type of mode of encryption: independent or dependent encryption of blocks| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher#mode-detection)</li></ul>| <ul><li>- [ ] </li></ul> | <ul><li>- [ ] </li></ul> |\n| 5     | [ECB Byte at a Time](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-ECB-Byte-at-a-Time)- byte at a time decryption of a `secret` string running on a remote service encrypting `input`+`secret` in ECB mode| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/Attack-ECB-Byte-at-a-Time/README.md)</li></ul>| <ul><li>- [ ] </li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-ECB-Byte-at-a-Time/Challenges) </li></ul> |\n| 6     | [CBC IV Detection](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/CBC-IV-Detection)- detect the value of Initialisation Vector on a remote service that is encrypting our input using a block cipher in CBC mode| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/CBC-IV-Detection/README.md) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/CBC-IV-Detection/example.py) </li></ul> | <ul><li>- [ ] </li></ul> |\n| 7     | [CBC Bit Flipping Attack](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-CBC-Bit-Flipping)- exploiting cookie generation mechanism to login as admin when cookie is generated using a block cipher in CBC mode| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/Attack-CBC-Bit-Flipping/README.md) </li></ul>| <ul><li>- [ ] </li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-CBC-Bit-Flipping/Challenges) </li></ul> |\n| 8     | [CBC Byte at a Time](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-CBC-Byte-at-a-Time)- byte at a time decryption of a `secret` string running on a remote service encrypting `input`+`secret` in ECB mode| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/Attack-CBC-Byte-at-a-Time/README.md) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/Attack-CBC-Byte-at-a-Time/exploit.py) </li></ul> |  <ul><li>- [ ] </li></ul> |\n| 9     | [CBC Padding Oracle Attack](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-CBC-Padding-Oracle)- decryption of data encrypted by a vulnerable service providing encryption/decryption | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/Attack-CBC-Padding-Oracle/README.md) </li></ul>|  <ul><li>- [ ] </li></ul> |  <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-CBC-Padding-Oracle/Challenges) </li></ul> |\n| 10    | [CTR Bit Flipping](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-CTR-Bit-Flipping)- exploiting cookie generation mechanism to login as admin when cookie is generated using a block cipher in CBC mode| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Block-Cipher/Attack-CTR-Bit-Flipping/README.md) </li></ul>|  <ul><li>- [ ] </li></ul> |  <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-CTR-Bit-Flipping/Challenges) </li></ul> |\n\n\n\n### 2. RSA Encryption\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [Unpadded RSA Enc/Dec](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption)- key generation, distribution, encryption/decryption, verification of decryption formula and padding in RSA |  <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/README.md) </li></ul> | <ul><li>- [ ] </li></ul> | <ul><li>- [ ] </li></ul> |\n| 2     | [Direct Root Attack](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/README.md#padding-and-padding-schemes)- attack on unpadded RSA with low public key exponent | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/README.md#padding-and-padding-schemes) </li></ul> | <ul><li>- [ ] </li></ul> | <ul><li>- [ ] </li></ul>|\n| 3     | [Fermat's Factorisation](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Factorisation-Fermat)- technique used to factor modulus `n` when `p` and `q` values are in proximity | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Factorisation-Fermat/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Factorisation-Fermat/fermat.sage) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Factorisation-Fermat/Challenges) </li></ul> |\n| 4     | [Pollard's p-1 Factorisation](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Factorisation-Pollard's_p-1)- technique to factorise `n` when both of it's factors `p` & `q`, `p-1` and `q-1` have very small prime divisors| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Factorisation-Pollard's_p-1/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Factorisation-Pollard's_p-1/exploit.py) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Factorisation-Pollard's_p-1/Challenges) </li></ul> |\n| 5     | [Common Modulus Attack](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Common-Modulus)- decrypt ciphertext when it's corresponding plaintext is encrypted two different times with the same modulus `n` | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Common-Modulus/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Common-Modulus/exploit.py) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Common-Modulus/Challenges) </li></ul> |\n| 6     | [Common Prime Attack](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Common-Prime)- retrieve factors of moduli `n1` and `n2` when they have a common factor | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Common-Prime/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Common-Prime/Challenges) </li></ul> |\n| 7     | [Wiener's Attack](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Wiener)- get value of decryption key exponent `d` when d < N<sup>0.25</sup> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Wiener/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Wiener/exploit.py) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Wiener/Challenges) </li></ul> |\n| 8     | [Wiener's Attack Variant](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Wiener-variant)- get value of decryption key exponent `d` when `d` is a few bits greater than N<sup>0.25</sup> or d < N<sup>0.25</sup>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Wiener-variant/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Wiener-variant/exploit.py) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Wiener-variant/Challenges) </li></ul> |\n| 9     | [Coppersmith's Attack](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Coppersmith)- coppersmith's theorem, attack on stereotyped messages and factoring `n` with high bits known | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Coppersmith/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Coppersmith/exploit.py) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Coppersmith/Challenges) </li></ul> |\n| 10    | [Franklin Reiter Related Message Attack](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Franklin-Reiter)- attack to retrieve related messages encrypted using the same modulus| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Franklin-Reiter/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Franklin-Reiter/exploit.sage) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Franklin-Reiter/Challenges) </li></ul> |\n| 11    | [Hastad's Broadcast Attack- with extension](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Hastad-Broadcast)- attack to retrieve a message broadcasted among different people, encrypted using same exponent but different moduli| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Hastad-Broadcast/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Hastad-Broadcast/hastad_unpadded.py) </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Hastad-Broadcast/Challenges) </li></ul> |\n| 12    | [PKCS1-v1.5-Padded-RSA-Encryption/Decryption](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/PKCS1-v1.5-Padded-RSA)- ASN1 encoding, padded RSA encryption (needs to be fixed)| <ul><li>- [ ] </li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [ ] </li></ul> |\n| 13    | [Least Significant Bit Oracle Attack](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-LSBit-Oracle)- attack on RSA oracle leaking least significant bit value on decryption | <ul><li>-[x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-LSBit-Oracle/README.md)</li></ul>| <ul><li>-[x] [\\[link\\]](RSA-encryption/Attack-LSBit-Oracle/lsbitoracle.py) </li></ul>| <ul><li>- [ ] </li></ul> |\n| 14    | [Attack-Retrieve-Modulus](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Retrieve-Modulus)- attack on RSA oracle to extract value of modulus in case it is not public | <ul><li>-[x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Retrieve-Modulus/README.md) </li></ul>| <ul><li>-[x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Attack-Retrieve-Modulus/extractmod.py) </li></ul> | <ul><li>-[x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Retrieve-Modulus/Challenges) </li></ul> |\n| 15    | [Intro-RSA-Challenges](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Intro-Challenges)- basic challenges in RSA related to Number Theory| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/RSA-encryption/Intro-Challenges/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Intro-Challenges) </li></ul> |\n\n\n\n### 3. Message Authentication Codes (MACs)\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [Message Authentication Code](https://github.com/ashutosh1206/Crypton/tree/master/Message-Authentication-Code)- internals and security analysis of MACs| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Message-Authentication-Code/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [ ] </li></ul> |\n| 2     | [CBC MAC Forgery](https://github.com/ashutosh1206/Crypton/tree/master/Message-Authentication-Code/CBC-MAC-Forgery)- generating two message `M1` and `M2` having the same CBC-MAC authentication tag| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Message-Authentication-Code/CBC-MAC-Forgery/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Message-Authentication-Code/CBC-MAC-Forgery/Challenges) </li></ul> |\n| 3     | [Length Extension Attack on CBC-MAC](https://github.com/ashutosh1206/Crypton/tree/master/Message-Authentication-Code/Attack-Length-Extension-CBC-MAC)- generate a valid authentication tag of message M1 \\|\\| M2 (concatenation) given MAC(M1) | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Message-Authentication-Code/Attack-Length-Extension-CBC-MAC/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Message-Authentication-Code/Attack-Length-Extension-CBC-MAC/CBC-Length-Extension.py) </li></ul>| <ul><li>- [ ] </li></ul> |\n\n\n### 4. Discrete Logarithm Problem\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [DLP](https://github.com/ashutosh1206/Crypton/tree/master/Discrete-Logarithm-Problem)- Cyclic Groups, Discrete Logarithm Problem| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Discrete-Logarithm-Problem/Challenges) </li></ul> |\n| 2     | [Pollard's Rho Algorithm](https://github.com/ashutosh1206/Crypton/tree/master/Discrete-Logarithm-Problem/Algo-Pollard-Rho) to solve DLP | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Algo-Pollard-Rho/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Algo-Pollard-Rho/pollardrho.py)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Algo-Pollard-Rho/Challenges/)</li></ul> |\n| 3 | [Baby Step Giant Step Algorithm](https://github.com/ashutosh1206/Crypton/tree/master/Discrete-Logarithm-Problem/Algo-Baby-Step-Giant-Step) to solve DLP| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Algo-Baby-Step-Giant-Step/README.md)</li></ul>  | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Algo-Baby-Step-Giant-Step/bsgs.py)</li></ul> | <ul><li>- [ ] </li></ul> |\n| 4 | [Pohlig Hellman Algorithm](https://github.com/ashutosh1206/Crypton/tree/master/Discrete-Logarithm-Problem/Algo-Pohlig-Hellman) to solve DLP| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Algo-Pohlig-Hellman/README.md)</li></ul>  | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Algo-Pohlig-Hellman/pohlig_hellman.py)</li></ul> | <ul><li>- [ ] </li></ul> |\n| 5     | [Elliptic Curve DLP](https://github.com/ashutosh1206/Crypton/tree/master/Discrete-Logarithm-Problem/Elliptic-Curve-DLP)- defining identity element, inverse of a point, cyclic groups over points on an EC, Hasse's theorem, ECDLP | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Elliptic-Curve-DLP/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [ ] </li></ul> |\n| 6 | [Baby Step Giant Step Algorithm](https://github.com/ashutosh1206/Crypton/tree/master/Discrete-Logarithm-Problem/Elliptic-Curve-DLP/Algo-Baby-Step-Giant-Step) to solve Elliptic Curve DLP | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Elliptic-Curve-DLP/Algo-Baby-Step-Giant-Step/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Elliptic-Curve-DLP/Algo-Baby-Step-Giant-Step/bsgs_ecdlp.py)</li></ul> | <ul><li>- [ ] </li></ul> |\n| 7 | [Pollard's Rho Algorithm](https://github.com/ashutosh1206/Crypton/tree/master/Discrete-Logarithm-Problem/Elliptic-Curve-DLP/Algo-Pollard-Rho) to solve Elliptic Curve DLP | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Elliptic-Curve-DLP/Algo-Pollard-Rho/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Elliptic-Curve-DLP/Algo-Pollard-Rho/pollardrho.py)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Discrete-Logarithm-Problem/Elliptic-Curve-DLP/Algo-Pollard-Rho/Challenges/)</li></ul> |\n\n\n\n### 5. ElGamal Encryption\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [ElGamal Cryptosystem- Encryption/Decryption](https://github.com/ashutosh1206/Crypton/tree/master/Elgamal-Encryption)- key generation, encryption, decryption in ElGamal Cryptosystem| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Elgamal-Encryption/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Elgamal-Encryption/example.py) </li></ul>| <ul><li>- [x]  [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Elgamal-Encryption/Challenges)</li></ul> |\n\n\n\n### 6. Authenticated Encryption (AE)\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [AE basics & internals](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption)- working of authenticated encryption| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Authenticated-Encryption/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [ ] </li></ul> |\n| 2     | [AE with MACs](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption/AE-with-MACs)- different techniques of implementing AE with MACs: Encrypt and MAC, MAC then encrypt and encrypt then MAC| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption#authenticated-encryption-using-macs)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [ ] </li></ul> |\n| 3     | [Authenticated Ciphers](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption#authenticated-ciphers)| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption#authenticated-ciphers)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [ ] </li></ul> |\n| 4     | [AE with Associated Data](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption#authenticated-encryption-with-associated-data-aead)| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption#authenticated-encryption-with-associated-data-aead)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [ ] </li></ul> |\n| 5     | [AES-GCM](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption/AES-GCM)- encryption in AES-GCM, Wegman-Carter MAC| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Authenticated-Encryption/AES-GCM/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Authenticated-Encryption/AES-GCM/AES-GCM-implementation.py) </li></ul>| <ul><li>- [ ] </li></ul> |\n| 6     | [Forbidden Attack on AES-GCM](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption/AES-GCM/Attack-Forbidden)- attack on AES-GCM due to nonce-reuse| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Authenticated-Encryption/AES-GCM/Attack-Forbidden/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Authenticated-Encryption/AES-GCM/Attack-Forbidden/Challenges) </li></ul> |\n\n\n\n### 7. Elliptic Curves\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [Elliptic Curve Internals](https://github.com/ashutosh1206/Crypton/tree/master/Elliptic-Curves)- defining Elliptic Curves, point addition, point doubling and scalar multiplication | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Elliptic-Curves/README.md)</li></ul> | <ul><li>- [x] [\\[python\\]](https://github.com/ashutosh1206/Crypton/blob/master/Elliptic-Curves/ellipticcurve.py), [\\[sage\\]](https://github.com/ashutosh1206/Crypton/blob/master/Elliptic-Curves/ellipticcurve.sage)</li></ul> | <ul><li>- [ ] </li></ul> |\n\n\n\n### 8. Digital Signatures\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [ElGamal Signatures](https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/ElGamal-Signatures)- key generation, signature generation, signature verification and correctness of ElGamal Signature scheme| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Digital-Signatures/ElGamal-Signatures/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Digital-Signatures/ElGamal-Signatures/example.py)</li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/ElGamal-Signatures/Challenges)</li></ul> |\n| 2     | [Elliptic Curve DSA](https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/Elliptic-Curve-DSA)- signature generation, signature verification and correctness of signature algorithm| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Digital-Signatures/Elliptic-Curve-DSA/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [ ] </li></ul> |\n| 3     | [Attack k-reuse ECDSA](https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/Elliptic-Curve-DSA/Attack-k-reuse)- forging of ECDSA signatures due to reuse of `k` | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Digital-Signatures/Elliptic-Curve-DSA/Attack-k-reuse/README.md)</li></ul> | <ul><li>- [ ] </li></ul>| <ul><li>- [ ] </li></ul> |\n| 4     | [Unpadded RSA Digital Signatures](https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/Unpadded-RSA-Digital-Signatures)- signature generation and verification in RSA digital signature scheme| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Digital-Signatures/Unpadded-RSA-Digital-Signatures/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Digital-Signatures/Unpadded-RSA-Digital-Signatures/example.py)</li></ul>| <ul><li>- [ ] </li></ul> |\n| 5     | [PKCS1-v1.5 padded RSA Digital Signatures](https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/PKCS%231-v1.5-Padded-RSA-Digital-Signature)| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Digital-Signatures/PKCS%231-v1.5-Padded-RSA-Digital-Signature/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Digital-Signatures/PKCS%231-v1.5-Padded-RSA-Digital-Signature/example.py)</li></ul>| <ul><li>- [ ] </li></ul> |\n| 6     | [e=3 Bleichenbacher's Attack](https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/Attack-e%3D3-Bleichenbacher)| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Digital-Signatures/Attack-e%3D3-Bleichenbacher/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Matasano-Crypto-Challenges/tree/master/set6/p42)</li></ul>| <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/Attack-e%3D3-Bleichenbacher/Challenges)</li></ul> |\n\n### 9. Identification\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [Identification Internals](Identification) | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Identification/README.md)</li></ul> | <ul><li>- [ ] </li></ul> | <ul><li>- [ ] </li></ul> |\n| 2 | [Ephemeral Key Authentication](https://github.com/ashutosh1206/Crypton/tree/master/Identification/Ephemeral-Key-Auth) | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Identification/Ephemeral-Key-Auth/README.md)</li></ul> | <ul><li>- [ ] </li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Crypton/blob/master/Identification/Ephemeral-Key-Auth/Challenges/)</li></ul>  |\n\n### 10. Diffie Hellman Key Exchange\n\n| S.No. | Topic                       | Explanation                                                                                     | Impl./Exploit | Challenge# |\n|-------|:---------------------------:|:-----------------------------------------------------------------------------------------------:|:------------:|:----------:|\n| 1     | [Diffie Hellman Key Exchange Internals](Diffie-Hellman-Key-Exchange/) | <ul><li>- [x] [\\[link\\]](Diffie-Hellman-Key-Exchange/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](Diffie-Hellman-Key-Exchange/example.py)</li></ul> | <ul><li>- [ ] </li></ul> |\n| 2 | [Small Subgroup Confinement Attacks](Diffie-Hellman-Key-Exchange/Attack-Small-Subgroup-Confinement/) | <ul><li>- [x] [\\[link\\]](Diffie-Hellman-Key-Exchange/Attack-Small-Subgroup-Confinement/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Matasano-Crypto-Challenges/tree/master/set8/p57)</li></ul> | <ul><li>- [x] [\\[link\\]](Diffie-Hellman-Key-Exchange/Attack-Small-Subgroup-Confinement/Challenges/)</li></ul>  |\n| 3 | [Invalid Curve Point Attack](Diffie-Hellman-Key-Exchange/Attack-Invalid-Curve-Point) | <ul><li>- [x] [\\[link\\]](Diffie-Hellman-Key-Exchange/Attack-Invalid-Curve-Point/README.md)</li></ul> | <ul><li>- [x] [\\[link\\]](https://github.com/ashutosh1206/Matasano-Crypto-Challenges/blob/master/set8/p59/exploit.py)</li></ul> | <ul><li>- [x] [\\[link\\]](Diffie-Hellman-Key-Exchange/Attack-Invalid-Curve-Point/Challenges/)</li></ul> |\n\n## TODO\n1. RSA Encryption\n   + PKCS1-v1.5 Padded RSA encryption\n   + ~~Chosen Ciphertext Attack on RSA Cryptosystem- LSB Decryption Oracle~~ [\\[Done\\]](https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-LSBit-Oracle)\n   + Padding Oracle Attack on PKCS1 padded RSA encryption system\n   + Fermat's Factorisation\n     + Sieve Improvement\n   + Coppersmith's Attack\n     + Boneh Durfee Attack\n   + Hastad's Broadcast Attack\n     + Implementation of HBA on padded messages\n2. Pseudo-Random-Number-Generators\n   + Linear Congruential Generator\n   + Mersenne Twister PRNG\n   + Linear Feedback Shift Register\n3. Digital Signatures\n   + Blinding Attack on RSA Digital Signatures\n4. ~~Diffie Hellman Key Exchange~~[\\[Done\\]](https://github.com/ashutosh1206/Crypton/tree/master/Diffie-Hellman-Key-Exchange)\n   + Elliptic Curve Diffie Hellman\n5. [More to be added]\n\n\n\n## Author\nAshutosh Ahelleya\n+ Twitter: [https://twitter.com/ashutosha_](https://twitter.com/ashutosha_)\n+ Blog: [https://masterpessimistaa.wordpress.com](https://masterpessimistaa.wordpress.com)\n+ EmailID: [ashutosh.ahelleya@gmail.com](ashutosh.ahelleya@gmail.com)\n"
 },
 {
  "repo": "danieldizzy/Cryptography_1",
  "language": "Python",
  "readme_contents": "Compilation of some materaials used whilst taking Prof. Dan Boneh Stanford Crypto course\n"
 },
 {
  "repo": "soez/cryptovenom",
  "language": null,
  "readme_contents": "# CryptoVenom\nCryptoVenom: The Cryptography Swiss Army knife\n\n<p align=\"center\">\n  <img src=\"cryptovenom.jpg\" width=\"650\" height=\"350\">\n</p>\n\n# What is CryptoVenom?\n\n\nCryptoVenom is an OpenSource tool which contains a lot of cryptosystems and cryptoanalysis methods all in one, including\nclassical algorithms, hash algorithms, encoding algorithms, logic gates, mathematical functions, modern symmetric and asymmetric encryptions etc.\n\n\n# What is the Purpose of CryptoVenom?\n\nMake easier the cryptoanalysis or the usage of cryptosystems and manipulation of them.\n\nIf you are a CTF Player or just a curious student with just learning purposes this is your tool!\n\n\n# Errors? Updates?\n\nAs this is a very big tool, and I created it alone there might be some errors in it, if you get an error,\nor some functionality of the tool is not working for you please contact as soon as possible with me though telegram (@LockedByte), email (alejandro.guerrero.rodriguez2@gmail.com) or just open it in gitHub. I'll patch all these errors quickly.\n\n# Dependencies? Setup? Installing?\n\nCryptoVenom is JUST working for linux, I tested it just in kali and in Parrot OS, if you are in another dist and you have problems let me know. Installing is a very simple process, just execute as root the setup.py file and dependencies will be installed.\n\n\n# Content\n\n[+] Classical\n\n      [*] Caesar\n      [*] Vigenere Cipher\n      [*] Playfair Cipher\n      [*] Polybius Square\n      [*] Morse\n      [*] Atbash\n      [*] Baconian\n      [*] AutoKey\n      [*] Beaufort Cipher\n      [*] Railfence Cipher\n      [*] Simple Substitution Cipher\n      [*] Columnar Tramposition\n      [*] Bifid\n      [*] Foursquare Cipher\n      [*] Fractionated Morse\n      [*] Enigma\n      [*] Gronsfeld Cipher\n      [*] Porta\n      [*] RunningKey\n      [*] ADFGVX Cipher\n      [*] ADFGX Cipher\n      [*] Affine Cipher\n      [*] Vernam Cipher\n\n      \n[+] Asymmetric\n\n      [*] RSA\n      [*] Diffie-Hellman\n      [*] DSA\n      [*] ECC (Elliptic Curve Cryptography)\n      \n[+] Symmetric\n\n      [*] AES / Rijndael (Advanced Encryption Algorithm)\n      [*] DES (Data Encryption Standard)\n      [*] XOR Cipher\n      [*] Blowfish\n      [*] Twofish\n      [*] 3DES / TDES (Triple DES)\n      [*] RC2 (Ron's Code 2)\n      [*] RC4 (Ron's Code 4)\n      [*] CAST\n      [*] SCrypt\n\n     \n[+] Encoding\n\n      [*] Base16\n      [*] Base32\n      [*] Base64\n      [*] Base58\n      [*] Base85\n      [*] Base91\n      [*] Hexadecimal\n      [*] Octal\n      [*] Decimal\n      [*] Binary\n      [*] ROT-x\n      [*] URL Encode/Decode\n      \n[+] Hash\n\n      [*] MD5\n      [*] SHA-1\n      [*] SHA-224\n      [*] SHA-256\n      [*] SHA-384\n      [*] SHA-512\n      [*] MD2\n      [*] MD4\n      [*] Argon2\n      [*] BCrypt\n      [*] BigCrypt Unix\n      [*] Blake2b\n      [*] Blake2s\n      [*] BSDi Crypt Unix\n      [*] Cisco ASA Hash\n      [*] Cisco PIX Hash\n      [*] Cisco Type 7\n      [*] Crypt-16 Unix\n      [*] DES Crypt Unix\n      [*] FreeBSD Unix\n      [*] HMAC\n      [*] LDAP-MD5\n      [*] LDAP Salted MD5\n      [*] LDAP SHA-1\n      [*] LDAP Salted SHA-1\n      [*] LMHash\n      [*] MD5 Unix\n      [*] MSDCC Hash\n      [*] MSDCC 2 Hash\n      [*] MSSQL 2000 Hash\n      [*] MSSQL 2005 Hash\n      [*] MySQL 41 Hash\n      [*] MySQL 323 Hash\n      [*] NTHash\n      [*] NTLM Hash\n      [*] Oracle 10 Hash\n      [*] Oracle 11 Hash\n      [*] PHPass Hash\n      [*] PostgreSQL MD5\n      [*] RIPEMD\n      [*] SCrypt\n      [*] SHA-256 Unix\n      [*] SHA-512 Unix\n      [*] Sun MD5 Unix\n\n      \n      \n[+] String Manipulation\n\n      [*] Reverse String\n      [*] Block Reverse String\n      [*] String To Upper\n      [*] String To Lower\n      [*] One-Byte List\n      [*] Reverse Case\n      [*] Remove Spaces\n      [*] Remove Enters\n      [*] String Replacement\n      [*] Add Line Numbers\n      \n\n[+] Mathematical Functions\n\n      [*] Fast Exponentiation Algorithm\n      [*] Extended Euclidean Algorithm\n      [*] Fatorize Product of two primes\n\n      \n      \n[+] Other\n\n      [*] XOR\n      [*] AND\n      [*] NAND\n      [*] NOT\n      [*] OR\n      [*] NOR\n      [*] XNOR\n      [*] PGP Operations\n      \n      \nI'll add more ciphers, cracking systems and functionalities!\n\n\n# Planning-to-add features\n\n- File Hashing\n- Finish Crackssistant\n- PGP Operations\n- Algorithm Identifiers\n- Elliptic Curve Cryptography (ECC)\n- ElGamal\n- Bruteforcers & crackers against Symmetric algorithms\n- More crackers & bruteforcers against Classical Algorithms\n- Calculate file entrophy\n- Key Exchanges with TCP Sockets\n- More error handling and \"try/excepts\"\n- More customizable options\n- Add HMAC-(hash) for each hash algorithm\n \n* Please: If you want anything to be added to the tool contact me and I'll add it to the next version!\n\n# About\n\nCreated By Alejandro Guerrero Rodriguez (LockedByte)\n\nTwitter: @LockedByte\nTelegram: @LockedByte\nEmail: alejandro.guerrero.rodriguez2@gmail.com\n"
 },
 {
  "repo": "tlsfuzzer/python-ecdsa",
  "language": "Python",
  "readme_contents": "# Pure-Python ECDSA and ECDH\n\n[![Build Status](https://github.com/tlsfuzzer/python-ecdsa/workflows/GitHub%20CI/badge.svg?branch=master)](https://github.com/tlsfuzzer/python-ecdsa/actions?query=workflow%3A%22GitHub+CI%22+branch%3Amaster)\n[![Documentation Status](https://readthedocs.org/projects/ecdsa/badge/?version=latest)](https://ecdsa.readthedocs.io/en/latest/?badge=latest)\n[![Coverage Status](https://coveralls.io/repos/github/tlsfuzzer/python-ecdsa/badge.svg?branch=master)](https://coveralls.io/github/tlsfuzzer/python-ecdsa?branch=master)\n![condition coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/tomato42/9b6ca1f3410207fbeca785a178781651/raw/python-ecdsa-condition-coverage.json)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/tlsfuzzer/python-ecdsa.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/tlsfuzzer/python-ecdsa/context:python)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/tlsfuzzer/python-ecdsa.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/tlsfuzzer/python-ecdsa/alerts/)\n[![Latest Version](https://img.shields.io/pypi/v/ecdsa.svg?style=flat)](https://pypi.python.org/pypi/ecdsa/)\n![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat)\n\n\nThis is an easy-to-use implementation of ECC (Elliptic Curve Cryptography)\nwith support for ECDSA (Elliptic Curve Digital Signature Algorithm),\nEdDSA (Edwards-curve Digital Signature Algorithm) and ECDH\n(Elliptic Curve Diffie-Hellman), implemented purely in Python, released under\nthe MIT license. With this library, you can quickly create key pairs (signing\nkey and verifying key), sign messages, and verify the signatures. You can\nalso agree on a shared secret key based on exchanged public keys.\nThe keys and signatures are very short, making them easy to handle and\nincorporate into other protocols.\n\n**NOTE: This library should not be used in production settings, see [Security](#Security) for more details.**\n\n## Features\n\nThis library provides key generation, signing, verifying, and shared secret\nderivation for five\npopular NIST \"Suite B\" GF(p) (_prime field_) curves, with key lengths of 192,\n224, 256, 384, and 521 bits. The \"short names\" for these curves, as known by\nthe OpenSSL tool (`openssl ecparam -list_curves`), are: `prime192v1`,\n`secp224r1`, `prime256v1`, `secp384r1`, and `secp521r1`. It includes the\n256-bit curve `secp256k1` used by Bitcoin. There is also support for the\nregular (non-twisted) variants of Brainpool curves from 160 to 512 bits. The\n\"short names\" of those curves are: `brainpoolP160r1`, `brainpoolP192r1`,\n`brainpoolP224r1`, `brainpoolP256r1`, `brainpoolP320r1`, `brainpoolP384r1`,\n`brainpoolP512r1`. Few of the small curves from SEC standard are also\nincluded (mainly to speed-up testing of the library), those are:\n`secp112r1`, `secp112r2`, `secp128r1`, and `secp160r1`.\nKey generation, siging and verifying is also supported for Ed25519 and\nEd448 curves.\nNo other curves are included, but it is not too hard to add support for more\ncurves over prime fields.\n\n## Dependencies\n\nThis library uses only Python and the 'six' package. It is compatible with\nPython 2.6, 2.7, and 3.3+. It also supports execution on alternative\nimplementations like pypy and pypy3.\n\nIf `gmpy2` or `gmpy` is installed, they will be used for faster arithmetic.\nEither of them can be installed after this library is installed,\n`python-ecdsa` will detect their presence on start-up and use them\nautomatically.\nYou should prefer `gmpy2` on Python3 for optimal performance.\n\nTo run the OpenSSL compatibility tests, the 'openssl' tool must be in your\n`PATH`. This release has been tested successfully against OpenSSL 0.9.8o,\n1.0.0a, 1.0.2f, 1.1.1d and 3.0.1 (among others).\n\n\n## Installation\n\nThis library is available on PyPI, it's recommended to install it using `pip`:\n\n```\npip install ecdsa\n```\n\nIn case higher performance is wanted and using native code is not a problem,\nit's possible to specify installation together with `gmpy2`:\n\n```\npip install ecdsa[gmpy2]\n```\n\nor (slower, legacy option):\n```\npip install ecdsa[gmpy]\n```\n\n## Speed\n\nThe following table shows how long this library takes to generate key pairs\n(`keygen`), to sign data (`sign`), to verify those signatures (`verify`),\nto derive a shared secret (`ecdh`), and\nto verify the signatures with no key-specific precomputation (`no PC verify`).\nAll those values are in seconds.\nFor convenience, the inverses of those values are also provided:\nhow many keys per second can be generated (`keygen/s`), how many signatures\ncan be made per second (`sign/s`), how many signatures can be verified\nper second (`verify/s`), how many shared secrets can be derived per second\n(`ecdh/s`), and how many signatures with no key specific\nprecomputation can be verified per second (`no PC verify/s`). The size of raw\nsignature (generally the smallest\nthe way a signature can be encoded) is also provided in the `siglen` column.\nUse `tox -e speed` to generate this table on your own computer.\nOn an Intel Core i7 4790K @ 4.0GHz I'm getting the following performance:\n\n```\n                  siglen    keygen   keygen/s      sign     sign/s    verify   verify/s  no PC verify  no PC verify/s\n        NIST192p:     48   0.00032s   3134.06   0.00033s   2985.53   0.00063s   1598.36       0.00129s         774.43\n        NIST224p:     56   0.00040s   2469.24   0.00042s   2367.88   0.00081s   1233.41       0.00170s         586.66\n        NIST256p:     64   0.00051s   1952.73   0.00054s   1867.80   0.00098s   1021.86       0.00212s         471.27\n        NIST384p:     96   0.00107s    935.92   0.00111s    904.23   0.00203s    491.77       0.00446s         224.00\n        NIST521p:    132   0.00210s    475.52   0.00215s    464.16   0.00398s    251.28       0.00874s         114.39\n       SECP256k1:     64   0.00052s   1921.54   0.00054s   1847.49   0.00105s    948.68       0.00210s         477.01\n BRAINPOOLP160r1:     40   0.00025s   4003.88   0.00026s   3845.12   0.00053s   1893.93       0.00105s         949.92\n BRAINPOOLP192r1:     48   0.00033s   3043.97   0.00034s   2975.98   0.00063s   1581.50       0.00135s         742.29\n BRAINPOOLP224r1:     56   0.00041s   2436.44   0.00043s   2315.51   0.00078s   1278.49       0.00180s         556.16\n BRAINPOOLP256r1:     64   0.00053s   1892.49   0.00054s   1846.24   0.00114s    875.64       0.00229s         437.25\n BRAINPOOLP320r1:     80   0.00073s   1361.26   0.00076s   1309.25   0.00143s    699.29       0.00322s         310.49\n BRAINPOOLP384r1:     96   0.00107s    931.29   0.00111s    901.80   0.00230s    434.19       0.00476s         210.20\n BRAINPOOLP512r1:    128   0.00207s    483.41   0.00212s    471.42   0.00425s    235.43       0.00912s         109.61\n       SECP112r1:     28   0.00015s   6672.53   0.00016s   6440.34   0.00031s   3265.41       0.00056s        1774.20\n       SECP112r2:     28   0.00015s   6697.11   0.00015s   6479.98   0.00028s   3524.72       0.00058s        1716.16\n       SECP128r1:     32   0.00018s   5497.65   0.00019s   5272.89   0.00036s   2747.39       0.00072s        1396.16\n       SECP160r1:     42   0.00025s   3949.32   0.00026s   3894.45   0.00046s   2153.85       0.00102s         985.07\n         Ed25519:     64   0.00076s   1324.48   0.00042s   2405.01   0.00109s    918.05       0.00344s         290.50\n           Ed448:    114   0.00176s    569.53   0.00115s    870.94   0.00282s    355.04       0.01024s          97.69\n\n                       ecdh     ecdh/s\n        NIST192p:   0.00104s    964.89\n        NIST224p:   0.00134s    748.63\n        NIST256p:   0.00170s    587.08\n        NIST384p:   0.00352s    283.90\n        NIST521p:   0.00717s    139.51\n       SECP256k1:   0.00154s    648.40\n BRAINPOOLP160r1:   0.00082s   1220.70\n BRAINPOOLP192r1:   0.00105s    956.75\n BRAINPOOLP224r1:   0.00136s    734.52\n BRAINPOOLP256r1:   0.00178s    563.32\n BRAINPOOLP320r1:   0.00252s    397.23\n BRAINPOOLP384r1:   0.00376s    266.27\n BRAINPOOLP512r1:   0.00733s    136.35\n       SECP112r1:   0.00046s   2180.40\n       SECP112r2:   0.00045s   2229.14\n       SECP128r1:   0.00054s   1868.15\n       SECP160r1:   0.00080s   1243.98\n```\n\nTo test performance with `gmpy2` loaded, use `tox -e speedgmpy2`.\nOn the same machine I'm getting the following performance with `gmpy2`:\n```\n                  siglen    keygen   keygen/s      sign     sign/s    verify   verify/s  no PC verify  no PC verify/s\n        NIST192p:     48   0.00017s   5933.40   0.00017s   5751.70   0.00032s   3125.28       0.00067s        1502.41\n        NIST224p:     56   0.00021s   4782.87   0.00022s   4610.05   0.00040s   2487.04       0.00089s        1126.90\n        NIST256p:     64   0.00023s   4263.98   0.00024s   4125.16   0.00045s   2200.88       0.00098s        1016.82\n        NIST384p:     96   0.00041s   2449.54   0.00042s   2399.96   0.00083s   1210.57       0.00172s         581.43\n        NIST521p:    132   0.00071s   1416.07   0.00072s   1389.81   0.00144s    692.93       0.00312s         320.40\n       SECP256k1:     64   0.00024s   4245.05   0.00024s   4122.09   0.00045s   2206.40       0.00094s        1068.32\n BRAINPOOLP160r1:     40   0.00014s   6939.17   0.00015s   6681.55   0.00029s   3452.43       0.00057s        1769.81\n BRAINPOOLP192r1:     48   0.00017s   5920.05   0.00017s   5774.36   0.00034s   2979.00       0.00069s        1453.19\n BRAINPOOLP224r1:     56   0.00021s   4732.12   0.00022s   4622.65   0.00041s   2422.47       0.00087s        1149.87\n BRAINPOOLP256r1:     64   0.00024s   4233.02   0.00024s   4115.20   0.00047s   2143.27       0.00098s        1015.60\n BRAINPOOLP320r1:     80   0.00032s   3162.38   0.00032s   3077.62   0.00063s   1598.83       0.00136s         737.34\n BRAINPOOLP384r1:     96   0.00041s   2436.88   0.00042s   2395.62   0.00083s   1202.68       0.00178s         562.85\n BRAINPOOLP512r1:    128   0.00063s   1587.60   0.00064s   1558.83   0.00125s    799.96       0.00281s         355.83\n       SECP112r1:     28   0.00009s  11118.66   0.00009s  10775.48   0.00018s   5456.00       0.00033s        3020.83\n       SECP112r2:     28   0.00009s  11322.97   0.00009s  10857.71   0.00017s   5748.77       0.00032s        3094.28\n       SECP128r1:     32   0.00010s  10078.39   0.00010s   9665.27   0.00019s   5200.58       0.00036s        2760.88\n       SECP160r1:     42   0.00015s   6875.51   0.00015s   6647.35   0.00029s   3422.41       0.00057s        1768.35\n         Ed25519:     64   0.00030s   3322.56   0.00018s   5568.63   0.00046s   2165.35       0.00153s         654.02\n           Ed448:    114   0.00060s   1680.53   0.00039s   2567.40   0.00096s   1036.67       0.00350s         285.62\n\n                       ecdh     ecdh/s\n        NIST192p:   0.00050s   1985.70\n        NIST224p:   0.00066s   1524.16\n        NIST256p:   0.00071s   1413.07\n        NIST384p:   0.00127s    788.89\n        NIST521p:   0.00230s    434.85\n       SECP256k1:   0.00071s   1409.95\n BRAINPOOLP160r1:   0.00042s   2374.65\n BRAINPOOLP192r1:   0.00051s   1960.01\n BRAINPOOLP224r1:   0.00066s   1518.37\n BRAINPOOLP256r1:   0.00071s   1399.90\n BRAINPOOLP320r1:   0.00100s    997.21\n BRAINPOOLP384r1:   0.00129s    777.51\n BRAINPOOLP512r1:   0.00210s    475.99\n       SECP112r1:   0.00022s   4457.70\n       SECP112r2:   0.00024s   4252.33\n       SECP128r1:   0.00028s   3589.31\n       SECP160r1:   0.00043s   2305.02\n```\n\n(there's also `gmpy` version, execute it using `tox -e speedgmpy`)\n\nFor comparison, a highly optimised implementation (including curve-specific\nassembly for some curves), like the one in OpenSSL 1.1.1d, provides the\nfollowing performance numbers on the same machine.\nRun `openssl speed ecdsa` and `openssl speed ecdh` to reproduce it:\n```\n                              sign    verify    sign/s verify/s\n 192 bits ecdsa (nistp192)   0.0002s   0.0002s   4785.6   5380.7\n 224 bits ecdsa (nistp224)   0.0000s   0.0001s  22475.6   9822.0\n 256 bits ecdsa (nistp256)   0.0000s   0.0001s  45069.6  14166.6\n 384 bits ecdsa (nistp384)   0.0008s   0.0006s   1265.6   1648.1\n 521 bits ecdsa (nistp521)   0.0003s   0.0005s   3753.1   1819.5\n 256 bits ecdsa (brainpoolP256r1)   0.0003s   0.0003s   2983.5   3333.2\n 384 bits ecdsa (brainpoolP384r1)   0.0008s   0.0007s   1258.8   1528.1\n 512 bits ecdsa (brainpoolP512r1)   0.0015s   0.0012s    675.1    860.1\n\n                              sign    verify    sign/s verify/s\n 253 bits EdDSA (Ed25519)   0.0000s   0.0001s  28217.9  10897.7\n 456 bits EdDSA (Ed448)     0.0003s   0.0005s   3926.5   2147.7\n\n                               op      op/s\n 192 bits ecdh (nistp192)   0.0002s   4853.4\n 224 bits ecdh (nistp224)   0.0001s  15252.1\n 256 bits ecdh (nistp256)   0.0001s  18436.3\n 384 bits ecdh (nistp384)   0.0008s   1292.7\n 521 bits ecdh (nistp521)   0.0003s   2884.7\n 256 bits ecdh (brainpoolP256r1)   0.0003s   3066.5\n 384 bits ecdh (brainpoolP384r1)   0.0008s   1298.0\n 512 bits ecdh (brainpoolP512r1)   0.0014s    694.8\n```\n\nKeys and signature can be serialized in different ways (see Usage, below).\nFor a NIST192p key, the three basic representations require strings of the\nfollowing lengths (in bytes):\n\n    to_string:  signkey= 24, verifykey= 48, signature=48\n    compressed: signkey=n/a, verifykey= 25, signature=n/a\n    DER:        signkey=106, verifykey= 80, signature=55\n    PEM:        signkey=278, verifykey=162, (no support for PEM signatures)\n\n## History\n\nIn 2006, Peter Pearson announced his pure-python implementation of ECDSA in a\n[message to sci.crypt][1], available from his [download site][2]. In 2010,\nBrian Warner wrote a wrapper around this code, to make it a bit easier and\nsafer to use. In 2020, Hubert Kario included an implementation of elliptic\ncurve cryptography that uses Jacobian coordinates internally, improving\nperformance about 20-fold. You are looking at the README for this wrapper.\n\n[1]: http://www.derkeiler.com/Newsgroups/sci.crypt/2006-01/msg00651.html\n[2]: http://webpages.charter.net/curryfans/peter/downloads.html\n\n## Testing\n\nTo run the full test suite, do this:\n\n    tox -e coverage\n\nOn an Intel Core i7 4790K @ 4.0GHz, the tests take about 18 seconds to execute.\nThe test suite uses\n[`hypothesis`](https://github.com/HypothesisWorks/hypothesis) so there is some\ninherent variability in the test suite execution time.\n\nOne part of `test_pyecdsa.py` and `test_ecdh.py` checks compatibility with\nOpenSSL, by running the \"openssl\" CLI tool, make sure it's in your `PATH` if\nyou want to test compatibility with it (if OpenSSL is missing, too old, or\ndoesn't support all the curves supported in upstream releases you will see\nskipped tests in the above `coverage` run).\n\n## Security\n\nThis library was not designed with security in mind. If you are processing\ndata that needs to be protected we suggest you use a quality wrapper around\nOpenSSL. [pyca/cryptography](https://cryptography.io) is one example of such\na wrapper. The primary use-case of this library is as a portable library for\ninteroperability testing and as a teaching tool.\n\n**This library does not protect against side-channel attacks.**\n\nDo not allow attackers to measure how long it takes you to generate a key pair\nor sign a message. Do not allow attackers to run code on the same physical\nmachine when key pair generation or signing is taking place (this includes\nvirtual machines). Do not allow attackers to measure how much power your\ncomputer uses while generating the key pair or signing a message. Do not allow\nattackers to measure RF interference coming from your computer while generating\na key pair or signing a message. Note: just loading the private key will cause\nkey pair generation. Other operations or attack vectors may also be\nvulnerable to attacks. **For a sophisticated attacker observing just one\noperation with a private key will be sufficient to completely\nreconstruct the private key**.\n\nPlease also note that any Pure-python cryptographic library will be vulnerable\nto the same side-channel attacks. This is because Python does not provide\nside-channel secure primitives (with the exception of\n[`hmac.compare_digest()`][3]), making side-channel secure programming\nimpossible.\n\nThis library depends upon a strong source of random numbers. Do not use it on\na system where `os.urandom()` does not provide cryptographically secure\nrandom numbers.\n\n[3]: https://docs.python.org/3/library/hmac.html#hmac.compare_digest\n\n## Usage\n\nYou start by creating a `SigningKey`. You can use this to sign data, by passing\nin data as a byte string and getting back the signature (also a byte string).\nYou can also ask a `SigningKey` to give you the corresponding `VerifyingKey`.\nThe `VerifyingKey` can be used to verify a signature, by passing it both the\ndata string and the signature byte string: it either returns True or raises\n`BadSignatureError`.\n\n```python\nfrom ecdsa import SigningKey\nsk = SigningKey.generate() # uses NIST192p\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n```\n\nEach `SigningKey`/`VerifyingKey` is associated with a specific curve, like\nNIST192p (the default one). Longer curves are more secure, but take longer to\nuse, and result in longer keys and signatures.\n\n```python\nfrom ecdsa import SigningKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n```\n\nThe `SigningKey` can be serialized into several different formats: the shortest\nis to call `s=sk.to_string()`, and then re-create it with\n`SigningKey.from_string(s, curve)` . This short form does not record the\ncurve, so you must be sure to pass to `from_string()` the same curve you used\nfor the original key. The short form of a NIST192p-based signing key is just 24\nbytes long. If a point encoding is invalid or it does not lie on the specified\ncurve, `from_string()` will raise `MalformedPointError`.\n\n```python\nfrom ecdsa import SigningKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nsk_string = sk.to_string()\nsk2 = SigningKey.from_string(sk_string, curve=NIST384p)\nprint(sk_string.hex())\nprint(sk2.to_string().hex())\n```\n\nNote: while the methods are called `to_string()` the type they return is\nactually `bytes`, the \"string\" part is leftover from Python 2.\n\n`sk.to_pem()` and `sk.to_der()` will serialize the signing key into the same\nformats that OpenSSL uses. The PEM file looks like the familiar ASCII-armored\n`\"-----BEGIN EC PRIVATE KEY-----\"` base64-encoded format, and the DER format\nis a shorter binary form of the same data.\n`SigningKey.from_pem()/.from_der()` will undo this serialization. These\nformats include the curve name, so you do not need to pass in a curve\nidentifier to the deserializer. In case the file is malformed `from_der()`\nand `from_pem()` will raise `UnexpectedDER` or` MalformedPointError`.\n\n```python\nfrom ecdsa import SigningKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nsk_pem = sk.to_pem()\nsk2 = SigningKey.from_pem(sk_pem)\n# sk and sk2 are the same key\n```\n\nLikewise, the `VerifyingKey` can be serialized in the same way:\n`vk.to_string()/VerifyingKey.from_string()`, `to_pem()/from_pem()`, and\n`to_der()/from_der()`. The same `curve=` argument is needed for\n`VerifyingKey.from_string()`.\n\n```python\nfrom ecdsa import SigningKey, VerifyingKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nvk = sk.verifying_key\nvk_string = vk.to_string()\nvk2 = VerifyingKey.from_string(vk_string, curve=NIST384p)\n# vk and vk2 are the same key\n\nfrom ecdsa import SigningKey, VerifyingKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nvk = sk.verifying_key\nvk_pem = vk.to_pem()\nvk2 = VerifyingKey.from_pem(vk_pem)\n# vk and vk2 are the same key\n```\n\nThere are a couple of different ways to compute a signature. Fundamentally,\nECDSA takes a number that represents the data being signed, and returns a\npair of numbers that represent the signature. The `hashfunc=` argument to\n`sk.sign()` and `vk.verify()` is used to turn an arbitrary string into a\nfixed-length digest, which is then turned into a number that ECDSA can sign,\nand both sign and verify must use the same approach. The default value is\n`hashlib.sha1`, but if you use NIST256p or a longer curve, you can use\n`hashlib.sha256` instead.\n\nThere are also multiple ways to represent a signature. The default\n`sk.sign()` and `vk.verify()` methods present it as a short string, for\nsimplicity and minimal overhead. To use a different scheme, use the\n`sk.sign(sigencode=)` and `vk.verify(sigdecode=)` arguments. There are helper\nfunctions in the `ecdsa.util` module that can be useful here.\n\nIt is also possible to create a `SigningKey` from a \"seed\", which is\ndeterministic. This can be used in protocols where you want to derive\nconsistent signing keys from some other secret, for example when you want\nthree separate keys and only want to store a single master secret. You should\nstart with a uniformly-distributed unguessable seed with about `curve.baselen`\nbytes of entropy, and then use one of the helper functions in `ecdsa.util` to\nconvert it into an integer in the correct range, and then finally pass it\ninto `SigningKey.from_secret_exponent()`, like this:\n\n```python\nimport os\nfrom ecdsa import NIST384p, SigningKey\nfrom ecdsa.util import randrange_from_seed__trytryagain\n\ndef make_key(seed):\n  secexp = randrange_from_seed__trytryagain(seed, NIST384p.order)\n  return SigningKey.from_secret_exponent(secexp, curve=NIST384p)\n\nseed = os.urandom(NIST384p.baselen) # or other starting point\nsk1a = make_key(seed)\nsk1b = make_key(seed)\n# note: sk1a and sk1b are the same key\nassert sk1a.to_string() == sk1b.to_string()\nsk2 = make_key(b\"2-\"+seed)  # different key\nassert sk1a.to_string() != sk2.to_string()\n```\n\nIn case the application will verify a lot of signatures made with a single\nkey, it's possible to precompute some of the internal values to make\nsignature verification significantly faster. The break-even point occurs at\nabout 100 signatures verified.\n\nTo perform precomputation, you can call the `precompute()` method\non `VerifyingKey` instance:\n```python\nfrom ecdsa import SigningKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nvk = sk.verifying_key\nvk.precompute()\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n```\n\nOnce `precompute()` was called, all signature verifications with this key will\nbe faster to execute.\n\n## OpenSSL Compatibility\n\nTo produce signatures that can be verified by OpenSSL tools, or to verify\nsignatures that were produced by those tools, use:\n\n```python\n# openssl ecparam -name prime256v1 -genkey -out sk.pem\n# openssl ec -in sk.pem -pubout -out vk.pem\n# echo \"data for signing\" > data\n# openssl dgst -sha256 -sign sk.pem -out data.sig data\n# openssl dgst -sha256 -verify vk.pem -signature data.sig data\n# openssl dgst -sha256 -prverify sk.pem -signature data.sig data\n\nimport hashlib\nfrom ecdsa import SigningKey, VerifyingKey\nfrom ecdsa.util import sigencode_der, sigdecode_der\n\nwith open(\"vk.pem\") as f:\n   vk = VerifyingKey.from_pem(f.read())\n\nwith open(\"data\", \"rb\") as f:\n   data = f.read()\n\nwith open(\"data.sig\", \"rb\") as f:\n   signature = f.read()\n\nassert vk.verify(signature, data, hashlib.sha256, sigdecode=sigdecode_der)\n\nwith open(\"sk.pem\") as f:\n   sk = SigningKey.from_pem(f.read(), hashlib.sha256)\n\nnew_signature = sk.sign_deterministic(data, sigencode=sigencode_der)\n\nwith open(\"data.sig2\", \"wb\") as f:\n   f.write(new_signature)\n\n# openssl dgst -sha256 -verify vk.pem -signature data.sig2 data\n```\n\nNote: if compatibility with OpenSSL 1.0.0 or earlier is necessary, the\n`sigencode_string` and `sigdecode_string` from `ecdsa.util` can be used for\nrespectively writing and reading the signatures.\n\nThe keys also can be written in format that openssl can handle:\n\n```python\nfrom ecdsa import SigningKey, VerifyingKey\n\nwith open(\"sk.pem\") as f:\n    sk = SigningKey.from_pem(f.read())\nwith open(\"sk.pem\", \"wb\") as f:\n    f.write(sk.to_pem())\n\nwith open(\"vk.pem\") as f:\n    vk = VerifyingKey.from_pem(f.read())\nwith open(\"vk.pem\", \"wb\") as f:\n    f.write(vk.to_pem())\n```\n\n## Entropy\n\nCreating a signing key with `SigningKey.generate()` requires some form of\nentropy (as opposed to\n`from_secret_exponent`/`from_string`/`from_der`/`from_pem`,\nwhich are deterministic and do not require an entropy source). The default\nsource is `os.urandom()`, but you can pass any other function that behaves\nlike `os.urandom` as the `entropy=` argument to do something different. This\nmay be useful in unit tests, where you want to achieve repeatable results. The\n`ecdsa.util.PRNG` utility is handy here: it takes a seed and produces a strong\npseudo-random stream from it:\n\n```python\nfrom ecdsa.util import PRNG\nfrom ecdsa import SigningKey\nrng1 = PRNG(b\"seed\")\nsk1 = SigningKey.generate(entropy=rng1)\nrng2 = PRNG(b\"seed\")\nsk2 = SigningKey.generate(entropy=rng2)\n# sk1 and sk2 are the same key\n```\n\nLikewise, ECDSA signature generation requires a random number, and each\nsignature must use a different one (using the same number twice will\nimmediately reveal the private signing key). The `sk.sign()` method takes an\n`entropy=` argument which behaves the same as `SigningKey.generate(entropy=)`.\n\n## Deterministic Signatures\n\nIf you call `SigningKey.sign_deterministic(data)` instead of `.sign(data)`,\nthe code will generate a deterministic signature instead of a random one.\nThis uses the algorithm from RFC6979 to safely generate a unique `k` value,\nderived from the private key and the message being signed. Each time you sign\nthe same message with the same key, you will get the same signature (using\nthe same `k`).\n\nThis may become the default in a future version, as it is not vulnerable to\nfailures of the entropy source.\n\n## Examples\n\nCreate a NIST192p key pair and immediately save both to disk:\n\n```python\nfrom ecdsa import SigningKey\nsk = SigningKey.generate()\nvk = sk.verifying_key\nwith open(\"private.pem\", \"wb\") as f:\n    f.write(sk.to_pem())\nwith open(\"public.pem\", \"wb\") as f:\n    f.write(vk.to_pem())\n```\n\nLoad a signing key from disk, use it to sign a message (using SHA-1), and write\nthe signature to disk:\n\n```python\nfrom ecdsa import SigningKey\nwith open(\"private.pem\") as f:\n    sk = SigningKey.from_pem(f.read())\nwith open(\"message\", \"rb\") as f:\n    message = f.read()\nsig = sk.sign(message)\nwith open(\"signature\", \"wb\") as f:\n    f.write(sig)\n```\n\nLoad the verifying key, message, and signature from disk, and verify the\nsignature (assume SHA-1 hash):\n\n```python\nfrom ecdsa import VerifyingKey, BadSignatureError\nvk = VerifyingKey.from_pem(open(\"public.pem\").read())\nwith open(\"message\", \"rb\") as f:\n    message = f.read()\nwith open(\"signature\", \"rb\") as f:\n    sig = f.read()\ntry:\n    vk.verify(sig, message)\n    print \"good signature\"\nexcept BadSignatureError:\n    print \"BAD SIGNATURE\"\n```\n\nCreate a NIST521p key pair:\n\n```python\nfrom ecdsa import SigningKey, NIST521p\nsk = SigningKey.generate(curve=NIST521p)\nvk = sk.verifying_key\n```\n\nCreate three independent signing keys from a master seed:\n\n```python\nfrom ecdsa import NIST192p, SigningKey\nfrom ecdsa.util import randrange_from_seed__trytryagain\n\ndef make_key_from_seed(seed, curve=NIST192p):\n    secexp = randrange_from_seed__trytryagain(seed, curve.order)\n    return SigningKey.from_secret_exponent(secexp, curve)\n\nsk1 = make_key_from_seed(\"1:%s\" % seed)\nsk2 = make_key_from_seed(\"2:%s\" % seed)\nsk3 = make_key_from_seed(\"3:%s\" % seed)\n```\n\nLoad a verifying key from disk and print it using hex encoding in\nuncompressed and compressed format (defined in X9.62 and SEC1 standards):\n\n```python\nfrom ecdsa import VerifyingKey\n\nwith open(\"public.pem\") as f:\n    vk = VerifyingKey.from_pem(f.read())\n\nprint(\"uncompressed: {0}\".format(vk.to_string(\"uncompressed\").hex()))\nprint(\"compressed: {0}\".format(vk.to_string(\"compressed\").hex()))\n```\n\nLoad a verifying key from a hex string from compressed format, output\nuncompressed:\n\n```python\nfrom ecdsa import VerifyingKey, NIST256p\n\ncomp_str = '022799c0d0ee09772fdd337d4f28dc155581951d07082fb19a38aa396b67e77759'\nvk = VerifyingKey.from_string(bytearray.fromhex(comp_str), curve=NIST256p)\nprint(vk.to_string(\"uncompressed\").hex())\n```\n\nECDH key exchange with remote party:\n\n```python\nfrom ecdsa import ECDH, NIST256p\n\necdh = ECDH(curve=NIST256p)\necdh.generate_private_key()\nlocal_public_key = ecdh.get_public_key()\n#send `local_public_key` to remote party and receive `remote_public_key` from remote party\nwith open(\"remote_public_key.pem\") as e:\n    remote_public_key = e.read()\necdh.load_received_public_key_pem(remote_public_key)\nsecret = ecdh.generate_sharedsecret_bytes()\n```\n"
 },
 {
  "repo": "floodyberry/supercop",
  "language": "C",
  "readme_contents": ""
 },
 {
  "repo": "randombit/botan-rs",
  "language": "Rust",
  "readme_contents": "# botan-rs\n\n[![Build status](https://github.com/randombit/botan-rs/workflows/ci/badge.svg)](https://github.com/randombit/botan-rs/actions)\n[![crates.io](https://img.shields.io/crates/v/botan.svg)](https://crates.io/crates/botan)\n[![docs.rs](https://docs.rs/botan/badge.svg)](https://docs.rs/botan)\n\nThis crate wraps the C API exposed by the [Botan](https://botan.randombit.net/)\ncryptography library. The current version requires Botan 2.8.0 or higher\nand Rust 1.43.0 or higher.\n\nThe following features are supported:\n\n* `no-std`: Enable a no-std build. (Still uses `alloc`, requires nightly)\n* `vendored`: Build a copy of the C++ library directly, without\n  relying on a system installed version.\n* `botan3`: Link against (the currently unreleased) Botan 3.x rather\n  than the default Botan 2.x\n\nCurrently the crate exposes ciphers, hashes, MACs, KDFs, password based key\nderivation (PBKDF2, Scrypt, Argon2, etc), bcrypt password hashes, random number\ngenerators, X.509 certificates, format preserving encryption, HOTP/TOTP, NIST\nkey wrapping, multiprecision integers, and the usual public key algorithms (RSA,\nECDSA, ECDH, DH, ...)\n\nPRs and comments/issues happily accepted.\n"
 },
 {
  "repo": "jishanshaikh4/cryptography-roadmap",
  "language": null,
  "readme_contents": "# :package: Cryptography-Roadmap\nA road-map for a strong foundation in security and cryptography (cryptanalysis and research)\n\n#### Cryptography\n- Block Cipher\n- Stream Cipher\n\n**Edit_0:** I'll make sure to upload some files from time to time. So please visit again.\n"
 },
 {
  "repo": "calccrypto/Hashes",
  "language": "C++",
  "readme_contents": "A library of cryptographic hashing algorithms\n\nCopyright (c) 2013 - 2017 Jason Lee @ calccrypto at gmail.com\n\nPlease see LICENSE file for license.\n\n[![Build Status](https://travis-ci.org/calccrypto/Hashes.svg?branch=master)](https://travis-ci.org/calccrypto/Hashes)\n<pre>\n\nIMPORTANT:\n    This library was not written for actual use.\n    Rather, it was meant for educational purposes,\n    so if you choose to use it in a real setting\n    where secrecy is required, do so at your own risk.\n    People who use this library to learn about the\n    algorithms can easily add a few std::couts to\n    see the internal data.\n\nHashes:\n    Microsoft's LM Hash\n    MD2\n    MD4\n    MD5\n    RIPEMD-128\n    RIPEMD-160\n    SHA-1\n    SHA-224\n    SHA-256\n    SHA-384\n    SHA-512\n    SHA-3 (independent Keccak implementation active, but not sure on correctness)\n\nMACs\n    HMAC\n    POLY1305AES\n\nBuild:\n\tmake (creates the object files and libHashes.a)\n\n    or\n\n    g++ -std=c++11 main.cpp common/*.cpp Encryptions/*.cpp Hashes/*.cpp -lgmpxx -lgmp\n\n    or some equivalent\n\n    Test code and its makefile are included in the test folder.\n\nUsage:\n    Ex:\n        SHA1 instance(data to hash in ASCII)\n\n        To get digest:\n            instance.digest()\n        To get hex string of digest:\n            instance.hexdigest()\n        To update:\n            instance.update(more data)\n\nNotes:\n    The GNU Multiple Precision Arithmetic Library (GMP) is needed\n    for POly1305-Aes (gmp.org, sudo apt-get install libdev-gmp, or\n    equivalent).\n\n    My Encryptions library is needed for this library. It is included\n    in this project.\n\n    The format was inspired by the Python 2.7 hashlib module\n\n    Hashes.h provides a quick test to check that the algorithms are correct.\n</pre>"
 },
 {
  "repo": "widiot/cryptography",
  "language": "Java",
  "readme_contents": "# cryptography\n\u300a\u5bc6\u7801\u5b66\u539f\u7406\u4e0e\u5b9e\u8df5\u300b\u51af\u767b\u56fd\u7b2c\u4e09\u7248\u2014\u2014Java\u5b9e\u73b0\n"
 },
 {
  "repo": "opentimestamps/javascript-opentimestamps",
  "language": "JavaScript",
  "readme_contents": "\n# javascript-opentimestamps\n\n[![OpenTimestamps logo][2]][1]\n\n[1]: https://opentimestamps.org\n[2]: https://raw.githubusercontent.com/opentimestamps/logo/master/white-bg/website-horizontal-350x75.png (OpenTimestamps logo)\n\n\n[![Build Status](https://travis-ci.org/opentimestamps/javascript-opentimestamps.svg?branch=master)](https://travis-ci.org/opentimestamps/javascript-opentimestamps)\n\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\n\nThis repository hosts the javascript implementation of OpenTimestamps.\n\nIt is based on the python implementation at [Opentimestamps-Python](https://github.com/opentimestamps/python-opentimestamps) and [Opentimestamps-Client](https://github.com/opentimestamps/opentimestamps-client)\n\nIt has been developed as node modules for being used within Node environments along with Node Package Manager.\n> You can also use it in the browser, see the **Installation** section.\n\n[Jsdoc](https://opentimestamps.org/docs/javascript-opentimestamps/) available\n\n## Installation\n\n#### Node\n\n```shell\n$ npm install -g opentimestamps\n```\n\n**Note** up to version `0.4.5` the name of the lib was `javascript-opentimestamps`, from version `0.4.6` on npm is just `opentimestamps`.\n\n#### Browser\n\n##### Get the \"binaries\"\n\nTake the [js](https://opentimestamps.org/assets/javascripts/vendor/opentimestamps.min.js) used by opentimestamps.org \n\n##### Build from source\n\nFrom this repo, install the dev library\n\n```\nnpm install --dev\n```\n\nthen run the gulp process\n\n```\nnpx gulp\n```\n\ninclude the result `/dist/opentimestamps.min.js` in your page\n\n```html\n<script src=\"opentimestamps.min.js\"></script>\n```\n\n\n## Compatibility\n\n#### Node\n\n> This library is tested on CI against version 6.0, 6.1 and 7. See [__Travis build__](https://travis-ci.org/opentimestamps/javascript-opentimestamps.svg?branch=master) \n\nDownload: [__NodeJS__](https://nodejs.org/en/download/)\n\n#### Browser\n\n> The lib is compatible with ECMAScript6(ES6) and ECMAScript5(ES5).\n\nBrowser compatibility:\n\n* [__Chrome__](https://www.google.com/chrome/browser/desktop/index.html) version >= 40\n* [__Chromium__](https://www.chromium.org/getting-involved/download-chromium) version >= 40\n* [__Firefox__](https://www.mozilla.org/en-US/firefox/new/) version >= 40\n* [__Internet Explorer__](https://www.microsoft.com/en-us/download/internet-explorer.aspx) version >= 9\n* [__Safari__](https://support.apple.com/downloads/safari) version >= 8\n\n## Command Line\n\nThe following example requires you installed globally the javascript-opentimestamps library, if you want to test locally just prepend `node` to the command, like `node ots-cli.js --help`\n\n#### Stamp\n\nCreate timestamp `README.md.ots` from this `README.md` with the aid of a remote calendar.\n\n```shell\n$ ots-cli.js stamp README.md\nSubmitting to remote calendar https://alice.btc.calendar.opentimestamps.org\nSubmitting to remote calendar https://bob.btc.calendar.opentimestamps.org\nSubmitting to remote calendar https://finney.calendar.eternitywall.com\nThe timestamp proof 'README.md.ots' has been created!\n```\n\nIf you already have the hash of some file, you don't need to rehash it:\n\n```shell\n$ ots-cli.js stamp -d 05c4f616a8e5310d19d938cfd769864d7f4ccdc2ca8b479b10af83564b097af9\nSubmitting to remote calendar https://alice.btc.calendar.opentimestamps.org\nSubmitting to remote calendar https://bob.btc.calendar.opentimestamps.org\nSubmitting to remote calendar https://finney.calendar.eternitywall.com\nThe timestamp proof '05c4f616a8e5310d19d938cfd769864d7f4ccdc2ca8b479b10af83564b097af9.ots' has been created!\n```\nNote that verify implicity requires the file must be called like the .ots receipt but without the ots, if you timestamp hashes and want to verify you need to rename files accordingly.\n\nThe default hash used `sha256` but you can also specify other hashes like `sha1` or `ripemd` (eg `ots-cli.js stamp -d 4f8d8389200583977943be86f0f74a964a670405 -a sha1`). Note that partially broken hash function like `sha1` is ok for timestamping purpose because they are [still resistant](https://petertodd.org/2017/sha1-and-opentimestamps-proofs) to preimage attacks (their use is discouraged anyway).\n\n\nThe stamp command supports multiple files or hashes as arguments.\n\n```shell\n$ ots-cli.js stamp README.md ots-cli.js\nSubmitting to remote calendar https://alice.btc.calendar.opentimestamps.org\nSubmitting to remote calendar https://bob.btc.calendar.opentimestamps.org\nSubmitting to remote calendar https://finney.calendar.eternitywall.com\nThe timestamp proof 'ots-cli.js.ots' has been created!\nThe timestamp proof 'README.md.ots' has been created!\n```\n\n#### Info\n\nShow information on a timestamp.\n\n```shell\n$ ots-cli.js info examples/incomplete.txt.ots\nFile sha256 hash: 05c4f616a8e5310d19d938cfd769864d7f4ccdc2ca8b479b10af83564b097af9\nTimestamp:\nappend e754bf93806a7ebaa680ef7bd0114bf4\nsha256\nappend b573e8850cfd9e63d1f043fbb6fc250e\nsha256\nprepend 57cfa5c4\nappend 6fb1ac8d4e4eb0e7\nverify PendingAttestation('https://alice.btc.calendar.opentimestamps.org')\n```\n\nYou can have verbose output which clarifies operations, arguments, results and also contains comments showing the involved transaction id and calculated merkle tree root.\n\n```shell\n$ node ots-cli.js info -v examples/hello-world.txt.ots \nFile sha256 hash: 03ba204e50d126e4674c005e04d82e84c21366780af1f43bd54a37816b6ab340\nTimestamp:\nripemd160 == 1df8859e60bc679503d16dcb870e6ce91a57e9df\nprepend 0100000001e482f9d32ecc3ba657b69d898010857b54457a90497982ff56f97c4ec58e6f98010000006b483045022100b253add1d1cf90844338a475a04ff13fc9e7bd242b07762dea07f5608b2de367022000b268ca9c3342b3769cdd062891317cdcef87aac310b6855e9d93898ebbe8ec0121020d8e4d107d2b339b0050efdd4b4a09245aa056048f125396374ea6a2ab0709c6ffffffff026533e605000000001976a9140bf057d40fbba6744862515f5b55a2310de5772f88aca0860100000000001976a914 == 0100000001e482f9d32ecc3ba657b69d898010857b54457a90497982ff56f97c4ec58e6f98010000006b483045022100b253add1d1cf90844338a475a04ff13fc9e7bd242b07762dea07f5608b2de367022000b268ca9c3342b3769cdd062891317cdcef87aac310b6855e9d93898ebbe8ec0121020d8e4d107d2b339b0050efdd4b4a09245aa056048f125396374ea6a2ab0709c6ffffffff026533e605000000001976a9140bf057d40fbba6744862515f5b55a2310de5772f88aca0860100000000001976a9141df8859e60bc679503d16dcb870e6ce91a57e9df\nappend 88ac00000000 == 0100000001e482f9d32ecc3ba657b69d898010857b54457a90497982ff56f97c4ec58e6f98010000006b483045022100b253add1d1cf90844338a475a04ff13fc9e7bd242b07762dea07f5608b2de367022000b268ca9c3342b3769cdd062891317cdcef87aac310b6855e9d93898ebbe8ec0121020d8e4d107d2b339b0050efdd4b4a09245aa056048f125396374ea6a2ab0709c6ffffffff026533e605000000001976a9140bf057d40fbba6744862515f5b55a2310de5772f88aca0860100000000001976a9141df8859e60bc679503d16dcb870e6ce91a57e9df88ac00000000\n# Bitcoin transaction id 7e9f0f7d9daa2d9e51b2e22f4abe814c3f90539afa778a9bef88dc64627cb2ec\nsha256 == 9c6aa9591003377455b6f27fc71b5acfa5fbb2fa49362fa87a25ef0d799dd462\n&\n...content omitted...\n&\nprepend 0be23709859913babd4460bbddf8ed213e7c8773a4b1face30f8acfdf093b705 == 0be23709859913babd4460bbddf8ed213e7c8773a4b1face30f8acfdf093b7053f10376d0aebb4647ff550b60d69ba5ad6b6809d51af6a6476e0312a9433a3bf\nsha256 == faa6e88835c144ad73f48992bc05e691a52a9199df02450194f3a03b530dc2d7\nsha256 == 007ee445d23ad061af4a36b809501fab1ac4f2d7e7a739817dd0cbb7ec661b8a\nverify BitcoinBlockHeaderAttestation(358391)\n# Bitcoin block merkle root 8a1b66ecb7cbd07d8139a7e7d7f2c41aab1f5009b8364aaf61d03ad245e47e00\n\n```\n\n#### Verify\n\nVerify the timestamp attestations with the aid of remote block explorers.\n\n```shell\n$ ots-cli.js verify examples/hello-world.txt.ots\nAssuming target filename is 'examples/hello-world.txt'\nSuccess! Bitcoin block 358391 attests existence as of 2015-05-28 CEST\n```\n\nNote: The verification will always try to use the local bitcoin node first and fallback to asking block explorers if it isn't possible. The connection to the node is made by looking for the `bitcoin.conf` file in the default places according to your OS.\nWhen there is no running local node, or the verification happen in the browser (which cannot access to your file system looking for the `bitcoin.conf` file) the verify ask information to the block explores. Verification using block explorers is convenient but not as secure as asking a local node. \n\n#### Upgrade\n\nUpgrade incomplete remote calendar timestamps to be independently verifiable. This command overwrites the file `examples/incomplete.txt.ots` if needed and makes a backup of the old content at `examples/incomplete.txt.ots.bak`. \n\n```shell\n$ ots-cli.js upgrade examples/incomplete.txt.ots\nTimestamp has been successfully upgraded!\nThe file .bak was saved!\nThe file .ots was upgraded\n```\n\n## From code\n\n> Note that from version 0.1.x to 0.2.x basic method interface changed, an upgrade will require change in your code.\n\n#### Stamp\n\nCreate timestamp of a file with the aid of a remote calendar.\n\n```js\nconst OpenTimestamps = require('opentimestamps');\n\nconst file = Buffer.from('5468652074696d657374616d70206f6e20746869732066696c6520697320696e636f6d706c6574652c20616e642063616e2062652075706772616465642e0a','hex');\nconst detached = OpenTimestamps.DetachedTimestampFile.fromBytes(new OpenTimestamps.Ops.OpSHA256(), file);\nOpenTimestamps.stamp(detached).then( ()=>{\n  const fileOts = detached.serializeToBytes();\n});\n```\nConst `file` created from the hex representation of the file `examples/incomplete.txt`\n\n###### Stamp hash\n\nSometimes you don't want to timestamp a file or you already have the sha256 hash of what you want to timestamp. For example, if you want to timestamp the file `examples/incomplete.txt` and you already have its hash you can do this:\n\n```js\nconst hash = Buffer.from('05c4f616a8e5310d19d938cfd769864d7f4ccdc2ca8b479b10af83564b097af9','hex');\ndetached = DetachedTimestampFile.fromHash(new Ops.OpSHA256(), hash);\n```\n\n###### Stamp multiple data at once\n\nIf you have a lot of files to timestamp it is unconvenient to make a calendar request for every file. In this cases you can build a [merkle tree](https://github.com/opentimestamps/javascript-opentimestamps/blob/7429d35011350f4df29c53b45b76b87adff62ee8/src/open-timestamps.js#L205) by your own or call the stamp function with an array for request, behind the curtain the function will make a merkle tree and perform just one call to the calendars.\n\n```js\n  const files = []; /* init this array with the binary contents of the files you want to timestamp */\n  const detaches = [];\n  files.forEach(file => {\n    const detached = DetachedTimestampFile.fromBytes(new Ops.OpSHA256(), file);\n    detaches.push(detached);\n  });\n  OpenTimestamps.stamp(detaches).then(() => {\n    ots = [];\n    detaches.forEach((timestamp, i) => {\n      ots.push( timestamp.serializeToBytes() );\n    });\n  }).catch(err => {\n    console.error(err);\n  });\n```\n\nThe `ots` array will contain multiple proofs, one for each input.\n\n###### Async Await\n\nIf you prefer the async/await (require Node 7.6+) syntax the promise based API of the library works out of the box:\n\n```js\ngo_async();\n\nasync function go_async() {\n    const hash = Buffer.from('05c4f616a8e5310d19d938cfd769864d7f4ccdc2ca8b479b10af83564b097af9','hex');\n    const detached = OpenTimestamps.DetachedTimestampFile.fromHash(new OpenTimestamps.Ops.OpSHA256(), hash);\n\n    try {\n        await OpenTimestamps.stamp(detached);\n        const fileOts = detached.serializeToBytes();\n    } catch(err) {\n        console.log(err);\n    }\n\n}\n```\n\n#### Info\n\nShow information on a timestamp.\n\n```js\nconst OpenTimestamps = require('opentimestamps');\nconst fileOts = Buffer.from('004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010805c4f616a8e5310d19d938cfd769864d7f4ccdc2ca8b479b10af83564b097af9f010e754bf93806a7ebaa680ef7bd0114bf408f010b573e8850cfd9e63d1f043fbb6fc250e08f10457cfa5c4f0086fb1ac8d4e4eb0e70083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267','hex');\nconst detached = OpenTimestamps.DetachedTimestampFile.deserialize(fileOts);\nconst infoResult = OpenTimestamps.info(detached);\nconsole.log(infoResult);\n```\n\nConst `fileOts` created from the hex representation of the file `examples/incomplete.txt.ots`. You can match the printed result with the file `test/incomplete.txt.ots.info`.\n\n#### Verify\n \nVerify the timestamp attestations.\n\n```js\nconst OpenTimestamps = require('opentimestamps');\nconst file = Buffer.from('5468697320646f63756d656e742069732074696d657374616d706564206f6e20626f7468204c697465636f696e20616e6420426974636f696e20626c6f636b636861696e73','hex');\nconst fileOts = Buffer.from('004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010832bb24ab386bef01c0656944ecafa2dbb1e4162ced385754419467f9fb6f4d97f010c7c118043ce37d45f1ab81d3cd9dc9aa08fff0109b01031328e457c754a860bc5bc567ab08f02012dbcf25d46d7f01c4bd7c7ebdcd2080974b83a9198bc63cdb23f69c817f110508f0203c6274f7a67007de279fb68938e5549f462043570ccdbc17ba43e632a772d43208f1045ab0daf9f008ad9722b721af69e80083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010dfd289ba718b4f30bb78191936c762a508f02026503e60c641473ec6f833953d04f7c8a65c5059a44a7e8c01c8cb9fed2ac2b308f1045ab0dafaf008c0c7948d8d5b64cf0083dfe30d2ef90c8e232268747470733a2f2f6c74632e63616c656e6461722e636174616c6c6178792e636f6d','hex');\nconst detached = OpenTimestamps.DetachedTimestampFile.fromBytes(new OpenTimestamps.Ops.OpSHA256(), file);\nconst detachedOts = OpenTimestamps.DetachedTimestampFile.deserialize(fileOts);\nlet options = {};\n// options.ignoreBitcoinNode - Ignore verification with bitcoin node \noptions.ignoreBitcoinNode = true;\n// options.timeout - Adjust the request timeout (default: 1000) \noptions.timeout = 5000;\nOpenTimestamps.verify(detachedOts,detached,options).then(verifyResult => {\n  // return an object containing timestamp and height for every attestation if verified, undefined otherwise.\n  console.log(verifyResult);\n  // prints:\n  // { bitcoin: { timestamp: 1521545768, height: 514371 },\n  //   litecoin: { timestamp: 1521540398, height: 1388467 } }\n\n});\n```\n\nConst `file` created from the hex representation of the file `examples/ltc-and-btc.txt` while `fileOts` contains `examples/ltc-and-btc.txt.ots`.\n\n#### Upgrade\n\nUpgrade incomplete remote calendar timestamps to be independently verifiable.\n\n```js\nconst OpenTimestamps = require('opentimestamps');\nconst fileOts = Buffer.from('004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010805c4f616a8e5310d19d938cfd769864d7f4ccdc2ca8b479b10af83564b097af9f010e754bf93806a7ebaa680ef7bd0114bf408f010b573e8850cfd9e63d1f043fbb6fc250e08f10457cfa5c4f0086fb1ac8d4e4eb0e70083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267','hex');\nconst detached = OpenTimestamps.DetachedTimestampFile.deserialize(fileOts);\nOpenTimestamps.upgrade(detached).then((changed) => {\n    if (changed) {\n      console.log('Timestamp upgraded');\n      const upgradedFileOts = detached.serializeToBytes();\n    } else {\n      console.log('Timestamp not upgraded');\n    }\n}).catch(err => {\n    console.log(err);\n});\n```\n\n## Pull Requests\n\nPRs are welcome, before reviewing them we wait the travis build concludes successfully, so please check:\n\n*  All tests must pass (`npm test`). (Rarely test fails for networking issue, if you think it's your case ask the maintainers in the comments to relaunch the travis build)\n*  [standard linter](https://github.com/standard/standard) is launched in the build process, any warning found by the linker break the build, so be sure to check warnings by launching `standard` before the commit, most simple errors could be automatically fixed with `standard --fix`\n\n\n## License\n\n[__LGPL3__](https://github.com/opentimestamps/javascript-opentimestamps/blob/master/LICENSE)\n\n\nThe OpenTimestamps Client is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public License as published\nby the Free Software Foundation, either version 3 of the License, or (at your\noption) any later version.\n\nThe OpenTimestamps Client is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. \n"
 },
 {
  "repo": "micahflee/passphraseme",
  "language": "Python",
  "readme_contents": "# passphraseme\n\nA quick and simple cryptographically secure script to generate high entropy passphrases using [the Electronic Frontier Foundation's wordlists](https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases), including their [fandom-inspired wordlists](https://www.eff.org/deeplinks/2018/08/dragon-con-diceware).\n\n## Installation\n\n```sh\npip3 install passphraseme\n```\n\n## Usage\n\nRun `passphraseme` with a number to generate secure passphrases using EFF's short wordlist, like this:\n\n```\n$ passphraseme 7\nplug-scan-skate-shown-ritzy-self-bud\n$ passphraseme 5\ndrank-amino-spoil-badge-copy\n```\n\nYou can also optionally choose a different wordlist. Here are all of the command line arguments:\n\n| Short             | Long                        | Description                                                           |\n|-------------------|-----------------------------|-----------------------------------------------------------------------|\n| `-h`              | `--help`                    | show help message                                                     |\n|                   | `--sep`                     | Separator (default \"-\")                                               |\n| `-l`              | `--large`                   | Use EFF's general large wordlist                                      |\n| `-s1`             | `--short1`                  | Use EFF's general short wordlist (default)                            |\n| `-s2`             | `--short2`                  | Use EFF's short wordlist with unique prefixes                         |\n| `-got`            | `--game-of-thrones`         | Use EFF's Game of Thrones wordlist (Passwords of Westeros)            |\n| `-hp`             | `--harry-potter`            | Use EFF's Harry Potter wordlist (Accio Passphrase!)                   |\n| `-st`             | `--star-trek`               | Use EFF's Star Trek wordlist (Live Long and Passphrase)               |\n| `-sw`             | `--star-wars`               | Use EFF's Star Wars wordlist (The Passphrase Is Strong With This One) |\n| `-d [dictionary]` | `--dictionary [dictionary]` | Custom wordlist filename                                              |\n\nFor example, you can choose to EFF's short wordlist with unique prefixes like this:\n\n```\n$ passphraseme -s2 5\nleftover-human-podiatrist-clergyman-elk\n```\n\nOr you can embrace your inner nerd and use a fandom wordlist:\n\n```\n$ passphraseme --game-of-thrones 5\nskull-putting-twenty-aid-bluntly\n$ passphraseme --harry-potter 5\nsummoning-jealous-loads-somehow-unregistered\n$ passphraseme --star-trek 5\ndestroying-maximum-radiation-yells-causes\n$ passphraseme --star-wars 5\nduels-zett-rock-silenced-blockade\n```\n\nYou can also choose to use a custom wordlist, like this:\n\n```\n$ passphraseme -d /usr/share/dict/words 7\nSphinx's-congas-adjudge-revalue-scotched-decapitations-scampered\n```\n\nAnd if you prefer, you can use a custom separator, like ` ` or `.` instead of `-`:\n\n```\n$ passphraseme --sep \" \" 5\ndrown elder drown sport hula\n$ passphraseme --sep . 5\nstage.stash.speak.shack.pound\n```\n\n## Strength of passphrases\n\nThis table shows the strength (bits of entropy) of `passphraseme`-generated passphrases of different lengths (1-10 words).\n\n|                                | Bits of entropy/word | 1          | 2          | 3          | 4          | 5           | 6              | 7               | 8               | 9                 | 10                |\n|--------------------------------|----------------------|------------|------------|------------|------------|-------------|----------------|-----------------|-----------------|-------------------|-------------------|\n| EFF large wordlist (*default*) | 12.925               | 12.9 (0 s) | 25.8 (0 s) | 38.8 (0 s) | 51.7 (1 h) | 64.6 (1 y)  | 77.5 (10.6k y) | 90.5 (82M y)    | 103.4 (642B y)  | 116.3 (4.99e15 y) | 129.2 (3.88e19 y) |\n| EFF short wordlists            | 10.339               | 10.3 (0 s) | 20.7 (0 s) | 31.0 (0 s) | 41.4 (4 s) | 51.7 (1 h)  | 62.0 (83 d)    | 72.4 (295 y)    | 82.7 (382.3k y) | 93.1 (495M y)     | 103.4 (642B y)    |\n| EFF fandom wordlists           | 11.965               | 12.0 (0 s) | 23.9 (0 s) | 35.9 (0 s) | 47.9 (6 m) | 59.8 (17 d) | 71.8 (196 y)   | 83.8 (787.1k y) | 95.7 (3B y)     | 107.7 (1.26e13 y) | 119.7 (5.04e16 y) |\n\nThe brute force time is calculated like this:\n\nI'm assuming you're using a passphrase for macOS 10.8+ (PBKDF2-SHA512) to\nencrypt your disk with FileVault. According to [this post](https://medium.com/@iraklis/running-hashcat-v4-0-0-in-amazons-aws-new-p3-16xlarge-instance-e8fab4541e9b),\nthe password cracking tool [hashcat](https://hashcat.net/hashcat/) can guess\n193,900 passphrases per second on an Amazon AWS p3.16xlarge instance, which\ncosts $24.48 per hour.\n\nIf an attacker is willing to spend up to $1 billion per day to guess your\npassphrase, they can afford to run 1.7 million of these AWS instances at once,\nmeaning they can guess ~330 billion passphrases per second. On average, a brute\nforce attack will find the passphrase after searching half the keyspace, so the\ntimes above are how long it takes to search half the keyspace.\n\nNote that the time \"3.88e19 y\" means \"3.88 x 10<sup>19</sup> years\". Also note\nthat the brute force times will vary wildly, both much quicker or much slower,\ndepending on the hash function or [KDF](https://en.wikipedia.org/wiki/Key_derivation_function)\nused -- basically, depending on what software you're using this passphrase with.\n\nCheck out [calc_passphrase_strength.py](/scripts/calc_passphrase_strength.py) to\nsee the maths.\n\n## Licenses\n\nThe wordlists included were created by Electronic Frontier Foundation, and are\ndistributed under the Creative Commons Attribution 3.0. For the fandom wordlists\n(Game of Thrones, Harry Potter, Star Trek, and Star Wars), EFF notes that \"Any\ntrademarks within the word list are the property of their respective trademark\nholders, who are not affiliated with the Electronic Frontier Foundation and do\nnot sponsor or endorse these passwords.\"\n"
 },
 {
  "repo": "cossacklabs/themis",
  "language": "C",
  "readme_contents": "<h3 align=\"center\">\n  <a href=\"https://www.cossacklabs.com/themis/\"><img src=\"https://github.com/cossacklabs/themis/wiki/images/logo.png\" alt=\"Themis provides strong, usable cryptography for busy people\" width=\"420\"></a>\n  <br>\n  <br>\n  Themis provides strong, usable cryptography for busy people\n  <br>\n  <br>\n</h3>\n\n---\n\n<p align=\"center\">\n  <a href=\"https://github.com/cossacklabs/themis/releases\"><img src=\"https://img.shields.io/github/release/cossacklabs/themis.svg\" alt=\"GitHub release\"></a>\n  <a href=\"https://github.com/cossacklabs/themis/releases/latest\"><img src=\"https://img.shields.io/badge/platform-Android%20%7C%20iOS%20%7C%20macOS%20%7C%20Linux%20%7C%20Java%20%7C%20WASM-green.svg\" alt=\"Platforms\"></a>\n  <a href='https://coveralls.io/github/cossacklabs/themis'><img src='https://coveralls.io/repos/github/cossacklabs/themis/badge.svg?branch=master' alt='Coverage Status' /></a>\n  <a href='https://goreportcard.com/report/github.com/cossacklabs/themis'><img class=\"badge\" tag=\"github.com/cossacklabs/themis\" src=\"https://goreportcard.com/badge/github.com/cossacklabs/themis\"></a>\n  <br>\n  <a href=\"https://github.com/cossacklabs/themis/actions?query=workflow%3A%22Themis+Core%22\"><img src=\"https://github.com/cossacklabs/themis/workflows/Themis%20Core/badge.svg\" alt=\"Themis Core\"></a>\n  <a href=\"https://github.com/cossacklabs/themis/actions?query=workflow%3A%22Integration+testing%22\"><img src=\"https://github.com/cossacklabs/themis/workflows/Integration%20testing/badge.svg\" alt=\"Integration testing\"></a>\n  <a href=\"https://github.com/cossacklabs/themis/actions?query=workflow%3A%22Code+style%22\"><img src=\"https://github.com/cossacklabs/themis/workflows/Code%20style/badge.svg\" alt=\"Code style\"></a>\n  <a href=\"https://circleci.com/gh/cossacklabs/themis\"><img src=\"https://circleci.com/gh/cossacklabs/themis/tree/master.svg?style=shield\" alt=\"Circle CI\"></a>\n  <a href=\"https://app.bitrise.io/app/69a1d5c9d42fa60f\"><img src=\"https://app.bitrise.io/app/69a1d5c9d42fa60f/status.svg?token=Fp_06Ema5PgzBbZQyQy1bA&branch=master\" alt=\"Bitrise\"></a>\n</p>\n<h4 align=\"center\">General purpose cryptographic library for storage and messaging for iOS (Swift, Obj-C), Android (Java, Kotlin), React Native (iOS, Android), desktop Java, \u0421/\u0421++, Node.js, Python, Ruby, PHP, Go, Rust, WASM.</h4>\n<h4 align=\"center\">Perfect fit for multi-platform apps. Hides cryptographic details. Made by cryptographers for developers \ud83e\udde1</h4>\n\n\n\n## What Themis is\n\nThemis is an open-source high-level cryptographic services library for securing data during authentication, storage, messaging, network exchange, etc. Themis solves 90% of typical data protection use cases that are common for most apps. \n\nThemis helps to build both simple and complex cryptographic features easily, quickly, and securely. Themis allows developers to focus on the main thing: developing their applications.\n\n## Use cases that Themis solves\n\n* **Encrypt stored secrets** in your apps and backend: API keys, session tokens, files.\n\n* **Encrypt sensitive data fields** before storing in database (_\"application-side field-level encryption\"_).\n\n* Support **searchable encryption**, data tokenisation and data masking using Themis and [Acra](https://www.cossacklabs.com/acra/).\n\n* Exchange secrets securely: **share sensitive data** between parties, build simple chat app between patients and doctors.\n\n* Build **end-to-end encryption schemes** with centralised or decentralised architecture: encrypt data locally on one app, use it encrypted everywhere, decrypt only for authenticated user.\n\n* Maintain **real-time secure sessions**: send encrypted messages to control connected devices from your app, receive real-time sensitive data from your apps to your backend.\n\n* **Compare secrets** between parties without revealing them (zero-knowledge proof-based authentication).\n\n* **One cryptographic library that fits them all**: Themis is the best fit for multi-platform apps (e.g., iOS+Android+Electron app with Node.js backend) because it provides 100% compatible API and works in the same way across all supported platforms.\n\n\n## Cryptosystems\n\nThemis provides ready-made building blocks *([\u201ccryptosystems\u201d](https://docs.cossacklabs.com/themis/#cryptosystems))* which simplify usage of core cryptographic security operations.\n\nThemis provides 4 important cryptographic services:\n\n* **[Secure Cell](https://docs.cossacklabs.com/themis/crypto-theory/cryptosystems/secure-cell/)**: a multi-mode cryptographic container suitable for **storing anything** from encrypted files to database records and format-preserved strings. Secure Cell is built around AES-256-GCM, AES-256-CTR.\n* **[Secure Message](https://docs.cossacklabs.com/themis/crypto-theory/cryptosystems/secure-message/)**: a simple **encrypted messaging** solution for the widest scope of applications. Exchange the keys between the parties and you're good to go. Two pairs of underlying cryptosystems: ECC + ECDSA / RSA + PSS + PKCS#7.\n* **[Secure Session](https://docs.cossacklabs.com/themis/crypto-theory/cryptosystems/secure-session/)**: **session-oriented encrypted data exchange** with forward secrecy for better security guarantees and more demanding infrastructures. Secure Session can perfectly function as socket encryption, session security, or a high-level messaging primitive (with some additional infrastructure like PKI). ECDH key agreement, ECC & AES encryption.\n* **[Secure Comparator](https://docs.cossacklabs.com/themis/crypto-theory/cryptosystems/secure-comparator/)**: Zero knowledge proofs-based cryptographic protocol for **authentication** and comparing secrets.\n\nWe created Themis to build other products on top of it - i.e. [Acra](https://www.cossacklabs.com/acra/) and [Hermes](https://www.cossacklabs.com/hermes/).\n\n# Installation\n\nRefer to the [Installation](https://docs.cossacklabs.com/themis/installation/) page to install Themis for your mobile, web, desktop, or server-side application.\nWe highly recommend [installation packages](https://docs.cossacklabs.com/themis/installation/installation-from-packages/) instead of building from source.\n\n\n# Languages\n\nThemis is available for the following languages/platforms, refer to [language howtos](https://docs.cossacklabs.com/themis/getting-started/#language-howtos) for each: \n\n| Platform | Documentation | Examples | Version |\n| :----- | :----- | :------ | :--- |\n| \u269b\ufe0f React Native (iOS, Android) | [React Native Howto](https://docs.cossacklabs.com/themis/languages/react-native/) | [docs/examples/react-native](https://github.com/cossacklabs/themis/tree/master/docs/examples/react-native) | [![npm](https://img.shields.io/npm/v/react-native-themis.svg)](https://www.npmjs.com/package/react-native-themis) |\n| \ud83d\udd36 Swift (iOS, macOS) | [Swift Howto](https://docs.cossacklabs.com/themis/languages/swift/) | [docs/examples/swift](https://github.com/cossacklabs/themis/tree/master/docs/examples/swift) | [![CocoaPods](https://img.shields.io/cocoapods/v/themis.svg)](https://cocoapods.org/pods/themis) |\n| \ud83d\udcf1 Objective-C (iOS, macOS) | [Objective-C Howto](https://docs.cossacklabs.com/themis/languages/objc/) | [docs/examples/objc](https://github.com/cossacklabs/themis/tree/master/docs/examples/objc)| [![CocoaPods](https://img.shields.io/cocoapods/v/themis.svg)](https://cocoapods.org/pods/themis) |\n| \u2615\ufe0f Java (Desktop) | [Java (Desktop) Howto](https://docs.cossacklabs.com/themis/languages/java/installation-desktop/) | [Java projects](https://github.com/cossacklabs/themis-java-examples) | |\n| \u260e\ufe0f Java (Android) | [Java (Android) Howto](https://docs.cossacklabs.com/themis/languages/java/installation-android/) | [Android projects](https://github.com/cossacklabs/themis-java-examples) | [![maven](https://api.bintray.com/packages/cossacklabs/maven/themis/images/download.svg)](https://bintray.com/cossacklabs/maven/themis/_latestVersion) |\n| \ud83d\udcde Kotlin (Android) | [Java (Android) Howto](https://docs.cossacklabs.com/themis/languages/java/installation-android/) | [Android projects](https://github.com/cossacklabs/themis-java-examples) | [![maven](https://api.bintray.com/packages/cossacklabs/maven/themis/images/download.svg)](https://bintray.com/cossacklabs/maven/themis/_latestVersion) |\n| \ud83d\udd3b Ruby | [Ruby Howto](https://docs.cossacklabs.com/themis/languages/ruby/) | [docs/examples/ruby](https://github.com/cossacklabs/themis/tree/master/docs/examples/ruby) | [![Gem](https://img.shields.io/gem/v/rbthemis.svg)](https://rubygems.org/gems/rbthemis) |\n| \ud83d\udc0d Python | [Python Howto](https://docs.cossacklabs.com/themis/languages/python/) | [docs/examples/python](https://github.com/cossacklabs/themis/tree/master/docs/examples/python) | [![PyPI](https://img.shields.io/pypi/v/pythemis.svg)](https://pypi.python.org/pypi?%3Aaction=search&term=pythemis&submit=search) |\n| \ud83d\udc18 PHP | [PHP Howto](https://docs.cossacklabs.com/themis/languages/php/) | [docs/examples/php](https://github.com/cossacklabs/themis/tree/master/docs/examples/php) | |\n| \u2795 C++ | [CPP Howto](https://docs.cossacklabs.com/themis/languages/cpp/) | [docs/examples/c++](https://github.com/cossacklabs/themis/tree/master/docs/examples/c%2B%2B) ||\n| \ud83c\udf6d Node.js | [Javascript (Node.js) Howto](https://docs.cossacklabs.com/themis/languages/nodejs/) | [docs/examples/js](https://github.com/cossacklabs/themis/tree/master/docs/examples/js) | [![npm](https://img.shields.io/npm/v/jsthemis.svg)](https://www.npmjs.com/package/jsthemis) |\n| \ud83d\udda5 WebAssembly | [Javascript (WebAssembly) Howto](https://docs.cossacklabs.com/themis/languages/wasm/)| [docs/examples/js](https://github.com/cossacklabs/themis/tree/master/docs/examples/js) | [![npm](https://img.shields.io/npm/v/wasm-themis.svg)](https://www.npmjs.com/package/wasm-themis) |\n| \ud83d\udc39 Go | [Go Howto](https://docs.cossacklabs.com/themis/languages/go/)| [docs/examples/go](https://github.com/cossacklabs/themis/tree/master/docs/examples/go) | [![go.dev](https://img.shields.io/badge/go.dev-v0.14.0-007d9c)](https://pkg.go.dev/mod/github.com/cossacklabs/themis/gothemis) |\n| \ud83e\udd80 Rust | [Rust Howto](https://docs.cossacklabs.com/themis/languages/rust/)| [docs/examples/rust](https://github.com/cossacklabs/themis/tree/master/docs/examples/rust) | [![crates](https://img.shields.io/crates/v/themis.svg)](https://crates.io/crates/themis)|\n| \ud83d\udd78 \u0421++ PNaCl for Google Chrome||[WebThemis project](https://github.com/cossacklabs/webthemis)|\n\n# Availability\n\nThemis supports following CPU architectures: x86_64/i386, ARM, Apple Silicon (ARM64), various Android architectures.\n\nWe build and verify Themis on the latest stable OS versions:\n\n  - Debian (9, 10), CentOS (7, 8), Ubuntu (16.04, 18.04, 20.04)\n  - macOS (10.12\u201310.15, 11.*)\n  - Android (7\u201312)\n  - iOS (11\u201315)\n  - Windows (experimental MSYS2 support)\n\nWe plan to expand this list with a broader set of platforms.\nIf you'd like to help improve or bring Themis to your favourite platform or language \u2014\n[get in touch](mailto:dev@cossacklabs.com).\n\n# Documentation\n\n[Documentation for Themis](https://docs.cossacklabs.com/themis/) contains the ever-evolving official docs, which covers everything from deployment guidelines to use cases, with brief explanations of cryptosystems and architecture behind the main Themis library. \n\nRefer to the documentation to learn more about:\n- [cryptography in Themis](https://docs.cossacklabs.com/themis/crypto-theory/) ([Themis cryptosystems and attacks on them](https://docs.cossacklabs.com/themis/crypto-theory/cryptosystems/), [cryptography donors](https://docs.cossacklabs.com/themis/crypto-theory/cryptography-donors/), [key management advice](https://docs.cossacklabs.com/themis/crypto-theory/key-management/), [FIPS 140-2 and GOST](https://docs.cossacklabs.com/themis/crypto-theory/fips-and-gost/)),\n- [debugging and troubleshooting Themis](https://docs.cossacklabs.com/themis/debugging/) ([command-line utilities](https://docs.cossacklabs.com/themis/debugging/cli-utilities/), [thread safety](https://docs.cossacklabs.com/themis/debugging/thread-safety/), [migration guidelines between Themis versions](https://docs.cossacklabs.com/themis/debugging/migration-guides/)),  \n- [Themis architecture](https://docs.cossacklabs.com/themis/architecture/),\n- [Themis security](https://docs.cossacklabs.com/themis/security/) ([Themis and OWASP](https://docs.cossacklabs.com/themis/security/owasp/), [Themis development security practices](https://docs.cossacklabs.com/themis/security/dev-security-practices/)),\n- [community behind Themis](https://docs.cossacklabs.com/themis/community/) ([contributing guidelines](https://docs.cossacklabs.com/themis/community/contributing/), [credits and honorable mentions](https://docs.cossacklabs.com/themis/community/credits/),  [projects that use Themis](https://docs.cossacklabs.com/themis/community/projects-that-use-themis/), [tutorials](https://docs.cossacklabs.com/themis/community/tutorials-workshops-talks/), [workshops and talks](https://docs.cossacklabs.com/themis/community/tutorials-workshops-talks/)).\n\n# Cryptography\n\nThemis relies on proven cryptographic algorithms implemented by well-known cryptography libraries such as OpenSSL, LibreSSL, BoringSSL. Refer to [Cryptograhy in Themis](https://docs.cossacklabs.com/themis/crypto-theory/) docs to learn more.\n\n\nThis distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country's laws, regulations, and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See http://www.wassenaar.org/ for more information.\n\nThe U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this distribution make it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.\n\n# Submitting apps to the App Store\n\nIf your application uses Themis and you want to submit it to the Apple App Store, there are certain requirements towards declaring use of any cryptography.\n\nRead about [Apple export regulations on cryptography for Themis](https://docs.cossacklabs.com/themis/regulations/apple-crypto-regulations/) to find out what to do.\n\n# Security\n\nEach change in Themis core library is being reviewed and approved by our internal team of cryptographers and security engineers. For every release, we perform internal audits by cryptographers who don't work on Themis.\n\nWe use a lot of automated security testing, i.e. static code analysers, fuzzing tools, memory analysers, unit tests (per each platform), integration tests (to find compatibility issues between different Themis-supported languages, OS and x86/x64 architectures). Read more about our security testing practices in [Themis security docs](https://docs.cossacklabs.com/themis/security/).\n\nIf you believe that you've found a security-related issue, please drop us an email to [dev@cossacklabs.com](mailto:dev@cossacklabs.com). Bug bounty program may apply.\n\n# GDPR, HIPAA, CCPA  \n\nAs a cryptographic services library for mobile and server platforms, Themis is a [\"state of the art\"](https://gdpr-info.eu/art-32-gdpr/) encryption tool, which provides secure data exchange and storage. \n\nUsing Themis, you can reach better compliance with the current data privacy regulations, such as:     \n* [General Data Protection Regulation (GDPR)](https://gdpr-info.eu/)   \n* [HIPAA (Health Insurance Portability and Accountability Act)](https://en.wikipedia.org/wiki/Health_Insurance_Portability_and_Accountability_Act)        \n* [DPA (Data Protection Act)](http://www.legislation.gov.uk/ukpga/2018/12/contents/enacted)     \n* [CCPA (California Consumer Privacy Act)](https://en.wikipedia.org/wiki/California_Consumer_Privacy_Act)      \n\nRead more about [Regulations](https://docs.cossacklabs.com/themis/regulations/) in docs.\n\n# Community\n\nThemis is [recommended by OWASP](https://github.com/OWASP/owasp-mstg/blob/1.1.0/Document/0x06e-Testing-Cryptography.md#third-party-libraries) as data encryption library for mobile platforms.\n\n\nThemis is widely-used for both non-commercial and commercial projects, [some public applications and libraries can be found here](https://docs.cossacklabs.com/themis/community/projects-that-use-themis/).\n\nWant to be featured on our blog and on the list of contributors, too? [Write us](mailto:dev@cossacklabs.com) about the project you\u2019ve created using Themis!\n\n# Contributing\n\nIf you're looking for something to contribute to and gain eternal respect, just pick the things in the [list of issues](https://github.com/cossacklabs/themis/issues). Head over to our [Contribution guidelines](https://docs.cossacklabs.com/themis/community/contributing/) as your starting point.\n\nSupporting Themis for all these numerous platforms is hard work, but we try to do our best to make using Themis convenient for everyone. Most issues that our users encounter are connected with the installation process and dependency management. If you face any challenges, please [let us know](https://github.com/cossacklabs/themis/issues).\n\n# Commercial support\n\nAt Cossack Labs, we offer professional support services for Themis and applications using Themis. \n\nThis support includes, but is not limited to the library integration, with a focus on web and mobile applications; designing and building end-to-end encryption schemes for mobile applications; security audits, for in-house library integrations or high-level protocol; custom application development that requires cryptography; consulting and [training services](https://training.cossacklabs.com).\n\nDrop us an email to [info@cossacklabs.com](mailto:info@cossacklabs.com) or check out the [Cossack Labs cybersecurity services](https://www.cossacklabs.com/services/overview/).\n\n# Contacts\n\nIf you want to ask a technical question, report a bug or suggest a feature,\nfeel free to [start a discussion on GitHub](https://github.com/cossacklabs/themis/discussions),\nraise an issue in the [issue tracker](https://github.com/cossacklabs/themis/issues),\nor write to [dev@cossacklabs.com](mailto:dev@cossacklabs.com).\n\nTo talk to the business wing of Cossack Labs Limited, drop us an email to [info@cossacklabs.com](mailto:info@cossacklabs.com).\n\n[![Blog](https://img.shields.io/badge/blog-cossacklabs.com-7a7c98.svg)](https://cossacklabs.com/) [![Twitter CossackLabs](https://img.shields.io/badge/twitter-cossacklabs-fbb03b.svg)](http://twitter.com/cossacklabs) [![Dev.to CossackLabs](https://img.shields.io/badge/dev.to-%40cossacklabs-orange.svg)](https://dev.to/@cossacklabs/) [![Medium CossackLabs](https://img.shields.io/badge/medium-%40cossacklabs-orange.svg)](https://medium.com/@cossacklabs/) \n\n[![Closed pull requests with Bitcode-related changes](https://img.shields.io/github/issues-pr-closed/cossacklabs/themis/Bitcode%20%F0%9F%90%99?color=informational&label=Bitcode-related%20issues)](https://github.com/cossacklabs/themis/pulls?q=is%3Apr+is%3Aclosed+label%3A%22Bitcode+%F0%9F%90%99%22)\n\n<!--[![Join the chat at https://gitter.im/cossacklabs/themis](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/cossacklabs/themis?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) -->\n"
 },
 {
  "repo": "jeremywohl/nacl",
  "language": "C",
  "readme_contents": "A mirror of Daniel Bernstein (djb) and Tanja Lange's \"NaCl: Networking and Cryptography library\",\ntagged for each release.  The main distribution is bereft of public repository or even a changelog;\nthis is kept for version sanity.\n\n  main site: http://nacl.cr.yp.to/\n\nRelease: 20090405\nRelease: 20110221\n"
 },
 {
  "repo": "conda-forge/cryptography-feedstock",
  "language": "Python",
  "readme_contents": "About cryptography\n==================\n\nHome: cryptography.io\n\nPackage license: Apache-2.0 AND BSD-3-Clause AND PSF-2.0 AND MIT\n\nFeedstock license: [BSD-3-Clause](https://github.com/conda-forge/cryptography-feedstock/blob/main/LICENSE.txt)\n\nSummary: cryptography is a package designed to expose cryptographic primitives and recipes to Python developers.\n\nDevelopment: https://github.com/pyca/cryptography\n\nDocumentation: http://cryptography.readthedocs.io/\n\ncryptography is a package which provides cryptographic recipes and\nprimitives to Python developers. Our goal is for it to be your\n\"cryptographic standard library\". It supports Python 3.6+ and PyPy3 7.2+.\ncryptography includes both high level recipes and low level interfaces\nto common cryptographic algorithms such as symmetric ciphers, message\ndigests, and key derivation functions..\n\n\nCurrent build status\n====================\n\n\n<table>\n    \n  <tr>\n    <td>Azure</td>\n    <td>\n      <details>\n        <summary>\n          <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n            <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main\">\n          </a>\n        </summary>\n        <table>\n          <thead><tr><th>Variant</th><th>Status</th></tr></thead>\n          <tbody><tr>\n              <td>linux_64_python3.10.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_64_python3.10.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_64_python3.7.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_64_python3.7.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_64_python3.8.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_64_python3.8.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_64_python3.8.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_64_python3.8.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_64_python3.9.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_64_python3.9.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_64_python3.9.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_64_python3.9.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_aarch64_python3.10.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_aarch64_python3.10.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_aarch64_python3.7.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_aarch64_python3.7.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_aarch64_python3.8.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_aarch64_python3.8.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_aarch64_python3.8.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_aarch64_python3.8.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_aarch64_python3.9.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_aarch64_python3.9.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_aarch64_python3.9.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_aarch64_python3.9.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_ppc64le_python3.10.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_ppc64le_python3.10.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_ppc64le_python3.7.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_ppc64le_python3.7.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_ppc64le_python3.8.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_ppc64le_python3.8.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_ppc64le_python3.8.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_ppc64le_python3.8.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_ppc64le_python3.9.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_ppc64le_python3.9.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>linux_ppc64le_python3.9.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=linux&configuration=linux_ppc64le_python3.9.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>osx_64_python3.10.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=osx&configuration=osx_64_python3.10.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>osx_64_python3.7.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=osx&configuration=osx_64_python3.7.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>osx_64_python3.8.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=osx&configuration=osx_64_python3.8.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>osx_64_python3.8.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=osx&configuration=osx_64_python3.8.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>osx_64_python3.9.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=osx&configuration=osx_64_python3.9.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>osx_64_python3.9.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=osx&configuration=osx_64_python3.9.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>osx_arm64_python3.10.____cpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=osx&configuration=osx_arm64_python3.10.____cpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>osx_arm64_python3.8.____cpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=osx&configuration=osx_arm64_python3.8.____cpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>osx_arm64_python3.9.____cpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=osx&configuration=osx_arm64_python3.9.____cpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>win_64_python3.10.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=win&configuration=win_64_python3.10.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>win_64_python3.7.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=win&configuration=win_64_python3.7.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>win_64_python3.8.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=win&configuration=win_64_python3.8.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>win_64_python3.8.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=win&configuration=win_64_python3.8.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>win_64_python3.9.____73_pypypython_implpypy</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=win&configuration=win_64_python3.9.____73_pypypython_implpypy\" alt=\"variant\">\n                </a>\n              </td>\n            </tr><tr>\n              <td>win_64_python3.9.____cpythonpython_implcpython</td>\n              <td>\n                <a href=\"https://dev.azure.com/conda-forge/feedstock-builds/_build/latest?definitionId=195&branchName=main\">\n                  <img src=\"https://dev.azure.com/conda-forge/feedstock-builds/_apis/build/status/cryptography-feedstock?branchName=main&jobName=win&configuration=win_64_python3.9.____cpythonpython_implcpython\" alt=\"variant\">\n                </a>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </details>\n    </td>\n  </tr>\n</table>\n\nCurrent release info\n====================\n\n| Name | Downloads | Version | Platforms |\n| --- | --- | --- | --- |\n| [![Conda Recipe](https://img.shields.io/badge/recipe-cryptography-green.svg)](https://anaconda.org/conda-forge/cryptography) | [![Conda Downloads](https://img.shields.io/conda/dn/conda-forge/cryptography.svg)](https://anaconda.org/conda-forge/cryptography) | [![Conda Version](https://img.shields.io/conda/vn/conda-forge/cryptography.svg)](https://anaconda.org/conda-forge/cryptography) | [![Conda Platforms](https://img.shields.io/conda/pn/conda-forge/cryptography.svg)](https://anaconda.org/conda-forge/cryptography) |\n\nInstalling cryptography\n=======================\n\nInstalling `cryptography` from the `conda-forge` channel can be achieved by adding `conda-forge` to your channels with:\n\n```\nconda config --add channels conda-forge\nconda config --set channel_priority strict\n```\n\nOnce the `conda-forge` channel has been enabled, `cryptography` can be installed with `conda`:\n\n```\nconda install cryptography\n```\n\nor with `mamba`:\n\n```\nmamba install cryptography\n```\n\nIt is possible to list all of the versions of `cryptography` available on your platform with `conda`:\n\n```\nconda search cryptography --channel conda-forge\n```\n\nor with `mamba`:\n\n```\nmamba search cryptography --channel conda-forge\n```\n\nAlternatively, `mamba repoquery` may provide more information:\n\n```\n# Search all versions available on your platform:\nmamba repoquery search cryptography --channel conda-forge\n\n# List packages depending on `cryptography`:\nmamba repoquery whoneeds cryptography --channel conda-forge\n\n# List dependencies of `cryptography`:\nmamba repoquery depends cryptography --channel conda-forge\n```\n\n\nAbout conda-forge\n=================\n\n[![Powered by\nNumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org)\n\nconda-forge is a community-led conda channel of installable packages.\nIn order to provide high-quality builds, the process has been automated into the\nconda-forge GitHub organization. The conda-forge organization contains one repository\nfor each of the installable packages. Such a repository is known as a *feedstock*.\n\nA feedstock is made up of a conda recipe (the instructions on what and how to build\nthe package) and the necessary configurations for automatic building using freely\navailable continuous integration services. Thanks to the awesome service provided by\n[Azure](https://azure.microsoft.com/en-us/services/devops/), [GitHub](https://github.com/),\n[CircleCI](https://circleci.com/), [AppVeyor](https://www.appveyor.com/),\n[Drone](https://cloud.drone.io/welcome), and [TravisCI](https://travis-ci.com/)\nit is possible to build and upload installable packages to the\n[conda-forge](https://anaconda.org/conda-forge) [Anaconda-Cloud](https://anaconda.org/)\nchannel for Linux, Windows and OSX respectively.\n\nTo manage the continuous integration and simplify feedstock maintenance\n[conda-smithy](https://github.com/conda-forge/conda-smithy) has been developed.\nUsing the ``conda-forge.yml`` within this repository, it is possible to re-render all of\nthis feedstock's supporting files (e.g. the CI configuration files) with ``conda smithy rerender``.\n\nFor more information please check the [conda-forge documentation](https://conda-forge.org/docs/).\n\nTerminology\n===========\n\n**feedstock** - the conda recipe (raw material), supporting scripts and CI configuration.\n\n**conda-smithy** - the tool which helps orchestrate the feedstock.\n                   Its primary use is in the construction of the CI ``.yml`` files\n                   and simplify the management of *many* feedstocks.\n\n**conda-forge** - the place where the feedstock and smithy live and work to\n                  produce the finished article (built conda distributions)\n\n\nUpdating cryptography-feedstock\n===============================\n\nIf you would like to improve the cryptography recipe or build a new\npackage version, please fork this repository and submit a PR. Upon submission,\nyour changes will be run on the appropriate platforms to give the reviewer an\nopportunity to confirm that the changes result in a successful build. Once\nmerged, the recipe will be re-built and uploaded automatically to the\n`conda-forge` channel, whereupon the built conda packages will be available for\neverybody to install and use from the `conda-forge` channel.\nNote that all branches in the conda-forge/cryptography-feedstock are\nimmediately built and any created packages are uploaded, so PRs should be based\non branches in forks and branches in the main repository should only be used to\nbuild distinct package versions.\n\nIn order to produce a uniquely identifiable distribution:\n * If the version of a package **is not** being increased, please add or increase\n   the [``build/number``](https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#build-number-and-string).\n * If the version of a package **is** being increased, please remember to return\n   the [``build/number``](https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#build-number-and-string)\n   back to 0.\n\nFeedstock Maintainers\n=====================\n\n* [@h-vetinari](https://github.com/h-vetinari/)\n* [@jakirkham](https://github.com/jakirkham/)\n* [@ocefpaf](https://github.com/ocefpaf/)\n\n"
 },
 {
  "repo": "scipr-lab/dizk",
  "language": "Java",
  "readme_contents": "<h1 align=\"center\">DIZK</h1>\n<p align=\"center\">\n    <a href=\"https://travis-ci.org/scipr-lab/dizk\"><img src=\"https://travis-ci.org/scipr-lab/dizk.svg?branch=master\"></a>\n    <a href=\"https://github.com/scipr-lab/dizk/blob/master/AUTHORS\"><img src=\"https://img.shields.io/badge/authors-SCIPR%20Lab-orange.svg\"></a>\n    <a href=\"https://github.com/scipr-lab/dizk/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n</p>\n<h4 align=\"center\">Java library for distributed zero knowledge proof systems</h4>\n\n___DIZK___ (pronounced */'diz\u0259k/*) is a Java library for distributed zero knowledge proof systems. The library implements distributed polynomial evaluation/interpolation, computation of Lagrange polynomials, and multi-scalar multiplication. Using these scalable arithmetic subroutines, the library provides a distributed zkSNARK proof system that enables verifiable computations of up to billions of logical gates, far exceeding the scale of previous state-of-the-art solutions.\n\nThe library is developed by [SCIPR Lab](http://www.scipr-lab.org/) and contributors (see [AUTHORS](AUTHORS) file) and is released under the MIT License (see [LICENSE](LICENSE) file).\n\nThe library is developed as part of a paper called *\"[DIZK: A Distributed Zero Knowledge Proof System](https://eprint.iacr.org/2018/691)\"*.\n\n**WARNING:** This is an academic proof-of-concept prototype. This implementation is not ready for production use. It does not yet contain all the features, careful code review, tests, and integration that are needed for a deployment!\n\n## Table of contents\n\n- [Directory structure](#directory-structure)\n- [Overview](#overview)\n- [Build guide](#build-guide)\n- [Profiler](#profiler)\n- [Benchmarks](#benchmarks)\n- [References](#references)\n- [License](#license)\n\n## Directory structure\n\nThe directory structure is as follows:\n\n* [__src__](src): Java directory for source code and unit tests\n  * [__main/java__](src/main/java): Java source code, containing the following modules:\n    * [__algebra__](src/main/java/algebra): fields, groups, elliptic curves, FFT, multi-scalar multiplication\n    * [__bace__](src/main/java/bace): batch arithmetic circuit evaluation\n    * [__common__](src/main/java/common): standard arithmetic and Spark computation utilities\n    * [__configuration__](src/main/java/configuration): configuration settings for the Spark cluster\n    * [__profiler__](src/main/java/profiler): profiling infrastructure for zero-knowledge proof systems\n    * [__reductions__](src/main/java/reductions): reductions between languages (used internally)\n    * [__relations__](src/main/java/relations): interfaces for expressing statement (relations between instances and witnesses) as various NP-complete languages\n    * [__zk_proof_systems__](src/main/java/zk_proof_systems): serial and distributed implementations of zero-knowledge proof systems\n  * [__test/java__](src/test/java): Java unit tests for the provided modules and infrastructure\n\n## Overview\n\nThis library implements a distributed zero knowledge proof system, enabling scalably proving (and verifying) the integrity of computations, in zero knowledge.\n\nA prover who knows the witness for an NP statement (i.e., a satisfying input/assignment) can produce a short proof attesting to the truth of the NP statement. This proof can then be verified by anyone, and offers the following properties.\n\n- **Zero knowledge** - the verifier learns nothing from the proof besides the truth of the statement.\n- **Succinctness** - the proof is small in size and cheap to verify.\n- **Non-interactivity** - the proof does not require back-and-forth interaction between the prover and the verifier.\n- **Soundness** - the proof is computationally sound (such a proof is called an *argument*).\n- **Proof of knowledge** - the proof attests not just that the NP statement is true, but also that the prover knows why.\n\nThese properties comprise a **zkSNARK**, which stands for *Zero-Knowledge Succinct Non-interactive ARgument of Knowledge*.\nFor formal definitions and theoretical discussions about these, see [BCCT12] [BCIOP13] and the references therein.\n\n**DIZK** provides Java-based implementations using Apache Spark [Apa17] for:\n\n1. Proof systems\n    - A serial and distributed preprocessing zkSNARK for *R1CS* (Rank-1 Constraint Systems), an NP-complete language that resembles arithmetic circuit satisfiability. The zkSNARK is the protocol in [Gro16].\n    - A distributed Merlin-Arthur proof system for evaluating arithmetic circuits on batches of inputs; see [Wil16].\n2. Scalable arithmetic\n    - A serial and distributed radix-2 fast Fourier transform (FFT); see [Sze11].\n    - A serial and distributed multi-scalar multiplication (MSM); see [BGMW93] [Pip76] [Pip80].\n    - A serial and distributed Lagrange interpolation (Lag); see [BT04].\n3. Applications using the above zkSNARK for\n    - Authenticity of photos on three transformations (crop, rotation, blur); see [NT16].\n    - Integrity of machine learning models with support for linear regression and covariance matrices; see [Bis06] [Can69] [LRF97] [vW97].\n\n## Build guide\n\nThe library has the following dependencies:\n\n- [Java SE 8+](http://www.oracle.com/technetwork/java/javase/overview/index.html)\n- [Apache Maven](https://maven.apache.org/)\n- Fetched from `pom.xml` via Maven:\n    - [Spark Core 2.10](https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.10/1.0.0)\n    - [Spark SQL 2.10](https://mvnrepository.com/artifact/org.apache.spark/spark-sql_2.10/2.1.0)\n    - [JUnit 4.11](https://mvnrepository.com/artifact/junit/junit/4.11)\n    - [Google Java Format](https://github.com/google/google-java-format)\n- Fetched via Git submodules:\n    - [spark-ec2](https://github.com/amplab/spark-ec2/tree/branch-2.0)\n    \n### Why Java?\n\nThis library uses Apache Spark, an open-source cluster-computing framework that natively supports Java, Scala, and Python. Among these, we found Java to fit our goals because we could leverage its rich features for object-oriented programming and we could control execution in a (relatively) fine-grained way.\n\nWhile other libraries for zero knowledge proof systems are written in low-level languages (e.g., [libsnark](https://github.com/scipr-lab/libsnark) is written in C++ and [bellman](https://github.com/zkcrypto/bellman) in Rust), harnessing the speed of such languages in our setting is not straightforward. For example, we evaluated the possibility of interfacing with C (using native binding approaches like JNI and JNA), and concluded that the cost of memory management and process inferfacing resulted in a slower performance than from purely native Java execution.\n\n### Installation\n\nStart by cloning this repository and entering the repository working directory:\n```$xslt\ngit clone https://github.com/scipr-lab/dizk.git\ncd dizk\n```\n\nNext, fetch the dependency modules:\n```$xslt\ngit submodule init && git submodule update\n```\n\nFinally, compile the source code:\n```$xslt\nmvn compile\n```\n\n### Docker\n\n```\ncd your_dizk_project_directory\n\ndocker build -t dizk-container .\ndocker run -it dizk-container bash\n```\n\n### Testing\n\nThis library comes with unit tests for each of the provided modules. Run the tests with:\n```$xslt\nmvn test\n``` \n\n## Profiler\n\nUsing Amazon EC2, the profiler benchmarks the performance of serial and distributed zero-knowledge proof systems, as well as its underlying primitives.\nThe profiler uses `spark-ec2` to manage the cluster compute environment and a set of provided scripts for launch, profiling, and shutdown.\n\n### Spark EC2\n\nTo manage the cluster compute environment, DIZK uses [`spark-ec2@branch-2.0`](https://github.com/amplab/spark-ec2/tree/branch-2.0).\n`spark-ec2` is a tool to launch, maintain, and terminate [Apache Spark](https://spark.apache.org/docs/latest/) clusters on Amazon EC2.\n\nTo setup `spark-ec2`, run the following commands:\n```$xslt\ngit clone https://github.com/amplab/spark-ec2.git\ncd spark-ec2\ngit checkout branch-2.0\npwd\n```\n\nRemember where the directory for `spark-ec2` is located, as this will need to be provided as an environment variable for the scripts as part of the next step.\n\n### Profiling scripts\n\nTo begin, set the environment variables required to initialize the profiler in [init.sh](src/main/java/profiler/scripts/init.sh).\nThe profiling infrastructure will require access to an AWS account access key and secret key, which can be created with\nthe [instructions provided by AWS](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys).\n\n```$xslt\nexport AWS_ACCESS_KEY_ID={Insert your AWS account access key}\nexport AWS_SECRET_ACCESS_KEY={Insert your AWS account secret key}\n\nexport AWS_KEYPAIR_NAME=\"{Insert your AWS keypair name, e.g. spark-ec2-oregon}\"\nexport AWS_KEYPAIR_PATH=\"{Insert the path to your AWS keypair .pem file, e.g. /Users/johndoe/Downloads/spark-ec2-oregon.pem}\"\n\nexport AWS_REGION_ID={Insert your AWS cluster region choice, e.g. us-west-2}\nexport AWS_CLUSTER_NAME={Insert your AWS cluster name, e.g. spark-ec2}\n\nexport SPOT_PRICE={Insert your spot price for summoning an EC2 instance, e.g. 0.1}\nexport SLAVES_COUNT={Insert the number of EC2 instances to summon for the cluster, e.g. 2}\nexport INSTANCE_TYPE={Insert the instance type you would like to summon, e.g. r3.large}\n\nexport DIZK_REPO_PATH=\"{Insert the path to your local DIZK repository, e.g. /Users/johndoe/dizk}\"\nexport SPARK_EC2_PATH=\"{Insert the path to your local spark-ec2 repository, e.g. /Users/johndoe/dizk/depends/spark-ec2}\"\n```\n\nNext, start the profiler by running:\n```$xslt\n./launch.sh\n```\n\nThe launch script uses `spark-ec2` and the environment variables to setup the initial cluster environment.\nThis process takes around 20-30 minutes depending on the choice of cluster configuration.\n\nAfter the launch is complete, upload the DIZK JAR file to the master node and SSH into the cluster with the following command:\n```$xslt\n./upload_and_login.sh\n```\n\nOnce you have successfully logged in to the cluster, navigate to the uploaded `scripts` folder and setup the initial cluster environment.\n\n```$xslt\ncd ../scripts\n./setup_environment.sh\n```\n\nThis creates a logging directory for Spark events and installs requisite dependencies, such as Java 8.\n\nLastly, with the cluster environment fully setup, set the desired parameters for benchmarking in [profile.sh](src/main/java/profiler/scripts/profile.sh) and run the following command to begin profiling:\n```$xslt\n./profile.sh\n```\n\n## Benchmarks\n\nWe evaluate the distributed implementation of the zkSNARK setup and prover.\nBelow we use *instance size* to denote the number of constraints in an R1CS instance.\n\n### libsnark *vs* DIZK\n\nWe measure the largest instance size (as a power of 2) that is supported by:\n\n- the serial implementation of PGHR\u2019s protocol in [libsnark](https://github.com/scipr-lab/libsnark)\n- the serial implementation of Groth\u2019s protocol in [libsnark](https://github.com/scipr-lab/libsnark)\n- the distributed implementation of Groth's protocol in **DIZK**\n\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/9260812/43099291-9203db9a-8e76-11e8-8d68-528d903500e1.png\" width=\"68%\"></p>\n\nWe see that using more executors allows us to support larger instance sizes,\nin particular supporting billions of constraints with sufficiently many executors.\nInstances of this size are much larger than what was previously possible via serial techniques.\n\n### Distributed zkSNARK\n\nWe benchmark the running time of the setup and the prover on an increasing number of constraints and with an increasing number of executors.\nNote that we do not need to evaluate the zkSNARK verifier as it is a simple and fast algorithm that can be run even on a smartphone.\n\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/9260812/43099290-91ec40c0-8e76-11e8-8391-c30fbddc4acd.png\" width=\"67%\"></p>\n\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/9260812/43099289-91d1d2b2-8e76-11e8-9a25-f06103903290.png\" width=\"59%\"></p>\n\nOur benchmarks of the setup and the prover show us that:\n \n1. For a given number of executors, running times increase nearly linearly as expected, demonstrating scalability over a wide range of instance sizes.\n\n2. For a given instance size, running times decrease nearly linearly as expected, demonstrating parallelization over a wide range of number of executors.\n\n## References\n\n[Apa17] [_Apache Spark_](http://spark.apache.org/),\nApache Spark,\n2017\n\n[Bis06] [_Pattern recognition and machine learning_](https://www.springer.com/us/book/9780387310732),\nChristopher M. Bishop,\n*Book*, 2006\n\n[BCCT12] [_From extractable collision resistance to succinct non-interactive arguments of knowledge, and back again_](http://eprint.iacr.org/2011/443),\nNir Bitansky, Ran Canetti, Alessandro Chiesa, Eran Tromer,\n*Innovations in Theoretical Computer Science* (ITCS), 2012\n\n[BCIOP13] [_Succinct non-interactive arguments via linear interactive proofs_](http://eprint.iacr.org/2012/718),\nNir Bitansky, Alessandro Chiesa, Yuval Ishai, Rafail Ostrovsky, Omer Paneth,\n*Theory of Cryptography Conference* (TCC), 2013\n\n[BGMW93] [_Fast exponentiation with precomputation_](https://link.springer.com/chapter/10.1007/3-540-47555-9_18),\nErnest F. Brickell, Daniel M. Gordon, Kevin S. McCurley, and David B. Wilson,\n*International Conference on the Theory and Applications of Cryptographic Techniques* (EUROCRYPT), 1992\n\n[BT04] [_Barycentric Lagrange interpolation_](https://people.maths.ox.ac.uk/trefethen/barycentric.pdf),\nJean-Paul Berrut and Lloyd N. Trefethen,\n*SIAM Review*, 2004\n\n[Can69] [_A cellular computer to implement the Kalman filter algorithm_](https://dl.acm.org/citation.cfm?id=905686),\nLynn E Cannon,\n*Doctoral Dissertation*, 1969\n\n[Gro16] [_On the size of pairing-based non-interactive arguments_](https://eprint.iacr.org/2016/260.pdf),\nJens Groth,\n*International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT)*, 2016\n\n[LRF97] [_Generalized cannon\u2019s algorithm for parallel matrix multiplication_](https://dl.acm.org/citation.cfm?id=263591),\nHyuk-Jae Lee, James P. Robertson, and Jose A. B. Fortes,\n*International Conference on Supercomputing*, 1997\n\n[NT16] [_Photoproof: Cryptographic image authentication for any set of permissible transformations_](https://www.cs.tau.ac.il/~tromer/papers/photoproof-oakland16.pdf),\nAssa Naveh and Eran Tromer,\n*IEEE Symposium on Security and Privacy*, 2016\n\n[Pip76] [_On the evaluation of powers and related problems_](https://ieeexplore.ieee.org/document/4567910/),\nNicholas Pippenger,\n*Symposium on Foundations of Computer Science* (FOCS), 1976\n\n[Pip80] [_On the evaluation of powers and monomials_](https://pdfs.semanticscholar.org/7d65/53e185fd90a855717ee915992e17f38c99ae.pdf),\nNicholas Pippenger,\n*SIAM Journal on Computing*, 1980\n\n[Sze11] [_Sch\u00f6nhage-Strassen algorithm with MapReduce for multiplying terabit integers_](https://people.apache.org/~szetszwo/ssmr20110429.pdf),\nTsz-Wo Sze,\n*International Workshop on Symbolic-Numeric Computation*, 2011\n\n[vW97] [_SUMMA: scalable universal matrix multiplication algorithm_](https://dl.acm.org/citation.cfm?id=899248),\nRobert A. van de Geijn and Jerrell Watts,\n*Technical Report*, 1997\n\n[Wil16] [_Strong ETH breaks with Merlin and Arthur: short non-interactive proofs of batch evaluation_](https://arxiv.org/pdf/1601.04743.pdf),\nRyan Williams,\n*Conference on Computational Complexity*, 2016\n\n## Acknowledgements\n\nThis work was supported by Intel/NSF CPS-Security grants,\nthe [UC Berkeley Center for Long-Term Cybersecurity](https://cltc.berkeley.edu/),\nand gifts to the [RISELab](https://rise.cs.berkeley.edu/) from Amazon, Ant Financial, CapitalOne, Ericsson, GE, Google, Huawei, IBM, Intel, Microsoft, and VMware.\nThe authors thank Amazon for donating compute credits to RISELab, which were extensively used in this project.\n\n## License\n\n[MIT License](LICENSE)\n"
 },
 {
  "repo": "AleoHQ/snarkOS",
  "language": "Rust",
  "readme_contents": "<p align=\"center\">\n    <img alt=\"snarkOS\" width=\"1412\" src=\"https://cdn.aleo.org/snarkos/banner.png\">\n</p>\n\n<p align=\"center\">\n    <a href=\"https://circleci.com/gh/AleoHQ/snarkOS\"><img src=\"https://circleci.com/gh/AleoHQ/snarkOS.svg?style=svg&circle-token=6e9ad6d39d95350544f352d34e0e5c62ef54db26\"></a>\n    <a href=\"https://codecov.io/gh/AleoHQ/snarkOS\"><img src=\"https://codecov.io/gh/AleoHQ/snarkOS/branch/master/graph/badge.svg?token=cck8tS9HpO\"/></a>\n    <a href=\"https://www.aleo.org/discord\"><img src=\"https://img.shields.io/discord/700454073459015690?logo=discord\"/></a>\n</p>\n\n## <a name='TableofContents'></a>Table of Contents\n\n* [1. Overview](#1-overview)\n* [2. Build Guide](#2-build-guide)\n    * [2.1 Requirements](#21-requirements)\n    * [2.2 Installation](#22-installation)\n* [3a. Run an Aleo Client Node](#3a-run-an-aleo-client-node)\n* [3b. Run an Aleo Mining Node](#3a-run-an-aleo-mining-node)\n* [4. FAQs](#4-faqs)\n* [5. Command Line Interface](#5-configuration-file)\n* [6. Development Guide](#6-development-guide)\n* [7. License](#7-license)\n\n[comment]: <> (* [4. JSON-RPC Interface]&#40;#4-json-rpc-interface&#41;)\n[comment]: <> (* [5. Additional Information]&#40;#5-additional-information&#41;)\n\n## 1. Overview\n\n__snarkOS__ is a decentralized operating system for private applications. It forms the backbone of [Aleo](https://aleo.org/) and\nenables applications to verify and store state in a publicly verifiable manner.\n\n## 2. Build Guide\n\n### 2.1 Requirements\n\nThe following are **minimum** requirements to run an Aleo node:\n - **CPU**: 16-cores (32-cores preferred)\n - **RAM**: 16GB of memory (32GB preferred)\n - **Storage**: 128GB of disk space\n - **Network**: 50 Mbps of upload **and** download bandwidth\n\nPlease note to run an Aleo mining node that is **competitive**, the machine will require more than these requirements.\n\n### 2.2 Installation\n\nBefore beginning, please ensure your machine has `Rust v1.59+` installed. Instructions to [install Rust can be found here.](https://www.rust-lang.org/tools/install)\n\nStart by cloning the snarkOS Github repository:\n```\ngit clone https://github.com/AleoHQ/snarkOS.git --depth 1\n```\n\nNext, move into the snarkOS directory:\n```\ncd snarkOS\n```\n\n**[For Ubuntu users]** A helper script to install dependencies is available. From the snarkOS directory, run:\n```\n./build_ubuntu.sh\n```\n\n## 3a. Run an Aleo Client Node\n\nStart by following the instructions in the [Build Guide](#2-build-guide).\n\nNext, to start a client node, from the snarkOS directory, run:\n```\n./run-client.sh\n```\n\n## 3b. Run an Aleo Mining Node\n\nStart by following the instructions in the [Build Guide](#2-build-guide).\n\nNext, to generate an Aleo miner address, run:\n```\nsnarkos experimental new_account \n```\nor from the snarkOS directory, run:\n```\ncargo run --release -- experimental new_account\n```\nThis will output a new Aleo account in the terminal.\n\n**Please remember to save the account private key and view key.** The following is an example output:\n```\n Attention - Remember to store this account private key and view key.\n\n  Private Key  APrivateKey1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  <-- Save Me\n     View Key  AViewKey1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  <-- Save Me\n      Address  aleo1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  <-- Use Me For The Next Step\n```\n\nNext, to start a mining node, from the snarkOS directory, run:\n```\n./run-miner.sh\n```\nWhen prompted, enter your Aleo miner address:\n```\nEnter your Aleo miner address:\naleo1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n### Mining Report\n\nAfter the mining node has booted up, a periodic report is provided with the status of mined blocks:\n```\nINFO Mining Report (confirmed_blocks = 1, pending_blocks = 5, miner_address = aleo1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)\n```\nThis report can also be queried after the mining node has already ran,\nby running `cargo run --release -- miner stats aleo1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\nin the snarkOS directory, or `snarkos miner stats aleo1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`.\n\n## 4. FAQs\n\n### 1. My node is unable to compile.\n\n- Ensure your machine has `Rust v1.59+` installed. Instructions to [install Rust can be found here.](https://www.rust-lang.org/tools/install)\n- If large errors appear during compilation, try running `cargo clean`.\n- Ensure snarkOS is started using `./run-client.sh` or `./run-miner.sh`.\n\n### 2. My node is unable to connect to peers on the network.\n\n- Ensure ports `4132/tcp` and `3032/tcp` are open on your router and OS firewall.\n- Ensure snarkOS is started using `./run-client.sh` or `./run-miner.sh`.\n\n### 3. I can't generate a new address ### \n\n- Before running the command above (`snarkos experimental new_account`) try `source ~/.bashrc` \n- Also double check the spelling of `snarkos`. Note the directory is `/snarkOS`, the command is `snarkos`\n\n### 4. Can I coordinate mining across multiple machines/instances of snarkOS? ### \n \n- Yes. Just spin up multiple instances of snarkOS across multiple machines (not the same machine) and input\n  the same miner address. At the moment, Aleo does not integrate with any other mining pool protocols (like\n  [stratum](https://braiins.com/stratum-v2)). But if anyone wants to implement, please apply for a grant!\n\n## 5. Command Line Interface\n\nTo run a node with custom settings, refer to the full list of options and flags available in the snarkOS CLI.\n\nThe full list of CLI flags and options can be viewed with `snarkos --help`:\n```\nsnarkos\nThe Aleo Team <hello@aleo.org>\n\nUSAGE:\n    snarkos [FLAGS] [OPTIONS] [SUBCOMMAND]\n\nFLAGS:\n        --display    If the flag is set, the node will render a read-only display\n    -h, --help       Prints help information\n        --norpc      If the flag is set, the node will not initialize the RPC server\n    -V, --version    Prints version information\n\nOPTIONS:\n        --connect <connect>          Specify the IP address and port of a peer to connect to\n        --dev <dev>                  Enables development mode, specify a unique ID for the local node\n        --miner <miner>              Specify this as a mining node, with the given miner address\n        --network <network>          Specify the network of this node [default: 2]\n        --node <node>                Specify the IP address and port for the node server [default: 0.0.0.0:4132]\n        --operator <operator>        Specify this as an operating node, with the given operator address\n        --pool <pool>                Specify the pool that a prover node is contributing to\n        --prover <prover>            Specify this as a prover node, with the given prover address\n        --rpc <rpc>                  Specify the IP address and port for the RPC server [default: 0.0.0.0:3032]\n        --password <rpc-password>    Specify the password for the RPC server [default: pass]\n        --username <rpc-username>    Specify the username for the RPC server [default: root]\n        --verbosity <verbosity>      Specify the verbosity of the node [options: 0, 1, 2, 3] [default: 2]\n\nSUBCOMMANDS:\n    clean           Removes the ledger files from storage\n    experimental    Experimental features\n    help            Prints this message or the help of the given subcommand(s)\n    miner           Miner commands and settings\n    update          Updates snarkOS to the latest version\n```\n\n## 6. Development Guide\n\nIn one terminal, start the first node by running:\n```\ncargo run --release -- --dev 1 --node 0.0.0.0:4135 --rpc 0.0.0.0:3035 --miner aleo1d5hg2z3ma00382pngntdp68e74zv54jdxy249qhaujhks9c72yrs33ddah\n```\n\nAfter the first node starts, in a second terminal, run:\n```\ncargo run --release -- --dev 2\n```\n\nWe welcome all contributions to snarkOS. Please refer to the [license](#7-license) for the terms of contributions.\n\n## 7. License\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](./LICENSE.md)\n"
 },
 {
  "repo": "cryptocat/cryptocat",
  "language": "JavaScript",
  "readme_contents": "![Cryptocat](https://raw.githubusercontent.com/cryptocat/cryptocat/master/src/img/logo/64x64.png)\n\n[![Build Status](https://travis-ci.org/cryptocat/cryptocat.svg?branch=master)](https://travis-ci.org/cryptocat/cryptocat)\n\n[Documentation](https://crypto.cat/help.html) | [Security](https://crypto.cat/security.html) | [License](http://www.gnu.org/licenses/gpl-3.0.en.html)\n\n### Building\nInstall dependencies:\n```\nnpm run setup\n```\n\nRun:\n```\nnpm run dev\n```\n\n### Packaging\nInstall dependencies:\n```\nnpm install -g electron-builder\n```\n#### Windows\n```\nbuild -w\n```\n#### Linux\n````\nbuild -l\n````\n#### Mac\n````\nbuild -m\n```\n"
 },
 {
  "repo": "BlockchainCommons/lethekit",
  "language": "C++",
  "readme_contents": "# Blockchain Commons LetheKit\n\n**Open source DIY hardware box for offline cryptographic tools**\n\n### _by [Ken Sedgwick](https://www.github.com/ksedgwic), [Gorazd Kovacic](https://www.github.com/gorazdko), and [Christopher Allen](https://www.github.com/ChristopherA)_\n\n* <img src=\"https://github.com/BlockchainCommons/crypto-commons/blob/master/images/logos/crypto-commons-super-simple.png\" width=16 valign=\"bottom\">&nbsp;&nbsp; ***part of the [crypto commons](https://github.com/BlockchainCommons/crypto-commons/blob/master/README.md) technology family***\n* <img src=\"https://github.com/BlockchainCommons/Gordian/blob/master/Images/logos/gordian-icon.png\" width=16 valign=\"bottom\"> ***part of the [gordian](https://github.com/BlockchainCommons/gordian/blob/master/README.md) technology family***\n\n![LetheKit](images/lethekit-with-logo.jpg)\n\n*LetheKit* is a do-it-youself platform for performing various sensitive cryptographic operations on an offline airgapped device. It uses no WiFi or Bluetooth which could leak information and contains no local storage, and when the device is turned off it forgets any sensitive data stored in RAM. Thus the name Lethe (_lee-thee_), from the [mythological river](https://en.wikipedia.org/wiki/Lethe) of forgetfulness and oblivion.\n\n## Additional Information\n\nThe following files contain everything you need to set up your *LetheKit* hardware and install its software.\n\n* The [Parts List](doc/parts-list.md) describes all needed parts.\n* The [Case Information](case) contains STL files for 3-D printing.\n* The [Lethekit Assembly Instructions](doc/assembly.md) show how to put it together.\n* The [Lethekit Installation Instructions](doc/installation.md) show how to install LetheKit in your Arduino development environment.\n* The [Seedtool Installation Instructions](seedtool/doc/build.md) show to install Seedtool on your *LetheKit* using the Arduino IDE.\n* The [Seedtool Application Instuctions](seedtool/README.md) describe how to generate and recover\n[BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) HD wallet master seeds in [BIP-39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) and [SSKR](https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-011-sskr.md) formats.\n* [Blog Post Overview](https://www.blockchaincommons.com/projects/Releasing-LetheKit/)\n\nYour LetheKit can be charged or recharged with a micro-USB connection.\n\n## Gordian Principles\n\n**Gordian LetheKit** is a hardware exemplar meant to display the [Gordian Principles](https://github.com/BlockchainCommons/Gordian#gordian-principles), which are philosophical and technical underpinnings to Blockchain Commons' Gordian technology. This includes:\n\n* **Independence.** LetheKit ensures that you're in total control of your seeds.\n* **Privacy.** LetheKit is totally offline.\n* **Resilience.** LetheKit depends on you for its resilience, since you must back up your words or codes.\n* **Openness.** LetheKit communicates through airgaps via URs and QRs, for maximum interoperability.\n\nBlockchain Commons apps do not phone home and do not run ads. Some are available through various app stores; all are available in our code repositories for your usage.\n\n## Status - Late Alpha\n\n*LetheKit* is currently under active development and in the late alpha testing phase. It should not be used for production tasks until it has had further testing and auditing.\n\n### \u26a0\ufe0f Warning: Lack of Round-trip Compatibility between BIP-39 and SLIP-39\n\nAt first glance, BIP-39 and SLIP-39 both appear to be means of converting a binary seed to a set of backup words and back. You might assume you could simply convert a BIP-39 backup to a binary seed, from that binary seed to SLIP-39, and then use the SLIP-39 backup to recover the same wallet as the original BIP-39 backup, but this is **NOT** the case. This is because the SLIP-39 algorithm that SatoshiLabs uses in their Trezor wallet does not derive the master secret in the same way as their BIP-39 algorithm does.\n\nCurrently Blockchain Commons and LetheKit implement an alternative to SLIP-39, called [Sharded Secret Key Reconstruction](https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-011-sskr.md) (**SSKR**), that allows round-trips with BIP-39. We want to ensure that the same seed will result in the same derived keys using either BIP-39 or our alternative approach.\n\nAs SLIP-39 is not round-trip compatible with BIP-39, and SLIP-39 is under the control of SatoshiLabs and does not appear to be a fully community-controlled standard, Blockchain Commons is no longer endorsing SLIP-39.\n\n* This issue is being tracked [here](https://github.com/BlockchainCommons/lethekit/issues/38).\n\n## Origin, Authors, Copyright & Licenses\n\nUnless otherwise noted (either in this [/README.md](./README.md) or in the file's header comments) the contents of this repository are Copyright \u00a9 2020 by Blockchain Commons, LLC, and are [licensed](./LICENSE) under the [spdx:BSD-2-Clause Plus Patent License](https://spdx.org/licenses/BSD-2-Clause-Patent.html).\n\nIn most cases, the authors, copyright, and license for each file reside in header comments in the source code. The table below attempts to attribute accurately for files without such information.\n\nThis table below also establishes provenance (repository of origin, permalink, and commit id) for files included from repositories that are outside of this one. Contributors to these files are listed in the commit history for each repository, first with changes found in the commit history of this repo, then in changes in the commit history of their repo of their origin.\n\n| File      | From                                                         | Commit                                                       | Authors & Copyright (c)                                | License                                                     |\n| --------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------ | ----------------------------------------------------------- |\n| Cryptosuite | [https://github.com/ksedgwic/Cryptosuite](https://github.com/ksedgwic/Cryptosuite) | ae0e3eeb4eb00c53fe235e0c34f77ade11f1982a | 2010 Peter Knight | <none> |\n| bip39 | [https://github.com/ksedgwic/bip39](https://github.com/ksedgwic/bip39) | 9b8fa3c7d145c39558c2534f6cf40879477d93a1 | 2018 Chris Howe | [MIT License](https://github.com/ksedgwic/bip39/blob/master/LICENSE) |\n| TRNG-for-ATSAMD51J19A-Adafruit-Metro-M4- | [https://github.com/SapientHetero/TRNG-for-ATSAMD51J19A-Adafruit-Metro-M4-](https://github.com/SapientHetero/TRNG-for-ATSAMD51J19A-Adafruit-Metro-M4-) | 17d5e36cd922ce7df8047d9c89633dca9b5ae122 | 2019 Ron Sutton | [MIT License](https://github.com/SapientHetero/TRNG-for-ATSAMD51J19A-Adafruit-Metro-M4-/blob/master/LICENSE.txt) |\n| libwally-core | [https://github.com/ElementsProject/libwally-core](https://github.com/ElementsProject/libwally-core) | e0d0634aea716d813744326ea6c7590eb9fc381c | Jon Griffiths (Blockstream) 2016 | [BSD/MIT license](https://github.com/ElementsProject/libwally-core/blob/master/LICENSE) |\n| Library-arduino-cbor | [https://github.com/jjtara/Library-Arduino-Cbor](https://github.com/jjtara/Library-Arduino-Cbor) | 996bf4a853513ee1fb94286691209a067c915bfb | jjtara 2014 | [Apache license](https://github.com/jjtara/Library-Arduino-Cbor/blob/master/LICENSE) |\n| ArduinoSTL | [https://github.com/mike-matera/ArduinoSTL](https://github.com/mike-matera/ArduinoSTL) | 7411816e2d8f49d96559dbaa47e327816dde860c | Mike Matera 1999 | [GNU LGPL](https://github.com/mike-matera/ArduinoSTL/blob/master/LICENSE) |\n\n### Dependencies\n\nTo build the *LetheKit* you'll need to use the following exterinal tools:\n\n- [The Arduino IDE](https://www.arduino.cc/en/main/software)\n\nThe following internal Blockchain Commons projects are leveraged by *LetheKit*:\n\n- [BlockchainCommons/bc-crypto-base](https://github.com/blockchaincommons/bc-crypto-base) \u2014\u00a0Well-Reviewed and Audited Cryptographic Functions for Use in Blockchain Commons Software Projects\n- [BlockchainCommons/bc-shamir](https://github.com/BlockchainCommons/bc-shamir) - C Implementation of Shamir Secret Sharing for use in Blockchain Commons Software Projects\n- [BlockchainCommons/bc-bytewords](https://github.com/BlockchainCommons/bc-bytewords) - C library for encoding and decoding Bytewords.\n- [BlockchainCommons/bc-sskr](https://github.com/BlockchainCommons/bc-sskr) - Implementation of Sharded Secret Key Reconstruction (SSKR)\n\n### Derived from ...\n\nThe *LetheKit* project was inspired by:\n\n- [Bitcoin 2019 Conference Tutorial](https://github.com/arcbtc/bitcoin2019conf), by [Ben Arc](https://github.com/arcbtc), which provided a fully functional starting point using similar hardware.\n\n### Used with ...\n\nThese are other projects that work with or leverage *LetheKit*.\n\n- (submit a PR to this repo list your project)\n\n## Financial Support\n\n*LetheKit* (lee-thee kit) is a project of [Blockchain Commons](https://www.blockchaincommons.com/). We are proudly a \"not-for-profit\" social benefit corporation committed to open source & open development. Our work is funded entirely by donations and collaborative partnerships with people like you. Every contribution will be spent on building open tools, technologies, and techniques that sustain and advance blockchain and internet security infrastructure and promote an open web.\n\nTo financially support further development of *LetheKit* and other projects, please consider becoming a Patron of Blockchain Commons through ongoing monthly patronage as a [GitHub Sponsor](https://github.com/sponsors/BlockchainCommons). You can also support Blockchain Commons with bitcoins at our [BTCPay Server](https://btcpay.blockchaincommons.com/).\n\n### Project Sponsors\n\nThanks to our project sponsors for their support of *LetheKit*:\n  \n<img src=\"https://raw.githubusercontent.com/BlockchainCommons/www.blockchaincommons.com/master/images/sponsors/logo-keystone.jpg\" width=500>\n\n[**Keystone**](https://keyst.one/) is the manufacturer of the Keystone Hardware Wallet and the Keystone Tablets. Their focus is on uncompromising security and ease of use, taking human error into consideration, skyrocketing attack costs, reducing burdens of proof, and avoiding single points of failure.\n  \n## Contributing\n\nWe encourage public contributions to this project through issues and pull requests! Please review [CONTRIBUTING.md](./CONTRIBUTING.md) for details on our development process. All contributions to this repository require a GPG signed [Contributor License Agreement](./CLA.md).\n\n### Discussions\n\nThe best place to talk about Blockchain Commons and its projects is in our GitHub Discussions areas.\n\n[**Wallet Standard Discussions**](https://github.com/BlockchainCommons/AirgappedSigning/discussions). For standards and open-source developers who want to talk about wallet standards, please use the Discussions area of the [Airgapped Signing repo](https://github.com/BlockchainCommons/AirgappedSigning). This is where you can talk about projects like our [LetheKit](https://github.com/BlockchainCommons/lethekit) and command line tools such as [seedtool](https://github.com/BlockchainCommons/seedtool-cli), both of which are intended to testbed wallet technologies, plus the libraries that we've built to support your own deployment of wallet technology such as [bc-bip39](https://github.com/BlockchainCommons/bc-bip39), [bc-slip39](https://github.com/BlockchainCommons/bc-slip39), [bc-shamir](https://github.com/BlockchainCommons/bc-shamir), [Sharded Secret Key Reconstruction](https://github.com/BlockchainCommons/bc-sskr), [bc-ur](https://github.com/BlockchainCommons/bc-ur), and the [bc-crypto-base](https://github.com/BlockchainCommons/bc-crypto-base). If it's a wallet-focused technology or a more general discussion of wallet standards,discuss it here.\n\n[**Blockchain Commons Discussions**](https://github.com/BlockchainCommons/Community/discussions). For developers, interns, and patrons of Blockchain Commons, please use the discussions area of the [Community repo](https://github.com/BlockchainCommons/Community) to talk about general Blockchain Commons issues, the intern program, or topics other than the [Gordian System](https://github.com/BlockchainCommons/Gordian/discussions) or the [wallet standards](https://github.com/BlockchainCommons/AirgappedSigning/discussions), each of which have their own discussion areas.\n\n### Other Questions & Problems\n\nAs an open-source, open-development community, Blockchain Commons does not have the resources to provide direct support of our projects. Please consider the discussions area as a locale where you might get answers to questions. Alternatively, please use this repository's [issues](./issues) feature. Unfortunately, we can not make any promises on response time.\n\nIf your company requires support to use our projects, please feel free to contact us directly about options. We may be able to offer you a contract for support from one of our contributors, or we might be able to point you to another entity who can offer the contractual support that you need.\n\n\n### Credits\n\nThe following people directly contributed to this repository. You can add your name here by getting involved; the first step is to learn how to contribute from our [CONTRIBUTING.md](./CONTRIBUTING.md) documentation.\n\n| Name              | Role                | Github                                            | Email                                 | GPG Fingerprint                                    |\n| ----------------- | ------------------- | ------------------------------------------------- | ------------------------------------- | -------------------------------------------------- |\n| Christopher Allen | Principal Architect | [@ChristopherA](https://github.com/ChristopherA) | \\<ChristopherA@LifeWithAlacrity.com\\> | FDFE 14A5 4ECB 30FC 5D22  74EF F8D3 6C91 3574 05ED |\n| Ken Sedgwick      | Original Author, Occasional Contributor  | [@ksedgwic](https://github.com/ksedgwic)          | \\<ken@bonsai.com\\>                  | 4695 E5B8 F781 BF85 4326 9639 BBFC E515 8602 5550  |\n| Gorazd Kovacic     | developer  | [@gorazdko](https://github.com/gorazdko)  | \\<gorazdko@gmail.com\\>  | 41F0 EA16 99A7 4C1E 2FA4 1B53 8CF9 6BC3 FF9D BBCE  |\n\n## Responsible Disclosure\n\nWe want to keep all our software safe for everyone. If you have discovered a security vulnerability, we appreciate your help in disclosing it to us in a responsible manner. We are unfortunately not able to offer bug bounties at this time.\n\nWe do ask that you offer us good faith and use best efforts not to leak information or harm any user, their data, or our developer community. Please give us a reasonable amount of time to fix the issue before you publish it. Do not defraud our users or us in the process of discovery. We promise not to bring legal action against researchers who point out a problem provided they do their best to follow the these guidelines.\n\n### Reporting a Vulnerability\n\nPlease report suspected security vulnerabilities in private via email to ChristopherA@LifeWithAlacrity.com (do not use this email for support). Please do NOT create publicly viewable issues for suspected security vulnerabilities.\n\nThe following keys may be used to communicate sensitive information to developers:\n\n| Name              | Fingerprint                                        |\n| ----------------- | -------------------------------------------------- |\n| Christopher Allen | FDFE 14A5 4ECB 30FC 5D22  74EF F8D3 6C91 3574 05ED |\n\nYou can import a key by running the following command with that individual\u2019s fingerprint: `gpg --recv-keys \"<fingerprint>\"` Ensure that you put quotes around fingerprints that contain spaces.\n"
 },
 {
  "repo": "ammario/isokey",
  "language": "Go",
  "readme_contents": "# Isokey\n\nIsokey allows you to make and verify self-contained API keys without a database via HMAC/ECDSA signatures.\n\n## Features\n- Important information such as userID, key expire time, and flags are authenticated and stored within\nthe key.\n- Use mutliple secrets\n- Invalidate secrets and compromised keys\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table Of Contents\n\n- [Symmetric Keys](#symmetric-keys)\n  - [Make a key service](#make-a-key-service)\n  - [Sign a new key](#sign-a-new-key)\n  - [Verify key](#verify-key)\n  - [Using multiple secrets](#using-multiple-secrets)\n  - [Digest Structure](#digest-structure)\n- [Asymmetric Keys](#asymmetric-keys)\n  - [Make a key pair](#make-a-key-pair)\n  - [Make key digest](#make-key-digest)\n  - [Verify key](#verify-key-1)\n  - [Digest Structure](#digest-structure-1)\n- [Invalidating keys](#invalidating-keys)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# Symmetric Keys\n\n## Make a key service\n```go\nks := NewSymKeyService([]byte(\"super_secure111\"))\n```\n\n##  Sign a new key\n```go\nkey := &Key{\n\tUserID:  1,\n\tExpires: time.Now().AddDate(0, 1, 0),\n}\n\ndigest, err := ks.Sign(key)\nif err != nil {\n\tlog.Fatalf(\"Failed to sign key: %v\", err)\n}\nfmt.Printf(\"Digest is %v\\n\", digest)\n```\n\n## Verify key\n\n```go\nkey, err = ks.Verify(digest)\n\nif err != nil {\n\tlog.Fatalf(\"Failed to verify digest: %v\", err)\n}\n\n// Key authenticated\nfmt.Printf(\"Key: %+v\\n\", key)\n```\n\n## Using multiple secrets\nThe SecretVersion field is in included in the key object to enable\nimplementors to easily use multiple secrets.\n\nA secret can be decided based on any feature of a key.\n\n```go\nks.GetSecret = function(key *Key) (secret []byte){\n\tif key.SecretVersion == 1 {\n\t\treturn []byte(\"sec1\") \n\t}\n\treturn nil\n}\n```\n\n\n\n## Digest Structure\nAll binary values are big endian.\n\n| Field | Type |\n|--------|------|\n| Signature | [16]byte |\n| Made Time (Unix epoch timestamp) | uint32 |\n| Expire Time (Unix epoch timestamp) | uint32 |\n| Secret Version | uint32 |\n| User ID     | uint32 |\n| Flags | uint32 |\n\nDigests are encoded with Bitcoin's base58 alphabet.\n\nIt may seem intuitive to put the signature at the end of the digest. It's located\nat the beginning as it makes eyeballing different keys easy.\n\n# Asymmetric Keys\n\n## Make a key pair\n\nMake your private key \n`openssl ecparam -genkey -name prime256v1 -outform DER -noout -out privatekey.der`\n\nMake your public key\n`openssl ec -in privatekey.der -inform DER -outform DER -pubout -out publickey.der`\n\n\n## Make key digest\n```go\nprivKey, _ = isokey.LoadPrivateKey(\"priv.key\")\n\nks := NewAsymKeySigner(privKey)\n\nkey := &Key{\n    User: 1,\n    Expires: time.Now().Add(time.Hour)\n}\n\ndigest, _ := ks.Sign(key)\n\nfmt.Printf(\"Digest: %v\", digest)\n```\n\n##  Verify key\n```go\npubKey, err := isokey.LoadPublicKey(\"pub.key\")\nif err != nil {\n\tlog.Fatalf(\"Failed to load pubkey: %v\", err)\n}\n\nkv := NewAsymKeyVerifier(pubKey)\n\nkey, err := kv.Verify(digest)\nif err != nil {\n\tlog.Fatalf(\"Failed to verify key: %v\", err)\n}\n\nfmt.Printf(\"Key verified %+v\\n\", key)\n\n```\n\n\n## Digest Structure\nAll binary values are big endian.\n\n| Field | Type |\n|--------|------|\n| R len     | uint8\n| R         | []byte\n| S Len     | uint8\n| S         | []byte\n| Made Time (Unix epoch timestamp) | uint32 |\n| Expire Time (Unix epoch timestamp) | uint32 |\n| Secret Version | uint32 |\n| User ID     | uint32 |\n| Flags | uint32 |\n\nDigests are encoded with Bitcoin's base58 alphabet.\n\n\n# Invalidating keys\n\nExpired keys always fail to validate.\n\nYou can add custom invalidation logic via the `Invalidator` field of verifiers.\n\n```go\nverifier.Invalidator = function(key *isokey.Key) bool {\n    // reject keys made before some time\n    if key.UserID == 10 && key.Made.Before(time.Date(2015, time.November, 10, 23, 0, 0, 0, time.UTC)) {\n        return true\n    }\n    return false\n}\n```\n"
 },
 {
  "repo": "sara62/cryptosage",
  "language": "Python",
  "readme_contents": "### About\n\nCryptoSage provides cryptography algorithms in SageMath (http://www.sagemath.org).\n\nThis project is for students and engineers interested in cryptography.\nYou can try and test these cryptography algorithms with real parameters and full key lengths.\nWe write cryptography algorithms in SageMath.\n\n### Install\n\nAt first you need to install SageMath.\nAnd then the `sage` command can load and run the CryptoSage scripts.\n\n### Features\n\nWe hope to implement all popular public key schemes:\n\n* Integer-Factoring-Based Cryptosystems including RSA/Rabin/Paillier, etc. \n* Descrete-Log-Based Cryptosystems including DH/ElGamal/DSA, etc.\n* ECC (Elliptic curve cryptography)\n* Pairing-Based Cryptography\n* Lattice-Based Cryptography\n* Coding-Based Cryptography\n\n\n### Elliptic Curve Cryptography\n\n* EC domain parameters: `prime192v1.sage`\n* EC key generation: `eckeygen.sage`\n* ECDSA signature generation and verification `ecdsa.sage`\n\nYou can view and try the `ectest.sage`\n\n```\n$ sage ectest.sage\n```\n\n"
 },
 {
  "repo": "phongnguyend/Practical.Cryptography",
  "language": "C#",
  "readme_contents": "### Nuget\nhttps://www.nuget.org/packages/CryptographyHelper\n\n### Cryptography Object Inheritance In .Net\n\n**Hash Algorithms:**\n\n![alt text](/docs/imgs/HashAlgorithm.png)\n\n**Symmetric Algorithms:**\n\n![alt text](/docs/imgs/SymmetricAlgorithm.png)\n\n**Asymmetric Algorithms:**\n\n![alt text](/docs/imgs/AsymmetricAlgorithm.png)\n"
 },
 {
  "repo": "privacypass/challenge-bypass-extension",
  "language": "JavaScript",
  "readme_contents": "# Privacy Pass Extension\n\n[![Privacy Pass](https://github.com/privacypass/challenge-bypass-extension/actions/workflows/action.yml/badge.svg)](https://github.com/privacypass/challenge-bypass-extension/actions)\n\n**The Privacy Pass protocol is now being standardised by the\n[privacypass](https://datatracker.ietf.org/wg/privacypass/about/) IETF\nworking group. All contributions are welcome! See the [GitHub\npage](https://github.com/ietf-wg-privacypass) for more details.**\n\nThe Privacy Pass browser extension implements the Privacy Pass protocol\nfor providing a private authentication mechanism during web browsing.\nPrivacy Pass is currently supported by Cloudflare to allow users to\nredeem validly signed tokens instead of completing CAPTCHA solutions.\nThe extension is compatible with\n[Chrome](https://chrome.google.com/webstore/detail/privacy-pass/ajhmfdgkijocedmfjonnpjfojldioehi)\nand\n[Firefox](https://addons.mozilla.org/firefox/addon/privacy-pass/)\n(v48+). An example server implementation that is compatible with this\nextension is available\n[here](https://github.com/privacypass/challenge-bypass-server).\n\nThe protocol we use is based on a realization of a 'Verifiable,\nOblivious Pseudorandom Function' (VOPRF) first established by [Jarecki\net al.](https://eprint.iacr.org/2014/650.pdf). We\nalso detail the entire protocol and results from this deployment in a\n[research\npaper](https://content.sciendo.com/view/journals/popets/2018/3/article-p164.xml)\nthat appeared at PETS 2018 (Issue 3).\n\nIn October 2021, we announced a new major version (v3) as mentioned in the\n[blog post](https://blog.cloudflare.com/privacy-pass-v3) which makes the code\nbase more resilient, extensible, and maintainable.\n\n## Build Instruction\n\n```sh\n$ npm ci\n$ npm run build\n```\n\nAfter that, the `dist` folder will contain all files required by the extension.\n\n## Development Installation\n\n### Firefox\n\n-   Build by following the [Build Instruction](#build-instruction).\n-   Open Firefox and go to `about:debugging#/runtime/this-firefox`.\n-   Click on 'Load Temporary Add-on' button.\n-   Select `manifest.json` from `dist` folder.\n-   Check extension logo appears in the top-right corner and 0 passes\n    are stored (by clicking on it).\n-   Go to a web page supporting Privacy Pass where internet challenges\n    are   displayed (e.g. <https://captcha.website>)\n-   Solve CAPTCHA and check that some passes are stored in the extension\n    now.\n    -   captcha.website cannot be bypassed (this is only for gaining\n        passes)\n-   Go to a new website supporting Privacy Pass that ordinarily displays\n    a challenge.\n-   Check that the website is displayed correctly without human\n    interaction (more than one pass may be spent).\n    -   No interaction with a CAPTCHA page should occur, for instance.\n\n### Chrome\n\n-   Build by following the [Build Instruction](#build-instruction).\n-   Open Chrome and go to `chrome://extensions`.\n-   Turn on the Developer mode on the top-right corner.\n-   Click on 'Load unpacked' button.\n-   Select the `dist` folder.\n-   Check extension logo appears in the top-right corner and follow\n    the same instruction as in Firefox. (If you cannot see the extension logo,\n    it's probably just not pinned to the toolbar yest)\n\n## Test Instruction\n```sh\n$ npm ci\n$ npm test\n```\n\n## Directory Structure\n\n- `public`: Contains all the assets which are neither the business logic files nor the style sheets\n- `src`: Contains all the business logic files and the style sheets\n  - `background`: The business logic for the extension background process\n      - `listeners`: Contains all the listeners which listen on all the events happened in the browser\n          - `tabListener.ts`: The listeners which listen on all the tab related events [API](https://developer.chrome.com/docs/extensions/reference/tabs/)\n          - `webRequestListener.ts`: The listeners which listen on all the web request related events [API](https://developer.chrome.com/docs/extensions/reference/webRequest/)\n      - `providers`: Contains the provider-specific code of all the Privacy Pass providers in the extension. Currently we have only Cloudflare and hCaptcha\n      - `voprf.js`: Legacy crypto code which is still in Vanilla JavaScript\n      - `voprf.d.ts`: TypeScript declaration file for the legacy crypto code\n      - `tab.ts`: Tab class to represent a tab and encapsulate everything which is Tab specific\n      - `token.ts`: Token class to represent a token and contain all the code related to tokens\n  - `popup`: The web app for the popup in the browser toolbar\n      - `components`: Contains all the React components\n      - `styles`: Contains all the style sheets which are shared among the React components\n      - `types.d.ts`: Global Typescript declaration\n\n## Cryptography\n\nCryptography is implemented using the elliptic-curve library\n[SJCL](https://github.com/bitwiseshiftleft/sjcl) and compression of\npoints is done in accordance with the standard SEC1. This work uses the\nNIST standard P256 elliptic curve for performing operations. Third-party\nimplementers should note that the outputs of the hash-to-curve, key\nderivation, and point encoding functions must match their Go equivalents\nexactly for interaction with our server implementation. More information\nabout this will be provided when the edge implementation is\nopen-sourced.\n\n## Acknowledgements\n\nThe creation of the Privacy Pass protocol was a joint effort by the team\nmade up of George Tankersley, Ian Goldberg, Nick Sullivan, Filippo\nValsorda and Alex Davidson.\n\nWe would also like to thank Eric Tsai for creating the logo and\nextension design, Dan Boneh for helping us develop key parts of the\nprotocol, as well as Peter Wu and Blake Loring for their helpful code\nreviews. We would also like to acknowledge Sharon Goldberg, Christopher\nWood, Peter Eckersley, Brian Warner, Zaki Manian, Tony Arcieri, Prateek\nMittal, Zhuotao Liu, Isis Lovecruft, Henry de Valence, Mike Perry,\nTrevor Perrin, Zi Lin, Justin Paine, Marek Majkowski, Eoin Brady, Aaran\nMcGuire, and many others who were involved in one way or another and\nwhose efforts are appreciated.\n\n## FAQs\n\n### What do I have to do to acquire new passes?\n\n*   Click \"Get More Passes\" in the extension pop-up (or navigate to\n    <https://captcha.website>).\n*   Solve the CAPTCHA that is presented on the webpage\n*   Your extension should be populated with new passes.\n\n### Are passes stored after a browser restart?\n\nDepending on your browser settings, the local storage of your browser\nmay be cleared when it is restarted. Privacy Pass stores passes in local\nstorage and so these will also be cleared. This behavior may also be\nobserved if you clear out the cache of your browser.\n\n## Known Issues\n\n### Extensions that modify user-agent or headers.\n\nThere is a [conflict resolution|https://developer.chrome.com/docs/extensions/reference/webRequest/#conflict-resolution] happening when more than one extension tries\nto modify the headers of a request. According to documentation,\nthe more recent installed extension is the one that can update\nheaders, while others will fail.\n\nCompounded to that, Cloudflare will ignore clearance cookies when the\nuser-agent request does not match the one used when obtaining the\ncookie.\n\n### hCaptcha support.\n\nAs of version 3.x.x, support for hCaptcha tokens is paused. Only\nCloudflare CAPTCHAs are supported by this extension.\n"
 },
 {
  "repo": "SaveTheRbtz/crypto-class",
  "language": "Python",
  "readme_contents": "Introduction\n============\nThis is repository of `Stanford Cryptography class`_ programming exercises.\n\n.. _Stanford Cryptography class: https://www.coursera.org/crypto/class\n\nHonor Code\n==========\nThis is quote from `ML-Class Course Info` page:\n\n    For the programming exercises, you are welcome to discuss them with other\n    students, discuss specific algorithms, properties of algorithms, etc.; we\n    ask only that you not look at any source code written by a different\n    student, nor show your solution code to other students.\n\n    -- Professor Andrew Ng & The ml-class Team\n\n.. _ML-Class Course Info: http://www.ml-class.org/course/resources/index?page=course-info\n"
 },
 {
  "repo": "joepie91/node-random-number-csprng",
  "language": "JavaScript",
  "readme_contents": "# random-number-csprng\n\nA CommonJS module for generating cryptographically secure pseudo-random numbers.\n\nWorks in Node.js, and should work in the browser as well, using Webpack or Browserify.\n\nThis module is based on code [originally written](https://gist.github.com/sarciszewski/88a7ed143204d17c3e42) by [Scott Arciszewski](https://github.com/sarciszewski), released under the WTFPL / CC0 / ZAP.\n\n## License\n\n[WTFPL](http://www.wtfpl.net/txt/copying/) or [CC0](https://creativecommons.org/publicdomain/zero/1.0/), whichever you prefer. A donation and/or attribution are appreciated, but not required.\n\n## Donate\n\nMy income consists largely of donations for my projects. If this module is useful to you, consider [making a donation](http://cryto.net/~joepie91/donate.html)!\n\nYou can donate using Bitcoin, PayPal, Flattr, cash-in-mail, SEPA transfers, and pretty much anything else.\n\n## Contributing\n\nPull requests welcome. Please make sure your modifications are in line with the overall code style, and ensure that you're editing the files in `src/`, not those in `lib/`.\n\nBuild tool of choice is `gulp`; simply run `gulp` while developing, and it will watch for changes.\n\nBe aware that by making a pull request, you agree to release your modifications under the licenses stated above.\n\n## Usage\n\nThis module will return the result asynchronously - this is necessary to avoid blocking your entire application while generating a number.\n\nAn example:\n\n```javascript\nvar Promise = require(\"bluebird\");\nvar randomNumber = require(\"random-number-csprng\");\n\nPromise.try(function() {\n\treturn randomNumber(10, 30);\n}).then(function(number) {\n\tconsole.log(\"Your random number:\", number);\n}).catch({code: \"RandomGenerationError\"}, function(err) {\n\tconsole.log(\"Something went wrong!\");\n});\n```\n\n## API\n\n### randomNumber(minimum, maximum, [cb])\n\nReturns a Promise that resolves to a random number within the specified range.\n\nNote that the range is __inclusive__, and both numbers __must be integer values__. It is not possible to securely generate a random value for floating point numbers, so if you are working with fractional numbers (eg. `1.24`), you will have to decide on a fixed 'precision' and turn them into integer values (eg. `124`).\n\n* __minimum__: The lowest possible value in the range.\n* __maximum__: The highest possible value in the range. Inclusive.\n\nOptionally also accepts a nodeback as `cb`, but seriously, you should be using [Promises](https://gist.github.com/joepie91/791640557e3e5fd80861).\n\n### randomNumber.RandomGenerationError\n\nAny errors that occur during the random number generation process will be of this type. The error object will also have a `code` property, set to the string `\"RandomGenerationError\"`.\n\nThe error message will provide more information, but this kind of error will generally mean that the arguments you've specified are somehow invalid.\n\n## Changelog\n\n* __1.0.2__ (March 8, 2016): __*Security release!*__ Patched handling of large numbers; input values are now checked for `MIN_SAFE_INTEGER` and `MAX_SAFE_INTEGER`, and the correct bitwise operator is used (`>>>` rather than `>>`).\n* __1.0.1__ (March 8, 2016): Unimportant file cleanup.\n* __1.0.0__ (March 8, 2016): Initial release."
 },
 {
  "repo": "silentsignal/sheep-wolf",
  "language": "C",
  "readme_contents": "Wolves Among the Sheep\n======================\n\nSome security tools still stick to MD5 when identifying malware samples years after practical collisions were shown against the algorithm. This can be [exploited](http://blog.silentsignal.eu/2015/06/10/poisonous-md5-wolves-among-the-sheep/) by first showing these tools a harmless sample (Sheep) and then a malicious one (Wolf) that have the same MD5 hash. Please use this code to test if the security products in your reach use MD5 internally to fingerprint binaries and share your results by issuing a pull request updating the contents of `results/`!\n\nWorks-on-a-different-machine-than-mine version, feedback is welcome!\n\nDependencies\n------------\n\n* 32-bit Windows (virtual) machine (64-bit breaks stuff)\n* Visual Studio 2012 to compile the projects (Express will do)\n* [Fastcoll](https://www.win.tue.nl/hashclash/) for collisions\n* Optional: Cygwin+MinGW to compile Evilize\n\nUsage\n-----\n\nExtract Fastcoll to the `fastcoll` directory. Name the executable `fastcoll.exe`\n\nUse `shepherd.bat` to generate `wolf.exe` and `sheep.exe` (in the VS Development Command Prompt):\n\n```\n> shepherd.bat YOURPASSWORD your_shellcode.raw\n```\n\nAfter this step you should have your two colliding binaries (`sheep.exe` and `wolf.exe` in the `evilize` directory).\n\nFor more information see the [tutorial of Peter Selinger](http://www.mathstat.dal.ca/~selinger/md5collision/), older revisions of this document or the source code...\n\nHow does it work?\n-----------------\n\n* `shepherd.bat` executes `shepherd.exe` with the user supplied command line arguments\n    * `shepher.exe` generates a header file (`sc.h`) that contains the encrypted shellcode, the password and the CRC of the plain shellcode\n* `shepherd.bat` executes the build process of `sheep.exe`\n    * `sheep.exe` is built with `sc.h`included by Visual Studio\n* `shepherd.bat` executes `evilize.exe`\n    * `evilize.exe` calculates a special IV for the chunk of `sheep.exe` right before the block where the collision will happen\n    * `evilize.exe` executes `fastcoll.exe` with the IV as a parameter\n         * `fastcoll.exe` generates two 128 byte colliding blocks: `a` and `b`\n    * `evilize.exe` replaces the original string buffers of `sheep.exe` so that they contain combinations `a` and `b`\n    * The resulting files (`evilize/wolf.exe` and `evilize/sheep.exe` ) have the same MD5 hashes but behave differently. The real code to be executed only appears in the memory of `evilize/wolf.exe`.\n\nTesting Methodology\n-------------------\n\nTo test the security products in your reach you should generate two pairs of samples (SHEEP1-WOLF1 and SHEEP2-WOLF2), preferably with the same payload. Since samples (or their fingerprints) are usually uploaded to central repositories (or \"the cloud\") precompiled samples are not included to avoid conflicts between independent testers.\n\nAfter the samples are ready follow the methodology shown on the diagram below:\n\n![Testing Methodology](testing_methodology.png \"Testing Methodology\")\n\n(\\*) If the product is not able to detect the first malicious sample, there are more serious problems to worry about than crypto-fu. In fact, the simple cryptography included in the provided boilerplate code poses as a hard challenge for various products... Try to use more obvious samples!\n\n(\\*\\*) The product most probably uses some trivial method to detect the boilerplate insted of the actual payload. You can try to introduce simple changes to the code like removing debug strings. \n\nPlease don't forget to share your positive results by issuing a pull request to the [RESULTS.md](https://github.com/silentsignal/sheep-wolf/blob/master/results/RESULTS.md) file!\n\nReferences\n----------\n\n* [Poisonous MD5 - Wolves Among the Sheep](http://blog.silentsignal.eu/2015/06/10/poisonous-md5-wolves-among-the-sheep/)\n* [Peter Selinger: MD5 Collision Demo](http://www.mathstat.dal.ca/~selinger/md5collision/)\n* [How to make two binaries with same MD5](http://natmchugh.blogspot.co.uk/2015/05/how-to-make-two-binaries-with-same-md5.html)\n* [Stop using MD5 now!](http://jumpespjump.blogspot.hu/2014/03/stop-using-md-5-now.html)\n\nLICENSE\n-------\n\nLicenced under GNU/GPL if not otherwise stated.\n\n"
 },
 {
  "repo": "vixentael/my-talks",
  "language": null,
  "readme_contents": "A list of my talks about security engineering, applied cryptography, security usability. [Twitter](https://twitter.com/vixentael), [Medium](https://medium.com/@vixentael).\n\n<p><img src=\"pics/anastasiia-conf-2019.JPG\" alt=\"vixentael\" width=\"250\" height=\"250\" align=\"left\">\n\nI have a wide software engineering background, now I work on products and solutions at cryptographic solutions company [Cossack Labs](https://cossacklabs.com). We provide developers with tools for protection of sensitive data in apps and infrastructures, ranging from SaaS services and mobile apps to critical infrastructure / power grid operators and SCADA networks.</p>\n\nAside from solutions, we do provide [advisory and in-depth application security consulting](https://www.cossacklabs.com/services/overview/), assisting developments on various stages of development with security review and improvement advice. Also me & my team conduct [secure software development training](https://training.cossacklabs.com) for senior developers, architects and product managers.\n<br/><br/>\n* Open source tools:\n   * [Themis](https://github.com/cossacklabs/themis) \u2014 the crypto library for storage and messaging in mobile, desktop, and web apps;\n   * [Acra](https://github.com/cossacklabs/acra) \u2014 database security suite with SQL firewall and IDS;\n   * [Hermes](https://github.com/cossacklabs/hermes-core) \u2014 end-to-end encryption engine for data collaboration (mobile, web, infrastructures);\n\nEnjoy! \ud83d\udd12\n\n---------------------\n\n# Conferences coming soon \n_(will the world ever be the same?)_\n\nIn 2021 I am focusing on ~~washing hands~~ defensive security topics that are interesting for tech leads, CTO, solution architects. Security design and engineering, end-to-end encryption for distributed apps.\n\n[Email me](mailto:vixentael@gmail.com) if you want to invite me to speak at your conference :)\n\n---------------------\n\n\n# 2020\n\n## Mobile app security roundtable with Anastasiia Voitova, Julia Potapenko and Julia Vashchenko\n\n[video](https://www.youtube.com/watch?v=M6VihvXUG88&feature=emb_title)|\n---- |\n\nWe're speaking about mobile app security, introduce security.plist, discuss security-related cases in developers life.\n\n- [Swift Heroes](https://swiftheroes.com/2020/)</br> \nonline, 1 & 2 october 2020\n\n\n## Security track host at QCon Plus\n\n\\#trackhost\n\n[Check Talks and Program](https://plus.qconferences.com/plus2020/track/security): topics include OSINT, security bias, security in a time of insecurity.\n\n- [QCon Plus](https://plus.qconferences.com/)</br> \nonline, november 2020\n\n\n## Program committee chair at NoNameCon 2020\n\n\\#trackhost\n\n[Check Youtube Talks](https://www.youtube.com/watch?v=fz7qrRQCozw&list=PL8w7siRt_O0trtfExUJxexaw2-BF70Hw7): topics include PQ cryptography, security engineering, privilege escalation, IoT hacking, country-wide cybersecurity, interview with Bruce Schneier.\n\n- [NoNameCon](https://nonamecon.org/)</br> \nonline, september 2020\n\n\n## Crypto AMA with me, Ruslan Kiyanchuk and Mark Carney\n\n[video](https://www.youtube.com/watch?v=aG4w1ZetzAA&feature=youtu.be&t=4122)|\n---- |\n\nWe're speaking about cryptography and answer questions:\n\n- what is our favourite cipher and why it's base64\n- is crypto a life-style?\n- is it okay to be into crypto without having crypto background\n- how to select proper TLS suite\n- post-quantum crypto: should we care?\n- crypto-coding mistakes we've seen\n- regulations, e2ee, lattice, and all the things\n\n**Presented at:**\n\n- [OPCDE](https://www.opcde.com/)</br> \nonline, 29 July 2020\n\n\n## Use Cryptography; Don\u2019t Learn It\n\n\\#security \\#crypto\n\n[video](https://www.youtube.com/watch?v=3JWkHaxXbKo)|\n---- |\n\n\nWe\u2019ll talk about \u201cboring crypto\u201d: why developers shouldn\u2019t spend time learning all the details of crypto-algorithms (or invent new ones). How to avoid typical crypto-mistakes when all you need is to protect data at rest or in motion. There are enough ready-to-use cryptographic libraries and tools for everyone.\n\n**Presented at:**\n\n- [OWASP Chapters All Day](https://owasp.org/www-community/pages/social/chapters_all_day/speakers/)</br> \nonline, 7 June 2020\n\n\n\n## Security track host at QCon London\n\n[Check it out](https://qconlondon.com/london2020/track/scaling-security-device-cloud): topics include security risk management, balancing security and performance, SSDLC, devsecops and post-quatum crypto.\n\n\n# 2019\n\n## Security track host at QCon SF\n\n\\#trackhost\n\n[Check it out](https://qconsf.com/sf2019/track/trust-safety-security): topics include security architecture, security engineering, cryptography, organizational security.\n\n\n## Maintaining cryptographic library for 12 languages\n\n\\#security \\#software-architecture \\#cryptography\n\n[slides](https://speakerdeck.com/vixentael/maintaining-cryptographic-library-for-12-languages) | [video](https://www.youtube.com/watch?v=TgzIYIGDlzs&feature=youtu.be)|\n---- | --- |\n\nThis talk is useful for people that believe that perfect crypto lib is a C lib with 1-page readme :)\n\nMaintaining cross-platform cryptographic library is a journey full of unexpected bugs, language-specific hacks, difficult decisions and endless struggle to make developer-facing APIs easy-to-use and hard-to-misuse.\n\nHow to simplify complex crypto concepts into simple \"encrypt(msg, key)\" and \"decrypt(data, key)\" functions? How to provide unified API for 11 languages, when some of them are strongly-typed and another one is javascript? Secure by default: what design choices should be made to protect from misuse. Multi-platformness: how to make sure that message encrypted using Ruby on x64 Ubuntu 18.04 will be [successfully] decrypted on iOS12 on iPhone armv7s? Testing wildness: static analyzers, fuzzing, unit tests, integration tests. Docs: developers copy-paste from readme anyway, how to make sure that they copy-paste correct things.\n\nI'll describe the 4yrs experience on maintaining multi-platform open source library Themis: from API design to language-specific hacks.\n\n**Presented at:**\n\n- [BlackAlps](https://blackalps.ch/ba-19/index.php)<br/>\nYverdon-les-Bains, Switzerland, 7-8 November 2019\n\n\n## [Training] Security engineering: from encryption to software architecture patterns\n\nPublic training on security and cryptography engineering, conducted jointly with Jean-Philippe Aumasson in Lausanne, Switzerland, on Nov 4. Training aimed on software engineers and solution architects that work on distributed applications and security-related features. \n\n[Details about content](https://www.eventbrite.com/e/security-engineering-from-encryption-to-software-architecture-patterns-tickets-71768283869#).\n\nInterested in conducting similar training for your team? [Email me](mailto:vixentael@gmail.com).\n\n\n## 10 lines of encryption, 1500 lines of key management\n\n\\#mobile \\#iosdev \\#encryption \\#e2ee \\#Bear\n\n[slides](https://speakerdeck.com/vixentael/10-lines-of-encryption-1500-lines-of-key-management) | [blogpost](https://www.cossacklabs.com/blog/end-to-end-encryption-in-bear-app.html) | [video (ru)](https://www.youtube.com/watch?v=AHQi6wKfvmQ) | [video (eng)](https://youtu.be/cp06I49Cv50)|\n---- | --- | --- |  --- |\n\nThe real case about one large note taking the app, that decided to implement convenient note encryption and note locking for their existing user base. But finding a balance between usability, security and mobile platforms' restrictions is complicated.\n\nWe will start with the security design scheme, then select the proper encryption library, then implement the flow, and prepare for incidents. Now \u2014 think about it \u2014 cryptography is only chapter 3 in OWASP MASVS (8 chapters in general). Even the best cryptography will fail if basic security controls are badly implemented.\n\nPoints we will go through: the difference between \"locking\" and \"encrypting\", the difference between password and encryption key, how to sync passwords between devices, what exactly to store in keychain/keystore, how to use proper cryptography (AES CBC or AES GCM, random salt? IV? padding? what a hell is this mess), how to use biometrics (we don\u2019t want to bother user, let\u2019s use biometric keychain, but what if users will change their fingerprints \u2014 shall we invalidate all passwords?), updating encryption version (imagine, vulnerability is discovered in our library or app \u2014 how to update cipher, and softly migrate users to the new cipher, if users don\u2019t even have a clue that encryption was versioned).\n\nAt the end, this is only one simple JIRA ticket \"let's encrypt the notes\" from the eyes of security software engineer :)\n\n**Presented at:**\n\n- [FrenchKit](https://frenchkit.fr/)<br/>\nParis, France, 7-8 October 2019\n\n- [RSConf](https://rsconf.by/)<br/>\nMinsk, Belarus, 9-11 August 2019\n\n- [CocoaHeads Kyiv conference](https://www.facebook.com/CocoaHeadsUkraine/)<br/>\nKyiv, Ukraine, 28 July 2019\n\n\n## Security, privacy and cryptography at WWDC19\n\n\\#mobile \\#iosdev \\#encryption \\#privacy\n\n[slides](https://speakerdeck.com/vixentael/security-privacy-and-cryptography-at-wwdc19) | video coming soon | [blog post](https://wwdcbysundell.com/2019/anastasiia-voitova-on-security/) | [interview](https://wwdcbysundell.com/2019/interviews/anastasiia-voitova/)\n---- | --- | --- |  --- |\n\nApple made many announcements on WWDC 2019 about cryptography, cybersecurity and privacy. Anastasiia highlighted important changes for developers \u2013 including new CryptoKit framework, data privacy regulations, new app permissions.\n\n**Presented at:**\n\n- [CocoaFriday Kyiv meetup](https://www.facebook.com/CocoaHeadsUkraine/)<br/>\nKyiv, Ukraine, 14 June 2019\n\n## \"Defense in depth\": trench warfare principles for building secure distributed applications\n\n\\#security \\#software-architecture \\#app-sec\n\n[slides](https://speakerdeck.com/vixentael/defense-in-depth-trench-warfare-principles-for-building-secure-distributed-applications) | [video (en)](https://skillsmatter.com/skillscasts/13782-defense-in-depth-trench-warfare-principles-for-building-secure-distributed-applications)| [video (ru)](https://youtu.be/hoj444FrCUo) | [blog post](https://www.cossacklabs.com/blog/defense-in-depth-with-acra.html) |\n---- | --- | --- | --- |\n\nIt comes to no surprise, that any micro-services, any security controls you use to build applications \u2013 will eventually be broken (or fail). Under certain pressure, some components will fail together. \n\nThe question is \u2013 how do we build our systems in a way that security incidents won't happen even if some components fail. And the data leaks won't occur even if attacks are successful.\n\n\"Defense in depth\" is a security engineering pattern, that suggests building an independent set of security controls aimed at mitigating more risks even if the attacker crosses the outer perimeter. During the talk, we will model threats and risks for the modern distributed application, and improve it by building multiple lines of defence. We will overview high-level patterns and exact tools from the security engineering world and explain them to the modern web devs ;)\n\n**Presented at:**\n\n- [SwampUP](https://swampup.jfrog.com/)<br/>\nSan Francisco, US, 17-19 June 2019\n\n- [muCon](https://skillsmatter.com/conferences/11982-con-london-2019-the-conference-on-microservices-ddd-and-software-architecture)<br/>\nLondon, UK, 29-31 May 2019\n\n- [InfoShare](https://infoshare.pl/)<br/>\nGdansk, Poland, 8-9 May 2019\n\n- [JSFest Kyiv](http://jsfest.com.ua/)<br/>\nKyiv, Ukraine, 5-6 April 2019\n\n\n## Encryption intro for kids (13-17 yo)\n\n[slides (ukr)](https://speakerdeck.com/vixentael/data-encryption-cyberkids-edition) |\n---- |\n\nI was co-organizing and speaking at CyberKids event during NoNameCon cyber security conference in Kyiv, Ukraine, 14-17 May. Kids learnt basics about encryption and did simple cipher-decipher exercises. \n\nRead about in [my LN post](https://www.linkedin.com/feed/update/urn:li:activity:6535973905750990849) and [NoNameCon site](https://www.nonamecon.org/).\n\n**Presented at:**\n\n- [NonameCon CyberKids](https://nonamecon.org)<br/>\nKyiv, Ukraine, 14 May 2019\n\n## Secure Software Development: From Rookie to Hardcore in 90 Minutes [workshop] \ud83d\udee0\n\n\\#key-management \\#workshop \\#mobile \\#cryptography\n\n[slides](https://speakerdeck.com/vixentael/workshop-secure-software-development-from-rookie-to-hardcore-in-90-minutes) | [github repo](https://github.com/vixentael/ios-datasec-basics)\n| --- | ---- |\n\nOWASP SSDLC, how to select encryption library, what are common mistakes in implementing encryption around data. Key management techniques (storing user passwords, storing API keys).\n\nThe actionable to-do list of things you might want to improve in your apps, deepen your understanding of the landscape of cybersecurity, a set of resources to read/dive next to make your apps even more secure.\n\n**Workshoped at:**\n\n- [iOSCon London](https://skillsmatter.com/conferences/10823-ioscon-2019-the-conference-for-ios-and-swift-developers#program)<br/>\nLondon, UK, 21 March 2019\n\n# 2018\n\n## Secure Development Is Dead, Long Live Secure Development\n\nEssay for [De Programmatica Ipsum magazine](https://deprogrammaticaipsum.com/2018/12/03/secure-development-is-dead-long-live-secure-development/) about secure software development and the mindset gap between the world of product makers and the world of security people.\n\n\n## Protecting sensitive data in modern multi-component systems\n\n\\#security \\#software-architecture \\#basic-sanity \\#product-engineering\n\n[slides](https://speakerdeck.com/vixentael/protecting-sensitive-data-in-modern-multi-component-systems) | [video](https://2018.javazone.no/program/7ba1d745-427c-42de-b677-1285b56301ae) |\n---- | --- |\n\n<img src=\"pics/multi_component_trust.jpg\" alt=\"Protecting sensitive data in modern multi-component systems\" style=\"height: 466;\"/>\n\n\nWe will take a deep look into data lifecycle, risk, trust and how they affect security architecture, encryption, and key management techniques. We will illustrate typical SDL patterns: narrowing trust, monitoring intrusions, zero knowledge architectures, distributing trust. The goal of the talk is to give general thinking framework and enough ideas about tools for senior engineers to plan their solutions securely, regarding sensitive data contained within.\n\n**Plan:**\n\n\ud83d\udcab modern apps are multi-components, most data leaks are caused by poor architectural decisions,</br> \n\ud83d\udcab what is sensitive data life-cycle, </br>\n\ud83d\udcab how to build trust model for your app, </br>\n\ud83d\udcab what are typical trust patterns, </br>\n\ud83d\udcab how to select proper security controls based on real-world risks.</br>\n\n**Presented at:**\n\n- [DevExperience 19](http://devexperience.ro)<br/>\nIasi, Romania, 19 April 2019\n\n- [Javazone 18](https://2018.javazone.no/program/7ba1d745-427c-42de-b677-1285b56301ae)<br/>\nOslo, Norway, 12-13 September 2018\n\n\n## Making Security Usable: Product Engineer Perspective\n\n\\#security \\#usability \\#basic-sanity \\#product-engineering\n\n[slides](https://speakerdeck.com/vixentael/making-security-usable-product-engineer-perspective) | no video yet |\n---- | --- |\n\n<img src=\"pics/making_security_usable.jpg\" alt=\"Making Security Usable: Product Engineer Perspective\" style=\"height: 466;\"/>\n\nThis is a story of going through typical security challenges: how to build products that reliably deliver security guarantees, avoid typical pitfalls, and are usable in a predictable fashion by real users. It's a tale of balancing religious adherence to security practices with keeping customer's needs in mind at all time inside the development team; listening to the customers and observing actual behavior outside in the wild; and trying to make the best decisions to empower customers with easy tools for encrypting data in their apps securely and without pain.   \n\nWe'll take a look at the process through the eyes of one of our customers, who made all the things wrong before doing things right, and through the eyes of product engineer, responsible for learning the lessons to make security products even more usable and reliable for non-security-focused engineers. \n\n**Key takeaways:**\n\nAttendees will go through several stages of inception and implementation of database encryption/intrusion detection tools. They will see the \"behind the scenes\" work inside a cryptographic engineering company, will see how customers are one of the most useful people to learn from, and how getting over \"we tell you what to do\" mentality makes security tools better.\n\n**Presented at:**\n\n- [QConNYC 18](https://qconnewyork.com/ny2018/presentation/security-presentation-2)<br/>\nNew York City, USA, 27-29 June 2018\n\n\n## Zero Knowledge Architecture Approach for Mobile Developers [workshop] \ud83d\udee0\n\n\\#security \\#workshop \\#mobile \\#cryptography \\#symm-encryption \\#asymm-encryption\n\n[github repo](https://github.com/vixentael/zka-example)\n---- |\n\nZero knowledge algorithms and protocols ensure that no keys, passwords, files, or any other sensitive material ever gets transferred in an unencrypted or reversible form. There is no point in time when encryption keys or unencrypted files are visible to the servers or service administrators.\n\nWe took simple iOS application (Firebase notes app) and implemented two encryption schemes to illustrate how easy it is to protect data even for apps that use BaaS.\n\nPlan:\n 1. Learn about ZKA\n 2. Familiarize with Firebase notes application\n 3. Protect own notes (E2EE)\n 4. Share notes to other users\n 5. Improve security in general\n(protect keys, improve login flow, hide screenshots, obfuscate code etc)\n\n**Workshoped at:**\n\n- [Special workshop for Women Who Code Kyiv](https://www.meetup.com/Women-Who-Code-Kyiv/events/253917676/)<br/>\nKyiv, Ukraine, 30 August 2018\n\n- [The Swift Aveiro](http://swiftaveiro.xyz/)<br/>\nAveiro, Portugal, 21-22 June 2018\n\n## X Things you Need to Know before Implementing Cryptography\n\n\\#mobile \\#security \\#basic-sanity\n\n[slides](https://speakerdeck.com/vixentael/x-things-you-need-to-know-before-implementing-cryptography) | [video from UIKonf](https://www.youtube.com/watch?v=_fKR-KZ4yJQ) | [video from mDevTalk](https://www.youtube.com/watch?v=Cn4LBBZ3Wt4) | [video from CocoaHeads [ru]](https://www.youtube.com/watch?v=k6CXrmrdCJQ)\n---- | --- | --- | --- |\n\n<img src=\"pics/x_things_before_crypto.jpg\" alt=\"X Things you Need to Know before Implementing Cryptography\" style=\"height: 466;\"/>\n\nBefore we get deep into protocols vulnerabilities: things you should remember designing your app flow from a security point of view.\n\nThis talk will focus on copybook headings of infosec: what you need to know before exciting stuff like cryptography and AI-assisted incident detection. Like, choice of data you show in the background mode, choice of 3rd party SDKs, which logs we send and where...\n\nEven when developers create apps with security in minds, protect user secrets, and don\u2019t reveal unencrypted data, attackers can find ways to bypass these security measures by exploiting architectural weaknesses and unobvious, yet very simple vulnerabilities. We will talk about all the tiny bits and pieces are necessary to make your app secure against simple attacks way before focusing on the hard things (like crypto).\n\n1. Handling user secrets with care (showing, storing, logging).\n2. Input validation and password rules.\n3. Handling transport connection.\n4. And some tips and tricks that will confuse attackers.\n\n**Presented at:**\n\n- [CocoaHeads Kyiv #14](https://www.facebook.com/events/273895453206769/)<br/>\nKyiv, Ukraine, 6 October 2018\n\n- [mDevTalk 18](https://www.mdevtalk.cz/en/)<br/>\nPrague Czech Republic, 24 May 2018\n\n- [UIKonf 18](http://www.uikonf.com/)<br/>\nBerlin, Germany, 13-16 May 2018\n\n\n## Encryption Without Magic, Risk Management Without Pain\n\n\\#security \\#crypto \\#databases \\#notmobile \\#trust \\#infrastructures \\#separation-of-duties \\#echelonization\n\n[slides](https://speakerdeck.com/vixentael/encryption-without-magic-risk-management-without-pain) | [video from QCon](https://www.infoq.com/presentations/encryption-risk-management) | [video from Security BSides [ru]](https://www.youtube.com/watch?v=7nrPbJD0kF4) |\n---- | --- | --- |\n\n\n<img src=\"pics/narrowing_attack_surface_preview.jpg\" alt=\"Encryption Without Magic, Risk Management Without Pain\" style=\"height: 466;\"/>\n\nIn-depth technical inquiry about cryptography in a wider context: how it helps to narrow more significant risks to controlled attack surfaces, enables managing the risk efficiently and elegantly, how tools and algorithms sit in a broader context of managing infrastructure-wide risks associated with handling sensitive data.\n\n1. What is attack surface, how cryptography helps to narrow it. \n2. Simple crypto-systems, but significant downsides. \n3. Middleware-side encryption: protecting data in web-based infrastructures. \n4. Client-side encryption: trust to mobile apps and code execution. E2EE. ZKA. ZKP. \n5. Echelonization, and traditional techniques.\n\n**Presented at:**\n\n- [QCon London 18](https://qconlondon.com/london2018/presentation/encryption-without-magic-risk-mngmnt-without-pain)<br/>\nLondon, UK, 5-7 March 2018\n\n- [Security BSides Ukraine](https://securitybsides.org.ua/#speakers)<br/>\nKyiv, Ukraine, 21 April 2018\n\n- [Codemotion Milan](https://milan2018.codemotionworld.com/)<br/>\nMilan, Italy, 29-30 November\n\n---------------------\n\n# 2017\n\n## Don\u2019t waste time on learning cryptography: better use it properly\n\n\\#security \\#crypto\n\n[slides](https://speakerdeck.com/vixentael/dont-waste-time-on-learning-cryptography-better-use-it-properly) | [video (ru)](https://www.youtube.com/watch?v=SfuN-r3FpdY&feature=youtu.be)|\n---- | --- |\n\n\n<img src=\"pics/crypto_owasp_preview.jpg\" alt=\"Don't waste time on learning crypto\" style=\"height: 466;\"/>\n\nCrypto in our lives: why you shouldn\u2019t spend time learning all the details of the crypto-algorithms. Typical mistakes you make using crypto in your products. How to avoid late night commits, but to code 'fast and boring' instead.\n\n1. The typical engineering workflow \"we should protect the data, what shall we do\", and possible mistakes. \n2. What is \"boring crypto\", what do we want from using crypto-products. \n3. Possible solutions: HSM / TPM / software crypto. \n4. How to select appropriate software crypto: libs, systems, containers. \n5. We want crypto to be similar to the Edison lamp: controllable and boring system.\n\n**Presented at:**\n\n- [Swift and Fika](http://www.swiftandfika.com/)</br> \nStockholm, Sweden, 10 September 2018\n\n- [Devexperience.ro](http://devexperience.ro/tracks/futuretech/)</br>\nIasi, Romania, 23 April 2018  \n\n- [OWASP Kyiv Meetup Winter 17](https://www.facebook.com/events/134239973868217/)</br>\nKyiv, Ukraine, 2 December 2017 \n\n## Blockchain solutions: the balance of safety and efficiency, or just a trend?\n\n\\#security \\#blockchain\n\n[slides](https://speakerdeck.com/vixentael/blockchain-solutions-the-balance-of-safety-and-efficiency-or-just-a-trend) | [video (ru)](https://www.youtube.com/watch?v=McTdjdYCrKo)|\n---- | --- |\n\n\n<img src=\"pics/blockchain.jpg\" alt=\"Build it solve it\" style=\"height: 466;\"/>\n\nThe security engineer's job is to choose the appropriate solutions for the problems and to apply them. Discussing blockchain regarding cryptography is rather boring: it is simple, and even some assumptions in high-level protocols do not cause protests.\n\nI will talk about the other side - where blockchain looks like an optimal strategy, where it causes questions. We will walk through the risk&threats models, trust, and guarantees, to the experience of using blockchain in the real project (and what happened next).\n\n**Presented at:**\n\n- [UA.SC 17](https://www.facebook.com/events/119916742082061/)</br>\nKyiv, Ukraine, 18 October 2017 \n\n\n## Zero Knowledge Architectures for mobile Applications \ud83d\udc4c\n\n\\#security \\#mobile \\#zkp \\#zka\n\n[slides](https://speakerdeck.com/vixentael/zero-knowledge-architectures-for-mobile-applications) | [Mobiconf video](https://www.youtube.com/watch?v=79iqPsPc6ZE&index=17&list=PLr5cF6ekyIDgWee0wtwMKSGcoMvt5fkn_) | |DevFest Baltics video](https://www.youtube.com/watch?v=O-PnVVCc5fY)\n---- | --- | --- |\n\n\n<img src=\"pics/zka.jpg\" alt=\"Build it solve it\" style=\"height: 466;\"/>\n\nWith intensifying threat access, snooping governments and insecure-internet-of-everything, the importance of zero-knowledge application architectures and end-to-end trust, for things more complicated than simple messaging, becomes more and more obvious for the app developers.\n\nWe will talk about real-world problems that ZKA fights against, learn typical cryptographic designs and progress in different spheres of ZKA. We will find out how to make data sharing, user collaboration on data in the cloud with your app provably secure.\n\n**Presented at:**\n\n- [DevFest Baltics 17](https://devfest.gdg.lv/)</br>\nRiga, Latvia, 17 November 2017 \n\n- [SE Conf 17](https://se2017.indevlab.com/)</br>\nKyiv, Ukraine, 27-29 October 2017 \n\n- [MobiConf 17](https://2017.mobiconf.org/)</br>\nKrakow, Poland, 5-6 October 2017 \n\n\n## Build it, not just solve it! \ud83d\udc8a\n\n\\#ux \\#productdev \\#mobile \\#design\n\n\n[slides](https://speakerdeck.com/addc/addc-2017-anastasiia-voitova-anna-iurchenko-solve-it-dont-just-build-it) | [video](https://www.youtube.com/watch?v=JNWNdwuu1LE) |\n---- | --- |\n\n\n<img src=\"pics/build_solve_preview.jpg\" alt=\"Build it solve it\" style=\"height: 466;\"/>\n\nThis is a story from a designer [@anatinge](https://twitter.com/anatinge) and a developer who worked together and built a product for people who really need it. It's all about working in a tight collaboration, conducting user research and user interviews, sharing tip & tricks about team working. \n\n**Presented at:**\n\n- [ADDC 2017](http://addconf.com/)</br>\nBarcelona, 22-23 June 2017\n\n\n## Keys from the castle: ancient art of managing keys and trust \ud83d\udd11\n\n\\#security \\#keys \\#mobile \\#trust\n\n[slides](https://speakerdeck.com/vixentael/keys-from-the-castle-ancient-art-of-managing-keys-and-trust) | [AppBuilders video](https://www.youtube.com/watch?v=5U3FfQUmcV4&feature=youtu.be) | [CraftConf video](http://www.ustream.tv/recorded/102860531) |\n---- | --- | ---- |\n\n<img src=\"pics/keys_preview.jpg\" alt=\"Keys\" style=\"height: 466;\"/>\n\nWe will talk about building trust. Trust is built around various trust tokens: keys, passwords, secrets, biometric properties, things you have and things you know. We will talk about what should you trust, how to establish and verify trust, how to share trustedly among different users. We will discuss technical aspects: key exchange, key trust, key derivation, channel trust, multi-factor authentications. I will try to make the audience understand how this huge universe of tools and algorithms serves just one purpose: letting the right guys in, keeping the wrong guys outside our magical castle. And fairies there should be!\n\n\n\\>\\>\\> [Read more in Medium post](https://medium.com/@vixentael/key-management-approaches-for-mobile-apps-57bb4db63906) \\<\\<\\<\n\n**Presented at:**\n\n- [Mobile Optimized](https://mo.dev.by/)<br/>\nMinsk, Belarus, July 14-15 2017\n\n- [CraftConf 17](https://craft-conf.com/)<br/>\nBudapest, Hungary, April 25-28, 2017 \n\n- [AppBuilders 17](https://2017.appbuilders.ch/)<br/>\nLausanne, Switzerland, April 24-25 2017\n\n\n\n\n\n## App security for kittens \ud83d\udc31\n\n\\#security \\#mobile \\#kittens\n\nno slides | no video |\n---- | ---- |\n\n\nSummary talk for the newbies in security field. \n\nMobile platforms present both new threats and new opportunities for system security. This presentation will deal with modern approaches: how to protect data, which trusted relationships emerge with mobile phone, how they affect traditional security layouts. I will tell you how mobile phones dictate important client-server relationships.\n\nBased on my other talks.\n\n**Presented at:**\n\n- [Tech meetup on Cactus Hackathon](https://www.facebook.com/pg/cactushackaton/posts/)<br/>\nKyiv, Ukraine, May 2017 \n\n- [Women Who Code Kyiv meetup](https://www.meetup.com/Women-Who-Code-Kyiv/events/237823597/)<br/>\nKyiv, Ukraine, March 2017\n\n\n______________________________________________\n\n# 2016\n\n## Swift and Security [workshop] \ud83d\udee0\n\n\\#security \\#workshop \\#mobile \\#ssl\n\n[slides](https://speakerdeck.com/vixentael/the-swift-alps-security-workshop) | no video | [github repo](https://github.com/TheSwiftAlps/theswiftalpsdemo)\n---- | --- | ---- |\n\n\nThe idea was to share some knowledges about making more secure apps. We talked about:\n\n- why SSL is not enough \n- strategies to implement SSL pinning \n- how to understand basic risks and threats of common mobile client-server infrastructure \n- protection methods against those threats \n- what is symmetric encryption; why we need it. where to store data and key. \n- what is transfer encryption; when we need it.\n\n**Presented at:**\n\n- [The Swift Alps](http://theswiftalps.com/)<br/>\nCrans-Montana, Switzerland, 10-11 Nov 2016\n\n\n## Building user-centric security model in iOS applications \ud83d\udc65\n\n\n\\#security \\#keys \\#mobile \\#trust\n\n[slides](https://speakerdeck.com/vixentael/extended-version-building-user-centric-security-model-in-ios-applications) | [EatDog video, 1h (ru)](https://www.youtube.com/watch?v=h4egvZ4JuvI) | [MobiConf video, 40m (eng)](https://www.youtube.com/watch?v=QG-yw5iG564) |\n---- | --- | ---- |\n\n<img src=\"pics/uct_preview.jpg\" alt=\"User centric trust\" style=\"height: 466;\"/>\n\nWe will talk about building security, that does not fail when application keys are exposed; when servers are hacked; security that lasts as long as unique user's crypto keys (or passwords) are safe. Putting secrets known by the user to be a source of trust is the ultimate way for an app to become \"thin\" in relation to the security model, thus lowering the risks and developer pain. We will learn about thin transparent security layers system and its applicability in client-server systems.\n\n\n\\>\\>\\> [Check for transcript and video on Realm (25m)](https://realm.io/news/tryswift-anastasiia-voitova-building-user-centric-security-model-ios-applications-swift/) \\<\\<\\<\n\n\n**Presented at:**\n\n- [MobiConf](https://2016.mobiconf.org/)<br/>\nKrakow, Poland, 6-8 Oct 2016\n\n- [NSBarcelona](https://www.meetup.com/nsbarcelona/)<br/>\nBarcelona, Spain, 21 Sept 2016\n\n- [NSSpain](http://2016.nsspain.com/)<br/>\nLogrono, Spain, 14-15 Sept 2016\n\n- [try!swift](https://www.tryswift.co/)<br/>\nNYC, USA, 1-2 Sept 2016\n\n- [EatDog](https://eatdog.com.ua/)<br/>\nKharkov, Ukraine, 18 August 2016\n\n\n\n## Multiskilled dev teams: unlock your hidden powers \ud83c\udf29 \n\n\\#teammanagement \\#development\n\n[slides](https://speakerdeck.com/vixentael/multiskilled-mobile-dev-teams-unlock-your-hidden-powers) | [UMT video (ru)](https://www.youtube.com/watch?v=1aNeHW2VQD0) |\n---- | --- |\n\n<img src=\"pics/fedya_preview.jpg\" alt=\"Fedya\" style=\"height: 466;\"/>\n\nEveryone is talking about developers' specialization. 'Know you niche'. We have separate conferences for every dev area now: mobile, cloud, big data, iOT. In order to build a modern multiplatform mobile app you need to work with separate iOS and Android dev teams, separate backend dev team, designers and managers. Doesn't look too much?\n \nI'll talk about another way of organization: multiskilled dev team, experience and benefits.\n\n\n**Presented at:**\n\n- [AgilePizza #49 meetup](https://www.facebook.com/Scrumguides/)<br/>\nKyiv, Ukraine, 26 July 2016\n\n- [UaMobiTech](https://2016.mobiconf.org/)<br/>\nDnipro, Ukraine, 18-19 July 2016\n\n\n## Upgrading approaches to the secure mobile architectures \ud83d\udee1\n\n\\#security \\#trust \\#mobile \\#ZKP \\#KDF\n\n[slides](https://speakerdeck.com/vixentael/upgrading-approaches-to-the-secure-mobile-architectures) | [CocoaHeads Video (ru)](https://www.youtube.com/watch?v=elP6ABURwlA) |\n---- | --- |\n\n\n<img src=\"pics/upgrading_preview.jpg\" alt=\"Upgrading approaches\" style=\"height: 466;\"/>\n\nMobile platforms present both new threats and new opportunities for system security. This presentation deals with modern approaches: how to protect data, which trust relationships emerge with mobile phone, how they affect traditional security layouts. How mobile phones dictate important client-server relationships.\n\nBut, what\u2019s more important, we talk about making these things a consistent system: how to think to pick the right tools, which architectural patterns enforce security and minimize risks by design. We learn about ideas of echelonized defence, compartmentation and risk control. We finish with understanding where we stand right now: in security landscape that is rapidly changing, and mobile\u2019s role in it is both dangerous and very important.\n\n\n\\>\\>\\> [Read more in Medium post](https://medium.com/@vixentael/upgrading-approaches-to-the-secure-mobile-architectures-7a8fcb10d28a) \\<\\<\\<\n\n\n\n**Presented at:**\n\n- [AppBuilders 16](http://2016.appbuilders.ch/)<br/>\nZurich, Switzerland, 25-26 Apr 2016\n\n- [CocoaHeads Kyiv #9](https://www.facebook.com/CocoaHeadsUkraine/)<br/>\nKyiv, Ukraine, June 2016\n\n\n## Working with designs: make \ud83d\udc96 not \u2694\ufe0f\n\n\\#teammanagement \\#development \\#design \\#mobile\n\n[slides](https://speakerdeck.com/vixentael/working-with-designs-make-love-not-war) | [video (ru)](https://www.youtube.com/watch?v=Q-Ah0GNxfbM) |\n---- | --- |\n\nAs the developer, I don\u2019t want to be frustrated when I need to convert designs into assets.\n\nWe will talk about: \n\n* lots of tools and ways how to save own time \n* how to communicate with designer, and \n* if it\u2019s okay to change designs on our own\n \n\n**Presented at:**\n\n- [ITSubbota meetup](https://frameworksdays.com/event/ios-itsat)<br/>\nKyiv, Ukraine, May 2016\n\n\n\n______________________________________________\n\n# 2015\n\n## Avoiding damage, shame and regrets: data protection for mobile client-server architectures \ud83d\udcaa\n\n\\#security \\#trust \\#mobile \\#architecture\n\n[slides](https://speakerdeck.com/vixentael/avoiding-damage-shame-and-regrets-data-protection-for-mobile-client-server-architectures) | [Do iOS video (eng)](https://www.youtube.com/watch?v=zKvt0fv_mkc) |\n---- | --- |\n\n<img src=\"pics/dodo_preview.jpg\" alt=\"Dodo birds\" style=\"height: 466;\"/>\n\n- communication with server: security, reliability, ease of use, choose two \n- applied cryptography: should you manually configure CommonCrypto or ...? \n- practical example: protecting network transport without breaking the app \n- storage security: how to prevent anyone reading your secret chat messages\n\n\n\\>\\>\\> [Read more in Medium post](https://medium.com/stanfy-engineering-practices/data-protection-for-mobile-client-server-architectures-6e6dcabd871a#.d0wjnnp58) \\<\\<\\<\n\n\n**Presented at:**\n\n- [CocoaHeads Kyiv](https://www.facebook.com/CocoaHeadsUkraine/)<br/>\nKyiv, Ukraine, December 2015\n\n- [CocoaConfBy](https://www.facebook.com/groups/iosby/)<br/>\nMinsk, Belarus, December 2015\n\n- [do{iOS}](http://do-ios.com/)<br/>\nAmsterdam, Netherlands, November 2015\n\n\n\n## Data transfer security for mobile apps: what the fish doesn\u2019t notice in the ocean? \ud83d\udc1f\n\n\\#security \\#mobile \\#architecture\n\n[slides](https://speakerdeck.com/vixentael/data-transfer-security-for-mobile-apps-what-the-fish-doesnt-notice-in-the-ocean) | no video |\n---- | --- |\n\n* Wise fish knows there ain\u2019t enough talks about security \n* Communication with server: security, reliability, ease of use, choose two \n* Applied cryptography: should you manually configure CommonCrypto or \u2026? \n* Network security is piranha in risk and ruff in implementation \n* Practical example: protecting network transport without breaking app\n\n**Presented at:**\n\n- [Lviv Mobile Dev Day](http://mdday.lviv.ua/)<br/>\nLviv, Ukraine, October 2015\n\n\n\n## Building profanity filters on mobile: clbuttic sh!t\n\n\\#mobile \\#development \\#nlp\n\n[slides](https://speakerdeck.com/vixentael/building-profanity-filters-on-mobile-clbuttic-sh-t) | no video |\n---- | --- |\n\n\nShort story about building app with profanity text filter inside.\n\n- profanity filters: why we need them in mobile at all? \n- handle tricky cases: what is wrong with word 'classic' \n- how to filter fast (strings vs sets) \n- gentle filtering not to scare users\n\n\n**Presented at:**\n\n- [ITSubbota meetup](https://frameworksdays.com/event/ios-itsat)<br/>\nKyiv, Ukraine, September 2015\n\n\n\n## Users' data security in iOS applications \ud83d\udcf1\n\n\\#security \\#mobile \\#usersdata \\#commoncrypto\n\n[slides](https://speakerdeck.com/vixentael/users-data-security-in-ios-applications) | [video (ru)](https://www.youtube.com/watch?v=d5Fos3e6eo8) |\n---- | --- |\n\n\n* Why should we think about security at all.\n\n* How to protect the users' data. Why shouldn't we store passwords. Encrypt database: it is necessary or too lazy to do that?\n\n* How to transfer data to the server in a safe way. What is MitM attack? \n\n* What is password protection? Why snapshots and pasteboard are dangerous?\n\n\n**Presented at:**\n\n- [WebCamp](https://www.facebook.com/WebCamp)<br/>\nOdessa, Ukraine, July 2015\n\n\n\n## Backend without code. Parse.com: myth and reality \u2601\ufe0f\n\n\\#backend \\#mobile \\#parse \\#development\n\n[slides](https://speakerdeck.com/vixentael/stanfy-madcode-meetup-number-5-backend-without-code-parse-dot-com-myth-and-reality) | [video (ru)](https://www.youtube.com/watch?v=qcbPvEdUCWY) |\n---- | --- |\n\n* How many developers are needed to write client-server mobile app? Fun and easy: set up a new app with Parse.com. \n* Feeling confident enough to use own server? Check migration issues. \n* Own experience: limitations and best practices\n\n\\>\\>\\> [Read more in Medium post](https://medium.com/@stanfy/backend-without-code-parse-com-myth-vs-reality-9965d7b3606) \\<\\<\\<\n\n**Presented at:**\n\n- [Stanfy MadCode Meetup #5](https://www.facebook.com/MadCodeMeetup)<br/>\nKyiv, Ukraine, April 2015\n\n\n## Health psycho atmosphere in dev life \ud83d\udcda\n\n\\#teammanagement \\#development \\#mobile\n\n[slides](https://speakerdeck.com/vixentael/health-psycho-atmosphere-in-dev-life) | no video |\n---- | --- |\n\nNice and useful things to do if you feel too lazy to write code today.\n\n\n**Presented at:**\n\n- [ITSubbota meetup](https://frameworksdays.com/event/ios-itsat)<br/>\nKyiv, Ukraine, April 2015\n\n______________________________________________\n\n# 2014\n\n## Making friends with backend developers \ud83c\udf0a\n\n\\#teammanagement \\#development \\#backend \\#mobile\n\n[slides](https://speakerdeck.com/vixentael/stanfy-madcode-meetup-number-1-making-friends-with-backend-developers) | no video |\n---- | --- |\n\nThis MadCode Webinar was dedicated to the effective interactions between mobile and backend developers to find the ways of productive communications with the latter not spending their time on finding who made errors, but rather building great products together.\n\n\\>\\>\\> [Read more in Medium post](https://stanfy.com/blog/madcode-meetup1/) \\<\\<\\<\n\n\n**Presented at:**\n\n- [Stanfy MadCode Meetup #1](https://www.facebook.com/MadCodeMeetup)<br/>\nKyiv, Ukraine, November 2014\n"
 },
 {
  "repo": "srajat/Visual-Cryptography-Using-K-N-Secret-Sharing",
  "language": "Matlab",
  "readme_contents": "# Visual Cryptography using KN secret Sharing\n\nIn this project we take any image which is to be shared secretly. This image is encrypted using a key given by the user. Further, the encrypted image is divided into N different shares using K N Secret Sharing Algorithm. These N shares can be distributed but, the end user needs only K of these shares to generate the original image. After the original image is generated it is still in encrypted form. The key which is used to encrypt the image originally is now required again to decrypt it, thus providing an additional level of security.\n\n![alt tag](https://raw.githubusercontent.com/srajat/Visual-Cryptography-Using-K-N-Secret-Sharing/master/images/Screenshot%20from%202017-07-02%2014:57:42.png)\n\n\n\n## Table of contents\n\n- [Installation](#installation)\n    - [Prerequisites](#prerequisites)\n    - [Using MATLAB 2015a](#using-matlab-2015a)\n    - [Algorithms Used](#algo)\n- [Observations](#observe)\n    - [AES encryption results](#aes)\n- [Graphical User Interface](#gui)  \n- [Applications](#applications)  \n- [Contributers](#contributers)\n- [Links](#links)\n\n\n\n## Installation <a name='installation'></a>\n\n### Prerequisites <a name='prerequisites'></a>\n\n1. Matlab 2015a or later\n\n### Using Matlab 2015a <a name='using-matlab-2015a'></a>\n<pre>\n1. Copy all matlab files in a folder to your computer\n2. Open Matlab 2015a\n3. Change matlab's current path to the folder  \n4. Find the file knshare.fig, execute command \"run knshare\" in Matlab's console  \n5. Follow the GUI\n</pre>\n\n### Algorithms Used <a name='algo'></a>\n\nImplementing 2 visual cryptographic algorithms namely,\n1. Visual Cryptography by Naor and Shamir for Monochrome images\n2. KN Sharing Scheme for colored images\n\n\n\n\n## Observations <a name='observe'></a>\n\nWe experimented K-N sharing algorithm on Lena image.\nNumber of shares (n) = 10\nNumber of shares to be taken (k) = 6,\nThe experimental result after encryption by the kn encryption algorithm is given below:\n\n![alt tag](https://raw.githubusercontent.com/srajat/Visual-Cryptography-Using-K-N-Secret-Sharing/master/images/Screenshot%20from%202017-07-02%2014:58:00.png)\n\nWe can get the original image only by stacking k or more shares. If value of k is less than\nrequired (in this case k = 6), we will get a partial image. After choosing any number of\nshares of all the generated shares, the reconstructed image is:\n\n![alt tag](https://raw.githubusercontent.com/srajat/Visual-Cryptography-Using-K-N-Secret-Sharing/master/images/Screenshot%20from%202017-07-02%2014:58:05.png)\n\n### AES encryption results <a name='aes'></a>\nA symmetric key based encryption (AES encryption) at both the ends of KN Shares\nAlgorithm is added to make the image more secure.\n\n![alt tag](https://raw.githubusercontent.com/srajat/Visual-Cryptography-Using-K-N-Secret-Sharing/master/images/Screenshot%20from%202017-07-02%2014:58:12.png)\n\nThus, after encrypting the original image with AES first, and then, regenerating the\nshares gives more better and noisy image. Now, the image will require at-least k shares\nalong with the symmetric key in order to decrypt the image to its original form.\n\n\n\n\n## Graphical User Interface <a name='gui'></a>\nGUI for the program is made using Matlab 2015a. It has all the functionalities required\nfor Encryption and Decryption. Following are the steps to run the GUI :-\n\n### 1. Step 1:\nExecute command run knshare in matlab terminal. The KNshare main screen\nappears.\n\n![alt tag](https://raw.githubusercontent.com/srajat/Visual-Cryptography-Using-K-N-Secret-Sharing/master/images/Screenshot%20from%202017-07-02%2014:58:23.png)\n\n### 2. Step 2:\n\nClick on ENCRYPT button to open the encryption window.\n\n![alt tag](https://raw.githubusercontent.com/srajat/Visual-Cryptography-Using-K-N-Secret-Sharing/master/images/Screenshot%20from%202017-07-02%2014:58:29.png)\n\n### 3. Step 3:\n\nClick on BROWSE button to open the File selector. Select the file.\nNow proceed on filling the value of K, N and enter a secure password to encrypt the\nimage. After the process completes, the user is presented with a \"Shares Generated\"\nmessage.\n\nThe current Matlab directory now has n number of shares generated. They are\nnamed as share1.png, share2.png, share3.png, and so on.\n\n### 4. Step 4:\n\nNow we can proceed to Decryption process. Click on DECRYPT from KNshare\nscreen. Decryption Window appears.\n\nNow the User has to select the number of avaliable shares with him, and click on\n\"Start Decryption\". Also the password that had been choosen while encrypting the\nimage must also be entered. Entering wrong password generates another noisy\nimage which is undecipherable.\n\n### 5. Step 5:\n\nAfter process completes, we are greeted with a figure saying \"Merged K shares\".\nThis is the encrypted output.\n\nAfter sometime, the unencrypted image appears on the right. It is same as the orig-\ninal image. After successful completion the message appears \"Image Successfully\nDecrypted\".\n\n\n\n\n## Applications <a name='applications'></a>\nFollowing are some of the areas in which our project can be helpful -\n\n\u2022 DISTRIBUTED SYSTEMS\nSuppose we have N distributed servers. Traditionally if we store a file in only one\nserver, there is a high risk that if it breaks or get hacked, all of our data will be\nlost. So we would like to store our information in a distributed manner, with each\nserver storing a part of the information. We can encrypt and break our data into N\ndifferent parts with each part going into a server. Even if N \u2212 K servers are broken,\nwe can still generate our original data using the K alive servers.\n\n\u2022 DATA TRANSFER SECURITY\nIt is obvious that transferring our data through N channels is more secure than\ntransferring all of it through one channel. We can use the above algorithm to\nencrypt and break data into N different parts and transfer the data simultaneously\nthrough N channels. End user can get K shares and ignore the other N \u2212 K shares.\n\n\n\n\n## Contributers <a name='contributers'></a>\n* Rajat Saxena\n* Satyam Poddar\n* Pranav Pandey\n* Ankush Jangid\n* Divyesh Soni\n\n## Links <a name='links'></a>\n\nVisit me:     [Rajat Saxena](http://www.rajatsaxena.me/)\n\nContact me:     <rajat8171@gmail.com>\n"
 },
 {
  "repo": "mortendahl/mortendahl.github.io",
  "language": "JavaScript",
  "readme_contents": ""
 },
 {
  "repo": "OpenSSE/crypto-tk",
  "language": "C++",
  "readme_contents": "# OpenSSE's Cryptographic Toolkit\n\n[![License: AGPL v3](https://img.shields.io/badge/License-AGPL%20v3-blue.svg)](https://www.gnu.org/licenses/agpl-3.0)\n[![build status](https://badges.herokuapp.com/travis/OpenSSE/crypto-tk?branch=master&label=gcc%20build&env=COMPILER=gcc)](https://travis-ci.org/OpenSSE/crypto-tk)\n[![build status](https://badges.herokuapp.com/travis/OpenSSE/crypto-tk?branch=master&label=clang%20build&env=COMPILER=clang)](https://travis-ci.org/OpenSSE/crypto-tk)\n[![static analysis](https://badges.herokuapp.com/travis/OpenSSE/crypto-tk?branch=master&label=static%20analysis&env=STATIC_ANALYSIS=true)](https://travis-ci.org/OpenSSE/crypto-tk)\n[![Coverity](https://img.shields.io/coverity/scan/17513.svg)](https://scan.coverity.com/projects/opensse-crypto-tk)\n[![Coverage Status](https://coveralls.io/repos/github/OpenSSE/crypto-tk/badge.svg)](https://coveralls.io/github/OpenSSE/crypto-tk)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/1412/badge)](https://bestpractices.coreinfrastructure.org/projects/1412)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/5149d1eb77224a6e981d1b2f46bfb012)](https://www.codacy.com/app/rbost/crypto-tk?utm_source=github.com&utm_medium=referral&utm_content=OpenSSE/crypto-tk&utm_campaign=Badge_Grade)\n[![CodeFactor](https://www.codefactor.io/repository/github/opensse/crypto-tk/badge)](https://www.codefactor.io/repository/github/opensse/crypto-tk)\n\nThe searchable encryption protocols rely on high level cryptographic features such as pseudo-random functions, hash functions, encryption schemes, or incremental set hashing. The cryptographic layer provides interfaces and implementations of these features.\n\n## Why a new crypto library\n\nA lot of great crypto libraries exist out there (_e.g._ [libsodium](https://github.com/jedisct1/libsodium)). Unfortunately, they do not offer the level of abstraction needed to implement searchable encryption schemes easily. Indeed, cryptographic objects such as pseudo-random functions, trapdoor permutations, pseudo-random generators, _etc_, are building blocks of such constructions, and OpenSSL or libsodium do not offer interfaces to such objects.\n\nThis library provides these APIs so that the SSE implementer has consistent high-level crypto interfaces and does not have to care about the inner implementation of the blocks.\n\n## Disclaimer\n\nThis is code for a **research project**. It **should not be used in practice**: the code lacks good C/C++ security practice, and it has never been externally reviewed.\n\n## Getting the Code\n\nYou can get the code by cloning the code repository from GitHub. When you do so, be sure to also pull the submodules, or otherwise, nothing will compile:\n\n```sh\ngit clone https://github.com/OpenSSE/crypto-tk.git\ncd crypto-tk\ngit submodule update --init --recursive\n```\n\n## Building\n\nBuilding is done using CMake. The minimum required version is CMake 3.1.\n\n### Dependencies\n\n`libsse_crypto` uses the following dependencies\n\n-   [libsodium](https://download.libsodium.org/doc/). libsodium version >=1.0.16 is necessary.\n\n-   [RELIC](https://github.com/relic-toolkit/relic) Some features (puncturable encryption) are based on cryptographic pairings. These are implemented using the RELIC toolkit. RELIC has many compilation options. The current code has been tested against RELIC v0.5.0. To install RELIC in that version, you can do the following:\n\n```sh\ngit clone -b relic-toolkit-0.5.0 https://github.com/relic-toolkit/relic.git\ncd relic\nmkdir build; cd build\ncmake -G \"Unix Makefiles\" -DMULTI=PTHREAD -DCOMP=\"-O3 -funroll-loops -fomit-frame-pointer -finline-small-functions -march=native -mtune=native\" -DARCH=\"X64\"  -DRAND=\"UDEV\" -DWITH=\"BN;DV;FP;FPX;EP;EPX;PP;PC;MD\" -DCHECK=off -DVERBS=off -DDEBUG=off -DBENCH=0 -DTESTS=1 -DARITH=gmp -DFP_PRIME=254 -DFP_QNRES=off -DFP_METHD=\"INTEG;INTEG;INTEG;MONTY;LOWER;SLIDE\" -DFPX_METHD=\"INTEG;INTEG;LAZYR\" -DPP_METHD=\"LAZYR;OATEP\" -DBN_PRECI=256 -DFP_QNRES=on ../.\nmake\nmake install\n```\n\nYou can also replace the `-DARITH=gmp` option by `-DARITH=x64-asm-254` (for better performance) or `-DARITH=easy` (to get rid of the gmp dependency). Note that the first two depend on [gmp](https://gmplib.org).\n\n#### Optional Dependencies\n\n-   [OpenSSL](https://www.openssl.org)'s cryptographic library (`libcrypto`). The trapdoor permutation is based on RSA, and `libsse_crypto` can use OpenSSL to implement RSA. The code has been compiled and tested using OpenSSL 1.0.2. Note that this part of the code is now deprecated and is incompatible with OpenSSL 1.1.0 APIs.\n\n### Compiler\n\n`libsse_crypto` needs a compiler supporting C++11.\nYou can easily check that `libsse_crypto` is successfully built on Ubuntu 14 LTS with gcc 4.8 using Travis.\nIt has also been successfully built and tested on Ubuntu 16 LTS using both clang (versions 3.8, 4.0 and 5.0) and gcc (versions 4.8, 4.9 and 5.0) and on Mac OS X.12 using clang 9.0.0.\n\n### Setting up your system\n\nHere is what is necessary to set your system up from scratch, and build `libsse_crypto` (you will need to build RELIC first though).\n\n#### Ubuntu 14.04 LTS\n\n```sh\n [sudo] add-apt-repository ppa:ubuntu-toolchain-r/test\n [sudo] apt-get update\n [sudo] apt-get install build-essential cmake3 libtool libssl-dev libgmp-dev\n```\n\nTo install the three dependencies, you can either follow the instructions of their website (in particular for libsodium), or use the embedded install scripts. These might have to be modified to fit your needs (e.g. if you do not want to install RELIC system-wide, or if you are not a sudoer).\nTo do so, move to directory `install_dependencies`, and run `./install_sodium.sh` to download and install libsodium 1.0.16 and `./install_relic_easy.sh` to install RELIC with the `easy` arithmetic.\nIf you want to use the gmp arithmetic or the x64 assembly arithmetic, run respectively `./install_relic_gmp.sh` and `./install_relic_asm.sh`.\n\n#### Ubuntu 16.04 LTS\n\n```sh\n [sudo] apt-get update\n [sudo] apt-get install build-essential cmake libtool libssl-dev libgmp-dev\n```\n\nYou can then install libsodium as for Ubuntu 14.\nFor RELIC, use one of the scripts `install_relic_easy.sh`, `install_relic_gmp.sh`, or `install_relic_x64_asm.sh` depending on the arithmetic you prefer.\n\n#### Mac OS\n\n```sh\n [sudo] xcode-select --install\n```\n\nIf you still haven't, you should get [Homebrew](https://brew.sh/).\nYou will actually need it to install dependencies:\n\n```sh\n brew install cmake openssl gmp libsodium\n```\n\nYou will only need to install RELIC, which can be done following the instructions found above, or use one of the scripts `install_relic_easy.sh`, `install_relic_gmp.sh`, or `install_relic_x64_asm.sh` depending on the arithmetic you prefer.\n\n### Basic build\n\nTo build all of the targets with the default configuration in the `build` directory, run the following commands:\n\n```sh\nmkdir build && cd build\ncmake ..\nmake\n```\n\n### Targets\n\nThe following targets can be built:\n\n-   `debug_crypto`: the executable constructed from the `main.cpp` file. It must be used as a debugging tool (to develop new features).\n\n-   `check`: unit tests. It uses [Google Test](https://github.com/google/googletest).\n\n-   `test`: runs the unit tests produced by the previous target.\n\n-   `sse_crypto`: the compiled library.\n\nTo only build the library, call `make sse_crypto` instead of just `make`.\n\n### Build Configuration and Options\n\nAs the library builds using CMake, the configuration is highly configurable.\nLike other CMake-based projects, options are set by passing `-DOPTION_NAME=value` to the `cmake` command.\nFor example, for a debug build, use `-DCMAKE_BUILD_TYPE=Debug`.\nAlso, you can change the compiler used for the project by setting the `CC` and `CXX` environment variables.\nFor example, if you wish to use Clang, you can set the project up with the following command\n`CC=clang CXX=clang++ cmake ..`.\n\n#### Options\n\nThis project's CMake takes the following options:\n\n-   `ENABLE_COVERAGE=On|Off`: Respectively enables and disable the code coverage functionalities. Disabled by default.\n\n-   `SANITIZE_ADDRESS=On|Off`: Compiles the library with [AddressSanitizer (ASan)](https://github.com/google/sanitizers/wiki/AddressSanitizer) when set to `On`. Great to check for stack/heap buffer overflows, memory leaks, ... Disabled by default.\n\n-   `SANITIZE_UNDEFINED=On|Off`: When set to `On`, compiles the library with [UndefinedBehaviorSanitizer (UBSan)](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html). UBSan detects undefined behavior at runtime in your code. Disabled by default.\n\n-   `opensse_ENABLE_WALL=On|Off`: Toggles the `-Wall` compiler option. On by default\n\n-   `opensse_ENABLE_WEXTRA=On|Off`: Toggles the `-Wextra` compiler option. On by default\n\n-   `opensse_ENABLE_WERROR=On|Off`: Toggles the `-Werror` compiler option to turn all warnings into errors. On by default\n\n-   `CMAKE_BUILD_TYPE`: Sets the build type. See [CMake's documentation](https://cmake.org/cmake/help/v3.12/variable/CMAKE_BUILD_TYPE.html) for more details. The `Debug` build type is used by default. Use `Release` for an optimized build.\n\nTo see all the available options, and interactively edit them, you can also use the `ccmake` tool.\n\nFor more information about how to use CMake, take a look at [CMake's FAQ](https://gitlab.kitware.com/cmake/community/wikis/FAQ), or at the [documentation](https://cmake.org/cmake/help/v3.0/index.html).\n\nThis project used to support an OpenSSL-based backend for trapdoor functions. It is now deprecated as it is incompatible with the new OpenSSL 1.1.0 APIs.\nThe corresponding code will be removed at some point.\n\n## Documentation\n\nDocumentation for the library's APIs can be built with Doxygen. There is a specific CMake target to build the documentation: use `$ make doc` to construct the HTML documentation. To display the documentation, open `build/src/doc/html/index.html`.\n\n## Code coverage\n\nCode coverage is available by passing the `-DENABLE_COVERAGE=On` option to CMake.\nOnce the tests have been run, a report can be then generated with the `lcov-genhtml` target.\n\nSo to generate the code coverage for all the tests, first install lcov with\n`[sudo] apt-get install lcov` (on Ubuntu) or `brew install lcov` (on Mac OS). Then run\n\n```sh\nmkdir build && cd build\ncmake -DENABLE_COVERAGE=On ..\nmake\nmake test\nmake lcov-geninfo && make lcov-genhtml\n```\n\nAn HTML report will be available in the `build/lcov/html/selected_targets` directory.\n\n## Contributors\n\nAn implementation of RSA (including key serialization functions) is embedded in `libsse_crypto`. It is originated from [mbedTLS](https://tls.mbed.org)).\nThe puncturable encryption code has been originally written by [Ian Miers](https://www.cs.jhu.edu/~imiers/) as a part of [libforwardsec](https://github.com/imichaelmiers/libforwardsec).\nUnless otherwise stated, the rest of the code has been written by [Raphael Bost](https://raphael.bost.fyi/).\n\n## Licensing\n\nmbedTLS is released under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0).\n\nUnless otherwise stated, the rest of the code is licensed under the [GNU Affero General Public License v3](https://www.gnu.org/licenses/agpl.html).\n\n![AGPL](https://www.gnu.org/graphics/agplv3-88x31.png)\n"
 },
 {
  "repo": "MidLevel/MLAPI.Cryptography",
  "language": "C#",
  "readme_contents": "# MLAPI.Cryptography\nMLAPI.Cryptography is a Unity friendly crypto library to fill the missing features of Unity's Mono runtime framework.\n\nCurrently it offers a BigInt, ECDHE, ECDHE_RSA and EllipticCurve implementation. Note that MLAPI.Cryptography is **NOT** designed to be an extensive crypto library such as NaCL or replace the .NET Framework. It's simply there to fill the missing gaps in the Unity Engine. Behind the scenes, MLAPI.Cryptography will use as much of the avalible .NET surface as possible. An example of this is the ECDHE_RSA implementation which uses MLAPI.Cryptographys BigInt, EllipticCurve and DiffieHellman implementations while it uses .NET's RSA implementation.\n\n\n### ECDHE Usage\n```csharp\n// Both create their instances\nECDiffieHellman serverDiffie = new ECDiffieHellman();\nECDiffieHellman clientDiffie = new ECDiffieHellman();\n\n// Exchange publics\n\n/* START TRANSMISSION */\nbyte[] serverPublic = serverDiffie.GetPublicKey();\nbyte[] clientPublic = clientDiffie.GetPublicKey();\n/* END TRANSMISSION */\n\n// Calculate shared\nbyte[] key1 = serverDiffie.GetSharedSecretRaw(clientPublic);\nbyte[] key2 = clientDiffie.GetSharedSecretRaw(serverPublic);\n```\n\n### ECDHERSA Usage\n```csharp\n// Key pairs\nRSAParameters privateKey;\nRSAParameters publicKey;\n\n// Generate keys, you can use X509Certificate2 instead of raw RSA keys.\nusing (RSACryptoServiceProvider rsaGen = new RSACryptoServiceProvider(2048))\n{\n    privateKey = rsaGen.ExportParameters(true);\n    publicKey = rsaGen.ExportParameters(false);\n}\n\nusing (RSACryptoServiceProvider serverRSA = new RSACryptoServiceProvider())\nusing (RSACryptoServiceProvider clientRSA = new RSACryptoServiceProvider())\n{\n    serverRSA.ImportParameters(privateKey);\n    clientRSA.ImportParameters(publicKey);\n\n    // Both create their instances, constructor can take certificate instead or RSA key.\n    ECDiffieHellmanRSA serverDiffie = new ECDiffieHellmanRSA(serverRSA);\n    ECDiffieHellmanRSA clientDiffie = new ECDiffieHellmanRSA(clientRSA);\n\n    // Exchange publics\n\n    /* START TRANSMISSION */\n    byte[] serverPublic = serverDiffie.GetSecurePublicPart();\n    byte[] clientPublic = clientDiffie.GetSecurePublicPart();\n    /* END TRANSMISSION */\n\n    // Calculate shared\n    byte[] key1 = serverDiffie.GetVerifiedSharedPart(clientPublic);\n    byte[] key2 = clientDiffie.GetVerifiedSharedPart(serverPublic);\n}\n```\n### Timing Side Channel Attack Prevention\n```csharp\nbyte[] array1 = new byte[120];\nbyte[] array2 = new byte[120];\narray[50] = 67;\n\n// This comparison will take constant time, no matter where the diff is (if any).\nbool equal = ComparisonUtils.ConstTimeArrayEqual(array1, array2);\n```"
 },
 {
  "repo": "potatosalad/erlang-jose",
  "language": "Erlang",
  "readme_contents": "# JOSE\n\nJSON Object Signing and Encryption (JOSE) for Erlang and Elixir.\n\n## Installation\n\nAdd `jose` to your project's dependencies in `mix.exs`\n\n```elixir\ndefp deps() do\n  [\n    {:jose, \"~> 1.11\"}\n  ]\nend\n```\n\nIf you are using deployment tools (`exrm`, etc.) and your app depends\non `jose` directly, you will need to include `jose` in your\napplications list in `mix.exs` to ensure they get compiled into your\nrelease:\n\n```elixir\ndef application() do\n  [\n    mod: {YourApp, []},\n    applications: [:jose]\n  ]\nend\n```\n\nAdd `jose` to your project's dependencies in your `Makefile` for [`erlang.mk`](https://github.com/ninenines/erlang.mk) or the following to your `rebar.config`\n\n```erlang\n{deps, [\n  jose\n]}.\n```\n\n#### JSON Encoder/Decoder\n\nYou will also need to specify either [jiffy](https://github.com/davisp/jiffy), [jsone](https://github.com/sile/jsone), [jsx](https://github.com/talentdeficit/jsx), [ojson](https://github.com/potatosalad/erlang-ojson), [Poison](https://github.com/devinus/poison), or [Jason](https://github.com/michalmuskala/jason) as a dependency.\n\nFor example, with Elixir and `mix.exs`\n\n```elixir\ndefp deps() do\n  [\n    {:jose, \"~> 1.11\"},\n    {:jason, \"~> 1.2\"}\n  ]\nend\n```\n\nOr with Erlang and `rebar.config`\n\n```erlang\n{deps, [\n  jose,\n  ojson\n]}.\n```\n\n`jose` will attempt to find a suitable JSON encoder/decoder and will try to use (in order) ojson, Jason, Poison, jiffy, jsone, or jsx.\n\nYou may also specify a different `json_module` as an application environment variable to `jose` or by using `jose:json_module/1` or `JOSE.json_module/1`.\n\n#### ChaCha20/Poly1305 Support\n\nChaCha20/Poly1305 encryption and one-time message authentication functions are experimentally supported based on [RFC 7539](https://tools.ietf.org/html/rfc7539).\n\nFallback support for `ChaCha20/Poly1305` encryption and `Poly1305` signing is also provided.  See [`crypto_fallback`](#cryptographic-algorithm-fallback) below.\n\nExternal support is also provided by the following libraries:\n\n * [libsodium](https://github.com/potatosalad/erlang-libsodium) - `ChaCha20/Poly1305` encryption and `Poly1305` signing\n\nOther modules which implement the `jose_chacha20_poly1305` behavior may also be used as follows:\n\n```elixir\n# ChaCha20/Poly1305\nJOSE.chacha20_poly1305_module(:libsodium)                  # uses a fast Erlang port driver for libsodium\nJOSE.chacha20_poly1305_module(:jose_jwa_chacha20_poly1305) # uses the pure Erlang implementation (slow)\n```\n\n#### Curve25519 and Curve448 Support\n\nCurve25519 and Curve448 and their associated signing/key exchange functions are supported now that [RFC 8037](https://tools.ietf.org/html/rfc8037) has been published.\n\nFallback support for `Ed25519`, `Ed25519ph`, `Ed448`, `Ed448ph`, `X25519`, and `X448` is provided.  See [`crypto_fallback`](#cryptographic-algorithm-fallback) below.\n\nExternal support is also provided by the following libraries:\n\n * [libdecaf](https://github.com/potatosalad/erlang-libdecaf) - `Ed25519`, `Ed25519ph`, `Ed448`, `Ed448ph`, `X25519`, `X448`\n * [libsodium](https://github.com/potatosalad/erlang-libsodium) - `Ed25519`, `Ed25519ph`, `X25519`\n\nIf both libraries are present, libdecaf will be used by default.  Other modules which implement the `jose_curve25519` or `jose_curve448` behaviors may also be used as follows:\n\n```elixir\n# Curve25519\nJOSE.curve25519_module(:libdecaf)            # uses a fast Erlang NIF for libdecaf\nJOSE.curve25519_module(:jose_jwa_curve25519) # uses the pure Erlang implementation (slow)\n\n# Curve448\nJOSE.curve448_module(:libdecaf)          # uses a fast Erlang NIF for libdecaf\nJOSE.curve448_module(:jose_jwa_curve448) # uses the pure Erlang implementation (slow)\n```\n\n#### SHA-3 Support\n\nSHA-3 is experimentally supported for use with `Ed448` and `Ed448ph` signing functions.\n\nFallback support for SHA-3 is provided.  See [`crypto_fallback`](#cryptographic-algorithm-fallback) below.\n\nExternal support for SHA-3 is provided by the [keccakf1600](https://github.com/potatosalad/erlang-keccakf1600) and [libdecaf](https://github.com/potatosalad/erlang-libdecaf) libraries.  If present, keccakf1600 will be used by default.  Other modules which implement the `jose_sha3` behaviors may also be used as follows:\n\n```elixir\nJOSE.sha3_module(:keccakf1600)   # uses a NIF written in C with timeslice reductions\nJOSE.sha3_module(:jose_jwa_sha3) # uses the pure Erlang implementation (slow)\n```\n\n#### Cryptographic Algorithm Fallback\n\n`jose` strives to support [all](#algorithm-support) of the cryptographic algorithms specified in the [JOSE RFCs](https://tools.ietf.org/wg/jose/).\n\nHowever, not all of the required algorithms are supported natively by Erlang/Elixir.  For algorithms unsupported by the native [`crypto`](http://www.erlang.org/doc/man/crypto.html) and [`public_key`](http://www.erlang.org/doc/man/public_key.html), `jose` has a pure Erlang implementation that may be used as a fallback.\n\nSee [ALGORITHMS.md](https://github.com/potatosalad/erlang-jose/blob/master/ALGORITHMS.md) for more information about algorithm support for specific OTP versions.\n\nBy default, the algorithm fallback is disabled, but can be enabled by setting the `crypto_fallback` application environment variable for `jose` to `true` or by calling `jose:crypto_fallback/1` or `JOSE.crypto_fallback/1` with `true`.\n\nYou may also review which algorithms are currently supported with the `jose_jwa:supports/0` or `JOSE.JWA.supports/0` functions.  For example, on Elixir 1.9.4 and OTP 22:\n\n```elixir\n# crypto_fallback defaults to false\nJOSE.JWA.supports()\n\n[\n  {:jwe,\n   {:alg,\n    [\"A128GCMKW\", \"A128KW\", \"A192GCMKW\", \"A192KW\", \"A256GCMKW\", \"A256KW\",\n     \"C20PKW\", \"ECDH-1PU\", \"ECDH-1PU+A128GCMKW\", \"ECDH-1PU+A128KW\",\n     \"ECDH-1PU+A192GCMKW\", \"ECDH-1PU+A192KW\", \"ECDH-1PU+A256GCMKW\",\n     \"ECDH-1PU+A256KW\", \"ECDH-1PU+C20PKW\", \"ECDH-ES\", \"ECDH-ES+A128GCMKW\",\n     \"ECDH-ES+A128KW\", \"ECDH-ES+A192GCMKW\", \"ECDH-ES+A192KW\",\n     \"ECDH-ES+A256GCMKW\", \"ECDH-ES+A256KW\", \"ECDH-ES+C20PKW\",\n     \"PBES2-HS256+A128GCMKW\", \"PBES2-HS256+A128KW\", \"PBES2-HS384+A192GCMKW\",\n     \"PBES2-HS384+A192KW\", \"PBES2-HS512+A256GCMKW\", \"PBES2-HS512+A256KW\",\n     \"PBES2-HS512+C20PKW\", \"RSA-OAEP\", \"RSA-OAEP-256\", \"RSA1_5\", \"dir\"]},\n   {:enc,\n    [\"A128CBC-HS256\", \"A128GCM\", \"A192CBC-HS384\", \"A192GCM\", \"A256CBC-HS512\",\n     \"A256GCM\", \"C20P\"]}, {:zip, [\"DEF\"]}},\n  {:jwk, {:kty, [\"EC\", \"OKP\", \"RSA\", \"oct\"]}, {:kty_OKP_crv, []}},\n  {:jws,\n   {:alg,\n    [\"ES256\", \"ES384\", \"ES512\", \"HS256\", \"HS384\", \"HS512\", \"PS256\", \"PS384\",\n     \"PS512\", \"Poly1305\", \"RS256\", \"RS384\", \"RS512\"]}}\n]\n\n# setting crypto_fallback to true\nJOSE.crypto_fallback(true)\n\n# additional algorithms are now available for use\nJOSE.JWA.supports()\n\n[\n  {:jwe,\n   {:alg,\n    [\"A128GCMKW\", \"A128KW\", \"A192GCMKW\", \"A192KW\", \"A256GCMKW\", \"A256KW\",\n     \"C20PKW\", \"ECDH-1PU\", \"ECDH-1PU+A128GCMKW\", \"ECDH-1PU+A128KW\",\n     \"ECDH-1PU+A192GCMKW\", \"ECDH-1PU+A192KW\", \"ECDH-1PU+A256GCMKW\",\n     \"ECDH-1PU+A256KW\", \"ECDH-1PU+C20PKW\", \"ECDH-1PU+XC20PKW\", \"ECDH-ES\",\n     \"ECDH-ES+A128GCMKW\", \"ECDH-ES+A128KW\", \"ECDH-ES+A192GCMKW\",\n     \"ECDH-ES+A192KW\", \"ECDH-ES+A256GCMKW\", \"ECDH-ES+A256KW\", \"ECDH-ES+C20PKW\",\n     \"ECDH-ES+XC20PKW\", \"PBES2-HS256+A128GCMKW\", \"PBES2-HS256+A128KW\",\n     \"PBES2-HS384+A192GCMKW\", \"PBES2-HS384+A192KW\", \"PBES2-HS512+A256GCMKW\",\n     \"PBES2-HS512+A256KW\", \"PBES2-HS512+C20PKW\", \"PBES2-HS512+XC20PKW\",\n     \"RSA-OAEP\", \"RSA-OAEP-256\", \"RSA1_5\", \"XC20PKW\", \"dir\"]},\n   {:enc,\n    [\"A128CBC-HS256\", \"A128GCM\", \"A192CBC-HS384\", \"A192GCM\", \"A256CBC-HS512\",\n     \"A256GCM\", \"C20P\", \"XC20P\"]}, {:zip, [\"DEF\"]}},\n  {:jwk, {:kty, [\"EC\", \"OKP\", \"RSA\", \"oct\"]},\n   {:kty_OKP_crv,\n    [\"Ed25519\", \"Ed25519ph\", \"Ed448\", \"Ed448ph\", \"X25519\", \"X448\"]}},\n  {:jws,\n   {:alg,\n    [\"ES256\", \"ES384\", \"ES512\", \"Ed25519\", \"Ed25519ph\", \"Ed448\", \"Ed448ph\",\n     \"HS256\", \"HS384\", \"HS512\", \"PS256\", \"PS384\", \"PS512\", \"Poly1305\", \"RS256\",\n     \"RS384\", \"RS512\"]}}\n]\n```\n\n#### Unsecured Signing Vulnerability\n\nThe [`\"none\"`](https://tools.ietf.org/html/rfc7515#appendix-A.5) signing algorithm is disabled by default to prevent accidental verification of empty signatures (read about the vulnerability [here](https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/)).\n\nIf you want to further restrict the signature algorithms allowed for a token, use `JOSE.JWT.verify_strict/3`:\n\n```elixir\n# Signed Compact JSON Web Token (JWT) with HS256\ntoken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzMDA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlLCJpc3MiOiJqb2UifQ.shLcxOl_HBBsOTvPnskfIlxHUibPN7Y9T4LhPB-iBwM\"\n\n# JSON Web Key (JWK)\njwk = %{\n  \"kty\" => \"oct\",\n  \"k\" => :jose_base64url.encode(\"symmetric key\")\n}\n\n{verified, _, _} = JOSE.JWT.verify_strict(jwk, [\"HS256\"], token)\n# {true, _, _}\n\n{verified, _, _} = JOSE.JWT.verify_strict(jwk, [\"RS256\"], token)\n# {false, _, _}\n```\n\nIf you need to inspect the contents of a JSON Web token (JWT) prior to verifying it, use `JOSE.JWT.peek_payload/1` or `JOSE.JWT.peek_protected/1`:\n\n```elixir\ntoken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzMDA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlLCJpc3MiOiJqb2UifQ.shLcxOl_HBBsOTvPnskfIlxHUibPN7Y9T4LhPB-iBwM\"\n\npayload = JOSE.JWT.peek_payload(token)\n# %JOSE.JWT{fields: %{\"exp\" => 1300819380, \"http://example.com/is_root\" => true,\n#    \"iss\" => \"joe\"}}\n\nprotected = JOSE.JWT.peek_protected(token)\n# %JOSE.JWS{alg: {:jose_jws_alg_hmac, {:jose_jws_alg_hmac, :sha256}},\n#  b64: :undefined, fields: %{\"typ\" => \"JWT\"}}\n\n# If you want to inspect the JSON, you can convert it back to a regular map:\n{_, protected_map} = JOSE.JWS.to_map(protected)\n# {_, %{\"alg\" => \"HS256\", \"typ\" => \"JWT\"}}\n```\n\nYou may also enable the `\"none\"` algorithm as an application environment variable for `jose` or by using `jose:unsecured_signing/1` or `JOSE.unsecured_signing/1`.\n\n```elixir\n# unsecured_signing defaults to false\nJOSE.JWA.supports[:jws]\n\n{:alg,\n [\"ES256\", \"ES384\", \"ES512\", \"Ed25519\", \"Ed25519ph\", \"Ed448\", \"Ed448ph\",\n  \"HS256\", \"HS384\", \"HS512\", \"PS256\", \"PS384\", \"PS512\", \"Poly1305\", \"RS256\",\n  \"RS384\", \"RS512\"]}\n\n# setting unsecured_signing to true\nJOSE.unsecured_signing(true)\n\n# the \"none\" algorithm is now available for use\nJOSE.JWA.supports[:jws]\n\n{:alg,\n [\"ES256\", \"ES384\", \"ES512\", \"Ed25519\", \"Ed25519ph\", \"Ed448\", \"Ed448ph\",\n  \"HS256\", \"HS384\", \"HS512\", \"PS256\", \"PS384\", \"PS512\", \"Poly1305\", \"RS256\",\n  \"RS384\", \"RS512\", \"none\"]}\n```\n\n## Usage\n\n##### JSON Web Signature (JWS) of JSON Web Token (JWT) using HMAC using SHA-256 (HS256) with JSON Web Key (JWK)\n\n_Elixir_\n\n```elixir\n# JSON Web Key (JWK)\njwk = %{\n  \"kty\" => \"oct\",\n  \"k\" => :jose_base64url.encode(\"symmetric key\")\n}\n\n# JSON Web Signature (JWS)\njws = %{\n  \"alg\" => \"HS256\"\n}\n\n# JSON Web Token (JWT)\njwt = %{\n  \"iss\" => \"joe\",\n  \"exp\" => 1300819380,\n  \"http://example.com/is_root\" => true\n}\n\nsigned = JOSE.JWT.sign(jwk, jws, jwt)\n# {%{alg: :jose_jws_alg_hmac},\n#  %{\"payload\" => \"eyJleHAiOjEzMDA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlLCJpc3MiOiJqb2UifQ\",\n#    \"protected\" => \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n#    \"signature\" => \"shLcxOl_HBBsOTvPnskfIlxHUibPN7Y9T4LhPB-iBwM\"}}\n\ncompact_signed = JOSE.JWS.compact(signed)\n# {%{alg: :jose_jws_alg_hmac},\n#  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzMDA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlLCJpc3MiOiJqb2UifQ.shLcxOl_HBBsOTvPnskfIlxHUibPN7Y9T4LhPB-iBwM\"}\n\nverified = JOSE.JWT.verify(jwk, compact_signed)\n# {true,\n#  %JOSE.JWT{fields: %{\"exp\" => 1300819380, \"http://example.com/is_root\" => true,\n#     \"iss\" => \"joe\"}},\n#  %JOSE.JWS{alg: {:jose_jws_alg_hmac, :HS256}, b64: :undefined,\n#   fields: %{\"typ\" => \"JWT\"}}}\n\nverified == JOSE.JWT.verify(jwk, signed)\n# true\n```\n\n_Erlang_\n\n```erlang\n% JSON Web Key (JWK)\nJWK = #{\n  <<\"kty\">> => <<\"oct\">>,\n  <<\"k\">> => jose_base64url:encode(<<\"symmetric key\">>)\n}.\n\n% JSON Web Signature (JWS)\nJWS = #{\n  <<\"alg\">> => <<\"HS256\">>\n}.\n\n% JSON Web Token (JWT)\nJWT = #{\n  <<\"iss\">> => <<\"joe\">>,\n  <<\"exp\">> => 1300819380,\n  <<\"http://example.com/is_root\">> => true\n}.\n\nSigned = jose_jwt:sign(JWK, JWS, JWT).\n% {#{alg => jose_jws_alg_hmac},\n%  #{<<\"payload\">> => <<\"eyJleHAiOjEzMDA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlLCJpc3MiOiJqb2UifQ\">>,\n%    <<\"protected\">> => <<\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\">>,\n%    <<\"signature\">> => <<\"shLcxOl_HBBsOTvPnskfIlxHUibPN7Y9T4LhPB-iBwM\">>}}\n\nCompactSigned = jose_jws:compact(Signed).\n% {#{alg => jose_jws_alg_hmac},\n%  <<\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzMDA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlLCJpc3MiOiJqb2UifQ.shLcxOl_HBBsOTvPnskfIlxHUibPN7Y9T4LhPB-iBwM\">>}\n\nVerified = jose_jwt:verify(JWK, CompactSigned).\n% {true,\n%     #jose_jwt{\n%         fields =\n%             #{<<\"exp\">> => 1300819380,\n%               <<\"http://example.com/is_root\">> => true,\n%               <<\"iss\">> => <<\"joe\">>}},\n%     #jose_jws{\n%         alg = {jose_jws_alg_hmac,'HS256'},\n%         b64 = undefined,\n%         fields = #{<<\"typ\">> => <<\"JWT\">>}}}\n\nVerified =:= jose_jwt:verify(JWK, Signed).\n% true\n```\n\n##### Reading JSON Web Keys (JWK) from PEM files\n\nThe examples below use three keys created with `openssl`:\n\n```bash\n# RSA Private Key\nopenssl genrsa -out rsa-2048.pem 2048\n\n# EC Private Key (Alice)\nopenssl ecparam -name secp256r1 -genkey -noout -out ec-secp256r1-alice.pem\n\n# EC Private Key (Bob)\nopenssl ecparam -name secp256r1 -genkey -noout -out ec-secp256r1-bob.pem\n```\n\n_Elixir_\n\n```elixir\n# RSA examples\nrsa_private_jwk = JOSE.JWK.from_pem_file(\"rsa-2048.pem\")\nrsa_public_jwk  = JOSE.JWK.to_public(rsa_private_jwk)\n\n## Sign and Verify (defaults to PS256)\nmessage = \"my message\"\nsigned = JOSE.JWK.sign(message, rsa_private_jwk)\n{true, ^message, _} = JOSE.JWK.verify(signed, rsa_public_jwk)\n\n## Sign and Verify (specify RS256)\nsigned = JOSE.JWK.sign(message, %{ \"alg\" => \"RS256\" }, rsa_private_jwk)\n{true, ^message, _} = JOSE.JWK.verify(signed, rsa_public_jwk)\n\n## Encrypt and Decrypt (defaults to RSA-OAEP with A128CBC-HS256)\nplain_text = \"my plain text\"\nencrypted = JOSE.JWK.block_encrypt(plain_text, rsa_public_jwk)\n{^plain_text, _} = JOSE.JWK.block_decrypt(encrypted, rsa_private_jwk)\n\n## Encrypt and Decrypt (specify RSA-OAEP-256 with A128GCM)\nencrypted = JOSE.JWK.block_encrypt(plain_text, %{ \"alg\" => \"RSA-OAEP-256\", \"enc\" => \"A128GCM\" }, rsa_public_jwk)\n{^plain_text, _} = JOSE.JWK.block_decrypt(encrypted, rsa_private_jwk)\n\n# EC examples\nalice_private_jwk = JOSE.JWK.from_pem_file(\"ec-secp256r1-alice.pem\")\nalice_public_jwk  = JOSE.JWK.to_public(alice_private_jwk)\nbob_private_jwk   = JOSE.JWK.from_pem_file(\"ec-secp256r1-bob.pem\")\nbob_public_jwk    = JOSE.JWK.to_public(bob_private_jwk)\n\n## Sign and Verify (defaults to ES256)\nmessage = \"my message\"\nsigned = JOSE.JWK.sign(message, alice_private_jwk)\n{true, ^message, _} = JOSE.JWK.verify(signed, alice_public_jwk)\n\n## Encrypt and Decrypt (defaults to ECDH-ES with A128GCM)\n### Alice sends Bob a secret message using Bob's public key and Alice's private key\nalice_to_bob = \"For Bob's eyes only.\"\nencrypted = JOSE.JWK.box_encrypt(alice_to_bob, bob_public_jwk, alice_private_jwk)\n### Only Bob can decrypt the message using his private key (Alice's public key is embedded in the JWE header)\n{^alice_to_bob, _} = JOSE.JWK.box_decrypt(encrypted, bob_private_jwk)\n```\n\n_Erlang_\n\n```erlang\n% RSA examples\nRSAPrivateJWK = jose_jwk:from_pem_file(\"rsa-2048.pem\"),\nRSAPublicJWK  = jose_jwk:to_public(RSAPrivateJWK).\n\n%% Sign and Verify (defaults to PS256)\nMessage = <<\"my message\">>,\nSignedPS256 = jose_jwk:sign(Message, RSAPrivateJWK),\n{true, Message, _} = jose_jwk:verify(SignedPS256, RSAPublicJWK).\n\n%% Sign and Verify (specify RS256)\nSignedRS256 = jose_jwk:sign(Message, #{ <<\"alg\">> => <<\"RS256\">> }, RSAPrivateJWK),\n{true, Message, _} = jose_jwk:verify(SignedRS256, RSAPublicJWK).\n\n%% Encrypt and Decrypt (defaults to RSA-OAEP with A128CBC-HS256)\nPlainText = <<\"my plain text\">>,\nEncryptedRSAOAEP = jose_jwk:block_encrypt(PlainText, RSAPublicJWK),\n{PlainText, _} = jose_jwk:block_decrypt(EncryptedRSAOAEP, RSAPrivateJWK).\n\n%% Encrypt and Decrypt (specify RSA-OAEP-256 with A128GCM)\nEncryptedRSAOAEP256 = jose_jwk:block_encrypt(PlainText, #{ <<\"alg\">> => <<\"RSA-OAEP-256\">>, <<\"enc\">> => <<\"A128GCM\">> }, RSAPublicJWK),\n{PlainText, _} = jose_jwk:block_decrypt(EncryptedRSAOAEP256, RSAPrivateJWK).\n\n% EC examples\nAlicePrivateJWK = jose_jwk:from_pem_file(\"ec-secp256r1-alice.pem\"),\nAlicePublicJWK  = jose_jwk:to_public(AlicePrivateJWK),\nBobPrivateJWK   = jose_jwk:from_pem_file(\"ec-secp256r1-bob.pem\"),\nBobPublicJWK    = jose_jwk:to_public(BobPrivateJWK).\n\n%% Sign and Verify (defaults to ES256)\nMessage = <<\"my message\">>,\nSignedES256 = jose_jwk:sign(Message, AlicePrivateJWK),\n{true, Message, _} = jose_jwk:verify(SignedES256, AlicePublicJWK).\n\n%% Encrypt and Decrypt (defaults to ECDH-ES with A128GCM)\n%%% Alice sends Bob a secret message using Bob's public key and Alice's private key\nAliceToBob = <<\"For Bob's eyes only.\">>,\nEncryptedECDHES = jose_jwk:box_encrypt(AliceToBob, BobPublicJWK, AlicePrivateJWK),\n%%% Only Bob can decrypt the message using his private key (Alice's public key is embedded in the JWE header)\n{AliceToBob, _} = jose_jwk:box_decrypt(EncryptedECDHES, BobPrivateJWK).\n```\n\n## Algorithm Support\n\n### JSON Web Encryption (JWE) [RFC 7516](https://tools.ietf.org/html/rfc7516)\n\n#### `\"alg\"` [RFC 7518 Section 4](https://tools.ietf.org/html/rfc7518#section-4)\n\n- [X] `A128GCMKW`\n- [X] `A192GCMKW`\n- [X] `A256GCMKW`\n- [X] `A128KW`\n- [X] `A192KW`\n- [X] `A256KW`\n- [X] `C20PKW` <sup>[draft-amringer-jose-chacha](https://tools.ietf.org/html/draft-amringer-jose-chacha-01)</sup>\n- [X] `dir`\n- [X] `ECDH-1PU`\n- [X] `ECDH-1PU+A128GCMKW` <sup>non-standard, [draft-madden-jose-ecdh-1pu](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-02)</sup>\n- [X] `ECDH-1PU+A192GCMKW` <sup>non-standard, [draft-madden-jose-ecdh-1pu](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-02)</sup>\n- [X] `ECDH-1PU+A256GCMKW` <sup>non-standard, [draft-madden-jose-ecdh-1pu](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-02)</sup>\n- [X] `ECDH-1PU+A128KW` <sup>[draft-madden-jose-ecdh-1pu](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-02)</sup>\n- [X] `ECDH-1PU+A192KW` <sup>[draft-madden-jose-ecdh-1pu](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-02)</sup>\n- [X] `ECDH-1PU+A256KW` <sup>[draft-madden-jose-ecdh-1pu](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-02)</sup>\n- [X] `ECDH-1PU+C20PKW` <sup>[draft-amringer-jose-chacha](https://tools.ietf.org/html/draft-amringer-jose-chacha-01), [draft-madden-jose-ecdh-1pu](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-02)</sup>\n- [X] `ECDH-1PU+XC20PKW` <sup>[draft-amringer-jose-chacha](https://tools.ietf.org/html/draft-amringer-jose-chacha-01), [draft-madden-jose-ecdh-1pu](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-02)</sup>\n- [X] `ECDH-ES`\n- [X] `ECDH-ES+A128GCMKW` <sup>non-standard</sup>\n- [X] `ECDH-ES+A192GCMKW` <sup>non-standard</sup>\n- [X] `ECDH-ES+A256GCMKW` <sup>non-standard</sup>\n- [X] `ECDH-ES+A128KW`\n- [X] `ECDH-ES+A192KW`\n- [X] `ECDH-ES+A256KW`\n- [X] `ECDH-ES+C20PKW` <sup>[draft-amringer-jose-chacha](https://tools.ietf.org/html/draft-amringer-jose-chacha-01)</sup>\n- [X] `ECDH-ES+XC20PKW` <sup>[draft-amringer-jose-chacha](https://tools.ietf.org/html/draft-amringer-jose-chacha-01)</sup>\n- [X] `PBES2-HS256+A128GCMKW` <sup>non-standard</sup>\n- [X] `PBES2-HS384+A192GCMKW` <sup>non-standard</sup>\n- [X] `PBES2-HS512+A256GCMKW` <sup>non-standard</sup>\n- [X] `PBES2-HS256+A128KW`\n- [X] `PBES2-HS384+A192KW`\n- [X] `PBES2-HS512+A256KW`\n- [X] `PBES2-HS512+C20PKW` <sup>non-standard</sup>\n- [X] `PBES2-HS512+XC20PKW` <sup>non-standard</sup>\n- [X] `RSA1_5`\n- [X] `RSA-OAEP`\n- [X] `RSA-OAEP-256`\n- [X] `XC20PKW` <sup>[draft-amringer-jose-chacha](https://tools.ietf.org/html/draft-amringer-jose-chacha-01)</sup>\n\n#### `\"enc\"` [RFC 7518 Section 5](https://tools.ietf.org/html/rfc7518#section-5)\n\n- [X] `A128CBC-HS256`\n- [X] `A192CBC-HS384`\n- [X] `A256CBC-HS512`\n- [X] `A128GCM`\n- [X] `A192GCM`\n- [X] `A256GCM`\n- [X] `C20P` <sup>[draft-amringer-jose-chacha](https://tools.ietf.org/html/draft-amringer-jose-chacha-01)</sup>\n- [X] `XC20P` <sup>[draft-amringer-jose-chacha](https://tools.ietf.org/html/draft-amringer-jose-chacha-01)</sup>\n\n#### `\"zip\"` [RFC 7518 Section 7.3](https://tools.ietf.org/html/rfc7518#section-7.3)\n\n- [X] `DEF`\n\n### JSON Web Key (JWK) [RFC 7517](https://tools.ietf.org/html/rfc7517)\n\n#### `\"alg\"` [RFC 7518 Section 6](https://tools.ietf.org/html/rfc7518#section-6)\n\n- [X] `EC`\n- [X] `oct`\n- [X] `OKP` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037)</sup>\n- [X] `OKP` with `{\"crv\":\"Ed25519\"}` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 8032](https://tools.ietf.org/html/rfc8032#section-5.1)</sup>\n- [X] `OKP` with `{\"crv\":\"Ed25519ph\"}` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 8032](https://tools.ietf.org/html/rfc8032#section-5.1)</sup>\n- [X] `OKP` with `{\"crv\":\"Ed448\"}` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 8032](https://tools.ietf.org/html/rfc8032#section-5.2)</sup>\n- [X] `OKP` with `{\"crv\":\"Ed448ph\"}` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 8032](https://tools.ietf.org/html/rfc8032#section-5.2)</sup>\n- [X] `OKP` with `{\"crv\":\"X25519\"}` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 7748](https://tools.ietf.org/html/rfc7748#section-5)</sup>\n- [X] `OKP` with `{\"crv\":\"X448\"}` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 7748](https://tools.ietf.org/html/rfc7748#section-5)</sup>\n- [X] `RSA`\n\n### JSON Web Signature (JWS) [RFC 7515](https://tools.ietf.org/html/rfc7515)\n\n#### `\"alg\"` [RFC 7518 Section 3](https://tools.ietf.org/html/rfc7518#section-3)\n\n- [X] `Ed25519` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 8032](https://tools.ietf.org/html/rfc8032#section-5.1)</sup>\n- [X] `Ed25519ph` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 8032](https://tools.ietf.org/html/rfc8032#section-5.1)</sup>\n- [X] `Ed448` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 8032](https://tools.ietf.org/html/rfc8032#section-5.2)</sup>\n- [X] `Ed448ph` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 8032](https://tools.ietf.org/html/rfc8032#section-5.2)</sup>\n- [X] `EdDSA` <sup>[RFC 8037](https://tools.ietf.org/html/rfc8037), [RFC 8032](https://tools.ietf.org/html/rfc8032)</sup>\n- [X] `ES256`\n- [X] `ES384`\n- [X] `ES512`\n- [X] `HS256`\n- [X] `HS384`\n- [X] `HS512`\n- [X] `Poly1305` <sup>non-standard</sup>\n- [X] `PS256`\n- [X] `PS384`\n- [X] `PS512`\n- [X] `RS256`\n- [X] `RS384`\n- [X] `RS512`\n- [X] `none` <sup>[unsecured](#footnote-unsecured)</sup>\n\n### Additional Specifications\n\n- [X] JSON Web Key (JWK) Thumbprint [RFC 7638](https://tools.ietf.org/html/rfc7638)\n- [X] JWS Unencoded Payload Option [RFC 7797](https://tools.ietf.org/html/rfc7797)\n\n<sup><a name=\"footnote-unsecured\">unsecured</a></sup> This algorithm is disabled by default due to the unsecured signing vulnerability.  Use the [`unsecured_signing`](#unsecured-signing-vulnerability) setting to enable this algorithm.\n"
 },
 {
  "repo": "tmeissner/cryptocores",
  "language": "VHDL",
  "readme_contents": "[![simulation](https://img.shields.io/github/workflow/status/tmeissner/cryptocores/Simulation/master?longCache=true&style=flat-square&label=simulation&logo=Github%20Actions&logoColor=fff)](https://github.com/tmeissner/cryptocores/actions?query=workflow%3ASimulation)\n\n# cryptocores\nCryptography IP-cores & tests written in VHDL / Verilog\n\nThe components in this repository are not intended as productional code.\nThey serve as proof of concept, for example how to implement a pipeline using\nonly (local) variables instead of (global) signals. Furthermore they were used\nhow to do a VHDL-to-Verilog conversion for learning purposes.\n\nThe testbenches to verify [DES](des/sim/vhdl/), [AES](aes/sim/vhdl/), [CTR-AES](ctraes/sim/vhdl/) and [CBC-AES](cbcaes/sim/vhdl/) are examples how useful GHDLs VHPIdirect is. They use openSSL as reference models to check the correctness of the VHDL implementation.\n\n*HINT:*\n\nThe tests of some algorithms use the OSVVM library, which is redistributed as\nsubmodule. To get & initialize the submodule, please use the `--recursive` option\nwhen cloning this repository. Use `git submodule update --recursive` to update the submodule if you already chaked out the main repository.\n"
 },
 {
  "repo": "dalek-cryptography/x25519-dalek",
  "language": "Rust",
  "readme_contents": "# x25519-dalek  [![](https://img.shields.io/crates/v/x25519-dalek.svg)](https://crates.io/crates/x25519-dalek) [![](https://docs.rs/x25519-dalek/badge.svg)](https://docs.rs/x25519-dalek) [![](https://travis-ci.org/dalek-cryptography/x25519-dalek.svg?branch=master)](https://travis-ci.org/dalek-cryptography/x25519-dalek)\n\nA pure-Rust implementation of x25519 elliptic curve Diffie-Hellman key exchange,\nwith curve operations provided by\n[curve25519-dalek](https://github.com/dalek-cryptography/curve25519-dalek).\n\nThis crate provides two levels of API: a bare byte-oriented `x25519`\nfunction which matches the function specified in [RFC7748][rfc7748], as\nwell as a higher-level Rust API for static and ephemeral Diffie-Hellman.\n\n## Examples\n\n<a href=\"https://shop.bubblesort.io\">\n<img\n  style=\"float: right; width: auto; height: 300px;\"\n  src=\"https://raw.githubusercontent.com/dalek-cryptography/x25519-dalek/master/res/bubblesort-zines-secret-messages-cover.jpeg\"/>\n</a>\n\nAlice and Bob are two adorable kittens who have lost their mittens, and they\nwish to be able to send secret messages to each other to coordinate finding\nthem, otherwise\u2014if their caretaker cat finds out\u2014they will surely be called\nnaughty kittens and be given no pie!\n\nBut the two kittens are quite clever.  Even though their paws are still too big\nand the rest of them is 90% fuzziness, these clever kittens have been studying\nup on modern public key cryptography and have learned a nifty trick called\n*elliptic curve Diffie-Hellman key exchange*.  With the right incantations, the\nkittens will be able to secretly organise to find their mittens, and then spend\nthe rest of the afternoon nomming some yummy pie!\n\nFirst, Alice uses `EphemeralSecret::new()` and then\n`PublicKey::from()` to produce her secret and public keys:\n\n```rust\nuse rand_core::OsRng;\nuse x25519_dalek::{EphemeralSecret, PublicKey};\n\nlet alice_secret = EphemeralSecret::new(OsRng);\nlet alice_public = PublicKey::from(&alice_secret);\n```\n\nBob does the same:\n\n```rust\n# use rand_core::OsRng;\n# use x25519_dalek::{EphemeralSecret, PublicKey};\nlet bob_secret = EphemeralSecret::new(OsRng);\nlet bob_public = PublicKey::from(&bob_secret);\n```\n\nAlice meows across the room, telling `alice_public` to Bob, and Bob\nloudly meows `bob_public` back to Alice.  Alice now computes her\nshared secret with Bob by doing:\n\n```rust\n# use rand_core::OsRng;\n# use x25519_dalek::{EphemeralSecret, PublicKey};\n# let alice_secret = EphemeralSecret::new(OsRng);\n# let alice_public = PublicKey::from(&alice_secret);\n# let bob_secret = EphemeralSecret::new(OsRng);\n# let bob_public = PublicKey::from(&bob_secret);\nlet alice_shared_secret = alice_secret.diffie_hellman(&bob_public);\n```\n\nSimilarly, Bob computes a shared secret by doing:\n\n```rust\n# use rand_core::OsRng;\n# use x25519_dalek::{EphemeralSecret, PublicKey};\n# let alice_secret = EphemeralSecret::new(OsRng);\n# let alice_public = PublicKey::from(&alice_secret);\n# let bob_secret = EphemeralSecret::new(OsRng);\n# let bob_public = PublicKey::from(&bob_secret);\nlet bob_shared_secret = bob_secret.diffie_hellman(&alice_public);\n```\n\nThese secrets are the same:\n\n```rust\n# use rand_core::OsRng;\n# use x25519_dalek::{EphemeralSecret, PublicKey};\n# let alice_secret = EphemeralSecret::new(OsRng);\n# let alice_public = PublicKey::from(&alice_secret);\n# let bob_secret = EphemeralSecret::new(OsRng);\n# let bob_public = PublicKey::from(&bob_secret);\n# let alice_shared_secret = alice_secret.diffie_hellman(&bob_public);\n# let bob_shared_secret = bob_secret.diffie_hellman(&alice_public);\nassert_eq!(alice_shared_secret.as_bytes(), bob_shared_secret.as_bytes());\n```\n\nVoil\u00e0!  Alice and Bob can now use their shared secret to encrypt their\nmeows, for example, by using it to generate a key and nonce for an\nauthenticated-encryption cipher.\n\nThis example used the ephemeral DH API, which ensures that secret keys\ncannot be reused; Alice and Bob could instead use the static DH API\nand load a long-term secret key.\n\n# Installation\n\nTo install, add the following to your project's `Cargo.toml`:\n\n```toml\n[dependencies]\nx25519-dalek = \"1\"\n```\n\n# MSRV\n\nCurrent MSRV is 1.41 for production builds, and 1.48 for running tests.\n\n# Documentation\n\nDocumentation is available [here](https://docs.rs/x25519-dalek).\n\n# Note\n\nThis code matches the [RFC7748][rfc7748] test vectors.\nThe elliptic curve\noperations are provided by `curve25519-dalek`, which makes a best-effort\nattempt to prevent software side-channels.\n\n\"Secret Messages\" cover image and [zine](https://shop.bubblesort.io/products/secret-messages-zine)\ncopyright \u00a9 Amy Wibowo ([@sailorhg](https://twitter.com/sailorhg))\n\n[rfc7748]: https://tools.ietf.org/html/rfc7748\n\n# See also\n\n- [crypto_box]: pure Rust public-key authenticated encryption compatible with\n  the NaCl family of encryption libraries (libsodium, TweetNaCl) which uses\n  `x25519-dalek` for key agreement\n\n[crypto_box]: https://github.com/RustCrypto/AEADs/tree/master/crypto_box\n"
 },
 {
  "repo": "mikong/stanford-cryptography",
  "language": "Rust",
  "readme_contents": "# Programming Assignments for Cryptography I by Stanford University\n\nThe programming assignments for Coursera Cryptography I by Stanford University are optional, and are only now being worked on (WIP) after I have finished the course. I'll be using [Rust](https://www.rust-lang.org/) to work on these.\n\n### Week 1: [Many Time Pad][week-1]\n\nLet us see what goes wrong when a stream cipher key is used more than once. Given ciphertexts encrypted with the same stream cipher key, our goal is to decrypt the target ciphertext to get the secret message.\n\n### Week 2: [AES in CBC and CTR modes][week-2]\n\nImplement two encryption/decryption systems, one using AES in CBC mode and another using AES in counter mode (CTR). Given pairs of AES key and ciphertext, our goal is to recover the plaintext.\n\n### Week 3: [File Authentication System with SHA256][week-3]\n\nOur goal in this project is to build a file authentication system that lets browsers authenticate and play video chunks as they are downloaded without having to wait for the entire file.\n\n### Week 4: [Padding Oracle Attack][week-4]\n\nLet's experiment with a padding oracle attack against a toy website. Knowing that the website is vulnerable to a CBC padding oracle attack, our goal is to decrypt the ciphertext in the sample intercepted URL.\n\n### Week 5: [Meet-in-the-Middle Attack (MITM) on Discrete Log][week-5]\n\nOur goal is to write a program to compute discrete log modulo a prime _p_. In this project, we'll implement an algorithm that runs in time roughly \u221a2^40 = 2^20 using a meet-in-the-middle attack.\n\n### Week 6: [RSA Problem][week-6]\n\nOur goal in this project is to break RSA when the public modulus N is generated incorrectly. If the primes _p_ and _q_ are close to each other, _N = pq_ can be easily factored.\n\n[week-1]: w1-many_time_pad/\n[week-2]: w2-aes/\n[week-3]: w3-file_auth/\n[week-4]: w4-padding_oracle_attack/\n[week-5]: w5-mitm_dlog/\n[week-6]: w6-rsa_problem/\n\n## Acknowledgements\n\nThe Coursera [Cryptography I](https://www.coursera.org/learn/crypto) is offered by Stanford University and taught by Professor Dan Boneh. Only shortened/paraphrased description of the programming assignments are provided in this repository. Please visit the online course for the original and full description of the weekly programming assignments.\n"
 },
 {
  "repo": "C2SP/C2SP",
  "language": null,
  "readme_contents": "# Community Cryptography Specification Project\n\n## Motivation\n\nWhat if we wrote specifications like we write software? C2SP is an experiment to create\nusable specifications by following common software methodologies, like semantic versioning.\n\n## Structure\n\nC2SP maintains a collection of specification documents. Each specification is small and\nfocused, with a limited scope.\n\nEvery specification has an assigned maintainer, who is responsible for reviewing and\naccepting changes to that specification.\n\nThere is a team of stewards that maintains the general repository, assigns and removes\nmaintainers for specifications, and is the final decision level. Individual maintainers\nmanage development of specifications on a day-to-day basis.\n\n## Versioning\n\nAll specifications use [Semantic Versioning](https://semver.org/). Since this is normally\nintended for software, we adapt it to our specifications with the following semantics:\n\n- 0.Y.Z indicates draft specifications.\n  - Bump the version as often as you need!\n  - Always bump the minor version on any material change.\n- 1.Y.Z indicates \"final\" specifications, but these are not set in stone.\n  - At this point a specification's meaning should not change.\n  - Bump the patch version when making changes to the text of a specification (to improve\n    it, or fix errata).\n  - An extension could be defined in a separate specification, and the \"main\"\n    specification's minor version would be incremented to include the extension.\n- 2.Y.Z and above will ideally never be needed! But if we make a mistake in a finalised\n  specification, this would be the pathway to recovery.\n  - Otherwise these are identical to 1.Y.Z.\n\n## Contributing\n\nAnyone is welcome to contribute new specifications or collaborate on existing documents,\nin accordance with the [C2SP Code of Conduct](CODE_OF_CONDUCT.md) and the relevant\nlicenses.\n\n### Adding a new specification\n\nYou can either clone this repository to work locally, or you can click the \"Add file\"\nbutton to write in the GitHub UI.\n\n- Pick a meaningful, short name for the specification. This will become part of its URL\n  (e.g. `https://c2sp.org/short-name`). Name your specification file `short-name.md`, and\n  place it in the root of the repository.\n- Write the initial specification draft! Look at existing ones for an idea of the style.\n- Open a pull request!\n\n### Updating an existing specification\n\nYou can either clone this repository and make changes locally, or you can edit a\nspecification directly in the GitHub UI. In either case, once you are finished, open a\npull request with your proposed updates.\n\n## License\n\nAll specifications in this repository are licensed under CC BY 4.0\n(https://creativecommons.org/licenses/by/4.0/).\n\nAll code in this repository is licensed under the BSD 1-Clause License\n([LICENSE-BSD-1-CLAUSE](LICENSE-BSD-1-CLAUSE)).\n"
 },
 {
  "repo": "oyefremov/libcryptoplus",
  "language": "C++",
  "readme_contents": "Compilation\n===========\n\nTo compile libcryptoplus for Windows you have two solutions:\n\n- You can use MinGW and SCons (just like you would do for UNIX operating systems): just type 'scons'\n- You can use Microsoft Visual Studio 2010: just open the solution file in the windows directory\n\n"
 },
 {
  "repo": "Erdk/Beginning-Cryptography-with-Java",
  "language": "Java",
  "readme_contents": "Beginning-Cryptography-with-Java\n================================\n\nExamples from the book Beginning Cryptography with Java."
 },
 {
  "repo": "oleiba/RSA-accumulator",
  "language": "Python",
  "readme_contents": "# RSA-accumulator\n\nCryptographic accumulator based on the strong RSA assumption [Bd94, BP97, CL02, BBF18].<br>\nGenerating and verifying proofs in Python, verifier in Solidity.<br>\n\n### Prerequesites\n\n* Python3 \n* Node.js 10.14.0, NPM\n\n### Unit testing\n\n`$ python3 -m unittest test`\n\n### Benchmarks\n\n* Compare performance (compared with Python Merkle Tree [1]):\n```\n$ python3 test-performance.py\n```\n\n* Compare gas results (compared with Merkle Proof verifier [2]) :\n```\n$ npm install\n$ node test-gas.js\n```\n\nThe tests above generate relevant data files at the `generated` directory.\n\n[1] https://github.com/Tierion/pymerkletools <br> \n[2] https://github.com/ameensol/merkle-tree-solidity\n\n### References\n\n[Bd94] [One-way accumulators: A decentralized\nalternative to digital sinatures](https://link.springer.com/content/pdf/10.1007/3-540-48285-7_24.pdf), Josh Cohen Benaloh and Michael de Mare.<br> \n[BP97] [Collision-free accumulators and fail-stop signature\nschemes without trees](https://link.springer.com/content/pdf/10.1007/3-540-69053-0_33.pdf), Niko Bari and Birgit Pfitzmann. <br>\n[CL02] [Dynamic accumulators and application to\nefficient revocation of anonymous credentials](https://link.springer.com/content/pdf/10.1007/3-540-45708-9_5.pdf), Jan Camenisch and Anna Lysyanskaya. <br>\n[BBF18] [Batching Techniques for Accumulators with Applications to IOPs and Stateless Blockchains](https://eprint.iacr.org/2018/1188.pdf), Dan Boneh, Benedikt B\u00fcnz, Benjamin Fisch.<br>\n"
 },
 {
  "repo": "awsdocs/aws-cryptography-overview-developer-guide",
  "language": null,
  "readme_contents": "## AWS Cryptography Overview Developer Guide\n\nThe open source version of the AWS Cryptography Overview docs. You can submit feedback & requests for changes by submitting issues in this repo or by making proposed changes & submitting a pull request.\n\n## License Summary\n\nThe documentation is made available under the Creative Commons Attribution-ShareAlike 4.0 International License. See the LICENSE file.\n\nThe sample code within this documentation is made available under a modified MIT license. See the LICENSE-SAMPLECODE file.\n"
 },
 {
  "repo": "Gold3nboy/cryptography_1819",
  "language": "TeX",
  "readme_contents": "# Side Notes\nThis repo contains a bunch of notes taken for the Cryptography course by \n[blazef104](https://github.com/blazef104), [project2100](https://github.com/Project2100) and me during Fall 2018.\n\nPlease note that these notes were **our personal interpretation** of what the\nprofessor said / what we were able to write during lectures , so they\ncould be full of potential errors.\n**Don't take this as the Holy Bible**.\n\n## Improve it\n\nFor improving/modifying something, you can:\n* contact us/me directly (here, over Telegram or via mail), or\n* you can directly open a pull request (and do it yourself). \n\n## Latex \nNotes are written in rough dirty Latex. \n**Since I'm not a Latex pro**, there could be __horrible things__ typed over there.\nIf you don't like something, change it directly or tell me and wait, or close\nyour eyes and try to forgive me.\n\nThe macro.tex file is taken from [asmeikal's page](https://github.com/asmeikal/crypto16/tree/master/notes) (thanks Michelle for this).\n\n### Major issues\n* ~~properly numbering chapters , section and subsections~~\n* pairing theorems/claims/facts/exercises with Proofs unequivocally\n* write last few lectures, left blank\n### Minor issues\n* refs should have a certain name while pointing to sections with other names\n* could be useful to have an acronym table\n"
 },
 {
  "repo": "justintroutman/pocketblock",
  "language": "TeX",
  "readme_contents": "# pocketblock\n\n*pocketblock* is the barebones form of a new class of teaching-oriented cryptographic primitives called *bantamweight cryptography*. Bantamweight primitives are scaled-down models of modern cryptographic primitives that preserve the conceptual framework of real-world ciphers without the burden of mathematical complexity. pocketblock is expressed in a visual syntax that centers around the *blockwise* movement of alphanumeric values within a grid, making it easily committed to memory, easily calculable by mind, and easily implemented by hand -- a handheld algorithm, if you will, easily tucked into one's cebebral pocket.\n\n\n## pockenacci\n\n*pockenacci* is a simple *pocket*block cipher. It's an SPN (Substitution-Permutation Network) that contains an ARX-like (Add, Rotate, XOR, but without the XOR) round function and additive Fibonacci-like key schedule. For simplicity, pockenacci operates on a 6x6 grid of the alphanumeric character set of a-z0-9 (36 characters). The material in this repo implements pockenacci (demo + DIY templates); for a guide to pockenacci, reach out to justin@justintroutman.com.\n\n### what's here?\n\nThis repository contains a collection of source material (e.g., LaTeX/TikZ/PGF, HTML, CSS, et cetera) that implements the *pocketblock* cipher *pockenacci*. The source is prepared with enough verbosity to be easily integrated into an educator's curricula, as well as easily tweaked by the educator with minimal friction.\n"
 },
 {
  "repo": "ipt-labs/crypto-FB-9",
  "language": "Python",
  "readme_contents": "# crypto-FB-9\ncryptography labs for students FB-9 (2021/2022)\n"
 },
 {
  "repo": "nickgian/ECC-OCaml",
  "language": "TeX",
  "readme_contents": "ECC-OCaml\n=========\n\nElliptic Curves Cryptography for OCaml.\nThis library provides the basic arithmetic operations in elliptic curves over finite prime fields (over finite bit fields coming soon :) \nas well as functions for Elliptic Curve digital signature algorithm and Elliptic Curve Diffie-Hellman key exchange protocol.\n\n\nDependencies\n------------\n* [*OCaml*](http://ocaml.org/install.html) version 4.0.0 or newer \n* [*Zarith*](http://forge.ocamlcore.org/projects/zarith) or via OPAM [here](http://opam.ocaml.org/pkg/zarith/1.2/)  \n* [*SHA*](https://github.com/vincenthz/ocaml-sha) or via OPAM [here](http://opam.ocaml.org/pkg/sha/1.9/)\n\nTo compile and install the library:\n----------------------------------\n\n\t$ cd src\n\t$ make \n\t$ make install\n\n\n\n"
 },
 {
  "repo": "Bren2010/ecc",
  "language": "Rust",
  "readme_contents": "Elliptic Curve Crypto\n=====================\n\nAn elliptic curve arithmetic and cryptography library in Pure Rust&reg;.\n\nInstall by adding this to your `Cargo.toml`:\n```\n[dependencies.ecc]\nversion = \"*\"\n```\n\nThe obligatory calling-my-code-terrible-and-warning-you-to-use-it-at-your-own-peril paragraph:  I've attempted to prevent any timing or invalid curve attacks, but this is the first thing I've ever written in Rust and I'm also probably the only person who's ever read the code.  There are tests that say the code is correct and benchmarks that say it's not horrendously slow, but I don't know if I believe either of them myself.  This is all a work-in-progress.\n\n### To Do:\n1.  ElGamal encryption\n2.  ECDSA / ElGamal signatures\n\n\nBasics\n------\n\nCurrently the only high-level operation implemented is Diffie-Hellman key exchanges:\n```rust\nextern crate ecc;\n\nuse ecc::fields::{P256, R256}; // NIST's fields for P-256\nuse ecc::curves::C256; // NIST's curve P-256\nuse ecc::crypto::DiffieHellman;\n\nfn main() {\n  type Curve = C192<P192, R192>;\n  type Point = AffinePoint<Curve, P192, R192>;\n\n  let (X, x): (Point, _) = DiffieHellman::key_gen();\n  let out = X.serialize();\n  // out: Vec<uint>  -> Send to the other person.\n  // x: BigUint      -> Kept secret.\n\n  // X             -----> Other person\n  // Y: Vec<uint>  <-----\n\n  let c: Curve = C192;\n  let in = c.unserialize(Y);\n\n  let s: Option<Point> = DiffieHellman::shared(&x, &in);\n  // Will return None if trickery occured.\n  // Will return the shared secret Some(...), which should be serialized and\n  // put through a KDF or something and then used in a cipher/MAC.\n}\n```\n\nFields\n------\n\nThere are six fields implemented in total:  `P192`, `P256`, and `P521` are the base fields of their corresponding NIST curves.  `R192`, `R256`, and `R521`, however, are the fields that act on the base point of their corresponding curves.\n\nCreating a field is easy, but not much use:\n```rust\nlet f: P192 = P192;\n```\n\nCreating a field element is more interesting:\n```rust\nextern crate num;\n\nuse num::bigint::ToBigUint;\nuse ecc::fields::{FieldElem, P192};\n\n...\n\nlet x: FieldElem<P192> = FieldElem { limbs: 3i.to_biguint().unwrap() }\n// Or any other BigUint in the `limbs` field.\n```\n\nField operations can be applied to field elements with the normal unary/binary operators (negation, addition, subtraction, multiplication, and division).  Calling `x.invert()` will return `x`'s inverse, and calling `x.pow(exp)`, where `exp` is a `BigUint`, will raise `x` to the power of `exp`.\n\nField elements don't support an order, but they can be tested for equality with the `==` operator.\n\nA field element can be serialized to a byte vector by calling `x.serialize()`, or unserialized by calling `field.unserialize(...)`.\n\nExponentiation and testing for equality are constant-time, by default.\n\nCurves\n------\n\nThere are currently only three NIST curves implemented:  `C192`, `C256`, and `C521`.\n\nCreating a curve is similar to creating a field:\n```rust\nlet c: C192<P192, R192> = C192;\n```\n\nCalling `c.G()` will return the curve's base point in affine coordinates.  Calling `.to_jacobian()` will convert it to Jacobian coordinates, and alternately, calling `.to_affine()` on a Jacobian point will convert it back to affine.\n\nNegation, addition, and subtraction are supported on points of the same coordinate system.  Points can also be multiplied by a `BigUint`.  To check if a point is valid, call `A.is_valid()`.  To check if a point is zero (the point at inifinity), call `A.is_zero()`.\n\nA point can be serialized to a byte vector by calling `A.serialize()`, or unserialized by calling `curve.unserialize(...)`.\n\nPoint multiplication and testing for equality is constant-time, by default.\n\n```rust\nextern crate num;\n\nuse std::num::FromStrRadix;\nuse fields::{P192, R192};\nuse curves::{Curve, C192};\n\nfn main() {\n  let curve C192<P192, R192> = C192;\n  let a: BigUint = FromStrRadix::from_str_radix(\"7e48c5ab7f43e4d9c17bd9712627dcc76d4df2099af7c8e5\", 16).unwrap();\n  let G = curve.G().to_jacobian();\n\n  let A = a * G;\n}\n```\n"
 },
 {
  "repo": "dalek-cryptography/curve25519-dalek",
  "language": "Rust",
  "readme_contents": "\n# curve25519-dalek [![](https://img.shields.io/crates/v/curve25519-dalek.svg)](https://crates.io/crates/curve25519-dalek) [![](https://img.shields.io/badge/dynamic/json.svg?label=docs&uri=https%3A%2F%2Fcrates.io%2Fapi%2Fv1%2Fcrates%2Fcurve25519-dalek%2Fversions&query=%24.versions%5B0%5D.num&colorB=4F74A6)](https://doc.dalek.rs) [![](https://travis-ci.org/dalek-cryptography/curve25519-dalek.svg?branch=master)](https://travis-ci.org/dalek-cryptography/curve25519-dalek)\n\n<img\n width=\"33%\"\n align=\"right\"\n src=\"https://doc.dalek.rs/assets/dalek-logo-clear.png\"/>\n\n**A pure-Rust implementation of group operations on Ristretto and Curve25519.**\n\n`curve25519-dalek` is a library providing group operations on the Edwards and\nMontgomery forms of Curve25519, and on the prime-order Ristretto group.\n\n`curve25519-dalek` is not intended to provide implementations of any particular\ncrypto protocol.  Rather, implementations of those protocols (such as\n[`x25519-dalek`][x25519-dalek] and [`ed25519-dalek`][ed25519-dalek]) should use\n`curve25519-dalek` as a library.\n\n`curve25519-dalek` is intended to provide a clean and safe _mid-level_ API for use\nimplementing a wide range of ECC-based crypto protocols, such as key agreement,\nsignatures, anonymous credentials, rangeproofs, and zero-knowledge proof\nsystems.\n\nIn particular, `curve25519-dalek` implements Ristretto, which constructs a\nprime-order group from a non-prime-order Edwards curve.  This provides the\nspeed and safety benefits of Edwards curve arithmetic, without the pitfalls of\ncofactor-related abstraction mismatches.\n\n# Documentation\n\nThe semver-stable, public-facing `curve25519-dalek` API is documented\n[here][docs-external].  In addition, the unstable internal implementation\ndetails are documented [here][docs-internal].\n\nThe `curve25519-dalek` documentation requires a custom HTML header to include\nKaTeX for math support. Unfortunately `cargo doc` does not currently support\nthis, but docs can be built using\n```sh\nmake doc\nmake doc-internal\n```\n\n# Use\n\nTo import `curve25519-dalek`, add the following to the dependencies section of\nyour project's `Cargo.toml`:\n```toml\ncurve25519-dalek = \"3\"\n```\n\nThe sole breaking change in the `3.x` series was an update to the `digest`\nversion, and in terms of non-breaking changes it includes:\n\n* support for using `alloc` instead of `std` on stable Rust,\n* the Elligator2 encoding for Edwards points,\n* a fix to use `packed_simd2`,\n* various documentation fixes and improvements,\n* support for configurably-sized, precomputed lookup tables for basepoint scalar\n  multiplication,\n* two new formally-verified field arithmetic backends which use the Fiat Crypto\n  Rust code, which is generated from proofs of functional correctness checked by\n  the Coq theorem proving system, and\n* support for explicitly calling the `zeroize` traits for all point types.\n\nThe `2.x` series has API almost entirely unchanged from the `1.x` series,\nexcept that:\n\n* an error in the data modeling for the (optional) `serde` feature was\n  corrected, so that when the `2.x`-series `serde` implementation is used\n  with `serde-bincode`, the derived serialization matches the usual X/Ed25519\n  formats;\n* the `rand` version was updated.\n\nSee `CHANGELOG.md` for more details.\n\n# Backends and Features\n\nThe `nightly` feature enables features available only when using a Rust nightly\ncompiler.  In particular, it is required for rendering documentation and for\nthe SIMD backends.\n\nCurve arithmetic is implemented using one of the following backends:\n\n* a `u32` backend using serial formulas and `u64` products;\n* a `u64` backend using serial formulas and `u128` products;\n* an `avx2` backend using [parallel formulas][parallel_doc] and `avx2` instructions (sets speed records);\n* an `ifma` backend using [parallel formulas][parallel_doc] and `ifma` instructions (sets speed records);\n\nBy default the `u64` backend is selected.  To select a specific backend, use:\n```sh\ncargo build --no-default-features --features \"std u32_backend\"\ncargo build --no-default-features --features \"std u64_backend\"\n# Requires nightly, RUSTFLAGS=\"-C target_feature=+avx2\" to use avx2\ncargo build --no-default-features --features \"std simd_backend\"\n# Requires nightly, RUSTFLAGS=\"-C target_feature=+avx512ifma\" to use ifma\ncargo build --no-default-features --features \"std simd_backend\"\n```\nCrates using `curve25519-dalek` can either select a backend on behalf of their\nusers, or expose feature flags that control the `curve25519-dalek` backend.\n\nThe `std` feature is enabled by default, but it can be disabled for no-`std`\nbuilds using `--no-default-features`.  Note that this requires explicitly\nselecting an arithmetic backend using one of the `_backend` features.\nIf no backend is selected, compilation will fail.\n\n# Safety\n\nThe `curve25519-dalek` types are designed to make illegal states\nunrepresentable.  For example, any instance of an `EdwardsPoint` is\nguaranteed to hold a point on the Edwards curve, and any instance of a\n`RistrettoPoint` is guaranteed to hold a valid point in the Ristretto\ngroup.\n\nAll operations are implemented using constant-time logic (no\nsecret-dependent branches, no secret-dependent memory accesses),\nunless specifically marked as being variable-time code.\nWe believe that our constant-time logic is lowered to constant-time\nassembly, at least on `x86_64` targets.\n\nAs an additional guard against possible future compiler optimizations,\nthe `subtle` crate places an optimization barrier before every\nconditional move or assignment.  More details can be found in [the\ndocumentation for the `subtle` crate][subtle_doc].\n\nSome functionality (e.g., multiscalar multiplication or batch\ninversion) requires heap allocation for temporary buffers.  All\nheap-allocated buffers of potentially secret data are explicitly\nzeroed before release.\n\nHowever, we do not attempt to zero stack data, for two reasons.\nFirst, it's not possible to do so correctly: we don't have control\nover stack allocations, so there's no way to know how much data to\nwipe.  Second, because `curve25519-dalek` provides a mid-level API,\nthe correct place to start zeroing stack data is likely not at the\nentrypoints of `curve25519-dalek` functions, but at the entrypoints of\nfunctions in other crates.\n\nThe implementation is memory-safe, and contains no significant\n`unsafe` code.  The SIMD backend uses `unsafe` internally to call SIMD\nintrinsics.  These are marked `unsafe` only because invoking them on an\ninappropriate CPU would cause `SIGILL`, but the entire backend is only\ncompiled with appropriate `target_feature`s, so this cannot occur.\n\n# Performance\n\nBenchmarks are run using [`criterion.rs`][criterion]:\n\n```sh\ncargo bench --no-default-features --features \"std u32_backend\"\ncargo bench --no-default-features --features \"std u64_backend\"\n# Uses avx2 or ifma only if compiled for an appropriate target.\nexport RUSTFLAGS=\"-C target_cpu=native\"\ncargo bench --no-default-features --features \"std simd_backend\"\n```\n\nPerformance is a secondary goal behind correctness, safety, and\nclarity, but we aim to be competitive with other implementations.\n\n# FFI\n\nUnfortunately, we have no plans to add FFI to `curve25519-dalek` directly.  The\nreason is that we use Rust features to provide an API that maintains safety\ninvariants, which are not possible to maintain across an FFI boundary.  For\ninstance, as described in the _Safety_ section above, invalid points are\nimpossible to construct, and this would not be the case if we exposed point\noperations over FFI.\n\nHowever, `curve25519-dalek` is designed as a *mid-level* API, aimed at\nimplementing other, higher-level primitives.  Instead of providing FFI at the\nmid-level, our suggestion is to implement the higher-level primitive (a\nsignature, PAKE, ZKP, etc) in Rust, using `curve25519-dalek` as a dependency,\nand have that crate provide a minimal, byte-buffer-oriented FFI specific to\nthat primitive.\n\n# Contributing\n\nPlease see [CONTRIBUTING.md][contributing].\n\nPatches and pull requests should be make against the `develop`\nbranch, **not** `main`.\n\n# About\n\n**SPOILER ALERT:** *The Twelfth Doctor's first encounter with the Daleks is in\nhis second full episode, \"Into the Dalek\". A beleaguered ship of the \"Combined\nGalactic Resistance\" has discovered a broken Dalek that has turned \"good\",\ndesiring to kill all other Daleks. The Doctor, Clara and a team of soldiers\nare miniaturized and enter the Dalek, which the Doctor names Rusty. They\nrepair the damage, but accidentally restore it to its original nature, causing\nit to go on the rampage and alert the Dalek fleet to the whereabouts of the\nrebel ship. However, the Doctor manages to return Rusty to its previous state\nby linking his mind with the Dalek's: Rusty shares the Doctor's view of the\nuniverse's beauty, but also his deep hatred of the Daleks. Rusty destroys the\nother Daleks and departs the ship, determined to track down and bring an end\nto the Dalek race.*\n\n`curve25519-dalek` is authored by Isis Agora Lovecruft and Henry de Valence. \n\nPortions of this library were originally a port of [Adam Langley's\nGolang ed25519 library](https://github.com/agl/ed25519), which was in\nturn a port of the reference `ref10` implementation.  Most of this code,\nincluding the 32-bit field arithmetic, has since been rewritten.\n\nThe fast `u32` and `u64` scalar arithmetic was implemented by Andrew Moon, and\nthe addition chain for scalar inversion was provided by Brian Smith.  The\noptimised batch inversion was contributed by Sean Bowe and Daira Hopwood.\n\nThe `no_std` and `zeroize` support was contributed by Tony Arcieri.\n\nThe formally verified backends, `fiat_u32_backend` and `fiat_u64_backend`, which\nintegrate with the Rust generated by the\n[Fiat Crypto project](https://github.com/mit-plv/fiat-crypto) were contributed\nby Fran\u00e7ois Garillot.\n\nThanks also to Ashley Hauck, Lucas Salibian, Manish Goregaokar, Jack Grigg,\nPratyush Mishra, Michael Rosenberg, and countless others for their\ncontributions.\n\n[ed25519-dalek]: https://github.com/dalek-cryptography/ed25519-dalek\n[x25519-dalek]: https://github.com/dalek-cryptography/x25519-dalek\n[contributing]: https://github.com/dalek-cryptography/curve25519-dalek/blob/master/CONTRIBUTING.md\n[docs-external]: https://doc.dalek.rs/curve25519_dalek/\n[docs-internal]: https://doc-internal.dalek.rs/curve25519_dalek/\n[criterion]: https://github.com/japaric/criterion.rs\n[parallel_doc]: https://doc-internal.dalek.rs/curve25519_dalek/backend/vector/avx2/index.html\n[subtle_doc]: https://doc.dalek.rs/subtle/\n"
 },
 {
  "repo": "MaxLaumeister/PageCrypt",
  "language": "HTML",
  "readme_contents": "## PageCrypt - Password Protect HTML ##\n\n### Overview ###\n\nThis tool lets you securely password-protect an HTML file. Unlike other password-protection tools, this tool:\n\n1. Has no server-side components (this tool and its password-protected pages run entirely in javascript).\n\n2. Uses strong encryption, so the password-protection cannot be bypassed.\n\nFor details and to use the tool, please see the [Project Page](https://www.maxlaumeister.com/pagecrypt/).\n"
 },
 {
  "repo": "JHUISI/auto-tools",
  "language": "Python",
  "readme_contents": "AutoTools: automated tools\n==========================\n\n[![Build Status](https://travis-ci.org/JHUISI/auto-tools.png)](https://travis-ci.org/JHUISI/auto-tools)\n\nA collection of Python tools being developed towards automatically transforming cryptographic primitives in different and interesting ways:\n\n* [AutoBatch](https://github.com/JHUISI/auto-tools/tree/master/auto_batch): an automated tool for designing batch verification algorithms.\n\n* [AutoStrong](https://github.com/JHUISI/auto-tools/tree/master/auto_strong): an automated tool for converting existentially unforgeable signatures into ones that are strongly unforgeable.\n\n* [AutoGroup+](https://github.com/JHUISI/auto-tools/tree/master/auto_group): an automated tool for optimizing pairing-based encryption and signature schemes using SMT solver techniques.\n\n* [CloudSource](https://github.com/JHUISI/auto-tools/tree/master/auto_outsrc): an automated tool for outsourcing the computation of pairing-based schemes to untrusted cloud proxies. \n\n* [AutoPPE](https://github.com/JHUISI/auto-tools/tree/master/auto_ppe): an automated tool for creating a conjunction of pairing-product equations (PPEs) to verify a set of untrusted elements with respect to a set of trusted elements.\n\n* [AutoCircuitPPE](https://github.com/JHUISI/auto-tools/tree/master/auto_circuitppe): an automated tool for creating a PPE Circuit (containing AND, OR, NOT and PPE gates) to verify a set of untrusted elements with respect to a set of untrusted elements.\n\n* [AutoRationalPPE](https://github.com/JHUISI/auto-tools/tree/master/auto_rationalppe): an automated tool that extends AutoCircuitPPE to support rational polynomials.\n\nThe above tools take as input a scheme description language (SDL) of a cryptographic algorithm then performs the described transformation. See subdirectories for how to run each tool and sample SDL schemes. Please contact us if you have any questions or comments at akinyelj [ AT ] cs.jhu.edu OR mpagano [ AT ] cs.jhu.edu. \n\nScheme Description Language\n===========================\n\nSDL is a domain-specific language for abstractly representing cryptographic schemes. In the current instantiation, SDL focuses mainly on pairing-based encryption and signature primitives. There are several SDL schemes within this repository that demonstrate the syntax and semantics of the language. For examples, click [here](https://github.com/JHUISI/auto-tools/wiki/Scheme-Description-Language).\n"
 },
 {
  "repo": "prowdsponsor/nonce",
  "language": "Haskell",
  "readme_contents": "# Nonce\n\n\n[![Build Status](https://secure.travis-ci.org/prowdsponsor/nonce.svg?branch=master)](http://travis-ci.org/prowdsponsor/nonce)\n\nAccording to the Wikipedia, a nonce is an arbitrary number used\nonly once in a cryptographic communication.  This package\ncontain helper functions for generating nonces.\n\nThere are many kinds of nonces used in different situations.\nIt's not guaranteed that by using the nonces from this package\nyou won't have any security issues.  Please make sure that the\nnonces generated via this package are usable on your design.\n"
 },
 {
  "repo": "Carleslc/CryptTools",
  "language": "Python",
  "readme_contents": "# CryptTools\n\nTools for encryption, decryption and cracking from several cryptographic systems.\n\n\ud83c\uddea\ud83c\uddf8 Obt\u00e9n informaci\u00f3n sobre la criptograf\u00eda cl\u00e1sica y este proyecto en [este art\u00edculo](https://blog.carleslc.me/seguridad%20inform%C3%A1tica/criptografia-clasica-con-python/).\n\n[![ko-fi](https://www.ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/carleslc)\n\n- [How to Install](#how-to-install)\n- [Tools available](#tools-available)\n  - [Caesar](#caesar)\n      - [Usage](#usage)\n        - [Examples](#examples)\n          - [Encrypt a text and save to a file](#encrypt-a-text-and-save-to-a-file)\n          - [Encrypt with extra information](#encrypt-with-extra-information)\n          - [Decrypt with a known key](#decrypt-with-a-known-key)\n          - [Decrypt without knowing the key](#decrypt-without-knowing-the-key)\n          - [Advanced features](#advanced-features)\n      - [NOTE](#note)\n  - [Scytale](#scytale)\n      - [Usage](#usage-1)\n        - [Examples](#examples-1)\n          - [Encrypt a text and save to a file](#encrypt-a-text-and-save-to-a-file-1)\n          - [Encrypt with extra information](#encrypt-with-extra-information-1)\n          - [Decrypt with a known key](#decrypt-with-a-known-key-1)\n          - [Decrypt without knowing the key](#decrypt-without-knowing-the-key-1)\n          - [Advanced features](#advanced-features-1)\n      - [NOTE](#note-1)\n  - [Vigen\u00e8re](#vigen\u00e8re)\n      - [Usage](#usage-2)\n        - [Examples](#examples-2)\n          - [Encrypt a text and save to a file](#encrypt-a-text-and-save-to-a-file-2)\n          - [Encrypt with extra information](#encrypt-with-extra-information-2)\n          - [Decrypt with a known key](#decrypt-with-a-known-key-2)\n          - [Decrypt without knowing the key](#decrypt-without-knowing-the-key-2)\n          - [Advanced features](#advanced-features-2)\n      - [NOTE](#note-2)\n  - [AES](#aes)\n      - [Usage](#usage-3)\n        - [Examples](#examples-3)\n          - [Encrypt and save to a file](#encrypt-and-save-to-a-file)\n          - [Decrypt with a known key](#decrypt-with-a-known-key-3)\n          - [Advanced features](#advanced-features-3)\n\n## How to Install\n\n1. Install **[Python 3.6](https://www.python.org/downloads/)** if you do not have it yet.\n2. Ensure that you have installed **python3.6** in **/usr/bin** otherwise you will need to make a symbolic link to its real location:\n```\nsudo ln -s $(which python3.6) /usr/bin/python3.6\n```\n3. Install the following Python dependencies:\n```\npip3 install numpy\npip3 install pyenchant\n```\n4. Clone this repository: `git clone https://github.com/Carleslc/CryptTools.git`\n5. Give execution permissions to all tools:\n```\ncd CryptTools/tools\nchmod +x *\n```\n\n## Tools available\n\n_These tools are designed to be useful in the field of computer security and their use is restricted to personal use or under consent. I am not responsible for any illicit use that may occur._\n\n### Caesar\n\n[--> What is the Caesar Cipher? <--](https://en.wikipedia.org/wiki/Caesar_cipher)\n\n#### Usage\n\n`./caesar.py --help`\n```\nusage: caesar.py [-h] [-t TEXT] [-k KEY] [-l LANG] [-V] [-A] [-D]\n                 [-T THRESHOLD] [--beep]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t TEXT, --text TEXT  text to read from. If not specified the program will\n                        read from standard input\n  -k KEY, --key KEY     key used to encrypt. If no key is provided the program\n                        will try to crack and decrypt using the specified\n                        language\n  -l LANG, --lang LANG  available languages: ['de_DE', 'en_AU', 'en_GB',\n                        'en_US', 'fr_FR'] (default: en_US). Only useful if no\n                        key is provided\n  -V, --verbose         show extra information\n  -A, --all             show decrypted text for each tested key\n  -D, --debug           show information about text validation\n  -T THRESHOLD, --threshold THRESHOLD\n                        valid word count percentage to mark the whole text as\n                        valid language (default: 50)\n  --beep                plays a beep sound when program finishes. May require\n                        SOX to be installed\n```\n\n##### Examples\n\n###### Encrypt a text and save to a file\n\n**`./caesar.py -t \"This is the Caesar tool from CryptTools!\" -k 5 > test`**\n```\nYmnx nx ymj Hfjxfw yttq kwtr HwduyYttqx!\n```\n\n`-t` argument is not mandatory, so if you need to encrypt a long text you can skip it, execute `./caesar.py -k 5 > test` and then paste your text. When completed press `Return` and then finish the input with `Ctrl+D` so the program will read it.\n\n###### Encrypt with extra information\n\n**`./caesar.py -t \"This is the Caesar tool from CryptTools!\" -k 5 -VA`**\n```\nOriginal text most frequent character: t\n\nYmnx nx ymj Hfjxfw yttq kwtr HwduyYttqx!\n\nEncrypted text most frequent character: y\n```\n\n###### Decrypt with a known key\n\nTo decrypt you will need to know the shift needed to reallocate each character to its correct character in the alphabet. In the example above the encrypted shift is 5 so the shift needed to decrypt is 26 - 5 = 21, where 26 is the size of the alphabet.\n\n**`./caesar.py -k 21 < test`**\n```\nThis is the Caesar tool from CryptTools!\n```\n\n###### Decrypt without knowing the key\n\nThis method cracks the message with bruteforce and then checks every result validating the language to guess which result is the original text. By default language is English, for other languages read below.\n\n**`./caesar.py < test`**\n```\nThis is the Caesar tool from CryptTools!\n```\n\n###### Advanced features\n\nRead from a file and print cracked keys:\n\n**`./caesar.py -V < test`**\n```\nMost frequent character: y\nTesting 't' (ROT-21)       SUCCESS\nDecrypted with ROT-21. Original encryption key: 5\nThis is the Caesar tool from CryptTools!\n```\n\nROT-X means that each character in the text is shifted X positions in the alphabet.\n\nTo decrypt a message without knowing the key you need to know the original text **language**. It is provided with `--lang` option. By default it is `en_US` (American English).\n\nFor example, in _Deutsch_ language:\n\n`./caesar.py -t \"Dies ist das Scytale-Tool von CryptTools!\" -k 6`\n```\nJoky oyz jgy Yiezgrk-Zuur but IxevzZuury!\n```\n\nIf language is not provided it will try English and it will fail:\n\n**`./caesar.py -V -t \"Joky oyz jgy Yiezgrk-Zuur but IxevzZuury!\"`**\n```\nMost frequent character: y\nTesting 'z' (ROT-1)        \nSorry. None of decrypted results seems to be written in language en_US...\n```\n\nThen, providing the correct language:\n\n**`./caesar.py -V -t \"Joky oyz jgy Yiezgrk-Zuur but IxevzZuury!\" --lang \"de_DE\"`**\n```\nMost frequent character: y\nTesting 's' (ROT-20)       SUCCESS\nDecrypted with ROT-20. Original encryption key: 6\nDies ist das Scytale-Tool von CryptTools!\n```\n\nYou can check all available codes with `./caesar.py --help`. You can even install more languages, for that take a look [here](http://pythonhosted.org/pyenchant/tutorial.html#adding-language-dictionaries).\n\nIf original text _**language is unknown**_ you still can generate all possible transformations, then you will need to check them manually in order to know which is the correct:\n\n**`./caesar.py -V -A -t \"Joky oyz jgy Yiezgrk-Zuur but IxevzZuury!\"`**\n```\nMost frequent character: y\nTesting 'e' (ROT-6)       Testing decrypted text:\n\"Puqe uef pme Eokfmxq-Faax haz OdkbfFaaxe!\"\nTesting 't' (ROT-21)       Testing decrypted text:\n\"Ejft jtu ebt Tdzubmf-Uppm wpo DszquUppmt!\"\n...\nTesting 's' (ROT-20)       Testing decrypted text:\n\"Dies ist das Scytale-Tool von CryptTools!\"\nTesting 'h' (ROT-9)       Testing decrypted text:\n\"Sxth xhi sph Hrnipat-Idda kdc RgneiIddah!\"\n...\nTesting 'q' (ROT-18)       Testing decrypted text:\n\"Bgcq gqr byq Qawryjc-Rmmj tml ApwnrRmmjq!\"\nTesting 'z' (ROT-1)       Testing decrypted text:\n\"Kplz pza khz Zjfahsl-Avvs cvu JyfwaAvvsz!\"\n\nSorry. None of decrypted results seems to be written in language en_US...\n```\n\nTesting order is frequency order (most common letter is tested first).\n\nIn addition, with the extra option `-D` you can check the language validation process:\n\n**`./caesar.py -VAD < test`**\n```\nMost frequent character: y\nTesting 'e' (ROT-6)       Testing decrypted text:\n\"Estd td esp Nlpdlc ezzw qczx NcjaeEzzwd!\"\n\nestd: False              |  Progress 0%     | Max 88%\ntd: False                |  Progress 0%     | Max 75%\nesp: True                |  Progress 12%    | Max 75%\nnlpdlc: False            |  Progress 12%    | Max 62%\nezzw: False              |  Progress 12%    | Max 50%\nqczx: False              |  Progress 12%    | Max 38%\n\nTesting 't' (ROT-21)       Testing decrypted text:\n\"This is the Caesar tool from CryptTools!\"\n\nthis: True               |  Progress 12%    | Max 100%\nis: True                 |  Progress 25%    | Max 100%\nthe: True                |  Progress 38%    | Max 100%\ncaesar: False            |  Progress 38%    | Max 88%\ntool: True               |  Progress 50%    | SUCCESS\n\nDecrypted with ROT-21. Original encryption key: 5\nThis is the Caesar tool from CryptTools!\n```\n\n`-A` and `-D` options may be too verbose, avoid using them for long texts.\n\nYou can also set the permissiveness of the language validation process with the `--threshold -T` option. By default it is set to 50 (half of the text words must be written in the specified language in order to accept it as the original text). Values must be between 1 and 100. Values below 20% are not recommended (an encrypted text may be accepted as decrypted). Higher values indicate toughness, but 100% it is neither recommended (in the text may be non-english nouns and other original but non-english words).\n\n#### NOTE\n\nAs you can see, it is too easy to crack this classical cryptographic system so it is not recommended to use it in production software.\n\n### Scytale\n\n[--> What is a Scytale? <--](https://en.wikipedia.org/wiki/Scytale)\n\n#### Usage\n\n`./scytale.py --help`\n\n```\nusage: scytale.py [-h] [-t TEXT] [-k KEY] [-l LANG] [-V] [-A] [-D]\n                  [-T THRESHOLD] [--beep]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t TEXT, --text TEXT  text to read from. If not specified the program will\n                        read from standard input\n  -k KEY, --key KEY     key used to encrypt. If no key is provided the program\n                        will try to crack and decrypt using the specified\n                        language\n  -l LANG, --lang LANG  available languages: ['de_DE', 'en_AU', 'en_GB',\n                        'en_US', 'fr_FR'] (default: en_US). Only useful if no\n                        key is provided\n  -V, --verbose         show extra information\n  -A, --all             show decrypted text for each tested key\n  -D, --debug           show information about text validation\n  -T THRESHOLD, --threshold THRESHOLD\n                        valid word count percentage to mark the whole text as\n                        valid language (default: 50)\n  --beep                plays a beep sound when program finishes. May require\n                        SOX to be installed\n```\n\n##### Examples\n\n###### Encrypt a text and save to a file\n\n**`./scytale.py -t \"This is the Scytale tool from CryptTools!\" -k 5 > test`**\n```\nTheoohe moi t lsSoCs cor!iyly st p  aft tlrT\n```\n\n`-t` argument is not mandatory, so if you need to encrypt a long text you can skip it, execute `./scytale.py -k 5 > test` and then paste your text. When completed press `Return` and then finish the input with `Ctrl+D` so the program will read it.\n\n###### Encrypt with extra information\n\n**`./scytale.py -t \"This is the Scytale tool from CryptTools!\" -k 5 -VA`**\n```\nTesting matrix: 5x9\nText to cipher: \"This is the Scytale tool from CryptTools!\" (41)\n[['T' 'h' 'i' 's' ' ' 'i' 's' ' ' 't']\n ['h' 'e' ' ' 'S' 'c' 'y' 't' 'a' 'l']\n ['e' ' ' 't' 'o' 'o' 'l' ' ' 'f' 'r']\n ['o' 'm' ' ' 'C' 'r' 'y' 'p' 't' 'T']\n ['o' 'o' 'l' 's' '!' ' ' ' ' ' ' ' ']]\nResult size: 44\nTheoohe moi t lsSoCs cor!iyly st p  aft tlrT\n```\n\nThat matrix represents the Scytale. To encrypt the text it is written by rows (5) and read by columns (9).\n\n###### Decrypt with a known key\n\nTo decrypt you will need to know the columns of the underlying matrix. In the example above they are 9.\nIf you only have the key 5 (rows) then you can calculate the columns with the text size:\n`Columns = Size/Rows`. For example, the encrypted text above has size 44, so 44/5 = 8.8, rounding we have that columns are 9.\n\n**`./scytale.py -k 9 < test`**\n```\nThis is the Scytale tool from CryptTools!\n```\n\n###### Decrypt without knowing the key\n\nThis method cracks the message with bruteforce and then checks every result validating the language to guess which result is the original text. By default language is English, for other languages read below.\n\n**`./scytale.py < test`**\n```\nThis is the Scytale tool from CryptTools!\n```\n\n###### Advanced features\n\nRead from a file and print cracked keys:\n\n**`./scytale.py -V < test`**\n```\nText to crack: \"Theoohe moi t lsSoCs cor!iyly st p  aft tlrT\" (44)\nTesting matrix: 9x5       SUCCESS\nThis is the Scytale tool from CryptTools!\n```\n\nTo decrypt a message without knowing the key you need to know the original text **language**. It is provided with `--lang` option. By default it is `en_US` (American English).\n\nFor example, in _Deutsch_ language:\n\n`./scytale.py -t \"Dies ist das Scytale-Tool von CryptTools!\" -k 6`\n```\nDtcTnTi yo oedtoCosaalrl sl ysi evp!sS-ot\n```\n\nIf language is not provided it will try English and it will fail:\n\n**`./scytale.py -V -t \"DtcTnTi yo oedtoCosaalrl sl ysi evp!sS-ot\"`**\n```\nText to crack: \"DtcTnTi yo oedtoCosaalrl sl ysi evp!sS-ot\" (41)\nTesting matrix: 2x40       Sorry. None of decrypted results seems to be written in language en_US...\n```\n\nThen, providing the correct language:\n\n**`./scytale.py -V -t \"DtcTnTi yo oedtoCosaalrl sl ysi evp!sS-ot\" --lang \"de_DE\"`**\n```\nText to crack: \"DtcTnTi yo oedtoCosaalrl sl ysi evp!sS-ot\" (41)\nTesting matrix: 7x6       SUCCESS\nDies ist das Scytale-Tool von CryptTools!\n```\n\nYou can check all available codes with `./scytale.py --help`. You can even install more languages, for that take a look [here](http://pythonhosted.org/pyenchant/tutorial.html#adding-language-dictionaries).\n\nIf original text _**language is unknown**_ you still can generate all possible transformations, then you will need to check them manually in order to know which is the correct:\n\n**`./scytale.py -V -A -t \"DtcTnTi yo oedtoCosaalrl sl ysi evp!sS-ot\"`**\n```\nText to crack: \"Ddlooiaenoes- ls TCs Sor!icoy sylp tt t  avT\" (44)\n...\nTesting matrix: 2x21       Testing decrypted text:\n\"DltrclT nsTli  yysoi  oeevdpt!osCSo-soata\"\nTesting matrix: 21x2       Testing decrypted text:\n\"Dcniy etCsar lyieps-ttTT oodooalls s v!So\"\nTesting matrix: 3x14       Testing decrypted text:\n\"DtytoscCiTo nseTaviap l!yrsolS  -osoeltd\"\nTesting matrix: 14x3       Testing decrypted text:\n\"DTioeosl  ivsotn  dCarsy pStcTyotoallse!-\"\n...\nTesting matrix: 9x5       Testing decrypted text:\n\"DT oasi!ttioCll s c eor eS Tydslyv- nota spo\"\nTesting matrix: 6x7       Testing decrypted text:\n\"D tly!tyorsscoCliST o  -nosseoTealvtida p\"\nTesting matrix: 7x6       Testing decrypted text:\n\"Dies ist das Scytale-Tool von CryptTools!\"\nTesting matrix: 8x6       Testing decrypted text:\n\"Dies is t das S cytale- Tool vo n Crypt Tools!\"\n...\nTesting matrix: 2x40       Testing decrypted text:\n\"Dtt c T n T i   y o   o e d t o C o s a a l r l   s l   y s i   e v p ! s S - o\"\nSorry. None of decrypted results seems to be written in language en_US...\n```\n\nIn addition, with the extra option `-D` you can check the language validation process:\n\n**`./scytale.py -VAD < test`**\n```\nText to crack: \"Theoohe moi t lsSoCs cor!iyly st p  aft tlrT\" (44)\nTesting matrix: 1x44       Testing decrypted text:\n\"Theoohe moi t lsSoCs cor!iyly st p  aft tlrT\"\n\ntheoohe: False           |  Progress 0%     |   Max 90%\nmoi: False               |  Progress 0%     |   Max 80%\nlssocs: False            |  Progress 0%     |   Max 60%\ncor: False               |  Progress 0%     |   Max 50%\niyly: False              |  Progress 0%     |   Max 40%\n\n...\n\nTesting matrix: 2x22       Testing decrypted text:\n\"Tohre!oioyhley  msoti  pt   lasfSto Ctsl rcT\"\n\ntohre: False             |  Progress 0%     |   Max 86%\noioyhley: False          |  Progress 0%     |   Max 71%\nmsoti: False             |  Progress 0%     |   Max 57%\npt: True                 |  Progress 14%    |   Max 57%\nlasfsto: False           |  Progress 14%    |   Max 43%\n\nTesting matrix: 22x2       Testing decrypted text:\n\"TeoemitlSC o!yys  attrhoh o  soscril tp f lT\"\n\nteoemitlsc: False        |  Progress 0%     |   Max 89%\nyys: False               |  Progress 0%     |   Max 67%\nattrhoh: False           |  Progress 0%     |   Max 56%\n\n...\n\nTesting matrix: 3x15       Testing decrypted text:\n\"TsshSteo oCpos h  eca ofmrto! iit yltlr yTl\"\n\ntsshsteo: False          |  Progress 0%     |   Max 88%\nocpos: False             |  Progress 0%     |   Max 75%\neca: False               |  Progress 0%     |   Max 50%\nofmrto: False            |  Progress 0%     |   Max 38%\n\nTesting matrix: 15x3       Testing decrypted text:\n\"ToeotsCc!lspa rho i Ssoiyt ftTehm lo ry   tl\"\n\ntoeotscc: False          |  Progress 0%     |   Max 89%\nlspa: False              |  Progress 0%     |   Max 78%\nrho: True                |  Progress 11%    |   Max 78%\nssoiyt: False            |  Progress 11%    |   Max 56%\nfttehm: False            |  Progress 11%    |   Max 44%\n\n...\n\nTesting matrix: 5x9       Testing decrypted text:\n\"ToClahisyfe   totcs o otthlr les!pr Si Tmoy\"\n\ntoclahisyfe: False       |  Progress 0%     |   Max 88%\ntotcs: False             |  Progress 0%     |   Max 75%\notthlr: False            |  Progress 0%     |   Max 50%\nles: False               |  Progress 0%     |   Max 38%\n\nTesting matrix: 9x5       Testing decrypted text:\n\"This is the Scytale tool from CryptTools!\"\n\nthis: True               |  Progress 12%    |   Max 100%\nis: True                 |  Progress 25%    |   Max 100%\nthe: True                |  Progress 38%    |   Max 100%\nscytale: False           |  Progress 38%    |   Max 88%\ntool: True               |  Progress 50%    |   \nSUCCESS\nThis is the Scytale tool from CryptTools!\n```\n\n`-A` and `-D` options may be too verbose, avoid using them for long texts.\n\nYou can also set the permissiveness of the language validation process with the `--threshold -T` option. By default it is set to 50 (half of the text words must be written in the specified language in order to accept it as the original text). Values must be between 1 and 100. Values below 20% are not recommended (an encrypted text may be accepted as decrypted). Higher values indicate toughness, but 100% it is neither recommended (in the text may be non-english nouns and other original but non-english words).\n\n#### NOTE\n\nAs you can see, it is too easy to crack this classical cryptographic system so it is not recommended to use it in production software.\n\n### Vigen\u00e8re\n\n[--> What is the Vigen\u00e8re Cipher? <--](https://en.wikipedia.org/wiki/Vigen\u00e8re_cipher)\n\n#### Usage\n\n`./vigenere.py --help`\n```\nusage: vigenere.py [-h] [-t TEXT] [-k KEY] [--decrypt] [--exhaustive] [-V]\n                   [-A] [-D] [-T THRESHOLD] [--beep]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t TEXT, --text TEXT  text to read from. If not specified the program will\n                        read from standard input\n  -k KEY, --key KEY     key used to encrypt or decrypt. If no key is provided\n                        the program will try to crack and decrypt the text\n  --decrypt             use the key to decrypt the text. If no key is provided\n                        this argument is redundant\n  --exhaustive          tests all possible keys. If not provided this program\n                        only will test keys below length 100 while cracking\n  -V, --verbose         show extra information\n  -A, --all             show decrypted text for each tested key\n  -D, --debug           show information about text validation\n  -T THRESHOLD, --threshold THRESHOLD\n                        valid word count percentage to mark the whole text as\n                        valid language (default: 50)\n  --beep                plays a beep sound when program finishes. May require\n                        SOX to be installed\n```\n\n##### Examples\n\n###### Encrypt a text and save to a file\n\n**`./vigenere.py -t \"This is the Vigenere tool from CryptTools!\" -k \"CRYPT\" > test`**\n```\nVygh bu kft Okxccxtv rdhn wpdf EiwemVfmal!\n```\n\n`-t` argument is not mandatory, so if you need to encrypt a long text you can skip it, execute `./vigenere.py \"CRYPT\" > test` and then paste your text. When completed press `Return` and then finish the input with `Ctrl+D` so the program will read it.\n\n###### Encrypt with extra information\n\n**`./vigenere.py -t \"This is the Vigenere tool from CryptTools!\" -k \"CRYPT\" -V`**\n```\nKey \"CRYPT\" shifts: [2, 17, 24, 15, 19]\nVygh bu kft Okxccxtv rdhn wpdf EiwemVfmal!\n```\n\n###### Decrypt with a known key\n\nTo decrypt you will need to know the encryption key. In the example above it is _CRYPT_.\nYou need to provide the argument `--decrypt` to use the key to decrypt.\n\n**`./vigenere.py -k \"CRYPT\" --decrypt < test`**\n```\nThis is the Vigenere tool from CryptTools!\n```\n\n###### Decrypt without knowing the key\n\nThis method cracks the message testing with statistical methods and bruteforce and then checks every result validating the language to guess which result is the original text. In comparison to previous methods this will only work if the original text language is **English** because of the statistics methods it is using. In addition, in relation to this it is worth noting that long keys may contain some wrong letters. Given this limitation the maximum key length allowed by default is 100. Nevertheless you can force the program to test all possible key lengths using the argument `--exhaustive`. Also take in account that for small texts this program may fail, as we can see in the example below.\n\n**`./vigenere.py < test`**\n```\nSorry. None of decrypted results seems to be written in language en_US...\nIf you want to try more keys execute this program again with the option --exhaustive. However, it is worth noting that the longer the key is the more errors can have the cracked key. In addition, this program may have difficulties to crack keys on smaller texts in comparison with the key length.\n```\n\nProviding longer texts may be more successful:\n\n_test_:\n```\nThis method cracks the message testing with statistical methods and bruteforce and then checks every result validating the language to guess which result is the original text. In comparison to previous methods this will only work if the original text language is English because of the statistics methods it is using. In addition, in relation to this it is worth noting that long keys may contain some wrong letters. Given this limitation the maximum key length allowed by default is 100. Nevertheless you can force the program to test all possible key lengths using the argument --exhaustive. Also take in account that for small texts this program may fail, as we can see in the example below.\n```\n\n**`./vigenere.py -k \"CRYPT\" < test > test_encrypted`**\n```\nVygh fgkfdw eiyrdu kft fgjqpzg kchmkee lbvy qitvzqiberj bxvymsl ceb qkwkcuhttc pgf kftg eycrdu vttka ichnnk tpekuyibpx rwx nrlvncxc ih ilchl yygra tvqjev zq iag fpxzkeya mgor. Xg efkettzqdg vf ngxxzmjl ovrwhfj rwbu ngae qejn pqii xy vyc dkkxgctn kcmm nrlvncxc xl Geeabuy ztvclqt hh kft lvrrxlvzah fgkfdwu zr xl wjgcz. Ke yswkkgdg, ke pteckgdg vf rwbu zr xl yfpia pfrxgi kfpm nflv dgpq bta tmcmczl hhov ughpx jtmvvph. Zkmcc mjzq abozrpmkfl iag dymbolk zxa ccczvy yaeqncs ua ucutwcr xl 100. Pvttkvycaxuj wdn erl uhttc iag gpdztrk ih vvqi tnc ndluzzax mvw axpxrwl wjgcz vyc pkilktgv --vvwtwjrxog. Rjhh vrit bp rarhwer iack ddk udyae vvvil vygh itfegto dyn yczj, pl yv apg uvc xg vyc tqcdnax dvjdp.\n```\n\n**`./vigenere.py < test_encrypted`**\n```\nThis method cracks the message testing with statistical methods and bruteforce and then checks every result validating the language to guess which result is the original text. In comparison to previous methods this will only work if the original text language is English because of the statistics methods it is using. In addition, in relation to this it is worth noting that long keys may contain some wrong letters. Given this limitation the maximum key length allowed by default is 100. Nevertheless you can force the program to test all possible key lengths using the argument --exhaustive. Also take in account that for small texts this program may fail, as we can see in the example below.\n```\n\n\n###### Advanced features\n\nPrint cracked key and other information about the cracking process:\n\n**`./vigenere.py -V < test_encrypted`**\n```\nText IC (Index of Coincidence): 0.04250925751584761\nFriedman test suggests a key length of 8\nTesting key length 8\nKey \"SRAZSCKX\" shifts: [18, 17, 0, 25, 18, 2, 10, 23]\nKasiki examination\nFinding sequence duplicates and spacings...\n100% \nExtracting spacing divisors...\nTesting key length 5\nKey \"CRYPT\" shifts: [2, 17, 24, 15, 19]\nSUCCESS\nKey: CRYPT\nThis method cracks the message testing with statistical methods and bruteforce and then checks every result validating the language to guess which result is the original text. In comparison to previous methods this will only work if the original text language is English because of the statistics methods it is using. In addition, in relation to this it is worth noting that long keys may contain some wrong letters. Given this limitation the maximum key length allowed by default is 100. Nevertheless you can force the program to test all possible key lengths using the argument --exhaustive. Also take in account that for small texts this program may fail, as we can see in the example below.\n```\n\nPrint even more information:\n\n**`./vigenere.py -VA < test_encrypted`**\n```\nFrequencies: [('v', 39), ('c', 37), ('g', 34), ('k', 32), ('t', 32), ('r', 27), ('x', 26), ('y', 25), ('l', 24), ('e', 23), ('a', 23), ('p', 22), ('z', 22), ('i', 21), ('h', 20), ('f', 20), ('d', 20), ('w', 17), ('u', 17), ('n', 17), ('j', 15), ('q', 15), ('m', 15), ('b', 12), ('o', 7), ('s', 3)]\nText IC (Index of Coincidence): 0.04250925751584761\nFriedman test suggests a key length of 8\nTesting key length 8\nSubgroup 1 (IC: 0.041851106639839035)\nvdkzevbehfuhuxcyjfmkvjjeikmxbqvhzzgcwfglahxzqkmcecparaknaxzkwhrayvgzgcd\nTesting subkey 'A' with match score 57%\nTesting subkey 'B' with match score 56%\n...\nKey \"SRAZSCKX\" shifts: [18, 17, 0, 25, 18, 2, 10, 23]\nKasiki examination\nFinding sequence duplicates and spacings...\n100% \n{'kft': [55, 220, 165], 'rdu': [65], 'vzqi': [90], 'nrlvncxc': [105], 'hfgkfdw': [245], 'rxl': [15, 50, 155, 140, 105], 'zkey': [125], 'kgdg': [10], 'dgvf': [125], 'rwbu': [110], 'uzrxl': [35], 'rxg': [155], 'iag': [230, 290, 60], 'aeq': [200], 'vttk': [320], 'vyc': [210, 270, 60, 355, 145, 85], 'uhttc': [355], 'qit': [400], 'pxrw': [355], 'lwjgcz': [200], 'czvy': [85], 'yae': [130], 'vvv': [40], 'vygh': [520]}\nExtracting spacing divisors...\nKasiki possible key lengths (sorted by probability):\n[5, 10, 2, 4, 15, 20, 3, 7, 11, 35, 40, 6, 25, 30, 55, 9, 13, 14, 50, 65, 16, 18, 21, 22, 26, 29, 45, 70, 80, 90, 100, 12, 17, 23, 27, 28, 31, 32, 33, 42, 44, 46, 49, 52, 54, 58, 60, 64, 71, 85]\nTesting key length 5\nSubgroup 1 (IC: 0.07237673830594185)\nvgeuggkvvevcwtfeuankpnciytvgkgetvxofuqqvknncguchvvguwkkkcvuypingacopvkjokgoavqawpvuetgtvnumpwvivwgvpwcuvvtocyuvcd\nTesting subkey 'A' with match score 53%\nTesting subkey 'B' with match score 54%\nTesting subkey 'C' with match score 69%\nTesting subkey 'D' with match score 54%\nTesting subkey 'E' with match score 53%\nTesting subkey 'F' with match score 46%\nTesting subkey 'G' with match score 60%\nTesting subkey 'H' with match score 54%\nTesting subkey 'I' with match score 58%\nTesting subkey 'J' with match score 52%\nTesting subkey 'K' with match score 54%\nTesting subkey 'L' with match score 55%\nTesting subkey 'M' with match score 52%\nTesting subkey 'N' with match score 59%\nTesting subkey 'O' with match score 58%\nTesting subkey 'P' with match score 52%\nTesting subkey 'Q' with match score 48%\nTesting subkey 'R' with match score 58%\nTesting subkey 'S' with match score 56%\nTesting subkey 'T' with match score 56%\nTesting subkey 'U' with match score 54%\nTesting subkey 'V' with match score 53%\nTesting subkey 'W' with match score 54%\nTesting subkey 'X' with match score 52%\nTesting subkey 'Y' with match score 52%\nTesting subkey 'Z' with match score 51%\nBest subkey is 'C' with match score 69%\n...\nSubgroup 4 (IC: 0.06368520859671302)\nhdrtphliibsquptrthpiwvihrjixaxedgjwwanxdcmvxatttxhdxcsdtdwxixpvbchgthcapimzcasuxtaduidiidaawcptwxhtridaihgnppxtad\nTesting subkey 'A' with match score 63%\nTesting subkey 'B' with match score 58%\nTesting subkey 'C' with match score 53%\nTesting subkey 'D' with match score 57%\nTesting subkey 'E' with match score 59%\nTesting subkey 'F' with match score 57%\nTesting subkey 'G' with match score 57%\nTesting subkey 'H' with match score 57%\nTesting subkey 'I' with match score 55%\nTesting subkey 'J' with match score 56%\nTesting subkey 'K' with match score 60%\nTesting subkey 'L' with match score 56%\nTesting subkey 'M' with match score 54%\nTesting subkey 'N' with match score 51%\nTesting subkey 'O' with match score 58%\nTesting subkey 'P' with match score 77%\nTesting subkey 'Q' with match score 58%\nTesting subkey 'R' with match score 54%\nTesting subkey 'S' with match score 52%\nTesting subkey 'T' with match score 57%\nTesting subkey 'U' with match score 57%\nTesting subkey 'V' with match score 57%\nTesting subkey 'W' with match score 56%\nTesting subkey 'X' with match score 53%\nTesting subkey 'Y' with match score 52%\nTesting subkey 'Z' with match score 53%\nBest subkey is 'P' with match score 77%\nSubgroup 5 (IC: 0.0586283185840708)\nfwdfzmbtbxlkhggdknebxnhlaeazmgtgxlhbepyktmnlbvhllfwlzwgegblagmdtmhhmzmbmabxzeutlkxnhazhtlxxlzkgtohbhakelitylggqxp\nTesting subkey 'A' with match score 56%\nTesting subkey 'B' with match score 54%\n...\nTesting subkey 'R' with match score 54%\nTesting subkey 'S' with match score 62%\nTesting subkey 'T' with match score 75%\nTesting subkey 'U' with match score 56%\nTesting subkey 'V' with match score 52%\nTesting subkey 'W' with match score 51%\nTesting subkey 'X' with match score 58%\nTesting subkey 'Y' with match score 60%\nTesting subkey 'Z' with match score 62%\nBest subkey is 'T' with match score 75%\nKey \"CRYPT\" shifts: [2, 17, 24, 15, 19]\nSUCCESS\nKey: CRYPT\nThis method cracks the message testing with statistical methods and bruteforce and then checks every result validating the language to guess which result is the original text. In comparison to previous methods this will only work if the original text language is English because of the statistics methods it is using. In addition, in relation to this it is worth noting that long keys may contain some wrong letters. Given this limitation the maximum key length allowed by default is 100. Nevertheless you can force the program to test all possible key lengths using the argument --exhaustive. Also take in account that for small texts this program may fail, as we can see in the example below.\n```\n\nIn addition, with the extra option `-D` you can check the language validation process in the same way that with previous cryptographic systems.\n\n`-A` and `-D` options may be too verbose, avoid using them for long texts.\n\nYou can also set the permissiveness of the language validation process with the `--threshold -T` option. By default it is set to 50 (half of the text words must be written in the specified language in order to accept it as the original text). Values must be between 1 and 100. Values below 20% are not recommended (an encrypted text may be accepted as decrypted). Higher values indicate toughness, but 100% it is neither recommended (in the text may be non-english nouns and other original but non-english words).\n\n#### NOTE\n\nAs you can see the choice of the key is important. In order to have a secure encryption you will need to provide a key of at least the length of the text and it needs to be unique for that text. However, nowadays there are many others cryptographic systems more advanced and useful.\n\n### AES\n\n[--> What is the AES Cipher? <--](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\n\n#### Usage\n\n`./aes.py --help`\n```\nusage: aes.py [-h] [-t TEXT] [-in INFILE] [-out OUTFILE] [-k KEY]\n              [-kf KEYFILE] [-m MODE] [--decrypt]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t TEXT, --text TEXT  text to read from (by default: standard input bytes).\n                        If text contains non-printable characters (special\n                        bytes) then you will need to use --infile and\n                        --outfile in order to do the conversion.\n  -in INFILE, --infile INFILE\n                        file to read from\n  -out OUTFILE, --outfile OUTFILE\n                        file to write the result\n  -k KEY, --key KEY     AES key used to encrypt or decrypt\n  -kf KEYFILE, --keyfile KEYFILE\n                        file containing the AES key used to encrypt or decrypt\n  -m MODE, --mode MODE  operation mode, by default CBC. Supported: ECB, CBC,\n                        CFB, OFB, OPENPGP\n  --decrypt             use the key to decrypt the text\n```\n\n##### Examples\n\n_This examples uses 128-bit key, but you can also use keys with 192 and 256 bits._\n\n###### Encrypt and save to a file\n\n_For text:_\n\n**`./aes.py -t \"This is the AES tool from CryptTools!\" -k \"Sixteen byte key\" -out test.enc`**\n\nBytes:\n```\nb'\\x8f\\x88NP\\x8e^5&\\x95\\x92<\\x9c\\x93s\\xa1D;LP\\x01\\x17\\x83@\\xeb\\x8d\\x7fM\\xbeZ\\xc4\\x10\\x15\\xd8K\\xe2\\x03O\\xa5\\x98\\xcf\\xef\\xc0\\x1c\\x8dg>\\xa62,Gx\\xb9E\\xa7\\xe7&r\\xedb\"\\xf7\\x05+\\x05'\n```\n\n**test.enc**:\n```\n\u00ca\u00a4\u00da@\u0081UXK*3p\u001eIR\u000f\u001c\u201e$\u001fb\u00c4\u00d5\u001a\u00f3>\u017dx\u00a0\u0017\u00b7\u00cf\u00f45S \u00aam\u00b9\u00ff\u2019z>\u001c3\u008dXe\u00bf\u0006\u00feA\u00d9\u00ed\u0005\u00ea\u20ac\u2013\u00c0R{\u00e5!v\u00d5\n```\n\n`-t` argument is not mandatory, so if you need to encrypt a long text you can skip it and paste your text in standard input. When completed press `Return` and then finish the input with `Ctrl+D` so the program will read it.\n\n_For any file format:_\nIn order to encrypt images, binaries and other files you must provide input and output files with `-in` and `-out` parameters.\n\n**`./aes.py -k \"Sixteen byte key\" -in test -out test.enc`**\n\n###### Decrypt with a known key\n\nUse the `--decrypt` parameter.\n\n**`./aes.py -k \"Sixteen byte key\" --decrypt -in test.enc -out test`**\n\n**test**:\n```\nThis is the AES tool from CryptTools!\n```\n\n###### Advanced features\n\nYou can specify a key of 128, 192 or 256 bits which is inside a file:\n\n**`./aes.py --keyfile test.key --decrypt -in test.enc -out test`**\n\n**test.key**:\n```\nSixteen byte key\n```\n\nYou can specify the operation mode used for cipher multiple blocks.\n\n**`./aes.py --keyfile test.key --decrypt -in test.enc -out test -m \"ECB\"`**\n\nDefaults to **CBC**.\n"
 },
 {
  "repo": "gadial/ECC",
  "language": "C++",
  "readme_contents": ""
 },
 {
  "repo": "tf-encrypted/tf-encrypted",
  "language": "Python",
  "readme_contents": "<img src=\"https://tinyurl.com/tfelogo\" width=\"65%\" />\n\nTF Encrypted is a framework for encrypted machine learning in TensorFlow. It looks and feels like TensorFlow, taking advantage of the ease-of-use of the Keras API while enabling training and prediction over encrypted data via secure multi-party computation and homomorphic encryption. TF Encrypted aims to make privacy-preserving machine learning readily available, without requiring expertise in cryptography, distributed systems, or high performance computing.\n\nSee below for more [background material](#background--further-reading), explore the [examples](./examples/), or visit the [documentation](./docs/) to learn more about how to use the library. \n\n[![Website](https://img.shields.io/website/https/tf-encrypted.io.svg)](https://tf-encrypted.io) [![Documentation](https://img.shields.io/badge/api-reference-blue.svg)](https://tf-encrypted.readthedocs.io/en/latest/) [![PyPI](https://img.shields.io/pypi/v/tf-encrypted.svg)](https://pypi.org/project/tf-encrypted/) [![CircleCI Badge](https://circleci.com/gh/tf-encrypted/tf-encrypted/tree/master.svg?style=svg)](https://circleci.com/gh/tf-encrypted/tf-encrypted/tree/master)\n\n# Installation\n\nTF Encrypted is available as a package on [PyPI](https://pypi.org/project/tf-encrypted/) supporting Python 3.5+ and TensorFlow 1.12.0+:\n\n```bash\npip install tf-encrypted\n```\nCreating a conda environment to run TF Encrypted code can be done using:\n```\nconda create -n tfe python=3.6\nconda activate tfe\nconda install tensorflow notebook\npip install tf-encrypted\n```\n\nAlternatively, installing from source can be done using:\n\n```bash\ngit clone https://github.com/tf-encrypted/tf-encrypted.git\ncd tf-encrypted\npip install -e .\nmake build\n```\n\nThis latter is useful on platforms for which the pip package has not yet been compiled but is also needed for [development](./docs/CONTRIBUTING.md). Note that this will get you a working basic installation, yet a few more steps are required to match the performance and security of the version shipped in the pip package, see the [installation instructions](./docs/INSTALL.md).\n\n# Usage\n\nThe following is an example of simple matmul on encrypted data using TF Encrypted:\n\n```python\nimport tensorflow as tf\nimport tf_encrypted as tfe\n\n@tfe.local_computation('input-provider')\ndef provide_input():\n    # normal TensorFlow operations can be run locally\n    # as part of defining a private input, in this\n    # case on the machine of the input provider\n    return tf.ones(shape=(5, 10))\n\n# define inputs\nw = tfe.define_private_variable(tf.ones(shape=(10,10)))\nx = provide_input()\n\n# define computation\ny = tfe.matmul(x, w)\n\nwith tfe.Session() as sess:\n    # initialize variables\n    sess.run(tfe.global_variables_initializer())\n    # reveal result\n    result = sess.run(y.reveal())\n```\n\nFor more information, check out the [documentation](./docs/) or the [examples](./examples/).\n\n# Roadmap\n\n- High-level APIs for combining privacy and machine learning. So far TF Encrypted is focused on its low-level interface but it's time to figure out what it means for interfaces such as Keras when privacy enters the picture.\n\n- Tighter integration with TensorFlow. This includes aligning with the upcoming TensorFlow 2.0 as well as figuring out how TF Encrypted can work closely together with related projects such as [TF Privacy](https://github.com/tensorflow/privacy) and [TF Federated](https://github.com/tensorflow/federated).\n\n- Support for third party libraries. While TF Encrypted has its own implementations of secure computation, there are other [excellent libraries](https://github.com/rdragos/awesome-mpc/) out there for both secure computation and homomorphic encryption. We want to bring these on board and provide a bridge from TensorFlow.\n\n<img src=\"https://raw.githubusercontent.com/tf-encrypted/assets/master/app-stack.png\" width=\"55%\" />\n\n# Background & Further Reading\n\nBlog posts:\n\n- [Introducing TF Encrypted](https://alibaba-gemini-lab.github.io/docs/blog/tfe/) walks through a simple example showing two data owners jointly training a logistic regression model using TF Encrypted on a vertically split dataset (*by Alibaba Gemini Lab*)\n\n- [Federated Learning with Secure Aggregation in TensorFlow](https://medium.com/dropoutlabs/federated-learning-with-secure-aggregation-in-tensorflow-95f2f96ebecd) demonstrates using TF Encrypted for secure aggregation of federated learning in pure TensorFlow (*by Justin Patriquin at Cape Privacy*)\n\n- [Encrypted Deep Learning Training and Predictions with TF Encrypted Keras](https://medium.com/dropoutlabs/encrypted-deep-learning-training-and-predictions-with-tf-encrypted-keras-557193284f44) introduces and illustrates first parts of our encrypted Keras interface (*by Yann Dupis at Cape Privacy*)\n\n- [Growing TF Encrypted](https://medium.com/dropoutlabs/growing-tf-encrypted-a1cb7b109ab5) outlines the roadmap and motivates TF Encrypted as a community project (*by Morten Dahl*)\n\n- [Experimenting with TF Encrypted](https://medium.com/dropoutlabs/experimenting-with-tf-encrypted-fe37977ff03c) walks through a simple example of turning an existing TensorFlow prediction model private (*by Morten Dahl and Jason Mancuso at Cape Privacy*)\n\n- [Secure Computations as Dataflow Programs](https://mortendahl.github.io/2018/03/01/secure-computation-as-dataflow-programs/) describes the initial motivation and implementation (*by Morten Dahl*)\n\nPapers:\n\n- [Privacy-Preserving Collaborative Machine Learning on Genomic Data using TensorFlow](https://arxiv.org/abs/2002.04344) outlines the [iDASH'19](http://www.humangenomeprivacy.org/2019/) winning solution built on TF Encrypted (*by Cheng Hong, et al.*)\n\n- [Crypto-Oriented Neural Architecture Design](https://arxiv.org/abs/1911.12322) uses TF Encrypted to benchmark ML optimizations made to better support the encrypted domain (*by Avital Shafran, Gil Segev, Shmuel Peleg, and Yedid Hoshen*)\n\n- [Private Machine Learning in TensorFlow using Secure Computation](https://arxiv.org/abs/1810.08130) further elaborates on the benefits of the approach, outlines the adaptation of a secure computation protocol, and reports on concrete performance numbers (*by Morten Dahl, Jason Mancuso, Yann Dupis, et al.*)\n\nPresentations:\n\n- [Privacy-Preserving Machine Learning with TensorFlow](https://github.com/capeprivacy/tf-world-tutorial), TF World 2019 (*by Jason Mancuso and Yann Dupis at Cape Privacy*); see also the [slides](https://github.com/capeprivacy/tf-world-tutorial/blob/master/TensorFlow-World-Tutorial-2019-final.pdf)\n\n- [Privacy-Preserving Machine Learning in TensorFlow with TF Encrypted](https://conferences.oreilly.com/artificial-intelligence/ai-ny-2019/public/schedule/detail/76542), O'Reilly AI 2019 (*by Morten Dahl at Cape Privacy*); see also the [slides](https://github.com/mortendahl/talks/blob/master/OReillyAI19-slides.pdf)\n\nOther:\n\n- [Privacy Preserving Deep Learning \u2013 PySyft Versus TF Encrypted](https://blog.exxactcorp.com/privacy-preserving-deep-learning-pysyft-tfencrypted/) makes a quick comparison between PySyft and TF Encrypted, correctly hitting on our goal of being the encryption backend in PySyft for TensorFlow (*by Exxact*)\n\n- [Bridging Microsoft SEAL into TensorFlow](https://medium.com/dropoutlabs/bridging-microsoft-seal-into-tensorflow-b04cc2761ad4) takes a first step towards integrating the Microsoft SEAL homomorphic encryption library and some of the technical challenges involved (*by Justin Patriquin at Cape Privacy*)\n\n# Development and Contribution\n\nTF Encrypted is open source community project developed under the Apache 2 license and maintained by a set of core developers. We welcome contributions from all individuals and organizations, with further information available in our [contribution guide](./docs/CONTRIBUTING.md). We invite any organizations interested in [partnering](#organizational-contributions) with us to reach out via [email](mailto:contact@tf-encrypted.io).\n\nDon't hesitate to send a pull request, open an issue, or ask for help! We use [ZenHub](https://www.zenhub.com/extension) to plan and track GitHub issues and pull requests.\n\n## Individual contributions\n\nWe appreciate the efforts of [all contributors](https://github.com/tf-encrypted/tf-encrypted/graphs/contributors) that have helped make TF Encrypted what it is! Below is a small selection of these, generated by [sourcerer.io](https://sourcerer.io/) from most recent stats:\n\n[![](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/images/0)](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/links/0)[![](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/images/1)](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/links/1)[![](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/images/2)](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/links/2)[![](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/images/3)](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/links/3)[![](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/images/4)](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/links/4)[![](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/images/5)](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/links/5)[![](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/images/6)](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/links/6)[![](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/images/7)](https://sourcerer.io/fame/mortendahl/tf-encrypted/tf-encrypted/links/7)\n\n## Organizational contributions\n\nWe are very grateful for the significant contributions made by the following organizations!\n\n<table>\n    <tr>\n        <td><a href=\"https://capeprivacy.com/\"><img src=\"https://raw.githubusercontent.com/tf-encrypted/assets/master/other/capeprivacy-logo.png\" alt=\"Cape Privacy\" width=\"150\"/></a></td>\n        <td><a href=\"https://www.alibabagroup.com/\"><img src=\"https://raw.githubusercontent.com/tf-encrypted/assets/master/other/alibaba-logo.png\" alt=\"Alibaba Security Group\" width=\"150\"/></a></td>\n        <td><a href=\"https://openmined.org/\"><img src=\"https://raw.githubusercontent.com/tf-encrypted/assets/master/other/openmined-logo.png\" alt=\"OpenMined\" width=\"150\"/></a></td>\n    </tr>\n</table>\n\n# Project Status\n\nTF Encrypted is experimental software not currently intended for use in production environments. The focus is on building the underlying primitives and techniques, with some practical security issues postponed for a later stage. However, care is taken to ensure that none of these represent fundamental issues that cannot be fixed as needed.\n\n## Known limitations\n\n- Elements of TensorFlow's networking subsystem does not appear to be sufficiently hardened against malicious users. Proxies or other means of access filtering may be sufficient to mitigate this.\n\n## Support\n\nPlease open an [issue](https://github.com/tf-encrypted/tf-encrypted/issues), or send an email to [contact@tf-encrypted.io](mailto:contact@tf-encrypted.io).\n\n# License\n\nLicensed under Apache License, Version 2.0 (see [LICENSE](./LICENSE) or http://www.apache.org/licenses/LICENSE-2.0). Copyright as specified in [NOTICE](./NOTICE).\n"
 },
 {
  "repo": "jbdrvl/cryptography",
  "language": "Python",
  "readme_contents": "# CRYPTOGRAPHY\nThis directory contains simple implementations of some of the main cryptography algorithms.\n\nI will add the algorithms as I code them.\n\n**NOTE:** These cryptographic implementations are just 'educational' implementations to show and understand how the algorithms work, but should not be used in 'serious' cryptographic environments, as these implementations could be subject to simple attacks (which I may code as well.. - e.g. timing attack on DES, [attack on RC4](https://link.springer.com/content/pdf/10.1007%2F3-540-45537-X_1.pdf)..).\n\n## Data Encryption Standard - DES\nWell-known symetric-key block cipher.\n\n## Diffie-Hellman Key Exchange\nKey exchange which can be used in IPsec, the TLS handshake and more.\n\n## Feistel Cipher\nBlock cipher used in other algorithms such as DES.\n\n## RC4\nStream cipher used in WPA, WEP, TLS/SSL, Remote Desktop, ...\n\n## Vigenere and Ceasar Ciphers\nElementary and easy-to-use ciphers.\n"
 },
 {
  "repo": "cryptocoinjs/ecdsa",
  "language": "JavaScript",
  "readme_contents": "# Deprecated\n\nUse [secp256k1](https://github.com/cryptocoinjs/secp256k1-node) or [elliptic](https://github.com/indutny/elliptic) if you\nneed other curves.\n\necdsa\n======\n\n[![build status](https://secure.travis-ci.org/cryptocoinjs/ecdsa.png)](http://travis-ci.org/cryptocoinjs/ecdsa)\n[![Coverage Status](https://img.shields.io/coveralls/cryptocoinjs/ecdsa.svg)](https://coveralls.io/r/cryptocoinjs/ecdsa)\n\nJavaScript component for Elliptic Curve Cryptography signing and verification. This module is important to sign transactions. Works\nwith both Node.js and the browser.\n\n**This has been extracted from [bitcoinjs-lib@2.1.4](https://github.com/bitcoinjs/bitcoinjs-lib/tree/v2.1.4) and will track\nit for the foreseeable future.**\n"
 },
 {
  "repo": "rupeshtr78/fabric",
  "language": "Go",
  "readme_contents": "Hyperledger -Using Fabric CA to generate cryptographic materials \n================================================================\nThis article will illustrate how to use Fabric CA to setup a basic Fabric network without using cryptogen to generate certificates.\nThe indent is to get an insight into the generation of cryptographic\nmaterials associated with the fabric identities.For this purpose we will\nbe executing relevant\n[commands](ht<span>tps://github.com/rupeshtr78/fabric/blob/master/Fabric-Steps-ReadMe.txt) for each step without any scripts.\n\nAll identities that participate on a Hyperledger Fabric network must be\nauthorized. This authorization is provided in the form of cryptographic\nmaterial that is verified against trusted certificate authorities.\n\nWe will see the process for setting up a basic fabric network that\nincludes one organization, with two peers and one orderer.Two TLS CA\nservers and two CA Servers one CA each for peer org and orderer org. We\nwill generate cryptographic material for orderers, peers,\nadministrators, and end users with TLS enabled in a single host\nenvironment.\n\n> Topology of this deployment can be seen in the image below:\n\n![](images/model.png)\n\nWe will generate the model as shown below using Fabric CA.\n\n![](images/blocktree.png)\n\n-   **admincerts** to include PEM files each corresponding to an\n    administrator certificate (signcerts of admin user)\n-   **cacerts** to include PEM files each corresponding to a root CA's\n    certificate (ca-cert.pem)\n-   **keystore** to include a PEM file with the node's signing key;\n    private key.currently RSA keys are not supported\n-   **signcerts** to include a PEM file with the node's X.509\n    certificate public key.\n-   **tlscacerts** (optional) a folder to include PEM files each\n    corresponding to a TLS root CA's certificate\n    \n**These are the main steps that are required to generate the cryptograhic materials for each identity.**\n> (1)  **Setup TLS CA Server**\n> (2)  **Setup CA Server**\n\n> **After configuring and starting the TLS and CA servers it is mainly two steps**\n> \n> \\(1) **Register** identities (orderers, peers ,admins,users) with TLS and\n> CA servers\n> \n> \\(2) **Enroll** those identities by pointing to their relevant msp\n> directory for generating CA certificates and to the **tls** directory for generating TLS certificates\n> as per your model.These two steps creates all the cryptographic material\n> for each identity in the network.\n> \n\n**Step : Setting up the Fabric CA**\n\nWe will need the binaries for both Fabric and Fabric CA for this\nexercise and make the relevant fabric-ca-servers ,fabric-ca-client\nbinaries and also make the docker images.User guides and other\n[contributors](ht<span>tps://gist.github.com/AkshayCHD/f7c96175dca1e5ab8d5785a3af0d5692) has very good notes on the required steps for\nsetting up fabric and fabric ca binaries. Select and set the path to\nlatest binary for your machine.Or you could point to the samples\nbinaries.\n\nThis exercise uses version 1.4.2 of fabric-ca-client\n\n**Step :Setup TLS CA**\n\nMake the directory structure needed for TLS CA , Fabric CA client and\nServer for our model.\n\n![CA server\nDirectory](images/fabca-tree.png)\n\nmkdir -p fabca/fabric.<span>com/{ca-admin,ca-server,tlsca-admin,tlsca-server}\n\nmkdir -p\nfabca/po1.fabric.<span>com/{ca-admin,ca-server,tlsca-admin,tlsca-server}\n\n**Start the TLS enabled Fabric CA container**.First run the container\nwith *fabric-ca-server init* command .Refer\n[docker-compose-tlsca.yaml](ht<span>tps://github.com/rupeshtr78/fabric/blob/master/scripts/docker-compose-tlsca.yaml)\n\nCopy the fabca/fabric.<span>com/tlsca-server/tls-ca-cert.pem to\n/crypto-config/ordererOrganizations/fabric.<span>com/tlsca directory.\n\nCopy the key file from fabca/fabric.<span>com/tlsca-server/msp/keystore to\n./crypto-config/ordererOrganizations/fabric.<span>com/tlsca/tlsca.fabric.<span>com-key.pem.\n\nAfter copy run the TLS CA container this time use the *fabric-ca-server*\n*start* command.Check the logs to verify the server start and its\nlistening to your the port 7150 in this case.\n\nAt this point the TLA CA server is listening on a secure socket, and can\nstart issuing TLS certificates.\n\nIf on different host machines the trusted root certificate for the TLS\nCA has to be copied to other host machines that will communicate with\nthis CA .\n\n**Orderer org TLS :***Enroll the TLS CA server admin and then register\norg identities with orderer org's TLS CA server*\n\n```\nRegister orderer org identities with the tls-ca\n\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto- \tconfig/ordererOrganizations/fabric.com/tlsca/tlsca.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/fabric.com/tlsca-admin\n\nfabric-ca-client enroll -d -u https://tls-ord-admin:tls-ord-adminpw@0.0.0.0:7150\n\nfabric-ca-client register -d \u2014 id.name orderer1.fabric.com \u2014 id.secret ordererPW \u2014 id.type orderer -u https://0.0.0.0:7150\n\nfabric-ca-client register -d \u2014 id.name Admin@fabric.com \u2014 id.secret ordereradminpw \u2014 id.type admin -u https://0.0.0.0:7150\n\nUse command fabric-ca-client identity list or Gui DB Browser for SQLite to verify the generated identities.\n```\n\n\n\n![DB Browser\nSQLite](images/sqlite.png)\n\nGoing forward you will notice we extensively use the\nFABRIC\\_CA\\_CLIENT\\_TLS\\_CERTFILES,FABRIC\\_CA\\_CLIENT\\_HOME environment\nvariables to point to the relevant server and client.\n\n**Peer org TLS:** *Enroll the TLS CA admin and then register identities\nwith perr org's TLS CA server*\n\nFollow the steps simialr to above to get the TLS CA for peer org\npo1.fabric.<span>com up and running.Refer\n[docker-compose-tlsca.yaml](ht<span>tps://github.com/rupeshtr78/fabric/blob/master/scripts/docker-compose-tlsca.yaml) from repo.After the fabric server is up and running\nexecute below scripts to register peer org identities\n\n```bash\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/tlsca/tlsca.po1.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/po1.fabric.com/tlsca-admin\n\nfabric-ca-client enroll -d -u https://tls-peer-admin:tls-peer-adminpw@0.0.0.0:7151\nfabric-ca-client register -d \u2014 id.name peer0.po1.fabric.com \u2014 id.secret peer0PW \u2014 id.type peer -u https://0.0.0.0:7151\n\nfabric-ca-client register -d \u2014 id.name peer1.po1.fabric.com \u2014 id.secret peer0PW \u2014 id.type peer -u https://0.0.0.0:7151\n\nfabric-ca-client register -d \u2014 id.name Admin@po1.fabric.com \u2014 id.secret po1AdminPW \u2014 id.type admin -u https://0.0.0.0:7151\n```\n\n\n\n**Certificate Authority (CA)**\\\nEach organization must have it's own Certificate Authority (CA) for\nissuing enrollment certificates.Follow the same set of steps that we\nfollowed for TLS CA for starting CA . Initiate and Start both the CA\nservers using\\\n[***docker-compose-rca.yaml***](ht<span>tps://github.com/rupeshtr78/fabric/blob/master/scripts/docker-compose-rca.yaml) ***up*** refer repo.At this point the CA server is\nlistening on a secure socket, and can start issuing cryptographic\nmaterial.\n\n**Orderer org CA:** *Enroll admin for the CA Server and register the\nOrderer and Admin user with the orderer org CA*\n\n```bash\nOrderer org :fabric\n\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/ca/ca.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/fabric.com/ca-admin\n\nfabric-ca-client enroll -d -u https://rca-orderer-admin:rca-orderer-adminpw@0.0.0.0:7152\n\nfabric-ca-client register -d \u2014 id.name orderer1.fabric.com \u2014 id.secret ordererpw \u2014 id.type orderer -u https://0.0.0.0:7152\n\nfabric-ca-client register -d \u2014 id.name Admin@fabric.com \u2014 id.secret ordereradminpw \u2014 id.type admin \u2014 id.attrs hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert\u201d -u https://0.0.0.0:7152\n```\n\n\n\n**Peer org CA:** *Enroll admin for the CA Server and register the peer0\n,peer1 and Admin user with the peer org CA*\n\n```bash\nPeer org :po1.fabric.com\n\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/ca/ca.po1.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/po1.fabric.com/ca-admin\n\nfabric-ca-client enroll -d -u https://rca-po1-admin:rca-po1-adminpw@0.0.0.0:7153\n\nfabric-ca-client register -d \u2014 id.name peer0.po1.fabric.com \u2014 id.secret peer1PW \u2014 id.type peer -u https://0.0.0.0:7153\n\nfabric-ca-client register -d \u2014 id.name peer1.po1.fabric.com \u2014 id.secret peer2PW \u2014 id.type peer -u https://0.0.0.0:7153\n\nfabric-ca-client register -d \u2014 id.name Admin@po1.fabric.com \u2014 id.secret po1AdminPW \u2014 id.type admin \u2014 id.attrs \u201chf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert\u201d -u https://0.0.0.0:7153\nfabric-ca-client register -d \u2014 id.name User1@po1.fabric.com \u2014 id.secret po1UserPW \u2014 id.type user -u https://0.0.0.0:7153\n\nUse command fabric-ca-client identity list or Gui DB Browser for SQLite to verify the generated identities.\n```\n\n\n\n**Enroll Peers**\n\nAdministrator for peer org po1.fabric.<span>com will enroll the peers with\nit's CA.If the machine running Peer is separate host the trusted root\ncertificate has to be copied to Peer's host machine. Acquiring of these\nsigning certificate is an out of band process.2 Enrollments are required\nas we are TLS enabled.One againt TLS CA and one with Root CA.\n\n**Enroll Peers with CA.**\n\nMake sure the MSP directory of the peer points to the right directory of\nyour model.As we are following cryptogen **template** model we are\npointing to the\npeerOrganizations/po1.fabric.<span>com/peers/peer0.po1.fabric.<span>com/msp. Change\nthe env variable FABRIC\\_CA\\_CLIENT\\_MSPDIR for each peers **MSP**\ndirectory and then enroll.You can pass **-M** in command for msp dir as\nwell.\n\n```bash\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/ca/ca.po1.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/po1.fabric.com/ca-admin\n\n#Peer0:\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/peers/peer0.po1.fabric.com/msp\nfabric-ca-client enroll -d -u https://peer0.po1.fabric.com:peer1PW@0.0.0.0:7153 \u2014 csr.hosts peer0.po1.fabric.com\n\n#Peer1\n\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/peers/peer1.po1.fabric.com/msp\nfabric-ca-client enroll -d -u https://peer1.po1.fabric.com:peer2PW@0.0.0.0:7153 \u2014 csr.hosts peer1.po1.fabric.com\n\nVerify the generation of certificates in msp/cacerts , keystore , signcerts for each peer\u2019s MSP directory.We just generated the local peer MSP.\n```\n\n\n\n![Peer Local\nMSP](images/localmsp.png)\n\n**Enroll and Get the TLS cryptographic material for the peers**.\n\nWe will point to the TLS CA cert and TLS Client Home for getting tls\ncerts.MSP directory here will be the peers **tls** directory.\n\ncrypto-config/peerOrganizations/po1.fabric.<span>com/peers/peer0.po1.fabric.<span>com/**tls**\n\n```bash\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/tlsca/tlsca.po1.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/po1.fabric.com/tlsca-admin\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/peers/peer0.po1.fabric.com/tls\n\nfabric-ca-client enroll -d -u https://peer0.po1.fabric.com:peer0PW@0.0.0.0:7151 \u2014 enrollment.profile tls \u2014 csr.hosts peer0.po1.fabric.com\n\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/peers/peer1.po1.fabric.com/tls\n\n# peer1\nfabric-ca-client enroll -d -u https://peer1.po1.fabric.com:peer0PW@0.0.0.0:7151 \u2014 enrollment.profile tls \u2014 csr.hosts peer1.po1.fabric.com\n```\n\n\n\n**Verify certificates** are generated in the peers **tls** directory\ntls/keystore , signcerts ,tlscacerts.Rename keystore private key to\nkey.pem for ease of reference later on.\n\n![Peer\nTLS](images/peertls.png)\n\n**Enroll peer org Admin User with CA**\\\nThe admin identity is responsible for activities such as installing and\ninstantiating chaincode. The commands below has to be executed on Peer's\nhost machine if on seperate host.Admin user's MSP directory in our model\nis peerOrganizations/po1.fabric.<span>com/user/Admin\\@po1.fabric.<span>com/msp\n\n```bash\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/ca/ca.po1.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/po1.fabric.com/ca-admin\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/users/Admin@po1.fabric.com/msp\n\nfabric-ca-client enroll -d -u https://Admin@po1.fabric.com:po1AdminPW@0.0.0.0:7153\n```\n\n\n\n**AdminCerts**: As per user guide An identity becomes an \"ADMIN\" role by\n**adding the public certificate to the \"admincerts\" folder of the\nMSP**.You can manually copy signcerts to admin certs or run below store\ncommand.\n\n```bash\nfabric-ca-client certificate list \u2014 id Admin@po1.fabric.com \u2014 store $FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/users/Admin@po1.fabric.com/msp/admincerts\n```\n\n\n\nAfter enrollment, we should have an admin MSP.\\\nCopy the **admincerts** certificate ***Admin\\@po1.fabric.<span>com.pem*** from this\nAdmin user MSP and move it to the Peer's MSP in the 'admincerts'\ndirectory. Copy this admin certificate to other peers in the org , use\nidentity command above or copy to the 'admincerts' directory in each\npeers' MSP.\n\n**Enroll and Get the TLS cryptographic material for the Admin User**\\\nEnroll against the TLS CA using Tls cert and home.\\\n\n```bash\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/tlsca/tlsca.po1.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/po1.fabric.com/tlsca-admin\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/users/Admin@po1.fabric.com/tls\n\nfabric-ca-client enroll -d -u https://Admin@po1.fabric.com:po1AdminPW@0.0.0.0:7151 \u2014 enrollment.profile tls\n\nAt this point we can test run our peers : docker-compose -f docker-compose-cli.yaml up peer0.po1.fabric.com\n```\n\n\n\n**Enroll Orderer with CA :** Enroll orderer1.fabric.<span>com and\nAdmin\\@fabric.<span>com with the CA\n\n```bash\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/ca/ca.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/fabric.com/ca-admin\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/orderers/orderer1.fabric.com/msp\n\nfabric-ca-client enroll -d -u https://orderer1.fabric.com:ordererpw@0.0.0.0:7152\n\n# Enroll Orderer\u2019s Admin User\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/users/Admin@fabric.com/msp\n\nfabric-ca-client enroll -d -u https://Admin@fabric.com:ordereradminpw@0.0.0.0:7152\n\n# Generate AdminCerts\nfabric-ca-client identity list\nfabric-ca-client certificate list \u2014 id Admin@fabric.com \u2014 store $FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/users/Admin@fabric.com/msp/admincerts\n\n# Copy Users AdminCerts to Orderer MSP AdminCerts Directory\ncp $FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/users/Admin@fabric.com/msp/admincerts/*.pem $FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/orderers/orderer1.fabric.com/msp/admincerts\n\n# rename keystore = key.pem\n```\n\n\n\n**Enroll Orderer with TLS CA**\n\n```bash\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/tlsca/tlsca.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/fabric.com/tlsca-admin\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/orderers/orderer1.fabric.com/tls\n\nfabric-ca-client enroll -d -u https://orderer1.fabric.com:ordererPW@0.0.0.0:7150 \u2014 enrollment.profile tls \u2014 csr.hosts orderer1.fabric.com\n\n# Enroll Orderer\u2019s Admin User\n\nexport FABRIC_CA_CLIENT_MSPDIR=$FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/users/Admin@fabric.com/tls\n\nfabric-ca-client enroll -d -u https://Admin@fabric.com:ordereradminpw@0.0.0.0:7150 \u2014 enrollment.profile tls \u2014 csr.hosts orderer1.fabric.com\n\n# rename keystore -sk= key.pem\n```\n\n\n\n**Create Genesis Block and Channel Transaction artifacts**\n\nBefore generating genesis block we need the MSP directories of all the\norgs on the orderer host machine.Each org should have MSP directory in\nthe following structure:\n\n![MSP](images/msp-str.png)\n\n> The MSP for an Org will contain\\\n> 1. admincerts : The certificate of the Org's admin identity\n> 2. cacerts: The trusted root certificate of Org's CA\\\n> 3. tlscacerts: The trusted root certificate of the Org's TLS CA.\n>\n> On the Orderer's host machine, we need to collect the MSPs for each of\n> the organizations based on the above structure\n\n**Generate Orderer Org MSP**\n\n```\n# cacerts \u2014 orderer\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/ca/ca.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/fabric.com/ca-admin\nfabric-ca-client getcacert -u https://0.0.0.0:7152 -M $FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/msp\n\n# AdminCerts \u2014 orderer\nfabric-ca-client identity list\nfabric-ca-client certificate list \u2014 id Admin@fabric.com \u2014 store $FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/msp/admincerts\n\n# tlscacerts \u2014 orderer\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/tlsca/tlsca.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/fabric.com/tlsca-admin\nfabric-ca-client getcacert -u https://0.0.0.0:7150 -M $FABRIC_CFG_PATH/crypto-config/ordererOrganizations/fabric.com/msp \u2014 enrollment.profile tls\n```\n\n\n\n**Generate Peer Org MSP**\n\n```bash\n# cacerts \u2014 peer org\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/ca/ca.po1.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/po1.fabric.com/ca-admin\nfabric-ca-client getcainfo -u https://0.0.0.0:7153 -M $FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/msp\n\n# AdminCerts \u2014 peer org\nfabric-ca-client identity list\nfabric-ca-client certificate list \u2014 id Admin@po1.fabric.com \u2014 store $FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/msp/admincerts\n\n# tlscacerts \u2014 peer org\nexport FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/tlsca/tlsca.po1.fabric.com-cert.pem\nexport FABRIC_CA_CLIENT_HOME=$FABRIC_CFG_PATH/fabca/po1.fabric.com/tlsca-admin\nfabric-ca-client getcacert -u https://0.0.0.0:7151 -M $FABRIC_CFG_PATH/crypto-config/peerOrganizations/po1.fabric.com/msp \u2014 enrollment.profile tls\n```\n\n\n\nThe above steps should generate the model similar to the [**directory\ntree**](ht<span>tps://github.com/rupeshtr78/fabric/blob/master/logs/tree-crypto-config.txt) in repo.\n\n**Generate Orderer Genesis block and channel artifacts**: \n---------------------------------------------------------\n\nCreate\n[configtx.yaml](ht<span>tps://github.com/rupeshtr78/fabric/blob/master/configtx.yaml) file as per your model.\n\n```bash\ncd $FABRIC_CFG_PATH\n# Create the orderer genesis.block\nconfigtxgen -profile OneOrgsOrdererGenesis -channelID rtr-sys-channel -outputBlock $FABRIC_CFG_PATH/channel-artifacts/genesis.block\nconfigtxgen -inspectBlock ./channel-artifacts/genesis.block > logs/genesisblock.txt\n\n# Create channel.tx\nexport CHANNEL_NAME=fabchannel01\nconfigtxgen -profile OneOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME\nconfigtxgen -inspectChannelCreateTx ./channel-artifacts/channel.tx > logs/channel.txt\n# Update anchor peers\nconfigtxgen -profile OneOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/po1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg po1MSP\n```\n\n\n\n**Start the services**\n\nLets start services one by one :- Start the Orderer : [docker-compose -f\ndocker-compose-cli.yaml up orderer1.fabric.<span>com](ht<span>tps://github.com/rupeshtr78/fabric/blob/master/docker-compose-cli.yaml)\n\n\n\n![](images/orderer-starts.png)\n\n\u200b                                                                          *Orderer Start*\n\n![Peer Start Gossip Protocol\nWorking](images/peer-start.png)\n\n\u200b\t                                                                            *Peer Start*\n\n\u200b                                   \n\n**Create and join Channel**\n\n```bash\nexport CHANNEL_NAME=fabchannel01\n\npeer channel create -c $CHANNEL_NAME -f /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/channel.tx -o orderer1.fabric.com:7050 \u2014 outputBlock /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/fabchannel01.block \u2014 tls \u2014 cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fabric.com/users/Admin@fabric.com/tls/tlscacerts/tls-0\u20130\u20130\u20130\u20137150.pem 60s\n\npeer channel join -b /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/fabchannel01.block 30s\n```\n\n\n\n![Peer Join](images/peer-join.png)\n\n\u200b\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*ChainCode Install*\n\n```\nInstall and Instantiate Chaincode\n\npeer chaincode install -n mycc -v 1.0 -p github.com/chaincode/abac/go\n\npeer chaincode instantiate -C $CHANNEL_NAME -n mycc -v 1.0 -c \u2018{\u201cArgs\u201d:[\u201cinit\u201d,\u201da\u201d, \u201c100\u201d, \u201cb\u201d,\u201d200\"]}\u2019 -o orderer1.fabric.com:7050 \u2014 tls \u2014 cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fabric.com/users/Admin@fabric.com/tls/tlscacerts/tls-0\u20130\u20130\u20130\u20137150.pem 60s\n```\n\n\n\n![Chaincode\nInstantiate](images/cacc-Instantiate.png)\n\n\u200b                                                                             *ChainCode Instantiate*\n\n![Chaincode\nInvoke](images/cacc-invoke.png)\n\n\u200b\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t *ChainCode Invoke*\n\n![Chaincode\nQuery](images/ca-cc-query.png)\n\n\u200b\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*ChainCode Query*\n\n![peer channel fetch newest \n](images/peer-fetch-png.png)\n\nThis post simulated the deployment using docker containers.\nFor deployment on different hosts , you will need to get the signing\ncertificate on each of those hosts through an out-of-band process.\n\nThe network configuration for this project assumes that all containers\nare running in the same network. If your deployment uses different\nnetworks, make relevant adjustments to work with your network configurations.\n"
 },
 {
  "repo": "kingpong/ruby-mcrypt",
  "language": "Ruby",
  "readme_contents": "= Mcrypt - libmcrypt bindings for Ruby\n\nMcrypt provides Ruby-language bindings for libmcrypt(3), a\nsymmetric cryptography library. {Libmcrypt}[http://mcrypt.sourceforge.net/]\nsupports lots of different ciphers and encryption modes.\n\n== You will need\n\n* A working Ruby installation (>= 1.8.6 or 1.9)\n* A working libmcrypt installation (2.5.x or 2.6.x, tested with 2.5.8)\n* A sane build environment\n\n== Installation\n\nInstall the gem:\n  gem install ruby-mcrypt --test -- --with-mcrypt-dir=/path/to/mcrypt/prefix\n\nIf you're installing on Ubuntu: \n  sudo apt-get install mcrypt libmcrypt-dev\n  gem install ruby-mcrypt\n\nIf you want to run the longer test suite, do this instead:\n  MCRYPT_TEST_BRUTE=1 \\\n  gem install ruby-mcrypt --test -- --with-mcrypt-dir=/path/to/mcrypt/prefix\n\nPut this in your code:\n  require 'rubygems'\n  require 'mcrypt'\n\nOr in Rails' environment.rb:\n  gem \"ruby-mcrypt\", :lib => \"mcrypt\"\n\n== Usage\n\n  crypto = Mcrypt.new(:twofish, :cbc, MY_KEY, MY_IV, :pkcs)\n\n  # encryption and decryption in one step\n  ciphertext = crypto.encrypt(plaintext)\n  plaintext  = crypto.decrypt(ciphertext)\n\n  # encrypt in smaller steps\n  while chunk = $stdin.read(4096)\n    $stdout << crypto.encrypt_more(chunk)\n  end\n  $stdout << crypto.encrypt_finish\n\n  # or decrypt:\n  while chunk = $stdin.read(4096)\n    $stdout << crypto.decrypt_more(chunk)\n  end\n  $stdout << crypto.decrypt_finish\n\n== Known Issues\n\n* Test coverage is lacking.\n\nIf you find any bugs, please let the author know.\n\n== Wish List\n\n* IO-like behavior, e.g. crypto.open($stdin) { |stream| ... }\n\n== Author\n\n* Philip Garrett <philgarr at gmail.com>\n\n== Copyright and License\n\nCopyright (c) 2009-2013 Philip Garrett.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
 },
 {
  "repo": "pfrazee/nodevms",
  "language": "JavaScript",
  "readme_contents": "# NodeVMS alpha\n\nA cryptographically auditable VM service using Nodejs and [Dat](https://github.com/datproject/dat). NodeVMS provides:\n\n - Easy deployment of backend scripts on a NodeVMS host.\n - RPC connectivity to backend scripts using Websockets.\n - Trustless execution of the backend through cryptographic auditing (you do not need to trust the NodeVMS host).\n\n[Learn more at nodevms.com](https://nodevms.com).\n\nSee also:\n\n - [LibVMS](https://github.com/pfrazee/libvms)\n - [Example Scripts](./examples)\n - [What is the Dat protocol?](https://beakerbrowser.com/docs/inside-beaker/)\n\n### TODOs\n\nStill an alpha / prototype.\n\n - [x] CLI\n - [x] VM execution and environment\n - [x] RPC server, client repl\n - [x] Debugmode authentication\n - [x] Call log replay and verification\n - [ ] Production authentication & signed RPC calls\n - [ ] Secure VM\n - [ ] Oracles"
 },
 {
  "repo": "Evian-Zhang/Introduction-to-modern-cryptography",
  "language": "TeX",
  "readme_contents": "# \u73b0\u4ee3\u5bc6\u7801\u5b66\u7b80\u4ecb\n\n## \u5168\u6587 PDF\n\n\u672c\u4e66\u7684\u5168\u6587 PDF \u53ef\u5728[\u73b0\u4ee3\u5bc6\u7801\u5b66\u7b80\u4ecb.pdf](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/blob/master/\u73b0\u4ee3\u5bc6\u7801\u5b66\u7b80\u4ecb.pdf)\u4e2d\u4e0b\u8f7d\u3002\u672c\u4e66\u7684 tex \u6e90\u4ee3\u7801\u53ef\u5728\u672c\u4ed3\u5e93\u4e2d([Evian-Zhang/Introduction-to-modern-cryptography](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography))\u4e2d\u627e\u5230\u3002\u672c\u4e66\u5185\u6240\u6709\u7684\u4ee3\u7801\u53ef\u5728\u672c\u4ed3\u5e93\u4e2d\u7684 `algorithms` \u76ee\u5f55\u4e0b\u627e\u5230([Evian-Zhang/Introduction-to-modern-cryptography/algorithms](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/tree/master/algorithms/))\u3002\n\n## \u73b0\u6709\u7ae0\u8282\n\n### \u7b2c\u4e00\u7ae0 \u7eea\u8bba\n\n\u672c\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5bc6\u7801\u5b66\u4e2d\u7684\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\uff0c\u5982\u5bc6\u94a5\u7b49\uff0c\u4ee5\u53ca\u5bc6\u7801\u4f53\u5236\u3001\u53ef\u8bc1\u660e\u5b89\u5168\u7684\u7b80\u4ecb\u3001Kerckhoff\u51c6\u5219\u7b49\u3002\u6b64\u5916\uff0c\u8fd8\u4ecb\u7ecd\u4e86\u5982\u51ef\u6492\u5bc6\u7801\u3001\u4e00\u6b21\u4e00\u5bc6\u7b49\u7ecf\u5178\u5bc6\u7801\u3002\n\n\u672c\u7ae0\u7684 tex \u6e90\u7801\u53ef\u5728[Evian-Zhang/Introduction-to-modern-cryptography/chapters/chapter_1](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/tree/master/chapters/chapter_1/)\u4e2d\u627e\u5230\u3002\n\n### \u7b2c\u4e8c\u7ae0 \u6d41\u5bc6\u7801\u4e0e\u4f2a\u968f\u673a\u6570\u53d1\u751f\u5668\n\n\u672c\u7ae0\u9996\u5148\u4ecb\u7ecd\u4e86\u6d41\u5bc6\u7801\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7136\u540e\u4ecb\u7ecd\u4e86\u57fa\u4e8eLFSR\u7684\u4f2a\u968f\u673a\u6bd4\u7279\u53d1\u751f\u5668\u3001BBS\u4f2a\u968f\u673a\u6bd4\u7279\u53d1\u751f\u5668\u3001ANSI X9.17\u4f2a\u968f\u673a\u6570\u53d1\u751f\u5668\u3002\n\n\u672c\u7ae0\u7684 tex \u6e90\u7801\u53ef\u5728[Evian-Zhang/Introduction-to-modern-cryptography/chapters/chapter_2](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/tree/master/chapters/chapter_2/)\u4e2d\u627e\u5230\u3002\n\n### \u7b2c\u4e09\u7ae0 \u5206\u7ec4\u5bc6\u7801\n\n\u672c\u7ae0\u4ecb\u7ecd\u4e86\u5206\u7ec4\u5bc6\u7801\u7684\u8bbe\u8ba1\u51c6\u5219\u3001\u8fd0\u884c\u6a21\u5f0f\uff0c\u4ee5\u53caDES, IDEA, AES\u7b49\u7ecf\u5178\u7684\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u3002\n\n\u672c\u7ae0\u7684 tex \u6e90\u7801\u53ef\u5728[Evian-Zhang/Introduction-to-modern-cryptography/chapters/chapter_3](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/tree/master/chapters/chapter_3/)\u4e2d\u627e\u5230\u3002\n\n### \u7b2c\u56db\u7ae0 \u516c\u94a5\u5bc6\u7801\n\n\u672c\u7ae0\u4ecb\u7ecd\u4e86\u516c\u94a5\u5bc6\u7801\uff0c\u5982RSA\u5bc6\u7801\uff0c\u4ee5\u53caElGamal\u5bc6\u7801\u3002\n\n\u672c\u7ae0\u7684 tex \u6e90\u7801\u53ef\u5728[Evian-Zhang/Introduction-to-modern-cryptography/chapters/chapter_4](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/tree/master/chapters/chapter_4/)\u4e2d\u627e\u5230\u3002\n\n### \u7b2c\u4e94\u7ae0 \u54c8\u5e0c\u7b97\u6cd5\n\n\u672c\u7ae0\u4ecb\u7ecd\u4e86\u54c8\u5e0c\u7b97\u6cd5\u7684 Merkle-Damg\u00e5rd \u7ed3\u6784\uff0c\u4ee5\u53caMD5\u548cSHA-256\u54c8\u5e0c\u7b97\u6cd5\u3002\n\n\u672c\u7ae0\u7684 tex \u6e90\u7801\u53ef\u5728[Evian-Zhang/Introduction-to-modern-cryptography/chapters/chapter_5](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/tree/master/chapters/chapter_5/)\u4e2d\u627e\u5230\u3002\n\n### \u7b2c\u516d\u7ae0 \u6d88\u606f\u8ba4\u8bc1\u7801\n\n\u672c\u7ae0\u4ecb\u7ecd\u4e86\u6d88\u606f\u8ba4\u8bc1\u7801\u7684\u4e09\u79cd\u7c7b\u578b\uff0c\u4ee5\u53caPoly1305\u7b97\u6cd5\u7684\u7ec6\u8282\uff0c\u540c\u65f6\u4e5f\u4ecb\u7ecd\u4e86\u8ba4\u8bc1\u52a0\u5bc6\u7684\u8fc7\u7a0b\u3002\n\n\u672c\u7ae0\u7684 tex \u6e90\u7801\u53ef\u5728[Evian-Zhang/Introduction-to-modern-cryptography/chapters/chapter_6](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/tree/master/chapters/chapter_6/)\u4e2d\u627e\u5230\u3002\n\n### \u7b2c\u4e03\u7ae0 \u6570\u5b57\u7b7e\u540d\n\n\u672c\u7ae0\u4ecb\u7ecd\u4e86\u6570\u5b57\u7b7e\u540d\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u4ee5\u53caDSA\u7b97\u6cd5\u3002\n\n\u672c\u7ae0\u7684 tex \u6e90\u7801\u53ef\u5728[Evian-Zhang/Introduction-to-modern-cryptography/chapters/chapter_7](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/tree/master/chapters/chapter_7/)\u4e2d\u627e\u5230\u3002\n\n### \u7b2c\u516b\u7ae0 \u5b89\u5168\u534f\u8bae\n\n\u672c\u7ae0\u4ecb\u7ecd\u4e86\u5b89\u5168\u534f\u8bae\uff0c\u4ee5\u53ca\u5bf9\u79f0\u5bc6\u7801\u3001\u975e\u5bf9\u79f0\u5bc6\u7801\u7684\u5bc6\u94a5\u5206\u914d\u3001\u5bc6\u94a5\u7ba1\u7406\u65b9\u6cd5\u3002\n\n\u672c\u7ae0\u7684 tex \u6e90\u7801\u53ef\u5728[Evian-Zhang/Introduction-to-modern-cryptography/chapters/chapter_8](https://github.com/Evian-Zhang/Introduction-to-modern-cryptography/tree/master/chapters/chapter_8/)\u4e2d\u627e\u5230\u3002"
 },
 {
  "repo": "coyim/otr3",
  "language": "Go",
  "readme_contents": "# OTR3 \n\n[![Build Status](https://github.com/coyim/otr3/workflows/OTR3%20CI/badge.svg)](https://github.com/coyim/otr3/actions?query=workflow%3A%22OTR3+CI%22)\n[![Coverage Status](https://coveralls.io/repos/coyim/otr3/badge.svg?branch=main&service=github)](https://coveralls.io/github/coyim/otr3?branch=main)\n[![Go Report Card](https://goreportcard.com/badge/github.com/coyim/otr3)](https://goreportcard.com/report/github.com/coyim/otr3)\n\nImplements version 3 of the OTR standard. Implements feature parity with libotr 4.1.0.\n\n## API Documentation\n\n[![GoDoc](https://godoc.org/github.com/coyim/otr3?status.svg)](https://godoc.org/github.com/coyim/otr3)\n\n## Developing\n\nBefore doing any work, if you want to separate out your GOPATH from other projects, install direnv\n```\n$ brew update\n$ brew install direnv\n$ echo 'eval \"$(direnv hook bash)\"' >> ~/.bashrc\n```\nThen, create a symbolic link to the OTR3 repository\n```\nln -s /PathToMyGoPackages/.gopkgs/otr3/src/github.com/coyim/ .\n```\n\nInstall all dependencies:\n\n``\n./deps.sh\n``\n"
 },
 {
  "repo": "iam-raihan/3DES-ECB-Cryptography-in-PHP",
  "language": "PHP",
  "readme_contents": ""
 },
 {
  "repo": "ZK-Garage/plonk",
  "language": "Rust",
  "readme_contents": "# PLONK\n[![CI checks](https://github.com/ZK-Garage/plonk/actions/workflows/ci.yml/badge.svg)](https://github.com/ZK-Garage/plonk/actions/workflows/ci.yml)\n[![Repository](https://img.shields.io/badge/github-plonk-blueviolet?logo=github)](https://github.com/ZK-Garage/plonk)\n[![Documentation](https://img.shields.io/badge/docs-plonk-blue?logo=rust)](https://docs.rs/plonk/)\n\n_This is a pure rust implementation of various zkp components by the [ZK-Garage](https://github.com/ZK-Garage) team_\n\n## About\nThis a library currently contains several modules\n\nThe `plonk-core` module is an implemention of the PLONK proving system, that leverages custom gates and lookups to significantly enhance performance and lower constraint count to optimise the generation of zero knowledge proofs. The backend of the `plonk-core` module is designed to be compatible with the [arkworks](https://github.com/arkworks-rs) suite. By leveraging the operations in arkworks we have optimised algebra and generic trait abstractions for curve types, allowing users to define their SNARK over different curves and, if applicabale, utilise embedded or pairing curves. The polynomial commitment scheme is also generic, which allows users to implement differing PCSs dependent upon particular needs.\n\nThe `plonk-hashing` module is set to contain several hashing algorithms, commencing with an optimised implementation of the Poseidon hashing algorithm generic for both plonk-style arithmetic representation and R1CS. Which will be extended but not limited to Reinforced Concrete and Blake2s.\n\nThe `plonk-book` is a module which contains a detailed overview of the working parts within a EC based ZKP system, with explanation of some of the characteristics particular to PLONK, e.g. Lagrange bases. There is a also a chapter on the construction of the PLONK algorithms, as well as an explanation of the implementations features and details specific to this repository.\n### Compile the Plonk book\nFirst, you need to install mdbook command line tool used to create books with Markdown.\n\n```cargo install mdbook```\n\n\n\nYou should also install Katex preprocessor which renders Latex equations into HTML at build time\n\n```cargo install --git \"https://github.com/lzanini/mdbook-katex\"```\n\n\nThen, you build the book as follows:\n\n```mdbook build```\n\nLast but not least, you can read the book by doing this command\n\n```mdbook serve --open```\n\nThis will display the book in your default web browser after building it.\n\n\n\n### Join the effort\n\nPlease, if you're interested in collaborating, contributing or just discussing, you can join our Discord here: <https://discord.gg/XWJdhVf37F>\n\n## Features\n\nThis crate includes a variety of features which will briefly be explained below:\n\n- `parallel`: Enables `rayon` and other parallelisation primitives to be used and speed up some of the algorithms used by the crate and it's dependencies.\n\n- `asm`: Enables inline-assembly implementations for some of the internal algorithms and primitives used by the `arkworks` dependencies of the crate.\n\n- `trace`: Enables the Circuit debugger tooling. This is essentially the capability of using the `StandardComposer::check_circuit_satisfied` function. The function will output information about each circuit gate until one of the gates does not satisfy the equation, or there are no more gates. If there is an unsatisfied gate equation, the function will panic and return the gate number.\n\n- `trace-print`: Goes a step further than `trace` and prints each `gate` component data, giving a clear overview of all the values which make up the circuit that we're constructing. __The recommended method is to derive the std output, and the std error, and then place them in text file which can be used to efficiently analyse the gates.__\n\n## Documentation\n\nThere are two main types of documentation in this repository:\n\n- **Crate documentation**. This provides info about all of the functions that the library provides, as well\n  as the documentation regarding the data structures that it exports. To check this, please feel free to go to\n  the [documentation page](https://docs.rs/ark-plonk/) or run `make doc` or `make doc-internal`.\n\n- **Notes**. This is a specific subset of documentation which explains the key mathematical concepts\n  of PLONK and how they work with mathematical demonstrations. To check it, run `make doc` and open the resulting docs,\n  which will be located under `/target/doc/plonk/index.html` with your browser.\n\n  **Examples**. Examples can be found in the `examples` folder. Run them, e.g., via `cargo run --example simple_circuit`.\n\n## Performance\n\nBenches taken running: `RUSTFLAGS='-C target-cpu=native' cargo bench` with an `AMD Ryzen 7 3700X`\nThese benches use the `Bls12-381` curve.\n\nUsing `KZG10` commitments:\n```\nCompile:\n2^5         [    17.632 ms      17.669 ms      17.696 ms]\n2^6         [    22.666 ms      22.702 ms      22.747 ms]\n2^7         [    29.618 ms      29.653 ms      29.719 ms]\n2^8         [    47.467 ms      47.556 ms      47.609 ms]\n2^9         [    65.458 ms      65.786 ms      66.174 ms]\n2^10        [    97.172 ms      97.514 ms      97.897 ms]\n2^11        [   167.89  ms     168.17  ms     168.41  ms]\n2^12        [   314.51  ms     314.65  ms     314.78  ms]\n2^13        [   526.59  ms     527.63  ms     529.18  ms]\n2^14        [ 1.0238     s   1.0253     s   1.0272     s]\n2^15        [ 2.0029     s   2.0088     s   2.0143     s]\n2^16        [ 3.7727     s   3.7846     s   3.7955     s]\n2^17        [ 6.7340     s   6.7523     s   6.7700     s]\n2^18        [13.584      s  13.613      s  13.640      s]\n\nProve:\n2^5         [    16.172 ms      16.208 ms      16.264 ms]\n2^6         [    21.676 ms      21.712 ms      21.748 ms]\n2^7         [    29.493 ms      29.545 ms      29.613 ms]\n2^8         [    48.970 ms      49.039 ms      49.104 ms]\n2^9         [    72.251 ms      72.533 ms      72.703 ms]\n2^10        [   128.89  ms     130.71  ms     132.10  ms]\n2^11        [   242.91  ms     247.74  ms     252.29  ms]\n2^12        [   455.79  ms     459.45  ms     462.85  ms]\n2^13        [   776.94  ms     781.89  ms     787.94  ms]\n2^14        [ 1.4752     s   1.4824     s   1.4893     s]\n2^15        [ 2.8589     s   2.8682     s   2.8787     s]\n2^16        [ 5.4610     s   5.4766     s   5.4927     s]\n2^17        [10.078      s  10.118      s  10.159      s]\n2^18        [20.151      s  20.184      s  20.216      s]\n\nVerify:\n2^5         [    5.5250 ms      5.5560 ms      5.5983 ms]\n2^6         [    5.4933 ms      5.5461 ms      5.5910 ms]\n2^7         [    5.5678 ms      5.6002 ms      5.6247 ms]\n2^8         [    5.5391 ms      5.5756 ms      5.6027 ms]\n2^9         [    5.5421 ms      5.5648 ms      5.5929 ms]\n2^10        [    5.5423 ms      5.5825 ms      5.6240 ms]\n2^11        [    5.5269 ms      5.5576 ms      5.6027 ms]\n2^12        [    5.5624 ms      5.6081 ms      5.6623 ms]\n2^13        [    5.6288 ms      5.6656 ms      5.6914 ms]\n2^14        [    5.6068 ms      5.6186 ms      5.6292 ms]\n2^15        [    5.5930 ms      5.6241 ms      5.6543 ms]\n2^16        [    6.0845 ms      6.1324 ms      6.1745 ms]\n2^17        [    6.5760 ms      6.5896 ms      6.6030 ms]\n2^18        [    8.1152 ms      8.1481 ms      8.1710 ms]\n```\nUsing `IPA` commitments:\n```\nCompile:\n2^5         [    16.768 ms      16.818 ms      16.857 ms]\n2^6         [    21.958 ms      21.977 ms      21.993 ms]\n2^7         [    28.847 ms      28.869 ms      28.903 ms]\n2^8         [    47.626 ms      47.660 ms      47.693 ms]\n2^9         [    67.319 ms      67.485 ms      67.674 ms]\n2^10        [    98.526 ms      98.891 ms      99.072 ms]\n2^11        [   171.84  ms     172.06  ms     172.25  ms]\n2^12        [   322.42  ms     322.55  ms     322.69  ms]\n2^13        [   533.50  ms     533.95  ms     534.53  ms]\n2^14        [ 1.0333     s   1.0342     s   1.0351     s]\n2^15        [ 2.0156     s   2.0240     s   2.0308     s]\n2^16        [ 3.8668     s   3.8769     s   3.8871     s]\n2^17        [ 6.8066     s   6.8259     s   6.8506     s]\n2^18        [13.757      s  13.773      s  13.788      s]\n\nProve:\n2^5         [    32.205 ms      32.802 ms      33.418 ms]\n2^6         [    39.419 ms      39.479 ms      39.550 ms]\n2^7         [    53.665 ms      53.767 ms      53.876 ms]\n2^8         [    83.829 ms      84.005 ms      84.171 ms]\n2^9         [   127.58  ms     127.85  ms     128.11  ms]\n2^10        [   207.01  ms     208.50  ms     210.09  ms]\n2^11        [   397.91  ms     400.53  ms     403.63  ms]\n2^12        [   719.49  ms     725.85  ms     732.68  ms]\n2^13        [ 1.2864     s   1.2912     s   1.2953     s]\n2^14        [ 2.4494     s   2.4552     s   2.4620     s]\n2^15        [ 4.7411     s   4.7617     s   4.7826     s]\n2^16        [ 9.1925     s   9.2148     s   9.2360     s]\n2^17        [17.499      s  17.584      s  17.660      s]\n2^18        [35.019      s  35.084      s  35.138      s]\n\nVerify:\n2^5         [    7.9861 ms      8.0159 ms      8.0433 ms]\n2^6         [    8.9787 ms      9.0031 ms      9.0272 ms]\n2^7         [   10.648  ms     10.675  ms     10.714  ms]\n2^8         [   13.466  ms     13.526  ms     13.596  ms]\n2^9         [   17.140  ms     17.188  ms     17.267  ms]\n2^10        [   25.379  ms     25.574  ms     25.785  ms]\n2^11        [   34.424  ms     37.413  ms     38.720  ms]\n2^12        [   39.254  ms     39.429  ms     39.595  ms]\n2^13        [   69.872  ms     70.392  ms     70.790  ms]\n2^14        [  130.16   ms    130.93   ms    131.90   ms]\n2^15        [  243.71   ms    246.59   ms    249.40   ms]\n2^16        [  409.56   ms    415.00   ms    419.81   ms]\n2^17        [  777.07   ms    789.39   ms    801.28   ms]\n2^18        [1.4931      s  1.4999      s  1.5065      s]\n```\n\n## Acknowledgements\n\n- Reference [implementation](https://github.com/AztecProtocol/barretenberg) by Aztec Protocol\n- Initial [implementation](https://github.com/kobigurk/plonk/tree/kobigurk/port_to_zexe) of PLONK with arkworks backend was done years before this lib existed by Kobi Gurkan\n- Initial rust [implementation](https://github.com/dusk-network/plonk) of PLONK by Dusk Network, originally forked from dusk-network/plonk\n\n## Licensing\n\nThis software is distributed under the terms of Mozilla Public License Version 2.0 (MPL-2.0). Please see [LICENSE](https://github.com/ZK-Garage/plonk/blob/master/LICENSE) for further info.\n\n## Contributing\n- If you want to contribute to this repository/project please, check [CONTRIBUTING.md](./CONTRIBUTING.md)\n- If you want to report a bug or request a new feature addition, please open an issue on this repository.\n"
 },
 {
  "repo": "merklecounty/rget",
  "language": "Go",
  "readme_contents": "# rget\n\n**Archived Project Warning**: rget is archived. Architectual issues made the project unmaintainable longterm ([see issue](https://github.com/merklecounty/rget/issues/42)). The rearchitected spiritual successor is under development: see [transparencylog/btget](https://github.com/transparencylog/btget).\n\n`rget` downloads URLs and verifies the contents against a publicly recorded cryptographic log. The public log gives users of rget a number of useful properties:\n\n- Verifiability of a downloaded URL's contents being identical to what the rest of the world sees\n- Searchability of recorded content changes of a URL\n- Notifications to any interested party about changes to the URLs contents\n\nIn practice the way the system works is a URL owner will publish the cryptographic digests at a URL adjacent to the content a `rget` user is downloading. The `rget` tool will download the digest and verify this digest appears in the Certificate Transparency log via a specially crafted DNS name.\n\nLearn more and stay up to date with the [project blog and newsletter](https://merklecounty.substack.com/). Checkout some of the blog posts:\n\n- [rget: a secure download user story](https://merklecounty.substack.com/p/rget-a-secure-download-user-story)\n\n## Installation\n\nDownload the appropriate release from https://github.com/merklecounty/rget/releases and extract the archive\n\n## Example Usage\n\nUse rget to download the v3.4.2 [etcd](https://etcd.io) release for macOS and verify that the contents are publicly recorded.\n\n```\nrget https://github.com/etcd-io/etcd/releases/download/v3.4.2/etcd-v3.4.2-darwin-amd64.zip\n```\n\n## Developer Usage\n\n### GitHub Developer Usage\n\nIt takes two commands to make a release available for verified download with rget:\n\n```\nrget github publish-release-sums https://github.com/merklecounty/rget/releases/tag/v0.0.6\n```\n\nThe first command will start a local web server and open a Github authorization URL\nin your browser. You will have 120 seconds to authorize it.\n\nWhen authorized, it will calculate SHA256 sums for every file in the release,\ncreate a `SHA256SUMS` file, and add it to the Github release.\n\n```\nrget submit https://github.com/merklecounty/rget/releases/download/v0.0.6/SHA256SUMS\n```\n\nThe second command will submit the sums to the log. This does not use any GitHub credentials.\n\n**Note:** If a project has release automation that uploads to GitHub simply add\nthe creation of SHA256SUMS to the automation instead of using `github\npublish-release-sums` and call `rget submit` after uploading. See the\n[integrations doc](Documentation/integrations.md) for a list of tools that work\nout of the box. As an example `rget` uses [Go\nReleaser](https://goreleaser.com/) for automation.\n\n## Administration Usage\n\nRun a server that will upload SHA files to a git repo for file backing\n\n```\nrget server <public git repo> <private certificates git repo>\n```\n\n## FAQ\n\nIf you have a question that isn't answered here please [open an issue](https://github.com/merklecounty/rget/issues/new) or [start a discussion on the mailing list](https://groups.google.com/forum/#!forum/rget)\n\n- **Q**: Where did this idea come from?\n- **A**: This project builds upon a design doc for [Binary Transparency](https://wiki.mozilla.org/Security/Binary_Transparency) originally designed for the Mozilla Firefox project. \n\n- **Q**: Why not build this ontop of blockchain?\n- **A**: Blockchain could be used to create a similar guarantee. However, using the Certificate Transparency technology extends a number of advantages and was a pragmatic choice to get this project going: the industry momentum of certificate transparency log technology [(1)](https://ct.cloudflare.com/about), leverage existing web technologies like DNS and TLS [(2)](https://www.certificate-transparency.org/how-ct-works), and finally most practical applications that want to use blockchain with the web end up using a centralized gateway for speed and reliability [(3)](https://blog.cloudflare.com/cloudflare-ethereum-gateway/)[(4)](https://infura.io/docs/ethereum/json-rpc/eth_blockNumber). Perhaps as the bridge between the web and blockchain matures it will become a more practical option.\n\n- **Q**: Why not use GPG keys or other public key signing?\n- **A**: This is complimentary to public key signing! Public key signing asserts that someone with access to the private key signed the exact content. But, the private key can be used to generate an unlimited number of signatures for different content. If the URLs contents are both signed and logged in the URL content record then there is a guarantee that both the owner of the private key signed the content AND the content being fetched is cryptographically identical to the content other people are fetching using rget.\n\n- **Q**: Where does the name rget come from?\n- **A**: The \"r\" stands for recorder, as in a clerk who records or processes records. In many governments a Recorder of Deeds (aka Registrar General, County Clerk, etc) is an official who is tasked with recording and maintaining important public records of real property. Similarly this project aims to maintain a public record of internet property in the form of the cryptographic digest of certain URLs and provide tools to verify those records. The \"get\" comes from the HTTP GET verb and other tools like Wget.\n\n- **Q**: What are examples of practical attacks this could mitigate?\n- **A**: A well known example is the Feb. 2016 attack on the Linux Mint project where an attacker replaced a version of a Linux Mint release with a new version that included a backdoor vulnerability. With luck this was detected and mitigated within a day, however, there are likely many projects that have been attacked in a similar way without catching the attack. Further, the project could not make a strong assurance to the community on how long they were vulnerable, only stating \"As far as we know, the only compromised edition was Linux Mint 17.3 Cinnamon edition.\". By ensuring the cryptographic digests of all releases end up in a publicly audited log the project could have stated exactly when the content changed and potentially used a Certificate Transparency monitor to get notified quickly once it happened.\n\n- **Q**: What happens if an attacker can modify SHA256SUMS files?\n- **A**: The modification will show up in the logs. As an example the v1.0 release of the philips/releases-test project was modified several times. And this appears in the log on both [crt.sh](https://crt.sh/?q=%.v1-0.releases-test.philips.github.com.recorder.merklecounty.com) and [Google's Transparency Report](https://transparencyreport.google.com/https/certificates?hl=en&cert_search_auth=&cert_search_cert=&cert_search=include_expired:false;include_subdomains:true;domain:v1-0.releases-test.philips.github.com.recorder.merklecounty.com&lu=cert_search)\n"
 },
 {
  "repo": "CardanoSharp/cardanosharp-wallet",
  "language": "C#",
  "readme_contents": "# CardanoSharp.Wallet \r\n[![Build status](https://ci.appveyor.com/api/projects/status/knh87k86mf7gbxyo?svg=true)](https://ci.appveyor.com/project/nothingalike/cardanosharp-wallet/branch/main) [![Test status](https://img.shields.io/appveyor/tests/nothingalike/cardanosharp-wallet)](https://ci.appveyor.com/project/nothingalike/cardanosharp-wallet/branch/main) [![NuGet Version](https://img.shields.io/nuget/v/CardanoSharp.Wallet.svg?style=flat)](https://www.nuget.org/packages/CardanoSharp.Wallet/) ![NuGet Downloads](https://img.shields.io/nuget/dt/CardanoSharp.Wallet.svg)\r\n\r\nCardanoSharp Wallet is a .NET library for Creating/Managing Wallets and Building/Signing Transactions.\r\n\r\n## Getting Started\r\n\r\nCardanoSharp.Wallet is installed from NuGet.\r\n\r\n```sh\r\nInstall-Package CardanoSharp.Wallet\r\n```\r\n\r\n## Create Mnemonics\r\n\r\nThe `MnemonicService` has operations tbat help with *generating* and *restoring* Mnemonics. It is built for use in DI containers (ie. the interface `IMnemonicService`).\r\n\r\n```cs\r\nIMnemonicService service = new MnemonicService();\r\n```\r\n\r\n### Generate Mnemonic\r\n\r\n```cs\r\nIMnemonicService service = new MnemonicService();\r\nMnemonic rememberMe = service.Generate(24, WordLists.English);\r\nSystem.Console.WriteLine(rememberMe.Words);\r\n```\r\n\r\n### Restore Mnemonic\r\n\r\n```cs\r\nstring words = \"art forum devote street sure rather head chuckle guard poverty release quote oak craft enemy\";\r\nMnemonic mnemonic = MnemonicService.Restore(words);\r\n```\r\n\r\n## Create Private and Public Keys\r\n\r\nUse powerful extensions to create and derive keys.\r\n\r\n```cs\r\n// The rootKey is a PrivateKey made of up of the \r\n//  - byte[] Key\r\n//  - byte[] Chaincode\r\nPrivateKey rootKey = mnemonic.GetRootKey();\r\n\r\n// This path will give us our Payment Key on index 0\r\nstring paymentPath = $\"m/1852'/1815'/0'/0/0\";\r\n// The paymentPrv is Private Key of the specified path.\r\nPrivateKey paymentPrv = rootKey.Derive(paymentPath);\r\n// Get the Public Key from the Private Key\r\nPublicKey paymentPub = paymentPrv.GetPublicKey(false);\r\n\r\n// This path will give us our Stake Key on index 0\r\nstring stakePath = $\"m/1852'/1815'/0'/2/0\";\r\n// The stakePrv is Private Key of the specified path\r\nPrivateKey stakePrv = rootKey.Derive(stakePath);\r\n// Get the Public Key from the Stake Private Key\r\nPublicKey stakePub = stakePrv.GetPublicKey(false);\r\n```\r\n\r\n > If you want to learn more about key paths, read this article [About Address Derivation](https://github.com/input-output-hk/technical-docs/blob/main/cardano-components/cardano-wallet/doc/About-Address-Derivation.md)\r\n\r\n## Create Addresses\r\n\r\nThe `AddressService` lets you Create Addresses from Keys. It is built for use in DI containers (ie. the interface `IAddressService`)\r\n\r\n```cs\r\nIAddressService addressService = new AddressService();\r\n```\r\n\r\nFrom the public keys we generated above, we can now get the public address.\r\n\r\n```csharp\r\n// add using\r\nusing CardanoSharp.Wallet.Models.Addresses;\r\n\r\n// Creating Addresses require the Public Payment and Stake Keys\r\nAddress baseAddr = addressService.GetAddress(\r\n    paymentPub, \r\n    stakePub, \r\n    NetworkType.Testnet, \r\n    AddressType.Base);\r\n```\r\n\r\nIf you already have an address.\r\n\r\n```cs\r\nAddress baseAddr = new Address(\"addr_test1qz2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3jcu5d8ps7zex2k2xt3uqxgjqnnj83ws8lhrn648jjxtwq2ytjqp\");\r\n// Get Address Type\r\nAddressType addressType = baseAddr.AddressType;\r\n// Get Network Type\r\nNetworkType networkType = baseAddr.NetworkType\r\n// Output the original string address\r\nstring address = baseAddr.ToString();\r\n```\r\n\r\n## Fluent Key Derivation\r\n\r\nA fluent API helps navigate the derivation paths.\r\n\r\n```cs\r\n// Add using\r\nusing CardanoSharp.Wallet.Extensions.Models;\r\n\r\n// Restore a Mnemonic\r\nvar mnemonic = new MnemonicService().Restore(words);\r\n\r\n// Fluent derivation API\r\nvar derivation = mnemonic\r\n    .GetMasterNode(\"password\")      // IMasterNodeDerivation\r\n    .Derive(PurposeType.Shelley)    // IPurposeNodeDerivation\r\n    .Derive(CoinType.Ada)           // ICoinNodeDerivation\r\n    .Derive(0)                      // IAccountNodeDerivation\r\n    .Derive(RoleType.ExternalChain) // IRoleNodeDerivation\r\n    //or .Derive(RoleType.Staking) \r\n    .Derive(0);                     // IIndexNodeDerivation\r\n\r\nPrivateKey privateKey = derivation.PrivateKey;\r\nPublicKey publicKey = derivation.PublicKey;\r\n```\r\n\r\n## Build and Sign Transactions\r\n\r\nCardanoSharp.Wallet requires input from the chain in order to build transactions. Lets assume we have gathered the following information.\r\n\r\n```cs\r\nuint currentSlot = 40000000;\r\nulong minFeeA = 44;\r\nulong minFeeB = 155381;\r\nstring inputTx = \"0000000000000000000000000000000000000000000000000000000000000000\";\r\n```\r\n\r\nLets derive a few keys to use while building transactions.\r\n\r\n```cs\r\n// Derive down to our Account Node\r\nvar accountNode = rootKey.Derive()\r\n    .Derive(PurposeType.Shelley)\r\n    .Derive(CoinType.Ada)\r\n    .Derive(0);\r\n\r\n// Derive our Change Node on Index 0\r\nvar changeNode = accountNode\r\n    .Derive(RoleType.InternalChain) \r\n    .Derive(0);\r\n\r\n// Derive our Staking Node on Index 0\r\nvar stakingNode = accountNode\r\n    .Derive(RoleType.Staking) \r\n    .Derive(0);\r\n\r\n// Deriving our Payment Node\r\n//  note: We did not derive down to the index.\r\nvar paymentNode = accountNode\r\n    .Derive(RoleType.ExternalChain);\r\n```\r\n\r\n## Simple Transaction\r\n\r\nLets assume the following...\r\n\r\n- You have 100 ADA on path:        `m/1852'/1815'/0'/0/0`\r\n- You want to send 25 ADA to path: `m/1852'/1815'/0'/0/1`\r\n\r\n### Build Transaction Body\r\n\r\n```cs\r\n// Generate the Recieving Address\r\nAddress paymentAddr = addressService.GetAddress(\r\n    paymentNode.Derive(1).PublicKey, \r\n    stakingNode.PublicKey, \r\n    NetworkType.Testnet, \r\n    AddressType.Base);\r\n\r\n// Generate an Address for changes\r\nAddress changeAddr = addressService.GetAddress(\r\n    changeNode.PublicKey, \r\n    stakingNode.PublicKey, \r\n    NetworkType.Testnet, \r\n    AddressType.Base);\r\n\r\nvar transactionBody = TransactionBodyBuilder.Create\r\n    .AddInput(inputTx, 0)\r\n    .AddOutput(paymentAddr, 25)\r\n    .AddOutput(changeAddr, 75)\r\n    .SetTtl(currentSlot + 1000)\r\n    .SetFee(0)\r\n    .Build();\r\n```\r\n\r\n### Build Transaction Witnesses\r\n\r\nFor this simple transaction we really only need to add our keys. This is how we sign our transactions.\r\n\r\n```cs\r\n// Derive Sender Keys\r\nvar senderKeys = paymentNode.Derive(0);\r\n\r\nvar witnesses = TransactionWitnessSetBuilder.Create\r\n    .AddVKeyWitness(senderKeys.PublicKey, senderKeys.PrivateKey);\r\n```\r\n\r\n### Calculate Fee\r\n\r\n```cs\r\n// Create a Transaction\r\nvar transaction = TransactionBuilder.Create\r\n    .SetBody(transactionBody)\r\n    .SetWitnesses(witnesses)\r\n    .Build();\r\n\r\n// Calculate Fee\r\nvar fee = transaction.CalculateFee(minFeeA, minFeeB);\r\n\r\n// Update Fee and Rebuild\r\ntransactionBody.SetFee(fee);\r\ntransaction = transactionBuilder.Build();\r\ntransaction.TransactionBody.TransactionOutputs.Last().Value.Coin -= fee;\r\n```\r\n\r\n## Metadata Transaction\r\n\r\nBuilding the Body and Witnesses are the same as the Simple Transaction.\r\n\r\n> If you would like to read more about Metadata, please read this article on [Tx Metadata](https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/tx-metadata.md)\r\n\r\n```cs\r\n// Build Metadata and Add to Transaction\r\nvar auxData = AuxiliaryDataBuilder.Create\r\n    .AddMetadata(1234, new { name = \"simple message\" });\r\n\r\nvar transaction = TransactionBuilder.Create\r\n    .SetBody(transactionBody)\r\n    .SetWitnesses(witnesses)\r\n    .SetAuxData(auxData)\r\n    .Build();\r\n```\r\n\r\n## Minting Transaction\r\n\r\nBefore we can mint a token, we need to create a policy. \r\n\r\n> If you would like to read more about policy scripts, please read this article on [Simple Scripts](https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md).\r\n\r\n```cs\r\n// Generate a Key Pair for your new Policy\r\nvar keyPair = KeyPair.GenerateKeyPair();\r\nvar policySkey = keyPair.PrivateKey;\r\nvar policyVkey = keyPair.PublicKey;\r\nvar policyKeyHash = HashUtility.Blake2b244(policyVkey.Key);\r\n\r\n// Create a Policy Script with a type of Script All\r\nvar policyScript = ScriptAllBuilder.Create\r\n    .SetScript(NativeScriptBuilder.Create.SetKeyHash(policyKeyHash))\r\n    .Build();\r\n\r\n// Generate the Policy Id\r\nvar policyId = policyScript.GetPolicyId();\r\n```\r\n\r\nNow lets define our token.\r\n\r\n```cs\r\n// Create the AWESOME Token\r\nstring tokenName = \"AWESOME\";\r\nuint tokenQuantity = 1;\r\n\r\nvar tokenAsset = TokenBundleBuilder.Create\r\n    .AddToken(policyId, tokenName.ToBytes(), tokenQuantity);\r\n```\r\n\r\nWhen minting, we will need to add our new token to one of the outputs of our Transaction Body.\r\n\r\n```cs\r\n// Generate an Address to send the Token\r\nAddress baseAddr = addressService.GetAddress(\r\n    paymentNode.Derive(1).PublicKey, \r\n    stakingNode.PublicKey, \r\n    NetworkType.Testnet, \r\n    AddressType.Base);\r\n\r\n// Build Transaction Body with Token Bundle\r\nvar transactionBody = TransactionBodyBuilder.Create\r\n    .AddInput(inputTx, 0)\r\n    // Sending to Base Address, includes 100 ADA and the Token we are minting\r\n    .AddOutput(baseAddr, 100, tokenAsset)\r\n    .SetTtl(currentSlot + 1000)\r\n    .SetFee(0)\r\n    .Build();\r\n```\r\n\r\n## Handling Token Bundles\r\n\r\nWhen building transaction, we need to ensure we handle tokens properly.\r\n\r\n```cs\r\nvar tokenBundle = TokenBundleBuilder.Create\r\n    .AddToken(policyId, \"Token1\".ToBytes(), 100)\r\n    .AddToken(policyId, \"Token2\".ToBytes(), 200);\r\n\r\nAddress baseAddr = addressService.GetAddress(\r\n    paymentNode.Derive(1).PublicKey, \r\n    stakingNode.PublicKey, \r\n    NetworkType.Testnet, \r\n    AddressType.Base);\r\n\r\nvar transactionBody = TransactionBodyBuilder.Create\r\n    .AddInput(inputTx, 0)\r\n    .AddOutput(baseAddr, 2, tokenBundle)\r\n    .AddOutput(changeAddr, 98)\r\n    .SetTtl(currentSlot + 1000)\r\n    .SetFee(0)\r\n    .Build();\r\n```\r\n\r\n## Serialize the Transaction\r\n```cs\r\nvar signedTx = transaction.Serialize();\r\n```\r\n"
 }
]